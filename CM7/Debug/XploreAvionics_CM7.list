
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e618  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800e8b8  0800e8b8  0001e8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ebc4  0800ebc4  0001ebc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ebcc  0800ebcc  0001ebcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ebd4  0800ebd4  0001ebd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800ebd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006c80  200001e8  0800edc0  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006e68  0800edc0  00026e68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00057057  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000089c7  00000000  00000000  0007726d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002738  00000000  00000000  0007fc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000023f0  00000000  00000000  00082370  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004b850  00000000  00000000  00084760  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002f114  00000000  00000000  000cffb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001b38fc  00000000  00000000  000ff0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002b29c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ab94  00000000  00000000  002b2a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e8a0 	.word	0x0800e8a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800e8a0 	.word	0x0800e8a0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f4:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <SystemInit+0x104>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a3e      	ldr	r2, [pc, #248]	; (80006f4 <SystemInit+0x104>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000604:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <SystemInit+0x104>)
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	4a3a      	ldr	r2, [pc, #232]	; (80006f4 <SystemInit+0x104>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000610:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <SystemInit+0x108>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 030f 	and.w	r3, r3, #15
 8000618:	2b06      	cmp	r3, #6
 800061a:	d807      	bhi.n	800062c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800061c:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <SystemInit+0x108>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f023 030f 	bic.w	r3, r3, #15
 8000624:	4a34      	ldr	r2, [pc, #208]	; (80006f8 <SystemInit+0x108>)
 8000626:	f043 0307 	orr.w	r3, r3, #7
 800062a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <SystemInit+0x10c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <SystemInit+0x10c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <SystemInit+0x10c>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <SystemInit+0x10c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	492e      	ldr	r1, [pc, #184]	; (80006fc <SystemInit+0x10c>)
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <SystemInit+0x110>)
 8000646:	4013      	ands	r3, r2
 8000648:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <SystemInit+0x108>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	2b07      	cmp	r3, #7
 8000654:	d907      	bls.n	8000666 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemInit+0x108>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f023 030f 	bic.w	r3, r3, #15
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <SystemInit+0x108>)
 8000660:	f043 0307 	orr.w	r3, r3, #7
 8000664:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemInit+0x10c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemInit+0x10c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemInit+0x10c>)
 800067a:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemInit+0x114>)
 800067c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemInit+0x10c>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemInit+0x118>)
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemInit+0x10c>)
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemInit+0x11c>)
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <SystemInit+0x10c>)
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <SystemInit+0x11c>)
 8000694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <SystemInit+0x10c>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <SystemInit+0x10c>)
 800069e:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemInit+0x11c>)
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <SystemInit+0x10c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <SystemInit+0x10c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <SystemInit+0x10c>)
 80006ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x10c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SystemInit+0x120>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <SystemInit+0x120>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <SystemInit+0x124>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <SystemInit+0x128>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006d2:	d202      	bcs.n	80006da <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <SystemInit+0x12c>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <SystemInit+0x130>)
 80006dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006e0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SystemInit+0x104>)
 80006e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	580000c0 	.word	0x580000c0
 8000714:	5c001000 	.word	0x5c001000
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	51008108 	.word	0x51008108
 8000720:	52004000 	.word	0x52004000

08000724 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_CRC_Init+0x3c>)
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <MX_CRC_Init+0x40>)
 800072c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_CRC_Init+0x3c>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_CRC_Init+0x3c>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_CRC_Init+0x3c>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_CRC_Init+0x3c>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_CRC_Init+0x3c>)
 8000748:	2201      	movs	r2, #1
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_CRC_Init+0x3c>)
 800074e:	f002 f989 	bl	8002a64 <HAL_CRC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000758:	f000 fce4 	bl	8001124 <Error_Handler>
  }

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20005ee8 	.word	0x20005ee8
 8000764:	58024c00 	.word	0x58024c00

08000768 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <HAL_CRC_MspInit+0x3c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10e      	bne.n	8000798 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 8000782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	58024c00 	.word	0x58024c00
 80007a8:	58024400 	.word	0x58024400

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b8:	4a3f      	ldr	r2, [pc, #252]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	200d      	movs	r0, #13
 80007f4:	f002 f882 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80007f8:	200d      	movs	r0, #13
 80007fa:	f002 f899 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	200e      	movs	r0, #14
 8000804:	f002 f87a 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000808:	200e      	movs	r0, #14
 800080a:	f002 f891 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2105      	movs	r1, #5
 8000812:	200f      	movs	r0, #15
 8000814:	f002 f872 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000818:	200f      	movs	r0, #15
 800081a:	f002 f889 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	2010      	movs	r0, #16
 8000824:	f002 f86a 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000828:	2010      	movs	r0, #16
 800082a:	f002 f881 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	2011      	movs	r0, #17
 8000834:	f002 f862 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000838:	2011      	movs	r0, #17
 800083a:	f002 f879 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	202f      	movs	r0, #47	; 0x2f
 8000844:	f002 f85a 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000848:	202f      	movs	r0, #47	; 0x2f
 800084a:	f002 f871 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2038      	movs	r0, #56	; 0x38
 8000854:	f002 f852 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000858:	2038      	movs	r0, #56	; 0x38
 800085a:	f002 f869 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2039      	movs	r0, #57	; 0x39
 8000864:	f002 f84a 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000868:	2039      	movs	r0, #57	; 0x39
 800086a:	f002 f861 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	203c      	movs	r0, #60	; 0x3c
 8000874:	f002 f842 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000878:	203c      	movs	r0, #60	; 0x3c
 800087a:	f002 f859 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	2044      	movs	r0, #68	; 0x44
 8000884:	f002 f83a 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000888:	2044      	movs	r0, #68	; 0x44
 800088a:	f002 f851 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2045      	movs	r0, #69	; 0x45
 8000894:	f002 f832 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000898:	2045      	movs	r0, #69	; 0x45
 800089a:	f002 f849 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2046      	movs	r0, #70	; 0x46
 80008a4:	f002 f82a 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008a8:	2046      	movs	r0, #70	; 0x46
 80008aa:	f002 f841 	bl	8002930 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Create the thread(s) */
  /* creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 80008c0:	f00c f9c4 	bl	800cc4c <initCortexM7>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <MX_GPIO_Init+0x104>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <MX_GPIO_Init+0x104>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_GPIO_Init+0x104>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <MX_GPIO_Init+0x104>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a36      	ldr	r2, [pc, #216]	; (80009cc <MX_GPIO_Init+0x104>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <MX_GPIO_Init+0x104>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <MX_GPIO_Init+0x104>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a2e      	ldr	r2, [pc, #184]	; (80009cc <MX_GPIO_Init+0x104>)
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_GPIO_Init+0x104>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_GPIO_Init+0x104>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a27      	ldr	r2, [pc, #156]	; (80009cc <MX_GPIO_Init+0x104>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_GPIO_Init+0x104>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_GPIO_Init+0x104>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <MX_GPIO_Init+0x104>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_GPIO_Init+0x104>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_GPIO_Init+0x104>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_GPIO_Init+0x104>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_GPIO_Init+0x104>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_GPIO_Init+0x104>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <MX_GPIO_Init+0x104>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_GPIO_Init+0x104>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_GPIO_Init+0x104>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <MX_GPIO_Init+0x104>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_GPIO_Init+0x104>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

}
 80009be:	bf00      	nop
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	58024400 	.word	0x58024400

080009d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009d6:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <MX_I2C1_Init+0x7c>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_I2C1_Init+0x80>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a0c:	f004 fb32 	bl	8005074 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fb85 	bl	8001124 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a1e:	f004 fbb9 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fb7c 	bl	8001124 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a30:	f004 fbfb 	bl	800522a <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fb73 	bl	8001124 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f004 fc40 	bl	80052c4 <HAL_I2CEx_EnableFastModePlus>

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20005f58 	.word	0x20005f58
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	00401242 	.word	0x00401242

08000a54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_I2C2_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <MX_I2C2_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a90:	f004 faf0 	bl	8005074 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fb43 	bl	8001124 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000aa2:	f004 fb77 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 fb3a 	bl	8001124 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000ab4:	f004 fbb9 	bl	800522a <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fb31 	bl	8001124 <Error_Handler>
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20005fa4 	.word	0x20005fa4
 8000acc:	40005800 	.word	0x40005800
 8000ad0:	10c0ecff 	.word	0x10c0ecff

08000ad4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C3_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_I2C3_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b10:	f004 fab0 	bl	8005074 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 fb03 	bl	8001124 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b22:	f004 fb37 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 fafa 	bl	8001124 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b34:	f004 fb79 	bl	800522a <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 faf1 	bl	8001124 <Error_Handler>
  }

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20005f0c 	.word	0x20005f0c
 8000b4c:	40005c00 	.word	0x40005c00
 8000b50:	10c0ecff 	.word	0x10c0ecff

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a4f      	ldr	r2, [pc, #316]	; (8000cb0 <HAL_I2C_MspInit+0x15c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10f      	bne.n	8000b96 <HAL_I2C_MspInit+0x42>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b7c:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b86:	4b4b      	ldr	r3, [pc, #300]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b94:	e088      	b.n	8000ca8 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a47      	ldr	r2, [pc, #284]	; (8000cb8 <HAL_I2C_MspInit+0x164>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d12f      	bne.n	8000c00 <HAL_I2C_MspInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4838      	ldr	r0, [pc, #224]	; (8000cbc <HAL_I2C_MspInit+0x168>)
 8000bdc:	f004 f86c 	bl	8004cb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000be6:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
}
 8000bfe:	e053      	b.n	8000ca8 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <HAL_I2C_MspInit+0x16c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d14e      	bne.n	8000ca8 <HAL_I2C_MspInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <HAL_I2C_MspInit+0x170>)
 8000c64:	f004 f828 	bl	8004cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <HAL_I2C_MspInit+0x174>)
 8000c86:	f004 f817 	bl	8004cb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c90:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	40005800 	.word	0x40005800
 8000cbc:	58020400 	.word	0x58020400
 8000cc0:	40005c00 	.word	0x40005c00
 8000cc4:	58020800 	.word	0x58020800
 8000cc8:	58020000 	.word	0x58020000

08000ccc <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <MX_IWDG1_Init+0x38>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ce2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000ce6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cee:	f004 fb0d 	bl	800530c <HAL_IWDG_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000cf8:	f000 fa14 	bl	8001124 <Error_Handler>
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20005ff0 	.word	0x20005ff0
 8000d04:	58004800 	.word	0x58004800

08000d08 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d10:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <SCB_EnableICache+0x3c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <SCB_EnableICache+0x3c>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <SCB_EnableICache+0x3c>)
 8000d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d34:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d60:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0b5b      	lsrs	r3, r3, #13
 8000d66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d6a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d74:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	015a      	lsls	r2, r3, #5
 8000d7a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d7e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d84:	490f      	ldr	r1, [pc, #60]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1ef      	bne.n	8000d76 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	60fa      	str	r2, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <SCB_EnableDCache+0x24>
 8000da0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dae:	6153      	str	r3, [r2, #20]
 8000db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dce:	f000 f94f 	bl	8001070 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000dd2:	f7ff ff99 	bl	8000d08 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000dd6:	f7ff ffb7 	bl	8000d48 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000de0:	bf00      	nop
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <main+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <main+0x30>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dcf4      	bgt.n	8000de2 <main+0x1a>
  if ( timeout < 0 )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	da01      	bge.n	8000e02 <main+0x3a>
  {
  Error_Handler();
 8000dfe:	f000 f991 	bl	8001124 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f001 fc5b 	bl	80026bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f855 	bl	8000eb4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <main+0xe8>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <main+0xe8>)
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <main+0xe8>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f004 f8f5 	bl	8005018 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 f90b 	bl	800504c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e3c:	bf00      	nop
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <main+0xe8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <main+0x8c>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dcf4      	bgt.n	8000e3e <main+0x76>
if ( timeout < 0 )
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da01      	bge.n	8000e5e <main+0x96>
{
Error_Handler();
 8000e5a:	f000 f963 	bl	8001124 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f7ff fd33 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e62:	f7ff fca3 	bl	80007ac <MX_DMA_Init>
  MX_CRC_Init();
 8000e66:	f7ff fc5d 	bl	8000724 <MX_CRC_Init>
  MX_I2C1_Init();
 8000e6a:	f7ff fdb1 	bl	80009d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e6e:	f7ff fdf1 	bl	8000a54 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000e72:	f7ff fe2f 	bl	8000ad4 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000e76:	f000 f959 	bl	800112c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000e7a:	f000 fa85 	bl	8001388 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e7e:	f000 fad9 	bl	8001434 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e82:	f000 fb2d 	bl	80014e0 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000e86:	f000 fb81 	bl	800158c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000e8a:	f001 f837 	bl	8001efc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e8e:	f001 f881 	bl	8001f94 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e92:	f001 f8cb 	bl	800202c <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000e96:	f7ff ff19 	bl	8000ccc <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 8000e9a:	f001 f913 	bl	80020c4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000e9e:	f000 fa31 	bl	8001304 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ea2:	f008 fe8d 	bl	8009bc0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ea6:	f7ff fd09 	bl	80008bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000eaa:	f008 febd 	bl	8009c28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <main+0xe6>
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0cc      	sub	sp, #304	; 0x130
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ebe:	224c      	movs	r2, #76	; 0x4c
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b ffc3 	bl	800ce4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ecc:	2220      	movs	r2, #32
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00b ffbc 	bl	800ce4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4618      	mov	r0, r3
 8000edc:	23bc      	movs	r3, #188	; 0xbc
 8000ede:	461a      	mov	r2, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f00b ffb4 	bl	800ce4e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ee6:	2004      	movs	r0, #4
 8000ee8:	f004 fa66 	bl	80053b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <SystemClock_Config+0x1b0>)
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <SystemClock_Config+0x1b0>)
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <SystemClock_Config+0x1b0>)
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	4b57      	ldr	r3, [pc, #348]	; (8001068 <SystemClock_Config+0x1b4>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a56      	ldr	r2, [pc, #344]	; (8001068 <SystemClock_Config+0x1b4>)
 8000f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <SystemClock_Config+0x1b4>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f26:	bf00      	nop
 8000f28:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <SystemClock_Config+0x1b4>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f34:	d1f8      	bne.n	8000f28 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000f36:	230b      	movs	r3, #11
 8000f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f80:	230c      	movs	r3, #12
 8000f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fb22 	bl	80055e0 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000fa2:	f000 f8bf 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	233f      	movs	r3, #63	; 0x3f
 8000fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fc4:	2340      	movs	r3, #64	; 0x40
 8000fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fd2:	2340      	movs	r3, #64	; 0x40
 8000fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 ff0e 	bl	8005e00 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000fea:	f000 f89b 	bl	8001124 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <SystemClock_Config+0x1b8>)
 8000ff4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_QSPI;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2200      	movs	r2, #0
 8001004:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2200      	movs	r2, #0
 800100c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2200      	movs	r2, #0
 8001014:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2203      	movs	r2, #3
 800101c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2218      	movs	r2, #24
 8001024:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	2200      	movs	r2, #0
 8001036:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f005 fa9e 	bl	800658c <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 8001056:	f000 f865 	bl	8001124 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58000400 	.word	0x58000400
 8001068:	58024800 	.word	0x58024800
 800106c:	0240b01b 	.word	0x0240b01b

08001070 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001082:	f001 fc63 	bl	800294c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001086:	2301      	movs	r3, #1
 8001088:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800108a:	2300      	movs	r3, #0
 800108c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MPU_Config+0x8c>)
 8001090:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001092:	230e      	movs	r3, #14
 8001094:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001096:	2300      	movs	r3, #0
 8001098:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800109a:	2301      	movs	r3, #1
 800109c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800109e:	2303      	movs	r3, #3
 80010a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010b2:	463b      	mov	r3, r7
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fc7d 	bl	80029b4 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80010be:	2301      	movs	r3, #1
 80010c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MPU_Config+0x8c>)
 80010c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80010c6:	2307      	movs	r3, #7
 80010c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010d2:	2303      	movs	r3, #3
 80010d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010da:	2301      	movs	r3, #1
 80010dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010e6:	463b      	mov	r3, r7
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fc63 	bl	80029b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f001 fc42 	bl	8002978 <HAL_MPU_Enable>

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	30040000 	.word	0x30040000

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f001 fb0f 	bl	8002734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40001400 	.word	0x40001400

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112a:	e7fe      	b.n	800112a <Error_Handler+0x6>

0800112c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_QUADSPI_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_QUADSPI_Init+0x50>)
 800113e:	2201      	movs	r2, #1
 8001140:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_QUADSPI_Init+0x50>)
 800114a:	2201      	movs	r2, #1
 800114c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_QUADSPI_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_QUADSPI_Init+0x50>)
 8001168:	f004 f980 	bl	800546c <HAL_QSPI_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001172:	f7ff ffd7 	bl	8001124 <Error_Handler>
  }

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20006000 	.word	0x20006000
 8001180:	52005000 	.word	0x52005000

08001184 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a52      	ldr	r2, [pc, #328]	; (80012ec <HAL_QSPI_MspInit+0x168>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	f040 809e 	bne.w	80012e4 <HAL_QSPI_MspInit+0x160>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011ae:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011b8:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_QSPI_MspInit+0x16c>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800123e:	2304      	movs	r3, #4
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800124e:	2309      	movs	r3, #9
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4826      	ldr	r0, [pc, #152]	; (80012f4 <HAL_QSPI_MspInit+0x170>)
 800125a:	f003 fd2d 	bl	8004cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 800125e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001270:	2309      	movs	r3, #9
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	481f      	ldr	r0, [pc, #124]	; (80012f8 <HAL_QSPI_MspInit+0x174>)
 800127c:	f003 fd1c 	bl	8004cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001292:	230a      	movs	r3, #10
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <HAL_QSPI_MspInit+0x174>)
 800129e:	f003 fd0b 	bl	8004cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012b4:	2309      	movs	r3, #9
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <HAL_QSPI_MspInit+0x178>)
 80012c0:	f003 fcfa 	bl	8004cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012d4:	230a      	movs	r3, #10
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4808      	ldr	r0, [pc, #32]	; (8001300 <HAL_QSPI_MspInit+0x17c>)
 80012e0:	f003 fcea 	bl	8004cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80012e4:	bf00      	nop
 80012e6:	3730      	adds	r7, #48	; 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	52005000 	.word	0x52005000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58021000 	.word	0x58021000
 80012f8:	58021400 	.word	0x58021400
 80012fc:	58020c00 	.word	0x58020c00
 8001300:	58021800 	.word	0x58021800

08001304 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_RTC_Init+0x48>)
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <MX_RTC_Init+0x4c>)
 800130c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_RTC_Init+0x48>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_RTC_Init+0x48>)
 8001316:	227f      	movs	r2, #127	; 0x7f
 8001318:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_RTC_Init+0x48>)
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_RTC_Init+0x48>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_RTC_Init+0x48>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_RTC_Init+0x48>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_RTC_Init+0x48>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_RTC_Init+0x48>)
 800133a:	f006 fc27 	bl	8007b8c <HAL_RTC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001344:	f7ff feee 	bl	8001124 <Error_Handler>
  }

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000604c 	.word	0x2000604c
 8001350:	58004000 	.word	0x58004000

08001354 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_RTC_MspInit+0x2c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d105      	bne.n	8001372 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_RTC_MspInit+0x30>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_RTC_MspInit+0x30>)
 800136c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	58004000 	.word	0x58004000
 8001384:	58024400 	.word	0x58024400

08001388 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_SPI1_Init+0xa4>)
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <MX_SPI1_Init+0xa8>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_SPI1_Init+0xa4>)
 8001394:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_SPI1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_SPI1_Init+0xa4>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_SPI1_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_SPI1_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_SPI1_Init+0xa4>)
 80013b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_SPI1_Init+0xa4>)
 80013bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_SPI1_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_SPI1_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_SPI1_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_SPI1_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_SPI1_Init+0xa4>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_SPI1_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_SPI1_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_SPI1_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_SPI1_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI1_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_SPI1_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI1_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_SPI1_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI1_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_SPI1_Init+0xa4>)
 800141a:	f006 fcc3 	bl	8007da4 <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001424:	f7ff fe7e 	bl	8001124 <Error_Handler>
  }

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200063e8 	.word	0x200063e8
 8001430:	40013000 	.word	0x40013000

08001434 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_SPI2_Init+0xa4>)
 800143a:	4a28      	ldr	r2, [pc, #160]	; (80014dc <MX_SPI2_Init+0xa8>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001440:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_SPI2_Init+0xa4>)
 800144e:	2203      	movs	r2, #3
 8001450:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_SPI2_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001460:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001464:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800146c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_SPI2_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_SPI2_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_SPI2_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_SPI2_Init+0xa4>)
 80014c6:	f006 fc6d 	bl	8007da4 <HAL_SPI_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80014d0:	f7ff fe28 	bl	8001124 <Error_Handler>
  }

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20006070 	.word	0x20006070
 80014dc:	40003800 	.word	0x40003800

080014e0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <MX_SPI3_Init+0xa4>)
 80014e6:	4a28      	ldr	r2, [pc, #160]	; (8001588 <MX_SPI3_Init+0xa8>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <MX_SPI3_Init+0xa4>)
 80014ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <MX_SPI3_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_SPI3_Init+0xa4>)
 80014fa:	2203      	movs	r2, #3
 80014fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_SPI3_Init+0xa4>)
 800150c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001510:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001518:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_SPI3_Init+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_SPI3_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_SPI3_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <MX_SPI3_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_SPI3_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001566:	2200      	movs	r2, #0
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SPI3_Init+0xa4>)
 800156c:	2200      	movs	r2, #0
 800156e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_SPI3_Init+0xa4>)
 8001572:	f006 fc17 	bl	8007da4 <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800157c:	f7ff fdd2 	bl	8001124 <Error_Handler>
  }

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200061e8 	.word	0x200061e8
 8001588:	40003c00 	.word	0x40003c00

0800158c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_SPI4_Init+0xa4>)
 8001592:	4a28      	ldr	r2, [pc, #160]	; (8001634 <MX_SPI4_Init+0xa8>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_SPI4_Init+0xa4>)
 8001598:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800159c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015a6:	2203      	movs	r2, #3
 80015a8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015bc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_SPI4_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_SPI4_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_SPI4_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_SPI4_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_SPI4_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_SPI4_Init+0xa4>)
 800161c:	f006 fbc2 	bl	8007da4 <HAL_SPI_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001626:	f7ff fd7d 	bl	8001124 <Error_Handler>
  }

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20006360 	.word	0x20006360
 8001634:	40013400 	.word	0x40013400

08001638 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b090      	sub	sp, #64	; 0x40
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a93      	ldr	r2, [pc, #588]	; (80018a4 <HAL_SPI_MspInit+0x26c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d16b      	bne.n	8001732 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800165a:	4b93      	ldr	r3, [pc, #588]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 800165c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001660:	4a91      	ldr	r2, [pc, #580]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 8001662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800166a:	4b8f      	ldr	r3, [pc, #572]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 800166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001678:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_SPI_MspInit+0x274>)
 800167a:	4a8d      	ldr	r2, [pc, #564]	; (80018b0 <HAL_SPI_MspInit+0x278>)
 800167c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <HAL_SPI_MspInit+0x274>)
 8001680:	2225      	movs	r2, #37	; 0x25
 8001682:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001684:	4b89      	ldr	r3, [pc, #548]	; (80018ac <HAL_SPI_MspInit+0x274>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_SPI_MspInit+0x274>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001690:	4b86      	ldr	r3, [pc, #536]	; (80018ac <HAL_SPI_MspInit+0x274>)
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001698:	4b84      	ldr	r3, [pc, #528]	; (80018ac <HAL_SPI_MspInit+0x274>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800169e:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80016a4:	4b81      	ldr	r3, [pc, #516]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b2:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016b8:	487c      	ldr	r0, [pc, #496]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016ba:	f001 fabd 	bl	8002c38 <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_SPI_MspInit+0x90>
    {
      Error_Handler();
 80016c4:	f7ff fd2e 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a78      	ldr	r2, [pc, #480]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016cc:	67da      	str	r2, [r3, #124]	; 0x7c
 80016ce:	4a77      	ldr	r2, [pc, #476]	; (80018ac <HAL_SPI_MspInit+0x274>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80016d4:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016d6:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_SPI_MspInit+0x280>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80016da:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016dc:	2226      	movs	r2, #38	; 0x26
 80016de:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b71      	ldr	r3, [pc, #452]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f4:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fa:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001700:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001706:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 8001708:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800170c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170e:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001714:	4867      	ldr	r0, [pc, #412]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 8001716:	f001 fa8f 	bl	8002c38 <HAL_DMA_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8001720:	f7ff fd00 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 8001728:	679a      	str	r2, [r3, #120]	; 0x78
 800172a:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <HAL_SPI_MspInit+0x27c>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001730:	e222      	b.n	8001b78 <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a61      	ldr	r2, [pc, #388]	; (80018bc <HAL_SPI_MspInit+0x284>)
 8001738:	4293      	cmp	r3, r2
 800173a:	f040 80cd 	bne.w	80018d8 <HAL_SPI_MspInit+0x2a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800173e:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 8001750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176c:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_SPI_MspInit+0x270>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001798:	230c      	movs	r3, #12
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a8:	2305      	movs	r3, #5
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4843      	ldr	r0, [pc, #268]	; (80018c0 <HAL_SPI_MspInit+0x288>)
 80017b4:	f003 fa80 	bl	8004cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ca:	2305      	movs	r3, #5
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	483b      	ldr	r0, [pc, #236]	; (80018c4 <HAL_SPI_MspInit+0x28c>)
 80017d6:	f003 fa6f 	bl	8004cb8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 80017dc:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_SPI_MspInit+0x294>)
 80017de:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 80017e2:	2227      	movs	r2, #39	; 0x27
 80017e4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 80017f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 800180e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001812:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800181a:	482b      	ldr	r0, [pc, #172]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 800181c:	f001 fa0c 	bl	8002c38 <HAL_DMA_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_SPI_MspInit+0x1f2>
      Error_Handler();
 8001826:	f7ff fc7d 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 800182e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001830:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <HAL_SPI_MspInit+0x290>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream3;
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_SPI_MspInit+0x29c>)
 800183a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 800183e:	2228      	movs	r2, #40	; 0x28
 8001840:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001854:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 800186a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 8001878:	f001 f9de 	bl	8002c38 <HAL_DMA_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 8001882:	f7ff fc4f 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 800188a:	679a      	str	r2, [r3, #120]	; 0x78
 800188c:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_SPI_MspInit+0x298>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2105      	movs	r1, #5
 8001896:	2024      	movs	r0, #36	; 0x24
 8001898:	f001 f830 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800189c:	2024      	movs	r0, #36	; 0x24
 800189e:	f001 f847 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 80018a2:	e169      	b.n	8001b78 <HAL_SPI_MspInit+0x540>
 80018a4:	40013000 	.word	0x40013000
 80018a8:	58024400 	.word	0x58024400
 80018ac:	20006470 	.word	0x20006470
 80018b0:	40020010 	.word	0x40020010
 80018b4:	20006560 	.word	0x20006560
 80018b8:	40020028 	.word	0x40020028
 80018bc:	40003800 	.word	0x40003800
 80018c0:	58020800 	.word	0x58020800
 80018c4:	58020000 	.word	0x58020000
 80018c8:	200060f8 	.word	0x200060f8
 80018cc:	40020040 	.word	0x40020040
 80018d0:	200064e8 	.word	0x200064e8
 80018d4:	40020058 	.word	0x40020058
  else if(spiHandle->Instance==SPI3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4aa8      	ldr	r2, [pc, #672]	; (8001b80 <HAL_SPI_MspInit+0x548>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	f040 80b3 	bne.w	8001a4a <HAL_SPI_MspInit+0x412>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018e4:	4ba7      	ldr	r3, [pc, #668]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 80018e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ea:	4aa6      	ldr	r2, [pc, #664]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 80018ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018f4:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 80018f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a9e      	ldr	r2, [pc, #632]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b9c      	ldr	r3, [pc, #624]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001920:	4b98      	ldr	r3, [pc, #608]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a97      	ldr	r2, [pc, #604]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800193e:	2304      	movs	r3, #4
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800194e:	2307      	movs	r3, #7
 8001950:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	488b      	ldr	r0, [pc, #556]	; (8001b88 <HAL_SPI_MspInit+0x550>)
 800195a:	f003 f9ad 	bl	8004cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800195e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001970:	2306      	movs	r3, #6
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4884      	ldr	r0, [pc, #528]	; (8001b8c <HAL_SPI_MspInit+0x554>)
 800197c:	f003 f99c 	bl	8004cb8 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream4;
 8001980:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 8001982:	4a84      	ldr	r2, [pc, #528]	; (8001b94 <HAL_SPI_MspInit+0x55c>)
 8001984:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001986:	4b82      	ldr	r3, [pc, #520]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 8001988:	223d      	movs	r2, #61	; 0x3d
 800198a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800198c:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001998:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 800199a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800199e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a0:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a6:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019b2:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b8:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ba:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80019c0:	4873      	ldr	r0, [pc, #460]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019c2:	f001 f939 	bl	8002c38 <HAL_DMA_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_SPI_MspInit+0x398>
      Error_Handler();
 80019cc:	f7ff fbaa 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80019d6:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_SPI_MspInit+0x558>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019dc:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 80019de:	4a6f      	ldr	r2, [pc, #444]	; (8001b9c <HAL_SPI_MspInit+0x564>)
 80019e0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80019e2:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 80019e4:	223e      	movs	r2, #62	; 0x3e
 80019e6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e8:	4b6b      	ldr	r3, [pc, #428]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019f4:	4b68      	ldr	r3, [pc, #416]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 80019f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001a08:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a0e:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a14:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a16:	4b60      	ldr	r3, [pc, #384]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a1c:	485e      	ldr	r0, [pc, #376]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a1e:	f001 f90b 	bl	8002c38 <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_SPI_MspInit+0x3f4>
      Error_Handler();
 8001a28:	f7ff fb7c 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a30:	679a      	str	r2, [r3, #120]	; 0x78
 8001a32:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_SPI_MspInit+0x560>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	2033      	movs	r0, #51	; 0x33
 8001a3e:	f000 ff5d 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a42:	2033      	movs	r0, #51	; 0x33
 8001a44:	f000 ff74 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8001a48:	e096      	b.n	8001b78 <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI4)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a54      	ldr	r2, [pc, #336]	; (8001ba0 <HAL_SPI_MspInit+0x568>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f040 8091 	bne.w	8001b78 <HAL_SPI_MspInit+0x540>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a56:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001a5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	4a42      	ldr	r2, [pc, #264]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_SPI_MspInit+0x54c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001a92:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	4619      	mov	r1, r3
 8001aae:	483d      	ldr	r0, [pc, #244]	; (8001ba4 <HAL_SPI_MspInit+0x56c>)
 8001ab0:	f003 f902 	bl	8004cb8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream6;
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ab6:	4a3d      	ldr	r2, [pc, #244]	; (8001bac <HAL_SPI_MspInit+0x574>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001abc:	2253      	movs	r2, #83	; 0x53
 8001abe:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac0:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001af2:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001af4:	f001 f8a0 	bl	8002c38 <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_SPI_MspInit+0x4ca>
      Error_Handler();
 8001afe:	f7ff fb11 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001b06:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_SPI_MspInit+0x570>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream7;
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_SPI_MspInit+0x57c>)
 8001b12:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b16:	2254      	movs	r2, #84	; 0x54
 8001b18:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001b4c:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b4e:	f001 f873 	bl	8002c38 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_SPI_MspInit+0x524>
      Error_Handler();
 8001b58:	f7ff fae4 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b60:	679a      	str	r2, [r3, #120]	; 0x78
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_SPI_MspInit+0x578>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	2054      	movs	r0, #84	; 0x54
 8001b6e:	f000 fec5 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001b72:	2054      	movs	r0, #84	; 0x54
 8001b74:	f000 fedc 	bl	8002930 <HAL_NVIC_EnableIRQ>
}
 8001b78:	bf00      	nop
 8001b7a:	3740      	adds	r7, #64	; 0x40
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40003c00 	.word	0x40003c00
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58020400 	.word	0x58020400
 8001b8c:	58020800 	.word	0x58020800
 8001b90:	200065d8 	.word	0x200065d8
 8001b94:	40020070 	.word	0x40020070
 8001b98:	20006270 	.word	0x20006270
 8001b9c:	40020088 	.word	0x40020088
 8001ba0:	40013400 	.word	0x40013400
 8001ba4:	58021000 	.word	0x58021000
 8001ba8:	20006170 	.word	0x20006170
 8001bac:	400200a0 	.word	0x400200a0
 8001bb0:	200062e8 	.word	0x200062e8
 8001bb4:	400200b8 	.word	0x400200b8

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_MspInit+0x38>)
 8001bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_MspInit+0x38>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_MspInit+0x38>)
 8001bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	210f      	movs	r1, #15
 8001be0:	f06f 0001 	mvn.w	r0, #1
 8001be4:	f000 fe8a 	bl	80028fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58024400 	.word	0x58024400

08001bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b090      	sub	sp, #64	; 0x40
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	d827      	bhi.n	8001c52 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001c02:	2200      	movs	r2, #0
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	2037      	movs	r0, #55	; 0x37
 8001c08:	f000 fe78 	bl	80028fc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c0c:	2037      	movs	r0, #55	; 0x37
 8001c0e:	f000 fe8f 	bl	8002930 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_InitTick+0xc4>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_InitTick+0xc8>)
 8001c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1e:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_InitTick+0xc8>)
 8001c20:	f043 0320 	orr.w	r3, r3, #32
 8001c24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_InitTick+0xc8>)
 8001c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c36:	f107 0210 	add.w	r2, r7, #16
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fc61 	bl	8006508 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <HAL_InitTick+0x6a>
 8001c50:	e001      	b.n	8001c56 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e02b      	b.n	8001cae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c56:	f004 fc2b 	bl	80064b0 <HAL_RCC_GetPCLK1Freq>
 8001c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001c5c:	e004      	b.n	8001c68 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c5e:	f004 fc27 	bl	80064b0 <HAL_RCC_GetPCLK1Freq>
 8001c62:	4603      	mov	r3, r0
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_InitTick+0xcc>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	3b01      	subs	r3, #1
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_InitTick+0xd4>)
 8001c7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001c7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c82:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c88:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001c98:	f006 fc5b 	bl	8008552 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <HAL_InitTick+0xd0>)
 8001ca4:	f006 fcb6 	bl	8008614 <HAL_TIM_Base_Start_IT>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	e000      	b.n	8001cae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3740      	adds	r7, #64	; 0x40
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	20006650 	.word	0x20006650
 8001cc8:	40001400 	.word	0x40001400

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <DMA1_Stream2_IRQHandler+0x10>)
 8001cfe:	f001 fd3b 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200060f8 	.word	0x200060f8

08001d0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <DMA1_Stream3_IRQHandler+0x10>)
 8001d12:	f001 fd31 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200064e8 	.word	0x200064e8

08001d20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <DMA1_Stream4_IRQHandler+0x10>)
 8001d26:	f001 fd27 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200065d8 	.word	0x200065d8

08001d34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA1_Stream5_IRQHandler+0x10>)
 8001d3a:	f001 fd1d 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20006270 	.word	0x20006270

08001d48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA1_Stream6_IRQHandler+0x10>)
 8001d4e:	f001 fd13 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20006170 	.word	0x20006170

08001d5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <SPI2_IRQHandler+0x10>)
 8001d62:	f006 f917 	bl	8007f94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20006070 	.word	0x20006070

08001d70 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <DMA1_Stream7_IRQHandler+0x10>)
 8001d76:	f001 fcff 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200062e8 	.word	0x200062e8

08001d84 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <SPI3_IRQHandler+0x10>)
 8001d8a:	f006 f903 	bl	8007f94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200061e8 	.word	0x200061e8

08001d98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM7_IRQHandler+0x10>)
 8001d9e:	f006 fc6f 	bl	8008680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20006650 	.word	0x20006650

08001dac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA2_Stream0_IRQHandler+0x10>)
 8001db2:	f001 fce1 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200069f8 	.word	0x200069f8

08001dc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <DMA2_Stream1_IRQHandler+0x10>)
 8001dc6:	f001 fcd7 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20006908 	.word	0x20006908

08001dd4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <DMA2_Stream4_IRQHandler+0x10>)
 8001dda:	f001 fccd 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000669c 	.word	0x2000669c

08001de8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <ETH_IRQHandler+0x10>)
 8001dee:	f002 fe29 	bl	8004a44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20006d7c 	.word	0x20006d7c

08001dfc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA2_Stream5_IRQHandler+0x10>)
 8001e02:	f001 fcb9 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20006a70 	.word	0x20006a70

08001e10 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA2_Stream6_IRQHandler+0x10>)
 8001e16:	f001 fcaf 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20006714 	.word	0x20006714

08001e24 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <DMA2_Stream7_IRQHandler+0x10>)
 8001e2a:	f001 fca5 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20006980 	.word	0x20006980

08001e38 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <SPI4_IRQHandler+0x10>)
 8001e3e:	f006 f8a9 	bl	8007f94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20006360 	.word	0x20006360

08001e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
	return 1;
 8001e50:	2301      	movs	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_kill>:

int _kill(int pid, int sig)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e66:	f00a ffab 	bl	800cdc0 <__errno>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	2316      	movs	r3, #22
 8001e6e:	6013      	str	r3, [r2, #0]
	return -1;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_exit>:

void _exit (int status)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ffe7 	bl	8001e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e8e:	e7fe      	b.n	8001e8e <_exit+0x12>

08001e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <_sbrk+0x5c>)
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <_sbrk+0x60>)
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <_sbrk+0x64>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <_sbrk+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec0:	f00a ff7e 	bl	800cdc0 <__errno>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ece:	e009      	b.n	8001ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <_sbrk+0x64>)
 8001ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20020000 	.word	0x20020000
 8001ef0:	00000400 	.word	0x00000400
 8001ef4:	20000204 	.word	0x20000204
 8001ef8:	20006e68 	.word	0x20006e68

08001efc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <MX_USART1_UART_Init+0x94>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f44:	4811      	ldr	r0, [pc, #68]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f46:	f006 fd9b 	bl	8008a80 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f50:	f7ff f8e8 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f54:	2100      	movs	r1, #0
 8001f56:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f58:	f007 fd35 	bl	80099c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f62:	f7ff f8df 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f66:	2100      	movs	r1, #0
 8001f68:	4808      	ldr	r0, [pc, #32]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f6a:	f007 fd6a 	bl	8009a42 <HAL_UARTEx_SetRxFifoThreshold>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f74:	f7ff f8d6 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <MX_USART1_UART_Init+0x90>)
 8001f7a:	f007 fceb 	bl	8009954 <HAL_UARTEx_DisableFifoMode>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f84:	f7ff f8ce 	bl	8001124 <Error_Handler>
  }

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20006ae8 	.word	0x20006ae8
 8001f90:	40011000 	.word	0x40011000

08001f94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <MX_USART2_UART_Init+0x94>)
 8001f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fdc:	4811      	ldr	r0, [pc, #68]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001fde:	f006 fd4f 	bl	8008a80 <HAL_UART_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fe8:	f7ff f89c 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fec:	2100      	movs	r1, #0
 8001fee:	480d      	ldr	r0, [pc, #52]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8001ff0:	f007 fce9 	bl	80099c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ffa:	f7ff f893 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffe:	2100      	movs	r1, #0
 8002000:	4808      	ldr	r0, [pc, #32]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8002002:	f007 fd1e 	bl	8009a42 <HAL_UARTEx_SetRxFifoThreshold>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800200c:	f7ff f88a 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_USART2_UART_Init+0x90>)
 8002012:	f007 fc9f 	bl	8009954 <HAL_UARTEx_DisableFifoMode>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800201c:	f7ff f882 	bl	8001124 <Error_Handler>
  }

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20006c00 	.word	0x20006c00
 8002028:	40004400 	.word	0x40004400

0800202c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002032:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800203c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_USART3_UART_Init+0x90>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_USART3_UART_Init+0x90>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MX_USART3_UART_Init+0x90>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002074:	4811      	ldr	r0, [pc, #68]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002076:	f006 fd03 	bl	8008a80 <HAL_UART_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002080:	f7ff f850 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002084:	2100      	movs	r1, #0
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <MX_USART3_UART_Init+0x90>)
 8002088:	f007 fc9d 	bl	80099c6 <HAL_UARTEx_SetTxFifoThreshold>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002092:	f7ff f847 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002096:	2100      	movs	r1, #0
 8002098:	4808      	ldr	r0, [pc, #32]	; (80020bc <MX_USART3_UART_Init+0x90>)
 800209a:	f007 fcd2 	bl	8009a42 <HAL_UARTEx_SetRxFifoThreshold>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020a4:	f7ff f83e 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020a8:	4804      	ldr	r0, [pc, #16]	; (80020bc <MX_USART3_UART_Init+0x90>)
 80020aa:	f007 fc53 	bl	8009954 <HAL_UARTEx_DisableFifoMode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020b4:	f7ff f836 	bl	8001124 <Error_Handler>
  }

}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20006804 	.word	0x20006804
 80020c0:	40004800 	.word	0x40004800

080020c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <MX_USART6_UART_Init+0x94>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_USART6_UART_Init+0x90>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_USART6_UART_Init+0x90>)
 8002102:	2200      	movs	r2, #0
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <MX_USART6_UART_Init+0x90>)
 8002108:	2200      	movs	r2, #0
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800210c:	4811      	ldr	r0, [pc, #68]	; (8002154 <MX_USART6_UART_Init+0x90>)
 800210e:	f006 fcb7 	bl	8008a80 <HAL_UART_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002118:	f7ff f804 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800211c:	2100      	movs	r1, #0
 800211e:	480d      	ldr	r0, [pc, #52]	; (8002154 <MX_USART6_UART_Init+0x90>)
 8002120:	f007 fc51 	bl	80099c6 <HAL_UARTEx_SetTxFifoThreshold>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800212a:	f7fe fffb 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212e:	2100      	movs	r1, #0
 8002130:	4808      	ldr	r0, [pc, #32]	; (8002154 <MX_USART6_UART_Init+0x90>)
 8002132:	f007 fc86 	bl	8009a42 <HAL_UARTEx_SetRxFifoThreshold>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800213c:	f7fe fff2 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_USART6_UART_Init+0x90>)
 8002142:	f007 fc07 	bl	8009954 <HAL_UARTEx_DisableFifoMode>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800214c:	f7fe ffea 	bl	8001124 <Error_Handler>
  }

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20006b74 	.word	0x20006b74
 8002158:	40011400 	.word	0x40011400

0800215c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b090      	sub	sp, #64	; 0x40
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a9f      	ldr	r2, [pc, #636]	; (80023f8 <HAL_UART_MspInit+0x29c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f040 808c 	bne.w	8002298 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002180:	4b9e      	ldr	r3, [pc, #632]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 8002182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002186:	4a9d      	ldr	r2, [pc, #628]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002190:	4b9a      	ldr	r3, [pc, #616]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 8002192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b97      	ldr	r3, [pc, #604]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a4:	4a95      	ldr	r2, [pc, #596]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ae:	4b93      	ldr	r3, [pc, #588]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021ce:	2304      	movs	r3, #4
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d6:	4619      	mov	r1, r3
 80021d8:	4889      	ldr	r0, [pc, #548]	; (8002400 <HAL_UART_MspInit+0x2a4>)
 80021da:	f002 fd6d 	bl	8004cb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 80021e0:	4a89      	ldr	r2, [pc, #548]	; (8002408 <HAL_UART_MspInit+0x2ac>)
 80021e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80021e4:	4b87      	ldr	r3, [pc, #540]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 80021e6:	2229      	movs	r2, #41	; 0x29
 80021e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ea:	4b86      	ldr	r3, [pc, #536]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f0:	4b84      	ldr	r3, [pc, #528]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021f6:	4b83      	ldr	r3, [pc, #524]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 80021f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002204:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800220a:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002210:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 8002212:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002216:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002218:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800221e:	4879      	ldr	r0, [pc, #484]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 8002220:	f000 fd0a 	bl	8002c38 <HAL_DMA_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800222a:	f7fe ff7b 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a74      	ldr	r2, [pc, #464]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 8002232:	679a      	str	r2, [r3, #120]	; 0x78
 8002234:	4a73      	ldr	r2, [pc, #460]	; (8002404 <HAL_UART_MspInit+0x2a8>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 800223a:	4b74      	ldr	r3, [pc, #464]	; (800240c <HAL_UART_MspInit+0x2b0>)
 800223c:	4a74      	ldr	r2, [pc, #464]	; (8002410 <HAL_UART_MspInit+0x2b4>)
 800223e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002240:	4b72      	ldr	r3, [pc, #456]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002242:	222a      	movs	r2, #42	; 0x2a
 8002244:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002246:	4b71      	ldr	r3, [pc, #452]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002248:	2240      	movs	r2, #64	; 0x40
 800224a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_UART_MspInit+0x2b0>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002252:	4b6e      	ldr	r3, [pc, #440]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002258:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225a:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_UART_MspInit+0x2b0>)
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002266:	4b69      	ldr	r3, [pc, #420]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002268:	2200      	movs	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800226c:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_UART_MspInit+0x2b0>)
 800226e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002272:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002274:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800227a:	4864      	ldr	r0, [pc, #400]	; (800240c <HAL_UART_MspInit+0x2b0>)
 800227c:	f000 fcdc 	bl	8002c38 <HAL_DMA_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002286:	f7fe ff4d 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a5f      	ldr	r2, [pc, #380]	; (800240c <HAL_UART_MspInit+0x2b0>)
 800228e:	675a      	str	r2, [r3, #116]	; 0x74
 8002290:	4a5e      	ldr	r2, [pc, #376]	; (800240c <HAL_UART_MspInit+0x2b0>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002296:	e1ca      	b.n	800262e <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_UART_MspInit+0x2b8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	f040 80c6 	bne.w	8002430 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a4:	4b55      	ldr	r3, [pc, #340]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022aa:	4a54      	ldr	r2, [pc, #336]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b4:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	623b      	str	r3, [r7, #32]
 80022c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	4a45      	ldr	r2, [pc, #276]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <HAL_UART_MspInit+0x2a0>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022fe:	2308      	movs	r3, #8
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002316:	4619      	mov	r1, r3
 8002318:	483f      	ldr	r0, [pc, #252]	; (8002418 <HAL_UART_MspInit+0x2bc>)
 800231a:	f002 fccd 	bl	8004cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800231e:	2320      	movs	r3, #32
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232e:	2307      	movs	r3, #7
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	4838      	ldr	r0, [pc, #224]	; (800241c <HAL_UART_MspInit+0x2c0>)
 800233a:	f002 fcbd 	bl	8004cb8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002340:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_UART_MspInit+0x2c8>)
 8002342:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002344:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002346:	222b      	movs	r2, #43	; 0x2b
 8002348:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234a:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002376:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 800237a:	2200      	movs	r2, #0
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800237e:	4828      	ldr	r0, [pc, #160]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002380:	f000 fc5a 	bl	8002c38 <HAL_DMA_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0x232>
      Error_Handler();
 800238a:	f7fe fecb 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002392:	679a      	str	r2, [r3, #120]	; 0x78
 8002394:	4a22      	ldr	r2, [pc, #136]	; (8002420 <HAL_UART_MspInit+0x2c4>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 800239c:	4a23      	ldr	r2, [pc, #140]	; (800242c <HAL_UART_MspInit+0x2d0>)
 800239e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023a2:	222c      	movs	r2, #44	; 0x2c
 80023a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023da:	4813      	ldr	r0, [pc, #76]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023dc:	f000 fc2c 	bl	8002c38 <HAL_DMA_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_UART_MspInit+0x28e>
      Error_Handler();
 80023e6:	f7fe fe9d 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023ee:	675a      	str	r2, [r3, #116]	; 0x74
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_UART_MspInit+0x2cc>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023f6:	e11a      	b.n	800262e <HAL_UART_MspInit+0x4d2>
 80023f8:	40011000 	.word	0x40011000
 80023fc:	58024400 	.word	0x58024400
 8002400:	58020400 	.word	0x58020400
 8002404:	200069f8 	.word	0x200069f8
 8002408:	40020410 	.word	0x40020410
 800240c:	20006908 	.word	0x20006908
 8002410:	40020428 	.word	0x40020428
 8002414:	40004400 	.word	0x40004400
 8002418:	58020000 	.word	0x58020000
 800241c:	58020c00 	.word	0x58020c00
 8002420:	2000669c 	.word	0x2000669c
 8002424:	40020470 	.word	0x40020470
 8002428:	20006a70 	.word	0x20006a70
 800242c:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_UART_MspInit+0x4dc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d16b      	bne.n	8002512 <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	4b80      	ldr	r3, [pc, #512]	; (800263c <HAL_UART_MspInit+0x4e0>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	4a7e      	ldr	r2, [pc, #504]	; (800263c <HAL_UART_MspInit+0x4e0>)
 8002442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244a:	4b7c      	ldr	r3, [pc, #496]	; (800263c <HAL_UART_MspInit+0x4e0>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 800245a:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <HAL_UART_MspInit+0x4e8>)
 800245c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 8002460:	222d      	movs	r2, #45	; 0x2d
 8002462:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002464:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246a:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002470:	4b73      	ldr	r3, [pc, #460]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 8002472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002476:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002478:	4b71      	ldr	r3, [pc, #452]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800247e:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002484:	4b6e      	ldr	r3, [pc, #440]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 800248c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002490:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002492:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002498:	4869      	ldr	r0, [pc, #420]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 800249a:	f000 fbcd 	bl	8002c38 <HAL_DMA_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80024a4:	f7fe fe3e 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a65      	ldr	r2, [pc, #404]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 80024ac:	679a      	str	r2, [r3, #120]	; 0x78
 80024ae:	4a64      	ldr	r2, [pc, #400]	; (8002640 <HAL_UART_MspInit+0x4e4>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 80024b4:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_UART_MspInit+0x4f0>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024bc:	222e      	movs	r2, #46	; 0x2e
 80024be:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	4b60      	ldr	r3, [pc, #384]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d4:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80024f4:	4854      	ldr	r0, [pc, #336]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 80024f6:	f000 fb9f 	bl	8002c38 <HAL_DMA_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x3a8>
      Error_Handler();
 8002500:	f7fe fe10 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 8002508:	675a      	str	r2, [r3, #116]	; 0x74
 800250a:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_UART_MspInit+0x4ec>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002510:	e08d      	b.n	800262e <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART6)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4e      	ldr	r2, [pc, #312]	; (8002650 <HAL_UART_MspInit+0x4f4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	f040 8088 	bne.w	800262e <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_UART_MspInit+0x4e0>)
 8002520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002524:	4a45      	ldr	r2, [pc, #276]	; (800263c <HAL_UART_MspInit+0x4e0>)
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_UART_MspInit+0x4e0>)
 8002530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253c:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_UART_MspInit+0x4e0>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	4a3e      	ldr	r2, [pc, #248]	; (800263c <HAL_UART_MspInit+0x4e0>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_UART_MspInit+0x4e0>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800255a:	23c0      	movs	r3, #192	; 0xc0
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800256a:	2307      	movs	r3, #7
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4837      	ldr	r0, [pc, #220]	; (8002654 <HAL_UART_MspInit+0x4f8>)
 8002576:	f002 fb9f 	bl	8004cb8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 800257c:	4a37      	ldr	r2, [pc, #220]	; (800265c <HAL_UART_MspInit+0x500>)
 800257e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 8002582:	2247      	movs	r2, #71	; 0x47
 8002584:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259a:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025b8:	4827      	ldr	r0, [pc, #156]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025ba:	f000 fb3d 	bl	8002c38 <HAL_DMA_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_UART_MspInit+0x46c>
      Error_Handler();
 80025c4:	f7fe fdae 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a23      	ldr	r2, [pc, #140]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025cc:	679a      	str	r2, [r3, #120]	; 0x78
 80025ce:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_UART_MspInit+0x4fc>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025d6:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_UART_MspInit+0x508>)
 80025d8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025dc:	2248      	movs	r2, #72	; 0x48
 80025de:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_UART_MspInit+0x504>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_UART_MspInit+0x504>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_UART_MspInit+0x504>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_UART_MspInit+0x504>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002612:	4813      	ldr	r0, [pc, #76]	; (8002660 <HAL_UART_MspInit+0x504>)
 8002614:	f000 fb10 	bl	8002c38 <HAL_DMA_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_MspInit+0x4c6>
      Error_Handler();
 800261e:	f7fe fd81 	bl	8001124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_UART_MspInit+0x504>)
 8002626:	675a      	str	r2, [r3, #116]	; 0x74
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_UART_MspInit+0x504>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800262e:	bf00      	nop
 8002630:	3740      	adds	r7, #64	; 0x40
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40004800 	.word	0x40004800
 800263c:	58024400 	.word	0x58024400
 8002640:	2000678c 	.word	0x2000678c
 8002644:	40020440 	.word	0x40020440
 8002648:	20006890 	.word	0x20006890
 800264c:	40020458 	.word	0x40020458
 8002650:	40011400 	.word	0x40011400
 8002654:	58020800 	.word	0x58020800
 8002658:	20006714 	.word	0x20006714
 800265c:	400204a0 	.word	0x400204a0
 8002660:	20006980 	.word	0x20006980
 8002664:	400204b8 	.word	0x400204b8

08002668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8002668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800266c:	f7fd ffc0 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002670:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002672:	e003      	b.n	800267c <LoopCopyDataInit>

08002674 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002676:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002678:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800267a:	3104      	adds	r1, #4

0800267c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800267c:	480a      	ldr	r0, [pc, #40]	; (80026a8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002680:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002682:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002684:	d3f6      	bcc.n	8002674 <CopyDataInit>
  ldr  r2, =_sbss
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002688:	e002      	b.n	8002690 <LoopFillZerobss>

0800268a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800268a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800268c:	f842 3b04 	str.w	r3, [r2], #4

08002690 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002692:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002694:	d3f9      	bcc.n	800268a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002696:	f00a fb99 	bl	800cdcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269a:	f7fe fb95 	bl	8000dc8 <main>
  bx  lr    
 800269e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80026a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026a4:	0800ebd8 	.word	0x0800ebd8
  ldr  r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026ac:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80026b0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80026b4:	20006e68 	.word	0x20006e68

080026b8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC3_IRQHandler>
	...

080026bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c2:	2003      	movs	r0, #3
 80026c4:	f000 f90f 	bl	80028e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026c8:	f003 fd50 	bl	800616c <HAL_RCC_GetSysClockFreq>
 80026cc:	4601      	mov	r1, r0
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_Init+0x68>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_Init+0x6c>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa21 f303 	lsr.w	r3, r1, r3
 80026e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_Init+0x68>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_Init+0x6c>)
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_Init+0x70>)
 80026fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_Init+0x74>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002706:	2000      	movs	r0, #0
 8002708:	f7ff fa74 	bl	8001bf4 <HAL_InitTick>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e002      	b.n	800271c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002716:	f7ff fa4f 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	58024400 	.word	0x58024400
 8002728:	0800e8ec 	.word	0x0800e8ec
 800272c:	20000004 	.word	0x20000004
 8002730:	20000000 	.word	0x20000000

08002734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x20>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x24>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4413      	add	r3, r2
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_IncTick+0x24>)
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c
 8002758:	20006c8c 	.word	0x20006c8c

0800275c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return uwTick;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_GetTick+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20006c8c 	.word	0x20006c8c

08002774 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_GetREVID+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0c1b      	lsrs	r3, r3, #16
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	5c001000 	.word	0x5c001000

0800278c <__NVIC_SetPriorityGrouping>:
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <__NVIC_SetPriorityGrouping+0x40>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <__NVIC_SetPriorityGrouping+0x40>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	05fa0000 	.word	0x05fa0000

080027d4 <__NVIC_GetPriorityGrouping>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff4c 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800290a:	f7ff ff63 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 800290e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7ff ffb3 	bl	8002880 <NVIC_EncodePriority>
 800291a:	4602      	mov	r2, r0
 800291c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff82 	bl	800282c <__NVIC_SetPriority>
}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff56 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002950:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_MPU_Disable+0x24>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_MPU_Disable+0x24>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_MPU_Disable+0x28>)
 8002962:	2200      	movs	r2, #0
 8002964:	605a      	str	r2, [r3, #4]
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00
 8002974:	e000ed90 	.word	0xe000ed90

08002978 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_MPU_Enable+0x34>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_MPU_Enable+0x38>)
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_MPU_Enable+0x38>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002996:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800299a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000ed90 	.word	0xe000ed90
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	785a      	ldrb	r2, [r3, #1]
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_MPU_ConfigRegion+0x84>)
 80029c2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d029      	beq.n	8002a20 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_MPU_ConfigRegion+0x84>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7adb      	ldrb	r3, [r3, #11]
 80029de:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7a9b      	ldrb	r3, [r3, #10]
 80029e6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7b5b      	ldrb	r3, [r3, #13]
 80029ee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7b9b      	ldrb	r3, [r3, #14]
 80029f6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7bdb      	ldrb	r3, [r3, #15]
 80029fe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7a5b      	ldrb	r3, [r3, #9]
 8002a06:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7a1b      	ldrb	r3, [r3, #8]
 8002a0e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a10:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a1a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a1c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a1e:	e005      	b.n	8002a2c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_MPU_ConfigRegion+0x84>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_MPU_ConfigRegion+0x84>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed90 	.word	0xe000ed90

08002a3c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_GetCurrentCPUID+0x24>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d101      	bne.n	8002a52 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e000      	b.n	8002a54 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002a52:	2301      	movs	r3, #1
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e054      	b.n	8002b20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7f5b      	ldrb	r3, [r3, #29]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fd fe6e 	bl	8000768 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	791b      	ldrb	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <HAL_CRC_Init+0xc4>)
 8002aa0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0218 	bic.w	r2, r2, #24
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	e00c      	b.n	8002ace <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f834 	bl	8002b2c <HAL_CRCEx_Polynomial_Set>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e028      	b.n	8002b20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	795b      	ldrb	r3, [r3, #5]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	e004      	b.n	8002aec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6912      	ldr	r2, [r2, #16]
 8002aea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	04c11db7 	.word	0x04c11db7

08002b2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b3c:	231f      	movs	r3, #31
 8002b3e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b40:	bf00      	nop
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	613a      	str	r2, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b18      	cmp	r3, #24
 8002b64:	d846      	bhi.n	8002bf4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002bfb 	.word	0x08002bfb
 8002b70:	08002bf5 	.word	0x08002bf5
 8002b74:	08002bf5 	.word	0x08002bf5
 8002b78:	08002bf5 	.word	0x08002bf5
 8002b7c:	08002bf5 	.word	0x08002bf5
 8002b80:	08002bf5 	.word	0x08002bf5
 8002b84:	08002bf5 	.word	0x08002bf5
 8002b88:	08002bf5 	.word	0x08002bf5
 8002b8c:	08002be9 	.word	0x08002be9
 8002b90:	08002bf5 	.word	0x08002bf5
 8002b94:	08002bf5 	.word	0x08002bf5
 8002b98:	08002bf5 	.word	0x08002bf5
 8002b9c:	08002bf5 	.word	0x08002bf5
 8002ba0:	08002bf5 	.word	0x08002bf5
 8002ba4:	08002bf5 	.word	0x08002bf5
 8002ba8:	08002bf5 	.word	0x08002bf5
 8002bac:	08002bdd 	.word	0x08002bdd
 8002bb0:	08002bf5 	.word	0x08002bf5
 8002bb4:	08002bf5 	.word	0x08002bf5
 8002bb8:	08002bf5 	.word	0x08002bf5
 8002bbc:	08002bf5 	.word	0x08002bf5
 8002bc0:	08002bf5 	.word	0x08002bf5
 8002bc4:	08002bf5 	.word	0x08002bf5
 8002bc8:	08002bf5 	.word	0x08002bf5
 8002bcc:	08002bd1 	.word	0x08002bd1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d913      	bls.n	8002bfe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bda:	e010      	b.n	8002bfe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b07      	cmp	r3, #7
 8002be0:	d90f      	bls.n	8002c02 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002be6:	e00c      	b.n	8002c02 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	d90b      	bls.n	8002c06 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bf2:	e008      	b.n	8002c06 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf8:	e006      	b.n	8002c08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e004      	b.n	8002c08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c06:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 0118 	bic.w	r1, r3, #24
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff fd8c 	bl	800275c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e316      	b.n	800327e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_DMA_Init+0x1b8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_DMA_Init+0x1bc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a63      	ldr	r2, [pc, #396]	; (8002df8 <HAL_DMA_Init+0x1c0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a62      	ldr	r2, [pc, #392]	; (8002dfc <HAL_DMA_Init+0x1c4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_DMA_Init+0x1c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5f      	ldr	r2, [pc, #380]	; (8002e04 <HAL_DMA_Init+0x1cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5d      	ldr	r2, [pc, #372]	; (8002e08 <HAL_DMA_Init+0x1d0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5c      	ldr	r2, [pc, #368]	; (8002e0c <HAL_DMA_Init+0x1d4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5a      	ldr	r2, [pc, #360]	; (8002e10 <HAL_DMA_Init+0x1d8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a59      	ldr	r2, [pc, #356]	; (8002e14 <HAL_DMA_Init+0x1dc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <HAL_DMA_Init+0x1e0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a56      	ldr	r2, [pc, #344]	; (8002e1c <HAL_DMA_Init+0x1e4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a54      	ldr	r2, [pc, #336]	; (8002e20 <HAL_DMA_Init+0x1e8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a53      	ldr	r2, [pc, #332]	; (8002e24 <HAL_DMA_Init+0x1ec>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a51      	ldr	r2, [pc, #324]	; (8002e28 <HAL_DMA_Init+0x1f0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_Init+0xb8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <HAL_DMA_Init+0x1f4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Init+0xbc>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_DMA_Init+0xbe>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 813b 	beq.w	8002f72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <HAL_DMA_Init+0x1b8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d04a      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a36      	ldr	r2, [pc, #216]	; (8002df4 <HAL_DMA_Init+0x1bc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d045      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <HAL_DMA_Init+0x1c0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d040      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <HAL_DMA_Init+0x1c4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03b      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <HAL_DMA_Init+0x1c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d036      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a30      	ldr	r2, [pc, #192]	; (8002e04 <HAL_DMA_Init+0x1cc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d031      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	; (8002e08 <HAL_DMA_Init+0x1d0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02c      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <HAL_DMA_Init+0x1d4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d027      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <HAL_DMA_Init+0x1d8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <HAL_DMA_Init+0x1dc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d01d      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a28      	ldr	r2, [pc, #160]	; (8002e18 <HAL_DMA_Init+0x1e0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_DMA_Init+0x1e4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <HAL_DMA_Init+0x1e8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_DMA_Init+0x1ec>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_DMA_Init+0x1f0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_DMA_Init+0x174>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <HAL_DMA_Init+0x1f4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <HAL_DMA_Init+0x186>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_DMA_Init+0x196>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dce:	e02f      	b.n	8002e30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd0:	f7ff fcc4 	bl	800275c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d928      	bls.n	8002e30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2203      	movs	r2, #3
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e246      	b.n	800327e <HAL_DMA_Init+0x646>
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1c8      	bne.n	8002dd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_DMA_Init+0x420>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d107      	bne.n	8002e94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e94:	4b71      	ldr	r3, [pc, #452]	; (800305c <HAL_DMA_Init+0x424>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_DMA_Init+0x428>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea0:	d328      	bcc.n	8002ef4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b28      	cmp	r3, #40	; 0x28
 8002ea8:	d903      	bls.n	8002eb2 <HAL_DMA_Init+0x27a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b2e      	cmp	r3, #46	; 0x2e
 8002eb0:	d917      	bls.n	8002ee2 <HAL_DMA_Init+0x2aa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8002eb8:	d903      	bls.n	8002ec2 <HAL_DMA_Init+0x28a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b42      	cmp	r3, #66	; 0x42
 8002ec0:	d90f      	bls.n	8002ee2 <HAL_DMA_Init+0x2aa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b46      	cmp	r3, #70	; 0x46
 8002ec8:	d903      	bls.n	8002ed2 <HAL_DMA_Init+0x29a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b48      	cmp	r3, #72	; 0x48
 8002ed0:	d907      	bls.n	8002ee2 <HAL_DMA_Init+0x2aa>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8002ed8:	d905      	bls.n	8002ee6 <HAL_DMA_Init+0x2ae>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b52      	cmp	r3, #82	; 0x52
 8002ee0:	d801      	bhi.n	8002ee6 <HAL_DMA_Init+0x2ae>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_DMA_Init+0x2b0>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0307 	bic.w	r3, r3, #7
 8002f0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d117      	bne.n	8002f4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f001 fbfd 	bl	8004730 <DMA_CheckFifoParam>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e197      	b.n	800327e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f001 fb38 	bl	80045cc <DMA_CalcBaseAndBitshift>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	223f      	movs	r2, #63	; 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e0cd      	b.n	800310e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_DMA_Init+0x42c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a39      	ldr	r2, [pc, #228]	; (8003068 <HAL_DMA_Init+0x430>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a38      	ldr	r2, [pc, #224]	; (800306c <HAL_DMA_Init+0x434>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a36      	ldr	r2, [pc, #216]	; (8003070 <HAL_DMA_Init+0x438>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a35      	ldr	r2, [pc, #212]	; (8003074 <HAL_DMA_Init+0x43c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a33      	ldr	r2, [pc, #204]	; (8003078 <HAL_DMA_Init+0x440>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a32      	ldr	r2, [pc, #200]	; (800307c <HAL_DMA_Init+0x444>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_Init+0x38a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a30      	ldr	r2, [pc, #192]	; (8003080 <HAL_DMA_Init+0x448>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Init+0x38e>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_DMA_Init+0x390>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8097 	beq.w	80030fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <HAL_DMA_Init+0x42c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d021      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <HAL_DMA_Init+0x430>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01c      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_DMA_Init+0x434>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d017      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_DMA_Init+0x438>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d012      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_DMA_Init+0x43c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_DMA_Init+0x440>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d008      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_DMA_Init+0x444>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <HAL_DMA_Init+0x3e4>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_DMA_Init+0x448>)
 800301a:	4293      	cmp	r3, r2
 800301c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_DMA_Init+0x44c>)
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d020      	beq.n	8003088 <HAL_DMA_Init+0x450>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d102      	bne.n	8003054 <HAL_DMA_Init+0x41c>
 800304e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003052:	e01a      	b.n	800308a <HAL_DMA_Init+0x452>
 8003054:	2300      	movs	r3, #0
 8003056:	e018      	b.n	800308a <HAL_DMA_Init+0x452>
 8003058:	fe10803f 	.word	0xfe10803f
 800305c:	5c001000 	.word	0x5c001000
 8003060:	ffff0000 	.word	0xffff0000
 8003064:	58025408 	.word	0x58025408
 8003068:	5802541c 	.word	0x5802541c
 800306c:	58025430 	.word	0x58025430
 8003070:	58025444 	.word	0x58025444
 8003074:	58025458 	.word	0x58025458
 8003078:	5802546c 	.word	0x5802546c
 800307c:	58025480 	.word	0x58025480
 8003080:	58025494 	.word	0x58025494
 8003084:	fffe000f 	.word	0xfffe000f
 8003088:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003090:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003098:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b6e      	ldr	r3, [pc, #440]	; (8003288 <HAL_DMA_Init+0x650>)
 80030d0:	4413      	add	r3, r2
 80030d2:	4a6e      	ldr	r2, [pc, #440]	; (800328c <HAL_DMA_Init+0x654>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 fa73 	bl	80045cc <DMA_CalcBaseAndBitshift>
 80030e6:	4603      	mov	r3, r0
 80030e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2201      	movs	r2, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e008      	b.n	800310e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0b7      	b.n	800327e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5f      	ldr	r2, [pc, #380]	; (8003290 <HAL_DMA_Init+0x658>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d072      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <HAL_DMA_Init+0x65c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d06d      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5c      	ldr	r2, [pc, #368]	; (8003298 <HAL_DMA_Init+0x660>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d068      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5a      	ldr	r2, [pc, #360]	; (800329c <HAL_DMA_Init+0x664>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d063      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a59      	ldr	r2, [pc, #356]	; (80032a0 <HAL_DMA_Init+0x668>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d05e      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a57      	ldr	r2, [pc, #348]	; (80032a4 <HAL_DMA_Init+0x66c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d059      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_DMA_Init+0x670>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d054      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_DMA_Init+0x674>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d04f      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_DMA_Init+0x678>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04a      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_DMA_Init+0x67c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d045      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <HAL_DMA_Init+0x680>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d040      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4e      	ldr	r2, [pc, #312]	; (80032bc <HAL_DMA_Init+0x684>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03b      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4d      	ldr	r2, [pc, #308]	; (80032c0 <HAL_DMA_Init+0x688>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d036      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <HAL_DMA_Init+0x68c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a4a      	ldr	r2, [pc, #296]	; (80032c8 <HAL_DMA_Init+0x690>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a48      	ldr	r2, [pc, #288]	; (80032cc <HAL_DMA_Init+0x694>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a47      	ldr	r2, [pc, #284]	; (80032d0 <HAL_DMA_Init+0x698>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a45      	ldr	r2, [pc, #276]	; (80032d4 <HAL_DMA_Init+0x69c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a44      	ldr	r2, [pc, #272]	; (80032d8 <HAL_DMA_Init+0x6a0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_DMA_Init+0x6a4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <HAL_DMA_Init+0x6a8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <HAL_DMA_Init+0x6ac>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3e      	ldr	r2, [pc, #248]	; (80032e8 <HAL_DMA_Init+0x6b0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_Init+0x5c6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3c      	ldr	r2, [pc, #240]	; (80032ec <HAL_DMA_Init+0x6b4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Init+0x5ca>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_DMA_Init+0x5cc>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d032      	beq.n	800326e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f001 fb0d 	bl	8004828 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b80      	cmp	r3, #128	; 0x80
 8003214:	d102      	bne.n	800321c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003230:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <HAL_DMA_Init+0x624>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b08      	cmp	r3, #8
 8003240:	d80c      	bhi.n	800325c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f001 fb8a 	bl	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	e008      	b.n	800326e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	a7fdabf8 	.word	0xa7fdabf8
 800328c:	cccccccd 	.word	0xcccccccd
 8003290:	40020010 	.word	0x40020010
 8003294:	40020028 	.word	0x40020028
 8003298:	40020040 	.word	0x40020040
 800329c:	40020058 	.word	0x40020058
 80032a0:	40020070 	.word	0x40020070
 80032a4:	40020088 	.word	0x40020088
 80032a8:	400200a0 	.word	0x400200a0
 80032ac:	400200b8 	.word	0x400200b8
 80032b0:	40020410 	.word	0x40020410
 80032b4:	40020428 	.word	0x40020428
 80032b8:	40020440 	.word	0x40020440
 80032bc:	40020458 	.word	0x40020458
 80032c0:	40020470 	.word	0x40020470
 80032c4:	40020488 	.word	0x40020488
 80032c8:	400204a0 	.word	0x400204a0
 80032cc:	400204b8 	.word	0x400204b8
 80032d0:	58025408 	.word	0x58025408
 80032d4:	5802541c 	.word	0x5802541c
 80032d8:	58025430 	.word	0x58025430
 80032dc:	58025444 	.word	0x58025444
 80032e0:	58025458 	.word	0x58025458
 80032e4:	5802546c 	.word	0x5802546c
 80032e8:	58025480 	.word	0x58025480
 80032ec:	58025494 	.word	0x58025494

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e205      	b.n	800370e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d004      	beq.n	8003318 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e1fa      	b.n	800370e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a8c      	ldr	r2, [pc, #560]	; (8003550 <HAL_DMA_Abort_IT+0x260>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04a      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a8b      	ldr	r2, [pc, #556]	; (8003554 <HAL_DMA_Abort_IT+0x264>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d045      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a89      	ldr	r2, [pc, #548]	; (8003558 <HAL_DMA_Abort_IT+0x268>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a88      	ldr	r2, [pc, #544]	; (800355c <HAL_DMA_Abort_IT+0x26c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d03b      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a86      	ldr	r2, [pc, #536]	; (8003560 <HAL_DMA_Abort_IT+0x270>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d036      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a85      	ldr	r2, [pc, #532]	; (8003564 <HAL_DMA_Abort_IT+0x274>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d031      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	; (8003568 <HAL_DMA_Abort_IT+0x278>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02c      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a82      	ldr	r2, [pc, #520]	; (800356c <HAL_DMA_Abort_IT+0x27c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d027      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_DMA_Abort_IT+0x280>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7f      	ldr	r2, [pc, #508]	; (8003574 <HAL_DMA_Abort_IT+0x284>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7d      	ldr	r2, [pc, #500]	; (8003578 <HAL_DMA_Abort_IT+0x288>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7c      	ldr	r2, [pc, #496]	; (800357c <HAL_DMA_Abort_IT+0x28c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7a      	ldr	r2, [pc, #488]	; (8003580 <HAL_DMA_Abort_IT+0x290>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a79      	ldr	r2, [pc, #484]	; (8003584 <HAL_DMA_Abort_IT+0x294>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a77      	ldr	r2, [pc, #476]	; (8003588 <HAL_DMA_Abort_IT+0x298>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xc8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a76      	ldr	r2, [pc, #472]	; (800358c <HAL_DMA_Abort_IT+0x29c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_DMA_Abort_IT+0xcc>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_DMA_Abort_IT+0xce>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d065      	beq.n	800348e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2204      	movs	r2, #4
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a60      	ldr	r2, [pc, #384]	; (8003550 <HAL_DMA_Abort_IT+0x260>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5e      	ldr	r2, [pc, #376]	; (8003554 <HAL_DMA_Abort_IT+0x264>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5d      	ldr	r2, [pc, #372]	; (8003558 <HAL_DMA_Abort_IT+0x268>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_DMA_Abort_IT+0x26c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_DMA_Abort_IT+0x270>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_DMA_Abort_IT+0x274>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a57      	ldr	r2, [pc, #348]	; (8003568 <HAL_DMA_Abort_IT+0x278>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a55      	ldr	r2, [pc, #340]	; (800356c <HAL_DMA_Abort_IT+0x27c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a54      	ldr	r2, [pc, #336]	; (8003570 <HAL_DMA_Abort_IT+0x280>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a52      	ldr	r2, [pc, #328]	; (8003574 <HAL_DMA_Abort_IT+0x284>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a51      	ldr	r2, [pc, #324]	; (8003578 <HAL_DMA_Abort_IT+0x288>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4f      	ldr	r2, [pc, #316]	; (800357c <HAL_DMA_Abort_IT+0x28c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_DMA_Abort_IT+0x290>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_DMA_Abort_IT+0x294>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <HAL_DMA_Abort_IT+0x298>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_Abort_IT+0x17a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a49      	ldr	r2, [pc, #292]	; (800358c <HAL_DMA_Abort_IT+0x29c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d108      	bne.n	800347c <HAL_DMA_Abort_IT+0x18c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e147      	b.n	800370c <HAL_DMA_Abort_IT+0x41c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e13e      	b.n	800370c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 020e 	bic.w	r2, r2, #14
 800349c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_DMA_Abort_IT+0x260>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d04a      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a29      	ldr	r2, [pc, #164]	; (8003554 <HAL_DMA_Abort_IT+0x264>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d045      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a28      	ldr	r2, [pc, #160]	; (8003558 <HAL_DMA_Abort_IT+0x268>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_DMA_Abort_IT+0x26c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d03b      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a25      	ldr	r2, [pc, #148]	; (8003560 <HAL_DMA_Abort_IT+0x270>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d036      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a23      	ldr	r2, [pc, #140]	; (8003564 <HAL_DMA_Abort_IT+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a22      	ldr	r2, [pc, #136]	; (8003568 <HAL_DMA_Abort_IT+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d02c      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a20      	ldr	r2, [pc, #128]	; (800356c <HAL_DMA_Abort_IT+0x27c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d027      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1f      	ldr	r2, [pc, #124]	; (8003570 <HAL_DMA_Abort_IT+0x280>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_DMA_Abort_IT+0x284>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_DMA_Abort_IT+0x288>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1a      	ldr	r2, [pc, #104]	; (800357c <HAL_DMA_Abort_IT+0x28c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_DMA_Abort_IT+0x290>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_DMA_Abort_IT+0x294>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_DMA_Abort_IT+0x298>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_DMA_Abort_IT+0x24e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_DMA_Abort_IT+0x29c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d128      	bne.n	8003590 <HAL_DMA_Abort_IT+0x2a0>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e027      	b.n	80035a0 <HAL_DMA_Abort_IT+0x2b0>
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5c      	ldr	r2, [pc, #368]	; (8003718 <HAL_DMA_Abort_IT+0x428>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d072      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5b      	ldr	r2, [pc, #364]	; (800371c <HAL_DMA_Abort_IT+0x42c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d06d      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a59      	ldr	r2, [pc, #356]	; (8003720 <HAL_DMA_Abort_IT+0x430>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d068      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a58      	ldr	r2, [pc, #352]	; (8003724 <HAL_DMA_Abort_IT+0x434>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d063      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_DMA_Abort_IT+0x438>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d05e      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_DMA_Abort_IT+0x43c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d059      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a53      	ldr	r2, [pc, #332]	; (8003730 <HAL_DMA_Abort_IT+0x440>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d054      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_DMA_Abort_IT+0x444>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04f      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a50      	ldr	r2, [pc, #320]	; (8003738 <HAL_DMA_Abort_IT+0x448>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d04a      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4f      	ldr	r2, [pc, #316]	; (800373c <HAL_DMA_Abort_IT+0x44c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d045      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4d      	ldr	r2, [pc, #308]	; (8003740 <HAL_DMA_Abort_IT+0x450>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d040      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4c      	ldr	r2, [pc, #304]	; (8003744 <HAL_DMA_Abort_IT+0x454>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d03b      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4a      	ldr	r2, [pc, #296]	; (8003748 <HAL_DMA_Abort_IT+0x458>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d036      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a49      	ldr	r2, [pc, #292]	; (800374c <HAL_DMA_Abort_IT+0x45c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d031      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a47      	ldr	r2, [pc, #284]	; (8003750 <HAL_DMA_Abort_IT+0x460>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02c      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a46      	ldr	r2, [pc, #280]	; (8003754 <HAL_DMA_Abort_IT+0x464>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d027      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a44      	ldr	r2, [pc, #272]	; (8003758 <HAL_DMA_Abort_IT+0x468>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d022      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a43      	ldr	r2, [pc, #268]	; (800375c <HAL_DMA_Abort_IT+0x46c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01d      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a41      	ldr	r2, [pc, #260]	; (8003760 <HAL_DMA_Abort_IT+0x470>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d018      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <HAL_DMA_Abort_IT+0x474>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3e      	ldr	r2, [pc, #248]	; (8003768 <HAL_DMA_Abort_IT+0x478>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3d      	ldr	r2, [pc, #244]	; (800376c <HAL_DMA_Abort_IT+0x47c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_DMA_Abort_IT+0x480>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_DMA_Abort_IT+0x3a0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a3a      	ldr	r2, [pc, #232]	; (8003774 <HAL_DMA_Abort_IT+0x484>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_DMA_Abort_IT+0x3a4>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_DMA_Abort_IT+0x3a6>
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40020010 	.word	0x40020010
 800371c:	40020028 	.word	0x40020028
 8003720:	40020040 	.word	0x40020040
 8003724:	40020058 	.word	0x40020058
 8003728:	40020070 	.word	0x40020070
 800372c:	40020088 	.word	0x40020088
 8003730:	400200a0 	.word	0x400200a0
 8003734:	400200b8 	.word	0x400200b8
 8003738:	40020410 	.word	0x40020410
 800373c:	40020428 	.word	0x40020428
 8003740:	40020440 	.word	0x40020440
 8003744:	40020458 	.word	0x40020458
 8003748:	40020470 	.word	0x40020470
 800374c:	40020488 	.word	0x40020488
 8003750:	400204a0 	.word	0x400204a0
 8003754:	400204b8 	.word	0x400204b8
 8003758:	58025408 	.word	0x58025408
 800375c:	5802541c 	.word	0x5802541c
 8003760:	58025430 	.word	0x58025430
 8003764:	58025444 	.word	0x58025444
 8003768:	58025458 	.word	0x58025458
 800376c:	5802546c 	.word	0x5802546c
 8003770:	58025480 	.word	0x58025480
 8003774:	58025494 	.word	0x58025494

08003778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003784:	4b67      	ldr	r3, [pc, #412]	; (8003924 <HAL_DMA_IRQHandler+0x1ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a67      	ldr	r2, [pc, #412]	; (8003928 <HAL_DMA_IRQHandler+0x1b0>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	0a9b      	lsrs	r3, r3, #10
 8003790:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5f      	ldr	r2, [pc, #380]	; (800392c <HAL_DMA_IRQHandler+0x1b4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d04a      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5d      	ldr	r2, [pc, #372]	; (8003930 <HAL_DMA_IRQHandler+0x1b8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d045      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5c      	ldr	r2, [pc, #368]	; (8003934 <HAL_DMA_IRQHandler+0x1bc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d040      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5a      	ldr	r2, [pc, #360]	; (8003938 <HAL_DMA_IRQHandler+0x1c0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d03b      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a59      	ldr	r2, [pc, #356]	; (800393c <HAL_DMA_IRQHandler+0x1c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d036      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_DMA_IRQHandler+0x1c8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d031      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_DMA_IRQHandler+0x1cc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d02c      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a54      	ldr	r2, [pc, #336]	; (8003948 <HAL_DMA_IRQHandler+0x1d0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d027      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a53      	ldr	r2, [pc, #332]	; (800394c <HAL_DMA_IRQHandler+0x1d4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d022      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a51      	ldr	r2, [pc, #324]	; (8003950 <HAL_DMA_IRQHandler+0x1d8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01d      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a50      	ldr	r2, [pc, #320]	; (8003954 <HAL_DMA_IRQHandler+0x1dc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4e      	ldr	r2, [pc, #312]	; (8003958 <HAL_DMA_IRQHandler+0x1e0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4d      	ldr	r2, [pc, #308]	; (800395c <HAL_DMA_IRQHandler+0x1e4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_DMA_IRQHandler+0x1e8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <HAL_DMA_IRQHandler+0x1ec>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a48      	ldr	r2, [pc, #288]	; (8003968 <HAL_DMA_IRQHandler+0x1f0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_DMA_IRQHandler+0xd6>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_DMA_IRQHandler+0xd8>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 842b 	beq.w	80040ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2208      	movs	r2, #8
 8003860:	409a      	lsls	r2, r3
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80a2 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2e      	ldr	r2, [pc, #184]	; (800392c <HAL_DMA_IRQHandler+0x1b4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d04a      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2d      	ldr	r2, [pc, #180]	; (8003930 <HAL_DMA_IRQHandler+0x1b8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d045      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <HAL_DMA_IRQHandler+0x1bc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d040      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <HAL_DMA_IRQHandler+0x1c0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d03b      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_DMA_IRQHandler+0x1c4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d036      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a27      	ldr	r2, [pc, #156]	; (8003940 <HAL_DMA_IRQHandler+0x1c8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d031      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_DMA_IRQHandler+0x1cc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a24      	ldr	r2, [pc, #144]	; (8003948 <HAL_DMA_IRQHandler+0x1d0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a22      	ldr	r2, [pc, #136]	; (800394c <HAL_DMA_IRQHandler+0x1d4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a21      	ldr	r2, [pc, #132]	; (8003950 <HAL_DMA_IRQHandler+0x1d8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_DMA_IRQHandler+0x1dc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <HAL_DMA_IRQHandler+0x1e0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_DMA_IRQHandler+0x1e4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <HAL_DMA_IRQHandler+0x1e8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_DMA_IRQHandler+0x1ec>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_DMA_IRQHandler+0x1f0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d12f      	bne.n	800396c <HAL_DMA_IRQHandler+0x1f4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e02e      	b.n	8003980 <HAL_DMA_IRQHandler+0x208>
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000
 8003928:	1b4e81b5 	.word	0x1b4e81b5
 800392c:	40020010 	.word	0x40020010
 8003930:	40020028 	.word	0x40020028
 8003934:	40020040 	.word	0x40020040
 8003938:	40020058 	.word	0x40020058
 800393c:	40020070 	.word	0x40020070
 8003940:	40020088 	.word	0x40020088
 8003944:	400200a0 	.word	0x400200a0
 8003948:	400200b8 	.word	0x400200b8
 800394c:	40020410 	.word	0x40020410
 8003950:	40020428 	.word	0x40020428
 8003954:	40020440 	.word	0x40020440
 8003958:	40020458 	.word	0x40020458
 800395c:	40020470 	.word	0x40020470
 8003960:	40020488 	.word	0x40020488
 8003964:	400204a0 	.word	0x400204a0
 8003968:	400204b8 	.word	0x400204b8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d015      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2208      	movs	r2, #8
 800399e:	409a      	lsls	r2, r3
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d06e      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a69      	ldr	r2, [pc, #420]	; (8003b70 <HAL_DMA_IRQHandler+0x3f8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a67      	ldr	r2, [pc, #412]	; (8003b74 <HAL_DMA_IRQHandler+0x3fc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a66      	ldr	r2, [pc, #408]	; (8003b78 <HAL_DMA_IRQHandler+0x400>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a64      	ldr	r2, [pc, #400]	; (8003b7c <HAL_DMA_IRQHandler+0x404>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a63      	ldr	r2, [pc, #396]	; (8003b80 <HAL_DMA_IRQHandler+0x408>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a61      	ldr	r2, [pc, #388]	; (8003b84 <HAL_DMA_IRQHandler+0x40c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a60      	ldr	r2, [pc, #384]	; (8003b88 <HAL_DMA_IRQHandler+0x410>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5e      	ldr	r2, [pc, #376]	; (8003b8c <HAL_DMA_IRQHandler+0x414>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5d      	ldr	r2, [pc, #372]	; (8003b90 <HAL_DMA_IRQHandler+0x418>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5b      	ldr	r2, [pc, #364]	; (8003b94 <HAL_DMA_IRQHandler+0x41c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	; (8003b98 <HAL_DMA_IRQHandler+0x420>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_DMA_IRQHandler+0x424>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <HAL_DMA_IRQHandler+0x428>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a55      	ldr	r2, [pc, #340]	; (8003ba4 <HAL_DMA_IRQHandler+0x42c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a54      	ldr	r2, [pc, #336]	; (8003ba8 <HAL_DMA_IRQHandler+0x430>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_DMA_IRQHandler+0x434>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10a      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x304>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e003      	b.n	8003a84 <HAL_DMA_IRQHandler+0x30c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2201      	movs	r2, #1
 8003a92:	409a      	lsls	r2, r3
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f043 0202 	orr.w	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2204      	movs	r2, #4
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 808f 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <HAL_DMA_IRQHandler+0x3f8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d04a      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <HAL_DMA_IRQHandler+0x3fc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d045      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <HAL_DMA_IRQHandler+0x400>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d040      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <HAL_DMA_IRQHandler+0x404>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d03b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <HAL_DMA_IRQHandler+0x408>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d036      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a24      	ldr	r2, [pc, #144]	; (8003b84 <HAL_DMA_IRQHandler+0x40c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <HAL_DMA_IRQHandler+0x410>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d02c      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_DMA_IRQHandler+0x414>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d027      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_DMA_IRQHandler+0x418>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <HAL_DMA_IRQHandler+0x41c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_DMA_IRQHandler+0x420>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_DMA_IRQHandler+0x424>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_DMA_IRQHandler+0x428>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_DMA_IRQHandler+0x42c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <HAL_DMA_IRQHandler+0x430>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_DMA_IRQHandler+0x434>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d12a      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x438>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e023      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x440>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2210      	movs	r2, #16
 8003be2:	409a      	lsls	r2, r3
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80a6 	beq.w	8003d3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a85      	ldr	r2, [pc, #532]	; (8003e08 <HAL_DMA_IRQHandler+0x690>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a83      	ldr	r2, [pc, #524]	; (8003e0c <HAL_DMA_IRQHandler+0x694>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a82      	ldr	r2, [pc, #520]	; (8003e10 <HAL_DMA_IRQHandler+0x698>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a80      	ldr	r2, [pc, #512]	; (8003e14 <HAL_DMA_IRQHandler+0x69c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7f      	ldr	r2, [pc, #508]	; (8003e18 <HAL_DMA_IRQHandler+0x6a0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <HAL_DMA_IRQHandler+0x6a4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <HAL_DMA_IRQHandler+0x6a8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7a      	ldr	r2, [pc, #488]	; (8003e24 <HAL_DMA_IRQHandler+0x6ac>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a79      	ldr	r2, [pc, #484]	; (8003e28 <HAL_DMA_IRQHandler+0x6b0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <HAL_DMA_IRQHandler+0x6b4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a76      	ldr	r2, [pc, #472]	; (8003e30 <HAL_DMA_IRQHandler+0x6b8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a74      	ldr	r2, [pc, #464]	; (8003e34 <HAL_DMA_IRQHandler+0x6bc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a73      	ldr	r2, [pc, #460]	; (8003e38 <HAL_DMA_IRQHandler+0x6c0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a71      	ldr	r2, [pc, #452]	; (8003e3c <HAL_DMA_IRQHandler+0x6c4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a70      	ldr	r2, [pc, #448]	; (8003e40 <HAL_DMA_IRQHandler+0x6c8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6e      	ldr	r2, [pc, #440]	; (8003e44 <HAL_DMA_IRQHandler+0x6cc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x52c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e009      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x540>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d03e      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d108      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d024      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
 8003cf8:	e01f      	b.n	8003d3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01b      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	e016      	b.n	8003d3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0208 	bic.w	r2, r2, #8
 8003d28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2220      	movs	r2, #32
 8003d44:	409a      	lsls	r2, r3
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8110 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <HAL_DMA_IRQHandler+0x690>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d04a      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <HAL_DMA_IRQHandler+0x694>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d045      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_DMA_IRQHandler+0x698>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d040      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a28      	ldr	r2, [pc, #160]	; (8003e14 <HAL_DMA_IRQHandler+0x69c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d03b      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_DMA_IRQHandler+0x6a0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d036      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a25      	ldr	r2, [pc, #148]	; (8003e1c <HAL_DMA_IRQHandler+0x6a4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d031      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <HAL_DMA_IRQHandler+0x6a8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02c      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_DMA_IRQHandler+0x6ac>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d027      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <HAL_DMA_IRQHandler+0x6b0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <HAL_DMA_IRQHandler+0x6b4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d01d      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_DMA_IRQHandler+0x6b8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_DMA_IRQHandler+0x6bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_DMA_IRQHandler+0x6c0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <HAL_DMA_IRQHandler+0x6c4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <HAL_DMA_IRQHandler+0x6c8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_DMA_IRQHandler+0x6cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d12b      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x6d0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e02a      	b.n	8003e5c <HAL_DMA_IRQHandler+0x6e4>
 8003e06:	bf00      	nop
 8003e08:	40020010 	.word	0x40020010
 8003e0c:	40020028 	.word	0x40020028
 8003e10:	40020040 	.word	0x40020040
 8003e14:	40020058 	.word	0x40020058
 8003e18:	40020070 	.word	0x40020070
 8003e1c:	40020088 	.word	0x40020088
 8003e20:	400200a0 	.word	0x400200a0
 8003e24:	400200b8 	.word	0x400200b8
 8003e28:	40020410 	.word	0x40020410
 8003e2c:	40020428 	.word	0x40020428
 8003e30:	40020440 	.word	0x40020440
 8003e34:	40020458 	.word	0x40020458
 8003e38:	40020470 	.word	0x40020470
 8003e3c:	40020488 	.word	0x40020488
 8003e40:	400204a0 	.word	0x400204a0
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8087 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d139      	bne.n	8003ef2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0216 	bic.w	r2, r2, #22
 8003e8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_DMA_IRQHandler+0x736>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0208 	bic.w	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	223f      	movs	r2, #63	; 0x3f
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 834a 	beq.w	800457c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
          }
          return;
 8003ef0:	e344      	b.n	800457c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d018      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d108      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02c      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	e027      	b.n	8003f70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e01e      	b.n	8003f70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0210 	bic.w	r2, r2, #16
 8003f4e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8306 	beq.w	8004586 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8088 	beq.w	8004098 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7a      	ldr	r2, [pc, #488]	; (8004180 <HAL_DMA_IRQHandler+0xa08>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d04a      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a79      	ldr	r2, [pc, #484]	; (8004184 <HAL_DMA_IRQHandler+0xa0c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d045      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a77      	ldr	r2, [pc, #476]	; (8004188 <HAL_DMA_IRQHandler+0xa10>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d040      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a76      	ldr	r2, [pc, #472]	; (800418c <HAL_DMA_IRQHandler+0xa14>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d03b      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a74      	ldr	r2, [pc, #464]	; (8004190 <HAL_DMA_IRQHandler+0xa18>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d036      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a73      	ldr	r2, [pc, #460]	; (8004194 <HAL_DMA_IRQHandler+0xa1c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d031      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a71      	ldr	r2, [pc, #452]	; (8004198 <HAL_DMA_IRQHandler+0xa20>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02c      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a70      	ldr	r2, [pc, #448]	; (800419c <HAL_DMA_IRQHandler+0xa24>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d027      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6e      	ldr	r2, [pc, #440]	; (80041a0 <HAL_DMA_IRQHandler+0xa28>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6d      	ldr	r2, [pc, #436]	; (80041a4 <HAL_DMA_IRQHandler+0xa2c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_DMA_IRQHandler+0xa30>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6a      	ldr	r2, [pc, #424]	; (80041ac <HAL_DMA_IRQHandler+0xa34>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a68      	ldr	r2, [pc, #416]	; (80041b0 <HAL_DMA_IRQHandler+0xa38>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a67      	ldr	r2, [pc, #412]	; (80041b4 <HAL_DMA_IRQHandler+0xa3c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a65      	ldr	r2, [pc, #404]	; (80041b8 <HAL_DMA_IRQHandler+0xa40>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a64      	ldr	r2, [pc, #400]	; (80041bc <HAL_DMA_IRQHandler+0xa44>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <HAL_DMA_IRQHandler+0x8ca>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e007      	b.n	8004052 <HAL_DMA_IRQHandler+0x8da>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3301      	adds	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	429a      	cmp	r2, r3
 800405c:	d307      	bcc.n	800406e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f2      	bne.n	8004052 <HAL_DMA_IRQHandler+0x8da>
 800406c:	e000      	b.n	8004070 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800406e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800408e:	e003      	b.n	8004098 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8272 	beq.w	8004586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e26c      	b.n	8004586 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a43      	ldr	r2, [pc, #268]	; (80041c0 <HAL_DMA_IRQHandler+0xa48>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a42      	ldr	r2, [pc, #264]	; (80041c4 <HAL_DMA_IRQHandler+0xa4c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01d      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <HAL_DMA_IRQHandler+0xa50>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3f      	ldr	r2, [pc, #252]	; (80041cc <HAL_DMA_IRQHandler+0xa54>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <HAL_DMA_IRQHandler+0xa58>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <HAL_DMA_IRQHandler+0xa5c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <HAL_DMA_IRQHandler+0xa60>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_DMA_IRQHandler+0x984>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a39      	ldr	r2, [pc, #228]	; (80041dc <HAL_DMA_IRQHandler+0xa64>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <HAL_DMA_IRQHandler+0x988>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_DMA_IRQHandler+0x98a>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 823f 	beq.w	8004586 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2204      	movs	r2, #4
 800411a:	409a      	lsls	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80cd 	beq.w	80042c0 <HAL_DMA_IRQHandler+0xb48>
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80c7 	beq.w	80042c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	2204      	movs	r2, #4
 800413c:	409a      	lsls	r2, r3
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d049      	beq.n	80041e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8210 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004168:	e20a      	b.n	8004580 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8206 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417c:	e200      	b.n	8004580 <HAL_DMA_IRQHandler+0xe08>
 800417e:	bf00      	nop
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
 80041c0:	58025408 	.word	0x58025408
 80041c4:	5802541c 	.word	0x5802541c
 80041c8:	58025430 	.word	0x58025430
 80041cc:	58025444 	.word	0x58025444
 80041d0:	58025458 	.word	0x58025458
 80041d4:	5802546c 	.word	0x5802546c
 80041d8:	58025480 	.word	0x58025480
 80041dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d160      	bne.n	80042ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a8c      	ldr	r2, [pc, #560]	; (8004420 <HAL_DMA_IRQHandler+0xca8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d04a      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a8a      	ldr	r2, [pc, #552]	; (8004424 <HAL_DMA_IRQHandler+0xcac>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d045      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a89      	ldr	r2, [pc, #548]	; (8004428 <HAL_DMA_IRQHandler+0xcb0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d040      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a87      	ldr	r2, [pc, #540]	; (800442c <HAL_DMA_IRQHandler+0xcb4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d03b      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a86      	ldr	r2, [pc, #536]	; (8004430 <HAL_DMA_IRQHandler+0xcb8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d036      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a84      	ldr	r2, [pc, #528]	; (8004434 <HAL_DMA_IRQHandler+0xcbc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d031      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a83      	ldr	r2, [pc, #524]	; (8004438 <HAL_DMA_IRQHandler+0xcc0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d02c      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a81      	ldr	r2, [pc, #516]	; (800443c <HAL_DMA_IRQHandler+0xcc4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d027      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a80      	ldr	r2, [pc, #512]	; (8004440 <HAL_DMA_IRQHandler+0xcc8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7e      	ldr	r2, [pc, #504]	; (8004444 <HAL_DMA_IRQHandler+0xccc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01d      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7d      	ldr	r2, [pc, #500]	; (8004448 <HAL_DMA_IRQHandler+0xcd0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_DMA_IRQHandler+0xcd4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7a      	ldr	r2, [pc, #488]	; (8004450 <HAL_DMA_IRQHandler+0xcd8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a78      	ldr	r2, [pc, #480]	; (8004454 <HAL_DMA_IRQHandler+0xcdc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a77      	ldr	r2, [pc, #476]	; (8004458 <HAL_DMA_IRQHandler+0xce0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a75      	ldr	r2, [pc, #468]	; (800445c <HAL_DMA_IRQHandler+0xce4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0xb24>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0208 	bic.w	r2, r2, #8
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e007      	b.n	80042ac <HAL_DMA_IRQHandler+0xb34>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8165 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042be:	e15f      	b.n	8004580 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2202      	movs	r2, #2
 80042ca:	409a      	lsls	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80c5 	beq.w	8004460 <HAL_DMA_IRQHandler+0xce8>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80bf 	beq.w	8004460 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2202      	movs	r2, #2
 80042ec:	409a      	lsls	r2, r3
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d018      	beq.n	800432e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 813a 	beq.w	8004584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004318:	e134      	b.n	8004584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8130 	beq.w	8004584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800432c:	e12a      	b.n	8004584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d168      	bne.n	800440a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a38      	ldr	r2, [pc, #224]	; (8004420 <HAL_DMA_IRQHandler+0xca8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d04a      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a37      	ldr	r2, [pc, #220]	; (8004424 <HAL_DMA_IRQHandler+0xcac>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d045      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a35      	ldr	r2, [pc, #212]	; (8004428 <HAL_DMA_IRQHandler+0xcb0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d040      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <HAL_DMA_IRQHandler+0xcb4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d03b      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a32      	ldr	r2, [pc, #200]	; (8004430 <HAL_DMA_IRQHandler+0xcb8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d036      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a31      	ldr	r2, [pc, #196]	; (8004434 <HAL_DMA_IRQHandler+0xcbc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d031      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2f      	ldr	r2, [pc, #188]	; (8004438 <HAL_DMA_IRQHandler+0xcc0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d02c      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2e      	ldr	r2, [pc, #184]	; (800443c <HAL_DMA_IRQHandler+0xcc4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d027      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <HAL_DMA_IRQHandler+0xcc8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d022      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2b      	ldr	r2, [pc, #172]	; (8004444 <HAL_DMA_IRQHandler+0xccc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d01d      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a29      	ldr	r2, [pc, #164]	; (8004448 <HAL_DMA_IRQHandler+0xcd0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a28      	ldr	r2, [pc, #160]	; (800444c <HAL_DMA_IRQHandler+0xcd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_DMA_IRQHandler+0xcd8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a25      	ldr	r2, [pc, #148]	; (8004454 <HAL_DMA_IRQHandler+0xcdc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a23      	ldr	r2, [pc, #140]	; (8004458 <HAL_DMA_IRQHandler+0xce0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xc60>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a22      	ldr	r2, [pc, #136]	; (800445c <HAL_DMA_IRQHandler+0xce4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d108      	bne.n	80043ea <HAL_DMA_IRQHandler+0xc72>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0214 	bic.w	r2, r2, #20
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e007      	b.n	80043fa <HAL_DMA_IRQHandler+0xc82>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 020a 	bic.w	r2, r2, #10
 80043f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80b8 	beq.w	8004584 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800441c:	e0b2      	b.n	8004584 <HAL_DMA_IRQHandler+0xe0c>
 800441e:	bf00      	nop
 8004420:	40020010 	.word	0x40020010
 8004424:	40020028 	.word	0x40020028
 8004428:	40020040 	.word	0x40020040
 800442c:	40020058 	.word	0x40020058
 8004430:	40020070 	.word	0x40020070
 8004434:	40020088 	.word	0x40020088
 8004438:	400200a0 	.word	0x400200a0
 800443c:	400200b8 	.word	0x400200b8
 8004440:	40020410 	.word	0x40020410
 8004444:	40020428 	.word	0x40020428
 8004448:	40020440 	.word	0x40020440
 800444c:	40020458 	.word	0x40020458
 8004450:	40020470 	.word	0x40020470
 8004454:	40020488 	.word	0x40020488
 8004458:	400204a0 	.word	0x400204a0
 800445c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2208      	movs	r2, #8
 800446a:	409a      	lsls	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8088 	beq.w	8004586 <HAL_DMA_IRQHandler+0xe0e>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8082 	beq.w	8004586 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a41      	ldr	r2, [pc, #260]	; (800458c <HAL_DMA_IRQHandler+0xe14>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3f      	ldr	r2, [pc, #252]	; (8004590 <HAL_DMA_IRQHandler+0xe18>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3e      	ldr	r2, [pc, #248]	; (8004594 <HAL_DMA_IRQHandler+0xe1c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <HAL_DMA_IRQHandler+0xe20>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3b      	ldr	r2, [pc, #236]	; (800459c <HAL_DMA_IRQHandler+0xe24>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a39      	ldr	r2, [pc, #228]	; (80045a0 <HAL_DMA_IRQHandler+0xe28>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a38      	ldr	r2, [pc, #224]	; (80045a4 <HAL_DMA_IRQHandler+0xe2c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <HAL_DMA_IRQHandler+0xe30>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a35      	ldr	r2, [pc, #212]	; (80045ac <HAL_DMA_IRQHandler+0xe34>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a33      	ldr	r2, [pc, #204]	; (80045b0 <HAL_DMA_IRQHandler+0xe38>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a32      	ldr	r2, [pc, #200]	; (80045b4 <HAL_DMA_IRQHandler+0xe3c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <HAL_DMA_IRQHandler+0xe40>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <HAL_DMA_IRQHandler+0xe44>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_DMA_IRQHandler+0xe48>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <HAL_DMA_IRQHandler+0xe4c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <HAL_DMA_IRQHandler+0xe50>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d108      	bne.n	8004534 <HAL_DMA_IRQHandler+0xdbc>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 021c 	bic.w	r2, r2, #28
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e007      	b.n	8004544 <HAL_DMA_IRQHandler+0xdcc>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020e 	bic.w	r2, r2, #14
 8004542:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2201      	movs	r2, #1
 800454e:	409a      	lsls	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e004      	b.n	8004586 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800457c:	bf00      	nop
 800457e:	e002      	b.n	8004586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004584:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004586:	3728      	adds	r7, #40	; 0x28
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8

080045cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <DMA_CalcBaseAndBitshift+0x118>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04a      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a41      	ldr	r2, [pc, #260]	; (80046e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d045      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3f      	ldr	r2, [pc, #252]	; (80046ec <DMA_CalcBaseAndBitshift+0x120>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d040      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3e      	ldr	r2, [pc, #248]	; (80046f0 <DMA_CalcBaseAndBitshift+0x124>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d03b      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3c      	ldr	r2, [pc, #240]	; (80046f4 <DMA_CalcBaseAndBitshift+0x128>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d036      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a3b      	ldr	r2, [pc, #236]	; (80046f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d031      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a39      	ldr	r2, [pc, #228]	; (80046fc <DMA_CalcBaseAndBitshift+0x130>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02c      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a38      	ldr	r2, [pc, #224]	; (8004700 <DMA_CalcBaseAndBitshift+0x134>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d027      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a36      	ldr	r2, [pc, #216]	; (8004704 <DMA_CalcBaseAndBitshift+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a35      	ldr	r2, [pc, #212]	; (8004708 <DMA_CalcBaseAndBitshift+0x13c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01d      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a33      	ldr	r2, [pc, #204]	; (800470c <DMA_CalcBaseAndBitshift+0x140>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a32      	ldr	r2, [pc, #200]	; (8004710 <DMA_CalcBaseAndBitshift+0x144>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a30      	ldr	r2, [pc, #192]	; (8004714 <DMA_CalcBaseAndBitshift+0x148>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <DMA_CalcBaseAndBitshift+0x14c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2d      	ldr	r2, [pc, #180]	; (800471c <DMA_CalcBaseAndBitshift+0x150>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <DMA_CalcBaseAndBitshift+0xa8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <DMA_CalcBaseAndBitshift+0x154>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <DMA_CalcBaseAndBitshift+0xac>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <DMA_CalcBaseAndBitshift+0xae>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d024      	beq.n	80046c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3b10      	subs	r3, #16
 8004686:	4a27      	ldr	r2, [pc, #156]	; (8004724 <DMA_CalcBaseAndBitshift+0x158>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	4a24      	ldr	r2, [pc, #144]	; (8004728 <DMA_CalcBaseAndBitshift+0x15c>)
 8004698:	5cd3      	ldrb	r3, [r2, r3]
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d908      	bls.n	80046b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b1f      	ldr	r3, [pc, #124]	; (800472c <DMA_CalcBaseAndBitshift+0x160>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	1d1a      	adds	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	659a      	str	r2, [r3, #88]	; 0x58
 80046b6:	e00d      	b.n	80046d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	4b1b      	ldr	r3, [pc, #108]	; (800472c <DMA_CalcBaseAndBitshift+0x160>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
 80046c6:	e005      	b.n	80046d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40020010 	.word	0x40020010
 80046e8:	40020028 	.word	0x40020028
 80046ec:	40020040 	.word	0x40020040
 80046f0:	40020058 	.word	0x40020058
 80046f4:	40020070 	.word	0x40020070
 80046f8:	40020088 	.word	0x40020088
 80046fc:	400200a0 	.word	0x400200a0
 8004700:	400200b8 	.word	0x400200b8
 8004704:	40020410 	.word	0x40020410
 8004708:	40020428 	.word	0x40020428
 800470c:	40020440 	.word	0x40020440
 8004710:	40020458 	.word	0x40020458
 8004714:	40020470 	.word	0x40020470
 8004718:	40020488 	.word	0x40020488
 800471c:	400204a0 	.word	0x400204a0
 8004720:	400204b8 	.word	0x400204b8
 8004724:	aaaaaaab 	.word	0xaaaaaaab
 8004728:	0800e8fc 	.word	0x0800e8fc
 800472c:	fffffc00 	.word	0xfffffc00

08004730 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d120      	bne.n	8004786 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	2b03      	cmp	r3, #3
 800474a:	d858      	bhi.n	80047fe <DMA_CheckFifoParam+0xce>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <DMA_CheckFifoParam+0x24>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004765 	.word	0x08004765
 8004758:	08004777 	.word	0x08004777
 800475c:	08004765 	.word	0x08004765
 8004760:	080047ff 	.word	0x080047ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d048      	beq.n	8004802 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004774:	e045      	b.n	8004802 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800477e:	d142      	bne.n	8004806 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004784:	e03f      	b.n	8004806 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478e:	d123      	bne.n	80047d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	2b03      	cmp	r3, #3
 8004796:	d838      	bhi.n	800480a <DMA_CheckFifoParam+0xda>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <DMA_CheckFifoParam+0x70>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047b7 	.word	0x080047b7
 80047a8:	080047b1 	.word	0x080047b1
 80047ac:	080047c9 	.word	0x080047c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
        break;
 80047b4:	e030      	b.n	8004818 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d025      	beq.n	800480e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047c6:	e022      	b.n	800480e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047d0:	d11f      	bne.n	8004812 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047d6:	e01c      	b.n	8004812 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d902      	bls.n	80047e6 <DMA_CheckFifoParam+0xb6>
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d003      	beq.n	80047ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80047e4:	e018      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ea:	e015      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
    break;
 80047fc:	e00b      	b.n	8004816 <DMA_CheckFifoParam+0xe6>
        break;
 80047fe:	bf00      	nop
 8004800:	e00a      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        break;
 8004802:	bf00      	nop
 8004804:	e008      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        break;
 8004806:	bf00      	nop
 8004808:	e006      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        break;
 800480a:	bf00      	nop
 800480c:	e004      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
        break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <DMA_CheckFifoParam+0xe8>
    break;
 8004816:	bf00      	nop
    }
  }

  return status;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop

08004828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a38      	ldr	r2, [pc, #224]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a36      	ldr	r2, [pc, #216]	; (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a35      	ldr	r2, [pc, #212]	; (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a33      	ldr	r2, [pc, #204]	; (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a32      	ldr	r2, [pc, #200]	; (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	; (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2f      	ldr	r2, [pc, #188]	; (8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01a      	beq.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3b08      	subs	r3, #8
 8004898:	4a28      	ldr	r2, [pc, #160]	; (800493c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4b26      	ldr	r3, [pc, #152]	; (8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a24      	ldr	r2, [pc, #144]	; (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048c4:	e024      	b.n	8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3b10      	subs	r3, #16
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a1c      	ldr	r2, [pc, #112]	; (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d806      	bhi.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d902      	bls.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3308      	adds	r3, #8
 80048ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4b18      	ldr	r3, [pc, #96]	; (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	461a      	mov	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004900:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2201      	movs	r2, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	58025408 	.word	0x58025408
 8004920:	5802541c 	.word	0x5802541c
 8004924:	58025430 	.word	0x58025430
 8004928:	58025444 	.word	0x58025444
 800492c:	58025458 	.word	0x58025458
 8004930:	5802546c 	.word	0x5802546c
 8004934:	58025480 	.word	0x58025480
 8004938:	58025494 	.word	0x58025494
 800493c:	cccccccd 	.word	0xcccccccd
 8004940:	16009600 	.word	0x16009600
 8004944:	58025880 	.word	0x58025880
 8004948:	aaaaaaab 	.word	0xaaaaaaab
 800494c:	400204b8 	.word	0x400204b8
 8004950:	4002040f 	.word	0x4002040f
 8004954:	10008200 	.word	0x10008200
 8004958:	40020880 	.word	0x40020880

0800495c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04a      	beq.n	8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d847      	bhi.n	8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d022      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d01d      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80049e4:	671a      	str	r2, [r3, #112]	; 0x70
 80049e6:	e009      	b.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80049fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	2201      	movs	r2, #1
 8004a02:	409a      	lsls	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	58025408 	.word	0x58025408
 8004a18:	5802541c 	.word	0x5802541c
 8004a1c:	58025430 	.word	0x58025430
 8004a20:	58025444 	.word	0x58025444
 8004a24:	58025458 	.word	0x58025458
 8004a28:	5802546c 	.word	0x5802546c
 8004a2c:	58025480 	.word	0x58025480
 8004a30:	58025494 	.word	0x58025494
 8004a34:	1600963f 	.word	0x1600963f
 8004a38:	58025940 	.word	0x58025940
 8004a3c:	1000823f 	.word	0x1000823f
 8004a40:	40020940 	.word	0x40020940

08004a44 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d113      	bne.n	8004a86 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f241 1334 	movw	r3, #4404	; 0x1134
 8004a66:	4413      	add	r3, r2
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d109      	bne.n	8004a86 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f005 f88c 	bl	8009b90 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004a80:	f248 0240 	movw	r2, #32832	; 0x8040
 8004a84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d113      	bne.n	8004ac0 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f241 1334 	movw	r3, #4404	; 0x1134
 8004aa0:	4413      	add	r3, r2
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d109      	bne.n	8004ac0 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8c7 	bl	8004c40 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004aba:	f248 0201 	movw	r2, #32769	; 0x8001
 8004abe:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad2:	d149      	bne.n	8004b68 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	f241 1334 	movw	r3, #4404	; 0x1134
 8004adc:	4413      	add	r3, r2
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d13e      	bne.n	8004b68 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f043 0208 	orr.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d11b      	bne.n	8004b42 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	f241 1302 	movw	r3, #4354	; 0x1102
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b26:	4413      	add	r3, r2
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6811      	ldr	r1, [r2, #0]
 8004b2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b32:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b36:	440b      	add	r3, r1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	22e0      	movs	r2, #224	; 0xe0
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
 8004b40:	e00f      	b.n	8004b62 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b5c:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8004b60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f876 	bl	8004c54 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b70:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004b74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b78:	d10e      	bne.n	8004b98 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	22e0      	movs	r2, #224	; 0xe0
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f86b 	bl	8004c68 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bb0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f85f 	bl	8004c7c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f853 	bl	8004c90 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004bf0:	f7fd ff24 	bl	8002a3c <HAL_GetCurrentCPUID>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d10d      	bne.n	8004c16 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <HAL_ETH_IRQHandler+0x1f4>)
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d014      	beq.n	8004c30 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_ETH_IRQHandler+0x1f4>)
 8004c08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f848 	bl	8004ca4 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004c14:	e00c      	b.n	8004c30 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_ETH_IRQHandler+0x1f8>)
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_ETH_IRQHandler+0x1f8>)
 8004c24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f83a 	bl	8004ca4 <HAL_ETH_WakeUpCallback>
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	58000080 	.word	0x58000080
 8004c3c:	580000c0 	.word	0x580000c0

08004c40 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cc6:	4b89      	ldr	r3, [pc, #548]	; (8004eec <HAL_GPIO_Init+0x234>)
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cca:	e194      	b.n	8004ff6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8186 	beq.w	8004ff0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d00b      	beq.n	8004d04 <HAL_GPIO_Init+0x4c>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d007      	beq.n	8004d04 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf8:	2b11      	cmp	r3, #17
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b12      	cmp	r3, #18
 8004d02:	d130      	bne.n	8004d66 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	2203      	movs	r2, #3
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 0201 	and.w	r2, r3, #1
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	2203      	movs	r2, #3
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0xee>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b12      	cmp	r3, #18
 8004da4:	d123      	bne.n	8004dee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2203      	movs	r2, #3
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80e0 	beq.w	8004ff0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e30:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <HAL_GPIO_Init+0x238>)
 8004e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e36:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <HAL_GPIO_Init+0x238>)
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_GPIO_Init+0x238>)
 8004e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4e:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <HAL_GPIO_Init+0x23c>)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <HAL_GPIO_Init+0x240>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d052      	beq.n	8004f20 <HAL_GPIO_Init+0x268>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <HAL_GPIO_Init+0x244>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_GPIO_Init+0x22e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <HAL_GPIO_Init+0x248>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d02b      	beq.n	8004ee2 <HAL_GPIO_Init+0x22a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <HAL_GPIO_Init+0x24c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d025      	beq.n	8004ede <HAL_GPIO_Init+0x226>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <HAL_GPIO_Init+0x250>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <HAL_GPIO_Init+0x222>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_GPIO_Init+0x254>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d019      	beq.n	8004ed6 <HAL_GPIO_Init+0x21e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_GPIO_Init+0x258>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_GPIO_Init+0x21a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_GPIO_Init+0x25c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_GPIO_Init+0x216>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <HAL_GPIO_Init+0x260>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_Init+0x212>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <HAL_GPIO_Init+0x264>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_GPIO_Init+0x20e>
 8004ec2:	2309      	movs	r3, #9
 8004ec4:	e02d      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	e02b      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	e029      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ece:	2307      	movs	r3, #7
 8004ed0:	e027      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ed2:	2306      	movs	r3, #6
 8004ed4:	e025      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	e023      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004eda:	2304      	movs	r3, #4
 8004edc:	e021      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e01f      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e01d      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e01b      	b.n	8004f22 <HAL_GPIO_Init+0x26a>
 8004eea:	bf00      	nop
 8004eec:	58000080 	.word	0x58000080
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	58000400 	.word	0x58000400
 8004ef8:	58020000 	.word	0x58020000
 8004efc:	58020400 	.word	0x58020400
 8004f00:	58020800 	.word	0x58020800
 8004f04:	58020c00 	.word	0x58020c00
 8004f08:	58021000 	.word	0x58021000
 8004f0c:	58021400 	.word	0x58021400
 8004f10:	58021800 	.word	0x58021800
 8004f14:	58021c00 	.word	0x58021c00
 8004f18:	58022000 	.word	0x58022000
 8004f1c:	58022400 	.word	0x58022400
 8004f20:	2300      	movs	r3, #0
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	f002 0203 	and.w	r2, r2, #3
 8004f28:	0092      	lsls	r2, r2, #2
 8004f2a:	4093      	lsls	r3, r2
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f32:	4938      	ldr	r1, [pc, #224]	; (8005014 <HAL_GPIO_Init+0x35c>)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	3302      	adds	r3, #2
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	f47f ae63 	bne.w	8004ccc <HAL_GPIO_Init+0x14>
  }
}
 8005006:	bf00      	nop
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	58000400 	.word	0x58000400

08005018 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <HAL_HSEM_FastTake+0x2c>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3320      	adds	r3, #32
 8005026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_HSEM_FastTake+0x30>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d101      	bne.n	8005034 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	58026400 	.word	0x58026400
 8005048:	80000300 	.word	0x80000300

0800504c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005056:	4906      	ldr	r1, [pc, #24]	; (8005070 <HAL_HSEM_Release+0x24>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	58026400 	.word	0x58026400

08005074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e07f      	b.n	8005186 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fb fd5a 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	; 0x24
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	e006      	b.n	80050fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d104      	bne.n	800510e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800510c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <HAL_I2C_Init+0x11c>)
 800511a:	430b      	orrs	r3, r1
 800511c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800512c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	ea42 0103 	orr.w	r1, r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69d9      	ldr	r1, [r3, #28]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	02008000 	.word	0x02008000

08005194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d138      	bne.n	800521c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e032      	b.n	800521e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b20      	cmp	r3, #32
 800523e:	d139      	bne.n	80052b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800524a:	2302      	movs	r3, #2
 800524c:	e033      	b.n	80052b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	; 0x24
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800527c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80052ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052dc:	4b09      	ldr	r3, [pc, #36]	; (8005304 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80052de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	4906      	ldr	r1, [pc, #24]	; (8005308 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
 8005308:	58000400 	.word	0x58000400

0800530c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e038      	b.n	8005390 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005326:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f245 5255 	movw	r2, #21845	; 0x5555
 8005330:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6852      	ldr	r2, [r2, #4]
 800533a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005346:	f7fd fa09 	bl	800275c <HAL_GetTick>
 800534a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800534c:	e008      	b.n	8005360 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800534e:	f7fd fa05 	bl	800275c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b30      	cmp	r3, #48	; 0x30
 800535a:	d901      	bls.n	8005360 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e017      	b.n	8005390 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f1      	bne.n	800534e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d005      	beq.n	8005384 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68d2      	ldr	r2, [r2, #12]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e004      	b.n	800538e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80053a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <HAL_PWREx_ConfigSupply+0xb0>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d00a      	beq.n	80053e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053cc:	4b26      	ldr	r3, [pc, #152]	; (8005468 <HAL_PWREx_ConfigSupply+0xb0>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d001      	beq.n	80053de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e040      	b.n	8005460 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e03e      	b.n	8005460 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053e2:	4b21      	ldr	r3, [pc, #132]	; (8005468 <HAL_PWREx_ConfigSupply+0xb0>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80053ea:	491f      	ldr	r1, [pc, #124]	; (8005468 <HAL_PWREx_ConfigSupply+0xb0>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053f2:	f7fd f9b3 	bl	800275c <HAL_GetTick>
 80053f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053f8:	e009      	b.n	800540e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053fa:	f7fd f9af 	bl	800275c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005408:	d901      	bls.n	800540e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e028      	b.n	8005460 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_PWREx_ConfigSupply+0xb0>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	d1ee      	bne.n	80053fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b1e      	cmp	r3, #30
 8005420:	d008      	beq.n	8005434 <HAL_PWREx_ConfigSupply+0x7c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b2e      	cmp	r3, #46	; 0x2e
 8005426:	d005      	beq.n	8005434 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b1d      	cmp	r3, #29
 800542c:	d002      	beq.n	8005434 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b2d      	cmp	r3, #45	; 0x2d
 8005432:	d114      	bne.n	800545e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005434:	f7fd f992 	bl	800275c <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800543a:	e009      	b.n	8005450 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800543c:	f7fd f98e 	bl	800275c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800544a:	d901      	bls.n	8005450 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e007      	b.n	8005460 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_PWREx_ConfigSupply+0xb0>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545c:	d1ee      	bne.n	800543c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	58024800 	.word	0x58024800

0800546c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7fd f972 	bl	800275c <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e05f      	b.n	8005544 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d107      	bne.n	80054a0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fb fe77 	bl	8001184 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005496:	f241 3188 	movw	r1, #5000	; 0x1388
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f85a 	bl	8005554 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	021a      	lsls	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	2120      	movs	r1, #32
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f852 	bl	8005570 <QSPI_WaitFlagStateUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054d0:	7afb      	ldrb	r3, [r7, #11]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d135      	bne.n	8005542 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_QSPI_Init+0xe0>)
 80054de:	4013      	ands	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6852      	ldr	r2, [r2, #4]
 80054e4:	0611      	lsls	r1, r2, #24
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68d2      	ldr	r2, [r2, #12]
 80054ea:	4311      	orrs	r1, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	69d2      	ldr	r2, [r2, #28]
 80054f0:	4311      	orrs	r1, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6a12      	ldr	r2, [r2, #32]
 80054f6:	4311      	orrs	r1, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_QSPI_Init+0xe4>)
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6912      	ldr	r2, [r2, #16]
 800550e:	0411      	lsls	r1, r2, #16
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6952      	ldr	r2, [r2, #20]
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6992      	ldr	r2, [r2, #24]
 800551a:	4311      	orrs	r1, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	430b      	orrs	r3, r1
 8005522:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005542:	7afb      	ldrb	r3, [r7, #11]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	00ffff2f 	.word	0x00ffff2f
 8005550:	ffe0f8fe 	.word	0xffe0f8fe

08005554 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005580:	e01a      	b.n	80055b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005588:	d016      	beq.n	80055b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd f8e7 	bl	800275c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2204      	movs	r2, #4
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e00e      	b.n	80055d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d1d6      	bne.n	8005582 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08c      	sub	sp, #48	; 0x30
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e3ff      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8087 	beq.w	800570e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005600:	4b99      	ldr	r3, [pc, #612]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800560a:	4b97      	ldr	r3, [pc, #604]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b10      	cmp	r3, #16
 8005614:	d007      	beq.n	8005626 <HAL_RCC_OscConfig+0x46>
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	2b18      	cmp	r3, #24
 800561a:	d110      	bne.n	800563e <HAL_RCC_OscConfig+0x5e>
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d10b      	bne.n	800563e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005626:	4b90      	ldr	r3, [pc, #576]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d06c      	beq.n	800570c <HAL_RCC_OscConfig+0x12c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d168      	bne.n	800570c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e3d9      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x76>
 8005648:	4b87      	ldr	r3, [pc, #540]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a86      	ldr	r2, [pc, #536]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e02e      	b.n	80056b4 <HAL_RCC_OscConfig+0xd4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10c      	bne.n	8005678 <HAL_RCC_OscConfig+0x98>
 800565e:	4b82      	ldr	r3, [pc, #520]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a81      	ldr	r2, [pc, #516]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b7f      	ldr	r3, [pc, #508]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7e      	ldr	r2, [pc, #504]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e01d      	b.n	80056b4 <HAL_RCC_OscConfig+0xd4>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005680:	d10c      	bne.n	800569c <HAL_RCC_OscConfig+0xbc>
 8005682:	4b79      	ldr	r3, [pc, #484]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a78      	ldr	r2, [pc, #480]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	4b76      	ldr	r3, [pc, #472]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a75      	ldr	r2, [pc, #468]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e00b      	b.n	80056b4 <HAL_RCC_OscConfig+0xd4>
 800569c:	4b72      	ldr	r3, [pc, #456]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a71      	ldr	r2, [pc, #452]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80056a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a6e      	ldr	r2, [pc, #440]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80056ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d013      	beq.n	80056e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd f84e 	bl	800275c <HAL_GetTick>
 80056c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c4:	f7fd f84a 	bl	800275c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b64      	cmp	r3, #100	; 0x64
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e38d      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056d6:	4b64      	ldr	r3, [pc, #400]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0xe4>
 80056e2:	e014      	b.n	800570e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fd f83a 	bl	800275c <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ec:	f7fd f836 	bl	800275c <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	; 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e379      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056fe:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x10c>
 800570a:	e000      	b.n	800570e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80ae 	beq.w	8005878 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571c:	4b52      	ldr	r3, [pc, #328]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005724:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005726:	4b50      	ldr	r3, [pc, #320]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_RCC_OscConfig+0x162>
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	2b18      	cmp	r3, #24
 8005736:	d13a      	bne.n	80057ae <HAL_RCC_OscConfig+0x1ce>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d135      	bne.n	80057ae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005742:	4b49      	ldr	r3, [pc, #292]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_RCC_OscConfig+0x17a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e34b      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575a:	f7fd f80b 	bl	8002774 <HAL_GetREVID>
 800575e:	4602      	mov	r2, r0
 8005760:	f241 0303 	movw	r3, #4099	; 0x1003
 8005764:	429a      	cmp	r2, r3
 8005766:	d817      	bhi.n	8005798 <HAL_RCC_OscConfig+0x1b8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d108      	bne.n	8005782 <HAL_RCC_OscConfig+0x1a2>
 8005770:	4b3d      	ldr	r3, [pc, #244]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005778:	4a3b      	ldr	r2, [pc, #236]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800577a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005780:	e07a      	b.n	8005878 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b39      	ldr	r3, [pc, #228]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	031b      	lsls	r3, r3, #12
 8005790:	4935      	ldr	r1, [pc, #212]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005796:	e06f      	b.n	8005878 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	4930      	ldr	r1, [pc, #192]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ac:	e064      	b.n	8005878 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d045      	beq.n	8005842 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057b6:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 0219 	bic.w	r2, r3, #25
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	4929      	ldr	r1, [pc, #164]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fc ffc8 	bl	800275c <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d0:	f7fc ffc4 	bl	800275c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e307      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	f7fc ffc1 	bl	8002774 <HAL_GetREVID>
 80057f2:	4602      	mov	r2, r0
 80057f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d817      	bhi.n	800582c <HAL_RCC_OscConfig+0x24c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d108      	bne.n	8005816 <HAL_RCC_OscConfig+0x236>
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800580e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005812:	6053      	str	r3, [r2, #4]
 8005814:	e030      	b.n	8005878 <HAL_RCC_OscConfig+0x298>
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	031b      	lsls	r3, r3, #12
 8005824:	4910      	ldr	r1, [pc, #64]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005826:	4313      	orrs	r3, r2
 8005828:	604b      	str	r3, [r1, #4]
 800582a:	e025      	b.n	8005878 <HAL_RCC_OscConfig+0x298>
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	490b      	ldr	r1, [pc, #44]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 800583c:	4313      	orrs	r3, r2
 800583e:	604b      	str	r3, [r1, #4]
 8005840:	e01a      	b.n	8005878 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <HAL_RCC_OscConfig+0x288>)
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fc ff85 	bl	800275c <HAL_GetTick>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005854:	e00a      	b.n	800586c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005856:	f7fc ff81 	bl	800275c <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d903      	bls.n	800586c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e2c4      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
 8005868:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800586c:	4ba4      	ldr	r3, [pc, #656]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ee      	bne.n	8005856 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a9 	beq.w	80059d8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005886:	4b9e      	ldr	r3, [pc, #632]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005890:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d007      	beq.n	80058ac <HAL_RCC_OscConfig+0x2cc>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b18      	cmp	r3, #24
 80058a0:	d13a      	bne.n	8005918 <HAL_RCC_OscConfig+0x338>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d135      	bne.n	8005918 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058ac:	4b94      	ldr	r3, [pc, #592]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_OscConfig+0x2e4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e296      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058c4:	f7fc ff56 	bl	8002774 <HAL_GetREVID>
 80058c8:	4602      	mov	r2, r0
 80058ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d817      	bhi.n	8005902 <HAL_RCC_OscConfig+0x322>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d108      	bne.n	80058ec <HAL_RCC_OscConfig+0x30c>
 80058da:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058e2:	4a87      	ldr	r2, [pc, #540]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80058e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058ea:	e075      	b.n	80059d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058ec:	4b84      	ldr	r3, [pc, #528]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	069b      	lsls	r3, r3, #26
 80058fa:	4981      	ldr	r1, [pc, #516]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005900:	e06a      	b.n	80059d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005902:	4b7f      	ldr	r3, [pc, #508]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	061b      	lsls	r3, r3, #24
 8005910:	497b      	ldr	r1, [pc, #492]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005912:	4313      	orrs	r3, r2
 8005914:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005916:	e05f      	b.n	80059d8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d042      	beq.n	80059a6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005920:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fc ff16 	bl	800275c <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005934:	f7fc ff12 	bl	800275c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e255      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005946:	4b6e      	ldr	r3, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005952:	f7fc ff0f 	bl	8002774 <HAL_GetREVID>
 8005956:	4602      	mov	r2, r0
 8005958:	f241 0303 	movw	r3, #4099	; 0x1003
 800595c:	429a      	cmp	r2, r3
 800595e:	d817      	bhi.n	8005990 <HAL_RCC_OscConfig+0x3b0>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	2b20      	cmp	r3, #32
 8005966:	d108      	bne.n	800597a <HAL_RCC_OscConfig+0x39a>
 8005968:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005970:	4a63      	ldr	r2, [pc, #396]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005976:	6053      	str	r3, [r2, #4]
 8005978:	e02e      	b.n	80059d8 <HAL_RCC_OscConfig+0x3f8>
 800597a:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	069b      	lsls	r3, r3, #26
 8005988:	495d      	ldr	r1, [pc, #372]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
 800598e:	e023      	b.n	80059d8 <HAL_RCC_OscConfig+0x3f8>
 8005990:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	4958      	ldr	r1, [pc, #352]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60cb      	str	r3, [r1, #12]
 80059a4:	e018      	b.n	80059d8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059a6:	4b56      	ldr	r3, [pc, #344]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a55      	ldr	r2, [pc, #340]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80059ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fc fed3 	bl	800275c <HAL_GetTick>
 80059b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059ba:	f7fc fecf 	bl	800275c <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e212      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059cc:	4b4c      	ldr	r3, [pc, #304]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f0      	bne.n	80059ba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d036      	beq.n	8005a52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d019      	beq.n	8005a20 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ec:	4b44      	ldr	r3, [pc, #272]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	4a43      	ldr	r2, [pc, #268]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f8:	f7fc feb0 	bl	800275c <HAL_GetTick>
 80059fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a00:	f7fc feac 	bl	800275c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1ef      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a12:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x420>
 8005a1e:	e018      	b.n	8005a52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a20:	4b37      	ldr	r3, [pc, #220]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a24:	4a36      	ldr	r2, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2c:	f7fc fe96 	bl	800275c <HAL_GetTick>
 8005a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a34:	f7fc fe92 	bl	800275c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e1d5      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a46:	4b2e      	ldr	r3, [pc, #184]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d036      	beq.n	8005acc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d019      	beq.n	8005a9a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a72:	f7fc fe73 	bl	800275c <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a7a:	f7fc fe6f 	bl	800275c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1b2      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x49a>
 8005a98:	e018      	b.n	8005acc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a9a:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005aa6:	f7fc fe59 	bl	800275c <HAL_GetTick>
 8005aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005aae:	f7fc fe55 	bl	800275c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e198      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_RCC_OscConfig+0x520>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8085 	beq.w	8005be4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <HAL_RCC_OscConfig+0x524>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <HAL_RCC_OscConfig+0x524>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae6:	f7fc fe39 	bl	800275c <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aec:	e00c      	b.n	8005b08 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aee:	f7fc fe35 	bl	800275c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b64      	cmp	r3, #100	; 0x64
 8005afa:	d905      	bls.n	8005b08 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e178      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b08:	4b96      	ldr	r3, [pc, #600]	; (8005d64 <HAL_RCC_OscConfig+0x784>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0ec      	beq.n	8005aee <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <HAL_RCC_OscConfig+0x54a>
 8005b1c:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a91      	ldr	r2, [pc, #580]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	e02d      	b.n	8005b86 <HAL_RCC_OscConfig+0x5a6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x56c>
 8005b32:	4b8d      	ldr	r3, [pc, #564]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	4a8c      	ldr	r2, [pc, #560]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3e:	4b8a      	ldr	r3, [pc, #552]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a89      	ldr	r2, [pc, #548]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4a:	e01c      	b.n	8005b86 <HAL_RCC_OscConfig+0x5a6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b05      	cmp	r3, #5
 8005b52:	d10c      	bne.n	8005b6e <HAL_RCC_OscConfig+0x58e>
 8005b54:	4b84      	ldr	r3, [pc, #528]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	4a83      	ldr	r2, [pc, #524]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b5a:	f043 0304 	orr.w	r3, r3, #4
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b60:	4b81      	ldr	r3, [pc, #516]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	4a80      	ldr	r2, [pc, #512]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6c:	e00b      	b.n	8005b86 <HAL_RCC_OscConfig+0x5a6>
 8005b6e:	4b7e      	ldr	r3, [pc, #504]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	4a7d      	ldr	r2, [pc, #500]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	4a7a      	ldr	r2, [pc, #488]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005b80:	f023 0304 	bic.w	r3, r3, #4
 8005b84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d015      	beq.n	8005bba <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8e:	f7fc fde5 	bl	800275c <HAL_GetTick>
 8005b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fc fde1 	bl	800275c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e122      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bac:	4b6e      	ldr	r3, [pc, #440]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0ee      	beq.n	8005b96 <HAL_RCC_OscConfig+0x5b6>
 8005bb8:	e014      	b.n	8005be4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bba:	f7fc fdcf 	bl	800275c <HAL_GetTick>
 8005bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc fdcb 	bl	800275c <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e10c      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bd8:	4b63      	ldr	r3, [pc, #396]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ee      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8101 	beq.w	8005df0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005bee:	4b5e      	ldr	r3, [pc, #376]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bf6:	2b18      	cmp	r3, #24
 8005bf8:	f000 80bc 	beq.w	8005d74 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f040 8095 	bne.w	8005d30 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c06:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fc fda3 	bl	800275c <HAL_GetTick>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1a:	f7fc fd9f 	bl	800275c <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e0e2      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c2c:	4b4e      	ldr	r3, [pc, #312]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c3c:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <HAL_RCC_OscConfig+0x78c>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c48:	0112      	lsls	r2, r2, #4
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	4946      	ldr	r1, [pc, #280]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	628b      	str	r3, [r1, #40]	; 0x28
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	3b01      	subs	r3, #1
 8005c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c60:	3b01      	subs	r3, #1
 8005c62:	025b      	lsls	r3, r3, #9
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	061b      	lsls	r3, r3, #24
 8005c7e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c82:	4939      	ldr	r1, [pc, #228]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c88:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a36      	ldr	r2, [pc, #216]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c94:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c98:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <HAL_RCC_OscConfig+0x790>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ca0:	00d2      	lsls	r2, r2, #3
 8005ca2:	4931      	ldr	r1, [pc, #196]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ca8:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f023 020c 	bic.w	r2, r3, #12
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	492c      	ldr	r1, [pc, #176]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f023 0202 	bic.w	r2, r3, #2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	4928      	ldr	r1, [pc, #160]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ccc:	4b26      	ldr	r3, [pc, #152]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	4a25      	ldr	r2, [pc, #148]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a22      	ldr	r2, [pc, #136]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ce4:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fc fd28 	bl	800275c <HAL_GetTick>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d10:	f7fc fd24 	bl	800275c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e067      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f0      	beq.n	8005d10 <HAL_RCC_OscConfig+0x730>
 8005d2e:	e05f      	b.n	8005df0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fc fd0e 	bl	800275c <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fc fd0a 	bl	800275c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e04d      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <HAL_RCC_OscConfig+0x788>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x764>
 8005d62:	e045      	b.n	8005df0 <HAL_RCC_OscConfig+0x810>
 8005d64:	58024800 	.word	0x58024800
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	fffffc0c 	.word	0xfffffc0c
 8005d70:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d74:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <HAL_RCC_OscConfig+0x81c>)
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d7a:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <HAL_RCC_OscConfig+0x81c>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d031      	beq.n	8005dec <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0203 	and.w	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d12a      	bne.n	8005dec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d122      	bne.n	8005dec <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d11a      	bne.n	8005dec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	0a5b      	lsrs	r3, r3, #9
 8005dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d111      	bne.n	8005dec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d108      	bne.n	8005dec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	0e1b      	lsrs	r3, r3, #24
 8005dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	; 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	58024400 	.word	0x58024400

08005e00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e19c      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e14:	4b8a      	ldr	r3, [pc, #552]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d910      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e22:	4b87      	ldr	r3, [pc, #540]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 020f 	bic.w	r2, r3, #15
 8005e2a:	4985      	ldr	r1, [pc, #532]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b83      	ldr	r3, [pc, #524]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e184      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d010      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	4b7b      	ldr	r3, [pc, #492]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d908      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e60:	4b78      	ldr	r3, [pc, #480]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4975      	ldr	r1, [pc, #468]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	4b70      	ldr	r3, [pc, #448]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d908      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e8e:	4b6d      	ldr	r3, [pc, #436]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	496a      	ldr	r1, [pc, #424]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d010      	beq.n	8005ece <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	4b64      	ldr	r3, [pc, #400]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d908      	bls.n	8005ece <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ebc:	4b61      	ldr	r3, [pc, #388]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	495e      	ldr	r1, [pc, #376]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69da      	ldr	r2, [r3, #28]
 8005ede:	4b59      	ldr	r3, [pc, #356]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d908      	bls.n	8005efc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005eea:	4b56      	ldr	r3, [pc, #344]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4953      	ldr	r1, [pc, #332]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	4b4d      	ldr	r3, [pc, #308]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d908      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f18:	4b4a      	ldr	r3, [pc, #296]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f023 020f 	bic.w	r2, r3, #15
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4947      	ldr	r1, [pc, #284]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d055      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f36:	4b43      	ldr	r3, [pc, #268]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4940      	ldr	r1, [pc, #256]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d107      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f50:	4b3c      	ldr	r3, [pc, #240]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d121      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0f6      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d107      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f68:	4b36      	ldr	r3, [pc, #216]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d115      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0ea      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f80:	4b30      	ldr	r3, [pc, #192]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0de      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f90:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0d6      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fa0:	4b28      	ldr	r3, [pc, #160]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f023 0207 	bic.w	r2, r3, #7
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4925      	ldr	r1, [pc, #148]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb2:	f7fc fbd3 	bl	800275c <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fba:	f7fc fbcf 	bl	800275c <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e0be      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d1eb      	bne.n	8005fba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	4b14      	ldr	r3, [pc, #80]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d208      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ffe:	4b11      	ldr	r3, [pc, #68]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f023 020f 	bic.w	r2, r3, #15
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	490e      	ldr	r1, [pc, #56]	; (8006044 <HAL_RCC_ClockConfig+0x244>)
 800600c:	4313      	orrs	r3, r2
 800600e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d214      	bcs.n	8006048 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 020f 	bic.w	r2, r3, #15
 8006026:	4906      	ldr	r1, [pc, #24]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b04      	ldr	r3, [pc, #16]	; (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d005      	beq.n	8006048 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e086      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
 8006040:	52002000 	.word	0x52002000
 8006044:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	4b3f      	ldr	r3, [pc, #252]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006060:	429a      	cmp	r2, r3
 8006062:	d208      	bcs.n	8006076 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006064:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	4939      	ldr	r1, [pc, #228]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006072:	4313      	orrs	r3, r2
 8006074:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d010      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	4b34      	ldr	r3, [pc, #208]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800608e:	429a      	cmp	r2, r3
 8006090:	d208      	bcs.n	80060a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	492e      	ldr	r1, [pc, #184]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	4b28      	ldr	r3, [pc, #160]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060bc:	429a      	cmp	r2, r3
 80060be:	d208      	bcs.n	80060d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4922      	ldr	r1, [pc, #136]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d010      	beq.n	8006100 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d208      	bcs.n	8006100 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060ee:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	4917      	ldr	r1, [pc, #92]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006100:	f000 f834 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8006104:	4601      	mov	r1, r0
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	4a12      	ldr	r2, [pc, #72]	; (800615c <HAL_RCC_ClockConfig+0x35c>)
 8006112:	5cd3      	ldrb	r3, [r2, r3]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	fa21 f303 	lsr.w	r3, r1, r3
 800611c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	4a0d      	ldr	r2, [pc, #52]	; (800615c <HAL_RCC_ClockConfig+0x35c>)
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
 8006134:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <HAL_RCC_ClockConfig+0x360>)
 8006136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006138:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <HAL_RCC_ClockConfig+0x364>)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_RCC_ClockConfig+0x368>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fb fd56 	bl	8001bf4 <HAL_InitTick>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
 800615c:	0800e8ec 	.word	0x0800e8ec
 8006160:	20000004 	.word	0x20000004
 8006164:	20000000 	.word	0x20000000
 8006168:	20000008 	.word	0x20000008

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006172:	4baf      	ldr	r3, [pc, #700]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800617a:	2b18      	cmp	r3, #24
 800617c:	f200 814e 	bhi.w	800641c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061ed 	.word	0x080061ed
 800618c:	0800641d 	.word	0x0800641d
 8006190:	0800641d 	.word	0x0800641d
 8006194:	0800641d 	.word	0x0800641d
 8006198:	0800641d 	.word	0x0800641d
 800619c:	0800641d 	.word	0x0800641d
 80061a0:	0800641d 	.word	0x0800641d
 80061a4:	0800641d 	.word	0x0800641d
 80061a8:	08006213 	.word	0x08006213
 80061ac:	0800641d 	.word	0x0800641d
 80061b0:	0800641d 	.word	0x0800641d
 80061b4:	0800641d 	.word	0x0800641d
 80061b8:	0800641d 	.word	0x0800641d
 80061bc:	0800641d 	.word	0x0800641d
 80061c0:	0800641d 	.word	0x0800641d
 80061c4:	0800641d 	.word	0x0800641d
 80061c8:	08006219 	.word	0x08006219
 80061cc:	0800641d 	.word	0x0800641d
 80061d0:	0800641d 	.word	0x0800641d
 80061d4:	0800641d 	.word	0x0800641d
 80061d8:	0800641d 	.word	0x0800641d
 80061dc:	0800641d 	.word	0x0800641d
 80061e0:	0800641d 	.word	0x0800641d
 80061e4:	0800641d 	.word	0x0800641d
 80061e8:	0800621f 	.word	0x0800621f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ec:	4b90      	ldr	r3, [pc, #576]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061f8:	4b8d      	ldr	r3, [pc, #564]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	08db      	lsrs	r3, r3, #3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	4a8c      	ldr	r2, [pc, #560]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800620a:	e10a      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800620c:	4b89      	ldr	r3, [pc, #548]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800620e:	61bb      	str	r3, [r7, #24]
    break;
 8006210:	e107      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006212:	4b89      	ldr	r3, [pc, #548]	; (8006438 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006214:	61bb      	str	r3, [r7, #24]
    break;
 8006216:	e104      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006218:	4b88      	ldr	r3, [pc, #544]	; (800643c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800621a:	61bb      	str	r3, [r7, #24]
    break;
 800621c:	e101      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800621e:	4b84      	ldr	r3, [pc, #528]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006228:	4b81      	ldr	r3, [pc, #516]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006232:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006234:	4b7e      	ldr	r3, [pc, #504]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800623e:	4b7c      	ldr	r3, [pc, #496]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	08db      	lsrs	r3, r3, #3
 8006244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006256:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80da 	beq.w	8006416 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d05a      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006268:	2b01      	cmp	r3, #1
 800626a:	d302      	bcc.n	8006272 <HAL_RCC_GetSysClockFreq+0x106>
 800626c:	2b02      	cmp	r3, #2
 800626e:	d078      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006270:	e099      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006272:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02d      	beq.n	80062da <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800627e:	4b6c      	ldr	r3, [pc, #432]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	4a6a      	ldr	r2, [pc, #424]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a8:	4b61      	ldr	r3, [pc, #388]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80062bc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2d4>
 80062c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80062d8:	e087      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006444 <HAL_RCC_GetSysClockFreq+0x2d8>
 80062e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ec:	4b50      	ldr	r3, [pc, #320]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006300:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631c:	e065      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006328:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006448 <HAL_RCC_GetSysClockFreq+0x2dc>
 800632c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006330:	4b3f      	ldr	r3, [pc, #252]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006340:	ed97 6a02 	vldr	s12, [r7, #8]
 8006344:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006360:	e043      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800644c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006374:	4b2e      	ldr	r3, [pc, #184]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006384:	ed97 6a02 	vldr	s12, [r7, #8]
 8006388:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2d4>
 800638c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a4:	e021      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006448 <HAL_RCC_GetSysClockFreq+0x2dc>
 80063b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80063cc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2d4>
 80063d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	0a5b      	lsrs	r3, r3, #9
 80063f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f4:	3301      	adds	r3, #1
 80063f6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006402:	edd7 6a07 	vldr	s13, [r7, #28]
 8006406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640e:	ee17 3a90 	vmov	r3, s15
 8006412:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006414:	e005      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
    break;
 800641a:	e002      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800641e:	61bb      	str	r3, [r7, #24]
    break;
 8006420:	bf00      	nop
  }

  return sysclockfreq;
 8006422:	69bb      	ldr	r3, [r7, #24]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3724      	adds	r7, #36	; 0x24
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	58024400 	.word	0x58024400
 8006434:	03d09000 	.word	0x03d09000
 8006438:	003d0900 	.word	0x003d0900
 800643c:	017d7840 	.word	0x017d7840
 8006440:	46000000 	.word	0x46000000
 8006444:	4c742400 	.word	0x4c742400
 8006448:	4a742400 	.word	0x4a742400
 800644c:	4bbebc20 	.word	0x4bbebc20

08006450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006456:	f7ff fe89 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800645a:	4601      	mov	r1, r0
 800645c:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006468:	5cd3      	ldrb	r3, [r2, r3]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	fa21 f303 	lsr.w	r3, r1, r3
 8006472:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800647e:	5cd3      	ldrb	r3, [r2, r3]
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800648c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800648e:	4a07      	ldr	r2, [pc, #28]	; (80064ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	58024400 	.word	0x58024400
 80064a4:	0800e8ec 	.word	0x0800e8ec
 80064a8:	20000004 	.word	0x20000004
 80064ac:	20000000 	.word	0x20000000

080064b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064b4:	f7ff ffcc 	bl	8006450 <HAL_RCC_GetHCLKFreq>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064c6:	5cd3      	ldrb	r3, [r2, r3]
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	58024400 	.word	0x58024400
 80064d8:	0800e8ec 	.word	0x0800e8ec

080064dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064e0:	f7ff ffb6 	bl	8006450 <HAL_RCC_GetHCLKFreq>
 80064e4:	4601      	mov	r1, r0
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	4a04      	ldr	r2, [pc, #16]	; (8006504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064f2:	5cd3      	ldrb	r3, [r2, r3]
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	58024400 	.word	0x58024400
 8006504:	0800e8ec 	.word	0x0800e8ec

08006508 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	223f      	movs	r2, #63	; 0x3f
 8006516:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006518:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0207 	and.w	r2, r3, #7
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006524:	4b17      	ldr	r3, [pc, #92]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006530:	4b14      	ldr	r3, [pc, #80]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006548:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <HAL_RCC_GetClockConfig+0x7c>)
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <HAL_RCC_GetClockConfig+0x80>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	601a      	str	r2, [r3, #0]
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	58024400 	.word	0x58024400
 8006588:	52002000 	.word	0x52002000

0800658c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006598:	2300      	movs	r3, #0
 800659a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d03d      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b0:	d013      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80065b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b6:	d802      	bhi.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80065bc:	e01f      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80065be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c2:	d013      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x60>
 80065c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065c8:	d01c      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80065ca:	e018      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065cc:	4baf      	ldr	r3, [pc, #700]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4aae      	ldr	r2, [pc, #696]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065d8:	e015      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	2102      	movs	r1, #2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 f96f 	bl	80078c4 <RCCEx_PLL2_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065ea:	e00c      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3324      	adds	r3, #36	; 0x24
 80065f0:	2102      	movs	r1, #2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fa18 	bl	8007a28 <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065fc:	e003      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800660c:	4b9f      	ldr	r3, [pc, #636]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006618:	499c      	ldr	r1, [pc, #624]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800661a:	4313      	orrs	r3, r2
 800661c:	650b      	str	r3, [r1, #80]	; 0x50
 800661e:	e001      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662c:	2b00      	cmp	r3, #0
 800662e:	d03d      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	2b04      	cmp	r3, #4
 8006636:	d826      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006655 	.word	0x08006655
 8006644:	08006663 	.word	0x08006663
 8006648:	08006675 	.word	0x08006675
 800664c:	0800668d 	.word	0x0800668d
 8006650:	0800668d 	.word	0x0800668d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006654:	4b8d      	ldr	r3, [pc, #564]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	4a8c      	ldr	r2, [pc, #560]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800665a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006660:	e015      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f001 f92b 	bl	80078c4 <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006672:	e00c      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3324      	adds	r3, #36	; 0x24
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f001 f9d4 	bl	8007a28 <RCCEx_PLL3_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006684:	e003      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
      break;
 800668a:	e000      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800668c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006694:	4b7d      	ldr	r3, [pc, #500]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	f023 0207 	bic.w	r2, r3, #7
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	497a      	ldr	r1, [pc, #488]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	650b      	str	r3, [r1, #80]	; 0x50
 80066a6:	e001      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d03e      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d01c      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80066c0:	2b80      	cmp	r3, #128	; 0x80
 80066c2:	d804      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x142>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d00d      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066cc:	e01e      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80066ce:	2bc0      	cmp	r3, #192	; 0xc0
 80066d0:	d01f      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d6:	d01e      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80066d8:	e018      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066da:	4b6c      	ldr	r3, [pc, #432]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	4a6b      	ldr	r2, [pc, #428]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066e6:	e017      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f8e8 	bl	80078c4 <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066f8:	e00e      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3324      	adds	r3, #36	; 0x24
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f001 f991 	bl	8007a28 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800670a:	e005      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
      break;
 8006710:	e002      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800671e:	4b5b      	ldr	r3, [pc, #364]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006722:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	4958      	ldr	r1, [pc, #352]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800672c:	4313      	orrs	r3, r2
 800672e:	650b      	str	r3, [r1, #80]	; 0x50
 8006730:	e001      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673e:	2b00      	cmp	r3, #0
 8006740:	d044      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674c:	d01f      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800674e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006752:	d805      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800675c:	d00e      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800675e:	e01f      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006760:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006764:	d01f      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800676a:	d01e      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800676c:	e018      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800676e:	4b47      	ldr	r3, [pc, #284]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	4a46      	ldr	r2, [pc, #280]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006778:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800677a:	e017      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f001 f89e 	bl	80078c4 <RCCEx_PLL2_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800678c:	e00e      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3324      	adds	r3, #36	; 0x24
 8006792:	2100      	movs	r1, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f947 	bl	8007a28 <RCCEx_PLL3_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800679e:	e005      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80067aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067b2:	4b36      	ldr	r3, [pc, #216]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067c0:	4932      	ldr	r1, [pc, #200]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	658b      	str	r3, [r1, #88]	; 0x58
 80067c6:	e001      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d044      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e2:	d01f      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e8:	d805      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80067ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067f2:	d00e      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80067f4:	e01f      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80067f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067fa:	d01f      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80067fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006800:	d01e      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006802:	e018      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4a20      	ldr	r2, [pc, #128]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800680a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006810:	e017      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3304      	adds	r3, #4
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f001 f853 	bl	80078c4 <RCCEx_PLL2_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006822:	e00e      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3324      	adds	r3, #36	; 0x24
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f8fc 	bl	8007a28 <RCCEx_PLL3_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006834:	e005      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
      break;
 800683a:	e002      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006848:	4b10      	ldr	r3, [pc, #64]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006856:	490d      	ldr	r1, [pc, #52]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006858:	4313      	orrs	r3, r2
 800685a:	658b      	str	r3, [r1, #88]	; 0x58
 800685c:	e001      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d035      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	2b10      	cmp	r3, #16
 8006874:	d00c      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006876:	2b10      	cmp	r3, #16
 8006878:	d802      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01b      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800687e:	e017      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d00c      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006884:	2b30      	cmp	r3, #48	; 0x30
 8006886:	d018      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006888:	e012      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800688a:	bf00      	nop
 800688c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006890:	4baf      	ldr	r3, [pc, #700]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4aae      	ldr	r2, [pc, #696]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800689a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800689c:	e00e      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	2102      	movs	r1, #2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f80d 	bl	80078c4 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80068ae:	e005      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	e002      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80068ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068c2:	4ba3      	ldr	r3, [pc, #652]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ce:	49a0      	ldr	r1, [pc, #640]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068d4:	e001      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d042      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ee:	d01f      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d805      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fe:	d00e      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006900:	e01f      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006906:	d01f      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800690c:	d01e      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800690e:	e018      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006910:	4b8f      	ldr	r3, [pc, #572]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	4a8e      	ldr	r2, [pc, #568]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800691a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800691c:	e017      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3304      	adds	r3, #4
 8006922:	2100      	movs	r1, #0
 8006924:	4618      	mov	r0, r3
 8006926:	f000 ffcd 	bl	80078c4 <RCCEx_PLL2_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800692e:	e00e      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3324      	adds	r3, #36	; 0x24
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f876 	bl	8007a28 <RCCEx_PLL3_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006940:	e005      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	75fb      	strb	r3, [r7, #23]
      break;
 8006946:	e002      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800694c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d109      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006954:	4b7e      	ldr	r3, [pc, #504]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	497b      	ldr	r1, [pc, #492]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	650b      	str	r3, [r1, #80]	; 0x50
 8006966:	e001      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d042      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006980:	d01b      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006986:	d805      	bhi.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d022      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800698c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006990:	d00a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006992:	e01b      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006998:	d01d      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800699a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800699e:	d01c      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80069a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069a4:	d01b      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x452>
 80069a6:	e011      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 ff88 	bl	80078c4 <RCCEx_PLL2_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069b8:	e012      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	2101      	movs	r1, #1
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f831 	bl	8007a28 <RCCEx_PLL3_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069ca:	e009      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e006      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069d2:	bf00      	nop
 80069d4:	e004      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069e6:	4b5a      	ldr	r3, [pc, #360]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f2:	4957      	ldr	r1, [pc, #348]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	650b      	str	r3, [r1, #80]	; 0x50
 80069f8:	e001      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d044      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a14:	d01b      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1a:	d805      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d022      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a24:	d00a      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006a26:	e01b      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d01d      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a32:	d01c      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006a34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a38:	d01b      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a3a:	e011      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	2101      	movs	r1, #1
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 ff3e 	bl	80078c4 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a4c:	e012      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3324      	adds	r3, #36	; 0x24
 8006a52:	2101      	movs	r1, #1
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 ffe7 	bl	8007a28 <RCCEx_PLL3_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a5e:	e009      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
      break;
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a66:	bf00      	nop
 8006a68:	e004      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e002      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a7a:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a88:	4931      	ldr	r1, [pc, #196]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006a8e:	e001      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d02d      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa8:	d005      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aae:	d009      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ab4:	e00f      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab6:	4b26      	ldr	r3, [pc, #152]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ac2:	e00c      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fefa 	bl	80078c4 <RCCEx_PLL2_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ad4:	e003      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ada:	e000      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ae4:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af0:	4917      	ldr	r1, [pc, #92]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	650b      	str	r3, [r1, #80]	; 0x50
 8006af6:	e001      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d035      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d81b      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b55 	.word	0x08006b55
 8006b1c:	08006b29 	.word	0x08006b29
 8006b20:	08006b37 	.word	0x08006b37
 8006b24:	08006b55 	.word	0x08006b55
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b28:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b34:	e00f      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fec1 	bl	80078c4 <RCCEx_PLL2_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b46:	e006      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4c:	e003      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006b4e:	bf00      	nop
 8006b50:	58024400 	.word	0x58024400
      break;
 8006b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b5c:	4bba      	ldr	r3, [pc, #744]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b60:	f023 0203 	bic.w	r2, r3, #3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b68:	49b7      	ldr	r1, [pc, #732]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b6e:	e001      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8086 	beq.w	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b82:	4bb2      	ldr	r3, [pc, #712]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4ab1      	ldr	r2, [pc, #708]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8e:	f7fb fde5 	bl	800275c <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b94:	e009      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b96:	f7fb fde1 	bl	800275c <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b64      	cmp	r3, #100	; 0x64
 8006ba2:	d902      	bls.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006baa:	4ba8      	ldr	r3, [pc, #672]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ef      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d166      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bbc:	4ba2      	ldr	r3, [pc, #648]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bc6:	4053      	eors	r3, r2
 8006bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d013      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bd0:	4b9d      	ldr	r3, [pc, #628]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bda:	4b9b      	ldr	r3, [pc, #620]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	4a9a      	ldr	r2, [pc, #616]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006be6:	4b98      	ldr	r3, [pc, #608]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	4a97      	ldr	r2, [pc, #604]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bf2:	4a95      	ldr	r2, [pc, #596]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c02:	d115      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fb fdaa 	bl	800275c <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c0a:	e00b      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0c:	f7fb fda6 	bl	800275c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d902      	bls.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	75fb      	strb	r3, [r7, #23]
            break;
 8006c22:	e005      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c24:	4b88      	ldr	r3, [pc, #544]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ed      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d126      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006c46:	4b80      	ldr	r3, [pc, #512]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c54:	0919      	lsrs	r1, r3, #4
 8006c56:	4b7e      	ldr	r3, [pc, #504]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006c58:	400b      	ands	r3, r1
 8006c5a:	497b      	ldr	r1, [pc, #492]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	610b      	str	r3, [r1, #16]
 8006c60:	e005      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006c62:	4b79      	ldr	r3, [pc, #484]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	4a78      	ldr	r2, [pc, #480]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c6c:	6113      	str	r3, [r2, #16]
 8006c6e:	4b76      	ldr	r3, [pc, #472]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7c:	4972      	ldr	r1, [pc, #456]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	670b      	str	r3, [r1, #112]	; 0x70
 8006c82:	e004      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	75bb      	strb	r3, [r7, #22]
 8006c88:	e001      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d07d      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9e:	2b28      	cmp	r3, #40	; 0x28
 8006ca0:	d866      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006d77 	.word	0x08006d77
 8006cac:	08006d71 	.word	0x08006d71
 8006cb0:	08006d71 	.word	0x08006d71
 8006cb4:	08006d71 	.word	0x08006d71
 8006cb8:	08006d71 	.word	0x08006d71
 8006cbc:	08006d71 	.word	0x08006d71
 8006cc0:	08006d71 	.word	0x08006d71
 8006cc4:	08006d71 	.word	0x08006d71
 8006cc8:	08006d4d 	.word	0x08006d4d
 8006ccc:	08006d71 	.word	0x08006d71
 8006cd0:	08006d71 	.word	0x08006d71
 8006cd4:	08006d71 	.word	0x08006d71
 8006cd8:	08006d71 	.word	0x08006d71
 8006cdc:	08006d71 	.word	0x08006d71
 8006ce0:	08006d71 	.word	0x08006d71
 8006ce4:	08006d71 	.word	0x08006d71
 8006ce8:	08006d5f 	.word	0x08006d5f
 8006cec:	08006d71 	.word	0x08006d71
 8006cf0:	08006d71 	.word	0x08006d71
 8006cf4:	08006d71 	.word	0x08006d71
 8006cf8:	08006d71 	.word	0x08006d71
 8006cfc:	08006d71 	.word	0x08006d71
 8006d00:	08006d71 	.word	0x08006d71
 8006d04:	08006d71 	.word	0x08006d71
 8006d08:	08006d77 	.word	0x08006d77
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006d71 	.word	0x08006d71
 8006d14:	08006d71 	.word	0x08006d71
 8006d18:	08006d71 	.word	0x08006d71
 8006d1c:	08006d71 	.word	0x08006d71
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d71 	.word	0x08006d71
 8006d28:	08006d77 	.word	0x08006d77
 8006d2c:	08006d71 	.word	0x08006d71
 8006d30:	08006d71 	.word	0x08006d71
 8006d34:	08006d71 	.word	0x08006d71
 8006d38:	08006d71 	.word	0x08006d71
 8006d3c:	08006d71 	.word	0x08006d71
 8006d40:	08006d71 	.word	0x08006d71
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d77 	.word	0x08006d77
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	2101      	movs	r1, #1
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fdb6 	bl	80078c4 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d5c:	e00c      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fe5f 	bl	8007a28 <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d6e:	e003      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
      break;
 8006d74:	e000      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d7e:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d8a:	492f      	ldr	r1, [pc, #188]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006d90:	e001      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d037      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d820      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006df3 	.word	0x08006df3
 8006db4:	08006dc9 	.word	0x08006dc9
 8006db8:	08006ddb 	.word	0x08006ddb
 8006dbc:	08006df3 	.word	0x08006df3
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006df3 	.word	0x08006df3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	2101      	movs	r1, #1
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fd78 	bl	80078c4 <RCCEx_PLL2_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dd8:	e00c      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3324      	adds	r3, #36	; 0x24
 8006dde:	2101      	movs	r1, #1
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fe21 	bl	8007a28 <RCCEx_PLL3_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dea:	e003      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]
      break;
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006dfa:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	f023 0207 	bic.w	r2, r3, #7
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e06:	4910      	ldr	r1, [pc, #64]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e0c:	e001      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d040      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	d827      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e7f 	.word	0x08006e7f
 8006e34:	08006e55 	.word	0x08006e55
 8006e38:	08006e67 	.word	0x08006e67
 8006e3c:	08006e7f 	.word	0x08006e7f
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e7f 	.word	0x08006e7f
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	58024800 	.word	0x58024800
 8006e50:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fd32 	bl	80078c4 <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fddb 	bl	8007a28 <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e86:	4bb2      	ldr	r3, [pc, #712]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	f023 0207 	bic.w	r2, r3, #7
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e94:	49ae      	ldr	r1, [pc, #696]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	658b      	str	r3, [r1, #88]	; 0x58
 8006e9a:	e001      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d044      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb6:	d01b      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ebc:	d805      	bhi.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d022      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec6:	d00a      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006ec8:	e01b      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ece:	d01d      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed4:	d01c      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006ed6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eda:	d01b      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006edc:	e011      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fced 	bl	80078c4 <RCCEx_PLL2_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006eee:	e012      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3324      	adds	r3, #36	; 0x24
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fd96 	bl	8007a28 <RCCEx_PLL3_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f00:	e009      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
      break;
 8006f06:	e006      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f1c:	4b8c      	ldr	r3, [pc, #560]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f20:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2a:	4989      	ldr	r1, [pc, #548]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f30:	e001      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d044      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f4c:	d01b      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f52:	d805      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d022      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5c:	d00a      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006f5e:	e01b      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d01d      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006f66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f6a:	d01c      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f70:	d01b      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006f72:	e011      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fca2 	bl	80078c4 <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f84:	e012      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3324      	adds	r3, #36	; 0x24
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fd4b 	bl	8007a28 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f96:	e009      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9c:	e006      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e004      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e002      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e000      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fb2:	4b67      	ldr	r3, [pc, #412]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fc0:	4963      	ldr	r1, [pc, #396]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	658b      	str	r3, [r1, #88]	; 0x58
 8006fc6:	e001      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d044      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe2:	d01b      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe8:	d805      	bhi.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d022      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff2:	d00a      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ff4:	e01b      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffa:	d01d      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006ffc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007000:	d01c      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007002:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007006:	d01b      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007008:	e011      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fc57 	bl	80078c4 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800701a:	e012      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3324      	adds	r3, #36	; 0x24
 8007020:	2102      	movs	r1, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fd00 	bl	8007a28 <RCCEx_PLL3_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800702c:	e009      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]
      break;
 8007032:	e006      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007034:	bf00      	nop
 8007036:	e004      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007038:	bf00      	nop
 800703a:	e002      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007048:	4b41      	ldr	r3, [pc, #260]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007056:	493e      	ldr	r1, [pc, #248]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007058:	4313      	orrs	r3, r2
 800705a:	658b      	str	r3, [r1, #88]	; 0x58
 800705c:	e001      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d01a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007078:	d10a      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3324      	adds	r3, #36	; 0x24
 800707e:	2102      	movs	r1, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fcd1 	bl	8007a28 <RCCEx_PLL3_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709e:	492c      	ldr	r1, [pc, #176]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ba:	d10a      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	2102      	movs	r1, #2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fcb0 	bl	8007a28 <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e0:	491b      	ldr	r1, [pc, #108]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d032      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fc:	d00d      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80070fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007102:	d016      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d111      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fbd8 	bl	80078c4 <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007118:	e00c      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	2102      	movs	r1, #2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fc81 	bl	8007a28 <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800712a:	e003      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	e000      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10c      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007148:	4901      	ldr	r1, [pc, #4]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800714a:	4313      	orrs	r3, r2
 800714c:	658b      	str	r3, [r1, #88]	; 0x58
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02f      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800716a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800716e:	d00c      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007170:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007174:	d015      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717a:	d10f      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717c:	4b79      	ldr	r3, [pc, #484]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	4a78      	ldr	r2, [pc, #480]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007188:	e00c      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3324      	adds	r3, #36	; 0x24
 800718e:	2101      	movs	r1, #1
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fc49 	bl	8007a28 <RCCEx_PLL3_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]
      break;
 80071a0:	e000      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80071a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071aa:	4b6e      	ldr	r3, [pc, #440]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b8:	496a      	ldr	r1, [pc, #424]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	654b      	str	r3, [r1, #84]	; 0x54
 80071be:	e001      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d029      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80071d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071dc:	d007      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80071de:	e00f      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e0:	4b60      	ldr	r3, [pc, #384]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a5f      	ldr	r2, [pc, #380]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071ec:	e00b      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	2102      	movs	r1, #2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fb65 	bl	80078c4 <RCCEx_PLL2_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071fe:	e002      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
      break;
 8007204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007206:	7dfb      	ldrb	r3, [r7, #23]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800720c:	4b55      	ldr	r3, [pc, #340]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800720e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007218:	4952      	ldr	r1, [pc, #328]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800721a:	4313      	orrs	r3, r2
 800721c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800721e:	e001      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3324      	adds	r3, #36	; 0x24
 8007234:	2102      	movs	r1, #2
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fbf6 	bl	8007a28 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02f      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d00c      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800725c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007260:	d802      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d011      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007266:	e00d      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726c:	d00f      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800726e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007272:	d00e      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007274:	e006      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007276:	4b3b      	ldr	r3, [pc, #236]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	4a3a      	ldr	r2, [pc, #232]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800727c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007282:	e007      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	e004      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800728a:	bf00      	nop
 800728c:	e002      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800729a:	4b32      	ldr	r3, [pc, #200]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a6:	492f      	ldr	r1, [pc, #188]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	654b      	str	r3, [r1, #84]	; 0x54
 80072ac:	e001      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072be:	4b29      	ldr	r3, [pc, #164]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4926      	ldr	r1, [pc, #152]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072dc:	4b21      	ldr	r3, [pc, #132]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072ea:	491e      	ldr	r1, [pc, #120]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072fc:	4b19      	ldr	r3, [pc, #100]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007308:	4916      	ldr	r1, [pc, #88]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800730a:	4313      	orrs	r3, r2
 800730c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	4a11      	ldr	r2, [pc, #68]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007324:	6113      	str	r3, [r2, #16]
 8007326:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007330:	490c      	ldr	r1, [pc, #48]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da08      	bge.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800733e:	4b09      	ldr	r3, [pc, #36]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	4906      	ldr	r1, [pc, #24]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800734c:	4313      	orrs	r3, r2
 800734e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007350:	7dbb      	ldrb	r3, [r7, #22]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e000      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	58024400 	.word	0x58024400

08007368 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800736c:	f7ff f870 	bl	8006450 <HAL_RCC_GetHCLKFreq>
 8007370:	4601      	mov	r1, r0
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4a04      	ldr	r2, [pc, #16]	; (8007390 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	58024400 	.word	0x58024400
 8007390:	0800e8ec 	.word	0x0800e8ec

08007394 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007394:	b480      	push	{r7}
 8007396:	b089      	sub	sp, #36	; 0x24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800739c:	4b9d      	ldr	r3, [pc, #628]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80073a6:	4b9b      	ldr	r3, [pc, #620]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	0b1b      	lsrs	r3, r3, #12
 80073ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073b2:	4b98      	ldr	r3, [pc, #608]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80073be:	4b95      	ldr	r3, [pc, #596]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	08db      	lsrs	r3, r3, #3
 80073c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 810a 	beq.w	80075f6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d05a      	beq.n	800749e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d302      	bcc.n	80073f2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d078      	beq.n	80074e2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80073f0:	e099      	b.n	8007526 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f2:	4b88      	ldr	r3, [pc, #544]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d02d      	beq.n	800745a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073fe:	4b85      	ldr	r3, [pc, #532]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	08db      	lsrs	r3, r3, #3
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	4a83      	ldr	r2, [pc, #524]	; (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007428:	4b7a      	ldr	r3, [pc, #488]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007438:	ed97 6a03 	vldr	s12, [r7, #12]
 800743c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007454:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007458:	e087      	b.n	800756a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007464:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746c:	4b69      	ldr	r3, [pc, #420]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007480:	eddf 5a66 	vldr	s11, [pc, #408]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800749c:	e065      	b.n	800756a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80074ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b0:	4b58      	ldr	r3, [pc, #352]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074e0:	e043      	b.n	800756a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007628 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80074f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f4:	4b47      	ldr	r3, [pc, #284]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007504:	ed97 6a03 	vldr	s12, [r7, #12]
 8007508:	eddf 5a44 	vldr	s11, [pc, #272]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800750c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007520:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007524:	e021      	b.n	800756a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007530:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007538:	4b36      	ldr	r3, [pc, #216]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007548:	ed97 6a03 	vldr	s12, [r7, #12]
 800754c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007564:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007568:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800756a:	4b2a      	ldr	r3, [pc, #168]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	0a5b      	lsrs	r3, r3, #9
 8007570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007584:	edd7 6a07 	vldr	s13, [r7, #28]
 8007588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007590:	ee17 2a90 	vmov	r2, s15
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007598:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075be:	ee17 2a90 	vmov	r2, s15
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	0e1b      	lsrs	r3, r3, #24
 80075cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ec:	ee17 2a90 	vmov	r2, s15
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075f4:	e008      	b.n	8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	609a      	str	r2, [r3, #8]
}
 8007608:	bf00      	nop
 800760a:	3724      	adds	r7, #36	; 0x24
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	46000000 	.word	0x46000000
 8007620:	4c742400 	.word	0x4c742400
 8007624:	4a742400 	.word	0x4a742400
 8007628:	4bbebc20 	.word	0x4bbebc20

0800762c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800762c:	b480      	push	{r7}
 800762e:	b089      	sub	sp, #36	; 0x24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007634:	4b9d      	ldr	r3, [pc, #628]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800763e:	4b9b      	ldr	r3, [pc, #620]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	0d1b      	lsrs	r3, r3, #20
 8007644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007648:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800764a:	4b98      	ldr	r3, [pc, #608]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007656:	4b95      	ldr	r3, [pc, #596]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	08db      	lsrs	r3, r3, #3
 800765c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	fb02 f303 	mul.w	r3, r2, r3
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 810a 	beq.w	800788e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d05a      	beq.n	8007736 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007680:	2b01      	cmp	r3, #1
 8007682:	d302      	bcc.n	800768a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007684:	2b02      	cmp	r3, #2
 8007686:	d078      	beq.n	800777a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007688:	e099      	b.n	80077be <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800768a:	4b88      	ldr	r3, [pc, #544]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d02d      	beq.n	80076f2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007696:	4b85      	ldr	r3, [pc, #532]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	4a83      	ldr	r2, [pc, #524]	; (80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c0:	4b7a      	ldr	r3, [pc, #488]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076f0:	e087      	b.n	8007802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007704:	4b69      	ldr	r3, [pc, #420]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007714:	ed97 6a03 	vldr	s12, [r7, #12]
 8007718:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800771c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007734:	e065      	b.n	8007802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007740:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007748:	4b58      	ldr	r3, [pc, #352]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007758:	ed97 6a03 	vldr	s12, [r7, #12]
 800775c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800776c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007774:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007778:	e043      	b.n	8007802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007784:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778c:	4b47      	ldr	r3, [pc, #284]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779c:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077bc:	e021      	b.n	8007802 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80077cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d0:	4b36      	ldr	r3, [pc, #216]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d8:	ee07 3a90 	vmov	s15, r3
 80077dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007800:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007802:	4b2a      	ldr	r3, [pc, #168]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	0a5b      	lsrs	r3, r3, #9
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007828:	ee17 2a90 	vmov	r2, s15
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007830:	4b1e      	ldr	r3, [pc, #120]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	0c1b      	lsrs	r3, r3, #16
 8007836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800784a:	edd7 6a07 	vldr	s13, [r7, #28]
 800784e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007856:	ee17 2a90 	vmov	r2, s15
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	0e1b      	lsrs	r3, r3, #24
 8007864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007878:	edd7 6a07 	vldr	s13, [r7, #28]
 800787c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007884:	ee17 2a90 	vmov	r2, s15
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800788c:	e008      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	609a      	str	r2, [r3, #8]
}
 80078a0:	bf00      	nop
 80078a2:	3724      	adds	r7, #36	; 0x24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	58024400 	.word	0x58024400
 80078b0:	03d09000 	.word	0x03d09000
 80078b4:	46000000 	.word	0x46000000
 80078b8:	4c742400 	.word	0x4c742400
 80078bc:	4a742400 	.word	0x4a742400
 80078c0:	4bbebc20 	.word	0x4bbebc20

080078c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078d2:	4b53      	ldr	r3, [pc, #332]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d101      	bne.n	80078e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e099      	b.n	8007a16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078e2:	4b4f      	ldr	r3, [pc, #316]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a4e      	ldr	r2, [pc, #312]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80078e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ee:	f7fa ff35 	bl	800275c <HAL_GetTick>
 80078f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078f4:	e008      	b.n	8007908 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078f6:	f7fa ff31 	bl	800275c <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e086      	b.n	8007a16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007908:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007914:	4b42      	ldr	r3, [pc, #264]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007918:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	031b      	lsls	r3, r3, #12
 8007922:	493f      	ldr	r1, [pc, #252]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007924:	4313      	orrs	r3, r2
 8007926:	628b      	str	r3, [r1, #40]	; 0x28
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	3b01      	subs	r3, #1
 800792e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	3b01      	subs	r3, #1
 8007938:	025b      	lsls	r3, r3, #9
 800793a:	b29b      	uxth	r3, r3
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	3b01      	subs	r3, #1
 8007944:	041b      	lsls	r3, r3, #16
 8007946:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	3b01      	subs	r3, #1
 8007952:	061b      	lsls	r3, r3, #24
 8007954:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007958:	4931      	ldr	r1, [pc, #196]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800795a:	4313      	orrs	r3, r2
 800795c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800795e:	4b30      	ldr	r3, [pc, #192]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	492d      	ldr	r1, [pc, #180]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800796c:	4313      	orrs	r3, r2
 800796e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007970:	4b2b      	ldr	r3, [pc, #172]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	f023 0220 	bic.w	r2, r3, #32
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	4928      	ldr	r1, [pc, #160]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800797e:	4313      	orrs	r3, r2
 8007980:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007982:	4b27      	ldr	r3, [pc, #156]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	4a26      	ldr	r2, [pc, #152]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007988:	f023 0310 	bic.w	r3, r3, #16
 800798c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007992:	4b24      	ldr	r3, [pc, #144]	; (8007a24 <RCCEx_PLL2_Config+0x160>)
 8007994:	4013      	ands	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	69d2      	ldr	r2, [r2, #28]
 800799a:	00d2      	lsls	r2, r2, #3
 800799c:	4920      	ldr	r1, [pc, #128]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079a2:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079a8:	f043 0310 	orr.w	r3, r3, #16
 80079ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079b4:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079c0:	e00f      	b.n	80079e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d106      	bne.n	80079d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079c8:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	4a14      	ldr	r2, [pc, #80]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079d4:	e005      	b.n	80079e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079d6:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	4a11      	ldr	r2, [pc, #68]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a0e      	ldr	r2, [pc, #56]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ee:	f7fa feb5 	bl	800275c <HAL_GetTick>
 80079f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079f4:	e008      	b.n	8007a08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079f6:	f7fa feb1 	bl	800275c <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e006      	b.n	8007a16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	58024400 	.word	0x58024400
 8007a24:	ffff0007 	.word	0xffff0007

08007a28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a36:	4b53      	ldr	r3, [pc, #332]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d101      	bne.n	8007a46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e099      	b.n	8007b7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a46:	4b4f      	ldr	r3, [pc, #316]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4e      	ldr	r2, [pc, #312]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a52:	f7fa fe83 	bl	800275c <HAL_GetTick>
 8007a56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a58:	e008      	b.n	8007a6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a5a:	f7fa fe7f 	bl	800275c <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e086      	b.n	8007b7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a6c:	4b45      	ldr	r3, [pc, #276]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f0      	bne.n	8007a5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a78:	4b42      	ldr	r3, [pc, #264]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	051b      	lsls	r3, r3, #20
 8007a86:	493f      	ldr	r1, [pc, #252]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	628b      	str	r3, [r1, #40]	; 0x28
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	025b      	lsls	r3, r3, #9
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	061b      	lsls	r3, r3, #24
 8007ab8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007abc:	4931      	ldr	r1, [pc, #196]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ac2:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	492d      	ldr	r1, [pc, #180]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ad4:	4b2b      	ldr	r3, [pc, #172]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	4928      	ldr	r1, [pc, #160]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ae6:	4b27      	ldr	r3, [pc, #156]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	4a26      	ldr	r2, [pc, #152]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <RCCEx_PLL3_Config+0x160>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	69d2      	ldr	r2, [r2, #28]
 8007afe:	00d2      	lsls	r2, r2, #3
 8007b00:	4920      	ldr	r1, [pc, #128]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b06:	4b1f      	ldr	r3, [pc, #124]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b18:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b24:	e00f      	b.n	8007b46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d106      	bne.n	8007b3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b2c:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b38:	e005      	b.n	8007b46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b3a:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	4a11      	ldr	r2, [pc, #68]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b52:	f7fa fe03 	bl	800275c <HAL_GetTick>
 8007b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b58:	e008      	b.n	8007b6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b5a:	f7fa fdff 	bl	800275c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	58024400 	.word	0x58024400
 8007b88:	ffff0007 	.word	0xffff0007

08007b8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d067      	beq.n	8007c6e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7f9 fbce 	bl	8001354 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	22ca      	movs	r2, #202	; 0xca
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2253      	movs	r2, #83	; 0x53
 8007bce:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f879 	bl	8007cc8 <RTC_EnterInitMode>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d13b      	bne.n	8007c58 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6899      	ldr	r1, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <HAL_RTC_Init+0xec>)
 8007bec:	400b      	ands	r3, r1
 8007bee:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6899      	ldr	r1, [r3, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	0419      	lsls	r1, r3, #16
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f881 	bl	8007d28 <RTC_ExitInitMode>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d113      	bne.n	8007c58 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0203 	bic.w	r2, r2, #3
 8007c3e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69da      	ldr	r2, [r3, #28]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	22ff      	movs	r2, #255	; 0xff
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d103      	bne.n	8007c6e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	ff8fffbf 	.word	0xff8fffbf

08007c7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c92:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007c94:	f7fa fd62 	bl	800275c <HAL_GetTick>
 8007c98:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c9a:	e009      	b.n	8007cb0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c9c:	f7fa fd5e 	bl	800275c <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007caa:	d901      	bls.n	8007cb0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e007      	b.n	8007cc0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0ee      	beq.n	8007c9c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d11d      	bne.n	8007d1e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007cec:	f7fa fd36 	bl	800275c <HAL_GetTick>
 8007cf0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007cf2:	e00d      	b.n	8007d10 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007cf4:	f7fa fd32 	bl	800275c <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d02:	d905      	bls.n	8007d10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ea      	beq.n	8007cf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007d34:	4b1a      	ldr	r3, [pc, #104]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a19      	ldr	r2, [pc, #100]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007d40:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10c      	bne.n	8007d66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ff95 	bl	8007c7c <HAL_RTC_WaitForSynchro>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01e      	beq.n	8007d96 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	e017      	b.n	8007d96 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d66:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d6c:	f023 0320 	bic.w	r3, r3, #32
 8007d70:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff82 	bl	8007c7c <HAL_RTC_WaitForSynchro>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2203      	movs	r2, #3
 8007d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <RTC_ExitInitMode+0x78>)
 8007d90:	f043 0320 	orr.w	r3, r3, #32
 8007d94:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	58004000 	.word	0x58004000

08007da4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e0e2      	b.n	8007f80 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a70      	ldr	r2, [pc, #448]	; (8007f88 <HAL_SPI_Init+0x1e4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00f      	beq.n	8007dea <HAL_SPI_Init+0x46>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a6f      	ldr	r2, [pc, #444]	; (8007f8c <HAL_SPI_Init+0x1e8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00a      	beq.n	8007dea <HAL_SPI_Init+0x46>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a6d      	ldr	r2, [pc, #436]	; (8007f90 <HAL_SPI_Init+0x1ec>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d005      	beq.n	8007dea <HAL_SPI_Init+0x46>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d901      	bls.n	8007dea <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e0ca      	b.n	8007f80 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fb96 	bl	800851c <SPI_GetPacketSize>
 8007df0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a64      	ldr	r2, [pc, #400]	; (8007f88 <HAL_SPI_Init+0x1e4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00c      	beq.n	8007e16 <HAL_SPI_Init+0x72>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a62      	ldr	r2, [pc, #392]	; (8007f8c <HAL_SPI_Init+0x1e8>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d007      	beq.n	8007e16 <HAL_SPI_Init+0x72>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a61      	ldr	r2, [pc, #388]	; (8007f90 <HAL_SPI_Init+0x1ec>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d002      	beq.n	8007e16 <HAL_SPI_Init+0x72>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d811      	bhi.n	8007e3a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e1a:	4a5b      	ldr	r2, [pc, #364]	; (8007f88 <HAL_SPI_Init+0x1e4>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d009      	beq.n	8007e34 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a59      	ldr	r2, [pc, #356]	; (8007f8c <HAL_SPI_Init+0x1e8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_SPI_Init+0x90>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a58      	ldr	r2, [pc, #352]	; (8007f90 <HAL_SPI_Init+0x1ec>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d104      	bne.n	8007e3e <HAL_SPI_Init+0x9a>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	d901      	bls.n	8007e3e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e0a0      	b.n	8007f80 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7f9 fbf0 	bl	8001638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e78:	d110      	bne.n	8007e9c <HAL_SPI_Init+0xf8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e82:	d10b      	bne.n	8007e9c <HAL_SPI_Init+0xf8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d107      	bne.n	8007e9c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e9a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eae:	ea42 0103 	orr.w	r1, r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007efc:	ea42 0103 	orr.w	r1, r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f26:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f3a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0201 	bic.w	r2, r2, #1
 8007f4a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	40013000 	.word	0x40013000
 8007f8c:	40003800 	.word	0x40003800
 8007f90:	40003c00 	.word	0x40003c00

08007f94 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	; 0x28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007fac:	6a3a      	ldr	r2, [r7, #32]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fc6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3330      	adds	r3, #48	; 0x30
 8007fce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d113      	bne.n	8008002 <HAL_SPI_IRQHandler+0x6e>
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10e      	bne.n	8008002 <HAL_SPI_IRQHandler+0x6e>
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
    handled = 1UL;
 8007ffe:	2301      	movs	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10f      	bne.n	800802c <HAL_SPI_IRQHandler+0x98>
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <HAL_SPI_IRQHandler+0x98>
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d105      	bne.n	800802c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
    handled = 1UL;
 8008028:	2301      	movs	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10f      	bne.n	8008056 <HAL_SPI_IRQHandler+0xc2>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <HAL_SPI_IRQHandler+0xc2>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
    handled = 1UL;
 8008052:	2301      	movs	r3, #1
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	f040 8170 	bne.w	800833e <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80a0 	beq.w	80081aa <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f042 0208 	orr.w	r2, r2, #8
 8008078:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699a      	ldr	r2, [r3, #24]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0210 	orr.w	r2, r2, #16
 8008088:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699a      	ldr	r2, [r3, #24]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008098:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691a      	ldr	r2, [r3, #16]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0208 	bic.w	r2, r2, #8
 80080a8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00f      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x140>
 80080b4:	7cfb      	ldrb	r3, [r7, #19]
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d004      	beq.n	80080c4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x140>
 80080c4:	7cfb      	ldrb	r3, [r7, #19]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d059      	beq.n	800817e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d154      	bne.n	800817e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d13d      	bne.n	800815e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80080e2:	e036      	b.n	8008152 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b0f      	cmp	r3, #15
 80080ea:	d90b      	bls.n	8008104 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080f6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	665a      	str	r2, [r3, #100]	; 0x64
 8008102:	e01d      	b.n	8008140 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b07      	cmp	r3, #7
 800810a:	d90b      	bls.n	8008124 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	8812      	ldrh	r2, [r2, #0]
 8008114:	b292      	uxth	r2, r2
 8008116:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811c:	1c9a      	adds	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	665a      	str	r2, [r3, #100]	; 0x64
 8008122:	e00d      	b.n	8008140 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008130:	7812      	ldrb	r2, [r2, #0]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1c2      	bne.n	80080e4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f93c 	bl	80083dc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f90c 	bl	8008394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800817c:	e0e4      	b.n	8008348 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800817e:	7cfb      	ldrb	r3, [r7, #19]
 8008180:	2b05      	cmp	r3, #5
 8008182:	d103      	bne.n	800818c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8fb 	bl	8008380 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800818a:	e0da      	b.n	8008342 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800818c:	7cfb      	ldrb	r3, [r7, #19]
 800818e:	2b04      	cmp	r3, #4
 8008190:	d103      	bne.n	800819a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8ea 	bl	800836c <HAL_SPI_RxCpltCallback>
    return;
 8008198:	e0d3      	b.n	8008342 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800819a:	7cfb      	ldrb	r3, [r7, #19]
 800819c:	2b03      	cmp	r3, #3
 800819e:	f040 80d0 	bne.w	8008342 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f8d8 	bl	8008358 <HAL_SPI_TxCpltCallback>
    return;
 80081a8:	e0cb      	b.n	8008342 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00d      	beq.n	80081d0 <HAL_SPI_IRQHandler+0x23c>
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d008      	beq.n	80081d0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081cc:	619a      	str	r2, [r3, #24]

    return;
 80081ce:	e0bb      	b.n	8008348 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80b6 	beq.w	8008348 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00f      	beq.n	8008206 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ec:	f043 0204 	orr.w	r2, r3, #4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008204:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00f      	beq.n	8008230 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008216:	f043 0201 	orr.w	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800822e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00f      	beq.n	800825a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008240:	f043 0208 	orr.w	r2, r3, #8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008258:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00f      	beq.n	8008284 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800826a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0220 	orr.w	r2, r2, #32
 8008282:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828a:	2b00      	cmp	r3, #0
 800828c:	d05b      	beq.n	8008346 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6919      	ldr	r1, [r3, #16]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	4b29      	ldr	r3, [pc, #164]	; (8008350 <HAL_SPI_IRQHandler+0x3bc>)
 80082aa:	400b      	ands	r3, r1
 80082ac:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082b8:	d138      	bne.n	800832c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80082c8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d013      	beq.n	80082fa <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d6:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <HAL_SPI_IRQHandler+0x3c0>)
 80082d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fb f806 	bl	80032f0 <HAL_DMA_Abort_IT>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d021      	beq.n	8008346 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008306:	4a13      	ldr	r2, [pc, #76]	; (8008354 <HAL_SPI_IRQHandler+0x3c0>)
 8008308:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800830e:	4618      	mov	r0, r3
 8008310:	f7fa ffee 	bl	80032f0 <HAL_DMA_Abort_IT>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d015      	beq.n	8008346 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008320:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800832a:	e00c      	b.n	8008346 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f82d 	bl	8008394 <HAL_SPI_ErrorCallback>
    return;
 800833a:	bf00      	nop
 800833c:	e003      	b.n	8008346 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8008346:	bf00      	nop
  }
}
 8008348:	3728      	adds	r7, #40	; 0x28
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	fffffc94 	.word	0xfffffc94
 8008354:	080083a9 	.word	0x080083a9

08008358 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff ffe0 	bl	8008394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0208 	orr.w	r2, r2, #8
 80083fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0210 	orr.w	r2, r2, #16
 800840a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0201 	bic.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6919      	ldr	r1, [r3, #16]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	4b3c      	ldr	r3, [pc, #240]	; (8008518 <SPI_CloseTransfer+0x13c>)
 8008428:	400b      	ands	r3, r1
 800842a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800843a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b04      	cmp	r3, #4
 8008446:	d014      	beq.n	8008472 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00f      	beq.n	8008472 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699a      	ldr	r2, [r3, #24]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0220 	orr.w	r2, r2, #32
 8008470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d014      	beq.n	80084a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00f      	beq.n	80084a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800848e:	f043 0204 	orr.w	r2, r3, #4
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00f      	beq.n	80084d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b8:	f043 0201 	orr.w	r2, r3, #1
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	699a      	ldr	r2, [r3, #24]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e2:	f043 0208 	orr.w	r2, r3, #8
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699a      	ldr	r2, [r3, #24]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800850c:	bf00      	nop
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	fffffc90 	.word	0xfffffc90

0800851c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3307      	adds	r3, #7
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e049      	b.n	80085f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d106      	bne.n	800857e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f841 	bl	8008600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2202      	movs	r2, #2
 8008582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3304      	adds	r3, #4
 800858e:	4619      	mov	r1, r3
 8008590:	4610      	mov	r0, r2
 8008592:	f000 f9bd 	bl	8008910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d001      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e021      	b.n	8008670 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <HAL_TIM_Base_Start_IT+0x68>)
 800864c:	4013      	ands	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b06      	cmp	r3, #6
 8008654:	d00b      	beq.n	800866e <HAL_TIM_Base_Start_IT+0x5a>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d007      	beq.n	800866e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	00010007 	.word	0x00010007

08008680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b02      	cmp	r3, #2
 8008694:	d122      	bne.n	80086dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d11b      	bne.n	80086dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0202 	mvn.w	r2, #2
 80086ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f905 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
 80086c8:	e005      	b.n	80086d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8f7 	bl	80088be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f908 	bl	80088e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d122      	bne.n	8008730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d11b      	bne.n	8008730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f06f 0204 	mvn.w	r2, #4
 8008700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8db 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
 800871c:	e005      	b.n	800872a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8cd 	bl	80088be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f8de 	bl	80088e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b08      	cmp	r3, #8
 800873c:	d122      	bne.n	8008784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b08      	cmp	r3, #8
 800874a:	d11b      	bne.n	8008784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f06f 0208 	mvn.w	r2, #8
 8008754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2204      	movs	r2, #4
 800875a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f8b1 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
 8008770:	e005      	b.n	800877e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f8a3 	bl	80088be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f8b4 	bl	80088e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b10      	cmp	r3, #16
 8008790:	d122      	bne.n	80087d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b10      	cmp	r3, #16
 800879e:	d11b      	bne.n	80087d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f06f 0210 	mvn.w	r2, #16
 80087a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2208      	movs	r2, #8
 80087ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f887 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
 80087c4:	e005      	b.n	80087d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f879 	bl	80088be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f88a 	bl	80088e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d10e      	bne.n	8008804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d107      	bne.n	8008804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f06f 0201 	mvn.w	r2, #1
 80087fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7f8 fc7e 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b80      	cmp	r3, #128	; 0x80
 8008810:	d10e      	bne.n	8008830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881c:	2b80      	cmp	r3, #128	; 0x80
 800881e:	d107      	bne.n	8008830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f914 	bl	8008a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800883e:	d10e      	bne.n	800885e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b80      	cmp	r3, #128	; 0x80
 800884c:	d107      	bne.n	800885e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f907 	bl	8008a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d10e      	bne.n	800888a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d107      	bne.n	800888a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f838 	bl	80088fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b20      	cmp	r3, #32
 8008896:	d10e      	bne.n	80088b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d107      	bne.n	80088b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0220 	mvn.w	r2, #32
 80088ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f8c7 	bl	8008a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a40      	ldr	r2, [pc, #256]	; (8008a24 <TIM_Base_SetConfig+0x114>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d013      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892e:	d00f      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a3d      	ldr	r2, [pc, #244]	; (8008a28 <TIM_Base_SetConfig+0x118>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00b      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a3c      	ldr	r2, [pc, #240]	; (8008a2c <TIM_Base_SetConfig+0x11c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d007      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a3b      	ldr	r2, [pc, #236]	; (8008a30 <TIM_Base_SetConfig+0x120>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_Base_SetConfig+0x40>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a3a      	ldr	r2, [pc, #232]	; (8008a34 <TIM_Base_SetConfig+0x124>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d108      	bne.n	8008962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a2f      	ldr	r2, [pc, #188]	; (8008a24 <TIM_Base_SetConfig+0x114>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01f      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008970:	d01b      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2c      	ldr	r2, [pc, #176]	; (8008a28 <TIM_Base_SetConfig+0x118>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d017      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2b      	ldr	r2, [pc, #172]	; (8008a2c <TIM_Base_SetConfig+0x11c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d013      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2a      	ldr	r2, [pc, #168]	; (8008a30 <TIM_Base_SetConfig+0x120>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00f      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a29      	ldr	r2, [pc, #164]	; (8008a34 <TIM_Base_SetConfig+0x124>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00b      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <TIM_Base_SetConfig+0x128>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d007      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a27      	ldr	r2, [pc, #156]	; (8008a3c <TIM_Base_SetConfig+0x12c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d003      	beq.n	80089aa <TIM_Base_SetConfig+0x9a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a26      	ldr	r2, [pc, #152]	; (8008a40 <TIM_Base_SetConfig+0x130>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d108      	bne.n	80089bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a10      	ldr	r2, [pc, #64]	; (8008a24 <TIM_Base_SetConfig+0x114>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d00f      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a12      	ldr	r2, [pc, #72]	; (8008a34 <TIM_Base_SetConfig+0x124>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00b      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a11      	ldr	r2, [pc, #68]	; (8008a38 <TIM_Base_SetConfig+0x128>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d007      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a10      	ldr	r2, [pc, #64]	; (8008a3c <TIM_Base_SetConfig+0x12c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_Base_SetConfig+0xf8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a0f      	ldr	r2, [pc, #60]	; (8008a40 <TIM_Base_SetConfig+0x130>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d103      	bne.n	8008a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	615a      	str	r2, [r3, #20]
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40010000 	.word	0x40010000
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40000c00 	.word	0x40000c00
 8008a34:	40010400 	.word	0x40010400
 8008a38:	40014000 	.word	0x40014000
 8008a3c:	40014400 	.word	0x40014400
 8008a40:	40014800 	.word	0x40014800

08008a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e042      	b.n	8008b18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d106      	bne.n	8008aaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7f9 fb59 	bl	800215c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2224      	movs	r2, #36	; 0x24
 8008aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0201 	bic.w	r2, r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f82c 	bl	8008b20 <UART_SetConfig>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e022      	b.n	8008b18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fdd0 	bl	8009680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fe57 	bl	80097c4 <UART_CheckIdleState>
 8008b16:	4603      	mov	r3, r0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008b24:	b08e      	sub	sp, #56	; 0x38
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4bc1      	ldr	r3, [pc, #772]	; (8008e60 <UART_SetConfig+0x340>)
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6812      	ldr	r2, [r2, #0]
 8008b60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b62:	430b      	orrs	r3, r1
 8008b64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4ab7      	ldr	r2, [pc, #732]	; (8008e64 <UART_SetConfig+0x344>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b92:	4313      	orrs	r3, r2
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	4bb2      	ldr	r3, [pc, #712]	; (8008e68 <UART_SetConfig+0x348>)
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	6812      	ldr	r2, [r2, #0]
 8008ba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	f023 010f 	bic.w	r1, r3, #15
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4aa9      	ldr	r2, [pc, #676]	; (8008e6c <UART_SetConfig+0x34c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d177      	bne.n	8008cba <UART_SetConfig+0x19a>
 8008bca:	4ba9      	ldr	r3, [pc, #676]	; (8008e70 <UART_SetConfig+0x350>)
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bd2:	2b28      	cmp	r3, #40	; 0x28
 8008bd4:	d86c      	bhi.n	8008cb0 <UART_SetConfig+0x190>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <UART_SetConfig+0xbc>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c81 	.word	0x08008c81
 8008be0:	08008cb1 	.word	0x08008cb1
 8008be4:	08008cb1 	.word	0x08008cb1
 8008be8:	08008cb1 	.word	0x08008cb1
 8008bec:	08008cb1 	.word	0x08008cb1
 8008bf0:	08008cb1 	.word	0x08008cb1
 8008bf4:	08008cb1 	.word	0x08008cb1
 8008bf8:	08008cb1 	.word	0x08008cb1
 8008bfc:	08008c89 	.word	0x08008c89
 8008c00:	08008cb1 	.word	0x08008cb1
 8008c04:	08008cb1 	.word	0x08008cb1
 8008c08:	08008cb1 	.word	0x08008cb1
 8008c0c:	08008cb1 	.word	0x08008cb1
 8008c10:	08008cb1 	.word	0x08008cb1
 8008c14:	08008cb1 	.word	0x08008cb1
 8008c18:	08008cb1 	.word	0x08008cb1
 8008c1c:	08008c91 	.word	0x08008c91
 8008c20:	08008cb1 	.word	0x08008cb1
 8008c24:	08008cb1 	.word	0x08008cb1
 8008c28:	08008cb1 	.word	0x08008cb1
 8008c2c:	08008cb1 	.word	0x08008cb1
 8008c30:	08008cb1 	.word	0x08008cb1
 8008c34:	08008cb1 	.word	0x08008cb1
 8008c38:	08008cb1 	.word	0x08008cb1
 8008c3c:	08008c99 	.word	0x08008c99
 8008c40:	08008cb1 	.word	0x08008cb1
 8008c44:	08008cb1 	.word	0x08008cb1
 8008c48:	08008cb1 	.word	0x08008cb1
 8008c4c:	08008cb1 	.word	0x08008cb1
 8008c50:	08008cb1 	.word	0x08008cb1
 8008c54:	08008cb1 	.word	0x08008cb1
 8008c58:	08008cb1 	.word	0x08008cb1
 8008c5c:	08008ca1 	.word	0x08008ca1
 8008c60:	08008cb1 	.word	0x08008cb1
 8008c64:	08008cb1 	.word	0x08008cb1
 8008c68:	08008cb1 	.word	0x08008cb1
 8008c6c:	08008cb1 	.word	0x08008cb1
 8008c70:	08008cb1 	.word	0x08008cb1
 8008c74:	08008cb1 	.word	0x08008cb1
 8008c78:	08008cb1 	.word	0x08008cb1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e233      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e22f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e22b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e227      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e223      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e21f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb6:	bf00      	nop
 8008cb8:	e21a      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a6d      	ldr	r2, [pc, #436]	; (8008e74 <UART_SetConfig+0x354>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d132      	bne.n	8008d2a <UART_SetConfig+0x20a>
 8008cc4:	4b6a      	ldr	r3, [pc, #424]	; (8008e70 <UART_SetConfig+0x350>)
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d827      	bhi.n	8008d20 <UART_SetConfig+0x200>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <UART_SetConfig+0x1b8>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf6:	e1fb      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfe:	e1f7      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d06:	e1f3      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0e:	e1ef      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d10:	2320      	movs	r3, #32
 8008d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d16:	e1eb      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1e:	e1e7      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d20:	2380      	movs	r3, #128	; 0x80
 8008d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d26:	bf00      	nop
 8008d28:	e1e2      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a52      	ldr	r2, [pc, #328]	; (8008e78 <UART_SetConfig+0x358>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d132      	bne.n	8008d9a <UART_SetConfig+0x27a>
 8008d34:	4b4e      	ldr	r3, [pc, #312]	; (8008e70 <UART_SetConfig+0x350>)
 8008d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	2b05      	cmp	r3, #5
 8008d3e:	d827      	bhi.n	8008d90 <UART_SetConfig+0x270>
 8008d40:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0x228>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d61 	.word	0x08008d61
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	08008d71 	.word	0x08008d71
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d66:	e1c3      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d68:	2304      	movs	r3, #4
 8008d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6e:	e1bf      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d70:	2308      	movs	r3, #8
 8008d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d76:	e1bb      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d78:	2310      	movs	r3, #16
 8008d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7e:	e1b7      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d80:	2320      	movs	r3, #32
 8008d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d86:	e1b3      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d88:	2340      	movs	r3, #64	; 0x40
 8008d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8e:	e1af      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d90:	2380      	movs	r3, #128	; 0x80
 8008d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d96:	bf00      	nop
 8008d98:	e1aa      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <UART_SetConfig+0x35c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d132      	bne.n	8008e0a <UART_SetConfig+0x2ea>
 8008da4:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <UART_SetConfig+0x350>)
 8008da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	2b05      	cmp	r3, #5
 8008dae:	d827      	bhi.n	8008e00 <UART_SetConfig+0x2e0>
 8008db0:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <UART_SetConfig+0x298>)
 8008db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db6:	bf00      	nop
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008dd9 	.word	0x08008dd9
 8008dc0:	08008de1 	.word	0x08008de1
 8008dc4:	08008de9 	.word	0x08008de9
 8008dc8:	08008df1 	.word	0x08008df1
 8008dcc:	08008df9 	.word	0x08008df9
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd6:	e18b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dde:	e187      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008de0:	2308      	movs	r3, #8
 8008de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de6:	e183      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008de8:	2310      	movs	r3, #16
 8008dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dee:	e17f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008df0:	2320      	movs	r3, #32
 8008df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008df6:	e17b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008df8:	2340      	movs	r3, #64	; 0x40
 8008dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dfe:	e177      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e00:	2380      	movs	r3, #128	; 0x80
 8008e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e06:	bf00      	nop
 8008e08:	e172      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <UART_SetConfig+0x360>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d144      	bne.n	8008e9e <UART_SetConfig+0x37e>
 8008e14:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <UART_SetConfig+0x350>)
 8008e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	2b05      	cmp	r3, #5
 8008e1e:	d839      	bhi.n	8008e94 <UART_SetConfig+0x374>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <UART_SetConfig+0x308>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e41 	.word	0x08008e41
 8008e2c:	08008e49 	.word	0x08008e49
 8008e30:	08008e51 	.word	0x08008e51
 8008e34:	08008e59 	.word	0x08008e59
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e8d 	.word	0x08008e8d
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e46:	e153      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e48:	2304      	movs	r3, #4
 8008e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4e:	e14f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e50:	2308      	movs	r3, #8
 8008e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e56:	e14b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5e:	e147      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e60:	cfff69f3 	.word	0xcfff69f3
 8008e64:	58000c00 	.word	0x58000c00
 8008e68:	11fff4ff 	.word	0x11fff4ff
 8008e6c:	40011000 	.word	0x40011000
 8008e70:	58024400 	.word	0x58024400
 8008e74:	40004400 	.word	0x40004400
 8008e78:	40004800 	.word	0x40004800
 8008e7c:	40004c00 	.word	0x40004c00
 8008e80:	40005000 	.word	0x40005000
 8008e84:	2320      	movs	r3, #32
 8008e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8a:	e131      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e8c:	2340      	movs	r3, #64	; 0x40
 8008e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e92:	e12d      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e94:	2380      	movs	r3, #128	; 0x80
 8008e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e9a:	bf00      	nop
 8008e9c:	e128      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4ab6      	ldr	r2, [pc, #728]	; (800917c <UART_SetConfig+0x65c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d178      	bne.n	8008f9a <UART_SetConfig+0x47a>
 8008ea8:	4bb5      	ldr	r3, [pc, #724]	; (8009180 <UART_SetConfig+0x660>)
 8008eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb0:	2b28      	cmp	r3, #40	; 0x28
 8008eb2:	d86d      	bhi.n	8008f90 <UART_SetConfig+0x470>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <UART_SetConfig+0x39c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008f61 	.word	0x08008f61
 8008ec0:	08008f91 	.word	0x08008f91
 8008ec4:	08008f91 	.word	0x08008f91
 8008ec8:	08008f91 	.word	0x08008f91
 8008ecc:	08008f91 	.word	0x08008f91
 8008ed0:	08008f91 	.word	0x08008f91
 8008ed4:	08008f91 	.word	0x08008f91
 8008ed8:	08008f91 	.word	0x08008f91
 8008edc:	08008f69 	.word	0x08008f69
 8008ee0:	08008f91 	.word	0x08008f91
 8008ee4:	08008f91 	.word	0x08008f91
 8008ee8:	08008f91 	.word	0x08008f91
 8008eec:	08008f91 	.word	0x08008f91
 8008ef0:	08008f91 	.word	0x08008f91
 8008ef4:	08008f91 	.word	0x08008f91
 8008ef8:	08008f91 	.word	0x08008f91
 8008efc:	08008f71 	.word	0x08008f71
 8008f00:	08008f91 	.word	0x08008f91
 8008f04:	08008f91 	.word	0x08008f91
 8008f08:	08008f91 	.word	0x08008f91
 8008f0c:	08008f91 	.word	0x08008f91
 8008f10:	08008f91 	.word	0x08008f91
 8008f14:	08008f91 	.word	0x08008f91
 8008f18:	08008f91 	.word	0x08008f91
 8008f1c:	08008f79 	.word	0x08008f79
 8008f20:	08008f91 	.word	0x08008f91
 8008f24:	08008f91 	.word	0x08008f91
 8008f28:	08008f91 	.word	0x08008f91
 8008f2c:	08008f91 	.word	0x08008f91
 8008f30:	08008f91 	.word	0x08008f91
 8008f34:	08008f91 	.word	0x08008f91
 8008f38:	08008f91 	.word	0x08008f91
 8008f3c:	08008f81 	.word	0x08008f81
 8008f40:	08008f91 	.word	0x08008f91
 8008f44:	08008f91 	.word	0x08008f91
 8008f48:	08008f91 	.word	0x08008f91
 8008f4c:	08008f91 	.word	0x08008f91
 8008f50:	08008f91 	.word	0x08008f91
 8008f54:	08008f91 	.word	0x08008f91
 8008f58:	08008f91 	.word	0x08008f91
 8008f5c:	08008f89 	.word	0x08008f89
 8008f60:	2301      	movs	r3, #1
 8008f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f66:	e0c3      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6e:	e0bf      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f70:	2308      	movs	r3, #8
 8008f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f76:	e0bb      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7e:	e0b7      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f80:	2320      	movs	r3, #32
 8008f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f86:	e0b3      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f88:	2340      	movs	r3, #64	; 0x40
 8008f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8e:	e0af      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f96:	bf00      	nop
 8008f98:	e0aa      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a79      	ldr	r2, [pc, #484]	; (8009184 <UART_SetConfig+0x664>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d132      	bne.n	800900a <UART_SetConfig+0x4ea>
 8008fa4:	4b76      	ldr	r3, [pc, #472]	; (8009180 <UART_SetConfig+0x660>)
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	2b05      	cmp	r3, #5
 8008fae:	d827      	bhi.n	8009000 <UART_SetConfig+0x4e0>
 8008fb0:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <UART_SetConfig+0x498>)
 8008fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb6:	bf00      	nop
 8008fb8:	08008fd1 	.word	0x08008fd1
 8008fbc:	08008fd9 	.word	0x08008fd9
 8008fc0:	08008fe1 	.word	0x08008fe1
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008ff1 	.word	0x08008ff1
 8008fcc:	08008ff9 	.word	0x08008ff9
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	e08b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008fd8:	2304      	movs	r3, #4
 8008fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fde:	e087      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe6:	e083      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008fe8:	2310      	movs	r3, #16
 8008fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fee:	e07f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008ff0:	2320      	movs	r3, #32
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff6:	e07b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8008ff8:	2340      	movs	r3, #64	; 0x40
 8008ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffe:	e077      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009000:	2380      	movs	r3, #128	; 0x80
 8009002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009006:	bf00      	nop
 8009008:	e072      	b.n	80090f0 <UART_SetConfig+0x5d0>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a5e      	ldr	r2, [pc, #376]	; (8009188 <UART_SetConfig+0x668>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d132      	bne.n	800907a <UART_SetConfig+0x55a>
 8009014:	4b5a      	ldr	r3, [pc, #360]	; (8009180 <UART_SetConfig+0x660>)
 8009016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	2b05      	cmp	r3, #5
 800901e:	d827      	bhi.n	8009070 <UART_SetConfig+0x550>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <UART_SetConfig+0x508>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009041 	.word	0x08009041
 800902c:	08009049 	.word	0x08009049
 8009030:	08009051 	.word	0x08009051
 8009034:	08009059 	.word	0x08009059
 8009038:	08009061 	.word	0x08009061
 800903c:	08009069 	.word	0x08009069
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	e053      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904e:	e04f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009056:	e04b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905e:	e047      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009060:	2320      	movs	r3, #32
 8009062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009066:	e043      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800906e:	e03f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 8009070:	2380      	movs	r3, #128	; 0x80
 8009072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009076:	bf00      	nop
 8009078:	e03a      	b.n	80090f0 <UART_SetConfig+0x5d0>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a43      	ldr	r2, [pc, #268]	; (800918c <UART_SetConfig+0x66c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d132      	bne.n	80090ea <UART_SetConfig+0x5ca>
 8009084:	4b3e      	ldr	r3, [pc, #248]	; (8009180 <UART_SetConfig+0x660>)
 8009086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	2b05      	cmp	r3, #5
 800908e:	d827      	bhi.n	80090e0 <UART_SetConfig+0x5c0>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <UART_SetConfig+0x578>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090b1 	.word	0x080090b1
 800909c:	080090b9 	.word	0x080090b9
 80090a0:	080090c1 	.word	0x080090c1
 80090a4:	080090c9 	.word	0x080090c9
 80090a8:	080090d1 	.word	0x080090d1
 80090ac:	080090d9 	.word	0x080090d9
 80090b0:	2302      	movs	r3, #2
 80090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b6:	e01b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090b8:	2304      	movs	r3, #4
 80090ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090be:	e017      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090c0:	2308      	movs	r3, #8
 80090c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c6:	e013      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090c8:	2310      	movs	r3, #16
 80090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ce:	e00f      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090d0:	2320      	movs	r3, #32
 80090d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d6:	e00b      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090d8:	2340      	movs	r3, #64	; 0x40
 80090da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090de:	e007      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e6:	bf00      	nop
 80090e8:	e002      	b.n	80090f0 <UART_SetConfig+0x5d0>
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a25      	ldr	r2, [pc, #148]	; (800918c <UART_SetConfig+0x66c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	f040 80b8 	bne.w	800926c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009100:	2b08      	cmp	r3, #8
 8009102:	d019      	beq.n	8009138 <UART_SetConfig+0x618>
 8009104:	2b08      	cmp	r3, #8
 8009106:	dc04      	bgt.n	8009112 <UART_SetConfig+0x5f2>
 8009108:	2b02      	cmp	r3, #2
 800910a:	d009      	beq.n	8009120 <UART_SetConfig+0x600>
 800910c:	2b04      	cmp	r3, #4
 800910e:	d00b      	beq.n	8009128 <UART_SetConfig+0x608>
 8009110:	e042      	b.n	8009198 <UART_SetConfig+0x678>
 8009112:	2b20      	cmp	r3, #32
 8009114:	d02b      	beq.n	800916e <UART_SetConfig+0x64e>
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d02c      	beq.n	8009174 <UART_SetConfig+0x654>
 800911a:	2b10      	cmp	r3, #16
 800911c:	d014      	beq.n	8009148 <UART_SetConfig+0x628>
 800911e:	e03b      	b.n	8009198 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009120:	f7fe f922 	bl	8007368 <HAL_RCCEx_GetD3PCLK1Freq>
 8009124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009126:	e03d      	b.n	80091a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe f931 	bl	8007394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009136:	e035      	b.n	80091a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fa75 	bl	800762c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009146:	e02d      	b.n	80091a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <UART_SetConfig+0x660>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <UART_SetConfig+0x660>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	08db      	lsrs	r3, r3, #3
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <UART_SetConfig+0x670>)
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009166:	e01d      	b.n	80091a4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <UART_SetConfig+0x670>)
 800916a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800916c:	e01a      	b.n	80091a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <UART_SetConfig+0x674>)
 8009170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009172:	e017      	b.n	80091a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800917a:	e013      	b.n	80091a4 <UART_SetConfig+0x684>
 800917c:	40011400 	.word	0x40011400
 8009180:	58024400 	.word	0x58024400
 8009184:	40007800 	.word	0x40007800
 8009188:	40007c00 	.word	0x40007c00
 800918c:	58000c00 	.word	0x58000c00
 8009190:	03d09000 	.word	0x03d09000
 8009194:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 824d 	beq.w	8009646 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	4aad      	ldr	r2, [pc, #692]	; (8009468 <UART_SetConfig+0x948>)
 80091b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b6:	461a      	mov	r2, r3
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80091be:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	6a3a      	ldr	r2, [r7, #32]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d305      	bcc.n	80091dc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091d6:	6a3a      	ldr	r2, [r7, #32]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d903      	bls.n	80091e4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80091e2:	e230      	b.n	8009646 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	4618      	mov	r0, r3
 80091e8:	f04f 0100 	mov.w	r1, #0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	4a9d      	ldr	r2, [pc, #628]	; (8009468 <UART_SetConfig+0x948>)
 80091f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f04f 0400 	mov.w	r4, #0
 80091fc:	461a      	mov	r2, r3
 80091fe:	4623      	mov	r3, r4
 8009200:	f7f7 f876 	bl	80002f0 <__aeabi_uldivmod>
 8009204:	4603      	mov	r3, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4619      	mov	r1, r3
 800920a:	4622      	mov	r2, r4
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	f04f 0400 	mov.w	r4, #0
 8009214:	0214      	lsls	r4, r2, #8
 8009216:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800921a:	020b      	lsls	r3, r1, #8
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6852      	ldr	r2, [r2, #4]
 8009220:	0852      	lsrs	r2, r2, #1
 8009222:	4611      	mov	r1, r2
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	eb13 0b01 	adds.w	fp, r3, r1
 800922c:	eb44 0c02 	adc.w	ip, r4, r2
 8009230:	4658      	mov	r0, fp
 8009232:	4661      	mov	r1, ip
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f04f 0400 	mov.w	r4, #0
 800923c:	461a      	mov	r2, r3
 800923e:	4623      	mov	r3, r4
 8009240:	f7f7 f856 	bl	80002f0 <__aeabi_uldivmod>
 8009244:	4603      	mov	r3, r0
 8009246:	460c      	mov	r4, r1
 8009248:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009250:	d308      	bcc.n	8009264 <UART_SetConfig+0x744>
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009258:	d204      	bcs.n	8009264 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	e1f0      	b.n	8009646 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800926a:	e1ec      	b.n	8009646 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009274:	f040 8100 	bne.w	8009478 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800927c:	2b40      	cmp	r3, #64	; 0x40
 800927e:	f200 80b7 	bhi.w	80093f0 <UART_SetConfig+0x8d0>
 8009282:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <UART_SetConfig+0x768>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	0800938d 	.word	0x0800938d
 800928c:	08009395 	.word	0x08009395
 8009290:	080093f1 	.word	0x080093f1
 8009294:	080093f1 	.word	0x080093f1
 8009298:	0800939d 	.word	0x0800939d
 800929c:	080093f1 	.word	0x080093f1
 80092a0:	080093f1 	.word	0x080093f1
 80092a4:	080093f1 	.word	0x080093f1
 80092a8:	080093ad 	.word	0x080093ad
 80092ac:	080093f1 	.word	0x080093f1
 80092b0:	080093f1 	.word	0x080093f1
 80092b4:	080093f1 	.word	0x080093f1
 80092b8:	080093f1 	.word	0x080093f1
 80092bc:	080093f1 	.word	0x080093f1
 80092c0:	080093f1 	.word	0x080093f1
 80092c4:	080093f1 	.word	0x080093f1
 80092c8:	080093bd 	.word	0x080093bd
 80092cc:	080093f1 	.word	0x080093f1
 80092d0:	080093f1 	.word	0x080093f1
 80092d4:	080093f1 	.word	0x080093f1
 80092d8:	080093f1 	.word	0x080093f1
 80092dc:	080093f1 	.word	0x080093f1
 80092e0:	080093f1 	.word	0x080093f1
 80092e4:	080093f1 	.word	0x080093f1
 80092e8:	080093f1 	.word	0x080093f1
 80092ec:	080093f1 	.word	0x080093f1
 80092f0:	080093f1 	.word	0x080093f1
 80092f4:	080093f1 	.word	0x080093f1
 80092f8:	080093f1 	.word	0x080093f1
 80092fc:	080093f1 	.word	0x080093f1
 8009300:	080093f1 	.word	0x080093f1
 8009304:	080093f1 	.word	0x080093f1
 8009308:	080093e3 	.word	0x080093e3
 800930c:	080093f1 	.word	0x080093f1
 8009310:	080093f1 	.word	0x080093f1
 8009314:	080093f1 	.word	0x080093f1
 8009318:	080093f1 	.word	0x080093f1
 800931c:	080093f1 	.word	0x080093f1
 8009320:	080093f1 	.word	0x080093f1
 8009324:	080093f1 	.word	0x080093f1
 8009328:	080093f1 	.word	0x080093f1
 800932c:	080093f1 	.word	0x080093f1
 8009330:	080093f1 	.word	0x080093f1
 8009334:	080093f1 	.word	0x080093f1
 8009338:	080093f1 	.word	0x080093f1
 800933c:	080093f1 	.word	0x080093f1
 8009340:	080093f1 	.word	0x080093f1
 8009344:	080093f1 	.word	0x080093f1
 8009348:	080093f1 	.word	0x080093f1
 800934c:	080093f1 	.word	0x080093f1
 8009350:	080093f1 	.word	0x080093f1
 8009354:	080093f1 	.word	0x080093f1
 8009358:	080093f1 	.word	0x080093f1
 800935c:	080093f1 	.word	0x080093f1
 8009360:	080093f1 	.word	0x080093f1
 8009364:	080093f1 	.word	0x080093f1
 8009368:	080093f1 	.word	0x080093f1
 800936c:	080093f1 	.word	0x080093f1
 8009370:	080093f1 	.word	0x080093f1
 8009374:	080093f1 	.word	0x080093f1
 8009378:	080093f1 	.word	0x080093f1
 800937c:	080093f1 	.word	0x080093f1
 8009380:	080093f1 	.word	0x080093f1
 8009384:	080093f1 	.word	0x080093f1
 8009388:	080093e9 	.word	0x080093e9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800938c:	f7fd f890 	bl	80064b0 <HAL_RCC_GetPCLK1Freq>
 8009390:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009392:	e033      	b.n	80093fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009394:	f7fd f8a2 	bl	80064dc <HAL_RCC_GetPCLK2Freq>
 8009398:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800939a:	e02f      	b.n	80093fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800939c:	f107 0314 	add.w	r3, r7, #20
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fd fff7 	bl	8007394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093aa:	e027      	b.n	80093fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ac:	f107 0308 	add.w	r3, r7, #8
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe f93b 	bl	800762c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ba:	e01f      	b.n	80093fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093bc:	4b2b      	ldr	r3, [pc, #172]	; (800946c <UART_SetConfig+0x94c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0320 	and.w	r3, r3, #32
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d009      	beq.n	80093dc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093c8:	4b28      	ldr	r3, [pc, #160]	; (800946c <UART_SetConfig+0x94c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	08db      	lsrs	r3, r3, #3
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	4a27      	ldr	r2, [pc, #156]	; (8009470 <UART_SetConfig+0x950>)
 80093d4:	fa22 f303 	lsr.w	r3, r2, r3
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093da:	e00f      	b.n	80093fc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80093dc:	4b24      	ldr	r3, [pc, #144]	; (8009470 <UART_SetConfig+0x950>)
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093e0:	e00c      	b.n	80093fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093e2:	4b24      	ldr	r3, [pc, #144]	; (8009474 <UART_SetConfig+0x954>)
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093e6:	e009      	b.n	80093fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ee:	e005      	b.n	80093fc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 8121 	beq.w	8009646 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	4a17      	ldr	r2, [pc, #92]	; (8009468 <UART_SetConfig+0x948>)
 800940a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800940e:	461a      	mov	r2, r3
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	fbb3 f3f2 	udiv	r3, r3, r2
 8009416:	005a      	lsls	r2, r3, #1
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	441a      	add	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	b29b      	uxth	r3, r3
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	2b0f      	cmp	r3, #15
 8009430:	d916      	bls.n	8009460 <UART_SetConfig+0x940>
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009438:	d212      	bcs.n	8009460 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	b29b      	uxth	r3, r3
 800943e:	f023 030f 	bic.w	r3, r3, #15
 8009442:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	b29b      	uxth	r3, r3
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	b29a      	uxth	r2, r3
 8009450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009452:	4313      	orrs	r3, r2
 8009454:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800945c:	60da      	str	r2, [r3, #12]
 800945e:	e0f2      	b.n	8009646 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009466:	e0ee      	b.n	8009646 <UART_SetConfig+0xb26>
 8009468:	0800e904 	.word	0x0800e904
 800946c:	58024400 	.word	0x58024400
 8009470:	03d09000 	.word	0x03d09000
 8009474:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009478:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800947c:	2b40      	cmp	r3, #64	; 0x40
 800947e:	f200 80b7 	bhi.w	80095f0 <UART_SetConfig+0xad0>
 8009482:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <UART_SetConfig+0x968>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	0800958d 	.word	0x0800958d
 800948c:	08009595 	.word	0x08009595
 8009490:	080095f1 	.word	0x080095f1
 8009494:	080095f1 	.word	0x080095f1
 8009498:	0800959d 	.word	0x0800959d
 800949c:	080095f1 	.word	0x080095f1
 80094a0:	080095f1 	.word	0x080095f1
 80094a4:	080095f1 	.word	0x080095f1
 80094a8:	080095ad 	.word	0x080095ad
 80094ac:	080095f1 	.word	0x080095f1
 80094b0:	080095f1 	.word	0x080095f1
 80094b4:	080095f1 	.word	0x080095f1
 80094b8:	080095f1 	.word	0x080095f1
 80094bc:	080095f1 	.word	0x080095f1
 80094c0:	080095f1 	.word	0x080095f1
 80094c4:	080095f1 	.word	0x080095f1
 80094c8:	080095bd 	.word	0x080095bd
 80094cc:	080095f1 	.word	0x080095f1
 80094d0:	080095f1 	.word	0x080095f1
 80094d4:	080095f1 	.word	0x080095f1
 80094d8:	080095f1 	.word	0x080095f1
 80094dc:	080095f1 	.word	0x080095f1
 80094e0:	080095f1 	.word	0x080095f1
 80094e4:	080095f1 	.word	0x080095f1
 80094e8:	080095f1 	.word	0x080095f1
 80094ec:	080095f1 	.word	0x080095f1
 80094f0:	080095f1 	.word	0x080095f1
 80094f4:	080095f1 	.word	0x080095f1
 80094f8:	080095f1 	.word	0x080095f1
 80094fc:	080095f1 	.word	0x080095f1
 8009500:	080095f1 	.word	0x080095f1
 8009504:	080095f1 	.word	0x080095f1
 8009508:	080095e3 	.word	0x080095e3
 800950c:	080095f1 	.word	0x080095f1
 8009510:	080095f1 	.word	0x080095f1
 8009514:	080095f1 	.word	0x080095f1
 8009518:	080095f1 	.word	0x080095f1
 800951c:	080095f1 	.word	0x080095f1
 8009520:	080095f1 	.word	0x080095f1
 8009524:	080095f1 	.word	0x080095f1
 8009528:	080095f1 	.word	0x080095f1
 800952c:	080095f1 	.word	0x080095f1
 8009530:	080095f1 	.word	0x080095f1
 8009534:	080095f1 	.word	0x080095f1
 8009538:	080095f1 	.word	0x080095f1
 800953c:	080095f1 	.word	0x080095f1
 8009540:	080095f1 	.word	0x080095f1
 8009544:	080095f1 	.word	0x080095f1
 8009548:	080095f1 	.word	0x080095f1
 800954c:	080095f1 	.word	0x080095f1
 8009550:	080095f1 	.word	0x080095f1
 8009554:	080095f1 	.word	0x080095f1
 8009558:	080095f1 	.word	0x080095f1
 800955c:	080095f1 	.word	0x080095f1
 8009560:	080095f1 	.word	0x080095f1
 8009564:	080095f1 	.word	0x080095f1
 8009568:	080095f1 	.word	0x080095f1
 800956c:	080095f1 	.word	0x080095f1
 8009570:	080095f1 	.word	0x080095f1
 8009574:	080095f1 	.word	0x080095f1
 8009578:	080095f1 	.word	0x080095f1
 800957c:	080095f1 	.word	0x080095f1
 8009580:	080095f1 	.word	0x080095f1
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080095e9 	.word	0x080095e9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800958c:	f7fc ff90 	bl	80064b0 <HAL_RCC_GetPCLK1Freq>
 8009590:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009592:	e033      	b.n	80095fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009594:	f7fc ffa2 	bl	80064dc <HAL_RCC_GetPCLK2Freq>
 8009598:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800959a:	e02f      	b.n	80095fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fd fef7 	bl	8007394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095aa:	e027      	b.n	80095fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ac:	f107 0308 	add.w	r3, r7, #8
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe f83b 	bl	800762c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ba:	e01f      	b.n	80095fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095bc:	4b2c      	ldr	r3, [pc, #176]	; (8009670 <UART_SetConfig+0xb50>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d009      	beq.n	80095dc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095c8:	4b29      	ldr	r3, [pc, #164]	; (8009670 <UART_SetConfig+0xb50>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	08db      	lsrs	r3, r3, #3
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	4a28      	ldr	r2, [pc, #160]	; (8009674 <UART_SetConfig+0xb54>)
 80095d4:	fa22 f303 	lsr.w	r3, r2, r3
 80095d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095da:	e00f      	b.n	80095fc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80095dc:	4b25      	ldr	r3, [pc, #148]	; (8009674 <UART_SetConfig+0xb54>)
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095e0:	e00c      	b.n	80095fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095e2:	4b25      	ldr	r3, [pc, #148]	; (8009678 <UART_SetConfig+0xb58>)
 80095e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095e6:	e009      	b.n	80095fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ee:	e005      	b.n	80095fc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80095fa:	bf00      	nop
    }

    if (pclk != 0U)
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d021      	beq.n	8009646 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	4a1d      	ldr	r2, [pc, #116]	; (800967c <UART_SetConfig+0xb5c>)
 8009608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960c:	461a      	mov	r2, r3
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	fbb3 f2f2 	udiv	r2, r3, r2
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	085b      	lsrs	r3, r3, #1
 800961a:	441a      	add	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	fbb2 f3f3 	udiv	r3, r2, r3
 8009624:	b29b      	uxth	r3, r3
 8009626:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	2b0f      	cmp	r3, #15
 800962c:	d908      	bls.n	8009640 <UART_SetConfig+0xb20>
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009634:	d204      	bcs.n	8009640 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800963c:	60da      	str	r2, [r3, #12]
 800963e:	e002      	b.n	8009646 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009662:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009666:	4618      	mov	r0, r3
 8009668:	3738      	adds	r7, #56	; 0x38
 800966a:	46bd      	mov	sp, r7
 800966c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009670:	58024400 	.word	0x58024400
 8009674:	03d09000 	.word	0x03d09000
 8009678:	003d0900 	.word	0x003d0900
 800967c:	0800e904 	.word	0x0800e904

08009680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00a      	beq.n	80096ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01a      	beq.n	8009796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977e:	d10a      	bne.n	8009796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00a      	beq.n	80097b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	605a      	str	r2, [r3, #4]
  }
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80097d4:	f7f8 ffc2 	bl	800275c <HAL_GetTick>
 80097d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d10e      	bne.n	8009806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f82c 	bl	8009854 <UART_WaitOnFlagUntilTimeout>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e022      	b.n	800984c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b04      	cmp	r3, #4
 8009812:	d10e      	bne.n	8009832 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f816 	bl	8009854 <UART_WaitOnFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e00c      	b.n	800984c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	4613      	mov	r3, r2
 8009862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009864:	e062      	b.n	800992c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800986c:	d05e      	beq.n	800992c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800986e:	f7f8 ff75 	bl	800275c <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <UART_WaitOnFlagUntilTimeout+0x30>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11d      	bne.n	80098c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009892:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0201 	bic.w	r2, r2, #1
 80098a2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e045      	b.n	800994c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d02e      	beq.n	800992c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098dc:	d126      	bne.n	800992c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2220      	movs	r2, #32
 8009914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2220      	movs	r2, #32
 800991c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e00f      	b.n	800994c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	69da      	ldr	r2, [r3, #28]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4013      	ands	r3, r2
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	429a      	cmp	r2, r3
 800993a:	bf0c      	ite	eq
 800993c:	2301      	moveq	r3, #1
 800993e:	2300      	movne	r3, #0
 8009940:	b2db      	uxtb	r3, r3
 8009942:	461a      	mov	r2, r3
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	429a      	cmp	r2, r3
 8009948:	d08d      	beq.n	8009866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <HAL_UARTEx_DisableFifoMode+0x16>
 8009966:	2302      	movs	r3, #2
 8009968:	e027      	b.n	80099ba <HAL_UARTEx_DisableFifoMode+0x66>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2224      	movs	r2, #36	; 0x24
 8009976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f022 0201 	bic.w	r2, r2, #1
 8009990:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009998:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d101      	bne.n	80099de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099da:	2302      	movs	r3, #2
 80099dc:	e02d      	b.n	8009a3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2224      	movs	r2, #36	; 0x24
 80099ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0201 	bic.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f850 	bl	8009ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e02d      	b.n	8009ab6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2224      	movs	r2, #36	; 0x24
 8009a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f812 	bl	8009ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b089      	sub	sp, #36	; 0x24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009ac8:	4a2f      	ldr	r2, [pc, #188]	; (8009b88 <UARTEx_SetNbDataToProcess+0xc8>)
 8009aca:	f107 0314 	add.w	r3, r7, #20
 8009ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ad2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009ad6:	4a2d      	ldr	r2, [pc, #180]	; (8009b8c <UARTEx_SetNbDataToProcess+0xcc>)
 8009ad8:	f107 030c 	add.w	r3, r7, #12
 8009adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ae0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d108      	bne.n	8009afe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009afc:	e03d      	b.n	8009b7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009afe:	2310      	movs	r3, #16
 8009b00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b02:	2310      	movs	r3, #16
 8009b04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	0e5b      	lsrs	r3, r3, #25
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	0f5b      	lsrs	r3, r3, #29
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009b26:	7fbb      	ldrb	r3, [r7, #30]
 8009b28:	7f3a      	ldrb	r2, [r7, #28]
 8009b2a:	f107 0120 	add.w	r1, r7, #32
 8009b2e:	440a      	add	r2, r1
 8009b30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b34:	fb02 f303 	mul.w	r3, r2, r3
 8009b38:	7f3a      	ldrb	r2, [r7, #28]
 8009b3a:	f107 0120 	add.w	r1, r7, #32
 8009b3e:	440a      	add	r2, r1
 8009b40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009b50:	7ffb      	ldrb	r3, [r7, #31]
 8009b52:	7f7a      	ldrb	r2, [r7, #29]
 8009b54:	f107 0120 	add.w	r1, r7, #32
 8009b58:	440a      	add	r2, r1
 8009b5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
 8009b62:	7f7a      	ldrb	r2, [r7, #29]
 8009b64:	f107 0120 	add.w	r1, r7, #32
 8009b68:	440a      	add	r2, r1
 8009b6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b7a:	bf00      	nop
 8009b7c:	3724      	adds	r7, #36	; 0x24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	0800e8b8 	.word	0x0800e8b8
 8009b8c:	0800e8c0 	.word	0x0800e8c0

08009b90 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009b98:	4b04      	ldr	r3, [pc, #16]	; (8009bac <HAL_ETH_RxCpltCallback+0x1c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f9eb 	bl	8009f78 <osSemaphoreRelease>
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000208 	.word	0x20000208

08009bb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009bb4:	bf00      	nop
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
	...

08009bc0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc6:	f3ef 8305 	mrs	r3, IPSR
 8009bca:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10f      	bne.n	8009bf2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd6:	607b      	str	r3, [r7, #4]
  return(result);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d105      	bne.n	8009bea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bde:	f3ef 8311 	mrs	r3, BASEPRI
 8009be2:	603b      	str	r3, [r7, #0]
  return(result);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <osKernelInitialize+0x3a>
 8009bea:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <osKernelInitialize+0x64>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d103      	bne.n	8009bfa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009bf2:	f06f 0305 	mvn.w	r3, #5
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e00c      	b.n	8009c14 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <osKernelInitialize+0x64>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c02:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <osKernelInitialize+0x64>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	e002      	b.n	8009c14 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009c14:	68fb      	ldr	r3, [r7, #12]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	2000020c 	.word	0x2000020c

08009c28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c2e:	f3ef 8305 	mrs	r3, IPSR
 8009c32:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10f      	bne.n	8009c5a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3e:	607b      	str	r3, [r7, #4]
  return(result);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d105      	bne.n	8009c52 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c46:	f3ef 8311 	mrs	r3, BASEPRI
 8009c4a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d007      	beq.n	8009c62 <osKernelStart+0x3a>
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <osKernelStart+0x68>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d103      	bne.n	8009c62 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009c5a:	f06f 0305 	mvn.w	r3, #5
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	e010      	b.n	8009c84 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c62:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <osKernelStart+0x68>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d109      	bne.n	8009c7e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c6a:	f7ff ffa1 	bl	8009bb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c6e:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <osKernelStart+0x68>)
 8009c70:	2202      	movs	r2, #2
 8009c72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c74:	f001 fef6 	bl	800ba64 <vTaskStartScheduler>
      stat = osOK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e002      	b.n	8009c84 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009c84:	68fb      	ldr	r3, [r7, #12]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	2000020c 	.word	0x2000020c

08009c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b090      	sub	sp, #64	; 0x40
 8009c98:	af04      	add	r7, sp, #16
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca4:	f3ef 8305 	mrs	r3, IPSR
 8009ca8:	61fb      	str	r3, [r7, #28]
  return(result);
 8009caa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f040 8090 	bne.w	8009dd2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc2:	617b      	str	r3, [r7, #20]
  return(result);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <osThreadNew+0x3e>
 8009cca:	4b44      	ldr	r3, [pc, #272]	; (8009ddc <osThreadNew+0x148>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d07f      	beq.n	8009dd2 <osThreadNew+0x13e>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d07c      	beq.n	8009dd2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8009cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009cde:	2318      	movs	r3, #24
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cea:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d045      	beq.n	8009d7e <osThreadNew+0xea>
      if (attr->name != NULL) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <osThreadNew+0x6c>
        name = attr->name;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d008      	beq.n	8009d26 <osThreadNew+0x92>
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	2b38      	cmp	r3, #56	; 0x38
 8009d18:	d805      	bhi.n	8009d26 <osThreadNew+0x92>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <osThreadNew+0x96>
        return (NULL);
 8009d26:	2300      	movs	r3, #0
 8009d28:	e054      	b.n	8009dd4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	089b      	lsrs	r3, r3, #2
 8009d38:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00e      	beq.n	8009d60 <osThreadNew+0xcc>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b5b      	cmp	r3, #91	; 0x5b
 8009d48:	d90a      	bls.n	8009d60 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d006      	beq.n	8009d60 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <osThreadNew+0xcc>
        mem = 1;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	623b      	str	r3, [r7, #32]
 8009d5e:	e010      	b.n	8009d82 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10c      	bne.n	8009d82 <osThreadNew+0xee>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d108      	bne.n	8009d82 <osThreadNew+0xee>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d104      	bne.n	8009d82 <osThreadNew+0xee>
          mem = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	623b      	str	r3, [r7, #32]
 8009d7c:	e001      	b.n	8009d82 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d110      	bne.n	8009daa <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d90:	9202      	str	r2, [sp, #8]
 8009d92:	9301      	str	r3, [sp, #4]
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f001 fc8e 	bl	800b6c0 <xTaskCreateStatic>
 8009da4:	4603      	mov	r3, r0
 8009da6:	613b      	str	r3, [r7, #16]
 8009da8:	e013      	b.n	8009dd2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d110      	bne.n	8009dd2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	f107 0310 	add.w	r3, r7, #16
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f001 fcd6 	bl	800b774 <xTaskCreate>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d001      	beq.n	8009dd2 <osThreadNew+0x13e>
          hTask = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009dd2:	693b      	ldr	r3, [r7, #16]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3730      	adds	r7, #48	; 0x30
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000020c 	.word	0x2000020c

08009de0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de8:	f3ef 8305 	mrs	r3, IPSR
 8009dec:	613b      	str	r3, [r7, #16]
  return(result);
 8009dee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10f      	bne.n	8009e14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009df4:	f3ef 8310 	mrs	r3, PRIMASK
 8009df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e00:	f3ef 8311 	mrs	r3, BASEPRI
 8009e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <osDelay+0x3c>
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <osDelay+0x58>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d103      	bne.n	8009e1c <osDelay+0x3c>
    stat = osErrorISR;
 8009e14:	f06f 0305 	mvn.w	r3, #5
 8009e18:	617b      	str	r3, [r7, #20]
 8009e1a:	e007      	b.n	8009e2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 fde8 	bl	800b9fc <vTaskDelay>
    }
  }

  return (stat);
 8009e2c:	697b      	ldr	r3, [r7, #20]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2000020c 	.word	0x2000020c

08009e3c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	; 0x30
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e4c:	f3ef 8305 	mrs	r3, IPSR
 8009e50:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f040 8087 	bne.w	8009f68 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5e:	617b      	str	r3, [r7, #20]
  return(result);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d105      	bne.n	8009e72 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e66:	f3ef 8311 	mrs	r3, BASEPRI
 8009e6a:	613b      	str	r3, [r7, #16]
  return(result);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <osSemaphoreNew+0x3e>
 8009e72:	4b40      	ldr	r3, [pc, #256]	; (8009f74 <osSemaphoreNew+0x138>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d076      	beq.n	8009f68 <osSemaphoreNew+0x12c>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d073      	beq.n	8009f68 <osSemaphoreNew+0x12c>
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d86f      	bhi.n	8009f68 <osSemaphoreNew+0x12c>
    mem = -1;
 8009e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d015      	beq.n	8009ec0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d006      	beq.n	8009eaa <osSemaphoreNew+0x6e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	2b4f      	cmp	r3, #79	; 0x4f
 8009ea2:	d902      	bls.n	8009eaa <osSemaphoreNew+0x6e>
        mem = 1;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	623b      	str	r3, [r7, #32]
 8009ea8:	e00c      	b.n	8009ec4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d108      	bne.n	8009ec4 <osSemaphoreNew+0x88>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d104      	bne.n	8009ec4 <osSemaphoreNew+0x88>
          mem = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	623b      	str	r3, [r7, #32]
 8009ebe:	e001      	b.n	8009ec4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eca:	d04d      	beq.n	8009f68 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d129      	bne.n	8009f26 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d10b      	bne.n	8009ef0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	2303      	movs	r3, #3
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	f000 fe02 	bl	800aaf0 <xQueueGenericCreateStatic>
 8009eec:	6278      	str	r0, [r7, #36]	; 0x24
 8009eee:	e005      	b.n	8009efc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	f000 fe6e 	bl	800abd6 <xQueueGenericCreate>
 8009efa:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d022      	beq.n	8009f48 <osSemaphoreNew+0x10c>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01f      	beq.n	8009f48 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f10:	f000 ff2a 	bl	800ad68 <xQueueGenericSend>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d016      	beq.n	8009f48 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8009f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f1c:	f001 fa18 	bl	800b350 <vQueueDelete>
            hSemaphore = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
 8009f24:	e010      	b.n	8009f48 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d108      	bne.n	8009f3e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	461a      	mov	r2, r3
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 feb0 	bl	800ac9a <xQueueCreateCountingSemaphoreStatic>
 8009f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009f3c:	e004      	b.n	8009f48 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009f3e:	68b9      	ldr	r1, [r7, #8]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fedf 	bl	800ad04 <xQueueCreateCountingSemaphore>
 8009f46:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00c      	beq.n	8009f68 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <osSemaphoreNew+0x120>
          name = attr->name;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	61fb      	str	r3, [r7, #28]
 8009f5a:	e001      	b.n	8009f60 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009f60:	69f9      	ldr	r1, [r7, #28]
 8009f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f64:	f001 fb26 	bl	800b5b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3728      	adds	r7, #40	; 0x28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	2000020c 	.word	0x2000020c

08009f78 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d103      	bne.n	8009f96 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009f8e:	f06f 0303 	mvn.w	r3, #3
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	e03e      	b.n	800a014 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f96:	f3ef 8305 	mrs	r3, IPSR
 8009f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8009f9c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa6:	613b      	str	r3, [r7, #16]
  return(result);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d105      	bne.n	8009fba <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fae:	f3ef 8311 	mrs	r3, BASEPRI
 8009fb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d01e      	beq.n	8009ff8 <osSemaphoreRelease+0x80>
 8009fba:	4b19      	ldr	r3, [pc, #100]	; (800a020 <osSemaphoreRelease+0xa8>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d11a      	bne.n	8009ff8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	4619      	mov	r1, r3
 8009fcc:	69b8      	ldr	r0, [r7, #24]
 8009fce:	f001 f859 	bl	800b084 <xQueueGiveFromISR>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d003      	beq.n	8009fe0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009fd8:	f06f 0302 	mvn.w	r3, #2
 8009fdc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fde:	e018      	b.n	800a012 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d015      	beq.n	800a012 <osSemaphoreRelease+0x9a>
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	; (800a024 <osSemaphoreRelease+0xac>)
 8009fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ff6:	e00c      	b.n	800a012 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	69b8      	ldr	r0, [r7, #24]
 800a000:	f000 feb2 	bl	800ad68 <xQueueGenericSend>
 800a004:	4603      	mov	r3, r0
 800a006:	2b01      	cmp	r3, #1
 800a008:	d004      	beq.n	800a014 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a00a:	f06f 0302 	mvn.w	r3, #2
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	e000      	b.n	800a014 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a012:	bf00      	nop
    }
  }

  return (stat);
 800a014:	69fb      	ldr	r3, [r7, #28]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3720      	adds	r7, #32
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	2000020c 	.word	0x2000020c
 800a024:	e000ed04 	.word	0xe000ed04

0800a028 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4a07      	ldr	r2, [pc, #28]	; (800a054 <vApplicationGetIdleTaskMemory+0x2c>)
 800a038:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4a06      	ldr	r2, [pc, #24]	; (800a058 <vApplicationGetIdleTaskMemory+0x30>)
 800a03e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a046:	601a      	str	r2, [r3, #0]
}
 800a048:	bf00      	nop
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	20000210 	.word	0x20000210
 800a058:	2000026c 	.word	0x2000026c

0800a05c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4a07      	ldr	r2, [pc, #28]	; (800a088 <vApplicationGetTimerTaskMemory+0x2c>)
 800a06c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	4a06      	ldr	r2, [pc, #24]	; (800a08c <vApplicationGetTimerTaskMemory+0x30>)
 800a072:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a07a:	601a      	str	r2, [r3, #0]
}
 800a07c:	bf00      	nop
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	20000a6c 	.word	0x20000a6c
 800a08c:	20000ac8 	.word	0x20000ac8

0800a090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08a      	sub	sp, #40	; 0x28
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a09c:	f001 fd46 	bl	800bb2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0a0:	4b57      	ldr	r3, [pc, #348]	; (800a200 <pvPortMalloc+0x170>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0a8:	f000 f90c 	bl	800a2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0ac:	4b55      	ldr	r3, [pc, #340]	; (800a204 <pvPortMalloc+0x174>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 808c 	bne.w	800a1d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01c      	beq.n	800a0fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a0c0:	2208      	movs	r2, #8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d013      	beq.n	800a0fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f023 0307 	bic.w	r3, r3, #7
 800a0d8:	3308      	adds	r3, #8
 800a0da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f003 0307 	and.w	r3, r3, #7
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	e7fe      	b.n	800a0f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d068      	beq.n	800a1d2 <pvPortMalloc+0x142>
 800a100:	4b41      	ldr	r3, [pc, #260]	; (800a208 <pvPortMalloc+0x178>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d863      	bhi.n	800a1d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a10a:	4b40      	ldr	r3, [pc, #256]	; (800a20c <pvPortMalloc+0x17c>)
 800a10c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a10e:	4b3f      	ldr	r3, [pc, #252]	; (800a20c <pvPortMalloc+0x17c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a114:	e004      	b.n	800a120 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d903      	bls.n	800a132 <pvPortMalloc+0xa2>
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1f1      	bne.n	800a116 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a132:	4b33      	ldr	r3, [pc, #204]	; (800a200 <pvPortMalloc+0x170>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a138:	429a      	cmp	r2, r3
 800a13a:	d04a      	beq.n	800a1d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2208      	movs	r2, #8
 800a142:	4413      	add	r3, r2
 800a144:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	1ad2      	subs	r2, r2, r3
 800a156:	2308      	movs	r3, #8
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d91e      	bls.n	800a19c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4413      	add	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d009      	beq.n	800a184 <pvPortMalloc+0xf4>
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	613b      	str	r3, [r7, #16]
 800a182:	e7fe      	b.n	800a182 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a196:	69b8      	ldr	r0, [r7, #24]
 800a198:	f000 f8f6 	bl	800a388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a19c:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <pvPortMalloc+0x178>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	4a18      	ldr	r2, [pc, #96]	; (800a208 <pvPortMalloc+0x178>)
 800a1a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1aa:	4b17      	ldr	r3, [pc, #92]	; (800a208 <pvPortMalloc+0x178>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b18      	ldr	r3, [pc, #96]	; (800a210 <pvPortMalloc+0x180>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d203      	bcs.n	800a1be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <pvPortMalloc+0x178>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a15      	ldr	r2, [pc, #84]	; (800a210 <pvPortMalloc+0x180>)
 800a1bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4b10      	ldr	r3, [pc, #64]	; (800a204 <pvPortMalloc+0x174>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1d2:	f001 fcb9 	bl	800bb48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d009      	beq.n	800a1f4 <pvPortMalloc+0x164>
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e7fe      	b.n	800a1f2 <pvPortMalloc+0x162>
	return pvReturn;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3728      	adds	r7, #40	; 0x28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200056d0 	.word	0x200056d0
 800a204:	200056dc 	.word	0x200056dc
 800a208:	200056d4 	.word	0x200056d4
 800a20c:	200056c8 	.word	0x200056c8
 800a210:	200056d8 	.word	0x200056d8

0800a214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d046      	beq.n	800a2b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a226:	2308      	movs	r3, #8
 800a228:	425b      	negs	r3, r3
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	4413      	add	r3, r2
 800a22e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <vPortFree+0xa8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4013      	ands	r3, r2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <vPortFree+0x42>
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e7fe      	b.n	800a254 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <vPortFree+0x5e>
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	60bb      	str	r3, [r7, #8]
 800a270:	e7fe      	b.n	800a270 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <vPortFree+0xa8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4013      	ands	r3, r2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d019      	beq.n	800a2b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d115      	bne.n	800a2b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	4b0b      	ldr	r3, [pc, #44]	; (800a2bc <vPortFree+0xa8>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	43db      	mvns	r3, r3
 800a292:	401a      	ands	r2, r3
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a298:	f001 fc48 	bl	800bb2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <vPortFree+0xac>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	4a06      	ldr	r2, [pc, #24]	; (800a2c0 <vPortFree+0xac>)
 800a2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2aa:	6938      	ldr	r0, [r7, #16]
 800a2ac:	f000 f86c 	bl	800a388 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2b0:	f001 fc4a 	bl	800bb48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2b4:	bf00      	nop
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	200056dc 	.word	0x200056dc
 800a2c0:	200056d4 	.word	0x200056d4

0800a2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2d0:	4b27      	ldr	r3, [pc, #156]	; (800a370 <prvHeapInit+0xac>)
 800a2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00c      	beq.n	800a2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3307      	adds	r3, #7
 800a2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	4a1f      	ldr	r2, [pc, #124]	; (800a370 <prvHeapInit+0xac>)
 800a2f4:	4413      	add	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	; (800a374 <prvHeapInit+0xb0>)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a302:	4b1c      	ldr	r3, [pc, #112]	; (800a374 <prvHeapInit+0xb0>)
 800a304:	2200      	movs	r2, #0
 800a306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a310:	2208      	movs	r2, #8
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0307 	bic.w	r3, r3, #7
 800a31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4a15      	ldr	r2, [pc, #84]	; (800a378 <prvHeapInit+0xb4>)
 800a324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a326:	4b14      	ldr	r3, [pc, #80]	; (800a378 <prvHeapInit+0xb4>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2200      	movs	r2, #0
 800a32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a32e:	4b12      	ldr	r3, [pc, #72]	; (800a378 <prvHeapInit+0xb4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	1ad2      	subs	r2, r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <prvHeapInit+0xb4>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <prvHeapInit+0xb8>)
 800a352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4a09      	ldr	r2, [pc, #36]	; (800a380 <prvHeapInit+0xbc>)
 800a35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a35c:	4b09      	ldr	r3, [pc, #36]	; (800a384 <prvHeapInit+0xc0>)
 800a35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a362:	601a      	str	r2, [r3, #0]
}
 800a364:	bf00      	nop
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	20001ac8 	.word	0x20001ac8
 800a374:	200056c8 	.word	0x200056c8
 800a378:	200056d0 	.word	0x200056d0
 800a37c:	200056d8 	.word	0x200056d8
 800a380:	200056d4 	.word	0x200056d4
 800a384:	200056dc 	.word	0x200056dc

0800a388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a390:	4b28      	ldr	r3, [pc, #160]	; (800a434 <prvInsertBlockIntoFreeList+0xac>)
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e002      	b.n	800a39c <prvInsertBlockIntoFreeList+0x14>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d8f7      	bhi.n	800a396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d108      	bne.n	800a3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	441a      	add	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d118      	bne.n	800a410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <prvInsertBlockIntoFreeList+0xb0>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d00d      	beq.n	800a406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	e008      	b.n	800a418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <prvInsertBlockIntoFreeList+0xb0>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e003      	b.n	800a418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d002      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a426:	bf00      	nop
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	200056c8 	.word	0x200056c8
 800a438:	200056d0 	.word	0x200056d0

0800a43c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f103 0208 	add.w	r2, r3, #8
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f103 0208 	add.w	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f103 0208 	add.w	r2, r3, #8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	601a      	str	r2, [r3, #0]
}
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f4:	d103      	bne.n	800a4fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e00c      	b.n	800a518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3308      	adds	r3, #8
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e002      	b.n	800a50c <vListInsert+0x2e>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	429a      	cmp	r2, r3
 800a516:	d2f6      	bcs.n	800a506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	601a      	str	r2, [r3, #0]
}
 800a544:	bf00      	nop
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6892      	ldr	r2, [r2, #8]
 800a566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	6852      	ldr	r2, [r2, #4]
 800a570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d103      	bne.n	800a584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	1e5a      	subs	r2, r3, #1
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3b04      	subs	r3, #4
 800a5b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f023 0201 	bic.w	r2, r3, #1
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5d4:	4a0c      	ldr	r2, [pc, #48]	; (800a608 <pxPortInitialiseStack+0x64>)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3b14      	subs	r3, #20
 800a5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3b04      	subs	r3, #4
 800a5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f06f 0202 	mvn.w	r2, #2
 800a5f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3b20      	subs	r3, #32
 800a5f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	0800a60d 	.word	0x0800a60d

0800a60c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a616:	4b11      	ldr	r3, [pc, #68]	; (800a65c <prvTaskExitError+0x50>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a61e:	d009      	beq.n	800a634 <prvTaskExitError+0x28>
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e7fe      	b.n	800a632 <prvTaskExitError+0x26>
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a646:	bf00      	nop
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0fc      	beq.n	800a648 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a64e:	bf00      	nop
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000010 	.word	0x20000010

0800a660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a660:	4b07      	ldr	r3, [pc, #28]	; (800a680 <pxCurrentTCBConst2>)
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	6808      	ldr	r0, [r1, #0]
 800a666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	f380 8809 	msr	PSP, r0
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f04f 0000 	mov.w	r0, #0
 800a676:	f380 8811 	msr	BASEPRI, r0
 800a67a:	4770      	bx	lr
 800a67c:	f3af 8000 	nop.w

0800a680 <pxCurrentTCBConst2>:
 800a680:	200056e8 	.word	0x200056e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop

0800a688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a688:	4808      	ldr	r0, [pc, #32]	; (800a6ac <prvPortStartFirstTask+0x24>)
 800a68a:	6800      	ldr	r0, [r0, #0]
 800a68c:	6800      	ldr	r0, [r0, #0]
 800a68e:	f380 8808 	msr	MSP, r0
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8814 	msr	CONTROL, r0
 800a69a:	b662      	cpsie	i
 800a69c:	b661      	cpsie	f
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	df00      	svc	0
 800a6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6aa:	bf00      	nop
 800a6ac:	e000ed08 	.word	0xe000ed08

0800a6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6b6:	4b44      	ldr	r3, [pc, #272]	; (800a7c8 <xPortStartScheduler+0x118>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a44      	ldr	r2, [pc, #272]	; (800a7cc <xPortStartScheduler+0x11c>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d109      	bne.n	800a6d4 <xPortStartScheduler+0x24>
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	613b      	str	r3, [r7, #16]
 800a6d2:	e7fe      	b.n	800a6d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	; (800a7c8 <xPortStartScheduler+0x118>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a3d      	ldr	r2, [pc, #244]	; (800a7d0 <xPortStartScheduler+0x120>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d109      	bne.n	800a6f2 <xPortStartScheduler+0x42>
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	e7fe      	b.n	800a6f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6f2:	4b38      	ldr	r3, [pc, #224]	; (800a7d4 <xPortStartScheduler+0x124>)
 800a6f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	22ff      	movs	r2, #255	; 0xff
 800a702:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a714:	b2da      	uxtb	r2, r3
 800a716:	4b30      	ldr	r3, [pc, #192]	; (800a7d8 <xPortStartScheduler+0x128>)
 800a718:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a71a:	4b30      	ldr	r3, [pc, #192]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a71c:	2207      	movs	r2, #7
 800a71e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a720:	e009      	b.n	800a736 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3b01      	subs	r3, #1
 800a728:	4a2c      	ldr	r2, [pc, #176]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a72a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73e:	2b80      	cmp	r3, #128	; 0x80
 800a740:	d0ef      	beq.n	800a722 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a742:	4b26      	ldr	r3, [pc, #152]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f1c3 0307 	rsb	r3, r3, #7
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d009      	beq.n	800a762 <xPortStartScheduler+0xb2>
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	60bb      	str	r3, [r7, #8]
 800a760:	e7fe      	b.n	800a760 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a762:	4b1e      	ldr	r3, [pc, #120]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	021b      	lsls	r3, r3, #8
 800a768:	4a1c      	ldr	r2, [pc, #112]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a76a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a76c:	4b1b      	ldr	r3, [pc, #108]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a774:	4a19      	ldr	r2, [pc, #100]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a780:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a16      	ldr	r2, [pc, #88]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a786:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a78a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a78c:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a13      	ldr	r2, [pc, #76]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a792:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a798:	f000 f8d6 	bl	800a948 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a79c:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <xPortStartScheduler+0x134>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7a2:	f000 f8f5 	bl	800a990 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7a6:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <xPortStartScheduler+0x138>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a0f      	ldr	r2, [pc, #60]	; (800a7e8 <xPortStartScheduler+0x138>)
 800a7ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7b2:	f7ff ff69 	bl	800a688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7b6:	f001 fb2b 	bl	800be10 <vTaskSwitchContext>
	prvTaskExitError();
 800a7ba:	f7ff ff27 	bl	800a60c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed00 	.word	0xe000ed00
 800a7cc:	410fc271 	.word	0x410fc271
 800a7d0:	410fc270 	.word	0x410fc270
 800a7d4:	e000e400 	.word	0xe000e400
 800a7d8:	200056e0 	.word	0x200056e0
 800a7dc:	200056e4 	.word	0x200056e4
 800a7e0:	e000ed20 	.word	0xe000ed20
 800a7e4:	20000010 	.word	0x20000010
 800a7e8:	e000ef34 	.word	0xe000ef34

0800a7ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a804:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <vPortEnterCritical+0x54>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3301      	adds	r3, #1
 800a80a:	4a0d      	ldr	r2, [pc, #52]	; (800a840 <vPortEnterCritical+0x54>)
 800a80c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a80e:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <vPortEnterCritical+0x54>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d10e      	bne.n	800a834 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a816:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <vPortEnterCritical+0x58>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <vPortEnterCritical+0x48>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	e7fe      	b.n	800a832 <vPortEnterCritical+0x46>
	}
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20000010 	.word	0x20000010
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a84e:	4b11      	ldr	r3, [pc, #68]	; (800a894 <vPortExitCritical+0x4c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d109      	bne.n	800a86a <vPortExitCritical+0x22>
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	607b      	str	r3, [r7, #4]
 800a868:	e7fe      	b.n	800a868 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a86a:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <vPortExitCritical+0x4c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3b01      	subs	r3, #1
 800a870:	4a08      	ldr	r2, [pc, #32]	; (800a894 <vPortExitCritical+0x4c>)
 800a872:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <vPortExitCritical+0x4c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <vPortExitCritical+0x3e>
 800a87c:	2300      	movs	r3, #0
 800a87e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	20000010 	.word	0x20000010
	...

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	f380 8811 	msr	BASEPRI, r0
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f001 fa9e 	bl	800be10 <vTaskSwitchContext>
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f380 8811 	msr	BASEPRI, r0
 800a8dc:	bc09      	pop	{r0, r3}
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	f01e 0f10 	tst.w	lr, #16
 800a8ea:	bf08      	it	eq
 800a8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f0:	f380 8809 	msr	PSP, r0
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst>:
 800a900:	200056e8 	.word	0x200056e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a920:	f001 f9be 	bl	800bca0 <xTaskIncrementTick>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92a:	4b06      	ldr	r3, [pc, #24]	; (800a944 <SysTick_Handler+0x3c>)
 800a92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	2300      	movs	r3, #0
 800a934:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <vPortSetupTimerInterrupt+0x34>)
 800a94e:	2200      	movs	r2, #0
 800a950:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortSetupTimerInterrupt+0x38>)
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <vPortSetupTimerInterrupt+0x3c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <vPortSetupTimerInterrupt+0x40>)
 800a95e:	fba2 2303 	umull	r2, r3, r2, r3
 800a962:	099b      	lsrs	r3, r3, #6
 800a964:	4a09      	ldr	r2, [pc, #36]	; (800a98c <vPortSetupTimerInterrupt+0x44>)
 800a966:	3b01      	subs	r3, #1
 800a968:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a96a:	4b04      	ldr	r3, [pc, #16]	; (800a97c <vPortSetupTimerInterrupt+0x34>)
 800a96c:	2207      	movs	r2, #7
 800a96e:	601a      	str	r2, [r3, #0]
}
 800a970:	bf00      	nop
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	e000e010 	.word	0xe000e010
 800a980:	e000e018 	.word	0xe000e018
 800a984:	20000000 	.word	0x20000000
 800a988:	10624dd3 	.word	0x10624dd3
 800a98c:	e000e014 	.word	0xe000e014

0800a990 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a990:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9a0 <vPortEnableVFP+0x10>
 800a994:	6801      	ldr	r1, [r0, #0]
 800a996:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a99a:	6001      	str	r1, [r0, #0]
 800a99c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a99e:	bf00      	nop
 800a9a0:	e000ed88 	.word	0xe000ed88

0800a9a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9aa:	f3ef 8305 	mrs	r3, IPSR
 800a9ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b0f      	cmp	r3, #15
 800a9b4:	d913      	bls.n	800a9de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9b6:	4a16      	ldr	r2, [pc, #88]	; (800aa10 <vPortValidateInterruptPriority+0x6c>)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c0:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <vPortValidateInterruptPriority+0x70>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	7afa      	ldrb	r2, [r7, #11]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d209      	bcs.n	800a9de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	607b      	str	r3, [r7, #4]
 800a9dc:	e7fe      	b.n	800a9dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9de:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <vPortValidateInterruptPriority+0x74>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <vPortValidateInterruptPriority+0x78>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d909      	bls.n	800aa02 <vPortValidateInterruptPriority+0x5e>
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	e7fe      	b.n	800aa00 <vPortValidateInterruptPriority+0x5c>
	}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	e000e3f0 	.word	0xe000e3f0
 800aa14:	200056e0 	.word	0x200056e0
 800aa18:	e000ed0c 	.word	0xe000ed0c
 800aa1c:	200056e4 	.word	0x200056e4

0800aa20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d109      	bne.n	800aa48 <xQueueGenericReset+0x28>
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	60bb      	str	r3, [r7, #8]
 800aa46:	e7fe      	b.n	800aa46 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800aa48:	f7ff fed0 	bl	800a7ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa54:	68f9      	ldr	r1, [r7, #12]
 800aa56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa58:	fb01 f303 	mul.w	r3, r1, r3
 800aa5c:	441a      	add	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	68f9      	ldr	r1, [r7, #12]
 800aa7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	441a      	add	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	22ff      	movs	r2, #255	; 0xff
 800aa8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	22ff      	movs	r2, #255	; 0xff
 800aa94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d114      	bne.n	800aac8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01a      	beq.n	800aadc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3310      	adds	r3, #16
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f001 fa5a 	bl	800bf64 <xTaskRemoveFromEventList>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d012      	beq.n	800aadc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aab6:	4b0d      	ldr	r3, [pc, #52]	; (800aaec <xQueueGenericReset+0xcc>)
 800aab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	e009      	b.n	800aadc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	3310      	adds	r3, #16
 800aacc:	4618      	mov	r0, r3
 800aace:	f7ff fcb5 	bl	800a43c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3324      	adds	r3, #36	; 0x24
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff fcb0 	bl	800a43c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aadc:	f7ff feb4 	bl	800a848 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aae0:	2301      	movs	r3, #1
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08e      	sub	sp, #56	; 0x38
 800aaf4:	af02      	add	r7, sp, #8
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <xQueueGenericCreateStatic+0x28>
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab16:	e7fe      	b.n	800ab16 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d109      	bne.n	800ab32 <xQueueGenericCreateStatic+0x42>
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab30:	e7fe      	b.n	800ab30 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <xQueueGenericCreateStatic+0x4e>
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <xQueueGenericCreateStatic+0x52>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <xQueueGenericCreateStatic+0x54>
 800ab42:	2300      	movs	r3, #0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d109      	bne.n	800ab5c <xQueueGenericCreateStatic+0x6c>
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	623b      	str	r3, [r7, #32]
 800ab5a:	e7fe      	b.n	800ab5a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <xQueueGenericCreateStatic+0x78>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <xQueueGenericCreateStatic+0x7c>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <xQueueGenericCreateStatic+0x7e>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <xQueueGenericCreateStatic+0x96>
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	e7fe      	b.n	800ab84 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab86:	2350      	movs	r3, #80	; 0x50
 800ab88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b50      	cmp	r3, #80	; 0x50
 800ab8e:	d009      	beq.n	800aba4 <xQueueGenericCreateStatic+0xb4>
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	e7fe      	b.n	800aba2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aba4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00d      	beq.n	800abcc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abb8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	4613      	mov	r3, r2
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 f844 	bl	800ac54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800abce:	4618      	mov	r0, r3
 800abd0:	3730      	adds	r7, #48	; 0x30
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b08a      	sub	sp, #40	; 0x28
 800abda:	af02      	add	r7, sp, #8
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	4613      	mov	r3, r2
 800abe2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d109      	bne.n	800abfe <xQueueGenericCreate+0x28>
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	613b      	str	r3, [r7, #16]
 800abfc:	e7fe      	b.n	800abfc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d102      	bne.n	800ac0a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61fb      	str	r3, [r7, #28]
 800ac08:	e004      	b.n	800ac14 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	fb02 f303 	mul.w	r3, r2, r3
 800ac12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	3350      	adds	r3, #80	; 0x50
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff fa39 	bl	800a090 <pvPortMalloc>
 800ac1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d011      	beq.n	800ac4a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	3350      	adds	r3, #80	; 0x50
 800ac2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac38:	79fa      	ldrb	r2, [r7, #7]
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	68b9      	ldr	r1, [r7, #8]
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f805 	bl	800ac54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3720      	adds	r7, #32
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d103      	bne.n	800ac70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	69ba      	ldr	r2, [r7, #24]
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	e002      	b.n	800ac76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac82:	2101      	movs	r1, #1
 800ac84:	69b8      	ldr	r0, [r7, #24]
 800ac86:	f7ff fecb 	bl	800aa20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	78fa      	ldrb	r2, [r7, #3]
 800ac8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b08a      	sub	sp, #40	; 0x28
 800ac9e:	af02      	add	r7, sp, #8
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d109      	bne.n	800acc0 <xQueueCreateCountingSemaphoreStatic+0x26>
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	61bb      	str	r3, [r7, #24]
 800acbe:	e7fe      	b.n	800acbe <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d909      	bls.n	800acdc <xQueueCreateCountingSemaphoreStatic+0x42>
 800acc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	e7fe      	b.n	800acda <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800acdc:	2302      	movs	r3, #2
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	2100      	movs	r1, #0
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff ff02 	bl	800aaf0 <xQueueGenericCreateStatic>
 800acec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800acfa:	69fb      	ldr	r3, [r7, #28]
	}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3720      	adds	r7, #32
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d109      	bne.n	800ad28 <xQueueCreateCountingSemaphore+0x24>
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	e7fe      	b.n	800ad26 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d909      	bls.n	800ad44 <xQueueCreateCountingSemaphore+0x40>
 800ad30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	e7fe      	b.n	800ad42 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ad44:	2202      	movs	r2, #2
 800ad46:	2100      	movs	r1, #0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff ff44 	bl	800abd6 <xQueueGenericCreate>
 800ad4e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ad5c:	697b      	ldr	r3, [r7, #20]
	}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	; 0x38
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad76:	2300      	movs	r3, #0
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d109      	bne.n	800ad98 <xQueueGenericSend+0x30>
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad96:	e7fe      	b.n	800ad96 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d103      	bne.n	800ada6 <xQueueGenericSend+0x3e>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <xQueueGenericSend+0x42>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <xQueueGenericSend+0x44>
 800adaa:	2300      	movs	r3, #0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <xQueueGenericSend+0x5c>
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
 800adc2:	e7fe      	b.n	800adc2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d103      	bne.n	800add2 <xQueueGenericSend+0x6a>
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <xQueueGenericSend+0x6e>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueGenericSend+0x70>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d109      	bne.n	800adf0 <xQueueGenericSend+0x88>
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	623b      	str	r3, [r7, #32]
 800adee:	e7fe      	b.n	800adee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adf0:	f001 fa6e 	bl	800c2d0 <xTaskGetSchedulerState>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <xQueueGenericSend+0x98>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <xQueueGenericSend+0x9c>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e000      	b.n	800ae06 <xQueueGenericSend+0x9e>
 800ae04:	2300      	movs	r3, #0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <xQueueGenericSend+0xb6>
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	61fb      	str	r3, [r7, #28]
 800ae1c:	e7fe      	b.n	800ae1c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae1e:	f7ff fce5 	bl	800a7ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <xQueueGenericSend+0xcc>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d129      	bne.n	800ae88 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae3a:	f000 faab 	bl	800b394 <prvCopyDataToQueue>
 800ae3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d010      	beq.n	800ae6a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	3324      	adds	r3, #36	; 0x24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 f889 	bl	800bf64 <xTaskRemoveFromEventList>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d013      	beq.n	800ae80 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae58:	4b3f      	ldr	r3, [pc, #252]	; (800af58 <xQueueGenericSend+0x1f0>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	e00a      	b.n	800ae80 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae70:	4b39      	ldr	r3, [pc, #228]	; (800af58 <xQueueGenericSend+0x1f0>)
 800ae72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae80:	f7ff fce2 	bl	800a848 <vPortExitCritical>
				return pdPASS;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e063      	b.n	800af50 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d103      	bne.n	800ae96 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae8e:	f7ff fcdb 	bl	800a848 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e05c      	b.n	800af50 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d106      	bne.n	800aeaa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 f8c1 	bl	800c028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aea6:	2301      	movs	r3, #1
 800aea8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeaa:	f7ff fccd 	bl	800a848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeae:	f000 fe3d 	bl	800bb2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeb2:	f7ff fc9b 	bl	800a7ec <vPortEnterCritical>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec2:	d103      	bne.n	800aecc <xQueueGenericSend+0x164>
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed2:	b25b      	sxtb	r3, r3
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aed8:	d103      	bne.n	800aee2 <xQueueGenericSend+0x17a>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aee2:	f7ff fcb1 	bl	800a848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aee6:	1d3a      	adds	r2, r7, #4
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 f8b0 	bl	800c054 <xTaskCheckForTimeOut>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d124      	bne.n	800af44 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aefa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefc:	f000 fb42 	bl	800b584 <prvIsQueueFull>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d018      	beq.n	800af38 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	3310      	adds	r3, #16
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 ffda 	bl	800bec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af16:	f000 facd 	bl	800b4b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af1a:	f000 fe15 	bl	800bb48 <xTaskResumeAll>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f af7c 	bne.w	800ae1e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <xQueueGenericSend+0x1f0>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	e772      	b.n	800ae1e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fabb 	bl	800b4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af3e:	f000 fe03 	bl	800bb48 <xTaskResumeAll>
 800af42:	e76c      	b.n	800ae1e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af46:	f000 fab5 	bl	800b4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af4a:	f000 fdfd 	bl	800bb48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af50:	4618      	mov	r0, r3
 800af52:	3738      	adds	r7, #56	; 0x38
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08e      	sub	sp, #56	; 0x38
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	2b00      	cmp	r3, #0
 800af72:	d109      	bne.n	800af88 <xQueueGenericSendFromISR+0x2c>
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	627b      	str	r3, [r7, #36]	; 0x24
 800af86:	e7fe      	b.n	800af86 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d103      	bne.n	800af96 <xQueueGenericSendFromISR+0x3a>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <xQueueGenericSendFromISR+0x3e>
 800af96:	2301      	movs	r3, #1
 800af98:	e000      	b.n	800af9c <xQueueGenericSendFromISR+0x40>
 800af9a:	2300      	movs	r3, #0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d109      	bne.n	800afb4 <xQueueGenericSendFromISR+0x58>
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	623b      	str	r3, [r7, #32]
 800afb2:	e7fe      	b.n	800afb2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d103      	bne.n	800afc2 <xQueueGenericSendFromISR+0x66>
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <xQueueGenericSendFromISR+0x6a>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <xQueueGenericSendFromISR+0x6c>
 800afc6:	2300      	movs	r3, #0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d109      	bne.n	800afe0 <xQueueGenericSendFromISR+0x84>
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	e7fe      	b.n	800afde <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afe0:	f7ff fce0 	bl	800a9a4 <vPortValidateInterruptPriority>
	__asm volatile
 800afe4:	f3ef 8211 	mrs	r2, BASEPRI
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	61ba      	str	r2, [r7, #24]
 800affa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800affc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800affe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b008:	429a      	cmp	r2, r3
 800b00a:	d302      	bcc.n	800b012 <xQueueGenericSendFromISR+0xb6>
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d12c      	bne.n	800b06c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b022:	f000 f9b7 	bl	800b394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b026:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b02e:	d112      	bne.n	800b056 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d016      	beq.n	800b066 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	3324      	adds	r3, #36	; 0x24
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 ff91 	bl	800bf64 <xTaskRemoveFromEventList>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e007      	b.n	800b066 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	b25a      	sxtb	r2, r3
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b066:	2301      	movs	r3, #1
 800b068:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b06a:	e001      	b.n	800b070 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b06c:	2300      	movs	r3, #0
 800b06e:	637b      	str	r3, [r7, #52]	; 0x34
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3738      	adds	r7, #56	; 0x38
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08e      	sub	sp, #56	; 0x38
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <xQueueGiveFromISR+0x28>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	623b      	str	r3, [r7, #32]
 800b0aa:	e7fe      	b.n	800b0aa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d009      	beq.n	800b0c8 <xQueueGiveFromISR+0x44>
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	61fb      	str	r3, [r7, #28]
 800b0c6:	e7fe      	b.n	800b0c6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d103      	bne.n	800b0d8 <xQueueGiveFromISR+0x54>
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d101      	bne.n	800b0dc <xQueueGiveFromISR+0x58>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e000      	b.n	800b0de <xQueueGiveFromISR+0x5a>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <xQueueGiveFromISR+0x72>
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	61bb      	str	r3, [r7, #24]
 800b0f4:	e7fe      	b.n	800b0f4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0f6:	f7ff fc55 	bl	800a9a4 <vPortValidateInterruptPriority>
	__asm volatile
 800b0fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	617a      	str	r2, [r7, #20]
 800b110:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b112:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b114:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b122:	429a      	cmp	r2, r3
 800b124:	d22b      	bcs.n	800b17e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b138:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b140:	d112      	bne.n	800b168 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2b00      	cmp	r3, #0
 800b148:	d016      	beq.n	800b178 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	3324      	adds	r3, #36	; 0x24
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 ff08 	bl	800bf64 <xTaskRemoveFromEventList>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00e      	beq.n	800b178 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2201      	movs	r2, #1
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	e007      	b.n	800b178 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b16c:	3301      	adds	r3, #1
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	b25a      	sxtb	r2, r3
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b178:	2301      	movs	r3, #1
 800b17a:	637b      	str	r3, [r7, #52]	; 0x34
 800b17c:	e001      	b.n	800b182 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3738      	adds	r7, #56	; 0x38
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08c      	sub	sp, #48	; 0x30
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <xQueueReceive+0x2e>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	623b      	str	r3, [r7, #32]
 800b1c4:	e7fe      	b.n	800b1c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d103      	bne.n	800b1d4 <xQueueReceive+0x3c>
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <xQueueReceive+0x40>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <xQueueReceive+0x42>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d109      	bne.n	800b1f2 <xQueueReceive+0x5a>
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	61fb      	str	r3, [r7, #28]
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1f2:	f001 f86d 	bl	800c2d0 <xTaskGetSchedulerState>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <xQueueReceive+0x6a>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <xQueueReceive+0x6e>
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <xQueueReceive+0x70>
 800b206:	2300      	movs	r3, #0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d109      	bne.n	800b220 <xQueueReceive+0x88>
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	61bb      	str	r3, [r7, #24]
 800b21e:	e7fe      	b.n	800b21e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b220:	f7ff fae4 	bl	800a7ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01f      	beq.n	800b270 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b234:	f000 f918 	bl	800b468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	1e5a      	subs	r2, r3, #1
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00f      	beq.n	800b268 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	3310      	adds	r3, #16
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 fe89 	bl	800bf64 <xTaskRemoveFromEventList>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d007      	beq.n	800b268 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b258:	4b3c      	ldr	r3, [pc, #240]	; (800b34c <xQueueReceive+0x1b4>)
 800b25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b268:	f7ff faee 	bl	800a848 <vPortExitCritical>
				return pdPASS;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e069      	b.n	800b344 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d103      	bne.n	800b27e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b276:	f7ff fae7 	bl	800a848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e062      	b.n	800b344 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b284:	f107 0310 	add.w	r3, r7, #16
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fecd 	bl	800c028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b28e:	2301      	movs	r3, #1
 800b290:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b292:	f7ff fad9 	bl	800a848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b296:	f000 fc49 	bl	800bb2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b29a:	f7ff faa7 	bl	800a7ec <vPortEnterCritical>
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2a4:	b25b      	sxtb	r3, r3
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2aa:	d103      	bne.n	800b2b4 <xQueueReceive+0x11c>
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2ba:	b25b      	sxtb	r3, r3
 800b2bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2c0:	d103      	bne.n	800b2ca <xQueueReceive+0x132>
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2ca:	f7ff fabd 	bl	800a848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2ce:	1d3a      	adds	r2, r7, #4
 800b2d0:	f107 0310 	add.w	r3, r7, #16
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 febc 	bl	800c054 <xTaskCheckForTimeOut>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d123      	bne.n	800b32a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e4:	f000 f938 	bl	800b558 <prvIsQueueEmpty>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d017      	beq.n	800b31e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	3324      	adds	r3, #36	; 0x24
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fde6 	bl	800bec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2fe:	f000 f8d9 	bl	800b4b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b302:	f000 fc21 	bl	800bb48 <xTaskResumeAll>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d189      	bne.n	800b220 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b30c:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <xQueueReceive+0x1b4>)
 800b30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	e780      	b.n	800b220 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b320:	f000 f8c8 	bl	800b4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b324:	f000 fc10 	bl	800bb48 <xTaskResumeAll>
 800b328:	e77a      	b.n	800b220 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b32a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b32c:	f000 f8c2 	bl	800b4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b330:	f000 fc0a 	bl	800bb48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b336:	f000 f90f 	bl	800b558 <prvIsQueueEmpty>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f43f af6f 	beq.w	800b220 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b342:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b344:	4618      	mov	r0, r3
 800b346:	3730      	adds	r7, #48	; 0x30
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	e000ed04 	.word	0xe000ed04

0800b350 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d109      	bne.n	800b376 <vQueueDelete+0x26>
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	60bb      	str	r3, [r7, #8]
 800b374:	e7fe      	b.n	800b374 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 f944 	bl	800b604 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b382:	2b00      	cmp	r3, #0
 800b384:	d102      	bne.n	800b38c <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7fe ff44 	bl	800a214 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b38c:	bf00      	nop
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10d      	bne.n	800b3ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d14d      	bne.n	800b456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 ffa4 	bl	800c30c <xTaskPriorityDisinherit>
 800b3c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	e043      	b.n	800b456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d119      	bne.n	800b408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6858      	ldr	r0, [r3, #4]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3dc:	461a      	mov	r2, r3
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	f001 fd2a 	bl	800ce38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ec:	441a      	add	r2, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d32b      	bcc.n	800b456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	e026      	b.n	800b456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68d8      	ldr	r0, [r3, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b410:	461a      	mov	r2, r3
 800b412:	68b9      	ldr	r1, [r7, #8]
 800b414:	f001 fd10 	bl	800ce38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b420:	425b      	negs	r3, r3
 800b422:	441a      	add	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d207      	bcs.n	800b444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43c:	425b      	negs	r3, r3
 800b43e:	441a      	add	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d105      	bne.n	800b456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3b01      	subs	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b45e:	697b      	ldr	r3, [r7, #20]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b476:	2b00      	cmp	r3, #0
 800b478:	d018      	beq.n	800b4ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b482:	441a      	add	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	429a      	cmp	r2, r3
 800b492:	d303      	bcc.n	800b49c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68d9      	ldr	r1, [r3, #12]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6838      	ldr	r0, [r7, #0]
 800b4a8:	f001 fcc6 	bl	800ce38 <memcpy>
	}
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b4bc:	f7ff f996 	bl	800a7ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4c8:	e011      	b.n	800b4ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d012      	beq.n	800b4f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	3324      	adds	r3, #36	; 0x24
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 fd44 	bl	800bf64 <xTaskRemoveFromEventList>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b4e2:	f000 fe17 	bl	800c114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	dce9      	bgt.n	800b4ca <prvUnlockQueue+0x16>
 800b4f6:	e000      	b.n	800b4fa <prvUnlockQueue+0x46>
					break;
 800b4f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	22ff      	movs	r2, #255	; 0xff
 800b4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b502:	f7ff f9a1 	bl	800a848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b506:	f7ff f971 	bl	800a7ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b512:	e011      	b.n	800b538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d012      	beq.n	800b542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3310      	adds	r3, #16
 800b520:	4618      	mov	r0, r3
 800b522:	f000 fd1f 	bl	800bf64 <xTaskRemoveFromEventList>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b52c:	f000 fdf2 	bl	800c114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	3b01      	subs	r3, #1
 800b534:	b2db      	uxtb	r3, r3
 800b536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dce9      	bgt.n	800b514 <prvUnlockQueue+0x60>
 800b540:	e000      	b.n	800b544 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b542:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	22ff      	movs	r2, #255	; 0xff
 800b548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b54c:	f7ff f97c 	bl	800a848 <vPortExitCritical>
}
 800b550:	bf00      	nop
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b560:	f7ff f944 	bl	800a7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b56c:	2301      	movs	r3, #1
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	e001      	b.n	800b576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b576:	f7ff f967 	bl	800a848 <vPortExitCritical>

	return xReturn;
 800b57a:	68fb      	ldr	r3, [r7, #12]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b58c:	f7ff f92e 	bl	800a7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b598:	429a      	cmp	r2, r3
 800b59a:	d102      	bne.n	800b5a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	60fb      	str	r3, [r7, #12]
 800b5a0:	e001      	b.n	800b5a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5a6:	f7ff f94f 	bl	800a848 <vPortExitCritical>

	return xReturn;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e014      	b.n	800b5ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b5c4:	4a0e      	ldr	r2, [pc, #56]	; (800b600 <vQueueAddToRegistry+0x4c>)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10b      	bne.n	800b5e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5d0:	490b      	ldr	r1, [pc, #44]	; (800b600 <vQueueAddToRegistry+0x4c>)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5da:	4a09      	ldr	r2, [pc, #36]	; (800b600 <vQueueAddToRegistry+0x4c>)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	4413      	add	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b5e6:	e005      	b.n	800b5f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	d9e7      	bls.n	800b5c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	20006e20 	.word	0x20006e20

0800b604 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b60c:	2300      	movs	r3, #0
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	e016      	b.n	800b640 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b612:	4a10      	ldr	r2, [pc, #64]	; (800b654 <vQueueUnregisterQueue+0x50>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	4413      	add	r3, r2
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d10b      	bne.n	800b63a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b622:	4a0c      	ldr	r2, [pc, #48]	; (800b654 <vQueueUnregisterQueue+0x50>)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2100      	movs	r1, #0
 800b628:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b62c:	4a09      	ldr	r2, [pc, #36]	; (800b654 <vQueueUnregisterQueue+0x50>)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	4413      	add	r3, r2
 800b634:	2200      	movs	r2, #0
 800b636:	605a      	str	r2, [r3, #4]
				break;
 800b638:	e005      	b.n	800b646 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3301      	adds	r3, #1
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b07      	cmp	r3, #7
 800b644:	d9e5      	bls.n	800b612 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b646:	bf00      	nop
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	20006e20 	.word	0x20006e20

0800b658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b668:	f7ff f8c0 	bl	800a7ec <vPortEnterCritical>
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b672:	b25b      	sxtb	r3, r3
 800b674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b678:	d103      	bne.n	800b682 <vQueueWaitForMessageRestricted+0x2a>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b688:	b25b      	sxtb	r3, r3
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b68e:	d103      	bne.n	800b698 <vQueueWaitForMessageRestricted+0x40>
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b698:	f7ff f8d6 	bl	800a848 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d106      	bne.n	800b6b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	3324      	adds	r3, #36	; 0x24
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fc2f 	bl	800bf10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6b2:	6978      	ldr	r0, [r7, #20]
 800b6b4:	f7ff fefe 	bl	800b4b4 <prvUnlockQueue>
	}
 800b6b8:	bf00      	nop
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	; 0x38
 800b6c4:	af04      	add	r7, sp, #16
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d109      	bne.n	800b6e8 <xTaskCreateStatic+0x28>
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	623b      	str	r3, [r7, #32]
 800b6e6:	e7fe      	b.n	800b6e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d109      	bne.n	800b702 <xTaskCreateStatic+0x42>
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	61fb      	str	r3, [r7, #28]
 800b700:	e7fe      	b.n	800b700 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b702:	235c      	movs	r3, #92	; 0x5c
 800b704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	2b5c      	cmp	r3, #92	; 0x5c
 800b70a:	d009      	beq.n	800b720 <xTaskCreateStatic+0x60>
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	61bb      	str	r3, [r7, #24]
 800b71e:	e7fe      	b.n	800b71e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b720:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	2b00      	cmp	r3, #0
 800b726:	d01e      	beq.n	800b766 <xTaskCreateStatic+0xa6>
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d01b      	beq.n	800b766 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b736:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b740:	2300      	movs	r3, #0
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	9302      	str	r3, [sp, #8]
 800b748:	f107 0314 	add.w	r3, r7, #20
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 f850 	bl	800b7fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b75e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b760:	f000 f8dc 	bl	800b91c <prvAddNewTaskToReadyList>
 800b764:	e001      	b.n	800b76a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b76a:	697b      	ldr	r3, [r7, #20]
	}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3728      	adds	r7, #40	; 0x28
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08c      	sub	sp, #48	; 0x30
 800b778:	af04      	add	r7, sp, #16
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4613      	mov	r3, r2
 800b782:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b784:	88fb      	ldrh	r3, [r7, #6]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fe fc81 	bl	800a090 <pvPortMalloc>
 800b78e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00e      	beq.n	800b7b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b796:	205c      	movs	r0, #92	; 0x5c
 800b798:	f7fe fc7a 	bl	800a090 <pvPortMalloc>
 800b79c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d003      	beq.n	800b7ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	631a      	str	r2, [r3, #48]	; 0x30
 800b7aa:	e005      	b.n	800b7b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7ac:	6978      	ldr	r0, [r7, #20]
 800b7ae:	f7fe fd31 	bl	800a214 <vPortFree>
 800b7b2:	e001      	b.n	800b7b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d017      	beq.n	800b7ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7c6:	88fa      	ldrh	r2, [r7, #6]
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	9303      	str	r3, [sp, #12]
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	9302      	str	r3, [sp, #8]
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f80e 	bl	800b7fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7e2:	69f8      	ldr	r0, [r7, #28]
 800b7e4:	f000 f89a 	bl	800b91c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61bb      	str	r3, [r7, #24]
 800b7ec:	e002      	b.n	800b7f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7f4:	69bb      	ldr	r3, [r7, #24]
	}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3720      	adds	r7, #32
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b088      	sub	sp, #32
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	607a      	str	r2, [r7, #4]
 800b80a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	461a      	mov	r2, r3
 800b816:	21a5      	movs	r1, #165	; 0xa5
 800b818:	f001 fb19 	bl	800ce4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b826:	440b      	add	r3, r1
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	f023 0307 	bic.w	r3, r3, #7
 800b834:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f003 0307 	and.w	r3, r3, #7
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d009      	beq.n	800b854 <prvInitialiseNewTask+0x56>
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e7fe      	b.n	800b852 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d01f      	beq.n	800b89a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b85a:	2300      	movs	r3, #0
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	e012      	b.n	800b886 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	7819      	ldrb	r1, [r3, #0]
 800b868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	3334      	adds	r3, #52	; 0x34
 800b870:	460a      	mov	r2, r1
 800b872:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	4413      	add	r3, r2
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d006      	beq.n	800b88e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	3301      	adds	r3, #1
 800b884:	61fb      	str	r3, [r7, #28]
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	2b0f      	cmp	r3, #15
 800b88a:	d9e9      	bls.n	800b860 <prvInitialiseNewTask+0x62>
 800b88c:	e000      	b.n	800b890 <prvInitialiseNewTask+0x92>
			{
				break;
 800b88e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b898:	e003      	b.n	800b8a2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	2b37      	cmp	r3, #55	; 0x37
 800b8a6:	d901      	bls.n	800b8ac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8a8:	2337      	movs	r3, #55	; 0x37
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fdda 	bl	800a47c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	3318      	adds	r3, #24
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fe fdd5 	bl	800a47c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	68f9      	ldr	r1, [r7, #12]
 800b8fa:	69b8      	ldr	r0, [r7, #24]
 800b8fc:	f7fe fe52 	bl	800a5a4 <pxPortInitialiseStack>
 800b900:	4602      	mov	r2, r0
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b912:	bf00      	nop
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b924:	f7fe ff62 	bl	800a7ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b928:	4b2d      	ldr	r3, [pc, #180]	; (800b9e0 <prvAddNewTaskToReadyList+0xc4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	4a2c      	ldr	r2, [pc, #176]	; (800b9e0 <prvAddNewTaskToReadyList+0xc4>)
 800b930:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b932:	4b2c      	ldr	r3, [pc, #176]	; (800b9e4 <prvAddNewTaskToReadyList+0xc8>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d109      	bne.n	800b94e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b93a:	4a2a      	ldr	r2, [pc, #168]	; (800b9e4 <prvAddNewTaskToReadyList+0xc8>)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b940:	4b27      	ldr	r3, [pc, #156]	; (800b9e0 <prvAddNewTaskToReadyList+0xc4>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d110      	bne.n	800b96a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b948:	f000 fc08 	bl	800c15c <prvInitialiseTaskLists>
 800b94c:	e00d      	b.n	800b96a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b94e:	4b26      	ldr	r3, [pc, #152]	; (800b9e8 <prvAddNewTaskToReadyList+0xcc>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b956:	4b23      	ldr	r3, [pc, #140]	; (800b9e4 <prvAddNewTaskToReadyList+0xc8>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	429a      	cmp	r2, r3
 800b962:	d802      	bhi.n	800b96a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b964:	4a1f      	ldr	r2, [pc, #124]	; (800b9e4 <prvAddNewTaskToReadyList+0xc8>)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b96a:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <prvAddNewTaskToReadyList+0xd0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3301      	adds	r3, #1
 800b970:	4a1e      	ldr	r2, [pc, #120]	; (800b9ec <prvAddNewTaskToReadyList+0xd0>)
 800b972:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b974:	4b1d      	ldr	r3, [pc, #116]	; (800b9ec <prvAddNewTaskToReadyList+0xd0>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	4b1b      	ldr	r3, [pc, #108]	; (800b9f0 <prvAddNewTaskToReadyList+0xd4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	429a      	cmp	r2, r3
 800b986:	d903      	bls.n	800b990 <prvAddNewTaskToReadyList+0x74>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	4a18      	ldr	r2, [pc, #96]	; (800b9f0 <prvAddNewTaskToReadyList+0xd4>)
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <prvAddNewTaskToReadyList+0xd8>)
 800b99e:	441a      	add	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	f7fe fd75 	bl	800a496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9ac:	f7fe ff4c 	bl	800a848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9b0:	4b0d      	ldr	r3, [pc, #52]	; (800b9e8 <prvAddNewTaskToReadyList+0xcc>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00e      	beq.n	800b9d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <prvAddNewTaskToReadyList+0xc8>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d207      	bcs.n	800b9d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9c6:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <prvAddNewTaskToReadyList+0xdc>)
 800b9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20005bbc 	.word	0x20005bbc
 800b9e4:	200056e8 	.word	0x200056e8
 800b9e8:	20005bc8 	.word	0x20005bc8
 800b9ec:	20005bd8 	.word	0x20005bd8
 800b9f0:	20005bc4 	.word	0x20005bc4
 800b9f4:	200056ec 	.word	0x200056ec
 800b9f8:	e000ed04 	.word	0xe000ed04

0800b9fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d016      	beq.n	800ba3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba0e:	4b13      	ldr	r3, [pc, #76]	; (800ba5c <vTaskDelay+0x60>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <vTaskDelay+0x2e>
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	f383 8811 	msr	BASEPRI, r3
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	60bb      	str	r3, [r7, #8]
 800ba28:	e7fe      	b.n	800ba28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ba2a:	f000 f87f 	bl	800bb2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fcd7 	bl	800c3e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba36:	f000 f887 	bl	800bb48 <xTaskResumeAll>
 800ba3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d107      	bne.n	800ba52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ba42:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <vTaskDelay+0x64>)
 800ba44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20005be4 	.word	0x20005be4
 800ba60:	e000ed04 	.word	0xe000ed04

0800ba64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08a      	sub	sp, #40	; 0x28
 800ba68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba72:	463a      	mov	r2, r7
 800ba74:	1d39      	adds	r1, r7, #4
 800ba76:	f107 0308 	add.w	r3, r7, #8
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe fad4 	bl	800a028 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	9202      	str	r2, [sp, #8]
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	460a      	mov	r2, r1
 800ba92:	4920      	ldr	r1, [pc, #128]	; (800bb14 <vTaskStartScheduler+0xb0>)
 800ba94:	4820      	ldr	r0, [pc, #128]	; (800bb18 <vTaskStartScheduler+0xb4>)
 800ba96:	f7ff fe13 	bl	800b6c0 <xTaskCreateStatic>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	4b1f      	ldr	r3, [pc, #124]	; (800bb1c <vTaskStartScheduler+0xb8>)
 800ba9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800baa0:	4b1e      	ldr	r3, [pc, #120]	; (800bb1c <vTaskStartScheduler+0xb8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800baa8:	2301      	movs	r3, #1
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	e001      	b.n	800bab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d102      	bne.n	800babe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bab8:	f000 fce8 	bl	800c48c <xTimerCreateTimerTask>
 800babc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d115      	bne.n	800baf0 <vTaskStartScheduler+0x8c>
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bad6:	4b12      	ldr	r3, [pc, #72]	; (800bb20 <vTaskStartScheduler+0xbc>)
 800bad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800badc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bade:	4b11      	ldr	r3, [pc, #68]	; (800bb24 <vTaskStartScheduler+0xc0>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bae4:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <vTaskStartScheduler+0xc4>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800baea:	f7fe fde1 	bl	800a6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800baee:	e00d      	b.n	800bb0c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baf6:	d109      	bne.n	800bb0c <vTaskStartScheduler+0xa8>
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	e7fe      	b.n	800bb0a <vTaskStartScheduler+0xa6>
}
 800bb0c:	bf00      	nop
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	0800e8c8 	.word	0x0800e8c8
 800bb18:	0800c12d 	.word	0x0800c12d
 800bb1c:	20005be0 	.word	0x20005be0
 800bb20:	20005bdc 	.word	0x20005bdc
 800bb24:	20005bc8 	.word	0x20005bc8
 800bb28:	20005bc0 	.word	0x20005bc0

0800bb2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bb30:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <vTaskSuspendAll+0x18>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	4a03      	ldr	r2, [pc, #12]	; (800bb44 <vTaskSuspendAll+0x18>)
 800bb38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bb3a:	bf00      	nop
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20005be4 	.word	0x20005be4

0800bb48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb56:	4b41      	ldr	r3, [pc, #260]	; (800bc5c <xTaskResumeAll+0x114>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d109      	bne.n	800bb72 <xTaskResumeAll+0x2a>
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	603b      	str	r3, [r7, #0]
 800bb70:	e7fe      	b.n	800bb70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb72:	f7fe fe3b 	bl	800a7ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <xTaskResumeAll+0x114>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	4a37      	ldr	r2, [pc, #220]	; (800bc5c <xTaskResumeAll+0x114>)
 800bb7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb80:	4b36      	ldr	r3, [pc, #216]	; (800bc5c <xTaskResumeAll+0x114>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d162      	bne.n	800bc4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb88:	4b35      	ldr	r3, [pc, #212]	; (800bc60 <xTaskResumeAll+0x118>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d05e      	beq.n	800bc4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb90:	e02f      	b.n	800bbf2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb92:	4b34      	ldr	r3, [pc, #208]	; (800bc64 <xTaskResumeAll+0x11c>)
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fcd6 	bl	800a550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe fcd1 	bl	800a550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	4b2d      	ldr	r3, [pc, #180]	; (800bc68 <xTaskResumeAll+0x120>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d903      	bls.n	800bbc2 <xTaskResumeAll+0x7a>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbe:	4a2a      	ldr	r2, [pc, #168]	; (800bc68 <xTaskResumeAll+0x120>)
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4a27      	ldr	r2, [pc, #156]	; (800bc6c <xTaskResumeAll+0x124>)
 800bbd0:	441a      	add	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4610      	mov	r0, r2
 800bbda:	f7fe fc5c 	bl	800a496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe2:	4b23      	ldr	r3, [pc, #140]	; (800bc70 <xTaskResumeAll+0x128>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d302      	bcc.n	800bbf2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bbec:	4b21      	ldr	r3, [pc, #132]	; (800bc74 <xTaskResumeAll+0x12c>)
 800bbee:	2201      	movs	r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbf2:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <xTaskResumeAll+0x11c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1cb      	bne.n	800bb92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc00:	f000 fb46 	bl	800c290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bc04:	4b1c      	ldr	r3, [pc, #112]	; (800bc78 <xTaskResumeAll+0x130>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d010      	beq.n	800bc32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc10:	f000 f846 	bl	800bca0 <xTaskIncrementTick>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bc1a:	4b16      	ldr	r3, [pc, #88]	; (800bc74 <xTaskResumeAll+0x12c>)
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1f1      	bne.n	800bc10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bc2c:	4b12      	ldr	r3, [pc, #72]	; (800bc78 <xTaskResumeAll+0x130>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc32:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <xTaskResumeAll+0x12c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d009      	beq.n	800bc4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <xTaskResumeAll+0x134>)
 800bc40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc4e:	f7fe fdfb 	bl	800a848 <vPortExitCritical>

	return xAlreadyYielded;
 800bc52:	68bb      	ldr	r3, [r7, #8]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	20005be4 	.word	0x20005be4
 800bc60:	20005bbc 	.word	0x20005bbc
 800bc64:	20005b7c 	.word	0x20005b7c
 800bc68:	20005bc4 	.word	0x20005bc4
 800bc6c:	200056ec 	.word	0x200056ec
 800bc70:	200056e8 	.word	0x200056e8
 800bc74:	20005bd0 	.word	0x20005bd0
 800bc78:	20005bcc 	.word	0x20005bcc
 800bc7c:	e000ed04 	.word	0xe000ed04

0800bc80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc86:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <xTaskGetTickCount+0x1c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc8c:	687b      	ldr	r3, [r7, #4]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	20005bc0 	.word	0x20005bc0

0800bca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcaa:	4b4e      	ldr	r3, [pc, #312]	; (800bde4 <xTaskIncrementTick+0x144>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 8088 	bne.w	800bdc4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bcb4:	4b4c      	ldr	r3, [pc, #304]	; (800bde8 <xTaskIncrementTick+0x148>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcbc:	4a4a      	ldr	r2, [pc, #296]	; (800bde8 <xTaskIncrementTick+0x148>)
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d11f      	bne.n	800bd08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcc8:	4b48      	ldr	r3, [pc, #288]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d009      	beq.n	800bce6 <xTaskIncrementTick+0x46>
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	e7fe      	b.n	800bce4 <xTaskIncrementTick+0x44>
 800bce6:	4b41      	ldr	r3, [pc, #260]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	4b40      	ldr	r3, [pc, #256]	; (800bdf0 <xTaskIncrementTick+0x150>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a3e      	ldr	r2, [pc, #248]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	4a3e      	ldr	r2, [pc, #248]	; (800bdf0 <xTaskIncrementTick+0x150>)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	4b3e      	ldr	r3, [pc, #248]	; (800bdf4 <xTaskIncrementTick+0x154>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	4a3c      	ldr	r2, [pc, #240]	; (800bdf4 <xTaskIncrementTick+0x154>)
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	f000 fac4 	bl	800c290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd08:	4b3b      	ldr	r3, [pc, #236]	; (800bdf8 <xTaskIncrementTick+0x158>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d349      	bcc.n	800bda6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd12:	4b36      	ldr	r3, [pc, #216]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d104      	bne.n	800bd26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd1c:	4b36      	ldr	r3, [pc, #216]	; (800bdf8 <xTaskIncrementTick+0x158>)
 800bd1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd22:	601a      	str	r2, [r3, #0]
					break;
 800bd24:	e03f      	b.n	800bda6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd26:	4b31      	ldr	r3, [pc, #196]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d203      	bcs.n	800bd46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd3e:	4a2e      	ldr	r2, [pc, #184]	; (800bdf8 <xTaskIncrementTick+0x158>)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd44:	e02f      	b.n	800bda6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe fc00 	bl	800a550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d004      	beq.n	800bd62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	3318      	adds	r3, #24
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe fbf7 	bl	800a550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd66:	4b25      	ldr	r3, [pc, #148]	; (800bdfc <xTaskIncrementTick+0x15c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d903      	bls.n	800bd76 <xTaskIncrementTick+0xd6>
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd72:	4a22      	ldr	r2, [pc, #136]	; (800bdfc <xTaskIncrementTick+0x15c>)
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4a1f      	ldr	r2, [pc, #124]	; (800be00 <xTaskIncrementTick+0x160>)
 800bd84:	441a      	add	r2, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7fe fb82 	bl	800a496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4b1b      	ldr	r3, [pc, #108]	; (800be04 <xTaskIncrementTick+0x164>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d3b8      	bcc.n	800bd12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bda4:	e7b5      	b.n	800bd12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bda6:	4b17      	ldr	r3, [pc, #92]	; (800be04 <xTaskIncrementTick+0x164>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdac:	4914      	ldr	r1, [pc, #80]	; (800be00 <xTaskIncrementTick+0x160>)
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d907      	bls.n	800bdce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	e004      	b.n	800bdce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bdc4:	4b10      	ldr	r3, [pc, #64]	; (800be08 <xTaskIncrementTick+0x168>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	4a0f      	ldr	r2, [pc, #60]	; (800be08 <xTaskIncrementTick+0x168>)
 800bdcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bdce:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <xTaskIncrementTick+0x16c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d001      	beq.n	800bdda <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bdda:	697b      	ldr	r3, [r7, #20]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20005be4 	.word	0x20005be4
 800bde8:	20005bc0 	.word	0x20005bc0
 800bdec:	20005b74 	.word	0x20005b74
 800bdf0:	20005b78 	.word	0x20005b78
 800bdf4:	20005bd4 	.word	0x20005bd4
 800bdf8:	20005bdc 	.word	0x20005bdc
 800bdfc:	20005bc4 	.word	0x20005bc4
 800be00:	200056ec 	.word	0x200056ec
 800be04:	200056e8 	.word	0x200056e8
 800be08:	20005bcc 	.word	0x20005bcc
 800be0c:	20005bd0 	.word	0x20005bd0

0800be10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be16:	4b27      	ldr	r3, [pc, #156]	; (800beb4 <vTaskSwitchContext+0xa4>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be1e:	4b26      	ldr	r3, [pc, #152]	; (800beb8 <vTaskSwitchContext+0xa8>)
 800be20:	2201      	movs	r2, #1
 800be22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be24:	e040      	b.n	800bea8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800be26:	4b24      	ldr	r3, [pc, #144]	; (800beb8 <vTaskSwitchContext+0xa8>)
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be2c:	4b23      	ldr	r3, [pc, #140]	; (800bebc <vTaskSwitchContext+0xac>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	e00f      	b.n	800be54 <vTaskSwitchContext+0x44>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d109      	bne.n	800be4e <vTaskSwitchContext+0x3e>
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	607b      	str	r3, [r7, #4]
 800be4c:	e7fe      	b.n	800be4c <vTaskSwitchContext+0x3c>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3b01      	subs	r3, #1
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	491a      	ldr	r1, [pc, #104]	; (800bec0 <vTaskSwitchContext+0xb0>)
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4613      	mov	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4413      	add	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	440b      	add	r3, r1
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0e5      	beq.n	800be34 <vTaskSwitchContext+0x24>
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4a13      	ldr	r2, [pc, #76]	; (800bec0 <vTaskSwitchContext+0xb0>)
 800be74:	4413      	add	r3, r2
 800be76:	60bb      	str	r3, [r7, #8]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	605a      	str	r2, [r3, #4]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	3308      	adds	r3, #8
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d104      	bne.n	800be98 <vTaskSwitchContext+0x88>
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	605a      	str	r2, [r3, #4]
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	4a09      	ldr	r2, [pc, #36]	; (800bec4 <vTaskSwitchContext+0xb4>)
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	4a06      	ldr	r2, [pc, #24]	; (800bebc <vTaskSwitchContext+0xac>)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6013      	str	r3, [r2, #0]
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	20005be4 	.word	0x20005be4
 800beb8:	20005bd0 	.word	0x20005bd0
 800bebc:	20005bc4 	.word	0x20005bc4
 800bec0:	200056ec 	.word	0x200056ec
 800bec4:	200056e8 	.word	0x200056e8

0800bec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d109      	bne.n	800beec <vTaskPlaceOnEventList+0x24>
 800bed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bedc:	f383 8811 	msr	BASEPRI, r3
 800bee0:	f3bf 8f6f 	isb	sy
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	e7fe      	b.n	800beea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beec:	4b07      	ldr	r3, [pc, #28]	; (800bf0c <vTaskPlaceOnEventList+0x44>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	3318      	adds	r3, #24
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7fe faf2 	bl	800a4de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800befa:	2101      	movs	r1, #1
 800befc:	6838      	ldr	r0, [r7, #0]
 800befe:	f000 fa71 	bl	800c3e4 <prvAddCurrentTaskToDelayedList>
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200056e8 	.word	0x200056e8

0800bf10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d109      	bne.n	800bf36 <vTaskPlaceOnEventListRestricted+0x26>
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	617b      	str	r3, [r7, #20]
 800bf34:	e7fe      	b.n	800bf34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf36:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <vTaskPlaceOnEventListRestricted+0x50>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3318      	adds	r3, #24
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7fe faa9 	bl	800a496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bf4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	68b8      	ldr	r0, [r7, #8]
 800bf54:	f000 fa46 	bl	800c3e4 <prvAddCurrentTaskToDelayedList>
	}
 800bf58:	bf00      	nop
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	200056e8 	.word	0x200056e8

0800bf64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d109      	bne.n	800bf8e <xTaskRemoveFromEventList+0x2a>
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e7fe      	b.n	800bf8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	3318      	adds	r3, #24
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fadc 	bl	800a550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf98:	4b1d      	ldr	r3, [pc, #116]	; (800c010 <xTaskRemoveFromEventList+0xac>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d11d      	bne.n	800bfdc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fad3 	bl	800a550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfae:	4b19      	ldr	r3, [pc, #100]	; (800c014 <xTaskRemoveFromEventList+0xb0>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d903      	bls.n	800bfbe <xTaskRemoveFromEventList+0x5a>
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	4a16      	ldr	r2, [pc, #88]	; (800c014 <xTaskRemoveFromEventList+0xb0>)
 800bfbc:	6013      	str	r3, [r2, #0]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4a13      	ldr	r2, [pc, #76]	; (800c018 <xTaskRemoveFromEventList+0xb4>)
 800bfcc:	441a      	add	r2, r3
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f7fe fa5e 	bl	800a496 <vListInsertEnd>
 800bfda:	e005      	b.n	800bfe8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	3318      	adds	r3, #24
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	480e      	ldr	r0, [pc, #56]	; (800c01c <xTaskRemoveFromEventList+0xb8>)
 800bfe4:	f7fe fa57 	bl	800a496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfec:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <xTaskRemoveFromEventList+0xbc>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d905      	bls.n	800c002 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bff6:	2301      	movs	r3, #1
 800bff8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bffa:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <xTaskRemoveFromEventList+0xc0>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	e001      	b.n	800c006 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c002:	2300      	movs	r3, #0
 800c004:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c006:	697b      	ldr	r3, [r7, #20]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	20005be4 	.word	0x20005be4
 800c014:	20005bc4 	.word	0x20005bc4
 800c018:	200056ec 	.word	0x200056ec
 800c01c:	20005b7c 	.word	0x20005b7c
 800c020:	200056e8 	.word	0x200056e8
 800c024:	20005bd0 	.word	0x20005bd0

0800c028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c030:	4b06      	ldr	r3, [pc, #24]	; (800c04c <vTaskInternalSetTimeOutState+0x24>)
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c038:	4b05      	ldr	r3, [pc, #20]	; (800c050 <vTaskInternalSetTimeOutState+0x28>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	605a      	str	r2, [r3, #4]
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	20005bd4 	.word	0x20005bd4
 800c050:	20005bc0 	.word	0x20005bc0

0800c054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d109      	bne.n	800c078 <xTaskCheckForTimeOut+0x24>
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	613b      	str	r3, [r7, #16]
 800c076:	e7fe      	b.n	800c076 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d109      	bne.n	800c092 <xTaskCheckForTimeOut+0x3e>
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e7fe      	b.n	800c090 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c092:	f7fe fbab 	bl	800a7ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c096:	4b1d      	ldr	r3, [pc, #116]	; (800c10c <xTaskCheckForTimeOut+0xb8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	69ba      	ldr	r2, [r7, #24]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ae:	d102      	bne.n	800c0b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	61fb      	str	r3, [r7, #28]
 800c0b4:	e023      	b.n	800c0fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <xTaskCheckForTimeOut+0xbc>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d007      	beq.n	800c0d2 <xTaskCheckForTimeOut+0x7e>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d302      	bcc.n	800c0d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	61fb      	str	r3, [r7, #28]
 800c0d0:	e015      	b.n	800c0fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d20b      	bcs.n	800c0f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	1ad2      	subs	r2, r2, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff ff9d 	bl	800c028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	e004      	b.n	800c0fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0fe:	f7fe fba3 	bl	800a848 <vPortExitCritical>

	return xReturn;
 800c102:	69fb      	ldr	r3, [r7, #28]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3720      	adds	r7, #32
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	20005bc0 	.word	0x20005bc0
 800c110:	20005bd4 	.word	0x20005bd4

0800c114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c118:	4b03      	ldr	r3, [pc, #12]	; (800c128 <vTaskMissedYield+0x14>)
 800c11a:	2201      	movs	r2, #1
 800c11c:	601a      	str	r2, [r3, #0]
}
 800c11e:	bf00      	nop
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	20005bd0 	.word	0x20005bd0

0800c12c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c134:	f000 f852 	bl	800c1dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <prvIdleTask+0x28>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d9f9      	bls.n	800c134 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c140:	4b05      	ldr	r3, [pc, #20]	; (800c158 <prvIdleTask+0x2c>)
 800c142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c150:	e7f0      	b.n	800c134 <prvIdleTask+0x8>
 800c152:	bf00      	nop
 800c154:	200056ec 	.word	0x200056ec
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c162:	2300      	movs	r3, #0
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	e00c      	b.n	800c182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4a12      	ldr	r2, [pc, #72]	; (800c1bc <prvInitialiseTaskLists+0x60>)
 800c174:	4413      	add	r3, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe f960 	bl	800a43c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3301      	adds	r3, #1
 800c180:	607b      	str	r3, [r7, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b37      	cmp	r3, #55	; 0x37
 800c186:	d9ef      	bls.n	800c168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c188:	480d      	ldr	r0, [pc, #52]	; (800c1c0 <prvInitialiseTaskLists+0x64>)
 800c18a:	f7fe f957 	bl	800a43c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c18e:	480d      	ldr	r0, [pc, #52]	; (800c1c4 <prvInitialiseTaskLists+0x68>)
 800c190:	f7fe f954 	bl	800a43c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c194:	480c      	ldr	r0, [pc, #48]	; (800c1c8 <prvInitialiseTaskLists+0x6c>)
 800c196:	f7fe f951 	bl	800a43c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c19a:	480c      	ldr	r0, [pc, #48]	; (800c1cc <prvInitialiseTaskLists+0x70>)
 800c19c:	f7fe f94e 	bl	800a43c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1a0:	480b      	ldr	r0, [pc, #44]	; (800c1d0 <prvInitialiseTaskLists+0x74>)
 800c1a2:	f7fe f94b 	bl	800a43c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1a6:	4b0b      	ldr	r3, [pc, #44]	; (800c1d4 <prvInitialiseTaskLists+0x78>)
 800c1a8:	4a05      	ldr	r2, [pc, #20]	; (800c1c0 <prvInitialiseTaskLists+0x64>)
 800c1aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <prvInitialiseTaskLists+0x7c>)
 800c1ae:	4a05      	ldr	r2, [pc, #20]	; (800c1c4 <prvInitialiseTaskLists+0x68>)
 800c1b0:	601a      	str	r2, [r3, #0]
}
 800c1b2:	bf00      	nop
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200056ec 	.word	0x200056ec
 800c1c0:	20005b4c 	.word	0x20005b4c
 800c1c4:	20005b60 	.word	0x20005b60
 800c1c8:	20005b7c 	.word	0x20005b7c
 800c1cc:	20005b90 	.word	0x20005b90
 800c1d0:	20005ba8 	.word	0x20005ba8
 800c1d4:	20005b74 	.word	0x20005b74
 800c1d8:	20005b78 	.word	0x20005b78

0800c1dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1e2:	e019      	b.n	800c218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1e4:	f7fe fb02 	bl	800a7ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <prvCheckTasksWaitingTermination+0x4c>)
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe f9ab 	bl	800a550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <prvCheckTasksWaitingTermination+0x50>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	4a0a      	ldr	r2, [pc, #40]	; (800c22c <prvCheckTasksWaitingTermination+0x50>)
 800c202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <prvCheckTasksWaitingTermination+0x54>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3b01      	subs	r3, #1
 800c20a:	4a09      	ldr	r2, [pc, #36]	; (800c230 <prvCheckTasksWaitingTermination+0x54>)
 800c20c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c20e:	f7fe fb1b 	bl	800a848 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f80e 	bl	800c234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <prvCheckTasksWaitingTermination+0x54>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e1      	bne.n	800c1e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20005b90 	.word	0x20005b90
 800c22c:	20005bbc 	.word	0x20005bbc
 800c230:	20005ba4 	.word	0x20005ba4

0800c234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c242:	2b00      	cmp	r3, #0
 800c244:	d108      	bne.n	800c258 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fd ffe2 	bl	800a214 <vPortFree>
				vPortFree( pxTCB );
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7fd ffdf 	bl	800a214 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c256:	e017      	b.n	800c288 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d103      	bne.n	800c26a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7fd ffd6 	bl	800a214 <vPortFree>
	}
 800c268:	e00e      	b.n	800c288 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c270:	2b02      	cmp	r3, #2
 800c272:	d009      	beq.n	800c288 <prvDeleteTCB+0x54>
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	60fb      	str	r3, [r7, #12]
 800c286:	e7fe      	b.n	800c286 <prvDeleteTCB+0x52>
	}
 800c288:	bf00      	nop
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c296:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <prvResetNextTaskUnblockTime+0x38>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d104      	bne.n	800c2aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2a0:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <prvResetNextTaskUnblockTime+0x3c>)
 800c2a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2a8:	e008      	b.n	800c2bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2aa:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <prvResetNextTaskUnblockTime+0x38>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	4a04      	ldr	r2, [pc, #16]	; (800c2cc <prvResetNextTaskUnblockTime+0x3c>)
 800c2ba:	6013      	str	r3, [r2, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	20005b74 	.word	0x20005b74
 800c2cc:	20005bdc 	.word	0x20005bdc

0800c2d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <xTaskGetSchedulerState+0x34>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d102      	bne.n	800c2e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	607b      	str	r3, [r7, #4]
 800c2e2:	e008      	b.n	800c2f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2e4:	4b08      	ldr	r3, [pc, #32]	; (800c308 <xTaskGetSchedulerState+0x38>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d102      	bne.n	800c2f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	607b      	str	r3, [r7, #4]
 800c2f0:	e001      	b.n	800c2f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2f6:	687b      	ldr	r3, [r7, #4]
	}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	20005bc8 	.word	0x20005bc8
 800c308:	20005be4 	.word	0x20005be4

0800c30c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d054      	beq.n	800c3cc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c322:	4b2d      	ldr	r3, [pc, #180]	; (800c3d8 <xTaskPriorityDisinherit+0xcc>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d009      	beq.n	800c340 <xTaskPriorityDisinherit+0x34>
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	60fb      	str	r3, [r7, #12]
 800c33e:	e7fe      	b.n	800c33e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <xTaskPriorityDisinherit+0x50>
 800c348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	e7fe      	b.n	800c35a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c360:	1e5a      	subs	r2, r3, #1
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c36e:	429a      	cmp	r2, r3
 800c370:	d02c      	beq.n	800c3cc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c376:	2b00      	cmp	r3, #0
 800c378:	d128      	bne.n	800c3cc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe f8e6 	bl	800a550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39c:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <xTaskPriorityDisinherit+0xd0>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d903      	bls.n	800c3ac <xTaskPriorityDisinherit+0xa0>
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a8:	4a0c      	ldr	r2, [pc, #48]	; (800c3dc <xTaskPriorityDisinherit+0xd0>)
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4a09      	ldr	r2, [pc, #36]	; (800c3e0 <xTaskPriorityDisinherit+0xd4>)
 800c3ba:	441a      	add	r2, r3
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	f7fe f867 	bl	800a496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3cc:	697b      	ldr	r3, [r7, #20]
	}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200056e8 	.word	0x200056e8
 800c3dc:	20005bc4 	.word	0x20005bc4
 800c3e0:	200056ec 	.word	0x200056ec

0800c3e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3ee:	4b21      	ldr	r3, [pc, #132]	; (800c474 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3f4:	4b20      	ldr	r3, [pc, #128]	; (800c478 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe f8a8 	bl	800a550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c406:	d10a      	bne.n	800c41e <prvAddCurrentTaskToDelayedList+0x3a>
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40e:	4b1a      	ldr	r3, [pc, #104]	; (800c478 <prvAddCurrentTaskToDelayedList+0x94>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3304      	adds	r3, #4
 800c414:	4619      	mov	r1, r3
 800c416:	4819      	ldr	r0, [pc, #100]	; (800c47c <prvAddCurrentTaskToDelayedList+0x98>)
 800c418:	f7fe f83d 	bl	800a496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c41c:	e026      	b.n	800c46c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4413      	add	r3, r2
 800c424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c426:	4b14      	ldr	r3, [pc, #80]	; (800c478 <prvAddCurrentTaskToDelayedList+0x94>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	429a      	cmp	r2, r3
 800c434:	d209      	bcs.n	800c44a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c436:	4b12      	ldr	r3, [pc, #72]	; (800c480 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <prvAddCurrentTaskToDelayedList+0x94>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3304      	adds	r3, #4
 800c440:	4619      	mov	r1, r3
 800c442:	4610      	mov	r0, r2
 800c444:	f7fe f84b 	bl	800a4de <vListInsert>
}
 800c448:	e010      	b.n	800c46c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c44a:	4b0e      	ldr	r3, [pc, #56]	; (800c484 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <prvAddCurrentTaskToDelayedList+0x94>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3304      	adds	r3, #4
 800c454:	4619      	mov	r1, r3
 800c456:	4610      	mov	r0, r2
 800c458:	f7fe f841 	bl	800a4de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c45c:	4b0a      	ldr	r3, [pc, #40]	; (800c488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	429a      	cmp	r2, r3
 800c464:	d202      	bcs.n	800c46c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c466:	4a08      	ldr	r2, [pc, #32]	; (800c488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	6013      	str	r3, [r2, #0]
}
 800c46c:	bf00      	nop
 800c46e:	3710      	adds	r7, #16
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20005bc0 	.word	0x20005bc0
 800c478:	200056e8 	.word	0x200056e8
 800c47c:	20005ba8 	.word	0x20005ba8
 800c480:	20005b78 	.word	0x20005b78
 800c484:	20005b74 	.word	0x20005b74
 800c488:	20005bdc 	.word	0x20005bdc

0800c48c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08a      	sub	sp, #40	; 0x28
 800c490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c492:	2300      	movs	r3, #0
 800c494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c496:	f000 faff 	bl	800ca98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c49a:	4b1c      	ldr	r3, [pc, #112]	; (800c50c <xTimerCreateTimerTask+0x80>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d021      	beq.n	800c4e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4aa:	1d3a      	adds	r2, r7, #4
 800c4ac:	f107 0108 	add.w	r1, r7, #8
 800c4b0:	f107 030c 	add.w	r3, r7, #12
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7fd fdd1 	bl	800a05c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4ba:	6879      	ldr	r1, [r7, #4]
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	9202      	str	r2, [sp, #8]
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	4910      	ldr	r1, [pc, #64]	; (800c510 <xTimerCreateTimerTask+0x84>)
 800c4ce:	4811      	ldr	r0, [pc, #68]	; (800c514 <xTimerCreateTimerTask+0x88>)
 800c4d0:	f7ff f8f6 	bl	800b6c0 <xTaskCreateStatic>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	4b10      	ldr	r3, [pc, #64]	; (800c518 <xTimerCreateTimerTask+0x8c>)
 800c4d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4da:	4b0f      	ldr	r3, [pc, #60]	; (800c518 <xTimerCreateTimerTask+0x8c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d109      	bne.n	800c500 <xTimerCreateTimerTask+0x74>
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	613b      	str	r3, [r7, #16]
 800c4fe:	e7fe      	b.n	800c4fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c500:	697b      	ldr	r3, [r7, #20]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3718      	adds	r7, #24
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	20005c18 	.word	0x20005c18
 800c510:	0800e8d0 	.word	0x0800e8d0
 800c514:	0800c64d 	.word	0x0800c64d
 800c518:	20005c1c 	.word	0x20005c1c

0800c51c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b08a      	sub	sp, #40	; 0x28
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
 800c528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d109      	bne.n	800c548 <xTimerGenericCommand+0x2c>
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	623b      	str	r3, [r7, #32]
 800c546:	e7fe      	b.n	800c546 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <xTimerGenericCommand+0x94>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d02a      	beq.n	800c5a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b05      	cmp	r3, #5
 800c560:	dc18      	bgt.n	800c594 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c562:	f7ff feb5 	bl	800c2d0 <xTaskGetSchedulerState>
 800c566:	4603      	mov	r3, r0
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d109      	bne.n	800c580 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c56c:	4b10      	ldr	r3, [pc, #64]	; (800c5b0 <xTimerGenericCommand+0x94>)
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	f107 0110 	add.w	r1, r7, #16
 800c574:	2300      	movs	r3, #0
 800c576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c578:	f7fe fbf6 	bl	800ad68 <xQueueGenericSend>
 800c57c:	6278      	str	r0, [r7, #36]	; 0x24
 800c57e:	e012      	b.n	800c5a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <xTimerGenericCommand+0x94>)
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	f107 0110 	add.w	r1, r7, #16
 800c588:	2300      	movs	r3, #0
 800c58a:	2200      	movs	r2, #0
 800c58c:	f7fe fbec 	bl	800ad68 <xQueueGenericSend>
 800c590:	6278      	str	r0, [r7, #36]	; 0x24
 800c592:	e008      	b.n	800c5a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <xTimerGenericCommand+0x94>)
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	f107 0110 	add.w	r1, r7, #16
 800c59c:	2300      	movs	r3, #0
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	f7fe fcdc 	bl	800af5c <xQueueGenericSendFromISR>
 800c5a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3728      	adds	r7, #40	; 0x28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20005c18 	.word	0x20005c18

0800c5b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5be:	4b22      	ldr	r3, [pc, #136]	; (800c648 <prvProcessExpiredTimer+0x94>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd ffbf 	bl	800a550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d021      	beq.n	800c624 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	699a      	ldr	r2, [r3, #24]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	18d1      	adds	r1, r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	6978      	ldr	r0, [r7, #20]
 800c5ee:	f000 f8d1 	bl	800c794 <prvInsertTimerInActiveList>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01e      	beq.n	800c636 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	2100      	movs	r1, #0
 800c602:	6978      	ldr	r0, [r7, #20]
 800c604:	f7ff ff8a 	bl	800c51c <xTimerGenericCommand>
 800c608:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d112      	bne.n	800c636 <prvProcessExpiredTimer+0x82>
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	e7fe      	b.n	800c622 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c62a:	f023 0301 	bic.w	r3, r3, #1
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	6978      	ldr	r0, [r7, #20]
 800c63c:	4798      	blx	r3
}
 800c63e:	bf00      	nop
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20005c10 	.word	0x20005c10

0800c64c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c654:	f107 0308 	add.w	r3, r7, #8
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 f857 	bl	800c70c <prvGetNextExpireTime>
 800c65e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4619      	mov	r1, r3
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f000 f803 	bl	800c670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c66a:	f000 f8d5 	bl	800c818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c66e:	e7f1      	b.n	800c654 <prvTimerTask+0x8>

0800c670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c67a:	f7ff fa57 	bl	800bb2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f866 	bl	800c754 <prvSampleTimeNow>
 800c688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d130      	bne.n	800c6f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <prvProcessTimerOrBlockTask+0x3c>
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d806      	bhi.n	800c6ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c69e:	f7ff fa53 	bl	800bb48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6a2:	68f9      	ldr	r1, [r7, #12]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff ff85 	bl	800c5b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6aa:	e024      	b.n	800c6f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d008      	beq.n	800c6c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c6b2:	4b13      	ldr	r3, [pc, #76]	; (800c700 <prvProcessTimerOrBlockTask+0x90>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <prvProcessTimerOrBlockTask+0x50>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e000      	b.n	800c6c2 <prvProcessTimerOrBlockTask+0x52>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6c4:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <prvProcessTimerOrBlockTask+0x94>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f7fe ffc1 	bl	800b658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6d6:	f7ff fa37 	bl	800bb48 <xTaskResumeAll>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10a      	bne.n	800c6f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6e0:	4b09      	ldr	r3, [pc, #36]	; (800c708 <prvProcessTimerOrBlockTask+0x98>)
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
}
 800c6f0:	e001      	b.n	800c6f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6f2:	f7ff fa29 	bl	800bb48 <xTaskResumeAll>
}
 800c6f6:	bf00      	nop
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20005c14 	.word	0x20005c14
 800c704:	20005c18 	.word	0x20005c18
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c714:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <prvGetNextExpireTime+0x44>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <prvGetNextExpireTime+0x16>
 800c71e:	2201      	movs	r2, #1
 800c720:	e000      	b.n	800c724 <prvGetNextExpireTime+0x18>
 800c722:	2200      	movs	r2, #0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d105      	bne.n	800c73c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c730:	4b07      	ldr	r3, [pc, #28]	; (800c750 <prvGetNextExpireTime+0x44>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e001      	b.n	800c740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c740:	68fb      	ldr	r3, [r7, #12]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	20005c10 	.word	0x20005c10

0800c754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c75c:	f7ff fa90 	bl	800bc80 <xTaskGetTickCount>
 800c760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c762:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <prvSampleTimeNow+0x3c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d205      	bcs.n	800c778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c76c:	f000 f930 	bl	800c9d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	e002      	b.n	800c77e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c77e:	4a04      	ldr	r2, [pc, #16]	; (800c790 <prvSampleTimeNow+0x3c>)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c784:	68fb      	ldr	r3, [r7, #12]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20005c20 	.word	0x20005c20

0800c794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d812      	bhi.n	800c7e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d302      	bcc.n	800c7ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e01b      	b.n	800c806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7ce:	4b10      	ldr	r3, [pc, #64]	; (800c810 <prvInsertTimerInActiveList+0x7c>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7fd fe80 	bl	800a4de <vListInsert>
 800c7de:	e012      	b.n	800c806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d206      	bcs.n	800c7f6 <prvInsertTimerInActiveList+0x62>
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d302      	bcc.n	800c7f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	e007      	b.n	800c806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7f6:	4b07      	ldr	r3, [pc, #28]	; (800c814 <prvInsertTimerInActiveList+0x80>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	4619      	mov	r1, r3
 800c800:	4610      	mov	r0, r2
 800c802:	f7fd fe6c 	bl	800a4de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c806:	697b      	ldr	r3, [r7, #20]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20005c14 	.word	0x20005c14
 800c814:	20005c10 	.word	0x20005c10

0800c818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08e      	sub	sp, #56	; 0x38
 800c81c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c81e:	e0c6      	b.n	800c9ae <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	da17      	bge.n	800c856 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c826:	1d3b      	adds	r3, r7, #4
 800c828:	3304      	adds	r3, #4
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d109      	bne.n	800c846 <prvProcessReceivedCommands+0x2e>
 800c832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	61fb      	str	r3, [r7, #28]
 800c844:	e7fe      	b.n	800c844 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84c:	6850      	ldr	r0, [r2, #4]
 800c84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c850:	6892      	ldr	r2, [r2, #8]
 800c852:	4611      	mov	r1, r2
 800c854:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f2c0 80a7 	blt.w	800c9ac <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	3304      	adds	r3, #4
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fd fe6e 	bl	800a550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c874:	463b      	mov	r3, r7
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff ff6c 	bl	800c754 <prvSampleTimeNow>
 800c87c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b09      	cmp	r3, #9
 800c882:	f200 8094 	bhi.w	800c9ae <prvProcessReceivedCommands+0x196>
 800c886:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <prvProcessReceivedCommands+0x74>)
 800c888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88c:	0800c8b5 	.word	0x0800c8b5
 800c890:	0800c8b5 	.word	0x0800c8b5
 800c894:	0800c8b5 	.word	0x0800c8b5
 800c898:	0800c927 	.word	0x0800c927
 800c89c:	0800c93b 	.word	0x0800c93b
 800c8a0:	0800c983 	.word	0x0800c983
 800c8a4:	0800c8b5 	.word	0x0800c8b5
 800c8a8:	0800c8b5 	.word	0x0800c8b5
 800c8ac:	0800c927 	.word	0x0800c927
 800c8b0:	0800c93b 	.word	0x0800c93b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ba:	f043 0301 	orr.w	r3, r3, #1
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	18d1      	adds	r1, r2, r3
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d4:	f7ff ff5e 	bl	800c794 <prvInsertTimerInActiveList>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d067      	beq.n	800c9ae <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ec:	f003 0304 	and.w	r3, r3, #4
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d05c      	beq.n	800c9ae <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	441a      	add	r2, r3
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	2300      	movs	r3, #0
 800c902:	2100      	movs	r1, #0
 800c904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c906:	f7ff fe09 	bl	800c51c <xTimerGenericCommand>
 800c90a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d14d      	bne.n	800c9ae <prvProcessReceivedCommands+0x196>
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	e7fe      	b.n	800c924 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c92c:	f023 0301 	bic.w	r3, r3, #1
 800c930:	b2da      	uxtb	r2, r3
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c938:	e039      	b.n	800c9ae <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c940:	f043 0301 	orr.w	r3, r3, #1
 800c944:	b2da      	uxtb	r2, r3
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d109      	bne.n	800c96e <prvProcessReceivedCommands+0x156>
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	617b      	str	r3, [r7, #20]
 800c96c:	e7fe      	b.n	800c96c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	699a      	ldr	r2, [r3, #24]
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	18d1      	adds	r1, r2, r3
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c97c:	f7ff ff0a 	bl	800c794 <prvInsertTimerInActiveList>
					break;
 800c980:	e015      	b.n	800c9ae <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c988:	f003 0302 	and.w	r3, r3, #2
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d103      	bne.n	800c998 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c992:	f7fd fc3f 	bl	800a214 <vPortFree>
 800c996:	e00a      	b.n	800c9ae <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c99e:	f023 0301 	bic.w	r3, r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c9aa:	e000      	b.n	800c9ae <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c9ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9ae:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <prvProcessReceivedCommands+0x1b4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	1d39      	adds	r1, r7, #4
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe fbee 	bl	800b198 <xQueueReceive>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f47f af2e 	bne.w	800c820 <prvProcessReceivedCommands+0x8>
	}
}
 800c9c4:	bf00      	nop
 800c9c6:	3730      	adds	r7, #48	; 0x30
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20005c18 	.word	0x20005c18

0800c9d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9d6:	e047      	b.n	800ca68 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9d8:	4b2d      	ldr	r3, [pc, #180]	; (800ca90 <prvSwitchTimerLists+0xc0>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e2:	4b2b      	ldr	r3, [pc, #172]	; (800ca90 <prvSwitchTimerLists+0xc0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fd fdad 	bl	800a550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6a1b      	ldr	r3, [r3, #32]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d02d      	beq.n	800ca68 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	4413      	add	r3, r2
 800ca14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d90e      	bls.n	800ca3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca2a:	4b19      	ldr	r3, [pc, #100]	; (800ca90 <prvSwitchTimerLists+0xc0>)
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3304      	adds	r3, #4
 800ca32:	4619      	mov	r1, r3
 800ca34:	4610      	mov	r0, r2
 800ca36:	f7fd fd52 	bl	800a4de <vListInsert>
 800ca3a:	e015      	b.n	800ca68 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	2300      	movs	r3, #0
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	2100      	movs	r1, #0
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f7ff fd68 	bl	800c51c <xTimerGenericCommand>
 800ca4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d109      	bne.n	800ca68 <prvSwitchTimerLists+0x98>
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	e7fe      	b.n	800ca66 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca68:	4b09      	ldr	r3, [pc, #36]	; (800ca90 <prvSwitchTimerLists+0xc0>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1b2      	bne.n	800c9d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca72:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <prvSwitchTimerLists+0xc0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <prvSwitchTimerLists+0xc4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a04      	ldr	r2, [pc, #16]	; (800ca90 <prvSwitchTimerLists+0xc0>)
 800ca7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca80:	4a04      	ldr	r2, [pc, #16]	; (800ca94 <prvSwitchTimerLists+0xc4>)
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	6013      	str	r3, [r2, #0]
}
 800ca86:	bf00      	nop
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20005c10 	.word	0x20005c10
 800ca94:	20005c14 	.word	0x20005c14

0800ca98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca9e:	f7fd fea5 	bl	800a7ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800caa2:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <prvCheckForValidListAndQueue+0x60>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d120      	bne.n	800caec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800caaa:	4814      	ldr	r0, [pc, #80]	; (800cafc <prvCheckForValidListAndQueue+0x64>)
 800caac:	f7fd fcc6 	bl	800a43c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cab0:	4813      	ldr	r0, [pc, #76]	; (800cb00 <prvCheckForValidListAndQueue+0x68>)
 800cab2:	f7fd fcc3 	bl	800a43c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cab6:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <prvCheckForValidListAndQueue+0x6c>)
 800cab8:	4a10      	ldr	r2, [pc, #64]	; (800cafc <prvCheckForValidListAndQueue+0x64>)
 800caba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cabc:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <prvCheckForValidListAndQueue+0x70>)
 800cabe:	4a10      	ldr	r2, [pc, #64]	; (800cb00 <prvCheckForValidListAndQueue+0x68>)
 800cac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cac2:	2300      	movs	r3, #0
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	4b11      	ldr	r3, [pc, #68]	; (800cb0c <prvCheckForValidListAndQueue+0x74>)
 800cac8:	4a11      	ldr	r2, [pc, #68]	; (800cb10 <prvCheckForValidListAndQueue+0x78>)
 800caca:	2110      	movs	r1, #16
 800cacc:	200a      	movs	r0, #10
 800cace:	f7fe f80f 	bl	800aaf0 <xQueueGenericCreateStatic>
 800cad2:	4602      	mov	r2, r0
 800cad4:	4b08      	ldr	r3, [pc, #32]	; (800caf8 <prvCheckForValidListAndQueue+0x60>)
 800cad6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cad8:	4b07      	ldr	r3, [pc, #28]	; (800caf8 <prvCheckForValidListAndQueue+0x60>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d005      	beq.n	800caec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cae0:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <prvCheckForValidListAndQueue+0x60>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	490b      	ldr	r1, [pc, #44]	; (800cb14 <prvCheckForValidListAndQueue+0x7c>)
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fd64 	bl	800b5b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800caec:	f7fd feac 	bl	800a848 <vPortExitCritical>
}
 800caf0:	bf00      	nop
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	20005c18 	.word	0x20005c18
 800cafc:	20005be8 	.word	0x20005be8
 800cb00:	20005bfc 	.word	0x20005bfc
 800cb04:	20005c10 	.word	0x20005c10
 800cb08:	20005c14 	.word	0x20005c14
 800cb0c:	20005cc4 	.word	0x20005cc4
 800cb10:	20005c24 	.word	0x20005c24
 800cb14:	0800e8d8 	.word	0x0800e8d8

0800cb18 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:





Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreNew(256, 1, nullptr);
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2101      	movs	r1, #1
 800cb32:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb36:	f7fd f981 	bl	8009e3c <osSemaphoreNew>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	605a      	str	r2, [r3, #4]
}
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4618      	mov	r0, r3
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d108      	bne.n	800cb6e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d103      	bne.n	800cb6e <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 800cb66:	4904      	ldr	r1, [pc, #16]	; (800cb78 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800cb68:	4804      	ldr	r0, [pc, #16]	; (800cb7c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800cb6a:	f7ff ffd5 	bl	800cb18 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 800cb6e:	bf00      	nop
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20006804 	.word	0x20006804
 800cb7c:	20005d14 	.word	0x20005d14

0800cb80 <_GLOBAL__sub_I_console>:
 800cb80:	b580      	push	{r7, lr}
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb88:	2001      	movs	r0, #1
 800cb8a:	f7ff ffdf 	bl	800cb4c <_Z41__static_initialization_and_destruction_0ii>
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZN14WatchdogThread4initEv>:
#include <string.h>
#include "iwdg.h"

#include "usart.h"

void WatchdogThread::init() {
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]

}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7f8 fbf1 	bl	8005398 <HAL_IWDG_Refresh>
	osDelay(100);
 800cbb6:	2064      	movs	r0, #100	; 0x64
 800cbb8:	f7fd f912 	bl	8009de0 <osDelay>
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority_t priority, uint32_t stackSize);
	~Thread() {};
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	4a04      	ldr	r2, [pc, #16]	; (800cbe0 <_ZN6ThreadD1Ev+0x1c>)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	0800e934 	.word	0x0800e934

0800cbe4 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4907      	ldr	r1, [pc, #28]	; (800cc10 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 f86c 	bl	800ccd0 <_ZN6ThreadC1EPKc>
 800cbf8:	4a06      	ldr	r2, [pc, #24]	; (800cc14 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	62da      	str	r2, [r3, #44]	; 0x2c
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4618      	mov	r0, r3
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	0800e8e0 	.word	0x0800e8e0
 800cc14:	0800e924 	.word	0x0800e924

0800cc18 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	4a05      	ldr	r2, [pc, #20]	; (800cc38 <_ZN14WatchdogThreadD1Ev+0x20>)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff ffcb 	bl	800cbc4 <_ZN6ThreadD1Ev>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4618      	mov	r0, r3
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	0800e924 	.word	0x0800e924

0800cc3c <__tcf_0>:
}
#endif

#ifdef CORE_CM7
void initCortexM7() {
	static WatchdogThread watchdog(&hiwdg1);
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	4801      	ldr	r0, [pc, #4]	; (800cc48 <__tcf_0+0xc>)
 800cc42:	f7ff ffe9 	bl	800cc18 <_ZN14WatchdogThreadD1Ev>
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20005e1c 	.word	0x20005e1c

0800cc4c <initCortexM7>:
void initCortexM7() {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg1);
 800cc50:	4b12      	ldr	r3, [pc, #72]	; (800cc9c <initCortexM7+0x50>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f3bf 8f5b 	dmb	ish
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bf0c      	ite	eq
 800cc62:	2301      	moveq	r3, #1
 800cc64:	2300      	movne	r3, #0
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d014      	beq.n	800cc96 <initCortexM7+0x4a>
 800cc6c:	480b      	ldr	r0, [pc, #44]	; (800cc9c <initCortexM7+0x50>)
 800cc6e:	f000 f877 	bl	800cd60 <__cxa_guard_acquire>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bf14      	ite	ne
 800cc78:	2301      	movne	r3, #1
 800cc7a:	2300      	moveq	r3, #0
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <initCortexM7+0x4a>
 800cc82:	4907      	ldr	r1, [pc, #28]	; (800cca0 <initCortexM7+0x54>)
 800cc84:	4807      	ldr	r0, [pc, #28]	; (800cca4 <initCortexM7+0x58>)
 800cc86:	f7ff ffad 	bl	800cbe4 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 800cc8a:	4804      	ldr	r0, [pc, #16]	; (800cc9c <initCortexM7+0x50>)
 800cc8c:	f000 f874 	bl	800cd78 <__cxa_guard_release>
 800cc90:	4805      	ldr	r0, [pc, #20]	; (800cca8 <initCortexM7+0x5c>)
 800cc92:	f000 f88f 	bl	800cdb4 <atexit>
}
 800cc96:	bf00      	nop
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20005e4c 	.word	0x20005e4c
 800cca0:	20005ff0 	.word	0x20005ff0
 800cca4:	20005e1c 	.word	0x20005e1c
 800cca8:	0800cc3d 	.word	0x0800cc3d

0800ccac <_Z10__task_runPv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(void* arg) {
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	60fb      	str	r3, [r7, #12]

	thread->init();
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	4798      	blx	r3

	while(true) {
		thread->loop();
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	4798      	blx	r3
 800ccce:	e7f8      	b.n	800ccc2 <_Z10__task_runPv+0x16>

0800ccd0 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
 800ccda:	2218      	movs	r2, #24
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f805 	bl	800ccee <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b084      	sub	sp, #16
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	60b9      	str	r1, [r7, #8]
 800ccf8:	607a      	str	r2, [r7, #4]
 800ccfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	68b9      	ldr	r1, [r7, #8]
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f000 f806 	bl	800cd14 <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
 800cd22:	4a0d      	ldr	r2, [pc, #52]	; (800cd58 <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	601a      	str	r2, [r3, #0]
	attributes.name = name;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	605a      	str	r2, [r3, #4]
	attributes.priority = priority;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	61da      	str	r2, [r3, #28]
	attributes.stack_size = stackSize;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	619a      	str	r2, [r3, #24]

	this->handle = osThreadNew(__task_run, this, &attributes);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	461a      	mov	r2, r3
 800cd40:	68f9      	ldr	r1, [r7, #12]
 800cd42:	4806      	ldr	r0, [pc, #24]	; (800cd5c <_ZN6ThreadC1EPKc12osPriority_tm+0x48>)
 800cd44:	f7fc ffa6 	bl	8009c94 <osThreadNew>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	0800e934 	.word	0x0800e934
 800cd5c:	0800ccad 	.word	0x0800ccad

0800cd60 <__cxa_guard_acquire>:
 800cd60:	6803      	ldr	r3, [r0, #0]
 800cd62:	07db      	lsls	r3, r3, #31
 800cd64:	d406      	bmi.n	800cd74 <__cxa_guard_acquire+0x14>
 800cd66:	7843      	ldrb	r3, [r0, #1]
 800cd68:	b103      	cbz	r3, 800cd6c <__cxa_guard_acquire+0xc>
 800cd6a:	deff      	udf	#255	; 0xff
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	7043      	strb	r3, [r0, #1]
 800cd70:	4618      	mov	r0, r3
 800cd72:	4770      	bx	lr
 800cd74:	2000      	movs	r0, #0
 800cd76:	4770      	bx	lr

0800cd78 <__cxa_guard_release>:
 800cd78:	2301      	movs	r3, #1
 800cd7a:	6003      	str	r3, [r0, #0]
 800cd7c:	4770      	bx	lr

0800cd7e <__cxa_pure_virtual>:
 800cd7e:	b508      	push	{r3, lr}
 800cd80:	f000 f80c 	bl	800cd9c <_ZSt9terminatev>

0800cd84 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cd84:	b508      	push	{r3, lr}
 800cd86:	4780      	blx	r0
 800cd88:	f000 f80d 	bl	800cda6 <abort>

0800cd8c <_ZSt13get_terminatev>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <_ZSt13get_terminatev+0xc>)
 800cd8e:	6818      	ldr	r0, [r3, #0]
 800cd90:	f3bf 8f5b 	dmb	ish
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	20000014 	.word	0x20000014

0800cd9c <_ZSt9terminatev>:
 800cd9c:	b508      	push	{r3, lr}
 800cd9e:	f7ff fff5 	bl	800cd8c <_ZSt13get_terminatev>
 800cda2:	f7ff ffef 	bl	800cd84 <_ZN10__cxxabiv111__terminateEPFvvE>

0800cda6 <abort>:
 800cda6:	b508      	push	{r3, lr}
 800cda8:	2006      	movs	r0, #6
 800cdaa:	f000 fba7 	bl	800d4fc <raise>
 800cdae:	2001      	movs	r0, #1
 800cdb0:	f7f5 f864 	bl	8001e7c <_exit>

0800cdb4 <atexit>:
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	461a      	mov	r2, r3
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 bbc8 	b.w	800d550 <__register_exitproc>

0800cdc0 <__errno>:
 800cdc0:	4b01      	ldr	r3, [pc, #4]	; (800cdc8 <__errno+0x8>)
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	20000018 	.word	0x20000018

0800cdcc <__libc_init_array>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	4e0d      	ldr	r6, [pc, #52]	; (800ce04 <__libc_init_array+0x38>)
 800cdd0:	4c0d      	ldr	r4, [pc, #52]	; (800ce08 <__libc_init_array+0x3c>)
 800cdd2:	1ba4      	subs	r4, r4, r6
 800cdd4:	10a4      	asrs	r4, r4, #2
 800cdd6:	2500      	movs	r5, #0
 800cdd8:	42a5      	cmp	r5, r4
 800cdda:	d109      	bne.n	800cdf0 <__libc_init_array+0x24>
 800cddc:	4e0b      	ldr	r6, [pc, #44]	; (800ce0c <__libc_init_array+0x40>)
 800cdde:	4c0c      	ldr	r4, [pc, #48]	; (800ce10 <__libc_init_array+0x44>)
 800cde0:	f001 fd5e 	bl	800e8a0 <_init>
 800cde4:	1ba4      	subs	r4, r4, r6
 800cde6:	10a4      	asrs	r4, r4, #2
 800cde8:	2500      	movs	r5, #0
 800cdea:	42a5      	cmp	r5, r4
 800cdec:	d105      	bne.n	800cdfa <__libc_init_array+0x2e>
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
 800cdf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cdf4:	4798      	blx	r3
 800cdf6:	3501      	adds	r5, #1
 800cdf8:	e7ee      	b.n	800cdd8 <__libc_init_array+0xc>
 800cdfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cdfe:	4798      	blx	r3
 800ce00:	3501      	adds	r5, #1
 800ce02:	e7f2      	b.n	800cdea <__libc_init_array+0x1e>
 800ce04:	0800ebcc 	.word	0x0800ebcc
 800ce08:	0800ebcc 	.word	0x0800ebcc
 800ce0c:	0800ebcc 	.word	0x0800ebcc
 800ce10:	0800ebd4 	.word	0x0800ebd4

0800ce14 <__ascii_mbtowc>:
 800ce14:	b082      	sub	sp, #8
 800ce16:	b901      	cbnz	r1, 800ce1a <__ascii_mbtowc+0x6>
 800ce18:	a901      	add	r1, sp, #4
 800ce1a:	b142      	cbz	r2, 800ce2e <__ascii_mbtowc+0x1a>
 800ce1c:	b14b      	cbz	r3, 800ce32 <__ascii_mbtowc+0x1e>
 800ce1e:	7813      	ldrb	r3, [r2, #0]
 800ce20:	600b      	str	r3, [r1, #0]
 800ce22:	7812      	ldrb	r2, [r2, #0]
 800ce24:	1c10      	adds	r0, r2, #0
 800ce26:	bf18      	it	ne
 800ce28:	2001      	movne	r0, #1
 800ce2a:	b002      	add	sp, #8
 800ce2c:	4770      	bx	lr
 800ce2e:	4610      	mov	r0, r2
 800ce30:	e7fb      	b.n	800ce2a <__ascii_mbtowc+0x16>
 800ce32:	f06f 0001 	mvn.w	r0, #1
 800ce36:	e7f8      	b.n	800ce2a <__ascii_mbtowc+0x16>

0800ce38 <memcpy>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	1e43      	subs	r3, r0, #1
 800ce3c:	440a      	add	r2, r1
 800ce3e:	4291      	cmp	r1, r2
 800ce40:	d100      	bne.n	800ce44 <memcpy+0xc>
 800ce42:	bd10      	pop	{r4, pc}
 800ce44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce4c:	e7f7      	b.n	800ce3e <memcpy+0x6>

0800ce4e <memset>:
 800ce4e:	4402      	add	r2, r0
 800ce50:	4603      	mov	r3, r0
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d100      	bne.n	800ce58 <memset+0xa>
 800ce56:	4770      	bx	lr
 800ce58:	f803 1b01 	strb.w	r1, [r3], #1
 800ce5c:	e7f9      	b.n	800ce52 <memset+0x4>

0800ce5e <__cvt>:
 800ce5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce60:	ed2d 8b02 	vpush	{d8}
 800ce64:	eeb0 8b40 	vmov.f64	d8, d0
 800ce68:	b085      	sub	sp, #20
 800ce6a:	4617      	mov	r7, r2
 800ce6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ce6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ce70:	ee18 2a90 	vmov	r2, s17
 800ce74:	f025 0520 	bic.w	r5, r5, #32
 800ce78:	2a00      	cmp	r2, #0
 800ce7a:	bfb6      	itet	lt
 800ce7c:	222d      	movlt	r2, #45	; 0x2d
 800ce7e:	2200      	movge	r2, #0
 800ce80:	eeb1 8b40 	vneglt.f64	d8, d0
 800ce84:	2d46      	cmp	r5, #70	; 0x46
 800ce86:	460c      	mov	r4, r1
 800ce88:	701a      	strb	r2, [r3, #0]
 800ce8a:	d004      	beq.n	800ce96 <__cvt+0x38>
 800ce8c:	2d45      	cmp	r5, #69	; 0x45
 800ce8e:	d100      	bne.n	800ce92 <__cvt+0x34>
 800ce90:	3401      	adds	r4, #1
 800ce92:	2102      	movs	r1, #2
 800ce94:	e000      	b.n	800ce98 <__cvt+0x3a>
 800ce96:	2103      	movs	r1, #3
 800ce98:	ab03      	add	r3, sp, #12
 800ce9a:	9301      	str	r3, [sp, #4]
 800ce9c:	ab02      	add	r3, sp, #8
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	4622      	mov	r2, r4
 800cea2:	4633      	mov	r3, r6
 800cea4:	eeb0 0b48 	vmov.f64	d0, d8
 800cea8:	f000 fc42 	bl	800d730 <_dtoa_r>
 800ceac:	2d47      	cmp	r5, #71	; 0x47
 800ceae:	d101      	bne.n	800ceb4 <__cvt+0x56>
 800ceb0:	07fb      	lsls	r3, r7, #31
 800ceb2:	d51e      	bpl.n	800cef2 <__cvt+0x94>
 800ceb4:	2d46      	cmp	r5, #70	; 0x46
 800ceb6:	eb00 0304 	add.w	r3, r0, r4
 800ceba:	d10c      	bne.n	800ced6 <__cvt+0x78>
 800cebc:	7802      	ldrb	r2, [r0, #0]
 800cebe:	2a30      	cmp	r2, #48	; 0x30
 800cec0:	d107      	bne.n	800ced2 <__cvt+0x74>
 800cec2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceca:	bf1c      	itt	ne
 800cecc:	f1c4 0401 	rsbne	r4, r4, #1
 800ced0:	6034      	strne	r4, [r6, #0]
 800ced2:	6832      	ldr	r2, [r6, #0]
 800ced4:	4413      	add	r3, r2
 800ced6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ceda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cede:	d007      	beq.n	800cef0 <__cvt+0x92>
 800cee0:	2130      	movs	r1, #48	; 0x30
 800cee2:	9a03      	ldr	r2, [sp, #12]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d204      	bcs.n	800cef2 <__cvt+0x94>
 800cee8:	1c54      	adds	r4, r2, #1
 800ceea:	9403      	str	r4, [sp, #12]
 800ceec:	7011      	strb	r1, [r2, #0]
 800ceee:	e7f8      	b.n	800cee2 <__cvt+0x84>
 800cef0:	9303      	str	r3, [sp, #12]
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cef6:	1a1b      	subs	r3, r3, r0
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	b005      	add	sp, #20
 800cefc:	ecbd 8b02 	vpop	{d8}
 800cf00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf02 <__exponent>:
 800cf02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf04:	2900      	cmp	r1, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	bfba      	itte	lt
 800cf0a:	4249      	neglt	r1, r1
 800cf0c:	232d      	movlt	r3, #45	; 0x2d
 800cf0e:	232b      	movge	r3, #43	; 0x2b
 800cf10:	2909      	cmp	r1, #9
 800cf12:	f804 2b02 	strb.w	r2, [r4], #2
 800cf16:	7043      	strb	r3, [r0, #1]
 800cf18:	dd20      	ble.n	800cf5c <__exponent+0x5a>
 800cf1a:	f10d 0307 	add.w	r3, sp, #7
 800cf1e:	461f      	mov	r7, r3
 800cf20:	260a      	movs	r6, #10
 800cf22:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf26:	fb06 1115 	mls	r1, r6, r5, r1
 800cf2a:	3130      	adds	r1, #48	; 0x30
 800cf2c:	2d09      	cmp	r5, #9
 800cf2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cf32:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800cf36:	4629      	mov	r1, r5
 800cf38:	dc09      	bgt.n	800cf4e <__exponent+0x4c>
 800cf3a:	3130      	adds	r1, #48	; 0x30
 800cf3c:	3b02      	subs	r3, #2
 800cf3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf42:	42bb      	cmp	r3, r7
 800cf44:	4622      	mov	r2, r4
 800cf46:	d304      	bcc.n	800cf52 <__exponent+0x50>
 800cf48:	1a10      	subs	r0, r2, r0
 800cf4a:	b003      	add	sp, #12
 800cf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4e:	4613      	mov	r3, r2
 800cf50:	e7e7      	b.n	800cf22 <__exponent+0x20>
 800cf52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf56:	f804 2b01 	strb.w	r2, [r4], #1
 800cf5a:	e7f2      	b.n	800cf42 <__exponent+0x40>
 800cf5c:	2330      	movs	r3, #48	; 0x30
 800cf5e:	4419      	add	r1, r3
 800cf60:	7083      	strb	r3, [r0, #2]
 800cf62:	1d02      	adds	r2, r0, #4
 800cf64:	70c1      	strb	r1, [r0, #3]
 800cf66:	e7ef      	b.n	800cf48 <__exponent+0x46>

0800cf68 <_printf_float>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	b08d      	sub	sp, #52	; 0x34
 800cf6e:	460c      	mov	r4, r1
 800cf70:	4616      	mov	r6, r2
 800cf72:	461f      	mov	r7, r3
 800cf74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cf78:	4605      	mov	r5, r0
 800cf7a:	f001 f925 	bl	800e1c8 <_localeconv_r>
 800cf7e:	f8d0 b000 	ldr.w	fp, [r0]
 800cf82:	4658      	mov	r0, fp
 800cf84:	f7f3 f9ac 	bl	80002e0 <strlen>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf90:	9005      	str	r0, [sp, #20]
 800cf92:	3307      	adds	r3, #7
 800cf94:	f023 0307 	bic.w	r3, r3, #7
 800cf98:	f103 0108 	add.w	r1, r3, #8
 800cf9c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cfa0:	6822      	ldr	r2, [r4, #0]
 800cfa2:	f8c8 1000 	str.w	r1, [r8]
 800cfa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfaa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cfae:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800d238 <_printf_float+0x2d0>
 800cfb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cfb6:	eeb0 6bc0 	vabs.f64	d6, d0
 800cfba:	eeb4 6b47 	vcmp.f64	d6, d7
 800cfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc2:	dd24      	ble.n	800d00e <_printf_float+0xa6>
 800cfc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	d502      	bpl.n	800cfd4 <_printf_float+0x6c>
 800cfce:	232d      	movs	r3, #45	; 0x2d
 800cfd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfd4:	499a      	ldr	r1, [pc, #616]	; (800d240 <_printf_float+0x2d8>)
 800cfd6:	4b9b      	ldr	r3, [pc, #620]	; (800d244 <_printf_float+0x2dc>)
 800cfd8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cfdc:	bf8c      	ite	hi
 800cfde:	4688      	movhi	r8, r1
 800cfe0:	4698      	movls	r8, r3
 800cfe2:	f022 0204 	bic.w	r2, r2, #4
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	6123      	str	r3, [r4, #16]
 800cfea:	6022      	str	r2, [r4, #0]
 800cfec:	f04f 0a00 	mov.w	sl, #0
 800cff0:	9700      	str	r7, [sp, #0]
 800cff2:	4633      	mov	r3, r6
 800cff4:	aa0b      	add	r2, sp, #44	; 0x2c
 800cff6:	4621      	mov	r1, r4
 800cff8:	4628      	mov	r0, r5
 800cffa:	f000 f9e1 	bl	800d3c0 <_printf_common>
 800cffe:	3001      	adds	r0, #1
 800d000:	f040 8089 	bne.w	800d116 <_printf_float+0x1ae>
 800d004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d008:	b00d      	add	sp, #52	; 0x34
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d016:	d702      	bvc.n	800d01e <_printf_float+0xb6>
 800d018:	498b      	ldr	r1, [pc, #556]	; (800d248 <_printf_float+0x2e0>)
 800d01a:	4b8c      	ldr	r3, [pc, #560]	; (800d24c <_printf_float+0x2e4>)
 800d01c:	e7dc      	b.n	800cfd8 <_printf_float+0x70>
 800d01e:	6861      	ldr	r1, [r4, #4]
 800d020:	1c4b      	adds	r3, r1, #1
 800d022:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d026:	ab0a      	add	r3, sp, #40	; 0x28
 800d028:	a809      	add	r0, sp, #36	; 0x24
 800d02a:	d13b      	bne.n	800d0a4 <_printf_float+0x13c>
 800d02c:	2106      	movs	r1, #6
 800d02e:	6061      	str	r1, [r4, #4]
 800d030:	f04f 0c00 	mov.w	ip, #0
 800d034:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d038:	e9cd 0900 	strd	r0, r9, [sp]
 800d03c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d040:	6022      	str	r2, [r4, #0]
 800d042:	6861      	ldr	r1, [r4, #4]
 800d044:	4628      	mov	r0, r5
 800d046:	f7ff ff0a 	bl	800ce5e <__cvt>
 800d04a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800d04e:	2b47      	cmp	r3, #71	; 0x47
 800d050:	4680      	mov	r8, r0
 800d052:	d109      	bne.n	800d068 <_printf_float+0x100>
 800d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d056:	1cd8      	adds	r0, r3, #3
 800d058:	db02      	blt.n	800d060 <_printf_float+0xf8>
 800d05a:	6862      	ldr	r2, [r4, #4]
 800d05c:	4293      	cmp	r3, r2
 800d05e:	dd47      	ble.n	800d0f0 <_printf_float+0x188>
 800d060:	f1a9 0902 	sub.w	r9, r9, #2
 800d064:	fa5f f989 	uxtb.w	r9, r9
 800d068:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d06e:	d824      	bhi.n	800d0ba <_printf_float+0x152>
 800d070:	3901      	subs	r1, #1
 800d072:	464a      	mov	r2, r9
 800d074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d078:	9109      	str	r1, [sp, #36]	; 0x24
 800d07a:	f7ff ff42 	bl	800cf02 <__exponent>
 800d07e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d080:	1813      	adds	r3, r2, r0
 800d082:	2a01      	cmp	r2, #1
 800d084:	4682      	mov	sl, r0
 800d086:	6123      	str	r3, [r4, #16]
 800d088:	dc02      	bgt.n	800d090 <_printf_float+0x128>
 800d08a:	6822      	ldr	r2, [r4, #0]
 800d08c:	07d1      	lsls	r1, r2, #31
 800d08e:	d501      	bpl.n	800d094 <_printf_float+0x12c>
 800d090:	3301      	adds	r3, #1
 800d092:	6123      	str	r3, [r4, #16]
 800d094:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d0a9      	beq.n	800cff0 <_printf_float+0x88>
 800d09c:	232d      	movs	r3, #45	; 0x2d
 800d09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a2:	e7a5      	b.n	800cff0 <_printf_float+0x88>
 800d0a4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800d0a8:	f000 8178 	beq.w	800d39c <_printf_float+0x434>
 800d0ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d0b0:	d1be      	bne.n	800d030 <_printf_float+0xc8>
 800d0b2:	2900      	cmp	r1, #0
 800d0b4:	d1bc      	bne.n	800d030 <_printf_float+0xc8>
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	e7b9      	b.n	800d02e <_printf_float+0xc6>
 800d0ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d0be:	d119      	bne.n	800d0f4 <_printf_float+0x18c>
 800d0c0:	2900      	cmp	r1, #0
 800d0c2:	6863      	ldr	r3, [r4, #4]
 800d0c4:	dd0c      	ble.n	800d0e0 <_printf_float+0x178>
 800d0c6:	6121      	str	r1, [r4, #16]
 800d0c8:	b913      	cbnz	r3, 800d0d0 <_printf_float+0x168>
 800d0ca:	6822      	ldr	r2, [r4, #0]
 800d0cc:	07d2      	lsls	r2, r2, #31
 800d0ce:	d502      	bpl.n	800d0d6 <_printf_float+0x16e>
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	440b      	add	r3, r1
 800d0d4:	6123      	str	r3, [r4, #16]
 800d0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d8:	65a3      	str	r3, [r4, #88]	; 0x58
 800d0da:	f04f 0a00 	mov.w	sl, #0
 800d0de:	e7d9      	b.n	800d094 <_printf_float+0x12c>
 800d0e0:	b913      	cbnz	r3, 800d0e8 <_printf_float+0x180>
 800d0e2:	6822      	ldr	r2, [r4, #0]
 800d0e4:	07d0      	lsls	r0, r2, #31
 800d0e6:	d501      	bpl.n	800d0ec <_printf_float+0x184>
 800d0e8:	3302      	adds	r3, #2
 800d0ea:	e7f3      	b.n	800d0d4 <_printf_float+0x16c>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e7f1      	b.n	800d0d4 <_printf_float+0x16c>
 800d0f0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d0f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	db05      	blt.n	800d108 <_printf_float+0x1a0>
 800d0fc:	6822      	ldr	r2, [r4, #0]
 800d0fe:	6123      	str	r3, [r4, #16]
 800d100:	07d1      	lsls	r1, r2, #31
 800d102:	d5e8      	bpl.n	800d0d6 <_printf_float+0x16e>
 800d104:	3301      	adds	r3, #1
 800d106:	e7e5      	b.n	800d0d4 <_printf_float+0x16c>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfd4      	ite	le
 800d10c:	f1c3 0302 	rsble	r3, r3, #2
 800d110:	2301      	movgt	r3, #1
 800d112:	4413      	add	r3, r2
 800d114:	e7de      	b.n	800d0d4 <_printf_float+0x16c>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	055a      	lsls	r2, r3, #21
 800d11a:	d407      	bmi.n	800d12c <_printf_float+0x1c4>
 800d11c:	6923      	ldr	r3, [r4, #16]
 800d11e:	4642      	mov	r2, r8
 800d120:	4631      	mov	r1, r6
 800d122:	4628      	mov	r0, r5
 800d124:	47b8      	blx	r7
 800d126:	3001      	adds	r0, #1
 800d128:	d12a      	bne.n	800d180 <_printf_float+0x218>
 800d12a:	e76b      	b.n	800d004 <_printf_float+0x9c>
 800d12c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d130:	f240 80de 	bls.w	800d2f0 <_printf_float+0x388>
 800d134:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d138:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d140:	d133      	bne.n	800d1aa <_printf_float+0x242>
 800d142:	2301      	movs	r3, #1
 800d144:	4a42      	ldr	r2, [pc, #264]	; (800d250 <_printf_float+0x2e8>)
 800d146:	4631      	mov	r1, r6
 800d148:	4628      	mov	r0, r5
 800d14a:	47b8      	blx	r7
 800d14c:	3001      	adds	r0, #1
 800d14e:	f43f af59 	beq.w	800d004 <_printf_float+0x9c>
 800d152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d156:	429a      	cmp	r2, r3
 800d158:	db02      	blt.n	800d160 <_printf_float+0x1f8>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	07d8      	lsls	r0, r3, #31
 800d15e:	d50f      	bpl.n	800d180 <_printf_float+0x218>
 800d160:	9b05      	ldr	r3, [sp, #20]
 800d162:	465a      	mov	r2, fp
 800d164:	4631      	mov	r1, r6
 800d166:	4628      	mov	r0, r5
 800d168:	47b8      	blx	r7
 800d16a:	3001      	adds	r0, #1
 800d16c:	f43f af4a 	beq.w	800d004 <_printf_float+0x9c>
 800d170:	f04f 0800 	mov.w	r8, #0
 800d174:	f104 091a 	add.w	r9, r4, #26
 800d178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d17a:	3b01      	subs	r3, #1
 800d17c:	4543      	cmp	r3, r8
 800d17e:	dc09      	bgt.n	800d194 <_printf_float+0x22c>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	079b      	lsls	r3, r3, #30
 800d184:	f100 8105 	bmi.w	800d392 <_printf_float+0x42a>
 800d188:	68e0      	ldr	r0, [r4, #12]
 800d18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d18c:	4298      	cmp	r0, r3
 800d18e:	bfb8      	it	lt
 800d190:	4618      	movlt	r0, r3
 800d192:	e739      	b.n	800d008 <_printf_float+0xa0>
 800d194:	2301      	movs	r3, #1
 800d196:	464a      	mov	r2, r9
 800d198:	4631      	mov	r1, r6
 800d19a:	4628      	mov	r0, r5
 800d19c:	47b8      	blx	r7
 800d19e:	3001      	adds	r0, #1
 800d1a0:	f43f af30 	beq.w	800d004 <_printf_float+0x9c>
 800d1a4:	f108 0801 	add.w	r8, r8, #1
 800d1a8:	e7e6      	b.n	800d178 <_printf_float+0x210>
 800d1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dc2b      	bgt.n	800d208 <_printf_float+0x2a0>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	4a27      	ldr	r2, [pc, #156]	; (800d250 <_printf_float+0x2e8>)
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	47b8      	blx	r7
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	f43f af22 	beq.w	800d004 <_printf_float+0x9c>
 800d1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c2:	b923      	cbnz	r3, 800d1ce <_printf_float+0x266>
 800d1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c6:	b913      	cbnz	r3, 800d1ce <_printf_float+0x266>
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	07d9      	lsls	r1, r3, #31
 800d1cc:	d5d8      	bpl.n	800d180 <_printf_float+0x218>
 800d1ce:	9b05      	ldr	r3, [sp, #20]
 800d1d0:	465a      	mov	r2, fp
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	47b8      	blx	r7
 800d1d8:	3001      	adds	r0, #1
 800d1da:	f43f af13 	beq.w	800d004 <_printf_float+0x9c>
 800d1de:	f04f 0900 	mov.w	r9, #0
 800d1e2:	f104 0a1a 	add.w	sl, r4, #26
 800d1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e8:	425b      	negs	r3, r3
 800d1ea:	454b      	cmp	r3, r9
 800d1ec:	dc01      	bgt.n	800d1f2 <_printf_float+0x28a>
 800d1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f0:	e795      	b.n	800d11e <_printf_float+0x1b6>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b8      	blx	r7
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	f43f af01 	beq.w	800d004 <_printf_float+0x9c>
 800d202:	f109 0901 	add.w	r9, r9, #1
 800d206:	e7ee      	b.n	800d1e6 <_printf_float+0x27e>
 800d208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d20a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d20c:	429a      	cmp	r2, r3
 800d20e:	bfa8      	it	ge
 800d210:	461a      	movge	r2, r3
 800d212:	2a00      	cmp	r2, #0
 800d214:	4691      	mov	r9, r2
 800d216:	dd07      	ble.n	800d228 <_printf_float+0x2c0>
 800d218:	4613      	mov	r3, r2
 800d21a:	4631      	mov	r1, r6
 800d21c:	4642      	mov	r2, r8
 800d21e:	4628      	mov	r0, r5
 800d220:	47b8      	blx	r7
 800d222:	3001      	adds	r0, #1
 800d224:	f43f aeee 	beq.w	800d004 <_printf_float+0x9c>
 800d228:	f104 031a 	add.w	r3, r4, #26
 800d22c:	f04f 0a00 	mov.w	sl, #0
 800d230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d234:	9307      	str	r3, [sp, #28]
 800d236:	e017      	b.n	800d268 <_printf_float+0x300>
 800d238:	ffffffff 	.word	0xffffffff
 800d23c:	7fefffff 	.word	0x7fefffff
 800d240:	0800e94a 	.word	0x0800e94a
 800d244:	0800e946 	.word	0x0800e946
 800d248:	0800e952 	.word	0x0800e952
 800d24c:	0800e94e 	.word	0x0800e94e
 800d250:	0800e956 	.word	0x0800e956
 800d254:	2301      	movs	r3, #1
 800d256:	9a07      	ldr	r2, [sp, #28]
 800d258:	4631      	mov	r1, r6
 800d25a:	4628      	mov	r0, r5
 800d25c:	47b8      	blx	r7
 800d25e:	3001      	adds	r0, #1
 800d260:	f43f aed0 	beq.w	800d004 <_printf_float+0x9c>
 800d264:	f10a 0a01 	add.w	sl, sl, #1
 800d268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d26a:	9306      	str	r3, [sp, #24]
 800d26c:	eba3 0309 	sub.w	r3, r3, r9
 800d270:	4553      	cmp	r3, sl
 800d272:	dcef      	bgt.n	800d254 <_printf_float+0x2ec>
 800d274:	9b06      	ldr	r3, [sp, #24]
 800d276:	4498      	add	r8, r3
 800d278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d27c:	429a      	cmp	r2, r3
 800d27e:	db15      	blt.n	800d2ac <_printf_float+0x344>
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	07da      	lsls	r2, r3, #31
 800d284:	d412      	bmi.n	800d2ac <_printf_float+0x344>
 800d286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d288:	9a06      	ldr	r2, [sp, #24]
 800d28a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d28c:	1a9a      	subs	r2, r3, r2
 800d28e:	eba3 0a01 	sub.w	sl, r3, r1
 800d292:	4592      	cmp	sl, r2
 800d294:	bfa8      	it	ge
 800d296:	4692      	movge	sl, r2
 800d298:	f1ba 0f00 	cmp.w	sl, #0
 800d29c:	dc0e      	bgt.n	800d2bc <_printf_float+0x354>
 800d29e:	f04f 0800 	mov.w	r8, #0
 800d2a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2a6:	f104 091a 	add.w	r9, r4, #26
 800d2aa:	e019      	b.n	800d2e0 <_printf_float+0x378>
 800d2ac:	9b05      	ldr	r3, [sp, #20]
 800d2ae:	465a      	mov	r2, fp
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	47b8      	blx	r7
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	d1e5      	bne.n	800d286 <_printf_float+0x31e>
 800d2ba:	e6a3      	b.n	800d004 <_printf_float+0x9c>
 800d2bc:	4653      	mov	r3, sl
 800d2be:	4642      	mov	r2, r8
 800d2c0:	4631      	mov	r1, r6
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	47b8      	blx	r7
 800d2c6:	3001      	adds	r0, #1
 800d2c8:	d1e9      	bne.n	800d29e <_printf_float+0x336>
 800d2ca:	e69b      	b.n	800d004 <_printf_float+0x9c>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	464a      	mov	r2, r9
 800d2d0:	4631      	mov	r1, r6
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	47b8      	blx	r7
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	f43f ae94 	beq.w	800d004 <_printf_float+0x9c>
 800d2dc:	f108 0801 	add.w	r8, r8, #1
 800d2e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2e4:	1a9b      	subs	r3, r3, r2
 800d2e6:	eba3 030a 	sub.w	r3, r3, sl
 800d2ea:	4543      	cmp	r3, r8
 800d2ec:	dcee      	bgt.n	800d2cc <_printf_float+0x364>
 800d2ee:	e747      	b.n	800d180 <_printf_float+0x218>
 800d2f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2f2:	2a01      	cmp	r2, #1
 800d2f4:	dc01      	bgt.n	800d2fa <_printf_float+0x392>
 800d2f6:	07db      	lsls	r3, r3, #31
 800d2f8:	d539      	bpl.n	800d36e <_printf_float+0x406>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	4642      	mov	r2, r8
 800d2fe:	4631      	mov	r1, r6
 800d300:	4628      	mov	r0, r5
 800d302:	47b8      	blx	r7
 800d304:	3001      	adds	r0, #1
 800d306:	f43f ae7d 	beq.w	800d004 <_printf_float+0x9c>
 800d30a:	9b05      	ldr	r3, [sp, #20]
 800d30c:	465a      	mov	r2, fp
 800d30e:	4631      	mov	r1, r6
 800d310:	4628      	mov	r0, r5
 800d312:	47b8      	blx	r7
 800d314:	3001      	adds	r0, #1
 800d316:	f108 0801 	add.w	r8, r8, #1
 800d31a:	f43f ae73 	beq.w	800d004 <_printf_float+0x9c>
 800d31e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d324:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d330:	d018      	beq.n	800d364 <_printf_float+0x3fc>
 800d332:	4642      	mov	r2, r8
 800d334:	4631      	mov	r1, r6
 800d336:	4628      	mov	r0, r5
 800d338:	47b8      	blx	r7
 800d33a:	3001      	adds	r0, #1
 800d33c:	d10e      	bne.n	800d35c <_printf_float+0x3f4>
 800d33e:	e661      	b.n	800d004 <_printf_float+0x9c>
 800d340:	2301      	movs	r3, #1
 800d342:	464a      	mov	r2, r9
 800d344:	4631      	mov	r1, r6
 800d346:	4628      	mov	r0, r5
 800d348:	47b8      	blx	r7
 800d34a:	3001      	adds	r0, #1
 800d34c:	f43f ae5a 	beq.w	800d004 <_printf_float+0x9c>
 800d350:	f108 0801 	add.w	r8, r8, #1
 800d354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d356:	3b01      	subs	r3, #1
 800d358:	4543      	cmp	r3, r8
 800d35a:	dcf1      	bgt.n	800d340 <_printf_float+0x3d8>
 800d35c:	4653      	mov	r3, sl
 800d35e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d362:	e6dd      	b.n	800d120 <_printf_float+0x1b8>
 800d364:	f04f 0800 	mov.w	r8, #0
 800d368:	f104 091a 	add.w	r9, r4, #26
 800d36c:	e7f2      	b.n	800d354 <_printf_float+0x3ec>
 800d36e:	2301      	movs	r3, #1
 800d370:	e7df      	b.n	800d332 <_printf_float+0x3ca>
 800d372:	2301      	movs	r3, #1
 800d374:	464a      	mov	r2, r9
 800d376:	4631      	mov	r1, r6
 800d378:	4628      	mov	r0, r5
 800d37a:	47b8      	blx	r7
 800d37c:	3001      	adds	r0, #1
 800d37e:	f43f ae41 	beq.w	800d004 <_printf_float+0x9c>
 800d382:	f108 0801 	add.w	r8, r8, #1
 800d386:	68e3      	ldr	r3, [r4, #12]
 800d388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	4543      	cmp	r3, r8
 800d38e:	dcf0      	bgt.n	800d372 <_printf_float+0x40a>
 800d390:	e6fa      	b.n	800d188 <_printf_float+0x220>
 800d392:	f04f 0800 	mov.w	r8, #0
 800d396:	f104 0919 	add.w	r9, r4, #25
 800d39a:	e7f4      	b.n	800d386 <_printf_float+0x41e>
 800d39c:	2900      	cmp	r1, #0
 800d39e:	f43f ae8a 	beq.w	800d0b6 <_printf_float+0x14e>
 800d3a2:	f04f 0c00 	mov.w	ip, #0
 800d3a6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d3aa:	e9cd 0900 	strd	r0, r9, [sp]
 800d3ae:	6022      	str	r2, [r4, #0]
 800d3b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f7ff fd52 	bl	800ce5e <__cvt>
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	e64a      	b.n	800d054 <_printf_float+0xec>
 800d3be:	bf00      	nop

0800d3c0 <_printf_common>:
 800d3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c4:	4691      	mov	r9, r2
 800d3c6:	461f      	mov	r7, r3
 800d3c8:	688a      	ldr	r2, [r1, #8]
 800d3ca:	690b      	ldr	r3, [r1, #16]
 800d3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	bfb8      	it	lt
 800d3d4:	4613      	movlt	r3, r2
 800d3d6:	f8c9 3000 	str.w	r3, [r9]
 800d3da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	b112      	cbz	r2, 800d3ea <_printf_common+0x2a>
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	f8c9 3000 	str.w	r3, [r9]
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	0699      	lsls	r1, r3, #26
 800d3ee:	bf42      	ittt	mi
 800d3f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d3f4:	3302      	addmi	r3, #2
 800d3f6:	f8c9 3000 	strmi.w	r3, [r9]
 800d3fa:	6825      	ldr	r5, [r4, #0]
 800d3fc:	f015 0506 	ands.w	r5, r5, #6
 800d400:	d107      	bne.n	800d412 <_printf_common+0x52>
 800d402:	f104 0a19 	add.w	sl, r4, #25
 800d406:	68e3      	ldr	r3, [r4, #12]
 800d408:	f8d9 2000 	ldr.w	r2, [r9]
 800d40c:	1a9b      	subs	r3, r3, r2
 800d40e:	42ab      	cmp	r3, r5
 800d410:	dc28      	bgt.n	800d464 <_printf_common+0xa4>
 800d412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	3300      	adds	r3, #0
 800d41a:	bf18      	it	ne
 800d41c:	2301      	movne	r3, #1
 800d41e:	0692      	lsls	r2, r2, #26
 800d420:	d42d      	bmi.n	800d47e <_printf_common+0xbe>
 800d422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d426:	4639      	mov	r1, r7
 800d428:	4630      	mov	r0, r6
 800d42a:	47c0      	blx	r8
 800d42c:	3001      	adds	r0, #1
 800d42e:	d020      	beq.n	800d472 <_printf_common+0xb2>
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	68e5      	ldr	r5, [r4, #12]
 800d434:	f8d9 2000 	ldr.w	r2, [r9]
 800d438:	f003 0306 	and.w	r3, r3, #6
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	bf08      	it	eq
 800d440:	1aad      	subeq	r5, r5, r2
 800d442:	68a3      	ldr	r3, [r4, #8]
 800d444:	6922      	ldr	r2, [r4, #16]
 800d446:	bf0c      	ite	eq
 800d448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d44c:	2500      	movne	r5, #0
 800d44e:	4293      	cmp	r3, r2
 800d450:	bfc4      	itt	gt
 800d452:	1a9b      	subgt	r3, r3, r2
 800d454:	18ed      	addgt	r5, r5, r3
 800d456:	f04f 0900 	mov.w	r9, #0
 800d45a:	341a      	adds	r4, #26
 800d45c:	454d      	cmp	r5, r9
 800d45e:	d11a      	bne.n	800d496 <_printf_common+0xd6>
 800d460:	2000      	movs	r0, #0
 800d462:	e008      	b.n	800d476 <_printf_common+0xb6>
 800d464:	2301      	movs	r3, #1
 800d466:	4652      	mov	r2, sl
 800d468:	4639      	mov	r1, r7
 800d46a:	4630      	mov	r0, r6
 800d46c:	47c0      	blx	r8
 800d46e:	3001      	adds	r0, #1
 800d470:	d103      	bne.n	800d47a <_printf_common+0xba>
 800d472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47a:	3501      	adds	r5, #1
 800d47c:	e7c3      	b.n	800d406 <_printf_common+0x46>
 800d47e:	18e1      	adds	r1, r4, r3
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	2030      	movs	r0, #48	; 0x30
 800d484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d488:	4422      	add	r2, r4
 800d48a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d48e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d492:	3302      	adds	r3, #2
 800d494:	e7c5      	b.n	800d422 <_printf_common+0x62>
 800d496:	2301      	movs	r3, #1
 800d498:	4622      	mov	r2, r4
 800d49a:	4639      	mov	r1, r7
 800d49c:	4630      	mov	r0, r6
 800d49e:	47c0      	blx	r8
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d0e6      	beq.n	800d472 <_printf_common+0xb2>
 800d4a4:	f109 0901 	add.w	r9, r9, #1
 800d4a8:	e7d8      	b.n	800d45c <_printf_common+0x9c>

0800d4aa <_raise_r>:
 800d4aa:	291f      	cmp	r1, #31
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	460d      	mov	r5, r1
 800d4b2:	d904      	bls.n	800d4be <_raise_r+0x14>
 800d4b4:	2316      	movs	r3, #22
 800d4b6:	6003      	str	r3, [r0, #0]
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
 800d4be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4c0:	b112      	cbz	r2, 800d4c8 <_raise_r+0x1e>
 800d4c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4c6:	b94b      	cbnz	r3, 800d4dc <_raise_r+0x32>
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f000 f831 	bl	800d530 <_getpid_r>
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4601      	mov	r1, r0
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4d8:	f000 b818 	b.w	800d50c <_kill_r>
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d00a      	beq.n	800d4f6 <_raise_r+0x4c>
 800d4e0:	1c59      	adds	r1, r3, #1
 800d4e2:	d103      	bne.n	800d4ec <_raise_r+0x42>
 800d4e4:	2316      	movs	r3, #22
 800d4e6:	6003      	str	r3, [r0, #0]
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	e7e7      	b.n	800d4bc <_raise_r+0x12>
 800d4ec:	2400      	movs	r4, #0
 800d4ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	4798      	blx	r3
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	e7e0      	b.n	800d4bc <_raise_r+0x12>
	...

0800d4fc <raise>:
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <raise+0xc>)
 800d4fe:	4601      	mov	r1, r0
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f7ff bfd2 	b.w	800d4aa <_raise_r>
 800d506:	bf00      	nop
 800d508:	20000018 	.word	0x20000018

0800d50c <_kill_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4c07      	ldr	r4, [pc, #28]	; (800d52c <_kill_r+0x20>)
 800d510:	2300      	movs	r3, #0
 800d512:	4605      	mov	r5, r0
 800d514:	4608      	mov	r0, r1
 800d516:	4611      	mov	r1, r2
 800d518:	6023      	str	r3, [r4, #0]
 800d51a:	f7f4 fc9f 	bl	8001e5c <_kill>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	d102      	bne.n	800d528 <_kill_r+0x1c>
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	b103      	cbz	r3, 800d528 <_kill_r+0x1c>
 800d526:	602b      	str	r3, [r5, #0]
 800d528:	bd38      	pop	{r3, r4, r5, pc}
 800d52a:	bf00      	nop
 800d52c:	20006e60 	.word	0x20006e60

0800d530 <_getpid_r>:
 800d530:	f7f4 bc8c 	b.w	8001e4c <_getpid>

0800d534 <__ascii_wctomb>:
 800d534:	b149      	cbz	r1, 800d54a <__ascii_wctomb+0x16>
 800d536:	2aff      	cmp	r2, #255	; 0xff
 800d538:	bf85      	ittet	hi
 800d53a:	238a      	movhi	r3, #138	; 0x8a
 800d53c:	6003      	strhi	r3, [r0, #0]
 800d53e:	700a      	strbls	r2, [r1, #0]
 800d540:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d544:	bf98      	it	ls
 800d546:	2001      	movls	r0, #1
 800d548:	4770      	bx	lr
 800d54a:	4608      	mov	r0, r1
 800d54c:	4770      	bx	lr
	...

0800d550 <__register_exitproc>:
 800d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d554:	4d2c      	ldr	r5, [pc, #176]	; (800d608 <__register_exitproc+0xb8>)
 800d556:	682c      	ldr	r4, [r5, #0]
 800d558:	4607      	mov	r7, r0
 800d55a:	460e      	mov	r6, r1
 800d55c:	4691      	mov	r9, r2
 800d55e:	4698      	mov	r8, r3
 800d560:	b934      	cbnz	r4, 800d570 <__register_exitproc+0x20>
 800d562:	4b2a      	ldr	r3, [pc, #168]	; (800d60c <__register_exitproc+0xbc>)
 800d564:	4c2a      	ldr	r4, [pc, #168]	; (800d610 <__register_exitproc+0xc0>)
 800d566:	602c      	str	r4, [r5, #0]
 800d568:	b113      	cbz	r3, 800d570 <__register_exitproc+0x20>
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800d570:	6863      	ldr	r3, [r4, #4]
 800d572:	2b1f      	cmp	r3, #31
 800d574:	dd3d      	ble.n	800d5f2 <__register_exitproc+0xa2>
 800d576:	4b27      	ldr	r3, [pc, #156]	; (800d614 <__register_exitproc+0xc4>)
 800d578:	b91b      	cbnz	r3, 800d582 <__register_exitproc+0x32>
 800d57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d582:	208c      	movs	r0, #140	; 0x8c
 800d584:	f000 fe2e 	bl	800e1e4 <malloc>
 800d588:	4604      	mov	r4, r0
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d0f5      	beq.n	800d57a <__register_exitproc+0x2a>
 800d58e:	2300      	movs	r3, #0
 800d590:	682a      	ldr	r2, [r5, #0]
 800d592:	6002      	str	r2, [r0, #0]
 800d594:	6043      	str	r3, [r0, #4]
 800d596:	6028      	str	r0, [r5, #0]
 800d598:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800d59c:	b30f      	cbz	r7, 800d5e2 <__register_exitproc+0x92>
 800d59e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800d5a2:	f000 fe1f 	bl	800e1e4 <malloc>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d0e7      	beq.n	800d57a <__register_exitproc+0x2a>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800d5b0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800d5b4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800d5b8:	6862      	ldr	r2, [r4, #4]
 800d5ba:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	4093      	lsls	r3, r2
 800d5c2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800d5c6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	2f02      	cmp	r7, #2
 800d5ce:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800d5d2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800d5d6:	bf02      	ittt	eq
 800d5d8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800d5dc:	4313      	orreq	r3, r2
 800d5de:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800d5e2:	6863      	ldr	r3, [r4, #4]
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	3302      	adds	r3, #2
 800d5e8:	6062      	str	r2, [r4, #4]
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800d5f0:	e7c5      	b.n	800d57e <__register_exitproc+0x2e>
 800d5f2:	2f00      	cmp	r7, #0
 800d5f4:	d0f5      	beq.n	800d5e2 <__register_exitproc+0x92>
 800d5f6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d1dc      	bne.n	800d5b8 <__register_exitproc+0x68>
 800d5fe:	4b05      	ldr	r3, [pc, #20]	; (800d614 <__register_exitproc+0xc4>)
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0ba      	beq.n	800d57a <__register_exitproc+0x2a>
 800d604:	e7cb      	b.n	800d59e <__register_exitproc+0x4e>
 800d606:	bf00      	nop
 800d608:	20005edc 	.word	0x20005edc
 800d60c:	00000000 	.word	0x00000000
 800d610:	20005e50 	.word	0x20005e50
 800d614:	0800e1e5 	.word	0x0800e1e5

0800d618 <quorem>:
 800d618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	6903      	ldr	r3, [r0, #16]
 800d61e:	690c      	ldr	r4, [r1, #16]
 800d620:	42a3      	cmp	r3, r4
 800d622:	4680      	mov	r8, r0
 800d624:	f2c0 8082 	blt.w	800d72c <quorem+0x114>
 800d628:	3c01      	subs	r4, #1
 800d62a:	f101 0714 	add.w	r7, r1, #20
 800d62e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d632:	f100 0614 	add.w	r6, r0, #20
 800d636:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d63a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d63e:	eb06 030c 	add.w	r3, r6, ip
 800d642:	3501      	adds	r5, #1
 800d644:	eb07 090c 	add.w	r9, r7, ip
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	fbb0 f5f5 	udiv	r5, r0, r5
 800d64e:	b395      	cbz	r5, 800d6b6 <quorem+0x9e>
 800d650:	f04f 0a00 	mov.w	sl, #0
 800d654:	4638      	mov	r0, r7
 800d656:	46b6      	mov	lr, r6
 800d658:	46d3      	mov	fp, sl
 800d65a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d65e:	b293      	uxth	r3, r2
 800d660:	fb05 a303 	mla	r3, r5, r3, sl
 800d664:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d668:	b29b      	uxth	r3, r3
 800d66a:	ebab 0303 	sub.w	r3, fp, r3
 800d66e:	0c12      	lsrs	r2, r2, #16
 800d670:	f8de b000 	ldr.w	fp, [lr]
 800d674:	fb05 a202 	mla	r2, r5, r2, sl
 800d678:	fa13 f38b 	uxtah	r3, r3, fp
 800d67c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d680:	fa1f fb82 	uxth.w	fp, r2
 800d684:	f8de 2000 	ldr.w	r2, [lr]
 800d688:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d690:	b29b      	uxth	r3, r3
 800d692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d696:	4581      	cmp	r9, r0
 800d698:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d69c:	f84e 3b04 	str.w	r3, [lr], #4
 800d6a0:	d2db      	bcs.n	800d65a <quorem+0x42>
 800d6a2:	f856 300c 	ldr.w	r3, [r6, ip]
 800d6a6:	b933      	cbnz	r3, 800d6b6 <quorem+0x9e>
 800d6a8:	9b01      	ldr	r3, [sp, #4]
 800d6aa:	3b04      	subs	r3, #4
 800d6ac:	429e      	cmp	r6, r3
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	d330      	bcc.n	800d714 <quorem+0xfc>
 800d6b2:	f8c8 4010 	str.w	r4, [r8, #16]
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	f000 ffb2 	bl	800e620 <__mcmp>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	db25      	blt.n	800d70c <quorem+0xf4>
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f04f 0c00 	mov.w	ip, #0
 800d6c8:	f857 2b04 	ldr.w	r2, [r7], #4
 800d6cc:	f8d0 e000 	ldr.w	lr, [r0]
 800d6d0:	b293      	uxth	r3, r2
 800d6d2:	ebac 0303 	sub.w	r3, ip, r3
 800d6d6:	0c12      	lsrs	r2, r2, #16
 800d6d8:	fa13 f38e 	uxtah	r3, r3, lr
 800d6dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6ea:	45b9      	cmp	r9, r7
 800d6ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6f0:	f840 3b04 	str.w	r3, [r0], #4
 800d6f4:	d2e8      	bcs.n	800d6c8 <quorem+0xb0>
 800d6f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d6fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d6fe:	b92a      	cbnz	r2, 800d70c <quorem+0xf4>
 800d700:	3b04      	subs	r3, #4
 800d702:	429e      	cmp	r6, r3
 800d704:	461a      	mov	r2, r3
 800d706:	d30b      	bcc.n	800d720 <quorem+0x108>
 800d708:	f8c8 4010 	str.w	r4, [r8, #16]
 800d70c:	4628      	mov	r0, r5
 800d70e:	b003      	add	sp, #12
 800d710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	3b04      	subs	r3, #4
 800d718:	2a00      	cmp	r2, #0
 800d71a:	d1ca      	bne.n	800d6b2 <quorem+0x9a>
 800d71c:	3c01      	subs	r4, #1
 800d71e:	e7c5      	b.n	800d6ac <quorem+0x94>
 800d720:	6812      	ldr	r2, [r2, #0]
 800d722:	3b04      	subs	r3, #4
 800d724:	2a00      	cmp	r2, #0
 800d726:	d1ef      	bne.n	800d708 <quorem+0xf0>
 800d728:	3c01      	subs	r4, #1
 800d72a:	e7ea      	b.n	800d702 <quorem+0xea>
 800d72c:	2000      	movs	r0, #0
 800d72e:	e7ee      	b.n	800d70e <quorem+0xf6>

0800d730 <_dtoa_r>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	ec57 6b10 	vmov	r6, r7, d0
 800d738:	b095      	sub	sp, #84	; 0x54
 800d73a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d73c:	9108      	str	r1, [sp, #32]
 800d73e:	4604      	mov	r4, r0
 800d740:	920a      	str	r2, [sp, #40]	; 0x28
 800d742:	9311      	str	r3, [sp, #68]	; 0x44
 800d744:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d748:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d74c:	b93d      	cbnz	r5, 800d75e <_dtoa_r+0x2e>
 800d74e:	2010      	movs	r0, #16
 800d750:	f000 fd48 	bl	800e1e4 <malloc>
 800d754:	6260      	str	r0, [r4, #36]	; 0x24
 800d756:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d75a:	6005      	str	r5, [r0, #0]
 800d75c:	60c5      	str	r5, [r0, #12]
 800d75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	b151      	cbz	r1, 800d77a <_dtoa_r+0x4a>
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	604a      	str	r2, [r1, #4]
 800d768:	2301      	movs	r3, #1
 800d76a:	4093      	lsls	r3, r2
 800d76c:	608b      	str	r3, [r1, #8]
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 fd74 	bl	800e25c <_Bfree>
 800d774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d776:	2200      	movs	r2, #0
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	1e3b      	subs	r3, r7, #0
 800d77c:	bfb9      	ittee	lt
 800d77e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d782:	9303      	strlt	r3, [sp, #12]
 800d784:	2300      	movge	r3, #0
 800d786:	f8c8 3000 	strge.w	r3, [r8]
 800d78a:	9d03      	ldr	r5, [sp, #12]
 800d78c:	4bac      	ldr	r3, [pc, #688]	; (800da40 <_dtoa_r+0x310>)
 800d78e:	bfbc      	itt	lt
 800d790:	2201      	movlt	r2, #1
 800d792:	f8c8 2000 	strlt.w	r2, [r8]
 800d796:	43ab      	bics	r3, r5
 800d798:	d11b      	bne.n	800d7d2 <_dtoa_r+0xa2>
 800d79a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d79c:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	9b02      	ldr	r3, [sp, #8]
 800d7a4:	b923      	cbnz	r3, 800d7b0 <_dtoa_r+0x80>
 800d7a6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d7aa:	2d00      	cmp	r5, #0
 800d7ac:	f000 84dd 	beq.w	800e16a <_dtoa_r+0xa3a>
 800d7b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7b2:	b953      	cbnz	r3, 800d7ca <_dtoa_r+0x9a>
 800d7b4:	4ba3      	ldr	r3, [pc, #652]	; (800da44 <_dtoa_r+0x314>)
 800d7b6:	e020      	b.n	800d7fa <_dtoa_r+0xca>
 800d7b8:	4ba3      	ldr	r3, [pc, #652]	; (800da48 <_dtoa_r+0x318>)
 800d7ba:	9304      	str	r3, [sp, #16]
 800d7bc:	3308      	adds	r3, #8
 800d7be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d7c0:	6013      	str	r3, [r2, #0]
 800d7c2:	9804      	ldr	r0, [sp, #16]
 800d7c4:	b015      	add	sp, #84	; 0x54
 800d7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ca:	4b9e      	ldr	r3, [pc, #632]	; (800da44 <_dtoa_r+0x314>)
 800d7cc:	9304      	str	r3, [sp, #16]
 800d7ce:	3303      	adds	r3, #3
 800d7d0:	e7f5      	b.n	800d7be <_dtoa_r+0x8e>
 800d7d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7de:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d7e2:	d10c      	bne.n	800d7fe <_dtoa_r+0xce>
 800d7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 84b9 	beq.w	800e164 <_dtoa_r+0xa34>
 800d7f2:	4b96      	ldr	r3, [pc, #600]	; (800da4c <_dtoa_r+0x31c>)
 800d7f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	9304      	str	r3, [sp, #16]
 800d7fc:	e7e1      	b.n	800d7c2 <_dtoa_r+0x92>
 800d7fe:	a913      	add	r1, sp, #76	; 0x4c
 800d800:	aa12      	add	r2, sp, #72	; 0x48
 800d802:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d806:	4620      	mov	r0, r4
 800d808:	f000 ff81 	bl	800e70e <__d2b>
 800d80c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d810:	9001      	str	r0, [sp, #4]
 800d812:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d814:	2e00      	cmp	r6, #0
 800d816:	d046      	beq.n	800d8a6 <_dtoa_r+0x176>
 800d818:	9805      	ldr	r0, [sp, #20]
 800d81a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d822:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d826:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d82a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d82e:	2700      	movs	r7, #0
 800d830:	ee07 aa90 	vmov	s15, sl
 800d834:	ec43 2b16 	vmov	d6, r2, r3
 800d838:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d83c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800da28 <_dtoa_r+0x2f8>
 800d840:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d844:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d848:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800da30 <_dtoa_r+0x300>
 800d84c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d850:	eeb0 7b46 	vmov.f64	d7, d6
 800d854:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800da38 <_dtoa_r+0x308>
 800d858:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d85c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d860:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d868:	ee16 ba90 	vmov	fp, s13
 800d86c:	d508      	bpl.n	800d880 <_dtoa_r+0x150>
 800d86e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d872:	eeb4 6b47 	vcmp.f64	d6, d7
 800d876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87a:	bf18      	it	ne
 800d87c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800d880:	f1bb 0f16 	cmp.w	fp, #22
 800d884:	d834      	bhi.n	800d8f0 <_dtoa_r+0x1c0>
 800d886:	4b72      	ldr	r3, [pc, #456]	; (800da50 <_dtoa_r+0x320>)
 800d888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d88c:	ed93 7b00 	vldr	d7, [r3]
 800d890:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d894:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89c:	dd01      	ble.n	800d8a2 <_dtoa_r+0x172>
 800d89e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e025      	b.n	800d8f2 <_dtoa_r+0x1c2>
 800d8a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8a8:	eb01 0a03 	add.w	sl, r1, r3
 800d8ac:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d8b0:	2b20      	cmp	r3, #32
 800d8b2:	dd17      	ble.n	800d8e4 <_dtoa_r+0x1b4>
 800d8b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d8b8:	9a02      	ldr	r2, [sp, #8]
 800d8ba:	409d      	lsls	r5, r3
 800d8bc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d8c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d8c4:	432b      	orrs	r3, r5
 800d8c6:	ee07 3a90 	vmov	s15, r3
 800d8ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d8ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d8d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d8d6:	9805      	ldr	r0, [sp, #20]
 800d8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8dc:	2701      	movs	r7, #1
 800d8de:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d8e2:	e7a5      	b.n	800d830 <_dtoa_r+0x100>
 800d8e4:	9a02      	ldr	r2, [sp, #8]
 800d8e6:	f1c3 0320 	rsb	r3, r3, #32
 800d8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ee:	e7ea      	b.n	800d8c6 <_dtoa_r+0x196>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	eba1 0a0a 	sub.w	sl, r1, sl
 800d8f6:	9310      	str	r3, [sp, #64]	; 0x40
 800d8f8:	f1ba 0301 	subs.w	r3, sl, #1
 800d8fc:	9307      	str	r3, [sp, #28]
 800d8fe:	bf43      	ittte	mi
 800d900:	2300      	movmi	r3, #0
 800d902:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d906:	9307      	strmi	r3, [sp, #28]
 800d908:	f04f 0a00 	movpl.w	sl, #0
 800d90c:	f1bb 0f00 	cmp.w	fp, #0
 800d910:	db19      	blt.n	800d946 <_dtoa_r+0x216>
 800d912:	9b07      	ldr	r3, [sp, #28]
 800d914:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d918:	445b      	add	r3, fp
 800d91a:	9307      	str	r3, [sp, #28]
 800d91c:	f04f 0800 	mov.w	r8, #0
 800d920:	9b08      	ldr	r3, [sp, #32]
 800d922:	2b09      	cmp	r3, #9
 800d924:	d866      	bhi.n	800d9f4 <_dtoa_r+0x2c4>
 800d926:	2b05      	cmp	r3, #5
 800d928:	bfc4      	itt	gt
 800d92a:	3b04      	subgt	r3, #4
 800d92c:	9308      	strgt	r3, [sp, #32]
 800d92e:	9b08      	ldr	r3, [sp, #32]
 800d930:	f1a3 0302 	sub.w	r3, r3, #2
 800d934:	bfcc      	ite	gt
 800d936:	2500      	movgt	r5, #0
 800d938:	2501      	movle	r5, #1
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d866      	bhi.n	800da0c <_dtoa_r+0x2dc>
 800d93e:	e8df f003 	tbb	[pc, r3]
 800d942:	5755      	.short	0x5755
 800d944:	4909      	.short	0x4909
 800d946:	2300      	movs	r3, #0
 800d948:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d94c:	f1cb 0800 	rsb	r8, fp, #0
 800d950:	930b      	str	r3, [sp, #44]	; 0x2c
 800d952:	e7e5      	b.n	800d920 <_dtoa_r+0x1f0>
 800d954:	2301      	movs	r3, #1
 800d956:	9309      	str	r3, [sp, #36]	; 0x24
 800d958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	dd59      	ble.n	800da12 <_dtoa_r+0x2e2>
 800d95e:	9306      	str	r3, [sp, #24]
 800d960:	4699      	mov	r9, r3
 800d962:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d964:	2200      	movs	r2, #0
 800d966:	6072      	str	r2, [r6, #4]
 800d968:	2204      	movs	r2, #4
 800d96a:	f102 0014 	add.w	r0, r2, #20
 800d96e:	4298      	cmp	r0, r3
 800d970:	6871      	ldr	r1, [r6, #4]
 800d972:	d953      	bls.n	800da1c <_dtoa_r+0x2ec>
 800d974:	4620      	mov	r0, r4
 800d976:	f000 fc3d 	bl	800e1f4 <_Balloc>
 800d97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d97c:	6030      	str	r0, [r6, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	9304      	str	r3, [sp, #16]
 800d982:	f1b9 0f0e 	cmp.w	r9, #14
 800d986:	f200 80c2 	bhi.w	800db0e <_dtoa_r+0x3de>
 800d98a:	2d00      	cmp	r5, #0
 800d98c:	f000 80bf 	beq.w	800db0e <_dtoa_r+0x3de>
 800d990:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d994:	f1bb 0f00 	cmp.w	fp, #0
 800d998:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d99c:	f340 80e6 	ble.w	800db6c <_dtoa_r+0x43c>
 800d9a0:	4a2b      	ldr	r2, [pc, #172]	; (800da50 <_dtoa_r+0x320>)
 800d9a2:	f00b 030f 	and.w	r3, fp, #15
 800d9a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d9aa:	ed93 7b00 	vldr	d7, [r3]
 800d9ae:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d9b2:	06da      	lsls	r2, r3, #27
 800d9b4:	f140 80d8 	bpl.w	800db68 <_dtoa_r+0x438>
 800d9b8:	4a26      	ldr	r2, [pc, #152]	; (800da54 <_dtoa_r+0x324>)
 800d9ba:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d9be:	ed92 6b08 	vldr	d6, [r2, #32]
 800d9c2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d9c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d9ca:	f003 030f 	and.w	r3, r3, #15
 800d9ce:	2203      	movs	r2, #3
 800d9d0:	4920      	ldr	r1, [pc, #128]	; (800da54 <_dtoa_r+0x324>)
 800d9d2:	e04a      	b.n	800da6a <_dtoa_r+0x33a>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9da:	445b      	add	r3, fp
 800d9dc:	f103 0901 	add.w	r9, r3, #1
 800d9e0:	9306      	str	r3, [sp, #24]
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	bfb8      	it	lt
 800d9e8:	2301      	movlt	r3, #1
 800d9ea:	e7ba      	b.n	800d962 <_dtoa_r+0x232>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	e7b2      	b.n	800d956 <_dtoa_r+0x226>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	e7f0      	b.n	800d9d6 <_dtoa_r+0x2a6>
 800d9f4:	2501      	movs	r5, #1
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d9fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da00:	9306      	str	r3, [sp, #24]
 800da02:	4699      	mov	r9, r3
 800da04:	2200      	movs	r2, #0
 800da06:	2312      	movs	r3, #18
 800da08:	920a      	str	r2, [sp, #40]	; 0x28
 800da0a:	e7aa      	b.n	800d962 <_dtoa_r+0x232>
 800da0c:	2301      	movs	r3, #1
 800da0e:	9309      	str	r3, [sp, #36]	; 0x24
 800da10:	e7f4      	b.n	800d9fc <_dtoa_r+0x2cc>
 800da12:	2301      	movs	r3, #1
 800da14:	9306      	str	r3, [sp, #24]
 800da16:	4699      	mov	r9, r3
 800da18:	461a      	mov	r2, r3
 800da1a:	e7f5      	b.n	800da08 <_dtoa_r+0x2d8>
 800da1c:	3101      	adds	r1, #1
 800da1e:	6071      	str	r1, [r6, #4]
 800da20:	0052      	lsls	r2, r2, #1
 800da22:	e7a2      	b.n	800d96a <_dtoa_r+0x23a>
 800da24:	f3af 8000 	nop.w
 800da28:	636f4361 	.word	0x636f4361
 800da2c:	3fd287a7 	.word	0x3fd287a7
 800da30:	8b60c8b3 	.word	0x8b60c8b3
 800da34:	3fc68a28 	.word	0x3fc68a28
 800da38:	509f79fb 	.word	0x509f79fb
 800da3c:	3fd34413 	.word	0x3fd34413
 800da40:	7ff00000 	.word	0x7ff00000
 800da44:	0800ea62 	.word	0x0800ea62
 800da48:	0800ea59 	.word	0x0800ea59
 800da4c:	0800e957 	.word	0x0800e957
 800da50:	0800eaf0 	.word	0x0800eaf0
 800da54:	0800eac8 	.word	0x0800eac8
 800da58:	07de      	lsls	r6, r3, #31
 800da5a:	d504      	bpl.n	800da66 <_dtoa_r+0x336>
 800da5c:	ed91 6b00 	vldr	d6, [r1]
 800da60:	3201      	adds	r2, #1
 800da62:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da66:	105b      	asrs	r3, r3, #1
 800da68:	3108      	adds	r1, #8
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1f4      	bne.n	800da58 <_dtoa_r+0x328>
 800da6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800da72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800da76:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f000 80a7 	beq.w	800dbd0 <_dtoa_r+0x4a0>
 800da82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800da86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	f140 809d 	bpl.w	800dbd0 <_dtoa_r+0x4a0>
 800da96:	f1b9 0f00 	cmp.w	r9, #0
 800da9a:	f000 8099 	beq.w	800dbd0 <_dtoa_r+0x4a0>
 800da9e:	9b06      	ldr	r3, [sp, #24]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	dd30      	ble.n	800db06 <_dtoa_r+0x3d6>
 800daa4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800daa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800daac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dab0:	9d06      	ldr	r5, [sp, #24]
 800dab2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800dab6:	3201      	adds	r2, #1
 800dab8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dabc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dac0:	ee07 2a90 	vmov	s15, r2
 800dac4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dac8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dacc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dad0:	9a03      	ldr	r2, [sp, #12]
 800dad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dad6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800dada:	2d00      	cmp	r5, #0
 800dadc:	d17b      	bne.n	800dbd6 <_dtoa_r+0x4a6>
 800dade:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dae2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dae6:	ec41 0b17 	vmov	d7, r0, r1
 800daea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800daee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf2:	f300 8253 	bgt.w	800df9c <_dtoa_r+0x86c>
 800daf6:	eeb1 7b47 	vneg.f64	d7, d7
 800dafa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db02:	f100 8249 	bmi.w	800df98 <_dtoa_r+0x868>
 800db06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800db0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db10:	2b00      	cmp	r3, #0
 800db12:	f2c0 8119 	blt.w	800dd48 <_dtoa_r+0x618>
 800db16:	f1bb 0f0e 	cmp.w	fp, #14
 800db1a:	f300 8115 	bgt.w	800dd48 <_dtoa_r+0x618>
 800db1e:	4bc3      	ldr	r3, [pc, #780]	; (800de2c <_dtoa_r+0x6fc>)
 800db20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db24:	ed93 6b00 	vldr	d6, [r3]
 800db28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f280 80ba 	bge.w	800dca4 <_dtoa_r+0x574>
 800db30:	f1b9 0f00 	cmp.w	r9, #0
 800db34:	f300 80b6 	bgt.w	800dca4 <_dtoa_r+0x574>
 800db38:	f040 822d 	bne.w	800df96 <_dtoa_r+0x866>
 800db3c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800db40:	ee26 6b07 	vmul.f64	d6, d6, d7
 800db44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	464d      	mov	r5, r9
 800db52:	464f      	mov	r7, r9
 800db54:	f280 8204 	bge.w	800df60 <_dtoa_r+0x830>
 800db58:	9b04      	ldr	r3, [sp, #16]
 800db5a:	9a04      	ldr	r2, [sp, #16]
 800db5c:	1c5e      	adds	r6, r3, #1
 800db5e:	2331      	movs	r3, #49	; 0x31
 800db60:	7013      	strb	r3, [r2, #0]
 800db62:	f10b 0b01 	add.w	fp, fp, #1
 800db66:	e1ff      	b.n	800df68 <_dtoa_r+0x838>
 800db68:	2202      	movs	r2, #2
 800db6a:	e731      	b.n	800d9d0 <_dtoa_r+0x2a0>
 800db6c:	d02e      	beq.n	800dbcc <_dtoa_r+0x49c>
 800db6e:	f1cb 0300 	rsb	r3, fp, #0
 800db72:	4aae      	ldr	r2, [pc, #696]	; (800de2c <_dtoa_r+0x6fc>)
 800db74:	f003 010f 	and.w	r1, r3, #15
 800db78:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800db7c:	ed92 7b00 	vldr	d7, [r2]
 800db80:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800db84:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800db8c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800db90:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800db94:	49a6      	ldr	r1, [pc, #664]	; (800de30 <_dtoa_r+0x700>)
 800db96:	111b      	asrs	r3, r3, #4
 800db98:	2000      	movs	r0, #0
 800db9a:	2202      	movs	r2, #2
 800db9c:	b93b      	cbnz	r3, 800dbae <_dtoa_r+0x47e>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	f43f af6b 	beq.w	800da7a <_dtoa_r+0x34a>
 800dba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbac:	e765      	b.n	800da7a <_dtoa_r+0x34a>
 800dbae:	07dd      	lsls	r5, r3, #31
 800dbb0:	d509      	bpl.n	800dbc6 <_dtoa_r+0x496>
 800dbb2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800dbb6:	ed91 7b00 	vldr	d7, [r1]
 800dbba:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dbbe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	105b      	asrs	r3, r3, #1
 800dbc8:	3108      	adds	r1, #8
 800dbca:	e7e7      	b.n	800db9c <_dtoa_r+0x46c>
 800dbcc:	2202      	movs	r2, #2
 800dbce:	e754      	b.n	800da7a <_dtoa_r+0x34a>
 800dbd0:	465b      	mov	r3, fp
 800dbd2:	464d      	mov	r5, r9
 800dbd4:	e770      	b.n	800dab8 <_dtoa_r+0x388>
 800dbd6:	4a95      	ldr	r2, [pc, #596]	; (800de2c <_dtoa_r+0x6fc>)
 800dbd8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800dbdc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dbe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe2:	ec41 0b17 	vmov	d7, r0, r1
 800dbe6:	b35a      	cbz	r2, 800dc40 <_dtoa_r+0x510>
 800dbe8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dbec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dbf0:	9e04      	ldr	r6, [sp, #16]
 800dbf2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dbf6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dbfa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dbfe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc02:	ee14 2a90 	vmov	r2, s9
 800dc06:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc0a:	3230      	adds	r2, #48	; 0x30
 800dc0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc18:	f806 2b01 	strb.w	r2, [r6], #1
 800dc1c:	d43b      	bmi.n	800dc96 <_dtoa_r+0x566>
 800dc1e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dc22:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc2a:	d472      	bmi.n	800dd12 <_dtoa_r+0x5e2>
 800dc2c:	9a04      	ldr	r2, [sp, #16]
 800dc2e:	1ab2      	subs	r2, r6, r2
 800dc30:	4295      	cmp	r5, r2
 800dc32:	f77f af68 	ble.w	800db06 <_dtoa_r+0x3d6>
 800dc36:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dc3a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dc3e:	e7de      	b.n	800dbfe <_dtoa_r+0x4ce>
 800dc40:	9a04      	ldr	r2, [sp, #16]
 800dc42:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dc46:	1956      	adds	r6, r2, r5
 800dc48:	4611      	mov	r1, r2
 800dc4a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dc4e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc52:	ee14 2a90 	vmov	r2, s9
 800dc56:	3230      	adds	r2, #48	; 0x30
 800dc58:	f801 2b01 	strb.w	r2, [r1], #1
 800dc5c:	42b1      	cmp	r1, r6
 800dc5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc62:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc66:	d11a      	bne.n	800dc9e <_dtoa_r+0x56e>
 800dc68:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dc6c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dc70:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc78:	dc4b      	bgt.n	800dd12 <_dtoa_r+0x5e2>
 800dc7a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc86:	f57f af3e 	bpl.w	800db06 <_dtoa_r+0x3d6>
 800dc8a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc8e:	2a30      	cmp	r2, #48	; 0x30
 800dc90:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800dc94:	d001      	beq.n	800dc9a <_dtoa_r+0x56a>
 800dc96:	469b      	mov	fp, r3
 800dc98:	e02a      	b.n	800dcf0 <_dtoa_r+0x5c0>
 800dc9a:	460e      	mov	r6, r1
 800dc9c:	e7f5      	b.n	800dc8a <_dtoa_r+0x55a>
 800dc9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dca2:	e7d4      	b.n	800dc4e <_dtoa_r+0x51e>
 800dca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dca8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800dcac:	9e04      	ldr	r6, [sp, #16]
 800dcae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dcb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dcb6:	ee15 3a10 	vmov	r3, s10
 800dcba:	3330      	adds	r3, #48	; 0x30
 800dcbc:	f806 3b01 	strb.w	r3, [r6], #1
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	1af3      	subs	r3, r6, r3
 800dcc4:	4599      	cmp	r9, r3
 800dcc6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dcca:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dcce:	d133      	bne.n	800dd38 <_dtoa_r+0x608>
 800dcd0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dcd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcdc:	dc18      	bgt.n	800dd10 <_dtoa_r+0x5e0>
 800dcde:	eeb4 7b46 	vcmp.f64	d7, d6
 800dce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce6:	d103      	bne.n	800dcf0 <_dtoa_r+0x5c0>
 800dce8:	ee15 3a10 	vmov	r3, s10
 800dcec:	07db      	lsls	r3, r3, #31
 800dcee:	d40f      	bmi.n	800dd10 <_dtoa_r+0x5e0>
 800dcf0:	9901      	ldr	r1, [sp, #4]
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f000 fab2 	bl	800e25c <_Bfree>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dcfc:	7033      	strb	r3, [r6, #0]
 800dcfe:	f10b 0301 	add.w	r3, fp, #1
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f43f ad5b 	beq.w	800d7c2 <_dtoa_r+0x92>
 800dd0c:	601e      	str	r6, [r3, #0]
 800dd0e:	e558      	b.n	800d7c2 <_dtoa_r+0x92>
 800dd10:	465b      	mov	r3, fp
 800dd12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd16:	2939      	cmp	r1, #57	; 0x39
 800dd18:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800dd1c:	d106      	bne.n	800dd2c <_dtoa_r+0x5fc>
 800dd1e:	9904      	ldr	r1, [sp, #16]
 800dd20:	4291      	cmp	r1, r2
 800dd22:	d107      	bne.n	800dd34 <_dtoa_r+0x604>
 800dd24:	2230      	movs	r2, #48	; 0x30
 800dd26:	700a      	strb	r2, [r1, #0]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	460a      	mov	r2, r1
 800dd2c:	7811      	ldrb	r1, [r2, #0]
 800dd2e:	3101      	adds	r1, #1
 800dd30:	7011      	strb	r1, [r2, #0]
 800dd32:	e7b0      	b.n	800dc96 <_dtoa_r+0x566>
 800dd34:	4616      	mov	r6, r2
 800dd36:	e7ec      	b.n	800dd12 <_dtoa_r+0x5e2>
 800dd38:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dd3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd44:	d1b3      	bne.n	800dcae <_dtoa_r+0x57e>
 800dd46:	e7d3      	b.n	800dcf0 <_dtoa_r+0x5c0>
 800dd48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd4a:	2a00      	cmp	r2, #0
 800dd4c:	f000 808d 	beq.w	800de6a <_dtoa_r+0x73a>
 800dd50:	9a08      	ldr	r2, [sp, #32]
 800dd52:	2a01      	cmp	r2, #1
 800dd54:	dc72      	bgt.n	800de3c <_dtoa_r+0x70c>
 800dd56:	2f00      	cmp	r7, #0
 800dd58:	d06c      	beq.n	800de34 <_dtoa_r+0x704>
 800dd5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd5e:	4645      	mov	r5, r8
 800dd60:	4656      	mov	r6, sl
 800dd62:	9a07      	ldr	r2, [sp, #28]
 800dd64:	2101      	movs	r1, #1
 800dd66:	441a      	add	r2, r3
 800dd68:	4620      	mov	r0, r4
 800dd6a:	449a      	add	sl, r3
 800dd6c:	9207      	str	r2, [sp, #28]
 800dd6e:	f000 fb15 	bl	800e39c <__i2b>
 800dd72:	4607      	mov	r7, r0
 800dd74:	2e00      	cmp	r6, #0
 800dd76:	dd0b      	ble.n	800dd90 <_dtoa_r+0x660>
 800dd78:	9b07      	ldr	r3, [sp, #28]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dd08      	ble.n	800dd90 <_dtoa_r+0x660>
 800dd7e:	42b3      	cmp	r3, r6
 800dd80:	9a07      	ldr	r2, [sp, #28]
 800dd82:	bfa8      	it	ge
 800dd84:	4633      	movge	r3, r6
 800dd86:	ebaa 0a03 	sub.w	sl, sl, r3
 800dd8a:	1af6      	subs	r6, r6, r3
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	9307      	str	r3, [sp, #28]
 800dd90:	f1b8 0f00 	cmp.w	r8, #0
 800dd94:	d01d      	beq.n	800ddd2 <_dtoa_r+0x6a2>
 800dd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d06a      	beq.n	800de72 <_dtoa_r+0x742>
 800dd9c:	b18d      	cbz	r5, 800ddc2 <_dtoa_r+0x692>
 800dd9e:	4639      	mov	r1, r7
 800dda0:	462a      	mov	r2, r5
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 fb9a 	bl	800e4dc <__pow5mult>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	4601      	mov	r1, r0
 800ddac:	4607      	mov	r7, r0
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 fafd 	bl	800e3ae <__multiply>
 800ddb4:	9901      	ldr	r1, [sp, #4]
 800ddb6:	900c      	str	r0, [sp, #48]	; 0x30
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fa4f 	bl	800e25c <_Bfree>
 800ddbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	ebb8 0205 	subs.w	r2, r8, r5
 800ddc6:	d004      	beq.n	800ddd2 <_dtoa_r+0x6a2>
 800ddc8:	9901      	ldr	r1, [sp, #4]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fb86 	bl	800e4dc <__pow5mult>
 800ddd0:	9001      	str	r0, [sp, #4]
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 fae1 	bl	800e39c <__i2b>
 800ddda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dddc:	4605      	mov	r5, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 81ca 	beq.w	800e178 <_dtoa_r+0xa48>
 800dde4:	461a      	mov	r2, r3
 800dde6:	4601      	mov	r1, r0
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fb77 	bl	800e4dc <__pow5mult>
 800ddee:	9b08      	ldr	r3, [sp, #32]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	dc44      	bgt.n	800de80 <_dtoa_r+0x750>
 800ddf6:	9b02      	ldr	r3, [sp, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d13c      	bne.n	800de76 <_dtoa_r+0x746>
 800ddfc:	9b03      	ldr	r3, [sp, #12]
 800ddfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de02:	2b00      	cmp	r3, #0
 800de04:	d137      	bne.n	800de76 <_dtoa_r+0x746>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de0c:	0d1b      	lsrs	r3, r3, #20
 800de0e:	051b      	lsls	r3, r3, #20
 800de10:	2b00      	cmp	r3, #0
 800de12:	d033      	beq.n	800de7c <_dtoa_r+0x74c>
 800de14:	9b07      	ldr	r3, [sp, #28]
 800de16:	3301      	adds	r3, #1
 800de18:	f10a 0a01 	add.w	sl, sl, #1
 800de1c:	9307      	str	r3, [sp, #28]
 800de1e:	f04f 0801 	mov.w	r8, #1
 800de22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de24:	bb73      	cbnz	r3, 800de84 <_dtoa_r+0x754>
 800de26:	2001      	movs	r0, #1
 800de28:	e034      	b.n	800de94 <_dtoa_r+0x764>
 800de2a:	bf00      	nop
 800de2c:	0800eaf0 	.word	0x0800eaf0
 800de30:	0800eac8 	.word	0x0800eac8
 800de34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de3a:	e790      	b.n	800dd5e <_dtoa_r+0x62e>
 800de3c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800de40:	45a8      	cmp	r8, r5
 800de42:	bfbf      	itttt	lt
 800de44:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800de46:	eba5 0808 	sublt.w	r8, r5, r8
 800de4a:	4443      	addlt	r3, r8
 800de4c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800de4e:	bfb6      	itet	lt
 800de50:	46a8      	movlt	r8, r5
 800de52:	eba8 0505 	subge.w	r5, r8, r5
 800de56:	2500      	movlt	r5, #0
 800de58:	f1b9 0f00 	cmp.w	r9, #0
 800de5c:	bfb9      	ittee	lt
 800de5e:	ebaa 0609 	sublt.w	r6, sl, r9
 800de62:	2300      	movlt	r3, #0
 800de64:	4656      	movge	r6, sl
 800de66:	464b      	movge	r3, r9
 800de68:	e77b      	b.n	800dd62 <_dtoa_r+0x632>
 800de6a:	4645      	mov	r5, r8
 800de6c:	4656      	mov	r6, sl
 800de6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800de70:	e780      	b.n	800dd74 <_dtoa_r+0x644>
 800de72:	4642      	mov	r2, r8
 800de74:	e7a8      	b.n	800ddc8 <_dtoa_r+0x698>
 800de76:	f04f 0800 	mov.w	r8, #0
 800de7a:	e7d2      	b.n	800de22 <_dtoa_r+0x6f2>
 800de7c:	4698      	mov	r8, r3
 800de7e:	e7d0      	b.n	800de22 <_dtoa_r+0x6f2>
 800de80:	f04f 0800 	mov.w	r8, #0
 800de84:	692b      	ldr	r3, [r5, #16]
 800de86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800de8a:	6918      	ldr	r0, [r3, #16]
 800de8c:	f000 fa38 	bl	800e300 <__hi0bits>
 800de90:	f1c0 0020 	rsb	r0, r0, #32
 800de94:	9b07      	ldr	r3, [sp, #28]
 800de96:	4418      	add	r0, r3
 800de98:	f010 001f 	ands.w	r0, r0, #31
 800de9c:	d047      	beq.n	800df2e <_dtoa_r+0x7fe>
 800de9e:	f1c0 0320 	rsb	r3, r0, #32
 800dea2:	2b04      	cmp	r3, #4
 800dea4:	dd3b      	ble.n	800df1e <_dtoa_r+0x7ee>
 800dea6:	9b07      	ldr	r3, [sp, #28]
 800dea8:	f1c0 001c 	rsb	r0, r0, #28
 800deac:	4482      	add	sl, r0
 800deae:	4406      	add	r6, r0
 800deb0:	4403      	add	r3, r0
 800deb2:	9307      	str	r3, [sp, #28]
 800deb4:	f1ba 0f00 	cmp.w	sl, #0
 800deb8:	dd05      	ble.n	800dec6 <_dtoa_r+0x796>
 800deba:	4652      	mov	r2, sl
 800debc:	9901      	ldr	r1, [sp, #4]
 800debe:	4620      	mov	r0, r4
 800dec0:	f000 fb5a 	bl	800e578 <__lshift>
 800dec4:	9001      	str	r0, [sp, #4]
 800dec6:	9b07      	ldr	r3, [sp, #28]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	dd05      	ble.n	800ded8 <_dtoa_r+0x7a8>
 800decc:	4629      	mov	r1, r5
 800dece:	461a      	mov	r2, r3
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fb51 	bl	800e578 <__lshift>
 800ded6:	4605      	mov	r5, r0
 800ded8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deda:	b353      	cbz	r3, 800df32 <_dtoa_r+0x802>
 800dedc:	4629      	mov	r1, r5
 800dede:	9801      	ldr	r0, [sp, #4]
 800dee0:	f000 fb9e 	bl	800e620 <__mcmp>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	da24      	bge.n	800df32 <_dtoa_r+0x802>
 800dee8:	2300      	movs	r3, #0
 800deea:	220a      	movs	r2, #10
 800deec:	9901      	ldr	r1, [sp, #4]
 800deee:	4620      	mov	r0, r4
 800def0:	f000 f9cb 	bl	800e28a <__multadd>
 800def4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def6:	9001      	str	r0, [sp, #4]
 800def8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 8142 	beq.w	800e186 <_dtoa_r+0xa56>
 800df02:	2300      	movs	r3, #0
 800df04:	4639      	mov	r1, r7
 800df06:	220a      	movs	r2, #10
 800df08:	4620      	mov	r0, r4
 800df0a:	f000 f9be 	bl	800e28a <__multadd>
 800df0e:	9b06      	ldr	r3, [sp, #24]
 800df10:	2b00      	cmp	r3, #0
 800df12:	4607      	mov	r7, r0
 800df14:	dc4b      	bgt.n	800dfae <_dtoa_r+0x87e>
 800df16:	9b08      	ldr	r3, [sp, #32]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	dd48      	ble.n	800dfae <_dtoa_r+0x87e>
 800df1c:	e011      	b.n	800df42 <_dtoa_r+0x812>
 800df1e:	d0c9      	beq.n	800deb4 <_dtoa_r+0x784>
 800df20:	9a07      	ldr	r2, [sp, #28]
 800df22:	331c      	adds	r3, #28
 800df24:	441a      	add	r2, r3
 800df26:	449a      	add	sl, r3
 800df28:	441e      	add	r6, r3
 800df2a:	4613      	mov	r3, r2
 800df2c:	e7c1      	b.n	800deb2 <_dtoa_r+0x782>
 800df2e:	4603      	mov	r3, r0
 800df30:	e7f6      	b.n	800df20 <_dtoa_r+0x7f0>
 800df32:	f1b9 0f00 	cmp.w	r9, #0
 800df36:	dc34      	bgt.n	800dfa2 <_dtoa_r+0x872>
 800df38:	9b08      	ldr	r3, [sp, #32]
 800df3a:	2b02      	cmp	r3, #2
 800df3c:	dd31      	ble.n	800dfa2 <_dtoa_r+0x872>
 800df3e:	f8cd 9018 	str.w	r9, [sp, #24]
 800df42:	9b06      	ldr	r3, [sp, #24]
 800df44:	b963      	cbnz	r3, 800df60 <_dtoa_r+0x830>
 800df46:	4629      	mov	r1, r5
 800df48:	2205      	movs	r2, #5
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 f99d 	bl	800e28a <__multadd>
 800df50:	4601      	mov	r1, r0
 800df52:	4605      	mov	r5, r0
 800df54:	9801      	ldr	r0, [sp, #4]
 800df56:	f000 fb63 	bl	800e620 <__mcmp>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	f73f adfc 	bgt.w	800db58 <_dtoa_r+0x428>
 800df60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df62:	9e04      	ldr	r6, [sp, #16]
 800df64:	ea6f 0b03 	mvn.w	fp, r3
 800df68:	f04f 0900 	mov.w	r9, #0
 800df6c:	4629      	mov	r1, r5
 800df6e:	4620      	mov	r0, r4
 800df70:	f000 f974 	bl	800e25c <_Bfree>
 800df74:	2f00      	cmp	r7, #0
 800df76:	f43f aebb 	beq.w	800dcf0 <_dtoa_r+0x5c0>
 800df7a:	f1b9 0f00 	cmp.w	r9, #0
 800df7e:	d005      	beq.n	800df8c <_dtoa_r+0x85c>
 800df80:	45b9      	cmp	r9, r7
 800df82:	d003      	beq.n	800df8c <_dtoa_r+0x85c>
 800df84:	4649      	mov	r1, r9
 800df86:	4620      	mov	r0, r4
 800df88:	f000 f968 	bl	800e25c <_Bfree>
 800df8c:	4639      	mov	r1, r7
 800df8e:	4620      	mov	r0, r4
 800df90:	f000 f964 	bl	800e25c <_Bfree>
 800df94:	e6ac      	b.n	800dcf0 <_dtoa_r+0x5c0>
 800df96:	2500      	movs	r5, #0
 800df98:	462f      	mov	r7, r5
 800df9a:	e7e1      	b.n	800df60 <_dtoa_r+0x830>
 800df9c:	469b      	mov	fp, r3
 800df9e:	462f      	mov	r7, r5
 800dfa0:	e5da      	b.n	800db58 <_dtoa_r+0x428>
 800dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa4:	f8cd 9018 	str.w	r9, [sp, #24]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 80f3 	beq.w	800e194 <_dtoa_r+0xa64>
 800dfae:	2e00      	cmp	r6, #0
 800dfb0:	dd05      	ble.n	800dfbe <_dtoa_r+0x88e>
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	4632      	mov	r2, r6
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 fade 	bl	800e578 <__lshift>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	f1b8 0f00 	cmp.w	r8, #0
 800dfc2:	d04c      	beq.n	800e05e <_dtoa_r+0x92e>
 800dfc4:	6879      	ldr	r1, [r7, #4]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 f914 	bl	800e1f4 <_Balloc>
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	3202      	adds	r2, #2
 800dfd0:	4606      	mov	r6, r0
 800dfd2:	0092      	lsls	r2, r2, #2
 800dfd4:	f107 010c 	add.w	r1, r7, #12
 800dfd8:	300c      	adds	r0, #12
 800dfda:	f7fe ff2d 	bl	800ce38 <memcpy>
 800dfde:	2201      	movs	r2, #1
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fac8 	bl	800e578 <__lshift>
 800dfe8:	9b02      	ldr	r3, [sp, #8]
 800dfea:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dfee:	f003 0301 	and.w	r3, r3, #1
 800dff2:	46b9      	mov	r9, r7
 800dff4:	9307      	str	r3, [sp, #28]
 800dff6:	4607      	mov	r7, r0
 800dff8:	4629      	mov	r1, r5
 800dffa:	9801      	ldr	r0, [sp, #4]
 800dffc:	f7ff fb0c 	bl	800d618 <quorem>
 800e000:	4649      	mov	r1, r9
 800e002:	4606      	mov	r6, r0
 800e004:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e008:	9801      	ldr	r0, [sp, #4]
 800e00a:	f000 fb09 	bl	800e620 <__mcmp>
 800e00e:	463a      	mov	r2, r7
 800e010:	9002      	str	r0, [sp, #8]
 800e012:	4629      	mov	r1, r5
 800e014:	4620      	mov	r0, r4
 800e016:	f000 fb1d 	bl	800e654 <__mdiff>
 800e01a:	68c3      	ldr	r3, [r0, #12]
 800e01c:	4602      	mov	r2, r0
 800e01e:	bb03      	cbnz	r3, 800e062 <_dtoa_r+0x932>
 800e020:	4601      	mov	r1, r0
 800e022:	9009      	str	r0, [sp, #36]	; 0x24
 800e024:	9801      	ldr	r0, [sp, #4]
 800e026:	f000 fafb 	bl	800e620 <__mcmp>
 800e02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e02c:	4603      	mov	r3, r0
 800e02e:	4611      	mov	r1, r2
 800e030:	4620      	mov	r0, r4
 800e032:	9309      	str	r3, [sp, #36]	; 0x24
 800e034:	f000 f912 	bl	800e25c <_Bfree>
 800e038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e03a:	b9a3      	cbnz	r3, 800e066 <_dtoa_r+0x936>
 800e03c:	9a08      	ldr	r2, [sp, #32]
 800e03e:	b992      	cbnz	r2, 800e066 <_dtoa_r+0x936>
 800e040:	9a07      	ldr	r2, [sp, #28]
 800e042:	b982      	cbnz	r2, 800e066 <_dtoa_r+0x936>
 800e044:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e048:	d029      	beq.n	800e09e <_dtoa_r+0x96e>
 800e04a:	9b02      	ldr	r3, [sp, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	dd01      	ble.n	800e054 <_dtoa_r+0x924>
 800e050:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800e054:	f10a 0601 	add.w	r6, sl, #1
 800e058:	f88a 8000 	strb.w	r8, [sl]
 800e05c:	e786      	b.n	800df6c <_dtoa_r+0x83c>
 800e05e:	4638      	mov	r0, r7
 800e060:	e7c2      	b.n	800dfe8 <_dtoa_r+0x8b8>
 800e062:	2301      	movs	r3, #1
 800e064:	e7e3      	b.n	800e02e <_dtoa_r+0x8fe>
 800e066:	9a02      	ldr	r2, [sp, #8]
 800e068:	2a00      	cmp	r2, #0
 800e06a:	db04      	blt.n	800e076 <_dtoa_r+0x946>
 800e06c:	d124      	bne.n	800e0b8 <_dtoa_r+0x988>
 800e06e:	9a08      	ldr	r2, [sp, #32]
 800e070:	bb12      	cbnz	r2, 800e0b8 <_dtoa_r+0x988>
 800e072:	9a07      	ldr	r2, [sp, #28]
 800e074:	bb02      	cbnz	r2, 800e0b8 <_dtoa_r+0x988>
 800e076:	2b00      	cmp	r3, #0
 800e078:	ddec      	ble.n	800e054 <_dtoa_r+0x924>
 800e07a:	2201      	movs	r2, #1
 800e07c:	9901      	ldr	r1, [sp, #4]
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 fa7a 	bl	800e578 <__lshift>
 800e084:	4629      	mov	r1, r5
 800e086:	9001      	str	r0, [sp, #4]
 800e088:	f000 faca 	bl	800e620 <__mcmp>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	dc03      	bgt.n	800e098 <_dtoa_r+0x968>
 800e090:	d1e0      	bne.n	800e054 <_dtoa_r+0x924>
 800e092:	f018 0f01 	tst.w	r8, #1
 800e096:	d0dd      	beq.n	800e054 <_dtoa_r+0x924>
 800e098:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e09c:	d1d8      	bne.n	800e050 <_dtoa_r+0x920>
 800e09e:	2339      	movs	r3, #57	; 0x39
 800e0a0:	f10a 0601 	add.w	r6, sl, #1
 800e0a4:	f88a 3000 	strb.w	r3, [sl]
 800e0a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e0ac:	2b39      	cmp	r3, #57	; 0x39
 800e0ae:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800e0b2:	d04c      	beq.n	800e14e <_dtoa_r+0xa1e>
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	e051      	b.n	800e15c <_dtoa_r+0xa2c>
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f10a 0601 	add.w	r6, sl, #1
 800e0be:	dd05      	ble.n	800e0cc <_dtoa_r+0x99c>
 800e0c0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e0c4:	d0eb      	beq.n	800e09e <_dtoa_r+0x96e>
 800e0c6:	f108 0801 	add.w	r8, r8, #1
 800e0ca:	e7c5      	b.n	800e058 <_dtoa_r+0x928>
 800e0cc:	9b04      	ldr	r3, [sp, #16]
 800e0ce:	9a06      	ldr	r2, [sp, #24]
 800e0d0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800e0d4:	1af3      	subs	r3, r6, r3
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d021      	beq.n	800e11e <_dtoa_r+0x9ee>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	220a      	movs	r2, #10
 800e0de:	9901      	ldr	r1, [sp, #4]
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 f8d2 	bl	800e28a <__multadd>
 800e0e6:	45b9      	cmp	r9, r7
 800e0e8:	9001      	str	r0, [sp, #4]
 800e0ea:	f04f 0300 	mov.w	r3, #0
 800e0ee:	f04f 020a 	mov.w	r2, #10
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	d105      	bne.n	800e104 <_dtoa_r+0x9d4>
 800e0f8:	f000 f8c7 	bl	800e28a <__multadd>
 800e0fc:	4681      	mov	r9, r0
 800e0fe:	4607      	mov	r7, r0
 800e100:	46b2      	mov	sl, r6
 800e102:	e779      	b.n	800dff8 <_dtoa_r+0x8c8>
 800e104:	f000 f8c1 	bl	800e28a <__multadd>
 800e108:	4639      	mov	r1, r7
 800e10a:	4681      	mov	r9, r0
 800e10c:	2300      	movs	r3, #0
 800e10e:	220a      	movs	r2, #10
 800e110:	4620      	mov	r0, r4
 800e112:	f000 f8ba 	bl	800e28a <__multadd>
 800e116:	4607      	mov	r7, r0
 800e118:	e7f2      	b.n	800e100 <_dtoa_r+0x9d0>
 800e11a:	f04f 0900 	mov.w	r9, #0
 800e11e:	2201      	movs	r2, #1
 800e120:	9901      	ldr	r1, [sp, #4]
 800e122:	4620      	mov	r0, r4
 800e124:	f000 fa28 	bl	800e578 <__lshift>
 800e128:	4629      	mov	r1, r5
 800e12a:	9001      	str	r0, [sp, #4]
 800e12c:	f000 fa78 	bl	800e620 <__mcmp>
 800e130:	2800      	cmp	r0, #0
 800e132:	dcb9      	bgt.n	800e0a8 <_dtoa_r+0x978>
 800e134:	d102      	bne.n	800e13c <_dtoa_r+0xa0c>
 800e136:	f018 0f01 	tst.w	r8, #1
 800e13a:	d1b5      	bne.n	800e0a8 <_dtoa_r+0x978>
 800e13c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e140:	2b30      	cmp	r3, #48	; 0x30
 800e142:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800e146:	f47f af11 	bne.w	800df6c <_dtoa_r+0x83c>
 800e14a:	4616      	mov	r6, r2
 800e14c:	e7f6      	b.n	800e13c <_dtoa_r+0xa0c>
 800e14e:	9b04      	ldr	r3, [sp, #16]
 800e150:	4293      	cmp	r3, r2
 800e152:	d105      	bne.n	800e160 <_dtoa_r+0xa30>
 800e154:	9a04      	ldr	r2, [sp, #16]
 800e156:	f10b 0b01 	add.w	fp, fp, #1
 800e15a:	2331      	movs	r3, #49	; 0x31
 800e15c:	7013      	strb	r3, [r2, #0]
 800e15e:	e705      	b.n	800df6c <_dtoa_r+0x83c>
 800e160:	4616      	mov	r6, r2
 800e162:	e7a1      	b.n	800e0a8 <_dtoa_r+0x978>
 800e164:	4b16      	ldr	r3, [pc, #88]	; (800e1c0 <_dtoa_r+0xa90>)
 800e166:	f7ff bb48 	b.w	800d7fa <_dtoa_r+0xca>
 800e16a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f47f ab23 	bne.w	800d7b8 <_dtoa_r+0x88>
 800e172:	4b14      	ldr	r3, [pc, #80]	; (800e1c4 <_dtoa_r+0xa94>)
 800e174:	f7ff bb41 	b.w	800d7fa <_dtoa_r+0xca>
 800e178:	9b08      	ldr	r3, [sp, #32]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	f77f ae3b 	ble.w	800ddf6 <_dtoa_r+0x6c6>
 800e180:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e184:	e64f      	b.n	800de26 <_dtoa_r+0x6f6>
 800e186:	9b06      	ldr	r3, [sp, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	dc03      	bgt.n	800e194 <_dtoa_r+0xa64>
 800e18c:	9b08      	ldr	r3, [sp, #32]
 800e18e:	2b02      	cmp	r3, #2
 800e190:	f73f aed7 	bgt.w	800df42 <_dtoa_r+0x812>
 800e194:	9e04      	ldr	r6, [sp, #16]
 800e196:	9801      	ldr	r0, [sp, #4]
 800e198:	4629      	mov	r1, r5
 800e19a:	f7ff fa3d 	bl	800d618 <quorem>
 800e19e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e1a2:	f806 8b01 	strb.w	r8, [r6], #1
 800e1a6:	9b04      	ldr	r3, [sp, #16]
 800e1a8:	9a06      	ldr	r2, [sp, #24]
 800e1aa:	1af3      	subs	r3, r6, r3
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	ddb4      	ble.n	800e11a <_dtoa_r+0x9ea>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	220a      	movs	r2, #10
 800e1b4:	9901      	ldr	r1, [sp, #4]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f000 f867 	bl	800e28a <__multadd>
 800e1bc:	9001      	str	r0, [sp, #4]
 800e1be:	e7ea      	b.n	800e196 <_dtoa_r+0xa66>
 800e1c0:	0800e956 	.word	0x0800e956
 800e1c4:	0800ea59 	.word	0x0800ea59

0800e1c8 <_localeconv_r>:
 800e1c8:	4b04      	ldr	r3, [pc, #16]	; (800e1dc <_localeconv_r+0x14>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6a18      	ldr	r0, [r3, #32]
 800e1ce:	4b04      	ldr	r3, [pc, #16]	; (800e1e0 <_localeconv_r+0x18>)
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	bf08      	it	eq
 800e1d4:	4618      	moveq	r0, r3
 800e1d6:	30f0      	adds	r0, #240	; 0xf0
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	20000018 	.word	0x20000018
 800e1e0:	2000007c 	.word	0x2000007c

0800e1e4 <malloc>:
 800e1e4:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <malloc+0xc>)
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	6818      	ldr	r0, [r3, #0]
 800e1ea:	f000 baed 	b.w	800e7c8 <_malloc_r>
 800e1ee:	bf00      	nop
 800e1f0:	20000018 	.word	0x20000018

0800e1f4 <_Balloc>:
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	460e      	mov	r6, r1
 800e1fc:	b93d      	cbnz	r5, 800e20e <_Balloc+0x1a>
 800e1fe:	2010      	movs	r0, #16
 800e200:	f7ff fff0 	bl	800e1e4 <malloc>
 800e204:	6260      	str	r0, [r4, #36]	; 0x24
 800e206:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e20a:	6005      	str	r5, [r0, #0]
 800e20c:	60c5      	str	r5, [r0, #12]
 800e20e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e210:	68eb      	ldr	r3, [r5, #12]
 800e212:	b183      	cbz	r3, 800e236 <_Balloc+0x42>
 800e214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e21c:	b9b8      	cbnz	r0, 800e24e <_Balloc+0x5a>
 800e21e:	2101      	movs	r1, #1
 800e220:	fa01 f506 	lsl.w	r5, r1, r6
 800e224:	1d6a      	adds	r2, r5, #5
 800e226:	0092      	lsls	r2, r2, #2
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 fabf 	bl	800e7ac <_calloc_r>
 800e22e:	b160      	cbz	r0, 800e24a <_Balloc+0x56>
 800e230:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e234:	e00e      	b.n	800e254 <_Balloc+0x60>
 800e236:	2221      	movs	r2, #33	; 0x21
 800e238:	2104      	movs	r1, #4
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 fab6 	bl	800e7ac <_calloc_r>
 800e240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e242:	60e8      	str	r0, [r5, #12]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e4      	bne.n	800e214 <_Balloc+0x20>
 800e24a:	2000      	movs	r0, #0
 800e24c:	bd70      	pop	{r4, r5, r6, pc}
 800e24e:	6802      	ldr	r2, [r0, #0]
 800e250:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e254:	2300      	movs	r3, #0
 800e256:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e25a:	e7f7      	b.n	800e24c <_Balloc+0x58>

0800e25c <_Bfree>:
 800e25c:	b570      	push	{r4, r5, r6, lr}
 800e25e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e260:	4606      	mov	r6, r0
 800e262:	460d      	mov	r5, r1
 800e264:	b93c      	cbnz	r4, 800e276 <_Bfree+0x1a>
 800e266:	2010      	movs	r0, #16
 800e268:	f7ff ffbc 	bl	800e1e4 <malloc>
 800e26c:	6270      	str	r0, [r6, #36]	; 0x24
 800e26e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e272:	6004      	str	r4, [r0, #0]
 800e274:	60c4      	str	r4, [r0, #12]
 800e276:	b13d      	cbz	r5, 800e288 <_Bfree+0x2c>
 800e278:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e27a:	686a      	ldr	r2, [r5, #4]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e282:	6029      	str	r1, [r5, #0]
 800e284:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e288:	bd70      	pop	{r4, r5, r6, pc}

0800e28a <__multadd>:
 800e28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28e:	690d      	ldr	r5, [r1, #16]
 800e290:	461f      	mov	r7, r3
 800e292:	4606      	mov	r6, r0
 800e294:	460c      	mov	r4, r1
 800e296:	f101 0c14 	add.w	ip, r1, #20
 800e29a:	2300      	movs	r3, #0
 800e29c:	f8dc 0000 	ldr.w	r0, [ip]
 800e2a0:	b281      	uxth	r1, r0
 800e2a2:	fb02 7101 	mla	r1, r2, r1, r7
 800e2a6:	0c0f      	lsrs	r7, r1, #16
 800e2a8:	0c00      	lsrs	r0, r0, #16
 800e2aa:	fb02 7000 	mla	r0, r2, r0, r7
 800e2ae:	b289      	uxth	r1, r1
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e2b6:	429d      	cmp	r5, r3
 800e2b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e2bc:	f84c 1b04 	str.w	r1, [ip], #4
 800e2c0:	dcec      	bgt.n	800e29c <__multadd+0x12>
 800e2c2:	b1d7      	cbz	r7, 800e2fa <__multadd+0x70>
 800e2c4:	68a3      	ldr	r3, [r4, #8]
 800e2c6:	42ab      	cmp	r3, r5
 800e2c8:	dc12      	bgt.n	800e2f0 <__multadd+0x66>
 800e2ca:	6861      	ldr	r1, [r4, #4]
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	3101      	adds	r1, #1
 800e2d0:	f7ff ff90 	bl	800e1f4 <_Balloc>
 800e2d4:	6922      	ldr	r2, [r4, #16]
 800e2d6:	3202      	adds	r2, #2
 800e2d8:	f104 010c 	add.w	r1, r4, #12
 800e2dc:	4680      	mov	r8, r0
 800e2de:	0092      	lsls	r2, r2, #2
 800e2e0:	300c      	adds	r0, #12
 800e2e2:	f7fe fda9 	bl	800ce38 <memcpy>
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7ff ffb7 	bl	800e25c <_Bfree>
 800e2ee:	4644      	mov	r4, r8
 800e2f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2f4:	3501      	adds	r5, #1
 800e2f6:	615f      	str	r7, [r3, #20]
 800e2f8:	6125      	str	r5, [r4, #16]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e300 <__hi0bits>:
 800e300:	0c02      	lsrs	r2, r0, #16
 800e302:	0412      	lsls	r2, r2, #16
 800e304:	4603      	mov	r3, r0
 800e306:	b9b2      	cbnz	r2, 800e336 <__hi0bits+0x36>
 800e308:	0403      	lsls	r3, r0, #16
 800e30a:	2010      	movs	r0, #16
 800e30c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e310:	bf04      	itt	eq
 800e312:	021b      	lsleq	r3, r3, #8
 800e314:	3008      	addeq	r0, #8
 800e316:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e31a:	bf04      	itt	eq
 800e31c:	011b      	lsleq	r3, r3, #4
 800e31e:	3004      	addeq	r0, #4
 800e320:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e324:	bf04      	itt	eq
 800e326:	009b      	lsleq	r3, r3, #2
 800e328:	3002      	addeq	r0, #2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	db06      	blt.n	800e33c <__hi0bits+0x3c>
 800e32e:	005b      	lsls	r3, r3, #1
 800e330:	d503      	bpl.n	800e33a <__hi0bits+0x3a>
 800e332:	3001      	adds	r0, #1
 800e334:	4770      	bx	lr
 800e336:	2000      	movs	r0, #0
 800e338:	e7e8      	b.n	800e30c <__hi0bits+0xc>
 800e33a:	2020      	movs	r0, #32
 800e33c:	4770      	bx	lr

0800e33e <__lo0bits>:
 800e33e:	6803      	ldr	r3, [r0, #0]
 800e340:	f013 0207 	ands.w	r2, r3, #7
 800e344:	4601      	mov	r1, r0
 800e346:	d00b      	beq.n	800e360 <__lo0bits+0x22>
 800e348:	07da      	lsls	r2, r3, #31
 800e34a:	d423      	bmi.n	800e394 <__lo0bits+0x56>
 800e34c:	0798      	lsls	r0, r3, #30
 800e34e:	bf49      	itett	mi
 800e350:	085b      	lsrmi	r3, r3, #1
 800e352:	089b      	lsrpl	r3, r3, #2
 800e354:	2001      	movmi	r0, #1
 800e356:	600b      	strmi	r3, [r1, #0]
 800e358:	bf5c      	itt	pl
 800e35a:	600b      	strpl	r3, [r1, #0]
 800e35c:	2002      	movpl	r0, #2
 800e35e:	4770      	bx	lr
 800e360:	b298      	uxth	r0, r3
 800e362:	b9a8      	cbnz	r0, 800e390 <__lo0bits+0x52>
 800e364:	0c1b      	lsrs	r3, r3, #16
 800e366:	2010      	movs	r0, #16
 800e368:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e36c:	bf04      	itt	eq
 800e36e:	0a1b      	lsreq	r3, r3, #8
 800e370:	3008      	addeq	r0, #8
 800e372:	071a      	lsls	r2, r3, #28
 800e374:	bf04      	itt	eq
 800e376:	091b      	lsreq	r3, r3, #4
 800e378:	3004      	addeq	r0, #4
 800e37a:	079a      	lsls	r2, r3, #30
 800e37c:	bf04      	itt	eq
 800e37e:	089b      	lsreq	r3, r3, #2
 800e380:	3002      	addeq	r0, #2
 800e382:	07da      	lsls	r2, r3, #31
 800e384:	d402      	bmi.n	800e38c <__lo0bits+0x4e>
 800e386:	085b      	lsrs	r3, r3, #1
 800e388:	d006      	beq.n	800e398 <__lo0bits+0x5a>
 800e38a:	3001      	adds	r0, #1
 800e38c:	600b      	str	r3, [r1, #0]
 800e38e:	4770      	bx	lr
 800e390:	4610      	mov	r0, r2
 800e392:	e7e9      	b.n	800e368 <__lo0bits+0x2a>
 800e394:	2000      	movs	r0, #0
 800e396:	4770      	bx	lr
 800e398:	2020      	movs	r0, #32
 800e39a:	4770      	bx	lr

0800e39c <__i2b>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	460c      	mov	r4, r1
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	f7ff ff27 	bl	800e1f4 <_Balloc>
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	6144      	str	r4, [r0, #20]
 800e3aa:	6102      	str	r2, [r0, #16]
 800e3ac:	bd10      	pop	{r4, pc}

0800e3ae <__multiply>:
 800e3ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b2:	4614      	mov	r4, r2
 800e3b4:	690a      	ldr	r2, [r1, #16]
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	bfb8      	it	lt
 800e3bc:	460b      	movlt	r3, r1
 800e3be:	4688      	mov	r8, r1
 800e3c0:	bfbc      	itt	lt
 800e3c2:	46a0      	movlt	r8, r4
 800e3c4:	461c      	movlt	r4, r3
 800e3c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e3ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e3ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e3d6:	eb07 0609 	add.w	r6, r7, r9
 800e3da:	42b3      	cmp	r3, r6
 800e3dc:	bfb8      	it	lt
 800e3de:	3101      	addlt	r1, #1
 800e3e0:	f7ff ff08 	bl	800e1f4 <_Balloc>
 800e3e4:	f100 0514 	add.w	r5, r0, #20
 800e3e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e3ec:	462b      	mov	r3, r5
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	4573      	cmp	r3, lr
 800e3f2:	d316      	bcc.n	800e422 <__multiply+0x74>
 800e3f4:	f104 0214 	add.w	r2, r4, #20
 800e3f8:	f108 0114 	add.w	r1, r8, #20
 800e3fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e400:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	9b00      	ldr	r3, [sp, #0]
 800e408:	9201      	str	r2, [sp, #4]
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d80c      	bhi.n	800e428 <__multiply+0x7a>
 800e40e:	2e00      	cmp	r6, #0
 800e410:	dd03      	ble.n	800e41a <__multiply+0x6c>
 800e412:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e416:	2b00      	cmp	r3, #0
 800e418:	d05d      	beq.n	800e4d6 <__multiply+0x128>
 800e41a:	6106      	str	r6, [r0, #16]
 800e41c:	b003      	add	sp, #12
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	f843 2b04 	str.w	r2, [r3], #4
 800e426:	e7e3      	b.n	800e3f0 <__multiply+0x42>
 800e428:	f8b2 b000 	ldrh.w	fp, [r2]
 800e42c:	f1bb 0f00 	cmp.w	fp, #0
 800e430:	d023      	beq.n	800e47a <__multiply+0xcc>
 800e432:	4689      	mov	r9, r1
 800e434:	46ac      	mov	ip, r5
 800e436:	f04f 0800 	mov.w	r8, #0
 800e43a:	f859 4b04 	ldr.w	r4, [r9], #4
 800e43e:	f8dc a000 	ldr.w	sl, [ip]
 800e442:	b2a3      	uxth	r3, r4
 800e444:	fa1f fa8a 	uxth.w	sl, sl
 800e448:	fb0b a303 	mla	r3, fp, r3, sl
 800e44c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e450:	f8dc 4000 	ldr.w	r4, [ip]
 800e454:	4443      	add	r3, r8
 800e456:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e45a:	fb0b 840a 	mla	r4, fp, sl, r8
 800e45e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e462:	46e2      	mov	sl, ip
 800e464:	b29b      	uxth	r3, r3
 800e466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e46a:	454f      	cmp	r7, r9
 800e46c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e470:	f84a 3b04 	str.w	r3, [sl], #4
 800e474:	d82b      	bhi.n	800e4ce <__multiply+0x120>
 800e476:	f8cc 8004 	str.w	r8, [ip, #4]
 800e47a:	9b01      	ldr	r3, [sp, #4]
 800e47c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e480:	3204      	adds	r2, #4
 800e482:	f1ba 0f00 	cmp.w	sl, #0
 800e486:	d020      	beq.n	800e4ca <__multiply+0x11c>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	4689      	mov	r9, r1
 800e48c:	46a8      	mov	r8, r5
 800e48e:	f04f 0b00 	mov.w	fp, #0
 800e492:	f8b9 c000 	ldrh.w	ip, [r9]
 800e496:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e49a:	fb0a 440c 	mla	r4, sl, ip, r4
 800e49e:	445c      	add	r4, fp
 800e4a0:	46c4      	mov	ip, r8
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e4a8:	f84c 3b04 	str.w	r3, [ip], #4
 800e4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800e4b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e4b4:	0c1b      	lsrs	r3, r3, #16
 800e4b6:	fb0a b303 	mla	r3, sl, r3, fp
 800e4ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e4be:	454f      	cmp	r7, r9
 800e4c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e4c4:	d805      	bhi.n	800e4d2 <__multiply+0x124>
 800e4c6:	f8c8 3004 	str.w	r3, [r8, #4]
 800e4ca:	3504      	adds	r5, #4
 800e4cc:	e79b      	b.n	800e406 <__multiply+0x58>
 800e4ce:	46d4      	mov	ip, sl
 800e4d0:	e7b3      	b.n	800e43a <__multiply+0x8c>
 800e4d2:	46e0      	mov	r8, ip
 800e4d4:	e7dd      	b.n	800e492 <__multiply+0xe4>
 800e4d6:	3e01      	subs	r6, #1
 800e4d8:	e799      	b.n	800e40e <__multiply+0x60>
	...

0800e4dc <__pow5mult>:
 800e4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e0:	4615      	mov	r5, r2
 800e4e2:	f012 0203 	ands.w	r2, r2, #3
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	d007      	beq.n	800e4fc <__pow5mult+0x20>
 800e4ec:	3a01      	subs	r2, #1
 800e4ee:	4c21      	ldr	r4, [pc, #132]	; (800e574 <__pow5mult+0x98>)
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4f6:	f7ff fec8 	bl	800e28a <__multadd>
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	10ad      	asrs	r5, r5, #2
 800e4fe:	d035      	beq.n	800e56c <__pow5mult+0x90>
 800e500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e502:	b93c      	cbnz	r4, 800e514 <__pow5mult+0x38>
 800e504:	2010      	movs	r0, #16
 800e506:	f7ff fe6d 	bl	800e1e4 <malloc>
 800e50a:	6270      	str	r0, [r6, #36]	; 0x24
 800e50c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e510:	6004      	str	r4, [r0, #0]
 800e512:	60c4      	str	r4, [r0, #12]
 800e514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e51c:	b94c      	cbnz	r4, 800e532 <__pow5mult+0x56>
 800e51e:	f240 2171 	movw	r1, #625	; 0x271
 800e522:	4630      	mov	r0, r6
 800e524:	f7ff ff3a 	bl	800e39c <__i2b>
 800e528:	2300      	movs	r3, #0
 800e52a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e52e:	4604      	mov	r4, r0
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	f04f 0800 	mov.w	r8, #0
 800e536:	07eb      	lsls	r3, r5, #31
 800e538:	d50a      	bpl.n	800e550 <__pow5mult+0x74>
 800e53a:	4639      	mov	r1, r7
 800e53c:	4622      	mov	r2, r4
 800e53e:	4630      	mov	r0, r6
 800e540:	f7ff ff35 	bl	800e3ae <__multiply>
 800e544:	4639      	mov	r1, r7
 800e546:	4681      	mov	r9, r0
 800e548:	4630      	mov	r0, r6
 800e54a:	f7ff fe87 	bl	800e25c <_Bfree>
 800e54e:	464f      	mov	r7, r9
 800e550:	106d      	asrs	r5, r5, #1
 800e552:	d00b      	beq.n	800e56c <__pow5mult+0x90>
 800e554:	6820      	ldr	r0, [r4, #0]
 800e556:	b938      	cbnz	r0, 800e568 <__pow5mult+0x8c>
 800e558:	4622      	mov	r2, r4
 800e55a:	4621      	mov	r1, r4
 800e55c:	4630      	mov	r0, r6
 800e55e:	f7ff ff26 	bl	800e3ae <__multiply>
 800e562:	6020      	str	r0, [r4, #0]
 800e564:	f8c0 8000 	str.w	r8, [r0]
 800e568:	4604      	mov	r4, r0
 800e56a:	e7e4      	b.n	800e536 <__pow5mult+0x5a>
 800e56c:	4638      	mov	r0, r7
 800e56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e572:	bf00      	nop
 800e574:	0800ebb8 	.word	0x0800ebb8

0800e578 <__lshift>:
 800e578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e57c:	460c      	mov	r4, r1
 800e57e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e582:	6923      	ldr	r3, [r4, #16]
 800e584:	6849      	ldr	r1, [r1, #4]
 800e586:	eb0a 0903 	add.w	r9, sl, r3
 800e58a:	68a3      	ldr	r3, [r4, #8]
 800e58c:	4607      	mov	r7, r0
 800e58e:	4616      	mov	r6, r2
 800e590:	f109 0501 	add.w	r5, r9, #1
 800e594:	42ab      	cmp	r3, r5
 800e596:	db32      	blt.n	800e5fe <__lshift+0x86>
 800e598:	4638      	mov	r0, r7
 800e59a:	f7ff fe2b 	bl	800e1f4 <_Balloc>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	f100 0114 	add.w	r1, r0, #20
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	4553      	cmp	r3, sl
 800e5aa:	db2b      	blt.n	800e604 <__lshift+0x8c>
 800e5ac:	6920      	ldr	r0, [r4, #16]
 800e5ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5b2:	f104 0314 	add.w	r3, r4, #20
 800e5b6:	f016 021f 	ands.w	r2, r6, #31
 800e5ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e5c2:	d025      	beq.n	800e610 <__lshift+0x98>
 800e5c4:	f1c2 0e20 	rsb	lr, r2, #32
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	681e      	ldr	r6, [r3, #0]
 800e5cc:	468a      	mov	sl, r1
 800e5ce:	4096      	lsls	r6, r2
 800e5d0:	4330      	orrs	r0, r6
 800e5d2:	f84a 0b04 	str.w	r0, [sl], #4
 800e5d6:	f853 0b04 	ldr.w	r0, [r3], #4
 800e5da:	459c      	cmp	ip, r3
 800e5dc:	fa20 f00e 	lsr.w	r0, r0, lr
 800e5e0:	d814      	bhi.n	800e60c <__lshift+0x94>
 800e5e2:	6048      	str	r0, [r1, #4]
 800e5e4:	b108      	cbz	r0, 800e5ea <__lshift+0x72>
 800e5e6:	f109 0502 	add.w	r5, r9, #2
 800e5ea:	3d01      	subs	r5, #1
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f8c8 5010 	str.w	r5, [r8, #16]
 800e5f2:	4621      	mov	r1, r4
 800e5f4:	f7ff fe32 	bl	800e25c <_Bfree>
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fe:	3101      	adds	r1, #1
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	e7c7      	b.n	800e594 <__lshift+0x1c>
 800e604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e608:	3301      	adds	r3, #1
 800e60a:	e7cd      	b.n	800e5a8 <__lshift+0x30>
 800e60c:	4651      	mov	r1, sl
 800e60e:	e7dc      	b.n	800e5ca <__lshift+0x52>
 800e610:	3904      	subs	r1, #4
 800e612:	f853 2b04 	ldr.w	r2, [r3], #4
 800e616:	f841 2f04 	str.w	r2, [r1, #4]!
 800e61a:	459c      	cmp	ip, r3
 800e61c:	d8f9      	bhi.n	800e612 <__lshift+0x9a>
 800e61e:	e7e4      	b.n	800e5ea <__lshift+0x72>

0800e620 <__mcmp>:
 800e620:	6903      	ldr	r3, [r0, #16]
 800e622:	690a      	ldr	r2, [r1, #16]
 800e624:	1a9b      	subs	r3, r3, r2
 800e626:	b530      	push	{r4, r5, lr}
 800e628:	d10c      	bne.n	800e644 <__mcmp+0x24>
 800e62a:	0092      	lsls	r2, r2, #2
 800e62c:	3014      	adds	r0, #20
 800e62e:	3114      	adds	r1, #20
 800e630:	1884      	adds	r4, r0, r2
 800e632:	4411      	add	r1, r2
 800e634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e63c:	4295      	cmp	r5, r2
 800e63e:	d003      	beq.n	800e648 <__mcmp+0x28>
 800e640:	d305      	bcc.n	800e64e <__mcmp+0x2e>
 800e642:	2301      	movs	r3, #1
 800e644:	4618      	mov	r0, r3
 800e646:	bd30      	pop	{r4, r5, pc}
 800e648:	42a0      	cmp	r0, r4
 800e64a:	d3f3      	bcc.n	800e634 <__mcmp+0x14>
 800e64c:	e7fa      	b.n	800e644 <__mcmp+0x24>
 800e64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e652:	e7f7      	b.n	800e644 <__mcmp+0x24>

0800e654 <__mdiff>:
 800e654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e658:	460d      	mov	r5, r1
 800e65a:	4607      	mov	r7, r0
 800e65c:	4611      	mov	r1, r2
 800e65e:	4628      	mov	r0, r5
 800e660:	4614      	mov	r4, r2
 800e662:	f7ff ffdd 	bl	800e620 <__mcmp>
 800e666:	1e06      	subs	r6, r0, #0
 800e668:	d108      	bne.n	800e67c <__mdiff+0x28>
 800e66a:	4631      	mov	r1, r6
 800e66c:	4638      	mov	r0, r7
 800e66e:	f7ff fdc1 	bl	800e1f4 <_Balloc>
 800e672:	2301      	movs	r3, #1
 800e674:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e67c:	bfa4      	itt	ge
 800e67e:	4623      	movge	r3, r4
 800e680:	462c      	movge	r4, r5
 800e682:	4638      	mov	r0, r7
 800e684:	6861      	ldr	r1, [r4, #4]
 800e686:	bfa6      	itte	ge
 800e688:	461d      	movge	r5, r3
 800e68a:	2600      	movge	r6, #0
 800e68c:	2601      	movlt	r6, #1
 800e68e:	f7ff fdb1 	bl	800e1f4 <_Balloc>
 800e692:	692b      	ldr	r3, [r5, #16]
 800e694:	60c6      	str	r6, [r0, #12]
 800e696:	6926      	ldr	r6, [r4, #16]
 800e698:	f105 0914 	add.w	r9, r5, #20
 800e69c:	f104 0214 	add.w	r2, r4, #20
 800e6a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e6a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e6a8:	f100 0514 	add.w	r5, r0, #20
 800e6ac:	f04f 0e00 	mov.w	lr, #0
 800e6b0:	f852 ab04 	ldr.w	sl, [r2], #4
 800e6b4:	f859 4b04 	ldr.w	r4, [r9], #4
 800e6b8:	fa1e f18a 	uxtah	r1, lr, sl
 800e6bc:	b2a3      	uxth	r3, r4
 800e6be:	1ac9      	subs	r1, r1, r3
 800e6c0:	0c23      	lsrs	r3, r4, #16
 800e6c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e6c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e6ca:	b289      	uxth	r1, r1
 800e6cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e6d0:	45c8      	cmp	r8, r9
 800e6d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e6d6:	4694      	mov	ip, r2
 800e6d8:	f845 3b04 	str.w	r3, [r5], #4
 800e6dc:	d8e8      	bhi.n	800e6b0 <__mdiff+0x5c>
 800e6de:	45bc      	cmp	ip, r7
 800e6e0:	d304      	bcc.n	800e6ec <__mdiff+0x98>
 800e6e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e6e6:	b183      	cbz	r3, 800e70a <__mdiff+0xb6>
 800e6e8:	6106      	str	r6, [r0, #16]
 800e6ea:	e7c5      	b.n	800e678 <__mdiff+0x24>
 800e6ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e6f0:	fa1e f381 	uxtah	r3, lr, r1
 800e6f4:	141a      	asrs	r2, r3, #16
 800e6f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e700:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e704:	f845 3b04 	str.w	r3, [r5], #4
 800e708:	e7e9      	b.n	800e6de <__mdiff+0x8a>
 800e70a:	3e01      	subs	r6, #1
 800e70c:	e7e9      	b.n	800e6e2 <__mdiff+0x8e>

0800e70e <__d2b>:
 800e70e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e712:	460e      	mov	r6, r1
 800e714:	2101      	movs	r1, #1
 800e716:	ec59 8b10 	vmov	r8, r9, d0
 800e71a:	4615      	mov	r5, r2
 800e71c:	f7ff fd6a 	bl	800e1f4 <_Balloc>
 800e720:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e724:	4607      	mov	r7, r0
 800e726:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e72a:	bb34      	cbnz	r4, 800e77a <__d2b+0x6c>
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	f1b8 0300 	subs.w	r3, r8, #0
 800e732:	d027      	beq.n	800e784 <__d2b+0x76>
 800e734:	a802      	add	r0, sp, #8
 800e736:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e73a:	f7ff fe00 	bl	800e33e <__lo0bits>
 800e73e:	9900      	ldr	r1, [sp, #0]
 800e740:	b1f0      	cbz	r0, 800e780 <__d2b+0x72>
 800e742:	9a01      	ldr	r2, [sp, #4]
 800e744:	f1c0 0320 	rsb	r3, r0, #32
 800e748:	fa02 f303 	lsl.w	r3, r2, r3
 800e74c:	430b      	orrs	r3, r1
 800e74e:	40c2      	lsrs	r2, r0
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	9201      	str	r2, [sp, #4]
 800e754:	9b01      	ldr	r3, [sp, #4]
 800e756:	61bb      	str	r3, [r7, #24]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	bf14      	ite	ne
 800e75c:	2102      	movne	r1, #2
 800e75e:	2101      	moveq	r1, #1
 800e760:	6139      	str	r1, [r7, #16]
 800e762:	b1c4      	cbz	r4, 800e796 <__d2b+0x88>
 800e764:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e768:	4404      	add	r4, r0
 800e76a:	6034      	str	r4, [r6, #0]
 800e76c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e770:	6028      	str	r0, [r5, #0]
 800e772:	4638      	mov	r0, r7
 800e774:	b003      	add	sp, #12
 800e776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e77a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e77e:	e7d5      	b.n	800e72c <__d2b+0x1e>
 800e780:	6179      	str	r1, [r7, #20]
 800e782:	e7e7      	b.n	800e754 <__d2b+0x46>
 800e784:	a801      	add	r0, sp, #4
 800e786:	f7ff fdda 	bl	800e33e <__lo0bits>
 800e78a:	9b01      	ldr	r3, [sp, #4]
 800e78c:	617b      	str	r3, [r7, #20]
 800e78e:	2101      	movs	r1, #1
 800e790:	6139      	str	r1, [r7, #16]
 800e792:	3020      	adds	r0, #32
 800e794:	e7e5      	b.n	800e762 <__d2b+0x54>
 800e796:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e79a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e79e:	6030      	str	r0, [r6, #0]
 800e7a0:	6918      	ldr	r0, [r3, #16]
 800e7a2:	f7ff fdad 	bl	800e300 <__hi0bits>
 800e7a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e7aa:	e7e1      	b.n	800e770 <__d2b+0x62>

0800e7ac <_calloc_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	fb02 f401 	mul.w	r4, r2, r1
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	f000 f808 	bl	800e7c8 <_malloc_r>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	b118      	cbz	r0, 800e7c4 <_calloc_r+0x18>
 800e7bc:	4622      	mov	r2, r4
 800e7be:	2100      	movs	r1, #0
 800e7c0:	f7fe fb45 	bl	800ce4e <memset>
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}

0800e7c8 <_malloc_r>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	1ccd      	adds	r5, r1, #3
 800e7cc:	f025 0503 	bic.w	r5, r5, #3
 800e7d0:	3508      	adds	r5, #8
 800e7d2:	2d0c      	cmp	r5, #12
 800e7d4:	bf38      	it	cc
 800e7d6:	250c      	movcc	r5, #12
 800e7d8:	2d00      	cmp	r5, #0
 800e7da:	4606      	mov	r6, r0
 800e7dc:	db01      	blt.n	800e7e2 <_malloc_r+0x1a>
 800e7de:	42a9      	cmp	r1, r5
 800e7e0:	d903      	bls.n	800e7ea <_malloc_r+0x22>
 800e7e2:	230c      	movs	r3, #12
 800e7e4:	6033      	str	r3, [r6, #0]
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ea:	f000 f857 	bl	800e89c <__malloc_lock>
 800e7ee:	4a21      	ldr	r2, [pc, #132]	; (800e874 <_malloc_r+0xac>)
 800e7f0:	6814      	ldr	r4, [r2, #0]
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	b991      	cbnz	r1, 800e81c <_malloc_r+0x54>
 800e7f6:	4c20      	ldr	r4, [pc, #128]	; (800e878 <_malloc_r+0xb0>)
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	b91b      	cbnz	r3, 800e804 <_malloc_r+0x3c>
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f000 f83d 	bl	800e87c <_sbrk_r>
 800e802:	6020      	str	r0, [r4, #0]
 800e804:	4629      	mov	r1, r5
 800e806:	4630      	mov	r0, r6
 800e808:	f000 f838 	bl	800e87c <_sbrk_r>
 800e80c:	1c43      	adds	r3, r0, #1
 800e80e:	d124      	bne.n	800e85a <_malloc_r+0x92>
 800e810:	230c      	movs	r3, #12
 800e812:	6033      	str	r3, [r6, #0]
 800e814:	4630      	mov	r0, r6
 800e816:	f000 f842 	bl	800e89e <__malloc_unlock>
 800e81a:	e7e4      	b.n	800e7e6 <_malloc_r+0x1e>
 800e81c:	680b      	ldr	r3, [r1, #0]
 800e81e:	1b5b      	subs	r3, r3, r5
 800e820:	d418      	bmi.n	800e854 <_malloc_r+0x8c>
 800e822:	2b0b      	cmp	r3, #11
 800e824:	d90f      	bls.n	800e846 <_malloc_r+0x7e>
 800e826:	600b      	str	r3, [r1, #0]
 800e828:	50cd      	str	r5, [r1, r3]
 800e82a:	18cc      	adds	r4, r1, r3
 800e82c:	4630      	mov	r0, r6
 800e82e:	f000 f836 	bl	800e89e <__malloc_unlock>
 800e832:	f104 000b 	add.w	r0, r4, #11
 800e836:	1d23      	adds	r3, r4, #4
 800e838:	f020 0007 	bic.w	r0, r0, #7
 800e83c:	1ac3      	subs	r3, r0, r3
 800e83e:	d0d3      	beq.n	800e7e8 <_malloc_r+0x20>
 800e840:	425a      	negs	r2, r3
 800e842:	50e2      	str	r2, [r4, r3]
 800e844:	e7d0      	b.n	800e7e8 <_malloc_r+0x20>
 800e846:	428c      	cmp	r4, r1
 800e848:	684b      	ldr	r3, [r1, #4]
 800e84a:	bf16      	itet	ne
 800e84c:	6063      	strne	r3, [r4, #4]
 800e84e:	6013      	streq	r3, [r2, #0]
 800e850:	460c      	movne	r4, r1
 800e852:	e7eb      	b.n	800e82c <_malloc_r+0x64>
 800e854:	460c      	mov	r4, r1
 800e856:	6849      	ldr	r1, [r1, #4]
 800e858:	e7cc      	b.n	800e7f4 <_malloc_r+0x2c>
 800e85a:	1cc4      	adds	r4, r0, #3
 800e85c:	f024 0403 	bic.w	r4, r4, #3
 800e860:	42a0      	cmp	r0, r4
 800e862:	d005      	beq.n	800e870 <_malloc_r+0xa8>
 800e864:	1a21      	subs	r1, r4, r0
 800e866:	4630      	mov	r0, r6
 800e868:	f000 f808 	bl	800e87c <_sbrk_r>
 800e86c:	3001      	adds	r0, #1
 800e86e:	d0cf      	beq.n	800e810 <_malloc_r+0x48>
 800e870:	6025      	str	r5, [r4, #0]
 800e872:	e7db      	b.n	800e82c <_malloc_r+0x64>
 800e874:	20005ee0 	.word	0x20005ee0
 800e878:	20005ee4 	.word	0x20005ee4

0800e87c <_sbrk_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4c06      	ldr	r4, [pc, #24]	; (800e898 <_sbrk_r+0x1c>)
 800e880:	2300      	movs	r3, #0
 800e882:	4605      	mov	r5, r0
 800e884:	4608      	mov	r0, r1
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	f7f3 fb02 	bl	8001e90 <_sbrk>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d102      	bne.n	800e896 <_sbrk_r+0x1a>
 800e890:	6823      	ldr	r3, [r4, #0]
 800e892:	b103      	cbz	r3, 800e896 <_sbrk_r+0x1a>
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	20006e60 	.word	0x20006e60

0800e89c <__malloc_lock>:
 800e89c:	4770      	bx	lr

0800e89e <__malloc_unlock>:
 800e89e:	4770      	bx	lr

0800e8a0 <_init>:
 800e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a2:	bf00      	nop
 800e8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8a6:	bc08      	pop	{r3}
 800e8a8:	469e      	mov	lr, r3
 800e8aa:	4770      	bx	lr

0800e8ac <_fini>:
 800e8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ae:	bf00      	nop
 800e8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8b2:	bc08      	pop	{r3}
 800e8b4:	469e      	mov	lr, r3
 800e8b6:	4770      	bx	lr
