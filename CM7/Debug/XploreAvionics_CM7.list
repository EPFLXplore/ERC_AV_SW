
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800e668  0800e668  0001e668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e974  0800e974  0001e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e97c  0800e97c  0001e97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e980  0800e980  0001e980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800e984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006b7c  200001e8  0800eb6c  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20006d64  0800eb6c  00026d64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005362d  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000082dd  00000000  00000000  00073843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000026d0  00000000  00000000  0007bb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000023a8  00000000  00000000  0007e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004829c  00000000  00000000  00080598  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002de14  00000000  00000000  000c8834  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001b3310  00000000  00000000  000f6648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002a9958  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aa64  00000000  00000000  002a99d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e650 	.word	0x0800e650

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800e650 	.word	0x0800e650

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f4:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <SystemInit+0x104>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a3e      	ldr	r2, [pc, #248]	; (80006f4 <SystemInit+0x104>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000604:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <SystemInit+0x104>)
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	4a3a      	ldr	r2, [pc, #232]	; (80006f4 <SystemInit+0x104>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000610:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <SystemInit+0x108>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 030f 	and.w	r3, r3, #15
 8000618:	2b06      	cmp	r3, #6
 800061a:	d807      	bhi.n	800062c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800061c:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <SystemInit+0x108>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f023 030f 	bic.w	r3, r3, #15
 8000624:	4a34      	ldr	r2, [pc, #208]	; (80006f8 <SystemInit+0x108>)
 8000626:	f043 0307 	orr.w	r3, r3, #7
 800062a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <SystemInit+0x10c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <SystemInit+0x10c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <SystemInit+0x10c>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <SystemInit+0x10c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	492e      	ldr	r1, [pc, #184]	; (80006fc <SystemInit+0x10c>)
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <SystemInit+0x110>)
 8000646:	4013      	ands	r3, r2
 8000648:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <SystemInit+0x108>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	2b07      	cmp	r3, #7
 8000654:	d907      	bls.n	8000666 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemInit+0x108>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f023 030f 	bic.w	r3, r3, #15
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <SystemInit+0x108>)
 8000660:	f043 0307 	orr.w	r3, r3, #7
 8000664:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemInit+0x10c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemInit+0x10c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemInit+0x10c>)
 800067a:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemInit+0x114>)
 800067c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemInit+0x10c>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemInit+0x118>)
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <SystemInit+0x10c>)
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemInit+0x11c>)
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <SystemInit+0x10c>)
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <SystemInit+0x11c>)
 8000694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <SystemInit+0x10c>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <SystemInit+0x10c>)
 800069e:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemInit+0x11c>)
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <SystemInit+0x10c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <SystemInit+0x10c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <SystemInit+0x10c>)
 80006ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x10c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SystemInit+0x120>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <SystemInit+0x120>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <SystemInit+0x124>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <SystemInit+0x128>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006d2:	d202      	bcs.n	80006da <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <SystemInit+0x12c>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <SystemInit+0x130>)
 80006dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006e0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SystemInit+0x104>)
 80006e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	580000c0 	.word	0x580000c0
 8000714:	5c001000 	.word	0x5c001000
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	51008108 	.word	0x51008108
 8000720:	52004000 	.word	0x52004000

08000724 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_CRC_Init+0x3c>)
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <MX_CRC_Init+0x40>)
 800072c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_CRC_Init+0x3c>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_CRC_Init+0x3c>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_CRC_Init+0x3c>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_CRC_Init+0x3c>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_CRC_Init+0x3c>)
 8000748:	2201      	movs	r2, #1
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_CRC_Init+0x3c>)
 800074e:	f002 f987 	bl	8002a60 <HAL_CRC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000758:	f000 fcde 	bl	8001118 <Error_Handler>
  }

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20005de4 	.word	0x20005de4
 8000764:	58024c00 	.word	0x58024c00

08000768 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <HAL_CRC_MspInit+0x3c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10e      	bne.n	8000798 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 8000782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_CRC_MspInit+0x40>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	58024c00 	.word	0x58024c00
 80007a8:	58024400 	.word	0x58024400

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b8:	4a3f      	ldr	r2, [pc, #252]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_DMA_Init+0x10c>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	200d      	movs	r0, #13
 80007f4:	f002 f880 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80007f8:	200d      	movs	r0, #13
 80007fa:	f002 f897 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	200e      	movs	r0, #14
 8000804:	f002 f878 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000808:	200e      	movs	r0, #14
 800080a:	f002 f88f 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2105      	movs	r1, #5
 8000812:	200f      	movs	r0, #15
 8000814:	f002 f870 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000818:	200f      	movs	r0, #15
 800081a:	f002 f887 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	2010      	movs	r0, #16
 8000824:	f002 f868 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000828:	2010      	movs	r0, #16
 800082a:	f002 f87f 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	2011      	movs	r0, #17
 8000834:	f002 f860 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000838:	2011      	movs	r0, #17
 800083a:	f002 f877 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	202f      	movs	r0, #47	; 0x2f
 8000844:	f002 f858 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000848:	202f      	movs	r0, #47	; 0x2f
 800084a:	f002 f86f 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2038      	movs	r0, #56	; 0x38
 8000854:	f002 f850 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000858:	2038      	movs	r0, #56	; 0x38
 800085a:	f002 f867 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2039      	movs	r0, #57	; 0x39
 8000864:	f002 f848 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000868:	2039      	movs	r0, #57	; 0x39
 800086a:	f002 f85f 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	203c      	movs	r0, #60	; 0x3c
 8000874:	f002 f840 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000878:	203c      	movs	r0, #60	; 0x3c
 800087a:	f002 f857 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	2044      	movs	r0, #68	; 0x44
 8000884:	f002 f838 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000888:	2044      	movs	r0, #68	; 0x44
 800088a:	f002 f84f 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2045      	movs	r0, #69	; 0x45
 8000894:	f002 f830 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000898:	2045      	movs	r0, #69	; 0x45
 800089a:	f002 f847 	bl	800292c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2046      	movs	r0, #70	; 0x46
 80008a4:	f002 f828 	bl	80028f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008a8:	2046      	movs	r0, #70	; 0x46
 80008aa:	f002 f83f 	bl	800292c <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of watchdog */

  initCortexM7();
 80008c0:	f00c f8a0 	bl	800ca04 <initCortexM7>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <MX_GPIO_Init+0x104>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <MX_GPIO_Init+0x104>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_GPIO_Init+0x104>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <MX_GPIO_Init+0x104>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a36      	ldr	r2, [pc, #216]	; (80009cc <MX_GPIO_Init+0x104>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <MX_GPIO_Init+0x104>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <MX_GPIO_Init+0x104>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a2e      	ldr	r2, [pc, #184]	; (80009cc <MX_GPIO_Init+0x104>)
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_GPIO_Init+0x104>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_GPIO_Init+0x104>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a27      	ldr	r2, [pc, #156]	; (80009cc <MX_GPIO_Init+0x104>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_GPIO_Init+0x104>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_GPIO_Init+0x104>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <MX_GPIO_Init+0x104>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_GPIO_Init+0x104>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_GPIO_Init+0x104>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_GPIO_Init+0x104>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_GPIO_Init+0x104>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_GPIO_Init+0x104>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <MX_GPIO_Init+0x104>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_GPIO_Init+0x104>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_GPIO_Init+0x104>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <MX_GPIO_Init+0x104>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_GPIO_Init+0x104>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

}
 80009be:	bf00      	nop
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	58024400 	.word	0x58024400

080009d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009d6:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <MX_I2C1_Init+0x7c>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_I2C1_Init+0x80>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a0c:	f004 fb30 	bl	8005070 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fb7f 	bl	8001118 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a1e:	f004 fbb7 	bl	8005190 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fb76 	bl	8001118 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_I2C1_Init+0x78>)
 8000a30:	f004 fbf9 	bl	8005226 <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fb6d 	bl	8001118 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f004 fc3e 	bl	80052c0 <HAL_I2CEx_EnableFastModePlus>

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20005e54 	.word	0x20005e54
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	00401242 	.word	0x00401242

08000a54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_I2C2_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <MX_I2C2_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000a90:	f004 faee 	bl	8005070 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fb3d 	bl	8001118 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000aa2:	f004 fb75 	bl	8005190 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 fb34 	bl	8001118 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_I2C2_Init+0x74>)
 8000ab4:	f004 fbb7 	bl	8005226 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fb2b 	bl	8001118 <Error_Handler>
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20005ea0 	.word	0x20005ea0
 8000acc:	40005800 	.word	0x40005800
 8000ad0:	10c0ecff 	.word	0x10c0ecff

08000ad4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C3_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_I2C3_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b10:	f004 faae 	bl	8005070 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 fafd 	bl	8001118 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b22:	f004 fb35 	bl	8005190 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 faf4 	bl	8001118 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_I2C3_Init+0x74>)
 8000b34:	f004 fb77 	bl	8005226 <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 faeb 	bl	8001118 <Error_Handler>
  }

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20005e08 	.word	0x20005e08
 8000b4c:	40005c00 	.word	0x40005c00
 8000b50:	10c0ecff 	.word	0x10c0ecff

08000b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a4f      	ldr	r2, [pc, #316]	; (8000cb0 <HAL_I2C_MspInit+0x15c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10f      	bne.n	8000b96 <HAL_I2C_MspInit+0x42>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b7c:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b86:	4b4b      	ldr	r3, [pc, #300]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b94:	e088      	b.n	8000ca8 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a47      	ldr	r2, [pc, #284]	; (8000cb8 <HAL_I2C_MspInit+0x164>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d12f      	bne.n	8000c00 <HAL_I2C_MspInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4838      	ldr	r0, [pc, #224]	; (8000cbc <HAL_I2C_MspInit+0x168>)
 8000bdc:	f004 f86a 	bl	8004cb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000be6:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
}
 8000bfe:	e053      	b.n	8000ca8 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <HAL_I2C_MspInit+0x16c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d14e      	bne.n	8000ca8 <HAL_I2C_MspInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <HAL_I2C_MspInit+0x170>)
 8000c64:	f004 f826 	bl	8004cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <HAL_I2C_MspInit+0x174>)
 8000c86:	f004 f815 	bl	8004cb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c90:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_I2C_MspInit+0x160>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	40005800 	.word	0x40005800
 8000cbc:	58020400 	.word	0x58020400
 8000cc0:	40005c00 	.word	0x40005c00
 8000cc4:	58020800 	.word	0x58020800
 8000cc8:	58020000 	.word	0x58020000

08000ccc <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <MX_IWDG1_Init+0x38>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ce2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000ce6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_IWDG1_Init+0x34>)
 8000cee:	f004 fb0b 	bl	8005308 <HAL_IWDG_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000cf8:	f000 fa0e 	bl	8001118 <Error_Handler>
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20005eec 	.word	0x20005eec
 8000d04:	58004800 	.word	0x58004800

08000d08 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d10:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <SCB_EnableICache+0x3c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <SCB_EnableICache+0x3c>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <SCB_EnableICache+0x3c>)
 8000d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d34:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d60:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0b5b      	lsrs	r3, r3, #13
 8000d66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d6a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d74:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	015a      	lsls	r2, r3, #5
 8000d7a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d7e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d84:	490f      	ldr	r1, [pc, #60]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1ef      	bne.n	8000d76 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	60fa      	str	r2, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <SCB_EnableDCache+0x24>
 8000da0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <SCB_EnableDCache+0x7c>)
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dae:	6153      	str	r3, [r2, #20]
 8000db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dce:	f000 f949 	bl	8001064 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000dd2:	f7ff ff99 	bl	8000d08 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000dd6:	f7ff ffb7 	bl	8000d48 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000de0:	bf00      	nop
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <main+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <main+0x30>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dcf4      	bgt.n	8000de2 <main+0x1a>
  if ( timeout < 0 )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	da01      	bge.n	8000e02 <main+0x3a>
  {
  Error_Handler();
 8000dfe:	f000 f98b 	bl	8001118 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f001 fc59 	bl	80026b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f855 	bl	8000eb4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <main+0xe8>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <main+0xe8>)
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <main+0xe8>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f004 f8f3 	bl	8005014 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 f909 	bl	8005048 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e3c:	bf00      	nop
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <main+0xe8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <main+0x8c>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dcf4      	bgt.n	8000e3e <main+0x76>
if ( timeout < 0 )
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da01      	bge.n	8000e5e <main+0x96>
{
Error_Handler();
 8000e5a:	f000 f95d 	bl	8001118 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f7ff fd33 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e62:	f7ff fca3 	bl	80007ac <MX_DMA_Init>
  MX_CRC_Init();
 8000e66:	f7ff fc5d 	bl	8000724 <MX_CRC_Init>
  MX_I2C1_Init();
 8000e6a:	f7ff fdb1 	bl	80009d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e6e:	f7ff fdf1 	bl	8000a54 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000e72:	f7ff fe2f 	bl	8000ad4 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000e76:	f000 f953 	bl	8001120 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000e7a:	f000 fa7f 	bl	800137c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e7e:	f000 fad3 	bl	8001428 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e82:	f000 fb27 	bl	80014d4 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000e86:	f000 fb7b 	bl	8001580 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000e8a:	f001 f835 	bl	8001ef8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e8e:	f001 f87f 	bl	8001f90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e92:	f001 f8c9 	bl	8002028 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000e96:	f7ff ff19 	bl	8000ccc <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 8000e9a:	f001 f911 	bl	80020c0 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000e9e:	f000 fa2b 	bl	80012f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ea2:	f008 ff21 	bl	8009ce8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ea6:	f7ff fd09 	bl	80008bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000eaa:	f008 ff51 	bl	8009d50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <main+0xe6>
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0cc      	sub	sp, #304	; 0x130
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ebe:	224c      	movs	r2, #76	; 0x4c
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b fe99 	bl	800cbfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ecc:	2220      	movs	r2, #32
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00b fe92 	bl	800cbfa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4618      	mov	r0, r3
 8000edc:	23bc      	movs	r3, #188	; 0xbc
 8000ede:	461a      	mov	r2, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f00b fe8a 	bl	800cbfa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ee6:	2004      	movs	r0, #4
 8000ee8:	f004 fa64 	bl	80053b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	4b59      	ldr	r3, [pc, #356]	; (8001058 <SystemClock_Config+0x1a4>)
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	4a58      	ldr	r2, [pc, #352]	; (8001058 <SystemClock_Config+0x1a4>)
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000efe:	4b56      	ldr	r3, [pc, #344]	; (8001058 <SystemClock_Config+0x1a4>)
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	4b54      	ldr	r3, [pc, #336]	; (800105c <SystemClock_Config+0x1a8>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a53      	ldr	r2, [pc, #332]	; (800105c <SystemClock_Config+0x1a8>)
 8000f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b51      	ldr	r3, [pc, #324]	; (800105c <SystemClock_Config+0x1a8>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f26:	bf00      	nop
 8000f28:	4b4c      	ldr	r3, [pc, #304]	; (800105c <SystemClock_Config+0x1a8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f34:	d1f8      	bne.n	8000f28 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f36:	2309      	movs	r3, #9
 8000f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000f5c:	2340      	movs	r3, #64	; 0x40
 8000f5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f74:	230c      	movs	r3, #12
 8000f76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 fb26 	bl	80055dc <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000f96:	f000 f8bf 	bl	8001118 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	233f      	movs	r3, #63	; 0x3f
 8000f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fac:	2308      	movs	r3, #8
 8000fae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 ff12 	bl	8005dfc <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000fde:	f000 f89b 	bl	8001118 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <SystemClock_Config+0x1ac>)
 8000fe8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_QSPI;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	2200      	movs	r2, #0
 8001018:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2200      	movs	r2, #0
 800102a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f005 faa2 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x19a>
  {
    Error_Handler();
 800104a:	f000 f865 	bl	8001118 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58000400 	.word	0x58000400
 800105c:	58024800 	.word	0x58024800
 8001060:	0240b01b 	.word	0x0240b01b

08001064 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001076:	f001 fc67 	bl	8002948 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800107a:	2301      	movs	r3, #1
 800107c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800107e:	2300      	movs	r3, #0
 8001080:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MPU_Config+0x8c>)
 8001084:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001086:	230e      	movs	r3, #14
 8001088:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800108a:	2300      	movs	r3, #0
 800108c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800108e:	2301      	movs	r3, #1
 8001090:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001092:	2303      	movs	r3, #3
 8001094:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010a6:	463b      	mov	r3, r7
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fc81 	bl	80029b0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MPU_Config+0x8c>)
 80010b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80010ba:	2307      	movs	r3, #7
 80010bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010be:	2300      	movs	r3, #0
 80010c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010c6:	2303      	movs	r3, #3
 80010c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010da:	463b      	mov	r3, r7
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fc67 	bl	80029b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010e2:	2004      	movs	r0, #4
 80010e4:	f001 fc46 	bl	8002974 <HAL_MPU_Enable>

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	30040000 	.word	0x30040000

080010f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001106:	f001 fb13 	bl	8002730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40001400 	.word	0x40001400

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111e:	e7fe      	b.n	800111e <Error_Handler+0x6>

08001120 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_QUADSPI_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <MX_QUADSPI_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_QUADSPI_Init+0x50>)
 800112c:	22ff      	movs	r2, #255	; 0xff
 800112e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_QUADSPI_Init+0x50>)
 8001132:	2201      	movs	r2, #1
 8001134:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_QUADSPI_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_QUADSPI_Init+0x50>)
 800113e:	2201      	movs	r2, #1
 8001140:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_QUADSPI_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_QUADSPI_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_QUADSPI_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_QUADSPI_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_QUADSPI_Init+0x50>)
 800115c:	f004 f984 	bl	8005468 <HAL_QSPI_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001166:	f7ff ffd7 	bl	8001118 <Error_Handler>
  }

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20005efc 	.word	0x20005efc
 8001174:	52005000 	.word	0x52005000

08001178 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_QSPI_MspInit+0x168>)
 8001196:	4293      	cmp	r3, r2
 8001198:	f040 809e 	bne.w	80012d8 <HAL_QSPI_MspInit+0x160>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800119c:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 800119e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a2:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011ac:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ba:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d8:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	4a41      	ldr	r2, [pc, #260]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 800121c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_QSPI_MspInit+0x16c>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001232:	2304      	movs	r3, #4
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001242:	2309      	movs	r3, #9
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4826      	ldr	r0, [pc, #152]	; (80012e8 <HAL_QSPI_MspInit+0x170>)
 800124e:	f003 fd31 	bl	8004cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001252:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001264:	2309      	movs	r3, #9
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	481f      	ldr	r0, [pc, #124]	; (80012ec <HAL_QSPI_MspInit+0x174>)
 8001270:	f003 fd20 	bl	8004cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001286:	230a      	movs	r3, #10
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4816      	ldr	r0, [pc, #88]	; (80012ec <HAL_QSPI_MspInit+0x174>)
 8001292:	f003 fd0f 	bl	8004cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012a8:	2309      	movs	r3, #9
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <HAL_QSPI_MspInit+0x178>)
 80012b4:	f003 fcfe 	bl	8004cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012c8:	230a      	movs	r3, #10
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <HAL_QSPI_MspInit+0x17c>)
 80012d4:	f003 fcee 	bl	8004cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80012d8:	bf00      	nop
 80012da:	3730      	adds	r7, #48	; 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	52005000 	.word	0x52005000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58021000 	.word	0x58021000
 80012ec:	58021400 	.word	0x58021400
 80012f0:	58020c00 	.word	0x58020c00
 80012f4:	58021800 	.word	0x58021800

080012f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_RTC_Init+0x48>)
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <MX_RTC_Init+0x4c>)
 8001300:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_RTC_Init+0x48>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_RTC_Init+0x48>)
 800130a:	227f      	movs	r2, #127	; 0x7f
 800130c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_RTC_Init+0x48>)
 8001310:	22ff      	movs	r2, #255	; 0xff
 8001312:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_RTC_Init+0x48>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_RTC_Init+0x48>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_RTC_Init+0x48>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_RTC_Init+0x48>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_RTC_Init+0x48>)
 800132e:	f006 fc2b 	bl	8007b88 <HAL_RTC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001338:	f7ff feee 	bl	8001118 <Error_Handler>
  }

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20005f48 	.word	0x20005f48
 8001344:	58004000 	.word	0x58004000

08001348 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_RTC_MspInit+0x2c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d105      	bne.n	8001366 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_RTC_MspInit+0x30>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_RTC_MspInit+0x30>)
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	58004000 	.word	0x58004000
 8001378:	58024400 	.word	0x58024400

0800137c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <MX_SPI1_Init+0xa4>)
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <MX_SPI1_Init+0xa8>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_SPI1_Init+0xa4>)
 8001388:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800138c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_SPI1_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_SPI1_Init+0xa4>)
 8001396:	2203      	movs	r2, #3
 8001398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_SPI1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SPI1_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_SPI1_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_SPI1_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_SPI1_Init+0xa4>)
 800140e:	f006 fcc7 	bl	8007da0 <HAL_SPI_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001418:	f7ff fe7e 	bl	8001118 <Error_Handler>
  }

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200062e4 	.word	0x200062e4
 8001424:	40013000 	.word	0x40013000

08001428 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <MX_SPI2_Init+0xa4>)
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <MX_SPI2_Init+0xa8>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_SPI2_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001442:	2203      	movs	r2, #3
 8001444:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_SPI2_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001458:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_SPI2_Init+0xa4>)
 800145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_SPI2_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_SPI2_Init+0xa4>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_SPI2_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI2_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_SPI2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_SPI2_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI2_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_SPI2_Init+0xa4>)
 80014ba:	f006 fc71 	bl	8007da0 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80014c4:	f7ff fe28 	bl	8001118 <Error_Handler>
  }

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20005f6c 	.word	0x20005f6c
 80014d0:	40003800 	.word	0x40003800

080014d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <MX_SPI3_Init+0xa4>)
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <MX_SPI3_Init+0xa8>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <MX_SPI3_Init+0xa4>)
 80014e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MX_SPI3_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_SPI3_Init+0xa4>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_SPI3_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_SPI3_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001500:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001504:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_SPI3_Init+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_SPI3_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_SPI3_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_SPI3_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_SPI3_Init+0xa4>)
 8001566:	f006 fc1b 	bl	8007da0 <HAL_SPI_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001570:	f7ff fdd2 	bl	8001118 <Error_Handler>
  }

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200060e4 	.word	0x200060e4
 800157c:	40003c00 	.word	0x40003c00

08001580 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <MX_SPI4_Init+0xa4>)
 8001586:	4a28      	ldr	r2, [pc, #160]	; (8001628 <MX_SPI4_Init+0xa8>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_SPI4_Init+0xa4>)
 800158c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001590:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <MX_SPI4_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_SPI4_Init+0xa4>)
 800159a:	2203      	movs	r2, #3
 800159c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015b0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_SPI4_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_SPI4_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_SPI4_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_SPI4_Init+0xa4>)
 8001610:	f006 fbc6 	bl	8007da0 <HAL_SPI_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800161a:	f7ff fd7d 	bl	8001118 <Error_Handler>
  }

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000625c 	.word	0x2000625c
 8001628:	40013400 	.word	0x40013400

0800162c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b090      	sub	sp, #64	; 0x40
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a93      	ldr	r2, [pc, #588]	; (8001898 <HAL_SPI_MspInit+0x26c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d16b      	bne.n	8001726 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001654:	4a91      	ldr	r2, [pc, #580]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800165a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800165e:	4b8f      	ldr	r3, [pc, #572]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 800166e:	4a8d      	ldr	r2, [pc, #564]	; (80018a4 <HAL_SPI_MspInit+0x278>)
 8001670:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001672:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 8001674:	2225      	movs	r2, #37	; 0x25
 8001676:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001678:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001684:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 8001686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001698:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800169e:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 80016a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a6:	4b7e      	ldr	r3, [pc, #504]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016ac:	487c      	ldr	r0, [pc, #496]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 80016ae:	f001 fac1 	bl	8002c34 <HAL_DMA_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_SPI_MspInit+0x90>
    {
      Error_Handler();
 80016b8:	f7ff fd2e 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a78      	ldr	r2, [pc, #480]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 80016c0:	67da      	str	r2, [r3, #124]	; 0x7c
 80016c2:	4a77      	ldr	r2, [pc, #476]	; (80018a0 <HAL_SPI_MspInit+0x274>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80016c8:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016ca:	4a78      	ldr	r2, [pc, #480]	; (80018ac <HAL_SPI_MspInit+0x280>)
 80016cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80016ce:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016d0:	2226      	movs	r2, #38	; 0x26
 80016d2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d4:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016da:	4b73      	ldr	r3, [pc, #460]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e0:	4b71      	ldr	r3, [pc, #452]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e8:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ee:	4b6e      	ldr	r3, [pc, #440]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016f4:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016fa:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 80016fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001700:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001702:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001708:	4867      	ldr	r0, [pc, #412]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 800170a:	f001 fa93 	bl	8002c34 <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8001714:	f7ff fd00 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 800171c:	679a      	str	r2, [r3, #120]	; 0x78
 800171e:	4a62      	ldr	r2, [pc, #392]	; (80018a8 <HAL_SPI_MspInit+0x27c>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001724:	e222      	b.n	8001b6c <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a61      	ldr	r2, [pc, #388]	; (80018b0 <HAL_SPI_MspInit+0x284>)
 800172c:	4293      	cmp	r3, r2
 800172e:	f040 80cd 	bne.w	80018cc <HAL_SPI_MspInit+0x2a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_SPI_MspInit+0x270>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	4a51      	ldr	r2, [pc, #324]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001760:	4b4e      	ldr	r3, [pc, #312]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_SPI_MspInit+0x270>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800178c:	230c      	movs	r3, #12
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800179c:	2305      	movs	r3, #5
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	4843      	ldr	r0, [pc, #268]	; (80018b4 <HAL_SPI_MspInit+0x288>)
 80017a8:	f003 fa84 	bl	8004cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017be:	2305      	movs	r3, #5
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	483b      	ldr	r0, [pc, #236]	; (80018b8 <HAL_SPI_MspInit+0x28c>)
 80017ca:	f003 fa73 	bl	8004cb4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017d0:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <HAL_SPI_MspInit+0x294>)
 80017d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017d6:	2227      	movs	r2, #39	; 0x27
 80017d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <HAL_SPI_MspInit+0x290>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_SPI_MspInit+0x290>)
 8001802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001806:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_SPI_MspInit+0x290>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800180e:	482b      	ldr	r0, [pc, #172]	; (80018bc <HAL_SPI_MspInit+0x290>)
 8001810:	f001 fa10 	bl	8002c34 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_SPI_MspInit+0x1f2>
      Error_Handler();
 800181a:	f7ff fc7d 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_SPI_MspInit+0x290>)
 8001822:	67da      	str	r2, [r3, #124]	; 0x7c
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_SPI_MspInit+0x290>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream3;
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_SPI_MspInit+0x29c>)
 800182e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001832:	2228      	movs	r2, #40	; 0x28
 8001834:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001848:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 800185e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001862:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 800186c:	f001 f9e2 	bl	8002c34 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 8001876:	f7ff fc4f 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 800187e:	679a      	str	r2, [r3, #120]	; 0x78
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_SPI_MspInit+0x298>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	2024      	movs	r0, #36	; 0x24
 800188c:	f001 f834 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001890:	2024      	movs	r0, #36	; 0x24
 8001892:	f001 f84b 	bl	800292c <HAL_NVIC_EnableIRQ>
}
 8001896:	e169      	b.n	8001b6c <HAL_SPI_MspInit+0x540>
 8001898:	40013000 	.word	0x40013000
 800189c:	58024400 	.word	0x58024400
 80018a0:	2000636c 	.word	0x2000636c
 80018a4:	40020010 	.word	0x40020010
 80018a8:	2000645c 	.word	0x2000645c
 80018ac:	40020028 	.word	0x40020028
 80018b0:	40003800 	.word	0x40003800
 80018b4:	58020800 	.word	0x58020800
 80018b8:	58020000 	.word	0x58020000
 80018bc:	20005ff4 	.word	0x20005ff4
 80018c0:	40020040 	.word	0x40020040
 80018c4:	200063e4 	.word	0x200063e4
 80018c8:	40020058 	.word	0x40020058
  else if(spiHandle->Instance==SPI3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4aa8      	ldr	r2, [pc, #672]	; (8001b74 <HAL_SPI_MspInit+0x548>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f040 80b3 	bne.w	8001a3e <HAL_SPI_MspInit+0x412>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018d8:	4ba7      	ldr	r3, [pc, #668]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 80018da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018de:	4aa6      	ldr	r2, [pc, #664]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 80018e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018e8:	4ba3      	ldr	r3, [pc, #652]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 80018ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	4a9e      	ldr	r2, [pc, #632]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001906:	4b9c      	ldr	r3, [pc, #624]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001914:	4b98      	ldr	r3, [pc, #608]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	4a97      	ldr	r2, [pc, #604]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001924:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001932:	2304      	movs	r3, #4
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001942:	2307      	movs	r3, #7
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	488b      	ldr	r0, [pc, #556]	; (8001b7c <HAL_SPI_MspInit+0x550>)
 800194e:	f003 f9b1 	bl	8004cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001964:	2306      	movs	r3, #6
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	4884      	ldr	r0, [pc, #528]	; (8001b80 <HAL_SPI_MspInit+0x554>)
 8001970:	f003 f9a0 	bl	8004cb4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream4;
 8001974:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 8001976:	4a84      	ldr	r2, [pc, #528]	; (8001b88 <HAL_SPI_MspInit+0x55c>)
 8001978:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800197a:	4b82      	ldr	r3, [pc, #520]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 800197c:	223d      	movs	r2, #61	; 0x3d
 800197e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001980:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800198c:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 800198e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001992:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001994:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80019a0:	4b78      	ldr	r3, [pc, #480]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019a6:	4b77      	ldr	r3, [pc, #476]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 80019a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ac:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ae:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80019b4:	4873      	ldr	r0, [pc, #460]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 80019b6:	f001 f93d 	bl	8002c34 <HAL_DMA_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_SPI_MspInit+0x398>
      Error_Handler();
 80019c0:	f7ff fbaa 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a6f      	ldr	r2, [pc, #444]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 80019c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_SPI_MspInit+0x558>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019d0:	4b6e      	ldr	r3, [pc, #440]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019d2:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <HAL_SPI_MspInit+0x564>)
 80019d4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019d8:	223e      	movs	r2, #62	; 0x3e
 80019da:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019dc:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80019fc:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a02:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 8001a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a08:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a0a:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a10:	485e      	ldr	r0, [pc, #376]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 8001a12:	f001 f90f 	bl	8002c34 <HAL_DMA_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_SPI_MspInit+0x3f4>
      Error_Handler();
 8001a1c:	f7ff fb7c 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 8001a24:	679a      	str	r2, [r3, #120]	; 0x78
 8001a26:	4a59      	ldr	r2, [pc, #356]	; (8001b8c <HAL_SPI_MspInit+0x560>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2105      	movs	r1, #5
 8001a30:	2033      	movs	r0, #51	; 0x33
 8001a32:	f000 ff61 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a36:	2033      	movs	r0, #51	; 0x33
 8001a38:	f000 ff78 	bl	800292c <HAL_NVIC_EnableIRQ>
}
 8001a3c:	e096      	b.n	8001b6c <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI4)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_SPI_MspInit+0x568>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f040 8091 	bne.w	8001b6c <HAL_SPI_MspInit+0x540>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a4a:	4b4b      	ldr	r3, [pc, #300]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a50:	4a49      	ldr	r2, [pc, #292]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	4a42      	ldr	r2, [pc, #264]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_SPI_MspInit+0x54c>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001a86:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	483d      	ldr	r0, [pc, #244]	; (8001b98 <HAL_SPI_MspInit+0x56c>)
 8001aa4:	f003 f906 	bl	8004cb4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream6;
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_SPI_MspInit+0x574>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ab0:	2253      	movs	r2, #83	; 0x53
 8001ab2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac8:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001ae6:	482d      	ldr	r0, [pc, #180]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001ae8:	f001 f8a4 	bl	8002c34 <HAL_DMA_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_SPI_MspInit+0x4ca>
      Error_Handler();
 8001af2:	f7ff fb11 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001afa:	67da      	str	r2, [r3, #124]	; 0x7c
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_SPI_MspInit+0x570>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream7;
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <HAL_SPI_MspInit+0x57c>)
 8001b06:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b0a:	2254      	movs	r2, #84	; 0x54
 8001b0c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b20:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001b40:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b42:	f001 f877 	bl	8002c34 <HAL_DMA_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_SPI_MspInit+0x524>
      Error_Handler();
 8001b4c:	f7ff fae4 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b54:	679a      	str	r2, [r3, #120]	; 0x78
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <HAL_SPI_MspInit+0x578>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2054      	movs	r0, #84	; 0x54
 8001b62:	f000 fec9 	bl	80028f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001b66:	2054      	movs	r0, #84	; 0x54
 8001b68:	f000 fee0 	bl	800292c <HAL_NVIC_EnableIRQ>
}
 8001b6c:	bf00      	nop
 8001b6e:	3740      	adds	r7, #64	; 0x40
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40003c00 	.word	0x40003c00
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58020400 	.word	0x58020400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	200064d4 	.word	0x200064d4
 8001b88:	40020070 	.word	0x40020070
 8001b8c:	2000616c 	.word	0x2000616c
 8001b90:	40020088 	.word	0x40020088
 8001b94:	40013400 	.word	0x40013400
 8001b98:	58021000 	.word	0x58021000
 8001b9c:	2000606c 	.word	0x2000606c
 8001ba0:	400200a0 	.word	0x400200a0
 8001ba4:	200061e4 	.word	0x200061e4
 8001ba8:	400200b8 	.word	0x400200b8

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x38>)
 8001bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_MspInit+0x38>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_MspInit+0x38>)
 8001bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f06f 0001 	mvn.w	r0, #1
 8001bd8:	f000 fe8e 	bl	80028f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58024400 	.word	0x58024400

08001be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b090      	sub	sp, #64	; 0x40
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	d827      	bhi.n	8001c46 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	2037      	movs	r0, #55	; 0x37
 8001bfc:	f000 fe7c 	bl	80028f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c00:	2037      	movs	r0, #55	; 0x37
 8001c02:	f000 fe93 	bl	800292c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_InitTick+0xc4>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_InitTick+0xc8>)
 8001c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_InitTick+0xc8>)
 8001c14:	f043 0320 	orr.w	r3, r3, #32
 8001c18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_InitTick+0xc8>)
 8001c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c2a:	f107 0210 	add.w	r2, r7, #16
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fc65 	bl	8006504 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <HAL_InitTick+0x6a>
 8001c44:	e001      	b.n	8001c4a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e02b      	b.n	8001ca2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c4a:	f004 fc2f 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8001c4e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001c50:	e004      	b.n	8001c5c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c52:	f004 fc2b 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <HAL_InitTick+0xcc>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	3b01      	subs	r3, #1
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_InitTick+0xd4>)
 8001c6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c76:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c8c:	f006 fc5f 	bl	800854e <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c98:	f006 fcba 	bl	8008610 <HAL_TIM_Base_Start_IT>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	e000      	b.n	8001ca2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3740      	adds	r7, #64	; 0x40
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	2000654c 	.word	0x2000654c
 8001cbc:	40001400 	.word	0x40001400

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <DMA1_Stream2_IRQHandler+0x10>)
 8001cf2:	f001 fd3f 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20005ff4 	.word	0x20005ff4

08001d00 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA1_Stream3_IRQHandler+0x10>)
 8001d06:	f001 fd35 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200063e4 	.word	0x200063e4

08001d14 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA1_Stream4_IRQHandler+0x10>)
 8001d1a:	f001 fd2b 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200064d4 	.word	0x200064d4

08001d28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <DMA1_Stream5_IRQHandler+0x10>)
 8001d2e:	f001 fd21 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000616c 	.word	0x2000616c

08001d3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream6_IRQHandler+0x10>)
 8001d42:	f001 fd17 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000606c 	.word	0x2000606c

08001d50 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <SPI2_IRQHandler+0x10>)
 8001d56:	f006 f91b 	bl	8007f90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20005f6c 	.word	0x20005f6c

08001d64 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <DMA1_Stream7_IRQHandler+0x10>)
 8001d6a:	f001 fd03 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200061e4 	.word	0x200061e4

08001d78 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <SPI3_IRQHandler+0x10>)
 8001d7e:	f006 f907 	bl	8007f90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200060e4 	.word	0x200060e4

08001d8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM7_IRQHandler+0x10>)
 8001d92:	f006 fc73 	bl	800867c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000654c 	.word	0x2000654c

08001da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <DMA2_Stream0_IRQHandler+0x10>)
 8001da6:	f001 fce5 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200068f4 	.word	0x200068f4

08001db4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <DMA2_Stream1_IRQHandler+0x10>)
 8001dba:	f001 fcdb 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20006804 	.word	0x20006804

08001dc8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <DMA2_Stream4_IRQHandler+0x10>)
 8001dce:	f001 fcd1 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20006598 	.word	0x20006598

08001ddc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <ETH_IRQHandler+0x10>)
 8001de2:	f002 fe2d 	bl	8004a40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20006c78 	.word	0x20006c78

08001df0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <DMA2_Stream5_IRQHandler+0x10>)
 8001df6:	f001 fcbd 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000696c 	.word	0x2000696c

08001e04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DMA2_Stream6_IRQHandler+0x10>)
 8001e0a:	f001 fcb3 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20006610 	.word	0x20006610

08001e18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <DMA2_Stream7_IRQHandler+0x10>)
 8001e1e:	f001 fca9 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000687c 	.word	0x2000687c

08001e2c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <SPI4_IRQHandler+0x10>)
 8001e32:	f006 f8ad 	bl	8007f90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000625c 	.word	0x2000625c

08001e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_kill>:

int _kill(int pid, int sig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <_kill+0x20>)
 8001e5c:	2216      	movs	r2, #22
 8001e5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20006d5c 	.word	0x20006d5c

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe5 	bl	8001e50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e86:	e7fe      	b.n	8001e86 <_exit+0x12>

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d205      	bcs.n	8001ec4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <_sbrk+0x6c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20020000 	.word	0x20020000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000204 	.word	0x20000204
 8001ef0:	20006d68 	.word	0x20006d68
 8001ef4:	20006d5c 	.word	0x20006d5c

08001ef8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001efe:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <MX_USART1_UART_Init+0x94>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f02:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f40:	4811      	ldr	r0, [pc, #68]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f42:	f006 fd9b 	bl	8008a7c <HAL_UART_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f4c:	f7ff f8e4 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	480d      	ldr	r0, [pc, #52]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f54:	f007 fdcb 	bl	8009aee <HAL_UARTEx_SetTxFifoThreshold>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f5e:	f7ff f8db 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4808      	ldr	r0, [pc, #32]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f66:	f007 fe00 	bl	8009b6a <HAL_UARTEx_SetRxFifoThreshold>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f70:	f7ff f8d2 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_USART1_UART_Init+0x90>)
 8001f76:	f007 fd81 	bl	8009a7c <HAL_UARTEx_DisableFifoMode>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f80:	f7ff f8ca 	bl	8001118 <Error_Handler>
  }

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200069e4 	.word	0x200069e4
 8001f8c:	40011000 	.word	0x40011000

08001f90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fda:	f006 fd4f 	bl	8008a7c <HAL_UART_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fe4:	f7ff f898 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe8:	2100      	movs	r1, #0
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001fec:	f007 fd7f 	bl	8009aee <HAL_UARTEx_SetTxFifoThreshold>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ff6:	f7ff f88f 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <MX_USART2_UART_Init+0x90>)
 8001ffe:	f007 fdb4 	bl	8009b6a <HAL_UARTEx_SetRxFifoThreshold>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002008:	f7ff f886 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_USART2_UART_Init+0x90>)
 800200e:	f007 fd35 	bl	8009a7c <HAL_UARTEx_DisableFifoMode>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002018:	f7ff f87e 	bl	8001118 <Error_Handler>
  }

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20006afc 	.word	0x20006afc
 8002024:	40004400 	.word	0x40004400

08002028 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <MX_USART3_UART_Init+0x94>)
 8002030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002072:	f006 fd03 	bl	8008a7c <HAL_UART_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800207c:	f7ff f84c 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002080:	2100      	movs	r1, #0
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002084:	f007 fd33 	bl	8009aee <HAL_UARTEx_SetTxFifoThreshold>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800208e:	f7ff f843 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002092:	2100      	movs	r1, #0
 8002094:	4808      	ldr	r0, [pc, #32]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 8002096:	f007 fd68 	bl	8009b6a <HAL_UARTEx_SetRxFifoThreshold>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020a0:	f7ff f83a 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_USART3_UART_Init+0x90>)
 80020a6:	f007 fce9 	bl	8009a7c <HAL_UARTEx_DisableFifoMode>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80020b0:	f7ff f832 	bl	8001118 <Error_Handler>
  }

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20006700 	.word	0x20006700
 80020bc:	40004800 	.word	0x40004800

080020c0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <MX_USART6_UART_Init+0x94>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_USART6_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <MX_USART6_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <MX_USART6_UART_Init+0x90>)
 800210a:	f006 fcb7 	bl	8008a7c <HAL_UART_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002114:	f7ff f800 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002118:	2100      	movs	r1, #0
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <MX_USART6_UART_Init+0x90>)
 800211c:	f007 fce7 	bl	8009aee <HAL_UARTEx_SetTxFifoThreshold>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002126:	f7fe fff7 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212a:	2100      	movs	r1, #0
 800212c:	4808      	ldr	r0, [pc, #32]	; (8002150 <MX_USART6_UART_Init+0x90>)
 800212e:	f007 fd1c 	bl	8009b6a <HAL_UARTEx_SetRxFifoThreshold>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002138:	f7fe ffee 	bl	8001118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_USART6_UART_Init+0x90>)
 800213e:	f007 fc9d 	bl	8009a7c <HAL_UARTEx_DisableFifoMode>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002148:	f7fe ffe6 	bl	8001118 <Error_Handler>
  }

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20006a70 	.word	0x20006a70
 8002154:	40011400 	.word	0x40011400

08002158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b090      	sub	sp, #64	; 0x40
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a9f      	ldr	r2, [pc, #636]	; (80023f4 <HAL_UART_MspInit+0x29c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f040 808c 	bne.w	8002294 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217c:	4b9e      	ldr	r3, [pc, #632]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 800217e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002182:	4a9d      	ldr	r2, [pc, #628]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800218c:	4b9a      	ldr	r3, [pc, #616]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 800218e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b97      	ldr	r3, [pc, #604]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	4a95      	ldr	r2, [pc, #596]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021aa:	4b93      	ldr	r3, [pc, #588]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021ca:	2304      	movs	r3, #4
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4889      	ldr	r0, [pc, #548]	; (80023fc <HAL_UART_MspInit+0x2a4>)
 80021d6:	f002 fd6d 	bl	8004cb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 80021da:	4b89      	ldr	r3, [pc, #548]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 80021dc:	4a89      	ldr	r2, [pc, #548]	; (8002404 <HAL_UART_MspInit+0x2ac>)
 80021de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80021e0:	4b87      	ldr	r3, [pc, #540]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 80021e2:	2229      	movs	r2, #41	; 0x29
 80021e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e6:	4b86      	ldr	r3, [pc, #536]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ec:	4b84      	ldr	r3, [pc, #528]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021f2:	4b83      	ldr	r3, [pc, #524]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 80021f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b81      	ldr	r3, [pc, #516]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b7f      	ldr	r3, [pc, #508]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002206:	4b7e      	ldr	r3, [pc, #504]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800220c:	4b7c      	ldr	r3, [pc, #496]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 800220e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002212:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002214:	4b7a      	ldr	r3, [pc, #488]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800221a:	4879      	ldr	r0, [pc, #484]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 800221c:	f000 fd0a 	bl	8002c34 <HAL_DMA_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002226:	f7fe ff77 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a74      	ldr	r2, [pc, #464]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 800222e:	679a      	str	r2, [r3, #120]	; 0x78
 8002230:	4a73      	ldr	r2, [pc, #460]	; (8002400 <HAL_UART_MspInit+0x2a8>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 8002236:	4b74      	ldr	r3, [pc, #464]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002238:	4a74      	ldr	r2, [pc, #464]	; (800240c <HAL_UART_MspInit+0x2b4>)
 800223a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800223c:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 800223e:	222a      	movs	r2, #42	; 0x2a
 8002240:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002242:	4b71      	ldr	r3, [pc, #452]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b6e      	ldr	r3, [pc, #440]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002254:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002256:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002262:	4b69      	ldr	r3, [pc, #420]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002268:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 800226a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800226e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002270:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002276:	4864      	ldr	r0, [pc, #400]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 8002278:	f000 fcdc 	bl	8002c34 <HAL_DMA_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002282:	f7fe ff49 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a5f      	ldr	r2, [pc, #380]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 800228a:	675a      	str	r2, [r3, #116]	; 0x74
 800228c:	4a5e      	ldr	r2, [pc, #376]	; (8002408 <HAL_UART_MspInit+0x2b0>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002292:	e1ca      	b.n	800262a <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5d      	ldr	r2, [pc, #372]	; (8002410 <HAL_UART_MspInit+0x2b8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 80c6 	bne.w	800242c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a0:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a6:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b0:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c4:	4a4c      	ldr	r2, [pc, #304]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e2:	4a45      	ldr	r2, [pc, #276]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_UART_MspInit+0x2a0>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022fa:	2308      	movs	r3, #8
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230a:	2307      	movs	r3, #7
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002312:	4619      	mov	r1, r3
 8002314:	483f      	ldr	r0, [pc, #252]	; (8002414 <HAL_UART_MspInit+0x2bc>)
 8002316:	f002 fccd 	bl	8004cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800231a:	2320      	movs	r3, #32
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232a:	2307      	movs	r3, #7
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002332:	4619      	mov	r1, r3
 8002334:	4838      	ldr	r0, [pc, #224]	; (8002418 <HAL_UART_MspInit+0x2c0>)
 8002336:	f002 fcbd 	bl	8004cb4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_UART_MspInit+0x2c4>)
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_UART_MspInit+0x2c8>)
 800233e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002342:	222b      	movs	r2, #43	; 0x2b
 8002344:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_UART_MspInit+0x2c4>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002352:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002358:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_UART_MspInit+0x2c4>)
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002368:	2200      	movs	r2, #0
 800236a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_UART_MspInit+0x2c4>)
 800236e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002372:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800237a:	4828      	ldr	r0, [pc, #160]	; (800241c <HAL_UART_MspInit+0x2c4>)
 800237c:	f000 fc5a 	bl	8002c34 <HAL_DMA_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_UART_MspInit+0x232>
      Error_Handler();
 8002386:	f7fe fec7 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <HAL_UART_MspInit+0x2c4>)
 800238e:	679a      	str	r2, [r3, #120]	; 0x78
 8002390:	4a22      	ldr	r2, [pc, #136]	; (800241c <HAL_UART_MspInit+0x2c4>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 8002398:	4a23      	ldr	r2, [pc, #140]	; (8002428 <HAL_UART_MspInit+0x2d0>)
 800239a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 800239e:	222c      	movs	r2, #44	; 0x2c
 80023a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023d6:	4813      	ldr	r0, [pc, #76]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023d8:	f000 fc2c 	bl	8002c34 <HAL_DMA_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 80023e2:	f7fe fe99 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023ea:	675a      	str	r2, [r3, #116]	; 0x74
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_UART_MspInit+0x2cc>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023f2:	e11a      	b.n	800262a <HAL_UART_MspInit+0x4d2>
 80023f4:	40011000 	.word	0x40011000
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020400 	.word	0x58020400
 8002400:	200068f4 	.word	0x200068f4
 8002404:	40020410 	.word	0x40020410
 8002408:	20006804 	.word	0x20006804
 800240c:	40020428 	.word	0x40020428
 8002410:	40004400 	.word	0x40004400
 8002414:	58020000 	.word	0x58020000
 8002418:	58020c00 	.word	0x58020c00
 800241c:	20006598 	.word	0x20006598
 8002420:	40020470 	.word	0x40020470
 8002424:	2000696c 	.word	0x2000696c
 8002428:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a80      	ldr	r2, [pc, #512]	; (8002634 <HAL_UART_MspInit+0x4dc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d16b      	bne.n	800250e <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002436:	4b80      	ldr	r3, [pc, #512]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 8002438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243c:	4a7e      	ldr	r2, [pc, #504]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 800243e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002442:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002446:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 8002448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8002454:	4b79      	ldr	r3, [pc, #484]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002456:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_UART_MspInit+0x4e8>)
 8002458:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800245a:	4b78      	ldr	r3, [pc, #480]	; (800263c <HAL_UART_MspInit+0x4e4>)
 800245c:	222d      	movs	r2, #45	; 0x2d
 800245e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002460:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002466:	4b75      	ldr	r3, [pc, #468]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246c:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_UART_MspInit+0x4e4>)
 800246e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002472:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002474:	4b71      	ldr	r3, [pc, #452]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_UART_MspInit+0x4e4>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002480:	4b6e      	ldr	r3, [pc, #440]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002488:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800248c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248e:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002490:	2200      	movs	r2, #0
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002494:	4869      	ldr	r0, [pc, #420]	; (800263c <HAL_UART_MspInit+0x4e4>)
 8002496:	f000 fbcd 	bl	8002c34 <HAL_DMA_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80024a0:	f7fe fe3a 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_UART_MspInit+0x4e4>)
 80024a8:	679a      	str	r2, [r3, #120]	; 0x78
 80024aa:	4a64      	ldr	r2, [pc, #400]	; (800263c <HAL_UART_MspInit+0x4e4>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 80024b0:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024b2:	4a65      	ldr	r2, [pc, #404]	; (8002648 <HAL_UART_MspInit+0x4f0>)
 80024b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024b8:	222e      	movs	r2, #46	; 0x2e
 80024ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c2:	4b60      	ldr	r3, [pc, #384]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c8:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d0:	4b5c      	ldr	r3, [pc, #368]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ea:	4b56      	ldr	r3, [pc, #344]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80024f0:	4854      	ldr	r0, [pc, #336]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 80024f2:	f000 fb9f 	bl	8002c34 <HAL_DMA_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_MspInit+0x3a8>
      Error_Handler();
 80024fc:	f7fe fe0c 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 8002504:	675a      	str	r2, [r3, #116]	; 0x74
 8002506:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_UART_MspInit+0x4ec>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800250c:	e08d      	b.n	800262a <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART6)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4e      	ldr	r2, [pc, #312]	; (800264c <HAL_UART_MspInit+0x4f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	f040 8088 	bne.w	800262a <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002520:	4a45      	ldr	r2, [pc, #276]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 800252c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002538:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	4a3e      	ldr	r2, [pc, #248]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_UART_MspInit+0x4e0>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002566:	2307      	movs	r3, #7
 8002568:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	4837      	ldr	r0, [pc, #220]	; (8002650 <HAL_UART_MspInit+0x4f8>)
 8002572:	f002 fb9f 	bl	8004cb4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 8002578:	4a37      	ldr	r2, [pc, #220]	; (8002658 <HAL_UART_MspInit+0x500>)
 800257a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 800257e:	2247      	movs	r2, #71	; 0x47
 8002580:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 8002590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002594:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002596:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80025a2:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025b4:	4827      	ldr	r0, [pc, #156]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 80025b6:	f000 fb3d 	bl	8002c34 <HAL_DMA_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_UART_MspInit+0x46c>
      Error_Handler();
 80025c0:	f7fe fdaa 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 80025c8:	679a      	str	r2, [r3, #120]	; 0x78
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_UART_MspInit+0x4fc>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_UART_MspInit+0x504>)
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <HAL_UART_MspInit+0x508>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_UART_MspInit+0x504>)
 80025d8:	2248      	movs	r2, #72	; 0x48
 80025da:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_UART_MspInit+0x504>)
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_UART_MspInit+0x504>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_UART_MspInit+0x504>)
 80025ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ee:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_UART_MspInit+0x504>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_UART_MspInit+0x504>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_UART_MspInit+0x504>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_UART_MspInit+0x504>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <HAL_UART_MspInit+0x504>)
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <HAL_UART_MspInit+0x504>)
 8002610:	f000 fb10 	bl	8002c34 <HAL_DMA_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_UART_MspInit+0x4c6>
      Error_Handler();
 800261a:	f7fe fd7d 	bl	8001118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_UART_MspInit+0x504>)
 8002622:	675a      	str	r2, [r3, #116]	; 0x74
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <HAL_UART_MspInit+0x504>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6393      	str	r3, [r2, #56]	; 0x38
}
 800262a:	bf00      	nop
 800262c:	3740      	adds	r7, #64	; 0x40
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40004800 	.word	0x40004800
 8002638:	58024400 	.word	0x58024400
 800263c:	20006688 	.word	0x20006688
 8002640:	40020440 	.word	0x40020440
 8002644:	2000678c 	.word	0x2000678c
 8002648:	40020458 	.word	0x40020458
 800264c:	40011400 	.word	0x40011400
 8002650:	58020800 	.word	0x58020800
 8002654:	20006610 	.word	0x20006610
 8002658:	400204a0 	.word	0x400204a0
 800265c:	2000687c 	.word	0x2000687c
 8002660:	400204b8 	.word	0x400204b8

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002668:	f7fd ffc2 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800266c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800266e:	e003      	b.n	8002678 <LoopCopyDataInit>

08002670 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002672:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002674:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002676:	3104      	adds	r1, #4

08002678 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002678:	480a      	ldr	r0, [pc, #40]	; (80026a4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800267c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800267e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002680:	d3f6      	bcc.n	8002670 <CopyDataInit>
  ldr  r2, =_sbss
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002684:	e002      	b.n	800268c <LoopFillZerobss>

08002686 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002686:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002688:	f842 3b04 	str.w	r3, [r2], #4

0800268c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800268e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002690:	d3f9      	bcc.n	8002686 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002692:	f00a fa71 	bl	800cb78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7fe fb97 	bl	8000dc8 <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026a0:	0800e984 	.word	0x0800e984
  ldr  r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026a8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80026ac:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80026b0:	20006d64 	.word	0x20006d64

080026b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC3_IRQHandler>
	...

080026b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026be:	2003      	movs	r0, #3
 80026c0:	f000 f90f 	bl	80028e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026c4:	f003 fd50 	bl	8006168 <HAL_RCC_GetSysClockFreq>
 80026c8:	4601      	mov	r1, r0
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_Init+0x68>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <HAL_Init+0x6c>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa21 f303 	lsr.w	r3, r1, r3
 80026e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_Init+0x68>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_Init+0x6c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_Init+0x70>)
 80026fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_Init+0x74>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff fa70 	bl	8001be8 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e002      	b.n	8002718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002712:	f7ff fa4b 	bl	8001bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	0800e69c 	.word	0x0800e69c
 8002728:	20000004 	.word	0x20000004
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	2000000c 	.word	0x2000000c
 8002754:	20006b88 	.word	0x20006b88

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20006b88 	.word	0x20006b88

08002770 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetREVID+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0c1b      	lsrs	r3, r3, #16
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	5c001000 	.word	0x5c001000

08002788 <__NVIC_SetPriorityGrouping>:
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	05fa0000 	.word	0x05fa0000

080027d0 <__NVIC_GetPriorityGrouping>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff4c 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002906:	f7ff ff63 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 800290a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6978      	ldr	r0, [r7, #20]
 8002912:	f7ff ffb3 	bl	800287c <NVIC_EncodePriority>
 8002916:	4602      	mov	r2, r0
 8002918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff82 	bl	8002828 <__NVIC_SetPriority>
}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff56 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800294c:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_MPU_Disable+0x24>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	4a05      	ldr	r2, [pc, #20]	; (800296c <HAL_MPU_Disable+0x24>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_MPU_Disable+0x28>)
 800295e:	2200      	movs	r2, #0
 8002960:	605a      	str	r2, [r3, #4]
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	e000ed90 	.word	0xe000ed90

08002974 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_MPU_Enable+0x34>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_MPU_Enable+0x38>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_MPU_Enable+0x38>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002996:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed90 	.word	0xe000ed90
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	785a      	ldrb	r2, [r3, #1]
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_MPU_ConfigRegion+0x84>)
 80029be:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d029      	beq.n	8002a1c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_MPU_ConfigRegion+0x84>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7b1b      	ldrb	r3, [r3, #12]
 80029d4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7adb      	ldrb	r3, [r3, #11]
 80029da:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7a9b      	ldrb	r3, [r3, #10]
 80029e2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7b5b      	ldrb	r3, [r3, #13]
 80029ea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7b9b      	ldrb	r3, [r3, #14]
 80029f2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7bdb      	ldrb	r3, [r3, #15]
 80029fa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7a5b      	ldrb	r3, [r3, #9]
 8002a02:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7a1b      	ldrb	r3, [r3, #8]
 8002a0a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a0c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a16:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a18:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002a1a:	e005      	b.n	8002a28 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_MPU_ConfigRegion+0x84>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_MPU_ConfigRegion+0x84>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed90 	.word	0xe000ed90

08002a38 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_GetCurrentCPUID+0x24>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	2b07      	cmp	r3, #7
 8002a48:	d101      	bne.n	8002a4e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e000      	b.n	8002a50 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002a4e:	2301      	movs	r3, #1
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e054      	b.n	8002b1c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7f5b      	ldrb	r3, [r3, #29]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fe70 	bl	8000768 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	791b      	ldrb	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_CRC_Init+0xc4>)
 8002a9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0218 	bic.w	r2, r2, #24
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	e00c      	b.n	8002aca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f834 	bl	8002b28 <HAL_CRCEx_Polynomial_Set>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e028      	b.n	8002b1c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	795b      	ldrb	r3, [r3, #5]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ada:	611a      	str	r2, [r3, #16]
 8002adc:	e004      	b.n	8002ae8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6912      	ldr	r2, [r2, #16]
 8002ae6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	04c11db7 	.word	0x04c11db7

08002b28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b38:	231f      	movs	r3, #31
 8002b3a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b3c:	bf00      	nop
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	613a      	str	r2, [r7, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HAL_CRCEx_Polynomial_Set+0x34>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b18      	cmp	r3, #24
 8002b60:	d846      	bhi.n	8002bf0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002b62:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002bf7 	.word	0x08002bf7
 8002b6c:	08002bf1 	.word	0x08002bf1
 8002b70:	08002bf1 	.word	0x08002bf1
 8002b74:	08002bf1 	.word	0x08002bf1
 8002b78:	08002bf1 	.word	0x08002bf1
 8002b7c:	08002bf1 	.word	0x08002bf1
 8002b80:	08002bf1 	.word	0x08002bf1
 8002b84:	08002bf1 	.word	0x08002bf1
 8002b88:	08002be5 	.word	0x08002be5
 8002b8c:	08002bf1 	.word	0x08002bf1
 8002b90:	08002bf1 	.word	0x08002bf1
 8002b94:	08002bf1 	.word	0x08002bf1
 8002b98:	08002bf1 	.word	0x08002bf1
 8002b9c:	08002bf1 	.word	0x08002bf1
 8002ba0:	08002bf1 	.word	0x08002bf1
 8002ba4:	08002bf1 	.word	0x08002bf1
 8002ba8:	08002bd9 	.word	0x08002bd9
 8002bac:	08002bf1 	.word	0x08002bf1
 8002bb0:	08002bf1 	.word	0x08002bf1
 8002bb4:	08002bf1 	.word	0x08002bf1
 8002bb8:	08002bf1 	.word	0x08002bf1
 8002bbc:	08002bf1 	.word	0x08002bf1
 8002bc0:	08002bf1 	.word	0x08002bf1
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002bcd 	.word	0x08002bcd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d913      	bls.n	8002bfa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bd6:	e010      	b.n	8002bfa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b07      	cmp	r3, #7
 8002bdc:	d90f      	bls.n	8002bfe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002be2:	e00c      	b.n	8002bfe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d90b      	bls.n	8002c02 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bee:	e008      	b.n	8002c02 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf4:	e006      	b.n	8002c04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e004      	b.n	8002c04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c02:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 0118 	bic.w	r1, r3, #24
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff fd8c 	bl	8002758 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e316      	b.n	800327a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a66      	ldr	r2, [pc, #408]	; (8002dec <HAL_DMA_Init+0x1b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d04a      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_DMA_Init+0x1bc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d045      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a63      	ldr	r2, [pc, #396]	; (8002df4 <HAL_DMA_Init+0x1c0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d040      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a62      	ldr	r2, [pc, #392]	; (8002df8 <HAL_DMA_Init+0x1c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d03b      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_DMA_Init+0x1c8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d036      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5f      	ldr	r2, [pc, #380]	; (8002e00 <HAL_DMA_Init+0x1cc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d031      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_DMA_Init+0x1d0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02c      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5c      	ldr	r2, [pc, #368]	; (8002e08 <HAL_DMA_Init+0x1d4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d027      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_DMA_Init+0x1d8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d022      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a59      	ldr	r2, [pc, #356]	; (8002e10 <HAL_DMA_Init+0x1dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d01d      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a57      	ldr	r2, [pc, #348]	; (8002e14 <HAL_DMA_Init+0x1e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a56      	ldr	r2, [pc, #344]	; (8002e18 <HAL_DMA_Init+0x1e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <HAL_DMA_Init+0x1e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a53      	ldr	r2, [pc, #332]	; (8002e20 <HAL_DMA_Init+0x1ec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	; (8002e24 <HAL_DMA_Init+0x1f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_Init+0xb8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a50      	ldr	r2, [pc, #320]	; (8002e28 <HAL_DMA_Init+0x1f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_DMA_Init+0xbc>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_DMA_Init+0xbe>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 813b 	beq.w	8002f6e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a37      	ldr	r2, [pc, #220]	; (8002dec <HAL_DMA_Init+0x1b8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d04a      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a36      	ldr	r2, [pc, #216]	; (8002df0 <HAL_DMA_Init+0x1bc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d045      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a34      	ldr	r2, [pc, #208]	; (8002df4 <HAL_DMA_Init+0x1c0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d040      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a33      	ldr	r2, [pc, #204]	; (8002df8 <HAL_DMA_Init+0x1c4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d03b      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <HAL_DMA_Init+0x1c8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d036      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <HAL_DMA_Init+0x1cc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d031      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <HAL_DMA_Init+0x1d0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02c      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <HAL_DMA_Init+0x1d4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d027      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <HAL_DMA_Init+0x1d8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d022      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <HAL_DMA_Init+0x1dc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01d      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a28      	ldr	r2, [pc, #160]	; (8002e14 <HAL_DMA_Init+0x1e0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d018      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_DMA_Init+0x1e4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <HAL_DMA_Init+0x1e8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_DMA_Init+0x1ec>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_DMA_Init+0x1f0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_Init+0x174>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_DMA_Init+0x1f4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <HAL_DMA_Init+0x186>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e007      	b.n	8002dca <HAL_DMA_Init+0x196>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dca:	e02f      	b.n	8002e2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dcc:	f7ff fcc4 	bl	8002758 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d928      	bls.n	8002e2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e246      	b.n	800327a <HAL_DMA_Init+0x646>
 8002dec:	40020010 	.word	0x40020010
 8002df0:	40020028 	.word	0x40020028
 8002df4:	40020040 	.word	0x40020040
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	40020070 	.word	0x40020070
 8002e00:	40020088 	.word	0x40020088
 8002e04:	400200a0 	.word	0x400200a0
 8002e08:	400200b8 	.word	0x400200b8
 8002e0c:	40020410 	.word	0x40020410
 8002e10:	40020428 	.word	0x40020428
 8002e14:	40020440 	.word	0x40020440
 8002e18:	40020458 	.word	0x40020458
 8002e1c:	40020470 	.word	0x40020470
 8002e20:	40020488 	.word	0x40020488
 8002e24:	400204a0 	.word	0x400204a0
 8002e28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1c8      	bne.n	8002dcc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4b83      	ldr	r3, [pc, #524]	; (8003054 <HAL_DMA_Init+0x420>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d107      	bne.n	8002e90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e90:	4b71      	ldr	r3, [pc, #452]	; (8003058 <HAL_DMA_Init+0x424>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b71      	ldr	r3, [pc, #452]	; (800305c <HAL_DMA_Init+0x428>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9c:	d328      	bcc.n	8002ef0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b28      	cmp	r3, #40	; 0x28
 8002ea4:	d903      	bls.n	8002eae <HAL_DMA_Init+0x27a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8002eac:	d917      	bls.n	8002ede <HAL_DMA_Init+0x2aa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8002eb4:	d903      	bls.n	8002ebe <HAL_DMA_Init+0x28a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b42      	cmp	r3, #66	; 0x42
 8002ebc:	d90f      	bls.n	8002ede <HAL_DMA_Init+0x2aa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b46      	cmp	r3, #70	; 0x46
 8002ec4:	d903      	bls.n	8002ece <HAL_DMA_Init+0x29a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b48      	cmp	r3, #72	; 0x48
 8002ecc:	d907      	bls.n	8002ede <HAL_DMA_Init+0x2aa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b4e      	cmp	r3, #78	; 0x4e
 8002ed4:	d905      	bls.n	8002ee2 <HAL_DMA_Init+0x2ae>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b52      	cmp	r3, #82	; 0x52
 8002edc:	d801      	bhi.n	8002ee2 <HAL_DMA_Init+0x2ae>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_DMA_Init+0x2b0>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0307 	bic.w	r3, r3, #7
 8002f06:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d117      	bne.n	8002f4a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f001 fbfd 	bl	800472c <DMA_CheckFifoParam>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e197      	b.n	800327a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f001 fb38 	bl	80045c8 <DMA_CalcBaseAndBitshift>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	223f      	movs	r2, #63	; 0x3f
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e0cd      	b.n	800310a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_DMA_Init+0x42c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d022      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_DMA_Init+0x430>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01d      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a38      	ldr	r2, [pc, #224]	; (8003068 <HAL_DMA_Init+0x434>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d018      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_DMA_Init+0x438>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a35      	ldr	r2, [pc, #212]	; (8003070 <HAL_DMA_Init+0x43c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_DMA_Init+0x440>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a32      	ldr	r2, [pc, #200]	; (8003078 <HAL_DMA_Init+0x444>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_DMA_Init+0x38a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_DMA_Init+0x448>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_DMA_Init+0x38e>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_DMA_Init+0x390>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8097 	beq.w	80030f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a24      	ldr	r2, [pc, #144]	; (8003060 <HAL_DMA_Init+0x42c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d021      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_DMA_Init+0x430>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01c      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_DMA_Init+0x434>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d017      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_DMA_Init+0x438>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d012      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_DMA_Init+0x43c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00d      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_DMA_Init+0x440>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d008      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_DMA_Init+0x444>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <HAL_DMA_Init+0x3e4>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_DMA_Init+0x448>)
 8003016:	4293      	cmp	r3, r2
 8003018:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_DMA_Init+0x44c>)
 8003036:	4013      	ands	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d020      	beq.n	8003084 <HAL_DMA_Init+0x450>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d102      	bne.n	8003050 <HAL_DMA_Init+0x41c>
 800304a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800304e:	e01a      	b.n	8003086 <HAL_DMA_Init+0x452>
 8003050:	2300      	movs	r3, #0
 8003052:	e018      	b.n	8003086 <HAL_DMA_Init+0x452>
 8003054:	fe10803f 	.word	0xfe10803f
 8003058:	5c001000 	.word	0x5c001000
 800305c:	ffff0000 	.word	0xffff0000
 8003060:	58025408 	.word	0x58025408
 8003064:	5802541c 	.word	0x5802541c
 8003068:	58025430 	.word	0x58025430
 800306c:	58025444 	.word	0x58025444
 8003070:	58025458 	.word	0x58025458
 8003074:	5802546c 	.word	0x5802546c
 8003078:	58025480 	.word	0x58025480
 800307c:	58025494 	.word	0x58025494
 8003080:	fffe000f 	.word	0xfffe000f
 8003084:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800308c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800309c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b6e      	ldr	r3, [pc, #440]	; (8003284 <HAL_DMA_Init+0x650>)
 80030cc:	4413      	add	r3, r2
 80030ce:	4a6e      	ldr	r2, [pc, #440]	; (8003288 <HAL_DMA_Init+0x654>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f001 fa73 	bl	80045c8 <DMA_CalcBaseAndBitshift>
 80030e2:	4603      	mov	r3, r0
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	2201      	movs	r2, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e008      	b.n	800310a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2203      	movs	r2, #3
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0b7      	b.n	800327a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5f      	ldr	r2, [pc, #380]	; (800328c <HAL_DMA_Init+0x658>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d072      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5d      	ldr	r2, [pc, #372]	; (8003290 <HAL_DMA_Init+0x65c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d06d      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <HAL_DMA_Init+0x660>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d068      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5a      	ldr	r2, [pc, #360]	; (8003298 <HAL_DMA_Init+0x664>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d063      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a59      	ldr	r2, [pc, #356]	; (800329c <HAL_DMA_Init+0x668>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d05e      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_DMA_Init+0x66c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d059      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_DMA_Init+0x670>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d054      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a54      	ldr	r2, [pc, #336]	; (80032a8 <HAL_DMA_Init+0x674>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04f      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a53      	ldr	r2, [pc, #332]	; (80032ac <HAL_DMA_Init+0x678>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d04a      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a51      	ldr	r2, [pc, #324]	; (80032b0 <HAL_DMA_Init+0x67c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d045      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_DMA_Init+0x680>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_DMA_Init+0x684>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d03b      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_DMA_Init+0x688>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d036      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_DMA_Init+0x68c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d031      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <HAL_DMA_Init+0x690>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d02c      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a48      	ldr	r2, [pc, #288]	; (80032c8 <HAL_DMA_Init+0x694>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d027      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a47      	ldr	r2, [pc, #284]	; (80032cc <HAL_DMA_Init+0x698>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a45      	ldr	r2, [pc, #276]	; (80032d0 <HAL_DMA_Init+0x69c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a44      	ldr	r2, [pc, #272]	; (80032d4 <HAL_DMA_Init+0x6a0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a42      	ldr	r2, [pc, #264]	; (80032d8 <HAL_DMA_Init+0x6a4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a41      	ldr	r2, [pc, #260]	; (80032dc <HAL_DMA_Init+0x6a8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <HAL_DMA_Init+0x6ac>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a3e      	ldr	r2, [pc, #248]	; (80032e4 <HAL_DMA_Init+0x6b0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_Init+0x5c6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a3c      	ldr	r2, [pc, #240]	; (80032e8 <HAL_DMA_Init+0x6b4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_DMA_Init+0x5ca>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_DMA_Init+0x5cc>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d032      	beq.n	800326a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f001 fb0d 	bl	8004824 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d102      	bne.n	8003218 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800322c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_DMA_Init+0x624>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b08      	cmp	r3, #8
 800323c:	d80c      	bhi.n	8003258 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f001 fb8a 	bl	8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e008      	b.n	800326a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	a7fdabf8 	.word	0xa7fdabf8
 8003288:	cccccccd 	.word	0xcccccccd
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
 80032cc:	58025408 	.word	0x58025408
 80032d0:	5802541c 	.word	0x5802541c
 80032d4:	58025430 	.word	0x58025430
 80032d8:	58025444 	.word	0x58025444
 80032dc:	58025458 	.word	0x58025458
 80032e0:	5802546c 	.word	0x5802546c
 80032e4:	58025480 	.word	0x58025480
 80032e8:	58025494 	.word	0x58025494

080032ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e205      	b.n	800370a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d004      	beq.n	8003314 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e1fa      	b.n	800370a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8c      	ldr	r2, [pc, #560]	; (800354c <HAL_DMA_Abort_IT+0x260>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d04a      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_DMA_Abort_IT+0x264>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d045      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a89      	ldr	r2, [pc, #548]	; (8003554 <HAL_DMA_Abort_IT+0x268>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d040      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a88      	ldr	r2, [pc, #544]	; (8003558 <HAL_DMA_Abort_IT+0x26c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d03b      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a86      	ldr	r2, [pc, #536]	; (800355c <HAL_DMA_Abort_IT+0x270>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d036      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a85      	ldr	r2, [pc, #532]	; (8003560 <HAL_DMA_Abort_IT+0x274>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d031      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a83      	ldr	r2, [pc, #524]	; (8003564 <HAL_DMA_Abort_IT+0x278>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02c      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a82      	ldr	r2, [pc, #520]	; (8003568 <HAL_DMA_Abort_IT+0x27c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d027      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a80      	ldr	r2, [pc, #512]	; (800356c <HAL_DMA_Abort_IT+0x280>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d022      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7f      	ldr	r2, [pc, #508]	; (8003570 <HAL_DMA_Abort_IT+0x284>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d01d      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_DMA_Abort_IT+0x288>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d018      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_DMA_Abort_IT+0x28c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7a      	ldr	r2, [pc, #488]	; (800357c <HAL_DMA_Abort_IT+0x290>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a79      	ldr	r2, [pc, #484]	; (8003580 <HAL_DMA_Abort_IT+0x294>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a77      	ldr	r2, [pc, #476]	; (8003584 <HAL_DMA_Abort_IT+0x298>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_DMA_Abort_IT+0x29c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_DMA_Abort_IT+0xcc>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_DMA_Abort_IT+0xce>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d065      	beq.n	800348a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a60      	ldr	r2, [pc, #384]	; (800354c <HAL_DMA_Abort_IT+0x260>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_DMA_Abort_IT+0x264>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_DMA_Abort_IT+0x268>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5b      	ldr	r2, [pc, #364]	; (8003558 <HAL_DMA_Abort_IT+0x26c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5a      	ldr	r2, [pc, #360]	; (800355c <HAL_DMA_Abort_IT+0x270>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_DMA_Abort_IT+0x274>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a57      	ldr	r2, [pc, #348]	; (8003564 <HAL_DMA_Abort_IT+0x278>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a55      	ldr	r2, [pc, #340]	; (8003568 <HAL_DMA_Abort_IT+0x27c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_DMA_Abort_IT+0x280>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_DMA_Abort_IT+0x284>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_DMA_Abort_IT+0x288>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_DMA_Abort_IT+0x28c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a4e      	ldr	r2, [pc, #312]	; (800357c <HAL_DMA_Abort_IT+0x290>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_DMA_Abort_IT+0x294>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_DMA_Abort_IT+0x298>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a49      	ldr	r2, [pc, #292]	; (8003588 <HAL_DMA_Abort_IT+0x29c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <HAL_DMA_Abort_IT+0x18c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e147      	b.n	8003708 <HAL_DMA_Abort_IT+0x41c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e13e      	b.n	8003708 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 020e 	bic.w	r2, r2, #14
 8003498:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_DMA_Abort_IT+0x260>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d04a      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_DMA_Abort_IT+0x264>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d045      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <HAL_DMA_Abort_IT+0x268>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d040      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <HAL_DMA_Abort_IT+0x26c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d03b      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_DMA_Abort_IT+0x270>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d036      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_DMA_Abort_IT+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d031      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <HAL_DMA_Abort_IT+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d02c      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a20      	ldr	r2, [pc, #128]	; (8003568 <HAL_DMA_Abort_IT+0x27c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d027      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_DMA_Abort_IT+0x280>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_DMA_Abort_IT+0x284>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01d      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_DMA_Abort_IT+0x288>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d018      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_DMA_Abort_IT+0x28c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_DMA_Abort_IT+0x290>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_DMA_Abort_IT+0x294>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_DMA_Abort_IT+0x298>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_DMA_Abort_IT+0x29c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d128      	bne.n	800358c <HAL_DMA_Abort_IT+0x2a0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e027      	b.n	800359c <HAL_DMA_Abort_IT+0x2b0>
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <HAL_DMA_Abort_IT+0x428>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d072      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_DMA_Abort_IT+0x42c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d06d      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a59      	ldr	r2, [pc, #356]	; (800371c <HAL_DMA_Abort_IT+0x430>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d068      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_DMA_Abort_IT+0x434>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d063      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a56      	ldr	r2, [pc, #344]	; (8003724 <HAL_DMA_Abort_IT+0x438>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d05e      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a55      	ldr	r2, [pc, #340]	; (8003728 <HAL_DMA_Abort_IT+0x43c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d059      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a53      	ldr	r2, [pc, #332]	; (800372c <HAL_DMA_Abort_IT+0x440>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d054      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a52      	ldr	r2, [pc, #328]	; (8003730 <HAL_DMA_Abort_IT+0x444>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d04f      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a50      	ldr	r2, [pc, #320]	; (8003734 <HAL_DMA_Abort_IT+0x448>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04a      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4f      	ldr	r2, [pc, #316]	; (8003738 <HAL_DMA_Abort_IT+0x44c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_DMA_Abort_IT+0x450>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_DMA_Abort_IT+0x454>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d03b      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a4a      	ldr	r2, [pc, #296]	; (8003744 <HAL_DMA_Abort_IT+0x458>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d036      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a49      	ldr	r2, [pc, #292]	; (8003748 <HAL_DMA_Abort_IT+0x45c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d031      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a47      	ldr	r2, [pc, #284]	; (800374c <HAL_DMA_Abort_IT+0x460>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <HAL_DMA_Abort_IT+0x464>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d027      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a44      	ldr	r2, [pc, #272]	; (8003754 <HAL_DMA_Abort_IT+0x468>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a43      	ldr	r2, [pc, #268]	; (8003758 <HAL_DMA_Abort_IT+0x46c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a41      	ldr	r2, [pc, #260]	; (800375c <HAL_DMA_Abort_IT+0x470>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_DMA_Abort_IT+0x474>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3e      	ldr	r2, [pc, #248]	; (8003764 <HAL_DMA_Abort_IT+0x478>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3d      	ldr	r2, [pc, #244]	; (8003768 <HAL_DMA_Abort_IT+0x47c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a3b      	ldr	r2, [pc, #236]	; (800376c <HAL_DMA_Abort_IT+0x480>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <HAL_DMA_Abort_IT+0x484>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Abort_IT+0x3a4>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_DMA_Abort_IT+0x3a6>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d028      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494

08003774 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_DMA_IRQHandler+0x1ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_DMA_IRQHandler+0x1b0>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5f      	ldr	r2, [pc, #380]	; (8003928 <HAL_DMA_IRQHandler+0x1b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04a      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5d      	ldr	r2, [pc, #372]	; (800392c <HAL_DMA_IRQHandler+0x1b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <HAL_DMA_IRQHandler+0x1bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d040      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5a      	ldr	r2, [pc, #360]	; (8003934 <HAL_DMA_IRQHandler+0x1c0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d03b      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a59      	ldr	r2, [pc, #356]	; (8003938 <HAL_DMA_IRQHandler+0x1c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d036      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_DMA_IRQHandler+0x1c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a56      	ldr	r2, [pc, #344]	; (8003940 <HAL_DMA_IRQHandler+0x1cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d02c      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a54      	ldr	r2, [pc, #336]	; (8003944 <HAL_DMA_IRQHandler+0x1d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a53      	ldr	r2, [pc, #332]	; (8003948 <HAL_DMA_IRQHandler+0x1d4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a51      	ldr	r2, [pc, #324]	; (800394c <HAL_DMA_IRQHandler+0x1d8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a50      	ldr	r2, [pc, #320]	; (8003950 <HAL_DMA_IRQHandler+0x1dc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <HAL_DMA_IRQHandler+0x1e0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_DMA_IRQHandler+0x1e4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4b      	ldr	r2, [pc, #300]	; (800395c <HAL_DMA_IRQHandler+0x1e8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4a      	ldr	r2, [pc, #296]	; (8003960 <HAL_DMA_IRQHandler+0x1ec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_DMA_IRQHandler+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_DMA_IRQHandler+0xd6>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_DMA_IRQHandler+0xd8>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 842b 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2208      	movs	r2, #8
 800385c:	409a      	lsls	r2, r3
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a2 	beq.w	80039ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_DMA_IRQHandler+0x1b4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2d      	ldr	r2, [pc, #180]	; (800392c <HAL_DMA_IRQHandler+0x1b8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <HAL_DMA_IRQHandler+0x1bc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_DMA_IRQHandler+0x1c0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a28      	ldr	r2, [pc, #160]	; (8003938 <HAL_DMA_IRQHandler+0x1c4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a27      	ldr	r2, [pc, #156]	; (800393c <HAL_DMA_IRQHandler+0x1c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_DMA_IRQHandler+0x1cc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_DMA_IRQHandler+0x1d0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_DMA_IRQHandler+0x1d4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_DMA_IRQHandler+0x1d8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_DMA_IRQHandler+0x1dc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_DMA_IRQHandler+0x1e0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_DMA_IRQHandler+0x1e4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_DMA_IRQHandler+0x1e8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_DMA_IRQHandler+0x1ec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <HAL_DMA_IRQHandler+0x1f0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d12f      	bne.n	8003968 <HAL_DMA_IRQHandler+0x1f4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e02e      	b.n	800397c <HAL_DMA_IRQHandler+0x208>
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000
 8003924:	1b4e81b5 	.word	0x1b4e81b5
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2208      	movs	r2, #8
 800399a:	409a      	lsls	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d06e      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_DMA_IRQHandler+0x3f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <HAL_DMA_IRQHandler+0x3fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_DMA_IRQHandler+0x400>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a64      	ldr	r2, [pc, #400]	; (8003b78 <HAL_DMA_IRQHandler+0x404>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <HAL_DMA_IRQHandler+0x408>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_DMA_IRQHandler+0x40c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_DMA_IRQHandler+0x410>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_DMA_IRQHandler+0x414>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <HAL_DMA_IRQHandler+0x418>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5b      	ldr	r2, [pc, #364]	; (8003b90 <HAL_DMA_IRQHandler+0x41c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5a      	ldr	r2, [pc, #360]	; (8003b94 <HAL_DMA_IRQHandler+0x420>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_DMA_IRQHandler+0x424>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <HAL_DMA_IRQHandler+0x428>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a55      	ldr	r2, [pc, #340]	; (8003ba0 <HAL_DMA_IRQHandler+0x42c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a54      	ldr	r2, [pc, #336]	; (8003ba4 <HAL_DMA_IRQHandler+0x430>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_DMA_IRQHandler+0x434>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10a      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x304>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e003      	b.n	8003a80 <HAL_DMA_IRQHandler+0x30c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0202 	orr.w	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 808f 	beq.w	8003bd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_DMA_IRQHandler+0x3f8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <HAL_DMA_IRQHandler+0x400>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d040      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_DMA_IRQHandler+0x404>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03b      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_DMA_IRQHandler+0x408>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d036      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_DMA_IRQHandler+0x40c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_DMA_IRQHandler+0x410>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d02c      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_DMA_IRQHandler+0x414>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d027      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_DMA_IRQHandler+0x418>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_DMA_IRQHandler+0x41c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_DMA_IRQHandler+0x420>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_DMA_IRQHandler+0x424>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_DMA_IRQHandler+0x428>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_DMA_IRQHandler+0x42c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_DMA_IRQHandler+0x430>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_DMA_IRQHandler+0x434>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12a      	bne.n	8003bac <HAL_DMA_IRQHandler+0x438>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e023      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x440>
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2210      	movs	r2, #16
 8003bde:	409a      	lsls	r2, r3
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a6 	beq.w	8003d36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_DMA_IRQHandler+0x690>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04a      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	; (8003e08 <HAL_DMA_IRQHandler+0x694>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a82      	ldr	r2, [pc, #520]	; (8003e0c <HAL_DMA_IRQHandler+0x698>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d040      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a80      	ldr	r2, [pc, #512]	; (8003e10 <HAL_DMA_IRQHandler+0x69c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	; (8003e14 <HAL_DMA_IRQHandler+0x6a0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7d      	ldr	r2, [pc, #500]	; (8003e18 <HAL_DMA_IRQHandler+0x6a4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <HAL_DMA_IRQHandler+0x6a8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d02c      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7a      	ldr	r2, [pc, #488]	; (8003e20 <HAL_DMA_IRQHandler+0x6ac>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d027      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a79      	ldr	r2, [pc, #484]	; (8003e24 <HAL_DMA_IRQHandler+0x6b0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a77      	ldr	r2, [pc, #476]	; (8003e28 <HAL_DMA_IRQHandler+0x6b4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a76      	ldr	r2, [pc, #472]	; (8003e2c <HAL_DMA_IRQHandler+0x6b8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a74      	ldr	r2, [pc, #464]	; (8003e30 <HAL_DMA_IRQHandler+0x6bc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a73      	ldr	r2, [pc, #460]	; (8003e34 <HAL_DMA_IRQHandler+0x6c0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a71      	ldr	r2, [pc, #452]	; (8003e38 <HAL_DMA_IRQHandler+0x6c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a70      	ldr	r2, [pc, #448]	; (8003e3c <HAL_DMA_IRQHandler+0x6c8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HAL_DMA_IRQHandler+0x6cc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10a      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x52c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e009      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x540>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d03e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d024      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
 8003cf4:	e01f      	b.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
 8003d06:	e016      	b.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2220      	movs	r2, #32
 8003d40:	409a      	lsls	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8110 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_DMA_IRQHandler+0x690>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04a      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	; (8003e08 <HAL_DMA_IRQHandler+0x694>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d045      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_DMA_IRQHandler+0x698>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <HAL_DMA_IRQHandler+0x69c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d03b      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_DMA_IRQHandler+0x6a0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <HAL_DMA_IRQHandler+0x6a4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d031      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_DMA_IRQHandler+0x6a8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02c      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <HAL_DMA_IRQHandler+0x6ac>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <HAL_DMA_IRQHandler+0x6b0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d022      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_DMA_IRQHandler+0x6b4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d01d      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_DMA_IRQHandler+0x6b8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d018      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_DMA_IRQHandler+0x6bc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_DMA_IRQHandler+0x6c0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_DMA_IRQHandler+0x6c4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_DMA_IRQHandler+0x6c8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <HAL_DMA_IRQHandler+0x6cc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d12b      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x6d0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e02a      	b.n	8003e58 <HAL_DMA_IRQHandler+0x6e4>
 8003e02:	bf00      	nop
 8003e04:	40020010 	.word	0x40020010
 8003e08:	40020028 	.word	0x40020028
 8003e0c:	40020040 	.word	0x40020040
 8003e10:	40020058 	.word	0x40020058
 8003e14:	40020070 	.word	0x40020070
 8003e18:	40020088 	.word	0x40020088
 8003e1c:	400200a0 	.word	0x400200a0
 8003e20:	400200b8 	.word	0x400200b8
 8003e24:	40020410 	.word	0x40020410
 8003e28:	40020428 	.word	0x40020428
 8003e2c:	40020440 	.word	0x40020440
 8003e30:	40020458 	.word	0x40020458
 8003e34:	40020470 	.word	0x40020470
 8003e38:	40020488 	.word	0x40020488
 8003e3c:	400204a0 	.word	0x400204a0
 8003e40:	400204b8 	.word	0x400204b8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8087 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d139      	bne.n	8003eee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x736>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	223f      	movs	r2, #63	; 0x3f
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 834a 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
          }
          return;
 8003eec:	e344      	b.n	8004578 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02c      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e027      	b.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e01e      	b.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8306 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8088 	beq.w	8004094 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7a      	ldr	r2, [pc, #488]	; (800417c <HAL_DMA_IRQHandler+0xa08>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04a      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a79      	ldr	r2, [pc, #484]	; (8004180 <HAL_DMA_IRQHandler+0xa0c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d045      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a77      	ldr	r2, [pc, #476]	; (8004184 <HAL_DMA_IRQHandler+0xa10>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d040      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a76      	ldr	r2, [pc, #472]	; (8004188 <HAL_DMA_IRQHandler+0xa14>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d03b      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a74      	ldr	r2, [pc, #464]	; (800418c <HAL_DMA_IRQHandler+0xa18>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d036      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_DMA_IRQHandler+0xa1c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d031      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_DMA_IRQHandler+0xa20>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02c      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a70      	ldr	r2, [pc, #448]	; (8004198 <HAL_DMA_IRQHandler+0xa24>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d027      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_DMA_IRQHandler+0xa28>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d022      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6d      	ldr	r2, [pc, #436]	; (80041a0 <HAL_DMA_IRQHandler+0xa2c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d01d      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6b      	ldr	r2, [pc, #428]	; (80041a4 <HAL_DMA_IRQHandler+0xa30>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d018      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_DMA_IRQHandler+0xa34>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d013      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a68      	ldr	r2, [pc, #416]	; (80041ac <HAL_DMA_IRQHandler+0xa38>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00e      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a67      	ldr	r2, [pc, #412]	; (80041b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d009      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_DMA_IRQHandler+0xa40>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d004      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a64      	ldr	r2, [pc, #400]	; (80041b8 <HAL_DMA_IRQHandler+0xa44>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d108      	bne.n	800403e <HAL_DMA_IRQHandler+0x8ca>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e007      	b.n	800404e <HAL_DMA_IRQHandler+0x8da>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	429a      	cmp	r2, r3
 8004058:	d307      	bcc.n	800406a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f2      	bne.n	800404e <HAL_DMA_IRQHandler+0x8da>
 8004068:	e000      	b.n	800406c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800406a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800408a:	e003      	b.n	8004094 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8272 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
 80040a6:	e26c      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a43      	ldr	r2, [pc, #268]	; (80041bc <HAL_DMA_IRQHandler+0xa48>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d022      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a42      	ldr	r2, [pc, #264]	; (80041c0 <HAL_DMA_IRQHandler+0xa4c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d01d      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <HAL_DMA_IRQHandler+0xa50>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <HAL_DMA_IRQHandler+0xa54>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <HAL_DMA_IRQHandler+0xa58>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <HAL_DMA_IRQHandler+0xa5c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_DMA_IRQHandler+0xa60>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a39      	ldr	r2, [pc, #228]	; (80041d8 <HAL_DMA_IRQHandler+0xa64>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_DMA_IRQHandler+0x988>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_DMA_IRQHandler+0x98a>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 823f 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2204      	movs	r2, #4
 8004116:	409a      	lsls	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80cd 	beq.w	80042bc <HAL_DMA_IRQHandler+0xb48>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80c7 	beq.w	80042bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2204      	movs	r2, #4
 8004138:	409a      	lsls	r2, r3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d049      	beq.n	80041dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8210 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004164:	e20a      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8206 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004178:	e200      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
 800417a:	bf00      	nop
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
 80041bc:	58025408 	.word	0x58025408
 80041c0:	5802541c 	.word	0x5802541c
 80041c4:	58025430 	.word	0x58025430
 80041c8:	58025444 	.word	0x58025444
 80041cc:	58025458 	.word	0x58025458
 80041d0:	5802546c 	.word	0x5802546c
 80041d4:	58025480 	.word	0x58025480
 80041d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a8c      	ldr	r2, [pc, #560]	; (800441c <HAL_DMA_IRQHandler+0xca8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a8a      	ldr	r2, [pc, #552]	; (8004420 <HAL_DMA_IRQHandler+0xcac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a89      	ldr	r2, [pc, #548]	; (8004424 <HAL_DMA_IRQHandler+0xcb0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a87      	ldr	r2, [pc, #540]	; (8004428 <HAL_DMA_IRQHandler+0xcb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a86      	ldr	r2, [pc, #536]	; (800442c <HAL_DMA_IRQHandler+0xcb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a84      	ldr	r2, [pc, #528]	; (8004430 <HAL_DMA_IRQHandler+0xcbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a83      	ldr	r2, [pc, #524]	; (8004434 <HAL_DMA_IRQHandler+0xcc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a81      	ldr	r2, [pc, #516]	; (8004438 <HAL_DMA_IRQHandler+0xcc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_DMA_IRQHandler+0xcc8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7e      	ldr	r2, [pc, #504]	; (8004440 <HAL_DMA_IRQHandler+0xccc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7d      	ldr	r2, [pc, #500]	; (8004444 <HAL_DMA_IRQHandler+0xcd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a7b      	ldr	r2, [pc, #492]	; (8004448 <HAL_DMA_IRQHandler+0xcd4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7a      	ldr	r2, [pc, #488]	; (800444c <HAL_DMA_IRQHandler+0xcd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a78      	ldr	r2, [pc, #480]	; (8004450 <HAL_DMA_IRQHandler+0xcdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a77      	ldr	r2, [pc, #476]	; (8004454 <HAL_DMA_IRQHandler+0xce0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_DMA_IRQHandler+0xce4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb24>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e007      	b.n	80042a8 <HAL_DMA_IRQHandler+0xb34>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8165 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ba:	e15f      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2202      	movs	r2, #2
 80042c6:	409a      	lsls	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80c5 	beq.w	800445c <HAL_DMA_IRQHandler+0xce8>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80bf 	beq.w	800445c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2202      	movs	r2, #2
 80042e8:	409a      	lsls	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 813a 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004314:	e134      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8130 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004328:	e12a      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d168      	bne.n	8004406 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_DMA_IRQHandler+0xca8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d04a      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <HAL_DMA_IRQHandler+0xcac>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d045      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a35      	ldr	r2, [pc, #212]	; (8004424 <HAL_DMA_IRQHandler+0xcb0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d040      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_DMA_IRQHandler+0xcb4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d03b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a32      	ldr	r2, [pc, #200]	; (800442c <HAL_DMA_IRQHandler+0xcb8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d036      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_DMA_IRQHandler+0xcbc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_DMA_IRQHandler+0xcc0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02c      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_DMA_IRQHandler+0xcc4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d027      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_DMA_IRQHandler+0xcc8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_DMA_IRQHandler+0xccc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_DMA_IRQHandler+0xcd0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_DMA_IRQHandler+0xcd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_DMA_IRQHandler+0xcd8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a25      	ldr	r2, [pc, #148]	; (8004450 <HAL_DMA_IRQHandler+0xcdc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_DMA_IRQHandler+0xce0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_DMA_IRQHandler+0xce4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <HAL_DMA_IRQHandler+0xc72>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0214 	bic.w	r2, r2, #20
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e007      	b.n	80043f6 <HAL_DMA_IRQHandler+0xc82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020a 	bic.w	r2, r2, #10
 80043f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80b8 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004418:	e0b2      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
 800441a:	bf00      	nop
 800441c:	40020010 	.word	0x40020010
 8004420:	40020028 	.word	0x40020028
 8004424:	40020040 	.word	0x40020040
 8004428:	40020058 	.word	0x40020058
 800442c:	40020070 	.word	0x40020070
 8004430:	40020088 	.word	0x40020088
 8004434:	400200a0 	.word	0x400200a0
 8004438:	400200b8 	.word	0x400200b8
 800443c:	40020410 	.word	0x40020410
 8004440:	40020428 	.word	0x40020428
 8004444:	40020440 	.word	0x40020440
 8004448:	40020458 	.word	0x40020458
 800444c:	40020470 	.word	0x40020470
 8004450:	40020488 	.word	0x40020488
 8004454:	400204a0 	.word	0x400204a0
 8004458:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2208      	movs	r2, #8
 8004466:	409a      	lsls	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8088 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8082 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a41      	ldr	r2, [pc, #260]	; (8004588 <HAL_DMA_IRQHandler+0xe14>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04a      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <HAL_DMA_IRQHandler+0xe18>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d045      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3e      	ldr	r2, [pc, #248]	; (8004590 <HAL_DMA_IRQHandler+0xe1c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d040      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <HAL_DMA_IRQHandler+0xe20>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <HAL_DMA_IRQHandler+0xe24>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_DMA_IRQHandler+0xe28>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <HAL_DMA_IRQHandler+0xe2c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <HAL_DMA_IRQHandler+0xe30>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d027      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a35      	ldr	r2, [pc, #212]	; (80045a8 <HAL_DMA_IRQHandler+0xe34>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a33      	ldr	r2, [pc, #204]	; (80045ac <HAL_DMA_IRQHandler+0xe38>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <HAL_DMA_IRQHandler+0xe3c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <HAL_DMA_IRQHandler+0xe40>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <HAL_DMA_IRQHandler+0xe44>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <HAL_DMA_IRQHandler+0xe48>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_DMA_IRQHandler+0xe50>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0xdbc>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 021c 	bic.w	r2, r2, #28
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_DMA_IRQHandler+0xdcc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
 8004576:	e004      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004580:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020010 	.word	0x40020010
 800458c:	40020028 	.word	0x40020028
 8004590:	40020040 	.word	0x40020040
 8004594:	40020058 	.word	0x40020058
 8004598:	40020070 	.word	0x40020070
 800459c:	40020088 	.word	0x40020088
 80045a0:	400200a0 	.word	0x400200a0
 80045a4:	400200b8 	.word	0x400200b8
 80045a8:	40020410 	.word	0x40020410
 80045ac:	40020428 	.word	0x40020428
 80045b0:	40020440 	.word	0x40020440
 80045b4:	40020458 	.word	0x40020458
 80045b8:	40020470 	.word	0x40020470
 80045bc:	40020488 	.word	0x40020488
 80045c0:	400204a0 	.word	0x400204a0
 80045c4:	400204b8 	.word	0x400204b8

080045c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a42      	ldr	r2, [pc, #264]	; (80046e0 <DMA_CalcBaseAndBitshift+0x118>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d04a      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a41      	ldr	r2, [pc, #260]	; (80046e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d045      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <DMA_CalcBaseAndBitshift+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d040      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3e      	ldr	r2, [pc, #248]	; (80046ec <DMA_CalcBaseAndBitshift+0x124>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d03b      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <DMA_CalcBaseAndBitshift+0x128>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d036      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d031      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a39      	ldr	r2, [pc, #228]	; (80046f8 <DMA_CalcBaseAndBitshift+0x130>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02c      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a38      	ldr	r2, [pc, #224]	; (80046fc <DMA_CalcBaseAndBitshift+0x134>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d027      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a36      	ldr	r2, [pc, #216]	; (8004700 <DMA_CalcBaseAndBitshift+0x138>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a35      	ldr	r2, [pc, #212]	; (8004704 <DMA_CalcBaseAndBitshift+0x13c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d01d      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a33      	ldr	r2, [pc, #204]	; (8004708 <DMA_CalcBaseAndBitshift+0x140>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a32      	ldr	r2, [pc, #200]	; (800470c <DMA_CalcBaseAndBitshift+0x144>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a30      	ldr	r2, [pc, #192]	; (8004710 <DMA_CalcBaseAndBitshift+0x148>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <DMA_CalcBaseAndBitshift+0x14c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2d      	ldr	r2, [pc, #180]	; (8004718 <DMA_CalcBaseAndBitshift+0x150>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <DMA_CalcBaseAndBitshift+0xa8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <DMA_CalcBaseAndBitshift+0x154>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <DMA_CalcBaseAndBitshift+0xac>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <DMA_CalcBaseAndBitshift+0xae>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d024      	beq.n	80046c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3b10      	subs	r3, #16
 8004682:	4a27      	ldr	r2, [pc, #156]	; (8004720 <DMA_CalcBaseAndBitshift+0x158>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	4a24      	ldr	r2, [pc, #144]	; (8004724 <DMA_CalcBaseAndBitshift+0x15c>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d908      	bls.n	80046b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <DMA_CalcBaseAndBitshift+0x160>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	659a      	str	r2, [r3, #88]	; 0x58
 80046b2:	e00d      	b.n	80046d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <DMA_CalcBaseAndBitshift+0x160>)
 80046bc:	4013      	ands	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
 80046c2:	e005      	b.n	80046d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
 8004720:	aaaaaaab 	.word	0xaaaaaaab
 8004724:	0800e6ac 	.word	0x0800e6ac
 8004728:	fffffc00 	.word	0xfffffc00

0800472c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d120      	bne.n	8004782 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	2b03      	cmp	r3, #3
 8004746:	d858      	bhi.n	80047fa <DMA_CheckFifoParam+0xce>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <DMA_CheckFifoParam+0x24>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004761 	.word	0x08004761
 8004754:	08004773 	.word	0x08004773
 8004758:	08004761 	.word	0x08004761
 800475c:	080047fb 	.word	0x080047fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d048      	beq.n	80047fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004770:	e045      	b.n	80047fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800477a:	d142      	bne.n	8004802 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004780:	e03f      	b.n	8004802 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	d123      	bne.n	80047d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	2b03      	cmp	r3, #3
 8004792:	d838      	bhi.n	8004806 <DMA_CheckFifoParam+0xda>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <DMA_CheckFifoParam+0x70>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047ad 	.word	0x080047ad
 80047a0:	080047b3 	.word	0x080047b3
 80047a4:	080047ad 	.word	0x080047ad
 80047a8:	080047c5 	.word	0x080047c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
        break;
 80047b0:	e030      	b.n	8004814 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d025      	beq.n	800480a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047c2:	e022      	b.n	800480a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047cc:	d11f      	bne.n	800480e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047d2:	e01c      	b.n	800480e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d902      	bls.n	80047e2 <DMA_CheckFifoParam+0xb6>
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d003      	beq.n	80047e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80047e0:	e018      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
        break;
 80047e6:	e015      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00e      	beq.n	8004812 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
    break;
 80047f8:	e00b      	b.n	8004812 <DMA_CheckFifoParam+0xe6>
        break;
 80047fa:	bf00      	nop
 80047fc:	e00a      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        break;
 80047fe:	bf00      	nop
 8004800:	e008      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        break;
 8004802:	bf00      	nop
 8004804:	e006      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        break;
 8004806:	bf00      	nop
 8004808:	e004      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        break;
 800480a:	bf00      	nop
 800480c:	e002      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
        break;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <DMA_CheckFifoParam+0xe8>
    break;
 8004812:	bf00      	nop
    }
  }

  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop

08004824 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a38      	ldr	r2, [pc, #224]	; (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a36      	ldr	r2, [pc, #216]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01d      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a35      	ldr	r2, [pc, #212]	; (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a33      	ldr	r2, [pc, #204]	; (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a32      	ldr	r2, [pc, #200]	; (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a30      	ldr	r2, [pc, #192]	; (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2f      	ldr	r2, [pc, #188]	; (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004886:	2300      	movs	r3, #0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01a      	beq.n	80048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3b08      	subs	r3, #8
 8004894:	4a28      	ldr	r2, [pc, #160]	; (8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4b26      	ldr	r3, [pc, #152]	; (800493c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	461a      	mov	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a24      	ldr	r2, [pc, #144]	; (8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2201      	movs	r2, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048c0:	e024      	b.n	800490c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3b10      	subs	r3, #16
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d806      	bhi.n	80048ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a1b      	ldr	r2, [pc, #108]	; (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d902      	bls.n	80048ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3308      	adds	r3, #8
 80048e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80048fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	58025408 	.word	0x58025408
 800491c:	5802541c 	.word	0x5802541c
 8004920:	58025430 	.word	0x58025430
 8004924:	58025444 	.word	0x58025444
 8004928:	58025458 	.word	0x58025458
 800492c:	5802546c 	.word	0x5802546c
 8004930:	58025480 	.word	0x58025480
 8004934:	58025494 	.word	0x58025494
 8004938:	cccccccd 	.word	0xcccccccd
 800493c:	16009600 	.word	0x16009600
 8004940:	58025880 	.word	0x58025880
 8004944:	aaaaaaab 	.word	0xaaaaaaab
 8004948:	400204b8 	.word	0x400204b8
 800494c:	4002040f 	.word	0x4002040f
 8004950:	10008200 	.word	0x10008200
 8004954:	40020880 	.word	0x40020880

08004958 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04a      	beq.n	8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d847      	bhi.n	8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d022      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01d      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d018      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00e      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d009      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	461a      	mov	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80049e0:	671a      	str	r2, [r3, #112]	; 0x70
 80049e2:	e009      	b.n	80049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80049f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	2201      	movs	r2, #1
 80049fe:	409a      	lsls	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494
 8004a30:	1600963f 	.word	0x1600963f
 8004a34:	58025940 	.word	0x58025940
 8004a38:	1000823f 	.word	0x1000823f
 8004a3c:	40020940 	.word	0x40020940

08004a40 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d113      	bne.n	8004a82 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004a62:	4413      	add	r3, r2
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d109      	bne.n	8004a82 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f005 f922 	bl	8009cb8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004a7c:	f248 0240 	movw	r2, #32832	; 0x8040
 8004a80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d113      	bne.n	8004abc <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	f241 1334 	movw	r3, #4404	; 0x1134
 8004a9c:	4413      	add	r3, r2
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d109      	bne.n	8004abc <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8c7 	bl	8004c3c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004ab6:	f248 0201 	movw	r2, #32769	; 0x8001
 8004aba:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ace:	d149      	bne.n	8004b64 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f241 1334 	movw	r3, #4404	; 0x1134
 8004ad8:	4413      	add	r3, r2
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae4:	d13e      	bne.n	8004b64 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	f043 0208 	orr.w	r2, r3, #8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b04:	d11b      	bne.n	8004b3e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	f241 1302 	movw	r3, #4354	; 0x1102
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b22:	4413      	add	r3, r2
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6811      	ldr	r1, [r2, #0]
 8004b2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b2e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b32:	440b      	add	r3, r1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	22e0      	movs	r2, #224	; 0xe0
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b3c:	e00f      	b.n	8004b5e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b58:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8004b5c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f876 	bl	8004c50 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b6c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004b70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b74:	d10e      	bne.n	8004b94 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	22e0      	movs	r2, #224	; 0xe0
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f86b 	bl	8004c64 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d10d      	bne.n	8004bc0 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f85f 	bl	8004c78 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d10d      	bne.n	8004bec <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bd8:	f003 020f 	and.w	r2, r3, #15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f853 	bl	8004c8c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004bec:	f7fd ff24 	bl	8002a38 <HAL_GetCurrentCPUID>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d10d      	bne.n	8004c12 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <HAL_ETH_IRQHandler+0x1f4>)
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_ETH_IRQHandler+0x1f4>)
 8004c04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c08:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f848 	bl	8004ca0 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004c10:	e00c      	b.n	8004c2c <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_ETH_IRQHandler+0x1f8>)
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_ETH_IRQHandler+0x1f8>)
 8004c20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f83a 	bl	8004ca0 <HAL_ETH_WakeUpCallback>
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58000080 	.word	0x58000080
 8004c38:	580000c0 	.word	0x580000c0

08004c3c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	; 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cc2:	4b89      	ldr	r3, [pc, #548]	; (8004ee8 <HAL_GPIO_Init+0x234>)
 8004cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cc6:	e194      	b.n	8004ff2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8186 	beq.w	8004fec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d00b      	beq.n	8004d00 <HAL_GPIO_Init+0x4c>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d007      	beq.n	8004d00 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf4:	2b11      	cmp	r3, #17
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b12      	cmp	r3, #18
 8004cfe:	d130      	bne.n	8004d62 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d36:	2201      	movs	r2, #1
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 0201 	and.w	r2, r3, #1
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_GPIO_Init+0xee>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b12      	cmp	r3, #18
 8004da0:	d123      	bne.n	8004dea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	08da      	lsrs	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3208      	adds	r2, #8
 8004daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	220f      	movs	r2, #15
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	08da      	lsrs	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3208      	adds	r2, #8
 8004de4:	69b9      	ldr	r1, [r7, #24]
 8004de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0203 	and.w	r2, r3, #3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80e0 	beq.w	8004fec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2c:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_GPIO_Init+0x238>)
 8004e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e32:	4a2e      	ldr	r2, [pc, #184]	; (8004eec <HAL_GPIO_Init+0x238>)
 8004e34:	f043 0302 	orr.w	r3, r3, #2
 8004e38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <HAL_GPIO_Init+0x238>)
 8004e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4a:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <HAL_GPIO_Init+0x23c>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <HAL_GPIO_Init+0x240>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d052      	beq.n	8004f1c <HAL_GPIO_Init+0x268>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <HAL_GPIO_Init+0x244>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d031      	beq.n	8004ee2 <HAL_GPIO_Init+0x22e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <HAL_GPIO_Init+0x248>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02b      	beq.n	8004ede <HAL_GPIO_Init+0x22a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_GPIO_Init+0x24c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d025      	beq.n	8004eda <HAL_GPIO_Init+0x226>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <HAL_GPIO_Init+0x250>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01f      	beq.n	8004ed6 <HAL_GPIO_Init+0x222>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_GPIO_Init+0x254>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d019      	beq.n	8004ed2 <HAL_GPIO_Init+0x21e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a1a      	ldr	r2, [pc, #104]	; (8004f0c <HAL_GPIO_Init+0x258>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_GPIO_Init+0x21a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <HAL_GPIO_Init+0x25c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00d      	beq.n	8004eca <HAL_GPIO_Init+0x216>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <HAL_GPIO_Init+0x260>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <HAL_GPIO_Init+0x212>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <HAL_GPIO_Init+0x264>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_GPIO_Init+0x20e>
 8004ebe:	2309      	movs	r3, #9
 8004ec0:	e02d      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e02b      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	e029      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004eca:	2307      	movs	r3, #7
 8004ecc:	e027      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ece:	2306      	movs	r3, #6
 8004ed0:	e025      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ed2:	2305      	movs	r3, #5
 8004ed4:	e023      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	e021      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e01f      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e01d      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e01b      	b.n	8004f1e <HAL_GPIO_Init+0x26a>
 8004ee6:	bf00      	nop
 8004ee8:	58000080 	.word	0x58000080
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	58000400 	.word	0x58000400
 8004ef4:	58020000 	.word	0x58020000
 8004ef8:	58020400 	.word	0x58020400
 8004efc:	58020800 	.word	0x58020800
 8004f00:	58020c00 	.word	0x58020c00
 8004f04:	58021000 	.word	0x58021000
 8004f08:	58021400 	.word	0x58021400
 8004f0c:	58021800 	.word	0x58021800
 8004f10:	58021c00 	.word	0x58021c00
 8004f14:	58022000 	.word	0x58022000
 8004f18:	58022400 	.word	0x58022400
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	f002 0203 	and.w	r2, r2, #3
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	4093      	lsls	r3, r2
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f2e:	4938      	ldr	r1, [pc, #224]	; (8005010 <HAL_GPIO_Init+0x35c>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f47f ae63 	bne.w	8004cc8 <HAL_GPIO_Init+0x14>
  }
}
 8005002:	bf00      	nop
 8005004:	3724      	adds	r7, #36	; 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	58000400 	.word	0x58000400

08005014 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <HAL_HSEM_FastTake+0x2c>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3320      	adds	r3, #32
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <HAL_HSEM_FastTake+0x30>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	58026400 	.word	0x58026400
 8005044:	80000300 	.word	0x80000300

08005048 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005052:	4906      	ldr	r1, [pc, #24]	; (800506c <HAL_HSEM_Release+0x24>)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	58026400 	.word	0x58026400

08005070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb fd5c 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2224      	movs	r2, #36	; 0x24
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d107      	bne.n	80050ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e006      	b.n	80050f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d104      	bne.n	800510a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_I2C_Init+0x11c>)
 8005116:	430b      	orrs	r3, r1
 8005118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	ea42 0103 	orr.w	r1, r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	021a      	lsls	r2, r3, #8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69d9      	ldr	r1, [r3, #28]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	02008000 	.word	0x02008000

08005190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d138      	bne.n	8005218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e032      	b.n	800521a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2224      	movs	r2, #36	; 0x24
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6819      	ldr	r1, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b20      	cmp	r3, #32
 800523a:	d139      	bne.n	80052b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005246:	2302      	movs	r3, #2
 8005248:	e033      	b.n	80052b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2224      	movs	r2, #36	; 0x24
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80052ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052ce:	4a0c      	ldr	r2, [pc, #48]	; (8005300 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80052da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4906      	ldr	r1, [pc, #24]	; (8005304 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
 8005304:	58000400 	.word	0x58000400

08005308 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e038      	b.n	800538c <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005322:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f245 5255 	movw	r2, #21845	; 0x5555
 800532c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005342:	f7fd fa09 	bl	8002758 <HAL_GetTick>
 8005346:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8005348:	e008      	b.n	800535c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800534a:	f7fd fa05 	bl	8002758 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d901      	bls.n	800535c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e017      	b.n	800538c <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f1      	bne.n	800534a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68d2      	ldr	r2, [r2, #12]
 800537c:	611a      	str	r2, [r3, #16]
 800537e:	e004      	b.n	800538a <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80053a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80053bc:	4b29      	ldr	r3, [pc, #164]	; (8005464 <HAL_PWREx_ConfigSupply+0xb0>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d00a      	beq.n	80053de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053c8:	4b26      	ldr	r3, [pc, #152]	; (8005464 <HAL_PWREx_ConfigSupply+0xb0>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d001      	beq.n	80053da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e040      	b.n	800545c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e03e      	b.n	800545c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <HAL_PWREx_ConfigSupply+0xb0>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80053e6:	491f      	ldr	r1, [pc, #124]	; (8005464 <HAL_PWREx_ConfigSupply+0xb0>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053ee:	f7fd f9b3 	bl	8002758 <HAL_GetTick>
 80053f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053f4:	e009      	b.n	800540a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053f6:	f7fd f9af 	bl	8002758 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005404:	d901      	bls.n	800540a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e028      	b.n	800545c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800540a:	4b16      	ldr	r3, [pc, #88]	; (8005464 <HAL_PWREx_ConfigSupply+0xb0>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	d1ee      	bne.n	80053f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b1e      	cmp	r3, #30
 800541c:	d008      	beq.n	8005430 <HAL_PWREx_ConfigSupply+0x7c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b2e      	cmp	r3, #46	; 0x2e
 8005422:	d005      	beq.n	8005430 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b1d      	cmp	r3, #29
 8005428:	d002      	beq.n	8005430 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b2d      	cmp	r3, #45	; 0x2d
 800542e:	d114      	bne.n	800545a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005430:	f7fd f992 	bl	8002758 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005436:	e009      	b.n	800544c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005438:	f7fd f98e 	bl	8002758 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005446:	d901      	bls.n	800544c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e007      	b.n	800545c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_PWREx_ConfigSupply+0xb0>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005458:	d1ee      	bne.n	8005438 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	58024800 	.word	0x58024800

08005468 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af02      	add	r7, sp, #8
 800546e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005470:	f7fd f972 	bl	8002758 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e05f      	b.n	8005540 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fb fe73 	bl	8001178 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005492:	f241 3188 	movw	r1, #5000	; 0x1388
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f85a 	bl	8005550 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	021a      	lsls	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	2120      	movs	r1, #32
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f852 	bl	800556c <QSPI_WaitFlagStateUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054cc:	7afb      	ldrb	r3, [r7, #11]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d135      	bne.n	800553e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_QSPI_Init+0xe0>)
 80054da:	4013      	ands	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6852      	ldr	r2, [r2, #4]
 80054e0:	0611      	lsls	r1, r2, #24
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68d2      	ldr	r2, [r2, #12]
 80054e6:	4311      	orrs	r1, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	69d2      	ldr	r2, [r2, #28]
 80054ec:	4311      	orrs	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6a12      	ldr	r2, [r2, #32]
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_QSPI_Init+0xe4>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6912      	ldr	r2, [r2, #16]
 800550a:	0411      	lsls	r1, r2, #16
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6952      	ldr	r2, [r2, #20]
 8005510:	4311      	orrs	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6992      	ldr	r2, [r2, #24]
 8005516:	4311      	orrs	r1, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	430b      	orrs	r3, r1
 800551e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800553e:	7afb      	ldrb	r3, [r7, #11]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	00ffff2f 	.word	0x00ffff2f
 800554c:	ffe0f8fe 	.word	0xffe0f8fe

08005550 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800557c:	e01a      	b.n	80055b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005584:	d016      	beq.n	80055b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	f7fd f8e7 	bl	8002758 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2204      	movs	r2, #4
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e00e      	b.n	80055d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1d6      	bne.n	800557e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e3ff      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8087 	beq.w	800570a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fc:	4b99      	ldr	r3, [pc, #612]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005606:	4b97      	ldr	r3, [pc, #604]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	2b10      	cmp	r3, #16
 8005610:	d007      	beq.n	8005622 <HAL_RCC_OscConfig+0x46>
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2b18      	cmp	r3, #24
 8005616:	d110      	bne.n	800563a <HAL_RCC_OscConfig+0x5e>
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d10b      	bne.n	800563a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005622:	4b90      	ldr	r3, [pc, #576]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d06c      	beq.n	8005708 <HAL_RCC_OscConfig+0x12c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d168      	bne.n	8005708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e3d9      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d106      	bne.n	8005652 <HAL_RCC_OscConfig+0x76>
 8005644:	4b87      	ldr	r3, [pc, #540]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a86      	ldr	r2, [pc, #536]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e02e      	b.n	80056b0 <HAL_RCC_OscConfig+0xd4>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <HAL_RCC_OscConfig+0x98>
 800565a:	4b82      	ldr	r3, [pc, #520]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a81      	ldr	r2, [pc, #516]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	4b7f      	ldr	r3, [pc, #508]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a7e      	ldr	r2, [pc, #504]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800566c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e01d      	b.n	80056b0 <HAL_RCC_OscConfig+0xd4>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0xbc>
 800567e:	4b79      	ldr	r3, [pc, #484]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a78      	ldr	r2, [pc, #480]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b76      	ldr	r3, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a75      	ldr	r2, [pc, #468]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e00b      	b.n	80056b0 <HAL_RCC_OscConfig+0xd4>
 8005698:	4b72      	ldr	r3, [pc, #456]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a71      	ldr	r2, [pc, #452]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800569e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	4b6f      	ldr	r3, [pc, #444]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a6e      	ldr	r2, [pc, #440]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80056aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fd f84e 	bl	8002758 <HAL_GetTick>
 80056bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c0:	f7fd f84a 	bl	8002758 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	; 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e38d      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056d2:	4b64      	ldr	r3, [pc, #400]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0xe4>
 80056de:	e014      	b.n	800570a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fd f83a 	bl	8002758 <HAL_GetTick>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e8:	f7fd f836 	bl	8002758 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e379      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056fa:	4b5a      	ldr	r3, [pc, #360]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x10c>
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80ae 	beq.w	8005874 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005718:	4b52      	ldr	r3, [pc, #328]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005722:	4b50      	ldr	r3, [pc, #320]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_RCC_OscConfig+0x162>
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	2b18      	cmp	r3, #24
 8005732:	d13a      	bne.n	80057aa <HAL_RCC_OscConfig+0x1ce>
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d135      	bne.n	80057aa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800573e:	4b49      	ldr	r3, [pc, #292]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_RCC_OscConfig+0x17a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e34b      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005756:	f7fd f80b 	bl	8002770 <HAL_GetREVID>
 800575a:	4602      	mov	r2, r0
 800575c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005760:	429a      	cmp	r2, r3
 8005762:	d817      	bhi.n	8005794 <HAL_RCC_OscConfig+0x1b8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d108      	bne.n	800577e <HAL_RCC_OscConfig+0x1a2>
 800576c:	4b3d      	ldr	r3, [pc, #244]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005774:	4a3b      	ldr	r2, [pc, #236]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800577c:	e07a      	b.n	8005874 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b39      	ldr	r3, [pc, #228]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	031b      	lsls	r3, r3, #12
 800578c:	4935      	ldr	r1, [pc, #212]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800578e:	4313      	orrs	r3, r2
 8005790:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005792:	e06f      	b.n	8005874 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005794:	4b33      	ldr	r3, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	061b      	lsls	r3, r3, #24
 80057a2:	4930      	ldr	r1, [pc, #192]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057a8:	e064      	b.n	8005874 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d045      	beq.n	800583e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057b2:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 0219 	bic.w	r2, r3, #25
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4929      	ldr	r1, [pc, #164]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fc ffc8 	bl	8002758 <HAL_GetTick>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057cc:	f7fc ffc4 	bl	8002758 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e307      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ea:	f7fc ffc1 	bl	8002770 <HAL_GetREVID>
 80057ee:	4602      	mov	r2, r0
 80057f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d817      	bhi.n	8005828 <HAL_RCC_OscConfig+0x24c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d108      	bne.n	8005812 <HAL_RCC_OscConfig+0x236>
 8005800:	4b18      	ldr	r3, [pc, #96]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005808:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580e:	6053      	str	r3, [r2, #4]
 8005810:	e030      	b.n	8005874 <HAL_RCC_OscConfig+0x298>
 8005812:	4b14      	ldr	r3, [pc, #80]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	031b      	lsls	r3, r3, #12
 8005820:	4910      	ldr	r1, [pc, #64]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005822:	4313      	orrs	r3, r2
 8005824:	604b      	str	r3, [r1, #4]
 8005826:	e025      	b.n	8005874 <HAL_RCC_OscConfig+0x298>
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	490b      	ldr	r1, [pc, #44]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]
 800583c:	e01a      	b.n	8005874 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a08      	ldr	r2, [pc, #32]	; (8005864 <HAL_RCC_OscConfig+0x288>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fc ff85 	bl	8002758 <HAL_GetTick>
 800584e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005850:	e00a      	b.n	8005868 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005852:	f7fc ff81 	bl	8002758 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d903      	bls.n	8005868 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e2c4      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
 8005864:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005868:	4ba4      	ldr	r3, [pc, #656]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ee      	bne.n	8005852 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a9 	beq.w	80059d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005882:	4b9e      	ldr	r3, [pc, #632]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800588c:	4b9b      	ldr	r3, [pc, #620]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d007      	beq.n	80058a8 <HAL_RCC_OscConfig+0x2cc>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b18      	cmp	r3, #24
 800589c:	d13a      	bne.n	8005914 <HAL_RCC_OscConfig+0x338>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d135      	bne.n	8005914 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058a8:	4b94      	ldr	r3, [pc, #592]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2e4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	2b80      	cmp	r3, #128	; 0x80
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e296      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058c0:	f7fc ff56 	bl	8002770 <HAL_GetREVID>
 80058c4:	4602      	mov	r2, r0
 80058c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d817      	bhi.n	80058fe <HAL_RCC_OscConfig+0x322>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d108      	bne.n	80058e8 <HAL_RCC_OscConfig+0x30c>
 80058d6:	4b89      	ldr	r3, [pc, #548]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058de:	4a87      	ldr	r2, [pc, #540]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80058e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058e6:	e075      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058e8:	4b84      	ldr	r3, [pc, #528]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	069b      	lsls	r3, r3, #26
 80058f6:	4981      	ldr	r1, [pc, #516]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058fc:	e06a      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058fe:	4b7f      	ldr	r3, [pc, #508]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	061b      	lsls	r3, r3, #24
 800590c:	497b      	ldr	r1, [pc, #492]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800590e:	4313      	orrs	r3, r2
 8005910:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005912:	e05f      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d042      	beq.n	80059a2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800591c:	4b77      	ldr	r3, [pc, #476]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a76      	ldr	r2, [pc, #472]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fc ff16 	bl	8002758 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005930:	f7fc ff12 	bl	8002758 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e255      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005942:	4b6e      	ldr	r3, [pc, #440]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f0      	beq.n	8005930 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800594e:	f7fc ff0f 	bl	8002770 <HAL_GetREVID>
 8005952:	4602      	mov	r2, r0
 8005954:	f241 0303 	movw	r3, #4099	; 0x1003
 8005958:	429a      	cmp	r2, r3
 800595a:	d817      	bhi.n	800598c <HAL_RCC_OscConfig+0x3b0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	2b20      	cmp	r3, #32
 8005962:	d108      	bne.n	8005976 <HAL_RCC_OscConfig+0x39a>
 8005964:	4b65      	ldr	r3, [pc, #404]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800596c:	4a63      	ldr	r2, [pc, #396]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800596e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005972:	6053      	str	r3, [r2, #4]
 8005974:	e02e      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f8>
 8005976:	4b61      	ldr	r3, [pc, #388]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	069b      	lsls	r3, r3, #26
 8005984:	495d      	ldr	r1, [pc, #372]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005986:	4313      	orrs	r3, r2
 8005988:	604b      	str	r3, [r1, #4]
 800598a:	e023      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f8>
 800598c:	4b5b      	ldr	r3, [pc, #364]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	061b      	lsls	r3, r3, #24
 800599a:	4958      	ldr	r1, [pc, #352]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 800599c:	4313      	orrs	r3, r2
 800599e:	60cb      	str	r3, [r1, #12]
 80059a0:	e018      	b.n	80059d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059a2:	4b56      	ldr	r3, [pc, #344]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a55      	ldr	r2, [pc, #340]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80059a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ae:	f7fc fed3 	bl	8002758 <HAL_GetTick>
 80059b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059b6:	f7fc fecf 	bl	8002758 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e212      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059c8:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d036      	beq.n	8005a4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d019      	beq.n	8005a1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059e8:	4b44      	ldr	r3, [pc, #272]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80059ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ec:	4a43      	ldr	r2, [pc, #268]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f4:	f7fc feb0 	bl	8002758 <HAL_GetTick>
 80059f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059fc:	f7fc feac 	bl	8002758 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1ef      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x420>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a1c:	4b37      	ldr	r3, [pc, #220]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	4a36      	ldr	r2, [pc, #216]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a28:	f7fc fe96 	bl	8002758 <HAL_GetTick>
 8005a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a30:	f7fc fe92 	bl	8002758 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e1d5      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d036      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d019      	beq.n	8005a96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a25      	ldr	r2, [pc, #148]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a6e:	f7fc fe73 	bl	8002758 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a76:	f7fc fe6f 	bl	8002758 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e1b2      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a88:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x49a>
 8005a94:	e018      	b.n	8005ac8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005aa2:	f7fc fe59 	bl	8002758 <HAL_GetTick>
 8005aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005aaa:	f7fc fe55 	bl	8002758 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e198      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_RCC_OscConfig+0x520>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8085 	beq.w	8005be0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_RCC_OscConfig+0x524>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <HAL_RCC_OscConfig+0x524>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fe39 	bl	8002758 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae8:	e00c      	b.n	8005b04 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fc fe35 	bl	8002758 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b64      	cmp	r3, #100	; 0x64
 8005af6:	d905      	bls.n	8005b04 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e178      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
 8005afc:	58024400 	.word	0x58024400
 8005b00:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b04:	4b96      	ldr	r3, [pc, #600]	; (8005d60 <HAL_RCC_OscConfig+0x784>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ec      	beq.n	8005aea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d106      	bne.n	8005b26 <HAL_RCC_OscConfig+0x54a>
 8005b18:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1c:	4a91      	ldr	r2, [pc, #580]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6713      	str	r3, [r2, #112]	; 0x70
 8005b24:	e02d      	b.n	8005b82 <HAL_RCC_OscConfig+0x5a6>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10c      	bne.n	8005b48 <HAL_RCC_OscConfig+0x56c>
 8005b2e:	4b8d      	ldr	r3, [pc, #564]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a8c      	ldr	r2, [pc, #560]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	4b8a      	ldr	r3, [pc, #552]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a89      	ldr	r2, [pc, #548]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b40:	f023 0304 	bic.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
 8005b46:	e01c      	b.n	8005b82 <HAL_RCC_OscConfig+0x5a6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCC_OscConfig+0x58e>
 8005b50:	4b84      	ldr	r3, [pc, #528]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	4a83      	ldr	r2, [pc, #524]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5c:	4b81      	ldr	r3, [pc, #516]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	4a80      	ldr	r2, [pc, #512]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	6713      	str	r3, [r2, #112]	; 0x70
 8005b68:	e00b      	b.n	8005b82 <HAL_RCC_OscConfig+0x5a6>
 8005b6a:	4b7e      	ldr	r3, [pc, #504]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a7d      	ldr	r2, [pc, #500]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	4a7a      	ldr	r2, [pc, #488]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d015      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8a:	f7fc fde5 	bl	8002758 <HAL_GetTick>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fc fde1 	bl	8002758 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e122      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba8:	4b6e      	ldr	r3, [pc, #440]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RCC_OscConfig+0x5b6>
 8005bb4:	e014      	b.n	8005be0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7fc fdcf 	bl	8002758 <HAL_GetTick>
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bbc:	e00a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7fc fdcb 	bl	8002758 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e10c      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bd4:	4b63      	ldr	r3, [pc, #396]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ee      	bne.n	8005bbe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8101 	beq.w	8005dec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bf2:	2b18      	cmp	r3, #24
 8005bf4:	f000 80bc 	beq.w	8005d70 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f040 8095 	bne.w	8005d2c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c02:	4b58      	ldr	r3, [pc, #352]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a57      	ldr	r2, [pc, #348]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fc fda3 	bl	8002758 <HAL_GetTick>
 8005c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c16:	f7fc fd9f 	bl	8002758 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0e2      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c28:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f0      	bne.n	8005c16 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <HAL_RCC_OscConfig+0x78c>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c44:	0112      	lsls	r2, r2, #4
 8005c46:	430a      	orrs	r2, r1
 8005c48:	4946      	ldr	r1, [pc, #280]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	628b      	str	r3, [r1, #40]	; 0x28
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	025b      	lsls	r3, r3, #9
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	3b01      	subs	r3, #1
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c7e:	4939      	ldr	r1, [pc, #228]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c84:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	4a36      	ldr	r2, [pc, #216]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c90:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c94:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <HAL_RCC_OscConfig+0x790>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c9c:	00d2      	lsls	r2, r2, #3
 8005c9e:	4931      	ldr	r1, [pc, #196]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ca4:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f023 020c 	bic.w	r2, r3, #12
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	492c      	ldr	r1, [pc, #176]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f023 0202 	bic.w	r2, r3, #2
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	4928      	ldr	r1, [pc, #160]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cc8:	4b26      	ldr	r3, [pc, #152]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	4a25      	ldr	r2, [pc, #148]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd4:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ce0:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4a1c      	ldr	r2, [pc, #112]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fc fd28 	bl	8002758 <HAL_GetTick>
 8005d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fc fd24 	bl	8002758 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e067      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0x730>
 8005d2a:	e05f      	b.n	8005dec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fc fd0e 	bl	8002758 <HAL_GetTick>
 8005d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d40:	f7fc fd0a 	bl	8002758 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e04d      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <HAL_RCC_OscConfig+0x788>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x764>
 8005d5e:	e045      	b.n	8005dec <HAL_RCC_OscConfig+0x810>
 8005d60:	58024800 	.word	0x58024800
 8005d64:	58024400 	.word	0x58024400
 8005d68:	fffffc0c 	.word	0xfffffc0c
 8005d6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d70:	4b21      	ldr	r3, [pc, #132]	; (8005df8 <HAL_RCC_OscConfig+0x81c>)
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_RCC_OscConfig+0x81c>)
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d031      	beq.n	8005de8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f003 0203 	and.w	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d12a      	bne.n	8005de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d122      	bne.n	8005de8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d11a      	bne.n	8005de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d111      	bne.n	8005de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d108      	bne.n	8005de8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	0e1b      	lsrs	r3, r3, #24
 8005dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3730      	adds	r7, #48	; 0x30
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	58024400 	.word	0x58024400

08005dfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e19c      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e10:	4b8a      	ldr	r3, [pc, #552]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d910      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b87      	ldr	r3, [pc, #540]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 020f 	bic.w	r2, r3, #15
 8005e26:	4985      	ldr	r1, [pc, #532]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b83      	ldr	r3, [pc, #524]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e184      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d010      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	4b7b      	ldr	r3, [pc, #492]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d908      	bls.n	8005e6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e5c:	4b78      	ldr	r3, [pc, #480]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	4975      	ldr	r1, [pc, #468]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d010      	beq.n	8005e9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	4b70      	ldr	r3, [pc, #448]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d908      	bls.n	8005e9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e8a:	4b6d      	ldr	r3, [pc, #436]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	496a      	ldr	r1, [pc, #424]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d010      	beq.n	8005eca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	4b64      	ldr	r3, [pc, #400]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d908      	bls.n	8005eca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005eb8:	4b61      	ldr	r3, [pc, #388]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	495e      	ldr	r1, [pc, #376]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d010      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	4b59      	ldr	r3, [pc, #356]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d908      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ee6:	4b56      	ldr	r3, [pc, #344]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	4953      	ldr	r1, [pc, #332]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d010      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	4b4d      	ldr	r3, [pc, #308]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d908      	bls.n	8005f26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f14:	4b4a      	ldr	r3, [pc, #296]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f023 020f 	bic.w	r2, r3, #15
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4947      	ldr	r1, [pc, #284]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d055      	beq.n	8005fde <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f32:	4b43      	ldr	r3, [pc, #268]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4940      	ldr	r1, [pc, #256]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f4c:	4b3c      	ldr	r3, [pc, #240]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d121      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0f6      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d107      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d115      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0ea      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f7c:	4b30      	ldr	r3, [pc, #192]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0de      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f8c:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0d6      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f9c:	4b28      	ldr	r3, [pc, #160]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f023 0207 	bic.w	r2, r3, #7
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4925      	ldr	r1, [pc, #148]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fae:	f7fc fbd3 	bl	8002758 <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb6:	f7fc fbcf 	bl	8002758 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e0be      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fcc:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d1eb      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d010      	beq.n	800600c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	4b14      	ldr	r3, [pc, #80]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d208      	bcs.n	800600c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ffa:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f023 020f 	bic.w	r2, r3, #15
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	490e      	ldr	r1, [pc, #56]	; (8006040 <HAL_RCC_ClockConfig+0x244>)
 8006008:	4313      	orrs	r3, r2
 800600a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d214      	bcs.n	8006044 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f023 020f 	bic.w	r2, r3, #15
 8006022:	4906      	ldr	r1, [pc, #24]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	4b04      	ldr	r3, [pc, #16]	; (800603c <HAL_RCC_ClockConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d005      	beq.n	8006044 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e086      	b.n	800614a <HAL_RCC_ClockConfig+0x34e>
 800603c:	52002000 	.word	0x52002000
 8006040:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d010      	beq.n	8006072 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	4b3f      	ldr	r3, [pc, #252]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800605c:	429a      	cmp	r2, r3
 800605e:	d208      	bcs.n	8006072 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006060:	4b3c      	ldr	r3, [pc, #240]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	4939      	ldr	r1, [pc, #228]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 800606e:	4313      	orrs	r3, r2
 8006070:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	4b34      	ldr	r3, [pc, #208]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800608a:	429a      	cmp	r2, r3
 800608c:	d208      	bcs.n	80060a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	492e      	ldr	r1, [pc, #184]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 800609c:	4313      	orrs	r3, r2
 800609e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d010      	beq.n	80060ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d208      	bcs.n	80060ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	4922      	ldr	r1, [pc, #136]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d208      	bcs.n	80060fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060ea:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	4917      	ldr	r1, [pc, #92]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060fc:	f000 f834 	bl	8006168 <HAL_RCC_GetSysClockFreq>
 8006100:	4601      	mov	r1, r0
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	0a1b      	lsrs	r3, r3, #8
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	4a12      	ldr	r2, [pc, #72]	; (8006158 <HAL_RCC_ClockConfig+0x35c>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	fa21 f303 	lsr.w	r3, r1, r3
 8006118:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <HAL_RCC_ClockConfig+0x358>)
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_RCC_ClockConfig+0x35c>)
 8006124:	5cd3      	ldrb	r3, [r2, r3]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <HAL_RCC_ClockConfig+0x360>)
 8006132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006134:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <HAL_RCC_ClockConfig+0x364>)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_RCC_ClockConfig+0x368>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fb fd52 	bl	8001be8 <HAL_InitTick>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	58024400 	.word	0x58024400
 8006158:	0800e69c 	.word	0x0800e69c
 800615c:	20000004 	.word	0x20000004
 8006160:	20000000 	.word	0x20000000
 8006164:	20000008 	.word	0x20000008

08006168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	; 0x24
 800616c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800616e:	4baf      	ldr	r3, [pc, #700]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006176:	2b18      	cmp	r3, #24
 8006178:	f200 814e 	bhi.w	8006418 <HAL_RCC_GetSysClockFreq+0x2b0>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_RCC_GetSysClockFreq+0x1c>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061e9 	.word	0x080061e9
 8006188:	08006419 	.word	0x08006419
 800618c:	08006419 	.word	0x08006419
 8006190:	08006419 	.word	0x08006419
 8006194:	08006419 	.word	0x08006419
 8006198:	08006419 	.word	0x08006419
 800619c:	08006419 	.word	0x08006419
 80061a0:	08006419 	.word	0x08006419
 80061a4:	0800620f 	.word	0x0800620f
 80061a8:	08006419 	.word	0x08006419
 80061ac:	08006419 	.word	0x08006419
 80061b0:	08006419 	.word	0x08006419
 80061b4:	08006419 	.word	0x08006419
 80061b8:	08006419 	.word	0x08006419
 80061bc:	08006419 	.word	0x08006419
 80061c0:	08006419 	.word	0x08006419
 80061c4:	08006215 	.word	0x08006215
 80061c8:	08006419 	.word	0x08006419
 80061cc:	08006419 	.word	0x08006419
 80061d0:	08006419 	.word	0x08006419
 80061d4:	08006419 	.word	0x08006419
 80061d8:	08006419 	.word	0x08006419
 80061dc:	08006419 	.word	0x08006419
 80061e0:	08006419 	.word	0x08006419
 80061e4:	0800621b 	.word	0x0800621b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061e8:	4b90      	ldr	r3, [pc, #576]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061f4:	4b8d      	ldr	r3, [pc, #564]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	08db      	lsrs	r3, r3, #3
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	4a8c      	ldr	r2, [pc, #560]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
 8006204:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006206:	e10a      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006208:	4b89      	ldr	r3, [pc, #548]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800620a:	61bb      	str	r3, [r7, #24]
    break;
 800620c:	e107      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800620e:	4b89      	ldr	r3, [pc, #548]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006210:	61bb      	str	r3, [r7, #24]
    break;
 8006212:	e104      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006214:	4b88      	ldr	r3, [pc, #544]	; (8006438 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006216:	61bb      	str	r3, [r7, #24]
    break;
 8006218:	e101      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800621a:	4b84      	ldr	r3, [pc, #528]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006224:	4b81      	ldr	r3, [pc, #516]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800622e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006230:	4b7e      	ldr	r3, [pc, #504]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800623a:	4b7c      	ldr	r3, [pc, #496]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80da 	beq.w	8006412 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d05a      	beq.n	800631a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d302      	bcc.n	800626e <HAL_RCC_GetSysClockFreq+0x106>
 8006268:	2b02      	cmp	r3, #2
 800626a:	d078      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x1f6>
 800626c:	e099      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626e:	4b6f      	ldr	r3, [pc, #444]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02d      	beq.n	80062d6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800627a:	4b6c      	ldr	r3, [pc, #432]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	4a6a      	ldr	r2, [pc, #424]	; (8006430 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a4:	4b61      	ldr	r3, [pc, #388]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062b8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800643c <HAL_RCC_GetSysClockFreq+0x2d4>
 80062bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80062d4:	e087      	b.n	80063e6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006440 <HAL_RCC_GetSysClockFreq+0x2d8>
 80062e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e8:	4b50      	ldr	r3, [pc, #320]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80062fc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800643c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006314:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006318:	e065      	b.n	80063e6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006324:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006444 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632c:	4b3f      	ldr	r3, [pc, #252]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006340:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800643c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800635c:	e043      	b.n	80063e6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006368:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006448 <HAL_RCC_GetSysClockFreq+0x2e0>
 800636c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006370:	4b2e      	ldr	r3, [pc, #184]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006380:	ed97 6a02 	vldr	s12, [r7, #8]
 8006384:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800643c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a0:	e021      	b.n	80063e6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006444 <HAL_RCC_GetSysClockFreq+0x2dc>
 80063b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b4:	4b1d      	ldr	r3, [pc, #116]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800643c <HAL_RCC_GetSysClockFreq+0x2d4>
 80063cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	0a5b      	lsrs	r3, r3, #9
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	3301      	adds	r3, #1
 80063f2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640a:	ee17 3a90 	vmov	r3, s15
 800640e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006410:	e005      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	61bb      	str	r3, [r7, #24]
    break;
 8006416:	e002      	b.n	800641e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800641a:	61bb      	str	r3, [r7, #24]
    break;
 800641c:	bf00      	nop
  }

  return sysclockfreq;
 800641e:	69bb      	ldr	r3, [r7, #24]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3724      	adds	r7, #36	; 0x24
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	58024400 	.word	0x58024400
 8006430:	03d09000 	.word	0x03d09000
 8006434:	003d0900 	.word	0x003d0900
 8006438:	017d7840 	.word	0x017d7840
 800643c:	46000000 	.word	0x46000000
 8006440:	4c742400 	.word	0x4c742400
 8006444:	4a742400 	.word	0x4a742400
 8006448:	4bbebc20 	.word	0x4bbebc20

0800644c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006452:	f7ff fe89 	bl	8006168 <HAL_RCC_GetSysClockFreq>
 8006456:	4601      	mov	r1, r0
 8006458:	4b10      	ldr	r3, [pc, #64]	; (800649c <HAL_RCC_GetHCLKFreq+0x50>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	4a0f      	ldr	r2, [pc, #60]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006464:	5cd3      	ldrb	r3, [r2, r3]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	fa21 f303 	lsr.w	r3, r1, r3
 800646e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <HAL_RCC_GetHCLKFreq+0x50>)
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800647a:	5cd3      	ldrb	r3, [r2, r3]
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	fa22 f303 	lsr.w	r3, r2, r3
 8006486:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	58024400 	.word	0x58024400
 80064a0:	0800e69c 	.word	0x0800e69c
 80064a4:	20000004 	.word	0x20000004
 80064a8:	20000000 	.word	0x20000000

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064b0:	f7ff ffcc 	bl	800644c <HAL_RCC_GetHCLKFreq>
 80064b4:	4601      	mov	r1, r0
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	58024400 	.word	0x58024400
 80064d4:	0800e69c 	.word	0x0800e69c

080064d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064dc:	f7ff ffb6 	bl	800644c <HAL_RCC_GetHCLKFreq>
 80064e0:	4601      	mov	r1, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ee:	5cd3      	ldrb	r3, [r2, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	58024400 	.word	0x58024400
 8006500:	0800e69c 	.word	0x0800e69c

08006504 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	223f      	movs	r2, #63	; 0x3f
 8006512:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0207 	and.w	r2, r3, #7
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800652c:	4b14      	ldr	r3, [pc, #80]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <HAL_RCC_GetClockConfig+0x7c>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCC_GetClockConfig+0x80>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 020f 	and.w	r2, r3, #15
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	58024400 	.word	0x58024400
 8006584:	52002000 	.word	0x52002000

08006588 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006590:	2300      	movs	r3, #0
 8006592:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006594:	2300      	movs	r3, #0
 8006596:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d03d      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ac:	d013      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b2:	d802      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80065b8:	e01f      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x72>
 80065ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065be:	d013      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80065c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065c4:	d01c      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80065c6:	e018      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c8:	4baf      	ldr	r3, [pc, #700]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	4aae      	ldr	r2, [pc, #696]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065d4:	e015      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3304      	adds	r3, #4
 80065da:	2102      	movs	r1, #2
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f96f 	bl	80078c0 <RCCEx_PLL2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065e6:	e00c      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3324      	adds	r3, #36	; 0x24
 80065ec:	2102      	movs	r1, #2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 fa18 	bl	8007a24 <RCCEx_PLL3_Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065f8:	e003      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	e000      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006608:	4b9f      	ldr	r3, [pc, #636]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006614:	499c      	ldr	r1, [pc, #624]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006616:	4313      	orrs	r3, r2
 8006618:	650b      	str	r3, [r1, #80]	; 0x50
 800661a:	e001      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d03d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	2b04      	cmp	r3, #4
 8006632:	d826      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006651 	.word	0x08006651
 8006640:	0800665f 	.word	0x0800665f
 8006644:	08006671 	.word	0x08006671
 8006648:	08006689 	.word	0x08006689
 800664c:	08006689 	.word	0x08006689
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4b8d      	ldr	r3, [pc, #564]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4a8c      	ldr	r2, [pc, #560]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800665c:	e015      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3304      	adds	r3, #4
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f92b 	bl	80078c0 <RCCEx_PLL2_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800666e:	e00c      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f001 f9d4 	bl	8007a24 <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
      break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006690:	4b7d      	ldr	r3, [pc, #500]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006694:	f023 0207 	bic.w	r2, r3, #7
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	497a      	ldr	r1, [pc, #488]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	650b      	str	r3, [r1, #80]	; 0x50
 80066a2:	e001      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03e      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b8:	2b80      	cmp	r3, #128	; 0x80
 80066ba:	d01c      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d804      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x142>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	d00d      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066c8:	e01e      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80066ca:	2bc0      	cmp	r3, #192	; 0xc0
 80066cc:	d01f      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d01e      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80066d4:	e018      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d6:	4b6c      	ldr	r3, [pc, #432]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	4a6b      	ldr	r2, [pc, #428]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066e2:	e017      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f8e8 	bl	80078c0 <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066f4:	e00e      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3324      	adds	r3, #36	; 0x24
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 f991 	bl	8007a24 <RCCEx_PLL3_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006706:	e005      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
      break;
 800670c:	e002      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800671a:	4b5b      	ldr	r3, [pc, #364]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800671c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	4958      	ldr	r1, [pc, #352]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006728:	4313      	orrs	r3, r2
 800672a:	650b      	str	r3, [r1, #80]	; 0x50
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673a:	2b00      	cmp	r3, #0
 800673c:	d044      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006748:	d01f      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800674a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674e:	d805      	bhi.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006758:	d00e      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800675a:	e01f      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800675c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006760:	d01f      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006766:	d01e      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006768:	e018      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	4a46      	ldr	r2, [pc, #280]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006776:	e017      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	2100      	movs	r1, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f001 f89e 	bl	80078c0 <RCCEx_PLL2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006788:	e00e      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3324      	adds	r3, #36	; 0x24
 800678e:	2100      	movs	r1, #0
 8006790:	4618      	mov	r0, r3
 8006792:	f001 f947 	bl	8007a24 <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800679a:	e005      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	e002      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80067a2:	bf00      	nop
 80067a4:	e000      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80067a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067ae:	4b36      	ldr	r3, [pc, #216]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067bc:	4932      	ldr	r1, [pc, #200]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	658b      	str	r3, [r1, #88]	; 0x58
 80067c2:	e001      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d044      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067de:	d01f      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e4:	d805      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80067ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ee:	d00e      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80067f0:	e01f      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80067f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067f6:	d01f      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80067f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067fc:	d01e      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80067fe:	e018      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006800:	4b21      	ldr	r3, [pc, #132]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800680c:	e017      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f853 	bl	80078c0 <RCCEx_PLL2_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800681e:	e00e      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3324      	adds	r3, #36	; 0x24
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f8fc 	bl	8007a24 <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006830:	e005      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
      break;
 8006836:	e002      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800683c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006844:	4b10      	ldr	r3, [pc, #64]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006848:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006852:	490d      	ldr	r1, [pc, #52]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006854:	4313      	orrs	r3, r2
 8006856:	658b      	str	r3, [r1, #88]	; 0x58
 8006858:	e001      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d035      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	2b10      	cmp	r3, #16
 8006870:	d00c      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006872:	2b10      	cmp	r3, #16
 8006874:	d802      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01b      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800687a:	e017      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x324>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d00c      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006880:	2b30      	cmp	r3, #48	; 0x30
 8006882:	d018      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006884:	e012      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006886:	bf00      	nop
 8006888:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4baf      	ldr	r3, [pc, #700]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4aae      	ldr	r2, [pc, #696]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006898:	e00e      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3304      	adds	r3, #4
 800689e:	2102      	movs	r1, #2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 f80d 	bl	80078c0 <RCCEx_PLL2_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80068aa:	e005      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]
      break;
 80068b0:	e002      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80068b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068be:	4ba3      	ldr	r3, [pc, #652]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ca:	49a0      	ldr	r1, [pc, #640]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068d0:	e001      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d042      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ea:	d01f      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f0:	d805      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x384>
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fa:	d00e      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80068fc:	e01f      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80068fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006902:	d01f      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006908:	d01e      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800690a:	e018      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690c:	4b8f      	ldr	r3, [pc, #572]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	4a8e      	ldr	r2, [pc, #568]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006918:	e017      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3304      	adds	r3, #4
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f000 ffcd 	bl	80078c0 <RCCEx_PLL2_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800692a:	e00e      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f001 f876 	bl	8007a24 <RCCEx_PLL3_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800693c:	e005      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
      break;
 8006942:	e002      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006950:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	497b      	ldr	r1, [pc, #492]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800695e:	4313      	orrs	r3, r2
 8006960:	650b      	str	r3, [r1, #80]	; 0x50
 8006962:	e001      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d042      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800697c:	d01b      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800697e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006982:	d805      	bhi.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d022      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800698e:	e01b      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006994:	d01d      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800699a:	d01c      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800699c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069a0:	d01b      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x452>
 80069a2:	e011      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	2101      	movs	r1, #1
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 ff88 	bl	80078c0 <RCCEx_PLL2_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069b4:	e012      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3324      	adds	r3, #36	; 0x24
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f831 	bl	8007a24 <RCCEx_PLL3_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069c6:	e009      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	75fb      	strb	r3, [r7, #23]
      break;
 80069cc:	e006      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069ce:	bf00      	nop
 80069d0:	e004      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069d2:	bf00      	nop
 80069d4:	e002      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069d6:	bf00      	nop
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80069da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069e2:	4b5a      	ldr	r3, [pc, #360]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ee:	4957      	ldr	r1, [pc, #348]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	650b      	str	r3, [r1, #80]	; 0x50
 80069f4:	e001      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d044      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a10:	d01b      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a16:	d805      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d022      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a20:	d00a      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006a22:	e01b      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a28:	d01d      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a2e:	d01c      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006a30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a34:	d01b      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a36:	e011      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 ff3e 	bl	80078c0 <RCCEx_PLL2_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a48:	e012      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3324      	adds	r3, #36	; 0x24
 8006a4e:	2101      	movs	r1, #1
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 ffe7 	bl	8007a24 <RCCEx_PLL3_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a5a:	e009      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a60:	e006      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a62:	bf00      	nop
 8006a64:	e004      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a66:	bf00      	nop
 8006a68:	e002      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e000      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a76:	4b35      	ldr	r3, [pc, #212]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a84:	4931      	ldr	r1, [pc, #196]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	658b      	str	r3, [r1, #88]	; 0x58
 8006a8a:	e001      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02d      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa4:	d005      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aaa:	d009      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d013      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ab0:	e00f      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab2:	4b26      	ldr	r3, [pc, #152]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006abe:	e00c      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fefa 	bl	80078c0 <RCCEx_PLL2_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ad0:	e003      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad6:	e000      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aec:	4917      	ldr	r1, [pc, #92]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	650b      	str	r3, [r1, #80]	; 0x50
 8006af2:	e001      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d035      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d81b      	bhi.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b51 	.word	0x08006b51
 8006b18:	08006b25 	.word	0x08006b25
 8006b1c:	08006b33 	.word	0x08006b33
 8006b20:	08006b51 	.word	0x08006b51
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	4a08      	ldr	r2, [pc, #32]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b30:	e00f      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	2102      	movs	r1, #2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fec1 	bl	80078c0 <RCCEx_PLL2_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b42:	e006      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	75fb      	strb	r3, [r7, #23]
      break;
 8006b48:	e003      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
      break;
 8006b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d109      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b58:	4bba      	ldr	r3, [pc, #744]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5c:	f023 0203 	bic.w	r2, r3, #3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b64:	49b7      	ldr	r1, [pc, #732]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b6a:	e001      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8086 	beq.w	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b7e:	4bb2      	ldr	r3, [pc, #712]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4ab1      	ldr	r2, [pc, #708]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8a:	f7fb fde5 	bl	8002758 <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b90:	e009      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b92:	f7fb fde1 	bl	8002758 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b64      	cmp	r3, #100	; 0x64
 8006b9e:	d902      	bls.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba6:	4ba8      	ldr	r3, [pc, #672]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0ef      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d166      	bne.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bb8:	4ba2      	ldr	r3, [pc, #648]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bc2:	4053      	eors	r3, r2
 8006bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d013      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bcc:	4b9d      	ldr	r3, [pc, #628]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	4a9a      	ldr	r2, [pc, #616]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006be2:	4b98      	ldr	r3, [pc, #608]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	4a97      	ldr	r2, [pc, #604]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bee:	4a95      	ldr	r2, [pc, #596]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d115      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fb fdaa 	bl	8002758 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c06:	e00b      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c08:	f7fb fda6 	bl	8002758 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d902      	bls.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	75fb      	strb	r3, [r7, #23]
            break;
 8006c1e:	e005      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c20:	4b88      	ldr	r3, [pc, #544]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0ed      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d126      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c40:	d10d      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006c42:	4b80      	ldr	r3, [pc, #512]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c50:	0919      	lsrs	r1, r3, #4
 8006c52:	4b7e      	ldr	r3, [pc, #504]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006c54:	400b      	ands	r3, r1
 8006c56:	497b      	ldr	r1, [pc, #492]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	610b      	str	r3, [r1, #16]
 8006c5c:	e005      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006c5e:	4b79      	ldr	r3, [pc, #484]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	4a78      	ldr	r2, [pc, #480]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c68:	6113      	str	r3, [r2, #16]
 8006c6a:	4b76      	ldr	r3, [pc, #472]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c78:	4972      	ldr	r1, [pc, #456]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	670b      	str	r3, [r1, #112]	; 0x70
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	75bb      	strb	r3, [r7, #22]
 8006c84:	e001      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d07d      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9a:	2b28      	cmp	r3, #40	; 0x28
 8006c9c:	d866      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006d73 	.word	0x08006d73
 8006ca8:	08006d6d 	.word	0x08006d6d
 8006cac:	08006d6d 	.word	0x08006d6d
 8006cb0:	08006d6d 	.word	0x08006d6d
 8006cb4:	08006d6d 	.word	0x08006d6d
 8006cb8:	08006d6d 	.word	0x08006d6d
 8006cbc:	08006d6d 	.word	0x08006d6d
 8006cc0:	08006d6d 	.word	0x08006d6d
 8006cc4:	08006d49 	.word	0x08006d49
 8006cc8:	08006d6d 	.word	0x08006d6d
 8006ccc:	08006d6d 	.word	0x08006d6d
 8006cd0:	08006d6d 	.word	0x08006d6d
 8006cd4:	08006d6d 	.word	0x08006d6d
 8006cd8:	08006d6d 	.word	0x08006d6d
 8006cdc:	08006d6d 	.word	0x08006d6d
 8006ce0:	08006d6d 	.word	0x08006d6d
 8006ce4:	08006d5b 	.word	0x08006d5b
 8006ce8:	08006d6d 	.word	0x08006d6d
 8006cec:	08006d6d 	.word	0x08006d6d
 8006cf0:	08006d6d 	.word	0x08006d6d
 8006cf4:	08006d6d 	.word	0x08006d6d
 8006cf8:	08006d6d 	.word	0x08006d6d
 8006cfc:	08006d6d 	.word	0x08006d6d
 8006d00:	08006d6d 	.word	0x08006d6d
 8006d04:	08006d73 	.word	0x08006d73
 8006d08:	08006d6d 	.word	0x08006d6d
 8006d0c:	08006d6d 	.word	0x08006d6d
 8006d10:	08006d6d 	.word	0x08006d6d
 8006d14:	08006d6d 	.word	0x08006d6d
 8006d18:	08006d6d 	.word	0x08006d6d
 8006d1c:	08006d6d 	.word	0x08006d6d
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d73 	.word	0x08006d73
 8006d28:	08006d6d 	.word	0x08006d6d
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d6d 	.word	0x08006d6d
 8006d34:	08006d6d 	.word	0x08006d6d
 8006d38:	08006d6d 	.word	0x08006d6d
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	08006d73 	.word	0x08006d73
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fdb6 	bl	80078c0 <RCCEx_PLL2_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d58:	e00c      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3324      	adds	r3, #36	; 0x24
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fe5f 	bl	8007a24 <RCCEx_PLL3_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d7a:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d86:	492f      	ldr	r1, [pc, #188]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d8c:	e001      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d037      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d820      	bhi.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006def 	.word	0x08006def
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dd7 	.word	0x08006dd7
 8006db8:	08006def 	.word	0x08006def
 8006dbc:	08006def 	.word	0x08006def
 8006dc0:	08006def 	.word	0x08006def
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fd78 	bl	80078c0 <RCCEx_PLL2_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dd4:	e00c      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fe21 	bl	8007a24 <RCCEx_PLL3_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006de6:	e003      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	75fb      	strb	r3, [r7, #23]
      break;
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006df6:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	f023 0207 	bic.w	r2, r3, #7
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e02:	4910      	ldr	r1, [pc, #64]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	654b      	str	r3, [r1, #84]	; 0x54
 8006e08:	e001      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d040      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	2b05      	cmp	r3, #5
 8006e22:	d827      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e7b 	.word	0x08006e7b
 8006e30:	08006e51 	.word	0x08006e51
 8006e34:	08006e63 	.word	0x08006e63
 8006e38:	08006e7b 	.word	0x08006e7b
 8006e3c:	08006e7b 	.word	0x08006e7b
 8006e40:	08006e7b 	.word	0x08006e7b
 8006e44:	58024400 	.word	0x58024400
 8006e48:	58024800 	.word	0x58024800
 8006e4c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	2101      	movs	r1, #1
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fd32 	bl	80078c0 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e60:	e00c      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	2101      	movs	r1, #1
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fddb 	bl	8007a24 <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e72:	e003      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	75fb      	strb	r3, [r7, #23]
      break;
 8006e78:	e000      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e82:	4bb2      	ldr	r3, [pc, #712]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e86:	f023 0207 	bic.w	r2, r3, #7
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e90:	49ae      	ldr	r1, [pc, #696]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	658b      	str	r3, [r1, #88]	; 0x58
 8006e96:	e001      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d044      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb2:	d01b      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb8:	d805      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d022      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec2:	d00a      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006ec4:	e01b      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d01d      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed0:	d01c      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ed6:	d01b      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006ed8:	e011      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fced 	bl	80078c0 <RCCEx_PLL2_Config>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006eea:	e012      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3324      	adds	r3, #36	; 0x24
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fd96 	bl	8007a24 <RCCEx_PLL3_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006efc:	e009      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
      break;
 8006f02:	e006      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f04:	bf00      	nop
 8006f06:	e004      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e002      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f18:	4b8c      	ldr	r3, [pc, #560]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f26:	4989      	ldr	r1, [pc, #548]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f2c:	e001      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d044      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f48:	d01b      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f4e:	d805      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d022      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006f5a:	e01b      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d01d      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006f62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f66:	d01c      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f6c:	d01b      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006f6e:	e011      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fca2 	bl	80078c0 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f80:	e012      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	2102      	movs	r1, #2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fd4b 	bl	8007a24 <RCCEx_PLL3_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f92:	e009      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	75fb      	strb	r3, [r7, #23]
      break;
 8006f98:	e006      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e004      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fae:	4b67      	ldr	r3, [pc, #412]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fbc:	4963      	ldr	r1, [pc, #396]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	658b      	str	r3, [r1, #88]	; 0x58
 8006fc2:	e001      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d044      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fde:	d01b      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe4:	d805      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d022      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fee:	d00a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ff0:	e01b      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d01d      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006ff8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ffc:	d01c      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006ffe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007002:	d01b      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007004:	e011      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3304      	adds	r3, #4
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fc57 	bl	80078c0 <RCCEx_PLL2_Config>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007016:	e012      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3324      	adds	r3, #36	; 0x24
 800701c:	2102      	movs	r1, #2
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd00 	bl	8007a24 <RCCEx_PLL3_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007028:	e009      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]
      break;
 800702e:	e006      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007030:	bf00      	nop
 8007032:	e004      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007034:	bf00      	nop
 8007036:	e002      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800703c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007044:	4b41      	ldr	r3, [pc, #260]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007052:	493e      	ldr	r1, [pc, #248]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007054:	4313      	orrs	r3, r2
 8007056:	658b      	str	r3, [r1, #88]	; 0x58
 8007058:	e001      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01a      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d10a      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3324      	adds	r3, #36	; 0x24
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fcd1 	bl	8007a24 <RCCEx_PLL3_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800708c:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709a:	492c      	ldr	r1, [pc, #176]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800709c:	4313      	orrs	r3, r2
 800709e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b6:	d10a      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3324      	adds	r3, #36	; 0x24
 80070bc:	2102      	movs	r1, #2
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fcb0 	bl	8007a24 <RCCEx_PLL3_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070ce:	4b1f      	ldr	r3, [pc, #124]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070dc:	491b      	ldr	r1, [pc, #108]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d032      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d00d      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80070fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070fe:	d016      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d111      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3304      	adds	r3, #4
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fbd8 	bl	80078c0 <RCCEx_PLL2_Config>
 8007110:	4603      	mov	r3, r0
 8007112:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007114:	e00c      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3324      	adds	r3, #36	; 0x24
 800711a:	2102      	movs	r1, #2
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fc81 	bl	8007a24 <RCCEx_PLL3_Config>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007126:	e003      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
      break;
 800712c:	e000      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800712e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10c      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007144:	4901      	ldr	r1, [pc, #4]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007146:	4313      	orrs	r3, r2
 8007148:	658b      	str	r3, [r1, #88]	; 0x58
 800714a:	e003      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800714c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02f      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800716a:	d00c      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800716c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007170:	d015      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007176:	d10f      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007178:	4b79      	ldr	r3, [pc, #484]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	4a78      	ldr	r2, [pc, #480]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800717e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007184:	e00c      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3324      	adds	r3, #36	; 0x24
 800718a:	2101      	movs	r1, #1
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fc49 	bl	8007a24 <RCCEx_PLL3_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007196:	e003      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
      break;
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800719e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a6:	4b6e      	ldr	r3, [pc, #440]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b4:	496a      	ldr	r1, [pc, #424]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	654b      	str	r3, [r1, #84]	; 0x54
 80071ba:	e001      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d029      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d8:	d007      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80071da:	e00f      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071dc:	4b60      	ldr	r3, [pc, #384]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a5f      	ldr	r2, [pc, #380]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071e8:	e00b      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fb65 	bl	80078c0 <RCCEx_PLL2_Config>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071fa:	e002      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d109      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007208:	4b55      	ldr	r3, [pc, #340]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800720a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007214:	4952      	ldr	r1, [pc, #328]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007216:	4313      	orrs	r3, r2
 8007218:	64cb      	str	r3, [r1, #76]	; 0x4c
 800721a:	e001      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	2102      	movs	r1, #2
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fbf6 	bl	8007a24 <RCCEx_PLL3_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02f      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007256:	d00c      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725c:	d802      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d011      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007262:	e00d      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d00f      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800726a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726e:	d00e      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007272:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	4a3a      	ldr	r2, [pc, #232]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800727e:	e007      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
      break;
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007286:	bf00      	nop
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800728e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007296:	4b32      	ldr	r3, [pc, #200]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a2:	492f      	ldr	r1, [pc, #188]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	654b      	str	r3, [r1, #84]	; 0x54
 80072a8:	e001      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072ba:	4b29      	ldr	r3, [pc, #164]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	4926      	ldr	r1, [pc, #152]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80072d8:	4b21      	ldr	r3, [pc, #132]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072e6:	491e      	ldr	r1, [pc, #120]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072f8:	4b19      	ldr	r3, [pc, #100]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007304:	4916      	ldr	r1, [pc, #88]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007306:	4313      	orrs	r3, r2
 8007308:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007316:	4b12      	ldr	r3, [pc, #72]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	4a11      	ldr	r2, [pc, #68]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800731c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007320:	6113      	str	r3, [r2, #16]
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800732c:	490c      	ldr	r1, [pc, #48]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800732e:	4313      	orrs	r3, r2
 8007330:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	da08      	bge.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	4906      	ldr	r1, [pc, #24]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007348:	4313      	orrs	r3, r2
 800734a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800734c:	7dbb      	ldrb	r3, [r7, #22]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	e000      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	58024400 	.word	0x58024400

08007364 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007368:	f7ff f870 	bl	800644c <HAL_RCC_GetHCLKFreq>
 800736c:	4601      	mov	r1, r0
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	091b      	lsrs	r3, r3, #4
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	58024400 	.word	0x58024400
 800738c:	0800e69c 	.word	0x0800e69c

08007390 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007390:	b480      	push	{r7}
 8007392:	b089      	sub	sp, #36	; 0x24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007398:	4b9d      	ldr	r3, [pc, #628]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	f003 0303 	and.w	r3, r3, #3
 80073a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80073a2:	4b9b      	ldr	r3, [pc, #620]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	0b1b      	lsrs	r3, r3, #12
 80073a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073ae:	4b98      	ldr	r3, [pc, #608]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	091b      	lsrs	r3, r3, #4
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80073ba:	4b95      	ldr	r3, [pc, #596]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073be:	08db      	lsrs	r3, r3, #3
 80073c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	fb02 f303 	mul.w	r3, r2, r3
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 810a 	beq.w	80075f2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d05a      	beq.n	800749a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d302      	bcc.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d078      	beq.n	80074de <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80073ec:	e099      	b.n	8007522 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ee:	4b88      	ldr	r3, [pc, #544]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02d      	beq.n	8007456 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073fa:	4b85      	ldr	r3, [pc, #532]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	08db      	lsrs	r3, r3, #3
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	4a83      	ldr	r2, [pc, #524]	; (8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007406:	fa22 f303 	lsr.w	r3, r2, r3
 800740a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007424:	4b7a      	ldr	r3, [pc, #488]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007434:	ed97 6a03 	vldr	s12, [r7, #12]
 8007438:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800743c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007450:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007454:	e087      	b.n	8007566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007460:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007468:	4b69      	ldr	r3, [pc, #420]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	ed97 6a03 	vldr	s12, [r7, #12]
 800747c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007494:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007498:	e065      	b.n	8007566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80074a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ac:	4b58      	ldr	r3, [pc, #352]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074dc:	e043      	b.n	8007566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80074ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f0:	4b47      	ldr	r3, [pc, #284]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007500:	ed97 6a03 	vldr	s12, [r7, #12]
 8007504:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007520:	e021      	b.n	8007566 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007534:	4b36      	ldr	r3, [pc, #216]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007544:	ed97 6a03 	vldr	s12, [r7, #12]
 8007548:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800754c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007564:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007566:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	0a5b      	lsrs	r3, r3, #9
 800756c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800757c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007580:	edd7 6a07 	vldr	s13, [r7, #28]
 8007584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758c:	ee17 2a90 	vmov	r2, s15
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	0c1b      	lsrs	r3, r3, #16
 800759a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ba:	ee17 2a90 	vmov	r2, s15
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	0e1b      	lsrs	r3, r3, #24
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e8:	ee17 2a90 	vmov	r2, s15
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075f0:	e008      	b.n	8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	3724      	adds	r7, #36	; 0x24
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	58024400 	.word	0x58024400
 8007614:	03d09000 	.word	0x03d09000
 8007618:	46000000 	.word	0x46000000
 800761c:	4c742400 	.word	0x4c742400
 8007620:	4a742400 	.word	0x4a742400
 8007624:	4bbebc20 	.word	0x4bbebc20

08007628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	; 0x24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007630:	4b9d      	ldr	r3, [pc, #628]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800763a:	4b9b      	ldr	r3, [pc, #620]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	0d1b      	lsrs	r3, r3, #20
 8007640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007644:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007646:	4b98      	ldr	r3, [pc, #608]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	0a1b      	lsrs	r3, r3, #8
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007652:	4b95      	ldr	r3, [pc, #596]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	08db      	lsrs	r3, r3, #3
 8007658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 810a 	beq.w	800788a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d05a      	beq.n	8007732 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800767c:	2b01      	cmp	r3, #1
 800767e:	d302      	bcc.n	8007686 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007680:	2b02      	cmp	r3, #2
 8007682:	d078      	beq.n	8007776 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007684:	e099      	b.n	80077ba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007686:	4b88      	ldr	r3, [pc, #544]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b00      	cmp	r3, #0
 8007690:	d02d      	beq.n	80076ee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007692:	4b85      	ldr	r3, [pc, #532]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	08db      	lsrs	r3, r3, #3
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	4a83      	ldr	r2, [pc, #524]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800769e:	fa22 f303 	lsr.w	r3, r2, r3
 80076a2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076bc:	4b7a      	ldr	r3, [pc, #488]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076ec:	e087      	b.n	80077fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80076fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007700:	4b69      	ldr	r3, [pc, #420]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007710:	ed97 6a03 	vldr	s12, [r7, #12]
 8007714:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007730:	e065      	b.n	80077fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007744:	4b58      	ldr	r3, [pc, #352]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007754:	ed97 6a03 	vldr	s12, [r7, #12]
 8007758:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800775c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007774:	e043      	b.n	80077fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007780:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007788:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007798:	ed97 6a03 	vldr	s12, [r7, #12]
 800779c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b8:	e021      	b.n	80077fe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80077c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077cc:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d4:	ee07 3a90 	vmov	s15, r3
 80077d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80077e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077fc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077fe:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	0a5b      	lsrs	r3, r3, #9
 8007804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007818:	edd7 6a07 	vldr	s13, [r7, #28]
 800781c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007824:	ee17 2a90 	vmov	r2, s15
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800782c:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	0c1b      	lsrs	r3, r3, #16
 8007832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007846:	edd7 6a07 	vldr	s13, [r7, #28]
 800784a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007852:	ee17 2a90 	vmov	r2, s15
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007874:	edd7 6a07 	vldr	s13, [r7, #28]
 8007878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007880:	ee17 2a90 	vmov	r2, s15
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007888:	e008      	b.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	609a      	str	r2, [r3, #8]
}
 800789c:	bf00      	nop
 800789e:	3724      	adds	r7, #36	; 0x24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	58024400 	.word	0x58024400
 80078ac:	03d09000 	.word	0x03d09000
 80078b0:	46000000 	.word	0x46000000
 80078b4:	4c742400 	.word	0x4c742400
 80078b8:	4a742400 	.word	0x4a742400
 80078bc:	4bbebc20 	.word	0x4bbebc20

080078c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ce:	4b53      	ldr	r3, [pc, #332]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d101      	bne.n	80078de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e099      	b.n	8007a12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078de:	4b4f      	ldr	r3, [pc, #316]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a4e      	ldr	r2, [pc, #312]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80078e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ea:	f7fa ff35 	bl	8002758 <HAL_GetTick>
 80078ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078f0:	e008      	b.n	8007904 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078f2:	f7fa ff31 	bl	8002758 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e086      	b.n	8007a12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007904:	4b45      	ldr	r3, [pc, #276]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f0      	bne.n	80078f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007910:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	031b      	lsls	r3, r3, #12
 800791e:	493f      	ldr	r1, [pc, #252]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007920:	4313      	orrs	r3, r2
 8007922:	628b      	str	r3, [r1, #40]	; 0x28
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	3b01      	subs	r3, #1
 800792a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	025b      	lsls	r3, r3, #9
 8007936:	b29b      	uxth	r3, r3
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	3b01      	subs	r3, #1
 8007940:	041b      	lsls	r3, r3, #16
 8007942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	3b01      	subs	r3, #1
 800794e:	061b      	lsls	r3, r3, #24
 8007950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007954:	4931      	ldr	r1, [pc, #196]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007956:	4313      	orrs	r3, r2
 8007958:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	492d      	ldr	r1, [pc, #180]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007968:	4313      	orrs	r3, r2
 800796a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800796c:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f023 0220 	bic.w	r2, r3, #32
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	4928      	ldr	r1, [pc, #160]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800797e:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007984:	f023 0310 	bic.w	r3, r3, #16
 8007988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800798c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <RCCEx_PLL2_Config+0x160>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	69d2      	ldr	r2, [r2, #28]
 8007996:	00d2      	lsls	r2, r2, #3
 8007998:	4920      	ldr	r1, [pc, #128]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800799a:	4313      	orrs	r3, r2
 800799c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a2:	4a1e      	ldr	r2, [pc, #120]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079a4:	f043 0310 	orr.w	r3, r3, #16
 80079a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079bc:	e00f      	b.n	80079de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d106      	bne.n	80079d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a14      	ldr	r2, [pc, #80]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079d0:	e005      	b.n	80079de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a0e      	ldr	r2, [pc, #56]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ea:	f7fa feb5 	bl	8002758 <HAL_GetTick>
 80079ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079f0:	e008      	b.n	8007a04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079f2:	f7fa feb1 	bl	8002758 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e006      	b.n	8007a12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0f0      	beq.n	80079f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	ffff0007 	.word	0xffff0007

08007a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a32:	4b53      	ldr	r3, [pc, #332]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d101      	bne.n	8007a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e099      	b.n	8007b76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a42:	4b4f      	ldr	r3, [pc, #316]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a4e      	ldr	r2, [pc, #312]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a4e:	f7fa fe83 	bl	8002758 <HAL_GetTick>
 8007a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a54:	e008      	b.n	8007a68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a56:	f7fa fe7f 	bl	8002758 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e086      	b.n	8007b76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a68:	4b45      	ldr	r3, [pc, #276]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a74:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	051b      	lsls	r3, r3, #20
 8007a82:	493f      	ldr	r1, [pc, #252]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	628b      	str	r3, [r1, #40]	; 0x28
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	025b      	lsls	r3, r3, #9
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	041b      	lsls	r3, r3, #16
 8007aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ab8:	4931      	ldr	r1, [pc, #196]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007abe:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	492d      	ldr	r1, [pc, #180]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	4928      	ldr	r1, [pc, #160]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ae2:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007aee:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <RCCEx_PLL3_Config+0x160>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	69d2      	ldr	r2, [r2, #28]
 8007afa:	00d2      	lsls	r2, r2, #3
 8007afc:	4920      	ldr	r1, [pc, #128]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b02:	4b1f      	ldr	r3, [pc, #124]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a1e      	ldr	r2, [pc, #120]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b14:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	4a19      	ldr	r2, [pc, #100]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b20:	e00f      	b.n	8007b42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d106      	bne.n	8007b36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b34:	e005      	b.n	8007b42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a11      	ldr	r2, [pc, #68]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a0e      	ldr	r2, [pc, #56]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4e:	f7fa fe03 	bl	8002758 <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b54:	e008      	b.n	8007b68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b56:	f7fa fdff 	bl	8002758 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e006      	b.n	8007b76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	58024400 	.word	0x58024400
 8007b84:	ffff0007 	.word	0xffff0007

08007b88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d067      	beq.n	8007c6a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7f9 fbca 	bl	8001348 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	22ca      	movs	r2, #202	; 0xca
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2253      	movs	r2, #83	; 0x53
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f879 	bl	8007cc4 <RTC_EnterInitMode>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d13b      	bne.n	8007c54 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6899      	ldr	r1, [r3, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <HAL_RTC_Init+0xec>)
 8007be8:	400b      	ands	r3, r1
 8007bea:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6899      	ldr	r1, [r3, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	0419      	lsls	r1, r3, #16
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f881 	bl	8007d24 <RTC_ExitInitMode>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d113      	bne.n	8007c54 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0203 	bic.w	r2, r2, #3
 8007c3a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69da      	ldr	r2, [r3, #28]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	22ff      	movs	r2, #255	; 0xff
 8007c5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	ff8fffbf 	.word	0xff8fffbf

08007c78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c8e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007c90:	f7fa fd62 	bl	8002758 <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c96:	e009      	b.n	8007cac <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c98:	f7fa fd5e 	bl	8002758 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ca6:	d901      	bls.n	8007cac <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e007      	b.n	8007cbc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0ee      	beq.n	8007c98 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d11d      	bne.n	8007d1a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ce8:	f7fa fd36 	bl	8002758 <HAL_GetTick>
 8007cec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007cee:	e00d      	b.n	8007d0c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007cf0:	f7fa fd32 	bl	8002758 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cfe:	d905      	bls.n	8007d0c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2203      	movs	r2, #3
 8007d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0ea      	beq.n	8007cf0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007d30:	4b1a      	ldr	r3, [pc, #104]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4a19      	ldr	r2, [pc, #100]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007d3c:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10c      	bne.n	8007d62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff ff95 	bl	8007c78 <HAL_RTC_WaitForSynchro>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01e      	beq.n	8007d92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2203      	movs	r2, #3
 8007d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	73fb      	strb	r3, [r7, #15]
 8007d60:	e017      	b.n	8007d92 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d62:	4b0e      	ldr	r3, [pc, #56]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	4a0d      	ldr	r2, [pc, #52]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d68:	f023 0320 	bic.w	r3, r3, #32
 8007d6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff ff82 	bl	8007c78 <HAL_RTC_WaitForSynchro>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	4a04      	ldr	r2, [pc, #16]	; (8007d9c <RTC_ExitInitMode+0x78>)
 8007d8c:	f043 0320 	orr.w	r3, r3, #32
 8007d90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	58004000 	.word	0x58004000

08007da0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e0e2      	b.n	8007f7c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a70      	ldr	r2, [pc, #448]	; (8007f84 <HAL_SPI_Init+0x1e4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00f      	beq.n	8007de6 <HAL_SPI_Init+0x46>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a6f      	ldr	r2, [pc, #444]	; (8007f88 <HAL_SPI_Init+0x1e8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00a      	beq.n	8007de6 <HAL_SPI_Init+0x46>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6d      	ldr	r2, [pc, #436]	; (8007f8c <HAL_SPI_Init+0x1ec>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d005      	beq.n	8007de6 <HAL_SPI_Init+0x46>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b0f      	cmp	r3, #15
 8007de0:	d901      	bls.n	8007de6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e0ca      	b.n	8007f7c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fb96 	bl	8008518 <SPI_GetPacketSize>
 8007dec:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a64      	ldr	r2, [pc, #400]	; (8007f84 <HAL_SPI_Init+0x1e4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00c      	beq.n	8007e12 <HAL_SPI_Init+0x72>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a62      	ldr	r2, [pc, #392]	; (8007f88 <HAL_SPI_Init+0x1e8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d007      	beq.n	8007e12 <HAL_SPI_Init+0x72>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a61      	ldr	r2, [pc, #388]	; (8007f8c <HAL_SPI_Init+0x1ec>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d002      	beq.n	8007e12 <HAL_SPI_Init+0x72>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d811      	bhi.n	8007e36 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e16:	4a5b      	ldr	r2, [pc, #364]	; (8007f84 <HAL_SPI_Init+0x1e4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d009      	beq.n	8007e30 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a59      	ldr	r2, [pc, #356]	; (8007f88 <HAL_SPI_Init+0x1e8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_SPI_Init+0x90>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a58      	ldr	r2, [pc, #352]	; (8007f8c <HAL_SPI_Init+0x1ec>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d104      	bne.n	8007e3a <HAL_SPI_Init+0x9a>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b10      	cmp	r3, #16
 8007e34:	d901      	bls.n	8007e3a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e0a0      	b.n	8007f7c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7f9 fbec 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e74:	d110      	bne.n	8007e98 <HAL_SPI_Init+0xf8>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e7e:	d10b      	bne.n	8007e98 <HAL_SPI_Init+0xf8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e96:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eaa:	ea42 0103 	orr.w	r1, r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef8:	ea42 0103 	orr.w	r1, r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d113      	bne.n	8007f38 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f22:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f36:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0201 	bic.w	r2, r2, #1
 8007f46:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40013000 	.word	0x40013000
 8007f88:	40003800 	.word	0x40003800
 8007f8c:	40003c00 	.word	0x40003c00

08007f90 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007fa8:	6a3a      	ldr	r2, [r7, #32]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fc2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3330      	adds	r3, #48	; 0x30
 8007fca:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d113      	bne.n	8007ffe <HAL_SPI_IRQHandler+0x6e>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10e      	bne.n	8007ffe <HAL_SPI_IRQHandler+0x6e>
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
    handled = 1UL;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10f      	bne.n	8008028 <HAL_SPI_IRQHandler+0x98>
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <HAL_SPI_IRQHandler+0x98>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
    handled = 1UL;
 8008024:	2301      	movs	r3, #1
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10f      	bne.n	8008052 <HAL_SPI_IRQHandler+0xc2>
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <HAL_SPI_IRQHandler+0xc2>
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
    handled = 1UL;
 800804e:	2301      	movs	r3, #1
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	f040 8170 	bne.w	800833a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80a0 	beq.w	80081a6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	699a      	ldr	r2, [r3, #24]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0208 	orr.w	r2, r2, #8
 8008074:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0210 	orr.w	r2, r2, #16
 8008084:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	699a      	ldr	r2, [r3, #24]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008094:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0208 	bic.w	r2, r2, #8
 80080a4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00f      	beq.n	80080d0 <HAL_SPI_IRQHandler+0x140>
 80080b0:	7cfb      	ldrb	r3, [r7, #19]
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d004      	beq.n	80080c0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <HAL_SPI_IRQHandler+0x140>
 80080c0:	7cfb      	ldrb	r3, [r7, #19]
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d059      	beq.n	800817a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d154      	bne.n	800817a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d13d      	bne.n	800815a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80080de:	e036      	b.n	800814e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b0f      	cmp	r3, #15
 80080e6:	d90b      	bls.n	8008100 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080f2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	665a      	str	r2, [r3, #100]	; 0x64
 80080fe:	e01d      	b.n	800813c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b07      	cmp	r3, #7
 8008106:	d90b      	bls.n	8008120 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	8812      	ldrh	r2, [r2, #0]
 8008110:	b292      	uxth	r2, r2
 8008112:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008118:	1c9a      	adds	r2, r3, #2
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	665a      	str	r2, [r3, #100]	; 0x64
 800811e:	e00d      	b.n	800813c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812c:	7812      	ldrb	r2, [r2, #0]
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1c2      	bne.n	80080e0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f93c 	bl	80083d8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f90c 	bl	8008390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8008178:	e0e4      	b.n	8008344 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800817a:	7cfb      	ldrb	r3, [r7, #19]
 800817c:	2b05      	cmp	r3, #5
 800817e:	d103      	bne.n	8008188 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8fb 	bl	800837c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8008186:	e0da      	b.n	800833e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008188:	7cfb      	ldrb	r3, [r7, #19]
 800818a:	2b04      	cmp	r3, #4
 800818c:	d103      	bne.n	8008196 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f8ea 	bl	8008368 <HAL_SPI_RxCpltCallback>
    return;
 8008194:	e0d3      	b.n	800833e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008196:	7cfb      	ldrb	r3, [r7, #19]
 8008198:	2b03      	cmp	r3, #3
 800819a:	f040 80d0 	bne.w	800833e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8d8 	bl	8008354 <HAL_SPI_TxCpltCallback>
    return;
 80081a4:	e0cb      	b.n	800833e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00d      	beq.n	80081cc <HAL_SPI_IRQHandler+0x23c>
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d008      	beq.n	80081cc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081c8:	619a      	str	r2, [r3, #24]

    return;
 80081ca:	e0bb      	b.n	8008344 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80b6 	beq.w	8008344 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00f      	beq.n	8008202 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e8:	f043 0204 	orr.w	r2, r3, #4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	699a      	ldr	r2, [r3, #24]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008200:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00f      	beq.n	800822c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008212:	f043 0201 	orr.w	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800822a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823c:	f043 0208 	orr.w	r2, r3, #8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699a      	ldr	r2, [r3, #24]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008254:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00f      	beq.n	8008280 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008266:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0220 	orr.w	r2, r2, #32
 800827e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008286:	2b00      	cmp	r3, #0
 8008288:	d05b      	beq.n	8008342 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0201 	bic.w	r2, r2, #1
 8008298:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6919      	ldr	r1, [r3, #16]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	4b29      	ldr	r3, [pc, #164]	; (800834c <HAL_SPI_IRQHandler+0x3bc>)
 80082a6:	400b      	ands	r3, r1
 80082a8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082b4:	d138      	bne.n	8008328 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80082c4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d013      	beq.n	80082f6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d2:	4a1f      	ldr	r2, [pc, #124]	; (8008350 <HAL_SPI_IRQHandler+0x3c0>)
 80082d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb f806 	bl	80032ec <HAL_DMA_Abort_IT>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d021      	beq.n	8008342 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008302:	4a13      	ldr	r2, [pc, #76]	; (8008350 <HAL_SPI_IRQHandler+0x3c0>)
 8008304:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800830a:	4618      	mov	r0, r3
 800830c:	f7fa ffee 	bl	80032ec <HAL_DMA_Abort_IT>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d015      	beq.n	8008342 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800831c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008326:	e00c      	b.n	8008342 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f82d 	bl	8008390 <HAL_SPI_ErrorCallback>
    return;
 8008336:	bf00      	nop
 8008338:	e003      	b.n	8008342 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800833a:	bf00      	nop
 800833c:	e002      	b.n	8008344 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800833e:	bf00      	nop
 8008340:	e000      	b.n	8008344 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8008342:	bf00      	nop
  }
}
 8008344:	3728      	adds	r7, #40	; 0x28
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	fffffc94 	.word	0xfffffc94
 8008350:	080083a5 	.word	0x080083a5

08008354 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7ff ffe0 	bl	8008390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083d0:	bf00      	nop
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0210 	orr.w	r2, r2, #16
 8008406:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0201 	bic.w	r2, r2, #1
 8008416:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6919      	ldr	r1, [r3, #16]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b3c      	ldr	r3, [pc, #240]	; (8008514 <SPI_CloseTransfer+0x13c>)
 8008424:	400b      	ands	r3, r1
 8008426:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008436:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b04      	cmp	r3, #4
 8008442:	d014      	beq.n	800846e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00f      	beq.n	800846e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0220 	orr.w	r2, r2, #32
 800846c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d014      	beq.n	80084a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00f      	beq.n	80084a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800848a:	f043 0204 	orr.w	r2, r3, #4
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00f      	beq.n	80084ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b4:	f043 0201 	orr.w	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00f      	beq.n	80084f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084de:	f043 0208 	orr.w	r2, r3, #8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	fffffc90 	.word	0xfffffc90

08008518 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	3307      	adds	r3, #7
 8008536:	08db      	lsrs	r3, r3, #3
 8008538:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e049      	b.n	80085f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f841 	bl	80085fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f000 f9bd 	bl	800890c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b01      	cmp	r3, #1
 8008622:	d001      	beq.n	8008628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e021      	b.n	800866c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <HAL_TIM_Base_Start_IT+0x68>)
 8008648:	4013      	ands	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b06      	cmp	r3, #6
 8008650:	d00b      	beq.n	800866a <HAL_TIM_Base_Start_IT+0x5a>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008658:	d007      	beq.n	800866a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	00010007 	.word	0x00010007

0800867c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b02      	cmp	r3, #2
 8008690:	d122      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b02      	cmp	r3, #2
 800869e:	d11b      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0202 	mvn.w	r2, #2
 80086a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f905 	bl	80088ce <HAL_TIM_IC_CaptureCallback>
 80086c4:	e005      	b.n	80086d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f8f7 	bl	80088ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f908 	bl	80088e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d122      	bne.n	800872c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d11b      	bne.n	800872c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f06f 0204 	mvn.w	r2, #4
 80086fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2202      	movs	r2, #2
 8008702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8db 	bl	80088ce <HAL_TIM_IC_CaptureCallback>
 8008718:	e005      	b.n	8008726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f8cd 	bl	80088ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f8de 	bl	80088e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b08      	cmp	r3, #8
 8008738:	d122      	bne.n	8008780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b08      	cmp	r3, #8
 8008746:	d11b      	bne.n	8008780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0208 	mvn.w	r2, #8
 8008750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2204      	movs	r2, #4
 8008756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8b1 	bl	80088ce <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8a3 	bl	80088ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f8b4 	bl	80088e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0310 	and.w	r3, r3, #16
 800878a:	2b10      	cmp	r3, #16
 800878c:	d122      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0310 	and.w	r3, r3, #16
 8008798:	2b10      	cmp	r3, #16
 800879a:	d11b      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0210 	mvn.w	r2, #16
 80087a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2208      	movs	r2, #8
 80087aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f887 	bl	80088ce <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f879 	bl	80088ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f88a 	bl	80088e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d10e      	bne.n	8008800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d107      	bne.n	8008800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0201 	mvn.w	r2, #1
 80087f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7f8 fc7a 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880a:	2b80      	cmp	r3, #128	; 0x80
 800880c:	d10e      	bne.n	800882c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008818:	2b80      	cmp	r3, #128	; 0x80
 800881a:	d107      	bne.n	800882c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f914 	bl	8008a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800883a:	d10e      	bne.n	800885a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	d107      	bne.n	800885a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f907 	bl	8008a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d10e      	bne.n	8008886 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d107      	bne.n	8008886 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800887e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f838 	bl	80088f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b20      	cmp	r3, #32
 8008892:	d10e      	bne.n	80088b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d107      	bne.n	80088b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f06f 0220 	mvn.w	r2, #32
 80088aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8c7 	bl	8008a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a40      	ldr	r2, [pc, #256]	; (8008a20 <TIM_Base_SetConfig+0x114>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d013      	beq.n	800894c <TIM_Base_SetConfig+0x40>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892a:	d00f      	beq.n	800894c <TIM_Base_SetConfig+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a3d      	ldr	r2, [pc, #244]	; (8008a24 <TIM_Base_SetConfig+0x118>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00b      	beq.n	800894c <TIM_Base_SetConfig+0x40>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a3c      	ldr	r2, [pc, #240]	; (8008a28 <TIM_Base_SetConfig+0x11c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d007      	beq.n	800894c <TIM_Base_SetConfig+0x40>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a3b      	ldr	r2, [pc, #236]	; (8008a2c <TIM_Base_SetConfig+0x120>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_Base_SetConfig+0x40>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a3a      	ldr	r2, [pc, #232]	; (8008a30 <TIM_Base_SetConfig+0x124>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d108      	bne.n	800895e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a2f      	ldr	r2, [pc, #188]	; (8008a20 <TIM_Base_SetConfig+0x114>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01f      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896c:	d01b      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a2c      	ldr	r2, [pc, #176]	; (8008a24 <TIM_Base_SetConfig+0x118>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d017      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a2b      	ldr	r2, [pc, #172]	; (8008a28 <TIM_Base_SetConfig+0x11c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2a      	ldr	r2, [pc, #168]	; (8008a2c <TIM_Base_SetConfig+0x120>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00f      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a29      	ldr	r2, [pc, #164]	; (8008a30 <TIM_Base_SetConfig+0x124>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a28      	ldr	r2, [pc, #160]	; (8008a34 <TIM_Base_SetConfig+0x128>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a27      	ldr	r2, [pc, #156]	; (8008a38 <TIM_Base_SetConfig+0x12c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_Base_SetConfig+0x9a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a26      	ldr	r2, [pc, #152]	; (8008a3c <TIM_Base_SetConfig+0x130>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d108      	bne.n	80089b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a10      	ldr	r2, [pc, #64]	; (8008a20 <TIM_Base_SetConfig+0x114>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00f      	beq.n	8008a04 <TIM_Base_SetConfig+0xf8>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <TIM_Base_SetConfig+0x124>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00b      	beq.n	8008a04 <TIM_Base_SetConfig+0xf8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a11      	ldr	r2, [pc, #68]	; (8008a34 <TIM_Base_SetConfig+0x128>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d007      	beq.n	8008a04 <TIM_Base_SetConfig+0xf8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a10      	ldr	r2, [pc, #64]	; (8008a38 <TIM_Base_SetConfig+0x12c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_Base_SetConfig+0xf8>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a0f      	ldr	r2, [pc, #60]	; (8008a3c <TIM_Base_SetConfig+0x130>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d103      	bne.n	8008a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	691a      	ldr	r2, [r3, #16]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	615a      	str	r2, [r3, #20]
}
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40000400 	.word	0x40000400
 8008a28:	40000800 	.word	0x40000800
 8008a2c:	40000c00 	.word	0x40000c00
 8008a30:	40010400 	.word	0x40010400
 8008a34:	40014000 	.word	0x40014000
 8008a38:	40014400 	.word	0x40014400
 8008a3c:	40014800 	.word	0x40014800

08008a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e042      	b.n	8008b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7f9 fb59 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2224      	movs	r2, #36	; 0x24
 8008aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8c2 	bl	8008c48 <UART_SetConfig>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e022      	b.n	8008b14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fe66 	bl	80097a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 feed 	bl	80098ec <UART_CheckIdleState>
 8008b12:	4603      	mov	r3, r0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	f040 8083 	bne.w	8008c3e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_UART_Transmit+0x28>
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e07b      	b.n	8008c40 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_UART_Transmit+0x3a>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e074      	b.n	8008c40 <HAL_UART_Transmit+0x124>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2221      	movs	r2, #33	; 0x21
 8008b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008b6e:	f7f9 fdf3 	bl	8002758 <HAL_GetTick>
 8008b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	88fa      	ldrh	r2, [r7, #6]
 8008b78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	88fa      	ldrh	r2, [r7, #6]
 8008b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8c:	d108      	bne.n	8008ba0 <HAL_UART_Transmit+0x84>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	e003      	b.n	8008ba8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008bb0:	e02c      	b.n	8008c0c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2180      	movs	r1, #128	; 0x80
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fedd 	bl	800997c <UART_WaitOnFlagUntilTimeout>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e039      	b.n	8008c40 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10b      	bne.n	8008bea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	3302      	adds	r3, #2
 8008be6:	61bb      	str	r3, [r7, #24]
 8008be8:	e007      	b.n	8008bfa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1cc      	bne.n	8008bb2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2140      	movs	r1, #64	; 0x40
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 feaa 	bl	800997c <UART_WaitOnFlagUntilTimeout>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e006      	b.n	8008c40 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e000      	b.n	8008c40 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008c4c:	b08e      	sub	sp, #56	; 0x38
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	431a      	orrs	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c76:	4313      	orrs	r3, r2
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4bc1      	ldr	r3, [pc, #772]	; (8008f88 <UART_SetConfig+0x340>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6812      	ldr	r2, [r2, #0]
 8008c88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4ab7      	ldr	r2, [pc, #732]	; (8008f8c <UART_SetConfig+0x344>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d004      	beq.n	8008cbe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	4bb2      	ldr	r3, [pc, #712]	; (8008f90 <UART_SetConfig+0x348>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6812      	ldr	r2, [r2, #0]
 8008ccc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	f023 010f 	bic.w	r1, r3, #15
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4aa9      	ldr	r2, [pc, #676]	; (8008f94 <UART_SetConfig+0x34c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d177      	bne.n	8008de2 <UART_SetConfig+0x19a>
 8008cf2:	4ba9      	ldr	r3, [pc, #676]	; (8008f98 <UART_SetConfig+0x350>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cfa:	2b28      	cmp	r3, #40	; 0x28
 8008cfc:	d86c      	bhi.n	8008dd8 <UART_SetConfig+0x190>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <UART_SetConfig+0xbc>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008da9 	.word	0x08008da9
 8008d08:	08008dd9 	.word	0x08008dd9
 8008d0c:	08008dd9 	.word	0x08008dd9
 8008d10:	08008dd9 	.word	0x08008dd9
 8008d14:	08008dd9 	.word	0x08008dd9
 8008d18:	08008dd9 	.word	0x08008dd9
 8008d1c:	08008dd9 	.word	0x08008dd9
 8008d20:	08008dd9 	.word	0x08008dd9
 8008d24:	08008db1 	.word	0x08008db1
 8008d28:	08008dd9 	.word	0x08008dd9
 8008d2c:	08008dd9 	.word	0x08008dd9
 8008d30:	08008dd9 	.word	0x08008dd9
 8008d34:	08008dd9 	.word	0x08008dd9
 8008d38:	08008dd9 	.word	0x08008dd9
 8008d3c:	08008dd9 	.word	0x08008dd9
 8008d40:	08008dd9 	.word	0x08008dd9
 8008d44:	08008db9 	.word	0x08008db9
 8008d48:	08008dd9 	.word	0x08008dd9
 8008d4c:	08008dd9 	.word	0x08008dd9
 8008d50:	08008dd9 	.word	0x08008dd9
 8008d54:	08008dd9 	.word	0x08008dd9
 8008d58:	08008dd9 	.word	0x08008dd9
 8008d5c:	08008dd9 	.word	0x08008dd9
 8008d60:	08008dd9 	.word	0x08008dd9
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008dd9 	.word	0x08008dd9
 8008d6c:	08008dd9 	.word	0x08008dd9
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008dd9 	.word	0x08008dd9
 8008d78:	08008dd9 	.word	0x08008dd9
 8008d7c:	08008dd9 	.word	0x08008dd9
 8008d80:	08008dd9 	.word	0x08008dd9
 8008d84:	08008dc9 	.word	0x08008dc9
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008dd9 	.word	0x08008dd9
 8008d90:	08008dd9 	.word	0x08008dd9
 8008d94:	08008dd9 	.word	0x08008dd9
 8008d98:	08008dd9 	.word	0x08008dd9
 8008d9c:	08008dd9 	.word	0x08008dd9
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dae:	e233      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008db0:	2304      	movs	r3, #4
 8008db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008db6:	e22f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008db8:	2308      	movs	r3, #8
 8008dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dbe:	e22b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dc6:	e227      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dce:	e223      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd6:	e21f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dde:	bf00      	nop
 8008de0:	e21a      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a6d      	ldr	r2, [pc, #436]	; (8008f9c <UART_SetConfig+0x354>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d132      	bne.n	8008e52 <UART_SetConfig+0x20a>
 8008dec:	4b6a      	ldr	r3, [pc, #424]	; (8008f98 <UART_SetConfig+0x350>)
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	d827      	bhi.n	8008e48 <UART_SetConfig+0x200>
 8008df8:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <UART_SetConfig+0x1b8>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e19 	.word	0x08008e19
 8008e04:	08008e21 	.word	0x08008e21
 8008e08:	08008e29 	.word	0x08008e29
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e39 	.word	0x08008e39
 8008e14:	08008e41 	.word	0x08008e41
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1e:	e1fb      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e20:	2304      	movs	r3, #4
 8008e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e26:	e1f7      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e28:	2308      	movs	r3, #8
 8008e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2e:	e1f3      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e30:	2310      	movs	r3, #16
 8008e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e36:	e1ef      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e38:	2320      	movs	r3, #32
 8008e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3e:	e1eb      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e40:	2340      	movs	r3, #64	; 0x40
 8008e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e46:	e1e7      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4e:	bf00      	nop
 8008e50:	e1e2      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a52      	ldr	r2, [pc, #328]	; (8008fa0 <UART_SetConfig+0x358>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d132      	bne.n	8008ec2 <UART_SetConfig+0x27a>
 8008e5c:	4b4e      	ldr	r3, [pc, #312]	; (8008f98 <UART_SetConfig+0x350>)
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	f003 0307 	and.w	r3, r3, #7
 8008e64:	2b05      	cmp	r3, #5
 8008e66:	d827      	bhi.n	8008eb8 <UART_SetConfig+0x270>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <UART_SetConfig+0x228>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008e89 	.word	0x08008e89
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008ea1 	.word	0x08008ea1
 8008e80:	08008ea9 	.word	0x08008ea9
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8e:	e1c3      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e96:	e1bf      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e9e:	e1bb      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea6:	e1b7      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eae:	e1b3      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008eb0:	2340      	movs	r3, #64	; 0x40
 8008eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb6:	e1af      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008eb8:	2380      	movs	r3, #128	; 0x80
 8008eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ebe:	bf00      	nop
 8008ec0:	e1aa      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a37      	ldr	r2, [pc, #220]	; (8008fa4 <UART_SetConfig+0x35c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d132      	bne.n	8008f32 <UART_SetConfig+0x2ea>
 8008ecc:	4b32      	ldr	r3, [pc, #200]	; (8008f98 <UART_SetConfig+0x350>)
 8008ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d827      	bhi.n	8008f28 <UART_SetConfig+0x2e0>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <UART_SetConfig+0x298>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008ef9 	.word	0x08008ef9
 8008ee4:	08008f01 	.word	0x08008f01
 8008ee8:	08008f09 	.word	0x08008f09
 8008eec:	08008f11 	.word	0x08008f11
 8008ef0:	08008f19 	.word	0x08008f19
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efe:	e18b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f00:	2304      	movs	r3, #4
 8008f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f06:	e187      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f08:	2308      	movs	r3, #8
 8008f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0e:	e183      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f10:	2310      	movs	r3, #16
 8008f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f16:	e17f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f18:	2320      	movs	r3, #32
 8008f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f1e:	e17b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f26:	e177      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f28:	2380      	movs	r3, #128	; 0x80
 8008f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2e:	bf00      	nop
 8008f30:	e172      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1c      	ldr	r2, [pc, #112]	; (8008fa8 <UART_SetConfig+0x360>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d144      	bne.n	8008fc6 <UART_SetConfig+0x37e>
 8008f3c:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <UART_SetConfig+0x350>)
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	f003 0307 	and.w	r3, r3, #7
 8008f44:	2b05      	cmp	r3, #5
 8008f46:	d839      	bhi.n	8008fbc <UART_SetConfig+0x374>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <UART_SetConfig+0x308>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f69 	.word	0x08008f69
 8008f54:	08008f71 	.word	0x08008f71
 8008f58:	08008f79 	.word	0x08008f79
 8008f5c:	08008f81 	.word	0x08008f81
 8008f60:	08008fad 	.word	0x08008fad
 8008f64:	08008fb5 	.word	0x08008fb5
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6e:	e153      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f70:	2304      	movs	r3, #4
 8008f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f76:	e14f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7e:	e14b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f86:	e147      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008f88:	cfff69f3 	.word	0xcfff69f3
 8008f8c:	58000c00 	.word	0x58000c00
 8008f90:	11fff4ff 	.word	0x11fff4ff
 8008f94:	40011000 	.word	0x40011000
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	40004400 	.word	0x40004400
 8008fa0:	40004800 	.word	0x40004800
 8008fa4:	40004c00 	.word	0x40004c00
 8008fa8:	40005000 	.word	0x40005000
 8008fac:	2320      	movs	r3, #32
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e131      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e12d      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	bf00      	nop
 8008fc4:	e128      	b.n	8009218 <UART_SetConfig+0x5d0>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4ab6      	ldr	r2, [pc, #728]	; (80092a4 <UART_SetConfig+0x65c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d178      	bne.n	80090c2 <UART_SetConfig+0x47a>
 8008fd0:	4bb5      	ldr	r3, [pc, #724]	; (80092a8 <UART_SetConfig+0x660>)
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fd8:	2b28      	cmp	r3, #40	; 0x28
 8008fda:	d86d      	bhi.n	80090b8 <UART_SetConfig+0x470>
 8008fdc:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <UART_SetConfig+0x39c>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	08009089 	.word	0x08009089
 8008fe8:	080090b9 	.word	0x080090b9
 8008fec:	080090b9 	.word	0x080090b9
 8008ff0:	080090b9 	.word	0x080090b9
 8008ff4:	080090b9 	.word	0x080090b9
 8008ff8:	080090b9 	.word	0x080090b9
 8008ffc:	080090b9 	.word	0x080090b9
 8009000:	080090b9 	.word	0x080090b9
 8009004:	08009091 	.word	0x08009091
 8009008:	080090b9 	.word	0x080090b9
 800900c:	080090b9 	.word	0x080090b9
 8009010:	080090b9 	.word	0x080090b9
 8009014:	080090b9 	.word	0x080090b9
 8009018:	080090b9 	.word	0x080090b9
 800901c:	080090b9 	.word	0x080090b9
 8009020:	080090b9 	.word	0x080090b9
 8009024:	08009099 	.word	0x08009099
 8009028:	080090b9 	.word	0x080090b9
 800902c:	080090b9 	.word	0x080090b9
 8009030:	080090b9 	.word	0x080090b9
 8009034:	080090b9 	.word	0x080090b9
 8009038:	080090b9 	.word	0x080090b9
 800903c:	080090b9 	.word	0x080090b9
 8009040:	080090b9 	.word	0x080090b9
 8009044:	080090a1 	.word	0x080090a1
 8009048:	080090b9 	.word	0x080090b9
 800904c:	080090b9 	.word	0x080090b9
 8009050:	080090b9 	.word	0x080090b9
 8009054:	080090b9 	.word	0x080090b9
 8009058:	080090b9 	.word	0x080090b9
 800905c:	080090b9 	.word	0x080090b9
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090a9 	.word	0x080090a9
 8009068:	080090b9 	.word	0x080090b9
 800906c:	080090b9 	.word	0x080090b9
 8009070:	080090b9 	.word	0x080090b9
 8009074:	080090b9 	.word	0x080090b9
 8009078:	080090b9 	.word	0x080090b9
 800907c:	080090b9 	.word	0x080090b9
 8009080:	080090b9 	.word	0x080090b9
 8009084:	080090b1 	.word	0x080090b1
 8009088:	2301      	movs	r3, #1
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908e:	e0c3      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009090:	2304      	movs	r3, #4
 8009092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009096:	e0bf      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009098:	2308      	movs	r3, #8
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e0bb      	b.n	8009218 <UART_SetConfig+0x5d0>
 80090a0:	2310      	movs	r3, #16
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	e0b7      	b.n	8009218 <UART_SetConfig+0x5d0>
 80090a8:	2320      	movs	r3, #32
 80090aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ae:	e0b3      	b.n	8009218 <UART_SetConfig+0x5d0>
 80090b0:	2340      	movs	r3, #64	; 0x40
 80090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b6:	e0af      	b.n	8009218 <UART_SetConfig+0x5d0>
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090be:	bf00      	nop
 80090c0:	e0aa      	b.n	8009218 <UART_SetConfig+0x5d0>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a79      	ldr	r2, [pc, #484]	; (80092ac <UART_SetConfig+0x664>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d132      	bne.n	8009132 <UART_SetConfig+0x4ea>
 80090cc:	4b76      	ldr	r3, [pc, #472]	; (80092a8 <UART_SetConfig+0x660>)
 80090ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	2b05      	cmp	r3, #5
 80090d6:	d827      	bhi.n	8009128 <UART_SetConfig+0x4e0>
 80090d8:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <UART_SetConfig+0x498>)
 80090da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090de:	bf00      	nop
 80090e0:	080090f9 	.word	0x080090f9
 80090e4:	08009101 	.word	0x08009101
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08009111 	.word	0x08009111
 80090f0:	08009119 	.word	0x08009119
 80090f4:	08009121 	.word	0x08009121
 80090f8:	2300      	movs	r3, #0
 80090fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fe:	e08b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009100:	2304      	movs	r3, #4
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009106:	e087      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009108:	2308      	movs	r3, #8
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e083      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009110:	2310      	movs	r3, #16
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	e07f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009118:	2320      	movs	r3, #32
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911e:	e07b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009120:	2340      	movs	r3, #64	; 0x40
 8009122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009126:	e077      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912e:	bf00      	nop
 8009130:	e072      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a5e      	ldr	r2, [pc, #376]	; (80092b0 <UART_SetConfig+0x668>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d132      	bne.n	80091a2 <UART_SetConfig+0x55a>
 800913c:	4b5a      	ldr	r3, [pc, #360]	; (80092a8 <UART_SetConfig+0x660>)
 800913e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	2b05      	cmp	r3, #5
 8009146:	d827      	bhi.n	8009198 <UART_SetConfig+0x550>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <UART_SetConfig+0x508>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009169 	.word	0x08009169
 8009154:	08009171 	.word	0x08009171
 8009158:	08009179 	.word	0x08009179
 800915c:	08009181 	.word	0x08009181
 8009160:	08009189 	.word	0x08009189
 8009164:	08009191 	.word	0x08009191
 8009168:	2300      	movs	r3, #0
 800916a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916e:	e053      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009170:	2304      	movs	r3, #4
 8009172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009176:	e04f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009178:	2308      	movs	r3, #8
 800917a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917e:	e04b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009180:	2310      	movs	r3, #16
 8009182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009186:	e047      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009188:	2320      	movs	r3, #32
 800918a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918e:	e043      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009196:	e03f      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009198:	2380      	movs	r3, #128	; 0x80
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919e:	bf00      	nop
 80091a0:	e03a      	b.n	8009218 <UART_SetConfig+0x5d0>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a43      	ldr	r2, [pc, #268]	; (80092b4 <UART_SetConfig+0x66c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d132      	bne.n	8009212 <UART_SetConfig+0x5ca>
 80091ac:	4b3e      	ldr	r3, [pc, #248]	; (80092a8 <UART_SetConfig+0x660>)
 80091ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	d827      	bhi.n	8009208 <UART_SetConfig+0x5c0>
 80091b8:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <UART_SetConfig+0x578>)
 80091ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091be:	bf00      	nop
 80091c0:	080091d9 	.word	0x080091d9
 80091c4:	080091e1 	.word	0x080091e1
 80091c8:	080091e9 	.word	0x080091e9
 80091cc:	080091f1 	.word	0x080091f1
 80091d0:	080091f9 	.word	0x080091f9
 80091d4:	08009201 	.word	0x08009201
 80091d8:	2302      	movs	r3, #2
 80091da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091de:	e01b      	b.n	8009218 <UART_SetConfig+0x5d0>
 80091e0:	2304      	movs	r3, #4
 80091e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e6:	e017      	b.n	8009218 <UART_SetConfig+0x5d0>
 80091e8:	2308      	movs	r3, #8
 80091ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ee:	e013      	b.n	8009218 <UART_SetConfig+0x5d0>
 80091f0:	2310      	movs	r3, #16
 80091f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f6:	e00f      	b.n	8009218 <UART_SetConfig+0x5d0>
 80091f8:	2320      	movs	r3, #32
 80091fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fe:	e00b      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009206:	e007      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009208:	2380      	movs	r3, #128	; 0x80
 800920a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800920e:	bf00      	nop
 8009210:	e002      	b.n	8009218 <UART_SetConfig+0x5d0>
 8009212:	2380      	movs	r3, #128	; 0x80
 8009214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a25      	ldr	r2, [pc, #148]	; (80092b4 <UART_SetConfig+0x66c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	f040 80b8 	bne.w	8009394 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009224:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009228:	2b08      	cmp	r3, #8
 800922a:	d019      	beq.n	8009260 <UART_SetConfig+0x618>
 800922c:	2b08      	cmp	r3, #8
 800922e:	dc04      	bgt.n	800923a <UART_SetConfig+0x5f2>
 8009230:	2b02      	cmp	r3, #2
 8009232:	d009      	beq.n	8009248 <UART_SetConfig+0x600>
 8009234:	2b04      	cmp	r3, #4
 8009236:	d00b      	beq.n	8009250 <UART_SetConfig+0x608>
 8009238:	e042      	b.n	80092c0 <UART_SetConfig+0x678>
 800923a:	2b20      	cmp	r3, #32
 800923c:	d02b      	beq.n	8009296 <UART_SetConfig+0x64e>
 800923e:	2b40      	cmp	r3, #64	; 0x40
 8009240:	d02c      	beq.n	800929c <UART_SetConfig+0x654>
 8009242:	2b10      	cmp	r3, #16
 8009244:	d014      	beq.n	8009270 <UART_SetConfig+0x628>
 8009246:	e03b      	b.n	80092c0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009248:	f7fe f88c 	bl	8007364 <HAL_RCCEx_GetD3PCLK1Freq>
 800924c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800924e:	e03d      	b.n	80092cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009250:	f107 0314 	add.w	r3, r7, #20
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe f89b 	bl	8007390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800925e:	e035      	b.n	80092cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009260:	f107 0308 	add.w	r3, r7, #8
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe f9df 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800926e:	e02d      	b.n	80092cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <UART_SetConfig+0x660>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <UART_SetConfig+0x660>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	4a0c      	ldr	r2, [pc, #48]	; (80092b8 <UART_SetConfig+0x670>)
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800928e:	e01d      	b.n	80092cc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009290:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <UART_SetConfig+0x670>)
 8009292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009294:	e01a      	b.n	80092cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <UART_SetConfig+0x674>)
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800929a:	e017      	b.n	80092cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092a2:	e013      	b.n	80092cc <UART_SetConfig+0x684>
 80092a4:	40011400 	.word	0x40011400
 80092a8:	58024400 	.word	0x58024400
 80092ac:	40007800 	.word	0x40007800
 80092b0:	40007c00 	.word	0x40007c00
 80092b4:	58000c00 	.word	0x58000c00
 80092b8:	03d09000 	.word	0x03d09000
 80092bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 824d 	beq.w	800976e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	4aad      	ldr	r2, [pc, #692]	; (8009590 <UART_SetConfig+0x948>)
 80092da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092de:	461a      	mov	r2, r3
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092e6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d305      	bcc.n	8009304 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092fe:	6a3a      	ldr	r2, [r7, #32]
 8009300:	429a      	cmp	r2, r3
 8009302:	d903      	bls.n	800930c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800930a:	e230      	b.n	800976e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	4618      	mov	r0, r3
 8009310:	f04f 0100 	mov.w	r1, #0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	4a9d      	ldr	r2, [pc, #628]	; (8009590 <UART_SetConfig+0x948>)
 800931a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800931e:	b29b      	uxth	r3, r3
 8009320:	f04f 0400 	mov.w	r4, #0
 8009324:	461a      	mov	r2, r3
 8009326:	4623      	mov	r3, r4
 8009328:	f7f6 ffe2 	bl	80002f0 <__aeabi_uldivmod>
 800932c:	4603      	mov	r3, r0
 800932e:	460c      	mov	r4, r1
 8009330:	4619      	mov	r1, r3
 8009332:	4622      	mov	r2, r4
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	f04f 0400 	mov.w	r4, #0
 800933c:	0214      	lsls	r4, r2, #8
 800933e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009342:	020b      	lsls	r3, r1, #8
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6852      	ldr	r2, [r2, #4]
 8009348:	0852      	lsrs	r2, r2, #1
 800934a:	4611      	mov	r1, r2
 800934c:	f04f 0200 	mov.w	r2, #0
 8009350:	eb13 0b01 	adds.w	fp, r3, r1
 8009354:	eb44 0c02 	adc.w	ip, r4, r2
 8009358:	4658      	mov	r0, fp
 800935a:	4661      	mov	r1, ip
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f04f 0400 	mov.w	r4, #0
 8009364:	461a      	mov	r2, r3
 8009366:	4623      	mov	r3, r4
 8009368:	f7f6 ffc2 	bl	80002f0 <__aeabi_uldivmod>
 800936c:	4603      	mov	r3, r0
 800936e:	460c      	mov	r4, r1
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009378:	d308      	bcc.n	800938c <UART_SetConfig+0x744>
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009380:	d204      	bcs.n	800938c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009388:	60da      	str	r2, [r3, #12]
 800938a:	e1f0      	b.n	800976e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009392:	e1ec      	b.n	800976e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800939c:	f040 8100 	bne.w	80095a0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80093a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093a4:	2b40      	cmp	r3, #64	; 0x40
 80093a6:	f200 80b7 	bhi.w	8009518 <UART_SetConfig+0x8d0>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <UART_SetConfig+0x768>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	080094b5 	.word	0x080094b5
 80093b4:	080094bd 	.word	0x080094bd
 80093b8:	08009519 	.word	0x08009519
 80093bc:	08009519 	.word	0x08009519
 80093c0:	080094c5 	.word	0x080094c5
 80093c4:	08009519 	.word	0x08009519
 80093c8:	08009519 	.word	0x08009519
 80093cc:	08009519 	.word	0x08009519
 80093d0:	080094d5 	.word	0x080094d5
 80093d4:	08009519 	.word	0x08009519
 80093d8:	08009519 	.word	0x08009519
 80093dc:	08009519 	.word	0x08009519
 80093e0:	08009519 	.word	0x08009519
 80093e4:	08009519 	.word	0x08009519
 80093e8:	08009519 	.word	0x08009519
 80093ec:	08009519 	.word	0x08009519
 80093f0:	080094e5 	.word	0x080094e5
 80093f4:	08009519 	.word	0x08009519
 80093f8:	08009519 	.word	0x08009519
 80093fc:	08009519 	.word	0x08009519
 8009400:	08009519 	.word	0x08009519
 8009404:	08009519 	.word	0x08009519
 8009408:	08009519 	.word	0x08009519
 800940c:	08009519 	.word	0x08009519
 8009410:	08009519 	.word	0x08009519
 8009414:	08009519 	.word	0x08009519
 8009418:	08009519 	.word	0x08009519
 800941c:	08009519 	.word	0x08009519
 8009420:	08009519 	.word	0x08009519
 8009424:	08009519 	.word	0x08009519
 8009428:	08009519 	.word	0x08009519
 800942c:	08009519 	.word	0x08009519
 8009430:	0800950b 	.word	0x0800950b
 8009434:	08009519 	.word	0x08009519
 8009438:	08009519 	.word	0x08009519
 800943c:	08009519 	.word	0x08009519
 8009440:	08009519 	.word	0x08009519
 8009444:	08009519 	.word	0x08009519
 8009448:	08009519 	.word	0x08009519
 800944c:	08009519 	.word	0x08009519
 8009450:	08009519 	.word	0x08009519
 8009454:	08009519 	.word	0x08009519
 8009458:	08009519 	.word	0x08009519
 800945c:	08009519 	.word	0x08009519
 8009460:	08009519 	.word	0x08009519
 8009464:	08009519 	.word	0x08009519
 8009468:	08009519 	.word	0x08009519
 800946c:	08009519 	.word	0x08009519
 8009470:	08009519 	.word	0x08009519
 8009474:	08009519 	.word	0x08009519
 8009478:	08009519 	.word	0x08009519
 800947c:	08009519 	.word	0x08009519
 8009480:	08009519 	.word	0x08009519
 8009484:	08009519 	.word	0x08009519
 8009488:	08009519 	.word	0x08009519
 800948c:	08009519 	.word	0x08009519
 8009490:	08009519 	.word	0x08009519
 8009494:	08009519 	.word	0x08009519
 8009498:	08009519 	.word	0x08009519
 800949c:	08009519 	.word	0x08009519
 80094a0:	08009519 	.word	0x08009519
 80094a4:	08009519 	.word	0x08009519
 80094a8:	08009519 	.word	0x08009519
 80094ac:	08009519 	.word	0x08009519
 80094b0:	08009511 	.word	0x08009511
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b4:	f7fc fffa 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 80094b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094ba:	e033      	b.n	8009524 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094bc:	f7fd f80c 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 80094c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094c2:	e02f      	b.n	8009524 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094c4:	f107 0314 	add.w	r3, r7, #20
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fd ff61 	bl	8007390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094d2:	e027      	b.n	8009524 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe f8a5 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094e2:	e01f      	b.n	8009524 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094e4:	4b2b      	ldr	r3, [pc, #172]	; (8009594 <UART_SetConfig+0x94c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d009      	beq.n	8009504 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <UART_SetConfig+0x94c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	08db      	lsrs	r3, r3, #3
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	4a27      	ldr	r2, [pc, #156]	; (8009598 <UART_SetConfig+0x950>)
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009500:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009502:	e00f      	b.n	8009524 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <UART_SetConfig+0x950>)
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009508:	e00c      	b.n	8009524 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800950a:	4b24      	ldr	r3, [pc, #144]	; (800959c <UART_SetConfig+0x954>)
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800950e:	e009      	b.n	8009524 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009516:	e005      	b.n	8009524 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009522:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8121 	beq.w	800976e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	4a17      	ldr	r2, [pc, #92]	; (8009590 <UART_SetConfig+0x948>)
 8009532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009536:	461a      	mov	r2, r3
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	fbb3 f3f2 	udiv	r3, r3, r2
 800953e:	005a      	lsls	r2, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	085b      	lsrs	r3, r3, #1
 8009546:	441a      	add	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009550:	b29b      	uxth	r3, r3
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d916      	bls.n	8009588 <UART_SetConfig+0x940>
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009560:	d212      	bcs.n	8009588 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	b29b      	uxth	r3, r3
 8009566:	f023 030f 	bic.w	r3, r3, #15
 800956a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	b29b      	uxth	r3, r3
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	b29a      	uxth	r2, r3
 8009578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800957a:	4313      	orrs	r3, r2
 800957c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009584:	60da      	str	r2, [r3, #12]
 8009586:	e0f2      	b.n	800976e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800958e:	e0ee      	b.n	800976e <UART_SetConfig+0xb26>
 8009590:	0800e6b4 	.word	0x0800e6b4
 8009594:	58024400 	.word	0x58024400
 8009598:	03d09000 	.word	0x03d09000
 800959c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80095a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	f200 80b7 	bhi.w	8009718 <UART_SetConfig+0xad0>
 80095aa:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <UART_SetConfig+0x968>)
 80095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b0:	080096b5 	.word	0x080096b5
 80095b4:	080096bd 	.word	0x080096bd
 80095b8:	08009719 	.word	0x08009719
 80095bc:	08009719 	.word	0x08009719
 80095c0:	080096c5 	.word	0x080096c5
 80095c4:	08009719 	.word	0x08009719
 80095c8:	08009719 	.word	0x08009719
 80095cc:	08009719 	.word	0x08009719
 80095d0:	080096d5 	.word	0x080096d5
 80095d4:	08009719 	.word	0x08009719
 80095d8:	08009719 	.word	0x08009719
 80095dc:	08009719 	.word	0x08009719
 80095e0:	08009719 	.word	0x08009719
 80095e4:	08009719 	.word	0x08009719
 80095e8:	08009719 	.word	0x08009719
 80095ec:	08009719 	.word	0x08009719
 80095f0:	080096e5 	.word	0x080096e5
 80095f4:	08009719 	.word	0x08009719
 80095f8:	08009719 	.word	0x08009719
 80095fc:	08009719 	.word	0x08009719
 8009600:	08009719 	.word	0x08009719
 8009604:	08009719 	.word	0x08009719
 8009608:	08009719 	.word	0x08009719
 800960c:	08009719 	.word	0x08009719
 8009610:	08009719 	.word	0x08009719
 8009614:	08009719 	.word	0x08009719
 8009618:	08009719 	.word	0x08009719
 800961c:	08009719 	.word	0x08009719
 8009620:	08009719 	.word	0x08009719
 8009624:	08009719 	.word	0x08009719
 8009628:	08009719 	.word	0x08009719
 800962c:	08009719 	.word	0x08009719
 8009630:	0800970b 	.word	0x0800970b
 8009634:	08009719 	.word	0x08009719
 8009638:	08009719 	.word	0x08009719
 800963c:	08009719 	.word	0x08009719
 8009640:	08009719 	.word	0x08009719
 8009644:	08009719 	.word	0x08009719
 8009648:	08009719 	.word	0x08009719
 800964c:	08009719 	.word	0x08009719
 8009650:	08009719 	.word	0x08009719
 8009654:	08009719 	.word	0x08009719
 8009658:	08009719 	.word	0x08009719
 800965c:	08009719 	.word	0x08009719
 8009660:	08009719 	.word	0x08009719
 8009664:	08009719 	.word	0x08009719
 8009668:	08009719 	.word	0x08009719
 800966c:	08009719 	.word	0x08009719
 8009670:	08009719 	.word	0x08009719
 8009674:	08009719 	.word	0x08009719
 8009678:	08009719 	.word	0x08009719
 800967c:	08009719 	.word	0x08009719
 8009680:	08009719 	.word	0x08009719
 8009684:	08009719 	.word	0x08009719
 8009688:	08009719 	.word	0x08009719
 800968c:	08009719 	.word	0x08009719
 8009690:	08009719 	.word	0x08009719
 8009694:	08009719 	.word	0x08009719
 8009698:	08009719 	.word	0x08009719
 800969c:	08009719 	.word	0x08009719
 80096a0:	08009719 	.word	0x08009719
 80096a4:	08009719 	.word	0x08009719
 80096a8:	08009719 	.word	0x08009719
 80096ac:	08009719 	.word	0x08009719
 80096b0:	08009711 	.word	0x08009711
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096b4:	f7fc fefa 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 80096b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096ba:	e033      	b.n	8009724 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096bc:	f7fc ff0c 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 80096c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096c2:	e02f      	b.n	8009724 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096c4:	f107 0314 	add.w	r3, r7, #20
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fd fe61 	bl	8007390 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096d2:	e027      	b.n	8009724 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd ffa5 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096e2:	e01f      	b.n	8009724 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096e4:	4b2c      	ldr	r3, [pc, #176]	; (8009798 <UART_SetConfig+0xb50>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d009      	beq.n	8009704 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096f0:	4b29      	ldr	r3, [pc, #164]	; (8009798 <UART_SetConfig+0xb50>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	08db      	lsrs	r3, r3, #3
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	4a28      	ldr	r2, [pc, #160]	; (800979c <UART_SetConfig+0xb54>)
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009702:	e00f      	b.n	8009724 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009704:	4b25      	ldr	r3, [pc, #148]	; (800979c <UART_SetConfig+0xb54>)
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009708:	e00c      	b.n	8009724 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800970a:	4b25      	ldr	r3, [pc, #148]	; (80097a0 <UART_SetConfig+0xb58>)
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800970e:	e009      	b.n	8009724 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009716:	e005      	b.n	8009724 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009722:	bf00      	nop
    }

    if (pclk != 0U)
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d021      	beq.n	800976e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <UART_SetConfig+0xb5c>)
 8009730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009734:	461a      	mov	r2, r3
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	fbb3 f2f2 	udiv	r2, r3, r2
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	085b      	lsrs	r3, r3, #1
 8009742:	441a      	add	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	fbb2 f3f3 	udiv	r3, r2, r3
 800974c:	b29b      	uxth	r3, r3
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	2b0f      	cmp	r3, #15
 8009754:	d908      	bls.n	8009768 <UART_SetConfig+0xb20>
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800975c:	d204      	bcs.n	8009768 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009764:	60da      	str	r2, [r3, #12]
 8009766:	e002      	b.n	800976e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800978a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800978e:	4618      	mov	r0, r3
 8009790:	3738      	adds	r7, #56	; 0x38
 8009792:	46bd      	mov	sp, r7
 8009794:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009798:	58024400 	.word	0x58024400
 800979c:	03d09000 	.word	0x03d09000
 80097a0:	003d0900 	.word	0x003d0900
 80097a4:	0800e6b4 	.word	0x0800e6b4

080097a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	f003 0302 	and.w	r3, r3, #2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	f003 0310 	and.w	r3, r3, #16
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01a      	beq.n	80098be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098a6:	d10a      	bne.n	80098be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	605a      	str	r2, [r3, #4]
  }
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80098fc:	f7f8 ff2c 	bl	8002758 <HAL_GetTick>
 8009900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b08      	cmp	r3, #8
 800990e:	d10e      	bne.n	800992e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f82c 	bl	800997c <UART_WaitOnFlagUntilTimeout>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e022      	b.n	8009974 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b04      	cmp	r3, #4
 800993a:	d10e      	bne.n	800995a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800993c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f816 	bl	800997c <UART_WaitOnFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e00c      	b.n	8009974 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	4613      	mov	r3, r2
 800998a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800998c:	e062      	b.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009994:	d05e      	beq.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009996:	f7f8 fedf 	bl	8002758 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d302      	bcc.n	80099ac <UART_WaitOnFlagUntilTimeout+0x30>
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11d      	bne.n	80099e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099ba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0201 	bic.w	r2, r2, #1
 80099ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2220      	movs	r2, #32
 80099d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e045      	b.n	8009a74 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02e      	beq.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a04:	d126      	bne.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0201 	bic.w	r2, r2, #1
 8009a2e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e00f      	b.n	8009a74 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	69da      	ldr	r2, [r3, #28]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	bf0c      	ite	eq
 8009a64:	2301      	moveq	r3, #1
 8009a66:	2300      	movne	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d08d      	beq.n	800998e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d101      	bne.n	8009a92 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e027      	b.n	8009ae2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2224      	movs	r2, #36	; 0x24
 8009a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0201 	bic.w	r2, r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ac0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b02:	2302      	movs	r3, #2
 8009b04:	e02d      	b.n	8009b62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2224      	movs	r2, #36	; 0x24
 8009b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0201 	bic.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f850 	bl	8009be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e02d      	b.n	8009bde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2224      	movs	r2, #36	; 0x24
 8009b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0201 	bic.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f812 	bl	8009be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b089      	sub	sp, #36	; 0x24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009bf0:	4a2f      	ldr	r2, [pc, #188]	; (8009cb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009bf2:	f107 0314 	add.w	r3, r7, #20
 8009bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bfa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009bfe:	4a2d      	ldr	r2, [pc, #180]	; (8009cb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d108      	bne.n	8009c26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c24:	e03d      	b.n	8009ca2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c26:	2310      	movs	r3, #16
 8009c28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	0e5b      	lsrs	r3, r3, #25
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	0f5b      	lsrs	r3, r3, #29
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009c4e:	7fbb      	ldrb	r3, [r7, #30]
 8009c50:	7f3a      	ldrb	r2, [r7, #28]
 8009c52:	f107 0120 	add.w	r1, r7, #32
 8009c56:	440a      	add	r2, r1
 8009c58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c5c:	fb02 f303 	mul.w	r3, r2, r3
 8009c60:	7f3a      	ldrb	r2, [r7, #28]
 8009c62:	f107 0120 	add.w	r1, r7, #32
 8009c66:	440a      	add	r2, r1
 8009c68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
 8009c7a:	7f7a      	ldrb	r2, [r7, #29]
 8009c7c:	f107 0120 	add.w	r1, r7, #32
 8009c80:	440a      	add	r2, r1
 8009c82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009c86:	fb02 f303 	mul.w	r3, r2, r3
 8009c8a:	7f7a      	ldrb	r2, [r7, #29]
 8009c8c:	f107 0120 	add.w	r1, r7, #32
 8009c90:	440a      	add	r2, r1
 8009c92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ca2:	bf00      	nop
 8009ca4:	3724      	adds	r7, #36	; 0x24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	0800e668 	.word	0x0800e668
 8009cb4:	0800e670 	.word	0x0800e670

08009cb8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009cc0:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <HAL_ETH_RxCpltCallback+0x1c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 f94d 	bl	8009f64 <osSemaphoreRelease>
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000208 	.word	0x20000208

08009cd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009cdc:	bf00      	nop
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cee:	f3ef 8305 	mrs	r3, IPSR
 8009cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10f      	bne.n	8009d1a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfe:	607b      	str	r3, [r7, #4]
  return(result);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d06:	f3ef 8311 	mrs	r3, BASEPRI
 8009d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d007      	beq.n	8009d22 <osKernelInitialize+0x3a>
 8009d12:	4b0e      	ldr	r3, [pc, #56]	; (8009d4c <osKernelInitialize+0x64>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d103      	bne.n	8009d22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009d1a:	f06f 0305 	mvn.w	r3, #5
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e00c      	b.n	8009d3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d22:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <osKernelInitialize+0x64>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d2a:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <osKernelInitialize+0x64>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e002      	b.n	8009d3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	2000020c 	.word	0x2000020c

08009d50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d56:	f3ef 8305 	mrs	r3, IPSR
 8009d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10f      	bne.n	8009d82 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d62:	f3ef 8310 	mrs	r3, PRIMASK
 8009d66:	607b      	str	r3, [r7, #4]
  return(result);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d105      	bne.n	8009d7a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d72:	603b      	str	r3, [r7, #0]
  return(result);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <osKernelStart+0x3a>
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <osKernelStart+0x68>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d103      	bne.n	8009d8a <osKernelStart+0x3a>
    stat = osErrorISR;
 8009d82:	f06f 0305 	mvn.w	r3, #5
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	e010      	b.n	8009dac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	; (8009db8 <osKernelStart+0x68>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d109      	bne.n	8009da6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d92:	f7ff ffa1 	bl	8009cd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d96:	4b08      	ldr	r3, [pc, #32]	; (8009db8 <osKernelStart+0x68>)
 8009d98:	2202      	movs	r2, #2
 8009d9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d9c:	f001 fd68 	bl	800b870 <vTaskStartScheduler>
      stat = osOK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e002      	b.n	8009dac <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009daa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	2000020c 	.word	0x2000020c

08009dbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b090      	sub	sp, #64	; 0x40
 8009dc0:	af04      	add	r7, sp, #16
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dcc:	f3ef 8305 	mrs	r3, IPSR
 8009dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8009dd2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8090 	bne.w	8009efa <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dda:	f3ef 8310 	mrs	r3, PRIMASK
 8009dde:	61bb      	str	r3, [r7, #24]
  return(result);
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d105      	bne.n	8009df2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009de6:	f3ef 8311 	mrs	r3, BASEPRI
 8009dea:	617b      	str	r3, [r7, #20]
  return(result);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <osThreadNew+0x3e>
 8009df2:	4b44      	ldr	r3, [pc, #272]	; (8009f04 <osThreadNew+0x148>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d07f      	beq.n	8009efa <osThreadNew+0x13e>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d07c      	beq.n	8009efa <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8009e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e04:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009e06:	2318      	movs	r3, #24
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e12:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d045      	beq.n	8009ea6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <osThreadNew+0x6c>
        name = attr->name;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	699b      	ldr	r3, [r3, #24]
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d008      	beq.n	8009e4e <osThreadNew+0x92>
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	2b38      	cmp	r3, #56	; 0x38
 8009e40:	d805      	bhi.n	8009e4e <osThreadNew+0x92>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <osThreadNew+0x96>
        return (NULL);
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e054      	b.n	8009efc <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	089b      	lsrs	r3, r3, #2
 8009e60:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00e      	beq.n	8009e88 <osThreadNew+0xcc>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	2b5b      	cmp	r3, #91	; 0x5b
 8009e70:	d90a      	bls.n	8009e88 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d006      	beq.n	8009e88 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <osThreadNew+0xcc>
        mem = 1;
 8009e82:	2301      	movs	r3, #1
 8009e84:	623b      	str	r3, [r7, #32]
 8009e86:	e010      	b.n	8009eaa <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10c      	bne.n	8009eaa <osThreadNew+0xee>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d108      	bne.n	8009eaa <osThreadNew+0xee>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d104      	bne.n	8009eaa <osThreadNew+0xee>
          mem = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	623b      	str	r3, [r7, #32]
 8009ea4:	e001      	b.n	8009eaa <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d110      	bne.n	8009ed2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eb8:	9202      	str	r2, [sp, #8]
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f001 fb00 	bl	800b4cc <xTaskCreateStatic>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	613b      	str	r3, [r7, #16]
 8009ed0:	e013      	b.n	8009efa <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d110      	bne.n	8009efa <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	f107 0310 	add.w	r3, r7, #16
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f001 fb48 	bl	800b580 <xTaskCreate>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d001      	beq.n	8009efa <osThreadNew+0x13e>
          hTask = NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009efa:	693b      	ldr	r3, [r7, #16]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3730      	adds	r7, #48	; 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	2000020c 	.word	0x2000020c

08009f08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f10:	f3ef 8305 	mrs	r3, IPSR
 8009f14:	613b      	str	r3, [r7, #16]
  return(result);
 8009f16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10f      	bne.n	8009f3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f28:	f3ef 8311 	mrs	r3, BASEPRI
 8009f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d007      	beq.n	8009f44 <osDelay+0x3c>
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <osDelay+0x58>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d103      	bne.n	8009f44 <osDelay+0x3c>
    stat = osErrorISR;
 8009f3c:	f06f 0305 	mvn.w	r3, #5
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	e007      	b.n	8009f54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fc5a 	bl	800b808 <vTaskDelay>
    }
  }

  return (stat);
 8009f54:	697b      	ldr	r3, [r7, #20]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	2000020c 	.word	0x2000020c

08009f64 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009f7a:	f06f 0303 	mvn.w	r3, #3
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	e03e      	b.n	800a000 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f82:	f3ef 8305 	mrs	r3, IPSR
 8009f86:	617b      	str	r3, [r7, #20]
  return(result);
 8009f88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10f      	bne.n	8009fae <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f92:	613b      	str	r3, [r7, #16]
  return(result);
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01e      	beq.n	8009fe4 <osSemaphoreRelease+0x80>
 8009fa6:	4b19      	ldr	r3, [pc, #100]	; (800a00c <osSemaphoreRelease+0xa8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d11a      	bne.n	8009fe4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fb2:	f107 0308 	add.w	r3, r7, #8
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	69b8      	ldr	r0, [r7, #24]
 8009fba:	f000 ffb5 	bl	800af28 <xQueueGiveFromISR>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d003      	beq.n	8009fcc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009fc4:	f06f 0302 	mvn.w	r3, #2
 8009fc8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fca:	e018      	b.n	8009ffe <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d015      	beq.n	8009ffe <osSemaphoreRelease+0x9a>
 8009fd2:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <osSemaphoreRelease+0xac>)
 8009fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fe2:	e00c      	b.n	8009ffe <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	69b8      	ldr	r0, [r7, #24]
 8009fec:	f000 fe0e 	bl	800ac0c <xQueueGenericSend>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d004      	beq.n	800a000 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009ff6:	f06f 0302 	mvn.w	r3, #2
 8009ffa:	61fb      	str	r3, [r7, #28]
 8009ffc:	e000      	b.n	800a000 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ffe:	bf00      	nop
    }
  }

  return (stat);
 800a000:	69fb      	ldr	r3, [r7, #28]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	2000020c 	.word	0x2000020c
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a07      	ldr	r2, [pc, #28]	; (800a040 <vApplicationGetIdleTaskMemory+0x2c>)
 800a024:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	4a06      	ldr	r2, [pc, #24]	; (800a044 <vApplicationGetIdleTaskMemory+0x30>)
 800a02a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	20000210 	.word	0x20000210
 800a044:	2000026c 	.word	0x2000026c

0800a048 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4a07      	ldr	r2, [pc, #28]	; (800a074 <vApplicationGetTimerTaskMemory+0x2c>)
 800a058:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	4a06      	ldr	r2, [pc, #24]	; (800a078 <vApplicationGetTimerTaskMemory+0x30>)
 800a05e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a066:	601a      	str	r2, [r3, #0]
}
 800a068:	bf00      	nop
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	20000a6c 	.word	0x20000a6c
 800a078:	20000ac8 	.word	0x20000ac8

0800a07c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08a      	sub	sp, #40	; 0x28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a084:	2300      	movs	r3, #0
 800a086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a088:	f001 fc56 	bl	800b938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a08c:	4b57      	ldr	r3, [pc, #348]	; (800a1ec <pvPortMalloc+0x170>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a094:	f000 f90c 	bl	800a2b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a098:	4b55      	ldr	r3, [pc, #340]	; (800a1f0 <pvPortMalloc+0x174>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f040 808c 	bne.w	800a1be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01c      	beq.n	800a0e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f003 0307 	and.w	r3, r3, #7
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d013      	beq.n	800a0e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f023 0307 	bic.w	r3, r3, #7
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	617b      	str	r3, [r7, #20]
 800a0e4:	e7fe      	b.n	800a0e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d068      	beq.n	800a1be <pvPortMalloc+0x142>
 800a0ec:	4b41      	ldr	r3, [pc, #260]	; (800a1f4 <pvPortMalloc+0x178>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d863      	bhi.n	800a1be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0f6:	4b40      	ldr	r3, [pc, #256]	; (800a1f8 <pvPortMalloc+0x17c>)
 800a0f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0fa:	4b3f      	ldr	r3, [pc, #252]	; (800a1f8 <pvPortMalloc+0x17c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a100:	e004      	b.n	800a10c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	429a      	cmp	r2, r3
 800a114:	d903      	bls.n	800a11e <pvPortMalloc+0xa2>
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1f1      	bne.n	800a102 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a11e:	4b33      	ldr	r3, [pc, #204]	; (800a1ec <pvPortMalloc+0x170>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a124:	429a      	cmp	r2, r3
 800a126:	d04a      	beq.n	800a1be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2208      	movs	r2, #8
 800a12e:	4413      	add	r3, r2
 800a130:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	1ad2      	subs	r2, r2, r3
 800a142:	2308      	movs	r3, #8
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	429a      	cmp	r2, r3
 800a148:	d91e      	bls.n	800a188 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4413      	add	r3, r2
 800a150:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f003 0307 	and.w	r3, r3, #7
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <pvPortMalloc+0xf4>
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	e7fe      	b.n	800a16e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	1ad2      	subs	r2, r2, r3
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a182:	69b8      	ldr	r0, [r7, #24]
 800a184:	f000 f8f6 	bl	800a374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a188:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <pvPortMalloc+0x178>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	4a18      	ldr	r2, [pc, #96]	; (800a1f4 <pvPortMalloc+0x178>)
 800a194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a196:	4b17      	ldr	r3, [pc, #92]	; (800a1f4 <pvPortMalloc+0x178>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	4b18      	ldr	r3, [pc, #96]	; (800a1fc <pvPortMalloc+0x180>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d203      	bcs.n	800a1aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1a2:	4b14      	ldr	r3, [pc, #80]	; (800a1f4 <pvPortMalloc+0x178>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a15      	ldr	r2, [pc, #84]	; (800a1fc <pvPortMalloc+0x180>)
 800a1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <pvPortMalloc+0x174>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1be:	f001 fbc9 	bl	800b954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <pvPortMalloc+0x164>
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	e7fe      	b.n	800a1de <pvPortMalloc+0x162>
	return pvReturn;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3728      	adds	r7, #40	; 0x28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200056d0 	.word	0x200056d0
 800a1f0:	200056dc 	.word	0x200056dc
 800a1f4:	200056d4 	.word	0x200056d4
 800a1f8:	200056c8 	.word	0x200056c8
 800a1fc:	200056d8 	.word	0x200056d8

0800a200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d046      	beq.n	800a2a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a212:	2308      	movs	r3, #8
 800a214:	425b      	negs	r3, r3
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4413      	add	r3, r2
 800a21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	4b20      	ldr	r3, [pc, #128]	; (800a2a8 <vPortFree+0xa8>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4013      	ands	r3, r2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d109      	bne.n	800a242 <vPortFree+0x42>
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	e7fe      	b.n	800a240 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <vPortFree+0x5e>
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	60bb      	str	r3, [r7, #8]
 800a25c:	e7fe      	b.n	800a25c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <vPortFree+0xa8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4013      	ands	r3, r2
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d019      	beq.n	800a2a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d115      	bne.n	800a2a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <vPortFree+0xa8>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	401a      	ands	r2, r3
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a284:	f001 fb58 	bl	800b938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <vPortFree+0xac>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4413      	add	r3, r2
 800a292:	4a06      	ldr	r2, [pc, #24]	; (800a2ac <vPortFree+0xac>)
 800a294:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a296:	6938      	ldr	r0, [r7, #16]
 800a298:	f000 f86c 	bl	800a374 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a29c:	f001 fb5a 	bl	800b954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2a0:	bf00      	nop
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	200056dc 	.word	0x200056dc
 800a2ac:	200056d4 	.word	0x200056d4

0800a2b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2b6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2bc:	4b27      	ldr	r3, [pc, #156]	; (800a35c <prvHeapInit+0xac>)
 800a2be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f003 0307 	and.w	r3, r3, #7
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00c      	beq.n	800a2e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3307      	adds	r3, #7
 800a2ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 0307 	bic.w	r3, r3, #7
 800a2d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	4a1f      	ldr	r2, [pc, #124]	; (800a35c <prvHeapInit+0xac>)
 800a2e0:	4413      	add	r3, r2
 800a2e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2e8:	4a1d      	ldr	r2, [pc, #116]	; (800a360 <prvHeapInit+0xb0>)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ee:	4b1c      	ldr	r3, [pc, #112]	; (800a360 <prvHeapInit+0xb0>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2fc:	2208      	movs	r2, #8
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	1a9b      	subs	r3, r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4a15      	ldr	r2, [pc, #84]	; (800a364 <prvHeapInit+0xb4>)
 800a310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <prvHeapInit+0xb4>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2200      	movs	r2, #0
 800a318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a31a:	4b12      	ldr	r3, [pc, #72]	; (800a364 <prvHeapInit+0xb4>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	1ad2      	subs	r2, r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a330:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <prvHeapInit+0xb4>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4a0a      	ldr	r2, [pc, #40]	; (800a368 <prvHeapInit+0xb8>)
 800a33e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4a09      	ldr	r2, [pc, #36]	; (800a36c <prvHeapInit+0xbc>)
 800a346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a348:	4b09      	ldr	r3, [pc, #36]	; (800a370 <prvHeapInit+0xc0>)
 800a34a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a34e:	601a      	str	r2, [r3, #0]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	20001ac8 	.word	0x20001ac8
 800a360:	200056c8 	.word	0x200056c8
 800a364:	200056d0 	.word	0x200056d0
 800a368:	200056d8 	.word	0x200056d8
 800a36c:	200056d4 	.word	0x200056d4
 800a370:	200056dc 	.word	0x200056dc

0800a374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a37c:	4b28      	ldr	r3, [pc, #160]	; (800a420 <prvInsertBlockIntoFreeList+0xac>)
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	e002      	b.n	800a388 <prvInsertBlockIntoFreeList+0x14>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d8f7      	bhi.n	800a382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	4413      	add	r3, r2
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d108      	bne.n	800a3b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d118      	bne.n	800a3fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	4b15      	ldr	r3, [pc, #84]	; (800a424 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d00d      	beq.n	800a3f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e008      	b.n	800a404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	e003      	b.n	800a404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d002      	beq.n	800a412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200056c8 	.word	0x200056c8
 800a424:	200056d0 	.word	0x200056d0

0800a428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f103 0208 	add.w	r2, r3, #8
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f103 0208 	add.w	r2, r3, #8
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f103 0208 	add.w	r2, r3, #8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4e0:	d103      	bne.n	800a4ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	e00c      	b.n	800a504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	e002      	b.n	800a4f8 <vListInsert+0x2e>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	429a      	cmp	r2, r3
 800a502:	d2f6      	bcs.n	800a4f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6892      	ldr	r2, [r2, #8]
 800a552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6852      	ldr	r2, [r2, #4]
 800a55c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	429a      	cmp	r2, r3
 800a566:	d103      	bne.n	800a570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	1e5a      	subs	r2, r3, #1
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3b04      	subs	r3, #4
 800a5ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f023 0201 	bic.w	r2, r3, #1
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3b04      	subs	r3, #4
 800a5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5c0:	4a0c      	ldr	r2, [pc, #48]	; (800a5f4 <pxPortInitialiseStack+0x64>)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3b14      	subs	r3, #20
 800a5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b04      	subs	r3, #4
 800a5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f06f 0202 	mvn.w	r2, #2
 800a5de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3b20      	subs	r3, #32
 800a5e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	0800a5f9 	.word	0x0800a5f9

0800a5f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a602:	4b11      	ldr	r3, [pc, #68]	; (800a648 <prvTaskExitError+0x50>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a60a:	d009      	beq.n	800a620 <prvTaskExitError+0x28>
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	e7fe      	b.n	800a61e <prvTaskExitError+0x26>
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a632:	bf00      	nop
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0fc      	beq.n	800a634 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000010 	.word	0x20000010
 800a64c:	00000000 	.word	0x00000000

0800a650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <pxCurrentTCBConst2>)
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6808      	ldr	r0, [r1, #0]
 800a656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65a:	f380 8809 	msr	PSP, r0
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	4770      	bx	lr
 800a66c:	f3af 8000 	nop.w

0800a670 <pxCurrentTCBConst2>:
 800a670:	200056e8 	.word	0x200056e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a678:	4808      	ldr	r0, [pc, #32]	; (800a69c <prvPortStartFirstTask+0x24>)
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f380 8808 	msr	MSP, r0
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8814 	msr	CONTROL, r0
 800a68a:	b662      	cpsie	i
 800a68c:	b661      	cpsie	f
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	df00      	svc	0
 800a698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a69a:	bf00      	nop
 800a69c:	e000ed08 	.word	0xe000ed08

0800a6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6a6:	4b44      	ldr	r3, [pc, #272]	; (800a7b8 <xPortStartScheduler+0x118>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a44      	ldr	r2, [pc, #272]	; (800a7bc <xPortStartScheduler+0x11c>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d109      	bne.n	800a6c4 <xPortStartScheduler+0x24>
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	613b      	str	r3, [r7, #16]
 800a6c2:	e7fe      	b.n	800a6c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6c4:	4b3c      	ldr	r3, [pc, #240]	; (800a7b8 <xPortStartScheduler+0x118>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a3d      	ldr	r2, [pc, #244]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d109      	bne.n	800a6e2 <xPortStartScheduler+0x42>
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	e7fe      	b.n	800a6e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6e2:	4b38      	ldr	r3, [pc, #224]	; (800a7c4 <xPortStartScheduler+0x124>)
 800a6e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a704:	b2da      	uxtb	r2, r3
 800a706:	4b30      	ldr	r3, [pc, #192]	; (800a7c8 <xPortStartScheduler+0x128>)
 800a708:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a70a:	4b30      	ldr	r3, [pc, #192]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a70c:	2207      	movs	r2, #7
 800a70e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a710:	e009      	b.n	800a726 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3b01      	subs	r3, #1
 800a718:	4a2c      	ldr	r2, [pc, #176]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a71a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	b2db      	uxtb	r3, r3
 800a724:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a72e:	2b80      	cmp	r3, #128	; 0x80
 800a730:	d0ef      	beq.n	800a712 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a732:	4b26      	ldr	r3, [pc, #152]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f1c3 0307 	rsb	r3, r3, #7
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d009      	beq.n	800a752 <xPortStartScheduler+0xb2>
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	60bb      	str	r3, [r7, #8]
 800a750:	e7fe      	b.n	800a750 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a752:	4b1e      	ldr	r3, [pc, #120]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	4a1c      	ldr	r2, [pc, #112]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a75a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a764:	4a19      	ldr	r2, [pc, #100]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a766:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a770:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a776:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a77a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a77c:	4b14      	ldr	r3, [pc, #80]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a13      	ldr	r2, [pc, #76]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a782:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a786:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a788:	f000 f8d6 	bl	800a938 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a78c:	4b11      	ldr	r3, [pc, #68]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a792:	f000 f8f5 	bl	800a980 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a796:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a0f      	ldr	r2, [pc, #60]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a79c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7a2:	f7ff ff69 	bl	800a678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7a6:	f001 fa39 	bl	800bc1c <vTaskSwitchContext>
	prvTaskExitError();
 800a7aa:	f7ff ff25 	bl	800a5f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	e000ed00 	.word	0xe000ed00
 800a7bc:	410fc271 	.word	0x410fc271
 800a7c0:	410fc270 	.word	0x410fc270
 800a7c4:	e000e400 	.word	0xe000e400
 800a7c8:	200056e0 	.word	0x200056e0
 800a7cc:	200056e4 	.word	0x200056e4
 800a7d0:	e000ed20 	.word	0xe000ed20
 800a7d4:	20000010 	.word	0x20000010
 800a7d8:	e000ef34 	.word	0xe000ef34

0800a7dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <vPortEnterCritical+0x54>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	; (800a830 <vPortEnterCritical+0x54>)
 800a7fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7fe:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <vPortEnterCritical+0x54>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d10e      	bne.n	800a824 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a806:	4b0b      	ldr	r3, [pc, #44]	; (800a834 <vPortEnterCritical+0x58>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <vPortEnterCritical+0x48>
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	e7fe      	b.n	800a822 <vPortEnterCritical+0x46>
	}
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20000010 	.word	0x20000010
 800a834:	e000ed04 	.word	0xe000ed04

0800a838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a83e:	4b11      	ldr	r3, [pc, #68]	; (800a884 <vPortExitCritical+0x4c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <vPortExitCritical+0x22>
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	e7fe      	b.n	800a858 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a85a:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <vPortExitCritical+0x4c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3b01      	subs	r3, #1
 800a860:	4a08      	ldr	r2, [pc, #32]	; (800a884 <vPortExitCritical+0x4c>)
 800a862:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a864:	4b07      	ldr	r3, [pc, #28]	; (800a884 <vPortExitCritical+0x4c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d104      	bne.n	800a876 <vPortExitCritical+0x3e>
 800a86c:	2300      	movs	r3, #0
 800a86e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000010 	.word	0x20000010
	...

0800a890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a890:	f3ef 8009 	mrs	r0, PSP
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	4b15      	ldr	r3, [pc, #84]	; (800a8f0 <pxCurrentTCBConst>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	f01e 0f10 	tst.w	lr, #16
 800a8a0:	bf08      	it	eq
 800a8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8aa:	6010      	str	r0, [r2, #0]
 800a8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8b4:	f380 8811 	msr	BASEPRI, r0
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f001 f9ac 	bl	800bc1c <vTaskSwitchContext>
 800a8c4:	f04f 0000 	mov.w	r0, #0
 800a8c8:	f380 8811 	msr	BASEPRI, r0
 800a8cc:	bc09      	pop	{r0, r3}
 800a8ce:	6819      	ldr	r1, [r3, #0]
 800a8d0:	6808      	ldr	r0, [r1, #0]
 800a8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d6:	f01e 0f10 	tst.w	lr, #16
 800a8da:	bf08      	it	eq
 800a8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8e0:	f380 8809 	msr	PSP, r0
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	f3af 8000 	nop.w

0800a8f0 <pxCurrentTCBConst>:
 800a8f0:	200056e8 	.word	0x200056e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop

0800a8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a910:	f001 f8cc 	bl	800baac <xTaskIncrementTick>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a91a:	4b06      	ldr	r3, [pc, #24]	; (800a934 <SysTick_Handler+0x3c>)
 800a91c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	2300      	movs	r3, #0
 800a924:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <vPortSetupTimerInterrupt+0x34>)
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a942:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <vPortSetupTimerInterrupt+0x38>)
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a948:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <vPortSetupTimerInterrupt+0x3c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a0a      	ldr	r2, [pc, #40]	; (800a978 <vPortSetupTimerInterrupt+0x40>)
 800a94e:	fba2 2303 	umull	r2, r3, r2, r3
 800a952:	099b      	lsrs	r3, r3, #6
 800a954:	4a09      	ldr	r2, [pc, #36]	; (800a97c <vPortSetupTimerInterrupt+0x44>)
 800a956:	3b01      	subs	r3, #1
 800a958:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a95a:	4b04      	ldr	r3, [pc, #16]	; (800a96c <vPortSetupTimerInterrupt+0x34>)
 800a95c:	2207      	movs	r2, #7
 800a95e:	601a      	str	r2, [r3, #0]
}
 800a960:	bf00      	nop
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	e000e010 	.word	0xe000e010
 800a970:	e000e018 	.word	0xe000e018
 800a974:	20000000 	.word	0x20000000
 800a978:	10624dd3 	.word	0x10624dd3
 800a97c:	e000e014 	.word	0xe000e014

0800a980 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a980:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a990 <vPortEnableVFP+0x10>
 800a984:	6801      	ldr	r1, [r0, #0]
 800a986:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a98a:	6001      	str	r1, [r0, #0]
 800a98c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a98e:	bf00      	nop
 800a990:	e000ed88 	.word	0xe000ed88

0800a994 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a99a:	f3ef 8305 	mrs	r3, IPSR
 800a99e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b0f      	cmp	r3, #15
 800a9a4:	d913      	bls.n	800a9ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9a6:	4a16      	ldr	r2, [pc, #88]	; (800aa00 <vPortValidateInterruptPriority+0x6c>)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9b0:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <vPortValidateInterruptPriority+0x70>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	7afa      	ldrb	r2, [r7, #11]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d209      	bcs.n	800a9ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	607b      	str	r3, [r7, #4]
 800a9cc:	e7fe      	b.n	800a9cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9ce:	4b0e      	ldr	r3, [pc, #56]	; (800aa08 <vPortValidateInterruptPriority+0x74>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	; (800aa0c <vPortValidateInterruptPriority+0x78>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d909      	bls.n	800a9f2 <vPortValidateInterruptPriority+0x5e>
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	e7fe      	b.n	800a9f0 <vPortValidateInterruptPriority+0x5c>
	}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	e000e3f0 	.word	0xe000e3f0
 800aa04:	200056e0 	.word	0x200056e0
 800aa08:	e000ed0c 	.word	0xe000ed0c
 800aa0c:	200056e4 	.word	0x200056e4

0800aa10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <xQueueGenericReset+0x28>
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	60bb      	str	r3, [r7, #8]
 800aa36:	e7fe      	b.n	800aa36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800aa38:	f7ff fed0 	bl	800a7dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa44:	68f9      	ldr	r1, [r7, #12]
 800aa46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa48:	fb01 f303 	mul.w	r3, r1, r3
 800aa4c:	441a      	add	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	68f9      	ldr	r1, [r7, #12]
 800aa6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa6e:	fb01 f303 	mul.w	r3, r1, r3
 800aa72:	441a      	add	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	22ff      	movs	r2, #255	; 0xff
 800aa7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	22ff      	movs	r2, #255	; 0xff
 800aa84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d114      	bne.n	800aab8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d01a      	beq.n	800aacc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3310      	adds	r3, #16
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f001 f968 	bl	800bd70 <xTaskRemoveFromEventList>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d012      	beq.n	800aacc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <xQueueGenericReset+0xcc>)
 800aaa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	e009      	b.n	800aacc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3310      	adds	r3, #16
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff fcb3 	bl	800a428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3324      	adds	r3, #36	; 0x24
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff fcae 	bl	800a428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aacc:	f7ff feb4 	bl	800a838 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aad0:	2301      	movs	r3, #1
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	e000ed04 	.word	0xe000ed04

0800aae0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08e      	sub	sp, #56	; 0x38
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <xQueueGenericCreateStatic+0x28>
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab06:	e7fe      	b.n	800ab06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d109      	bne.n	800ab22 <xQueueGenericCreateStatic+0x42>
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab20:	e7fe      	b.n	800ab20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <xQueueGenericCreateStatic+0x4e>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <xQueueGenericCreateStatic+0x52>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xQueueGenericCreateStatic+0x54>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d109      	bne.n	800ab4c <xQueueGenericCreateStatic+0x6c>
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	623b      	str	r3, [r7, #32]
 800ab4a:	e7fe      	b.n	800ab4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d102      	bne.n	800ab58 <xQueueGenericCreateStatic+0x78>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <xQueueGenericCreateStatic+0x7c>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e000      	b.n	800ab5e <xQueueGenericCreateStatic+0x7e>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <xQueueGenericCreateStatic+0x96>
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	61fb      	str	r3, [r7, #28]
 800ab74:	e7fe      	b.n	800ab74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab76:	2350      	movs	r3, #80	; 0x50
 800ab78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b50      	cmp	r3, #80	; 0x50
 800ab7e:	d009      	beq.n	800ab94 <xQueueGenericCreateStatic+0xb4>
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	61bb      	str	r3, [r7, #24]
 800ab92:	e7fe      	b.n	800ab92 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00d      	beq.n	800abbc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aba8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	4613      	mov	r3, r2
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	68b9      	ldr	r1, [r7, #8]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 f805 	bl	800abc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3730      	adds	r7, #48	; 0x30
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d103      	bne.n	800abe2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	e002      	b.n	800abe8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800abf4:	2101      	movs	r1, #1
 800abf6:	69b8      	ldr	r0, [r7, #24]
 800abf8:	f7ff ff0a 	bl	800aa10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08e      	sub	sp, #56	; 0x38
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d109      	bne.n	800ac3c <xQueueGenericSend+0x30>
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac3a:	e7fe      	b.n	800ac3a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d103      	bne.n	800ac4a <xQueueGenericSend+0x3e>
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <xQueueGenericSend+0x42>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <xQueueGenericSend+0x44>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <xQueueGenericSend+0x5c>
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
 800ac66:	e7fe      	b.n	800ac66 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d103      	bne.n	800ac76 <xQueueGenericSend+0x6a>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <xQueueGenericSend+0x6e>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e000      	b.n	800ac7c <xQueueGenericSend+0x70>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <xQueueGenericSend+0x88>
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	623b      	str	r3, [r7, #32]
 800ac92:	e7fe      	b.n	800ac92 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac94:	f001 fa22 	bl	800c0dc <xTaskGetSchedulerState>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <xQueueGenericSend+0x98>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <xQueueGenericSend+0x9c>
 800aca4:	2301      	movs	r3, #1
 800aca6:	e000      	b.n	800acaa <xQueueGenericSend+0x9e>
 800aca8:	2300      	movs	r3, #0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <xQueueGenericSend+0xb6>
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	61fb      	str	r3, [r7, #28]
 800acc0:	e7fe      	b.n	800acc0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acc2:	f7ff fd8b 	bl	800a7dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acce:	429a      	cmp	r2, r3
 800acd0:	d302      	bcc.n	800acd8 <xQueueGenericSend+0xcc>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d129      	bne.n	800ad2c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acde:	f000 fa89 	bl	800b1f4 <prvCopyDataToQueue>
 800ace2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d010      	beq.n	800ad0e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	3324      	adds	r3, #36	; 0x24
 800acf0:	4618      	mov	r0, r3
 800acf2:	f001 f83d 	bl	800bd70 <xTaskRemoveFromEventList>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d013      	beq.n	800ad24 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800acfc:	4b3f      	ldr	r3, [pc, #252]	; (800adfc <xQueueGenericSend+0x1f0>)
 800acfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	e00a      	b.n	800ad24 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad14:	4b39      	ldr	r3, [pc, #228]	; (800adfc <xQueueGenericSend+0x1f0>)
 800ad16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad24:	f7ff fd88 	bl	800a838 <vPortExitCritical>
				return pdPASS;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e063      	b.n	800adf4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d103      	bne.n	800ad3a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad32:	f7ff fd81 	bl	800a838 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	e05c      	b.n	800adf4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad40:	f107 0314 	add.w	r3, r7, #20
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 f875 	bl	800be34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad4e:	f7ff fd73 	bl	800a838 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad52:	f000 fdf1 	bl	800b938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad56:	f7ff fd41 	bl	800a7dc <vPortEnterCritical>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad60:	b25b      	sxtb	r3, r3
 800ad62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad66:	d103      	bne.n	800ad70 <xQueueGenericSend+0x164>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad76:	b25b      	sxtb	r3, r3
 800ad78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad7c:	d103      	bne.n	800ad86 <xQueueGenericSend+0x17a>
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad86:	f7ff fd57 	bl	800a838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad8a:	1d3a      	adds	r2, r7, #4
 800ad8c:	f107 0314 	add.w	r3, r7, #20
 800ad90:	4611      	mov	r1, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f001 f864 	bl	800be60 <xTaskCheckForTimeOut>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d124      	bne.n	800ade8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ada0:	f000 fb20 	bl	800b3e4 <prvIsQueueFull>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d018      	beq.n	800addc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	3310      	adds	r3, #16
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 ff8e 	bl	800bcd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800adb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adba:	f000 faab 	bl	800b314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800adbe:	f000 fdc9 	bl	800b954 <xTaskResumeAll>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f47f af7c 	bne.w	800acc2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800adca:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <xQueueGenericSend+0x1f0>)
 800adcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	e772      	b.n	800acc2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800addc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adde:	f000 fa99 	bl	800b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ade2:	f000 fdb7 	bl	800b954 <xTaskResumeAll>
 800ade6:	e76c      	b.n	800acc2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ade8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adea:	f000 fa93 	bl	800b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adee:	f000 fdb1 	bl	800b954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800adf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3738      	adds	r7, #56	; 0x38
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	e000ed04 	.word	0xe000ed04

0800ae00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08e      	sub	sp, #56	; 0x38
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d109      	bne.n	800ae2c <xQueueGenericSendFromISR+0x2c>
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
 800ae2a:	e7fe      	b.n	800ae2a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <xQueueGenericSendFromISR+0x3a>
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <xQueueGenericSendFromISR+0x3e>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <xQueueGenericSendFromISR+0x40>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d109      	bne.n	800ae58 <xQueueGenericSendFromISR+0x58>
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	623b      	str	r3, [r7, #32]
 800ae56:	e7fe      	b.n	800ae56 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d103      	bne.n	800ae66 <xQueueGenericSendFromISR+0x66>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d101      	bne.n	800ae6a <xQueueGenericSendFromISR+0x6a>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <xQueueGenericSendFromISR+0x6c>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d109      	bne.n	800ae84 <xQueueGenericSendFromISR+0x84>
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	61fb      	str	r3, [r7, #28]
 800ae82:	e7fe      	b.n	800ae82 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae84:	f7ff fd86 	bl	800a994 <vPortValidateInterruptPriority>
	__asm volatile
 800ae88:	f3ef 8211 	mrs	r2, BASEPRI
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	61ba      	str	r2, [r7, #24]
 800ae9e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aea0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d302      	bcc.n	800aeb6 <xQueueGenericSendFromISR+0xb6>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d12c      	bne.n	800af10 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec6:	f000 f995 	bl	800b1f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aeca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aed2:	d112      	bne.n	800aefa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d016      	beq.n	800af0a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	3324      	adds	r3, #36	; 0x24
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 ff45 	bl	800bd70 <xTaskRemoveFromEventList>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00e      	beq.n	800af0a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00b      	beq.n	800af0a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	e007      	b.n	800af0a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aefa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aefe:	3301      	adds	r3, #1
 800af00:	b2db      	uxtb	r3, r3
 800af02:	b25a      	sxtb	r2, r3
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af0a:	2301      	movs	r3, #1
 800af0c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800af0e:	e001      	b.n	800af14 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af10:	2300      	movs	r3, #0
 800af12:	637b      	str	r3, [r7, #52]	; 0x34
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af20:	4618      	mov	r0, r3
 800af22:	3738      	adds	r7, #56	; 0x38
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08e      	sub	sp, #56	; 0x38
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d109      	bne.n	800af50 <xQueueGiveFromISR+0x28>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	623b      	str	r3, [r7, #32]
 800af4e:	e7fe      	b.n	800af4e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d009      	beq.n	800af6c <xQueueGiveFromISR+0x44>
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	61fb      	str	r3, [r7, #28]
 800af6a:	e7fe      	b.n	800af6a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <xQueueGiveFromISR+0x54>
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <xQueueGiveFromISR+0x58>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e000      	b.n	800af82 <xQueueGiveFromISR+0x5a>
 800af80:	2300      	movs	r3, #0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d109      	bne.n	800af9a <xQueueGiveFromISR+0x72>
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	61bb      	str	r3, [r7, #24]
 800af98:	e7fe      	b.n	800af98 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af9a:	f7ff fcfb 	bl	800a994 <vPortValidateInterruptPriority>
	__asm volatile
 800af9e:	f3ef 8211 	mrs	r2, BASEPRI
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	617a      	str	r2, [r7, #20]
 800afb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800afb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d22b      	bcs.n	800b022 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afe4:	d112      	bne.n	800b00c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b00      	cmp	r3, #0
 800afec:	d016      	beq.n	800b01c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	3324      	adds	r3, #36	; 0x24
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 febc 	bl	800bd70 <xTaskRemoveFromEventList>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00e      	beq.n	800b01c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2201      	movs	r2, #1
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	e007      	b.n	800b01c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b010:	3301      	adds	r3, #1
 800b012:	b2db      	uxtb	r3, r3
 800b014:	b25a      	sxtb	r2, r3
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b01c:	2301      	movs	r3, #1
 800b01e:	637b      	str	r3, [r7, #52]	; 0x34
 800b020:	e001      	b.n	800b026 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b022:	2300      	movs	r3, #0
 800b024:	637b      	str	r3, [r7, #52]	; 0x34
 800b026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b028:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b032:	4618      	mov	r0, r3
 800b034:	3738      	adds	r7, #56	; 0x38
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08c      	sub	sp, #48	; 0x30
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b048:	2300      	movs	r3, #0
 800b04a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	2b00      	cmp	r3, #0
 800b054:	d109      	bne.n	800b06a <xQueueReceive+0x2e>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	623b      	str	r3, [r7, #32]
 800b068:	e7fe      	b.n	800b068 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <xQueueReceive+0x3c>
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <xQueueReceive+0x40>
 800b078:	2301      	movs	r3, #1
 800b07a:	e000      	b.n	800b07e <xQueueReceive+0x42>
 800b07c:	2300      	movs	r3, #0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d109      	bne.n	800b096 <xQueueReceive+0x5a>
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	e7fe      	b.n	800b094 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b096:	f001 f821 	bl	800c0dc <xTaskGetSchedulerState>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d102      	bne.n	800b0a6 <xQueueReceive+0x6a>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <xQueueReceive+0x6e>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <xQueueReceive+0x70>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d109      	bne.n	800b0c4 <xQueueReceive+0x88>
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	e7fe      	b.n	800b0c2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0c4:	f7ff fb8a 	bl	800a7dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01f      	beq.n	800b114 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d8:	f000 f8f6 	bl	800b2c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	1e5a      	subs	r2, r3, #1
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00f      	beq.n	800b10c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	3310      	adds	r3, #16
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fe3d 	bl	800bd70 <xTaskRemoveFromEventList>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d007      	beq.n	800b10c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0fc:	4b3c      	ldr	r3, [pc, #240]	; (800b1f0 <xQueueReceive+0x1b4>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b10c:	f7ff fb94 	bl	800a838 <vPortExitCritical>
				return pdPASS;
 800b110:	2301      	movs	r3, #1
 800b112:	e069      	b.n	800b1e8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d103      	bne.n	800b122 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b11a:	f7ff fb8d 	bl	800a838 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b11e:	2300      	movs	r3, #0
 800b120:	e062      	b.n	800b1e8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d106      	bne.n	800b136 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b128:	f107 0310 	add.w	r3, r7, #16
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 fe81 	bl	800be34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b132:	2301      	movs	r3, #1
 800b134:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b136:	f7ff fb7f 	bl	800a838 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b13a:	f000 fbfd 	bl	800b938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b13e:	f7ff fb4d 	bl	800a7dc <vPortEnterCritical>
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b148:	b25b      	sxtb	r3, r3
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b14e:	d103      	bne.n	800b158 <xQueueReceive+0x11c>
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b164:	d103      	bne.n	800b16e <xQueueReceive+0x132>
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b16e:	f7ff fb63 	bl	800a838 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b172:	1d3a      	adds	r2, r7, #4
 800b174:	f107 0310 	add.w	r3, r7, #16
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fe70 	bl	800be60 <xTaskCheckForTimeOut>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d123      	bne.n	800b1ce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b188:	f000 f916 	bl	800b3b8 <prvIsQueueEmpty>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d017      	beq.n	800b1c2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	3324      	adds	r3, #36	; 0x24
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	4611      	mov	r1, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 fd9a 	bl	800bcd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a2:	f000 f8b7 	bl	800b314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1a6:	f000 fbd5 	bl	800b954 <xTaskResumeAll>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d189      	bne.n	800b0c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <xQueueReceive+0x1b4>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	e780      	b.n	800b0c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c4:	f000 f8a6 	bl	800b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1c8:	f000 fbc4 	bl	800b954 <xTaskResumeAll>
 800b1cc:	e77a      	b.n	800b0c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d0:	f000 f8a0 	bl	800b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1d4:	f000 fbbe 	bl	800b954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1da:	f000 f8ed 	bl	800b3b8 <prvIsQueueEmpty>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f43f af6f 	beq.w	800b0c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3730      	adds	r7, #48	; 0x30
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10d      	bne.n	800b22e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d14d      	bne.n	800b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 ff7a 	bl	800c118 <xTaskPriorityDisinherit>
 800b224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	609a      	str	r2, [r3, #8]
 800b22c:	e043      	b.n	800b2b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d119      	bne.n	800b268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6858      	ldr	r0, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23c:	461a      	mov	r2, r3
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	f001 fcd0 	bl	800cbe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	441a      	add	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d32b      	bcc.n	800b2b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	605a      	str	r2, [r3, #4]
 800b266:	e026      	b.n	800b2b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68d8      	ldr	r0, [r3, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b270:	461a      	mov	r2, r3
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	f001 fcb6 	bl	800cbe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68da      	ldr	r2, [r3, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b280:	425b      	negs	r3, r3
 800b282:	441a      	add	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d207      	bcs.n	800b2a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	689a      	ldr	r2, [r3, #8]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29c:	425b      	negs	r3, r3
 800b29e:	441a      	add	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d105      	bne.n	800b2b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2be:	697b      	ldr	r3, [r7, #20]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d018      	beq.n	800b30c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	441a      	add	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d303      	bcc.n	800b2fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68d9      	ldr	r1, [r3, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	461a      	mov	r2, r3
 800b306:	6838      	ldr	r0, [r7, #0]
 800b308:	f001 fc6c 	bl	800cbe4 <memcpy>
	}
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b31c:	f7ff fa5e 	bl	800a7dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b328:	e011      	b.n	800b34e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d012      	beq.n	800b358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	3324      	adds	r3, #36	; 0x24
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fd1a 	bl	800bd70 <xTaskRemoveFromEventList>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b342:	f000 fded 	bl	800bf20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	3b01      	subs	r3, #1
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b352:	2b00      	cmp	r3, #0
 800b354:	dce9      	bgt.n	800b32a <prvUnlockQueue+0x16>
 800b356:	e000      	b.n	800b35a <prvUnlockQueue+0x46>
					break;
 800b358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	22ff      	movs	r2, #255	; 0xff
 800b35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b362:	f7ff fa69 	bl	800a838 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b366:	f7ff fa39 	bl	800a7dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b372:	e011      	b.n	800b398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d012      	beq.n	800b3a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3310      	adds	r3, #16
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fcf5 	bl	800bd70 <xTaskRemoveFromEventList>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b38c:	f000 fdc8 	bl	800bf20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	3b01      	subs	r3, #1
 800b394:	b2db      	uxtb	r3, r3
 800b396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dce9      	bgt.n	800b374 <prvUnlockQueue+0x60>
 800b3a0:	e000      	b.n	800b3a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	22ff      	movs	r2, #255	; 0xff
 800b3a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3ac:	f7ff fa44 	bl	800a838 <vPortExitCritical>
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3c0:	f7ff fa0c 	bl	800a7dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e001      	b.n	800b3d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3d6:	f7ff fa2f 	bl	800a838 <vPortExitCritical>

	return xReturn;
 800b3da:	68fb      	ldr	r3, [r7, #12]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3ec:	f7ff f9f6 	bl	800a7dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d102      	bne.n	800b402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	e001      	b.n	800b406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b402:	2300      	movs	r3, #0
 800b404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b406:	f7ff fa17 	bl	800a838 <vPortExitCritical>

	return xReturn;
 800b40a:	68fb      	ldr	r3, [r7, #12]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e014      	b.n	800b44e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b424:	4a0e      	ldr	r2, [pc, #56]	; (800b460 <vQueueAddToRegistry+0x4c>)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b430:	490b      	ldr	r1, [pc, #44]	; (800b460 <vQueueAddToRegistry+0x4c>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b43a:	4a09      	ldr	r2, [pc, #36]	; (800b460 <vQueueAddToRegistry+0x4c>)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	4413      	add	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b446:	e005      	b.n	800b454 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b07      	cmp	r3, #7
 800b452:	d9e7      	bls.n	800b424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	20006d1c 	.word	0x20006d1c

0800b464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b474:	f7ff f9b2 	bl	800a7dc <vPortEnterCritical>
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b47e:	b25b      	sxtb	r3, r3
 800b480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b484:	d103      	bne.n	800b48e <vQueueWaitForMessageRestricted+0x2a>
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b494:	b25b      	sxtb	r3, r3
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b49a:	d103      	bne.n	800b4a4 <vQueueWaitForMessageRestricted+0x40>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4a4:	f7ff f9c8 	bl	800a838 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	3324      	adds	r3, #36	; 0x24
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fc2f 	bl	800bd1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4be:	6978      	ldr	r0, [r7, #20]
 800b4c0:	f7ff ff28 	bl	800b314 <prvUnlockQueue>
	}
 800b4c4:	bf00      	nop
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08e      	sub	sp, #56	; 0x38
 800b4d0:	af04      	add	r7, sp, #16
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d109      	bne.n	800b4f4 <xTaskCreateStatic+0x28>
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	623b      	str	r3, [r7, #32]
 800b4f2:	e7fe      	b.n	800b4f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <xTaskCreateStatic+0x42>
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	61fb      	str	r3, [r7, #28]
 800b50c:	e7fe      	b.n	800b50c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b50e:	235c      	movs	r3, #92	; 0x5c
 800b510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b5c      	cmp	r3, #92	; 0x5c
 800b516:	d009      	beq.n	800b52c <xTaskCreateStatic+0x60>
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	e7fe      	b.n	800b52a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b52c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d01e      	beq.n	800b572 <xTaskCreateStatic+0xa6>
 800b534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b536:	2b00      	cmp	r3, #0
 800b538:	d01b      	beq.n	800b572 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b542:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b546:	2202      	movs	r2, #2
 800b548:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b54c:	2300      	movs	r3, #0
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	f107 0314 	add.w	r3, r7, #20
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f000 f850 	bl	800b60a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b56c:	f000 f8dc 	bl	800b728 <prvAddNewTaskToReadyList>
 800b570:	e001      	b.n	800b576 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b576:	697b      	ldr	r3, [r7, #20]
	}
 800b578:	4618      	mov	r0, r3
 800b57a:	3728      	adds	r7, #40	; 0x28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08c      	sub	sp, #48	; 0x30
 800b584:	af04      	add	r7, sp, #16
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe fd71 	bl	800a07c <pvPortMalloc>
 800b59a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00e      	beq.n	800b5c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5a2:	205c      	movs	r0, #92	; 0x5c
 800b5a4:	f7fe fd6a 	bl	800a07c <pvPortMalloc>
 800b5a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	631a      	str	r2, [r3, #48]	; 0x30
 800b5b6:	e005      	b.n	800b5c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5b8:	6978      	ldr	r0, [r7, #20]
 800b5ba:	f7fe fe21 	bl	800a200 <vPortFree>
 800b5be:	e001      	b.n	800b5c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d017      	beq.n	800b5fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5d2:	88fa      	ldrh	r2, [r7, #6]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9303      	str	r3, [sp, #12]
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	9302      	str	r3, [sp, #8]
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	68b9      	ldr	r1, [r7, #8]
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f80e 	bl	800b60a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5ee:	69f8      	ldr	r0, [r7, #28]
 800b5f0:	f000 f89a 	bl	800b728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	61bb      	str	r3, [r7, #24]
 800b5f8:	e002      	b.n	800b600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b600:	69bb      	ldr	r3, [r7, #24]
	}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b088      	sub	sp, #32
 800b60e:	af00      	add	r7, sp, #0
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	60b9      	str	r1, [r7, #8]
 800b614:	607a      	str	r2, [r7, #4]
 800b616:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	461a      	mov	r2, r3
 800b622:	21a5      	movs	r1, #165	; 0xa5
 800b624:	f001 fae9 	bl	800cbfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b632:	440b      	add	r3, r1
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	f023 0307 	bic.w	r3, r3, #7
 800b640:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	f003 0307 	and.w	r3, r3, #7
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <prvInitialiseNewTask+0x56>
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e7fe      	b.n	800b65e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d01f      	beq.n	800b6a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b666:	2300      	movs	r3, #0
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	e012      	b.n	800b692 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	7819      	ldrb	r1, [r3, #0]
 800b674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	4413      	add	r3, r2
 800b67a:	3334      	adds	r3, #52	; 0x34
 800b67c:	460a      	mov	r2, r1
 800b67e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	4413      	add	r3, r2
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d006      	beq.n	800b69a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	3301      	adds	r3, #1
 800b690:	61fb      	str	r3, [r7, #28]
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	2b0f      	cmp	r3, #15
 800b696:	d9e9      	bls.n	800b66c <prvInitialiseNewTask+0x62>
 800b698:	e000      	b.n	800b69c <prvInitialiseNewTask+0x92>
			{
				break;
 800b69a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6a4:	e003      	b.n	800b6ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	2b37      	cmp	r3, #55	; 0x37
 800b6b2:	d901      	bls.n	800b6b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6b4:	2337      	movs	r3, #55	; 0x37
 800b6b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe feca 	bl	800a468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	3318      	adds	r3, #24
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fec5 	bl	800a468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	69b8      	ldr	r0, [r7, #24]
 800b708:	f7fe ff42 	bl	800a590 <pxPortInitialiseStack>
 800b70c:	4602      	mov	r2, r0
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b71c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b71e:	bf00      	nop
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b730:	f7ff f854 	bl	800a7dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b734:	4b2d      	ldr	r3, [pc, #180]	; (800b7ec <prvAddNewTaskToReadyList+0xc4>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	4a2c      	ldr	r2, [pc, #176]	; (800b7ec <prvAddNewTaskToReadyList+0xc4>)
 800b73c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b73e:	4b2c      	ldr	r3, [pc, #176]	; (800b7f0 <prvAddNewTaskToReadyList+0xc8>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d109      	bne.n	800b75a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b746:	4a2a      	ldr	r2, [pc, #168]	; (800b7f0 <prvAddNewTaskToReadyList+0xc8>)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b74c:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <prvAddNewTaskToReadyList+0xc4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d110      	bne.n	800b776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b754:	f000 fc08 	bl	800bf68 <prvInitialiseTaskLists>
 800b758:	e00d      	b.n	800b776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b75a:	4b26      	ldr	r3, [pc, #152]	; (800b7f4 <prvAddNewTaskToReadyList+0xcc>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b762:	4b23      	ldr	r3, [pc, #140]	; (800b7f0 <prvAddNewTaskToReadyList+0xc8>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d802      	bhi.n	800b776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b770:	4a1f      	ldr	r2, [pc, #124]	; (800b7f0 <prvAddNewTaskToReadyList+0xc8>)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b776:	4b20      	ldr	r3, [pc, #128]	; (800b7f8 <prvAddNewTaskToReadyList+0xd0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3301      	adds	r3, #1
 800b77c:	4a1e      	ldr	r2, [pc, #120]	; (800b7f8 <prvAddNewTaskToReadyList+0xd0>)
 800b77e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b780:	4b1d      	ldr	r3, [pc, #116]	; (800b7f8 <prvAddNewTaskToReadyList+0xd0>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <prvAddNewTaskToReadyList+0xd4>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	429a      	cmp	r2, r3
 800b792:	d903      	bls.n	800b79c <prvAddNewTaskToReadyList+0x74>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	4a18      	ldr	r2, [pc, #96]	; (800b7fc <prvAddNewTaskToReadyList+0xd4>)
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4a15      	ldr	r2, [pc, #84]	; (800b800 <prvAddNewTaskToReadyList+0xd8>)
 800b7aa:	441a      	add	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7fe fe65 	bl	800a482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7b8:	f7ff f83e 	bl	800a838 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7bc:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <prvAddNewTaskToReadyList+0xcc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00e      	beq.n	800b7e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <prvAddNewTaskToReadyList+0xc8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d207      	bcs.n	800b7e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <prvAddNewTaskToReadyList+0xdc>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20005bbc 	.word	0x20005bbc
 800b7f0:	200056e8 	.word	0x200056e8
 800b7f4:	20005bc8 	.word	0x20005bc8
 800b7f8:	20005bd8 	.word	0x20005bd8
 800b7fc:	20005bc4 	.word	0x20005bc4
 800b800:	200056ec 	.word	0x200056ec
 800b804:	e000ed04 	.word	0xe000ed04

0800b808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d016      	beq.n	800b848 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b81a:	4b13      	ldr	r3, [pc, #76]	; (800b868 <vTaskDelay+0x60>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d009      	beq.n	800b836 <vTaskDelay+0x2e>
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60bb      	str	r3, [r7, #8]
 800b834:	e7fe      	b.n	800b834 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b836:	f000 f87f 	bl	800b938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b83a:	2100      	movs	r1, #0
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fcd7 	bl	800c1f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b842:	f000 f887 	bl	800b954 <xTaskResumeAll>
 800b846:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d107      	bne.n	800b85e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b84e:	4b07      	ldr	r3, [pc, #28]	; (800b86c <vTaskDelay+0x64>)
 800b850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20005be4 	.word	0x20005be4
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08a      	sub	sp, #40	; 0x28
 800b874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b876:	2300      	movs	r3, #0
 800b878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b87e:	463a      	mov	r2, r7
 800b880:	1d39      	adds	r1, r7, #4
 800b882:	f107 0308 	add.w	r3, r7, #8
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fbc4 	bl	800a014 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	9202      	str	r2, [sp, #8]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	2300      	movs	r3, #0
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	2300      	movs	r3, #0
 800b89c:	460a      	mov	r2, r1
 800b89e:	4920      	ldr	r1, [pc, #128]	; (800b920 <vTaskStartScheduler+0xb0>)
 800b8a0:	4820      	ldr	r0, [pc, #128]	; (800b924 <vTaskStartScheduler+0xb4>)
 800b8a2:	f7ff fe13 	bl	800b4cc <xTaskCreateStatic>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	4b1f      	ldr	r3, [pc, #124]	; (800b928 <vTaskStartScheduler+0xb8>)
 800b8aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8ac:	4b1e      	ldr	r3, [pc, #120]	; (800b928 <vTaskStartScheduler+0xb8>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
 800b8b8:	e001      	b.n	800b8be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d102      	bne.n	800b8ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8c4:	f000 fce8 	bl	800c298 <xTimerCreateTimerTask>
 800b8c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d115      	bne.n	800b8fc <vTaskStartScheduler+0x8c>
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8e2:	4b12      	ldr	r3, [pc, #72]	; (800b92c <vTaskStartScheduler+0xbc>)
 800b8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8ea:	4b11      	ldr	r3, [pc, #68]	; (800b930 <vTaskStartScheduler+0xc0>)
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8f0:	4b10      	ldr	r3, [pc, #64]	; (800b934 <vTaskStartScheduler+0xc4>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8f6:	f7fe fed3 	bl	800a6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8fa:	e00d      	b.n	800b918 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b902:	d109      	bne.n	800b918 <vTaskStartScheduler+0xa8>
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	e7fe      	b.n	800b916 <vTaskStartScheduler+0xa6>
}
 800b918:	bf00      	nop
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	0800e678 	.word	0x0800e678
 800b924:	0800bf39 	.word	0x0800bf39
 800b928:	20005be0 	.word	0x20005be0
 800b92c:	20005bdc 	.word	0x20005bdc
 800b930:	20005bc8 	.word	0x20005bc8
 800b934:	20005bc0 	.word	0x20005bc0

0800b938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b938:	b480      	push	{r7}
 800b93a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b93c:	4b04      	ldr	r3, [pc, #16]	; (800b950 <vTaskSuspendAll+0x18>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3301      	adds	r3, #1
 800b942:	4a03      	ldr	r2, [pc, #12]	; (800b950 <vTaskSuspendAll+0x18>)
 800b944:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b946:	bf00      	nop
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr
 800b950:	20005be4 	.word	0x20005be4

0800b954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b95e:	2300      	movs	r3, #0
 800b960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b962:	4b41      	ldr	r3, [pc, #260]	; (800ba68 <xTaskResumeAll+0x114>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d109      	bne.n	800b97e <xTaskResumeAll+0x2a>
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	e7fe      	b.n	800b97c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b97e:	f7fe ff2d 	bl	800a7dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b982:	4b39      	ldr	r3, [pc, #228]	; (800ba68 <xTaskResumeAll+0x114>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3b01      	subs	r3, #1
 800b988:	4a37      	ldr	r2, [pc, #220]	; (800ba68 <xTaskResumeAll+0x114>)
 800b98a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b98c:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <xTaskResumeAll+0x114>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d162      	bne.n	800ba5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b994:	4b35      	ldr	r3, [pc, #212]	; (800ba6c <xTaskResumeAll+0x118>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d05e      	beq.n	800ba5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b99c:	e02f      	b.n	800b9fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b99e:	4b34      	ldr	r3, [pc, #208]	; (800ba70 <xTaskResumeAll+0x11c>)
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3318      	adds	r3, #24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe fdc6 	bl	800a53c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fe fdc1 	bl	800a53c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9be:	4b2d      	ldr	r3, [pc, #180]	; (800ba74 <xTaskResumeAll+0x120>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d903      	bls.n	800b9ce <xTaskResumeAll+0x7a>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ca:	4a2a      	ldr	r2, [pc, #168]	; (800ba74 <xTaskResumeAll+0x120>)
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4a27      	ldr	r2, [pc, #156]	; (800ba78 <xTaskResumeAll+0x124>)
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7fe fd4c 	bl	800a482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	4b23      	ldr	r3, [pc, #140]	; (800ba7c <xTaskResumeAll+0x128>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d302      	bcc.n	800b9fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b9f8:	4b21      	ldr	r3, [pc, #132]	; (800ba80 <xTaskResumeAll+0x12c>)
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9fe:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <xTaskResumeAll+0x11c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1cb      	bne.n	800b99e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba0c:	f000 fb46 	bl	800c09c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba10:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <xTaskResumeAll+0x130>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d010      	beq.n	800ba3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba1c:	f000 f846 	bl	800baac <xTaskIncrementTick>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ba26:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <xTaskResumeAll+0x12c>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1f1      	bne.n	800ba1c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ba38:	4b12      	ldr	r3, [pc, #72]	; (800ba84 <xTaskResumeAll+0x130>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba3e:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <xTaskResumeAll+0x12c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d009      	beq.n	800ba5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba46:	2301      	movs	r3, #1
 800ba48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <xTaskResumeAll+0x134>)
 800ba4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba5a:	f7fe feed 	bl	800a838 <vPortExitCritical>

	return xAlreadyYielded;
 800ba5e:	68bb      	ldr	r3, [r7, #8]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	20005be4 	.word	0x20005be4
 800ba6c:	20005bbc 	.word	0x20005bbc
 800ba70:	20005b7c 	.word	0x20005b7c
 800ba74:	20005bc4 	.word	0x20005bc4
 800ba78:	200056ec 	.word	0x200056ec
 800ba7c:	200056e8 	.word	0x200056e8
 800ba80:	20005bd0 	.word	0x20005bd0
 800ba84:	20005bcc 	.word	0x20005bcc
 800ba88:	e000ed04 	.word	0xe000ed04

0800ba8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba92:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <xTaskGetTickCount+0x1c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba98:	687b      	ldr	r3, [r7, #4]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	20005bc0 	.word	0x20005bc0

0800baac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bab6:	4b4e      	ldr	r3, [pc, #312]	; (800bbf0 <xTaskIncrementTick+0x144>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f040 8088 	bne.w	800bbd0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bac0:	4b4c      	ldr	r3, [pc, #304]	; (800bbf4 <xTaskIncrementTick+0x148>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bac8:	4a4a      	ldr	r2, [pc, #296]	; (800bbf4 <xTaskIncrementTick+0x148>)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d11f      	bne.n	800bb14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bad4:	4b48      	ldr	r3, [pc, #288]	; (800bbf8 <xTaskIncrementTick+0x14c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d009      	beq.n	800baf2 <xTaskIncrementTick+0x46>
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	603b      	str	r3, [r7, #0]
 800baf0:	e7fe      	b.n	800baf0 <xTaskIncrementTick+0x44>
 800baf2:	4b41      	ldr	r3, [pc, #260]	; (800bbf8 <xTaskIncrementTick+0x14c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	4b40      	ldr	r3, [pc, #256]	; (800bbfc <xTaskIncrementTick+0x150>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a3e      	ldr	r2, [pc, #248]	; (800bbf8 <xTaskIncrementTick+0x14c>)
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	4a3e      	ldr	r2, [pc, #248]	; (800bbfc <xTaskIncrementTick+0x150>)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	4b3e      	ldr	r3, [pc, #248]	; (800bc00 <xTaskIncrementTick+0x154>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	4a3c      	ldr	r2, [pc, #240]	; (800bc00 <xTaskIncrementTick+0x154>)
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	f000 fac4 	bl	800c09c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb14:	4b3b      	ldr	r3, [pc, #236]	; (800bc04 <xTaskIncrementTick+0x158>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d349      	bcc.n	800bbb2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb1e:	4b36      	ldr	r3, [pc, #216]	; (800bbf8 <xTaskIncrementTick+0x14c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d104      	bne.n	800bb32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	4b36      	ldr	r3, [pc, #216]	; (800bc04 <xTaskIncrementTick+0x158>)
 800bb2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb2e:	601a      	str	r2, [r3, #0]
					break;
 800bb30:	e03f      	b.n	800bbb2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb32:	4b31      	ldr	r3, [pc, #196]	; (800bbf8 <xTaskIncrementTick+0x14c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d203      	bcs.n	800bb52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb4a:	4a2e      	ldr	r2, [pc, #184]	; (800bc04 <xTaskIncrementTick+0x158>)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb50:	e02f      	b.n	800bbb2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	3304      	adds	r3, #4
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fcf0 	bl	800a53c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d004      	beq.n	800bb6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	3318      	adds	r3, #24
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe fce7 	bl	800a53c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb72:	4b25      	ldr	r3, [pc, #148]	; (800bc08 <xTaskIncrementTick+0x15c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d903      	bls.n	800bb82 <xTaskIncrementTick+0xd6>
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	4a22      	ldr	r2, [pc, #136]	; (800bc08 <xTaskIncrementTick+0x15c>)
 800bb80:	6013      	str	r3, [r2, #0]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb86:	4613      	mov	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4a1f      	ldr	r2, [pc, #124]	; (800bc0c <xTaskIncrementTick+0x160>)
 800bb90:	441a      	add	r2, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f7fe fc72 	bl	800a482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <xTaskIncrementTick+0x164>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3b8      	bcc.n	800bb1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bbac:	2301      	movs	r3, #1
 800bbae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbb0:	e7b5      	b.n	800bb1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbb2:	4b17      	ldr	r3, [pc, #92]	; (800bc10 <xTaskIncrementTick+0x164>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb8:	4914      	ldr	r1, [pc, #80]	; (800bc0c <xTaskIncrementTick+0x160>)
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d907      	bls.n	800bbda <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	e004      	b.n	800bbda <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bbd0:	4b10      	ldr	r3, [pc, #64]	; (800bc14 <xTaskIncrementTick+0x168>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	4a0f      	ldr	r2, [pc, #60]	; (800bc14 <xTaskIncrementTick+0x168>)
 800bbd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bbda:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <xTaskIncrementTick+0x16c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bbe6:	697b      	ldr	r3, [r7, #20]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20005be4 	.word	0x20005be4
 800bbf4:	20005bc0 	.word	0x20005bc0
 800bbf8:	20005b74 	.word	0x20005b74
 800bbfc:	20005b78 	.word	0x20005b78
 800bc00:	20005bd4 	.word	0x20005bd4
 800bc04:	20005bdc 	.word	0x20005bdc
 800bc08:	20005bc4 	.word	0x20005bc4
 800bc0c:	200056ec 	.word	0x200056ec
 800bc10:	200056e8 	.word	0x200056e8
 800bc14:	20005bcc 	.word	0x20005bcc
 800bc18:	20005bd0 	.word	0x20005bd0

0800bc1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc22:	4b27      	ldr	r3, [pc, #156]	; (800bcc0 <vTaskSwitchContext+0xa4>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc2a:	4b26      	ldr	r3, [pc, #152]	; (800bcc4 <vTaskSwitchContext+0xa8>)
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc30:	e040      	b.n	800bcb4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bc32:	4b24      	ldr	r3, [pc, #144]	; (800bcc4 <vTaskSwitchContext+0xa8>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc38:	4b23      	ldr	r3, [pc, #140]	; (800bcc8 <vTaskSwitchContext+0xac>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e00f      	b.n	800bc60 <vTaskSwitchContext+0x44>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <vTaskSwitchContext+0x3e>
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	e7fe      	b.n	800bc58 <vTaskSwitchContext+0x3c>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	60fb      	str	r3, [r7, #12]
 800bc60:	491a      	ldr	r1, [pc, #104]	; (800bccc <vTaskSwitchContext+0xb0>)
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0e5      	beq.n	800bc40 <vTaskSwitchContext+0x24>
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4a13      	ldr	r2, [pc, #76]	; (800bccc <vTaskSwitchContext+0xb0>)
 800bc80:	4413      	add	r3, r2
 800bc82:	60bb      	str	r3, [r7, #8]
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	605a      	str	r2, [r3, #4]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	3308      	adds	r3, #8
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d104      	bne.n	800bca4 <vTaskSwitchContext+0x88>
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	605a      	str	r2, [r3, #4]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	4a09      	ldr	r2, [pc, #36]	; (800bcd0 <vTaskSwitchContext+0xb4>)
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	4a06      	ldr	r2, [pc, #24]	; (800bcc8 <vTaskSwitchContext+0xac>)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6013      	str	r3, [r2, #0]
}
 800bcb4:	bf00      	nop
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	20005be4 	.word	0x20005be4
 800bcc4:	20005bd0 	.word	0x20005bd0
 800bcc8:	20005bc4 	.word	0x20005bc4
 800bccc:	200056ec 	.word	0x200056ec
 800bcd0:	200056e8 	.word	0x200056e8

0800bcd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d109      	bne.n	800bcf8 <vTaskPlaceOnEventList+0x24>
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	e7fe      	b.n	800bcf6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcf8:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <vTaskPlaceOnEventList+0x44>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3318      	adds	r3, #24
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7fe fbe2 	bl	800a4ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd06:	2101      	movs	r1, #1
 800bd08:	6838      	ldr	r0, [r7, #0]
 800bd0a:	f000 fa71 	bl	800c1f0 <prvAddCurrentTaskToDelayedList>
}
 800bd0e:	bf00      	nop
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	200056e8 	.word	0x200056e8

0800bd1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d109      	bne.n	800bd42 <vTaskPlaceOnEventListRestricted+0x26>
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	e7fe      	b.n	800bd40 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd42:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <vTaskPlaceOnEventListRestricted+0x50>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3318      	adds	r3, #24
 800bd48:	4619      	mov	r1, r3
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7fe fb99 	bl	800a482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bd56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	68b8      	ldr	r0, [r7, #8]
 800bd60:	f000 fa46 	bl	800c1f0 <prvAddCurrentTaskToDelayedList>
	}
 800bd64:	bf00      	nop
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	200056e8 	.word	0x200056e8

0800bd70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d109      	bne.n	800bd9a <xTaskRemoveFromEventList+0x2a>
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	e7fe      	b.n	800bd98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3318      	adds	r3, #24
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe fbcc 	bl	800a53c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda4:	4b1d      	ldr	r3, [pc, #116]	; (800be1c <xTaskRemoveFromEventList+0xac>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d11d      	bne.n	800bde8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fbc3 	bl	800a53c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdba:	4b19      	ldr	r3, [pc, #100]	; (800be20 <xTaskRemoveFromEventList+0xb0>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d903      	bls.n	800bdca <xTaskRemoveFromEventList+0x5a>
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	4a16      	ldr	r2, [pc, #88]	; (800be20 <xTaskRemoveFromEventList+0xb0>)
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4a13      	ldr	r2, [pc, #76]	; (800be24 <xTaskRemoveFromEventList+0xb4>)
 800bdd8:	441a      	add	r2, r3
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7fe fb4e 	bl	800a482 <vListInsertEnd>
 800bde6:	e005      	b.n	800bdf4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	3318      	adds	r3, #24
 800bdec:	4619      	mov	r1, r3
 800bdee:	480e      	ldr	r0, [pc, #56]	; (800be28 <xTaskRemoveFromEventList+0xb8>)
 800bdf0:	f7fe fb47 	bl	800a482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf8:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <xTaskRemoveFromEventList+0xbc>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d905      	bls.n	800be0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be02:	2301      	movs	r3, #1
 800be04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be06:	4b0a      	ldr	r3, [pc, #40]	; (800be30 <xTaskRemoveFromEventList+0xc0>)
 800be08:	2201      	movs	r2, #1
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	e001      	b.n	800be12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be12:	697b      	ldr	r3, [r7, #20]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	20005be4 	.word	0x20005be4
 800be20:	20005bc4 	.word	0x20005bc4
 800be24:	200056ec 	.word	0x200056ec
 800be28:	20005b7c 	.word	0x20005b7c
 800be2c:	200056e8 	.word	0x200056e8
 800be30:	20005bd0 	.word	0x20005bd0

0800be34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <vTaskInternalSetTimeOutState+0x24>)
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <vTaskInternalSetTimeOutState+0x28>)
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	605a      	str	r2, [r3, #4]
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	20005bd4 	.word	0x20005bd4
 800be5c:	20005bc0 	.word	0x20005bc0

0800be60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d109      	bne.n	800be84 <xTaskCheckForTimeOut+0x24>
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	613b      	str	r3, [r7, #16]
 800be82:	e7fe      	b.n	800be82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <xTaskCheckForTimeOut+0x3e>
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	e7fe      	b.n	800be9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800be9e:	f7fe fc9d 	bl	800a7dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bea2:	4b1d      	ldr	r3, [pc, #116]	; (800bf18 <xTaskCheckForTimeOut+0xb8>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beba:	d102      	bne.n	800bec2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bebc:	2300      	movs	r3, #0
 800bebe:	61fb      	str	r3, [r7, #28]
 800bec0:	e023      	b.n	800bf0a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <xTaskCheckForTimeOut+0xbc>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	429a      	cmp	r2, r3
 800becc:	d007      	beq.n	800bede <xTaskCheckForTimeOut+0x7e>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d302      	bcc.n	800bede <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	61fb      	str	r3, [r7, #28]
 800bedc:	e015      	b.n	800bf0a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d20b      	bcs.n	800bf00 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	1ad2      	subs	r2, r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff ff9d 	bl	800be34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800befa:	2300      	movs	r3, #0
 800befc:	61fb      	str	r3, [r7, #28]
 800befe:	e004      	b.n	800bf0a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf06:	2301      	movs	r3, #1
 800bf08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf0a:	f7fe fc95 	bl	800a838 <vPortExitCritical>

	return xReturn;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20005bc0 	.word	0x20005bc0
 800bf1c:	20005bd4 	.word	0x20005bd4

0800bf20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf24:	4b03      	ldr	r3, [pc, #12]	; (800bf34 <vTaskMissedYield+0x14>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	601a      	str	r2, [r3, #0]
}
 800bf2a:	bf00      	nop
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	20005bd0 	.word	0x20005bd0

0800bf38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf40:	f000 f852 	bl	800bfe8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf44:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <prvIdleTask+0x28>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d9f9      	bls.n	800bf40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <prvIdleTask+0x2c>)
 800bf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf5c:	e7f0      	b.n	800bf40 <prvIdleTask+0x8>
 800bf5e:	bf00      	nop
 800bf60:	200056ec 	.word	0x200056ec
 800bf64:	e000ed04 	.word	0xe000ed04

0800bf68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	e00c      	b.n	800bf8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	4613      	mov	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4a12      	ldr	r2, [pc, #72]	; (800bfc8 <prvInitialiseTaskLists+0x60>)
 800bf80:	4413      	add	r3, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe fa50 	bl	800a428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b37      	cmp	r3, #55	; 0x37
 800bf92:	d9ef      	bls.n	800bf74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf94:	480d      	ldr	r0, [pc, #52]	; (800bfcc <prvInitialiseTaskLists+0x64>)
 800bf96:	f7fe fa47 	bl	800a428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf9a:	480d      	ldr	r0, [pc, #52]	; (800bfd0 <prvInitialiseTaskLists+0x68>)
 800bf9c:	f7fe fa44 	bl	800a428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfa0:	480c      	ldr	r0, [pc, #48]	; (800bfd4 <prvInitialiseTaskLists+0x6c>)
 800bfa2:	f7fe fa41 	bl	800a428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfa6:	480c      	ldr	r0, [pc, #48]	; (800bfd8 <prvInitialiseTaskLists+0x70>)
 800bfa8:	f7fe fa3e 	bl	800a428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfac:	480b      	ldr	r0, [pc, #44]	; (800bfdc <prvInitialiseTaskLists+0x74>)
 800bfae:	f7fe fa3b 	bl	800a428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <prvInitialiseTaskLists+0x78>)
 800bfb4:	4a05      	ldr	r2, [pc, #20]	; (800bfcc <prvInitialiseTaskLists+0x64>)
 800bfb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfb8:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <prvInitialiseTaskLists+0x7c>)
 800bfba:	4a05      	ldr	r2, [pc, #20]	; (800bfd0 <prvInitialiseTaskLists+0x68>)
 800bfbc:	601a      	str	r2, [r3, #0]
}
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	200056ec 	.word	0x200056ec
 800bfcc:	20005b4c 	.word	0x20005b4c
 800bfd0:	20005b60 	.word	0x20005b60
 800bfd4:	20005b7c 	.word	0x20005b7c
 800bfd8:	20005b90 	.word	0x20005b90
 800bfdc:	20005ba8 	.word	0x20005ba8
 800bfe0:	20005b74 	.word	0x20005b74
 800bfe4:	20005b78 	.word	0x20005b78

0800bfe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfee:	e019      	b.n	800c024 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bff0:	f7fe fbf4 	bl	800a7dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff4:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <prvCheckTasksWaitingTermination+0x4c>)
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3304      	adds	r3, #4
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe fa9b 	bl	800a53c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c006:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <prvCheckTasksWaitingTermination+0x50>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	4a0a      	ldr	r2, [pc, #40]	; (800c038 <prvCheckTasksWaitingTermination+0x50>)
 800c00e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c010:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <prvCheckTasksWaitingTermination+0x54>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3b01      	subs	r3, #1
 800c016:	4a09      	ldr	r2, [pc, #36]	; (800c03c <prvCheckTasksWaitingTermination+0x54>)
 800c018:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c01a:	f7fe fc0d 	bl	800a838 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f80e 	bl	800c040 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <prvCheckTasksWaitingTermination+0x54>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e1      	bne.n	800bff0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20005b90 	.word	0x20005b90
 800c038:	20005bbc 	.word	0x20005bbc
 800c03c:	20005ba4 	.word	0x20005ba4

0800c040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d108      	bne.n	800c064 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe f8d2 	bl	800a200 <vPortFree>
				vPortFree( pxTCB );
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7fe f8cf 	bl	800a200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c062:	e017      	b.n	800c094 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d103      	bne.n	800c076 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7fe f8c6 	bl	800a200 <vPortFree>
	}
 800c074:	e00e      	b.n	800c094 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d009      	beq.n	800c094 <prvDeleteTCB+0x54>
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	e7fe      	b.n	800c092 <prvDeleteTCB+0x52>
	}
 800c094:	bf00      	nop
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <prvResetNextTaskUnblockTime+0x38>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d104      	bne.n	800c0b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0ac:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0b4:	e008      	b.n	800c0c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0b6:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <prvResetNextTaskUnblockTime+0x38>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	4a04      	ldr	r2, [pc, #16]	; (800c0d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c0c6:	6013      	str	r3, [r2, #0]
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr
 800c0d4:	20005b74 	.word	0x20005b74
 800c0d8:	20005bdc 	.word	0x20005bdc

0800c0dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <xTaskGetSchedulerState+0x34>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	607b      	str	r3, [r7, #4]
 800c0ee:	e008      	b.n	800c102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0f0:	4b08      	ldr	r3, [pc, #32]	; (800c114 <xTaskGetSchedulerState+0x38>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d102      	bne.n	800c0fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	607b      	str	r3, [r7, #4]
 800c0fc:	e001      	b.n	800c102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0fe:	2300      	movs	r3, #0
 800c100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c102:	687b      	ldr	r3, [r7, #4]
	}
 800c104:	4618      	mov	r0, r3
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	20005bc8 	.word	0x20005bc8
 800c114:	20005be4 	.word	0x20005be4

0800c118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c124:	2300      	movs	r3, #0
 800c126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d054      	beq.n	800c1d8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c12e:	4b2d      	ldr	r3, [pc, #180]	; (800c1e4 <xTaskPriorityDisinherit+0xcc>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	429a      	cmp	r2, r3
 800c136:	d009      	beq.n	800c14c <xTaskPriorityDisinherit+0x34>
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	e7fe      	b.n	800c14a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c150:	2b00      	cmp	r3, #0
 800c152:	d109      	bne.n	800c168 <xTaskPriorityDisinherit+0x50>
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	60bb      	str	r3, [r7, #8]
 800c166:	e7fe      	b.n	800c166 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c16c:	1e5a      	subs	r2, r3, #1
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d02c      	beq.n	800c1d8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c182:	2b00      	cmp	r3, #0
 800c184:	d128      	bne.n	800c1d8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	3304      	adds	r3, #4
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe f9d6 	bl	800a53c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a8:	4b0f      	ldr	r3, [pc, #60]	; (800c1e8 <xTaskPriorityDisinherit+0xd0>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d903      	bls.n	800c1b8 <xTaskPriorityDisinherit+0xa0>
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	4a0c      	ldr	r2, [pc, #48]	; (800c1e8 <xTaskPriorityDisinherit+0xd0>)
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4a09      	ldr	r2, [pc, #36]	; (800c1ec <xTaskPriorityDisinherit+0xd4>)
 800c1c6:	441a      	add	r2, r3
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	f7fe f957 	bl	800a482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1d8:	697b      	ldr	r3, [r7, #20]
	}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	200056e8 	.word	0x200056e8
 800c1e8:	20005bc4 	.word	0x20005bc4
 800c1ec:	200056ec 	.word	0x200056ec

0800c1f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c200:	4b20      	ldr	r3, [pc, #128]	; (800c284 <prvAddCurrentTaskToDelayedList+0x94>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3304      	adds	r3, #4
 800c206:	4618      	mov	r0, r3
 800c208:	f7fe f998 	bl	800a53c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c212:	d10a      	bne.n	800c22a <prvAddCurrentTaskToDelayedList+0x3a>
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c21a:	4b1a      	ldr	r3, [pc, #104]	; (800c284 <prvAddCurrentTaskToDelayedList+0x94>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3304      	adds	r3, #4
 800c220:	4619      	mov	r1, r3
 800c222:	4819      	ldr	r0, [pc, #100]	; (800c288 <prvAddCurrentTaskToDelayedList+0x98>)
 800c224:	f7fe f92d 	bl	800a482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c228:	e026      	b.n	800c278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4413      	add	r3, r2
 800c230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c232:	4b14      	ldr	r3, [pc, #80]	; (800c284 <prvAddCurrentTaskToDelayedList+0x94>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d209      	bcs.n	800c256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c242:	4b12      	ldr	r3, [pc, #72]	; (800c28c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	4b0f      	ldr	r3, [pc, #60]	; (800c284 <prvAddCurrentTaskToDelayedList+0x94>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4619      	mov	r1, r3
 800c24e:	4610      	mov	r0, r2
 800c250:	f7fe f93b 	bl	800a4ca <vListInsert>
}
 800c254:	e010      	b.n	800c278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c256:	4b0e      	ldr	r3, [pc, #56]	; (800c290 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <prvAddCurrentTaskToDelayedList+0x94>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f7fe f931 	bl	800a4ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d202      	bcs.n	800c278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c272:	4a08      	ldr	r2, [pc, #32]	; (800c294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	6013      	str	r3, [r2, #0]
}
 800c278:	bf00      	nop
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20005bc0 	.word	0x20005bc0
 800c284:	200056e8 	.word	0x200056e8
 800c288:	20005ba8 	.word	0x20005ba8
 800c28c:	20005b78 	.word	0x20005b78
 800c290:	20005b74 	.word	0x20005b74
 800c294:	20005bdc 	.word	0x20005bdc

0800c298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08a      	sub	sp, #40	; 0x28
 800c29c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2a2:	f000 faff 	bl	800c8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2a6:	4b1c      	ldr	r3, [pc, #112]	; (800c318 <xTimerCreateTimerTask+0x80>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d021      	beq.n	800c2f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2b6:	1d3a      	adds	r2, r7, #4
 800c2b8:	f107 0108 	add.w	r1, r7, #8
 800c2bc:	f107 030c 	add.w	r3, r7, #12
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fd fec1 	bl	800a048 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	9202      	str	r2, [sp, #8]
 800c2ce:	9301      	str	r3, [sp, #4]
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	460a      	mov	r2, r1
 800c2d8:	4910      	ldr	r1, [pc, #64]	; (800c31c <xTimerCreateTimerTask+0x84>)
 800c2da:	4811      	ldr	r0, [pc, #68]	; (800c320 <xTimerCreateTimerTask+0x88>)
 800c2dc:	f7ff f8f6 	bl	800b4cc <xTaskCreateStatic>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	4b10      	ldr	r3, [pc, #64]	; (800c324 <xTimerCreateTimerTask+0x8c>)
 800c2e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <xTimerCreateTimerTask+0x8c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d001      	beq.n	800c2f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d109      	bne.n	800c30c <xTimerCreateTimerTask+0x74>
 800c2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	613b      	str	r3, [r7, #16]
 800c30a:	e7fe      	b.n	800c30a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c30c:	697b      	ldr	r3, [r7, #20]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20005c18 	.word	0x20005c18
 800c31c:	0800e680 	.word	0x0800e680
 800c320:	0800c459 	.word	0x0800c459
 800c324:	20005c1c 	.word	0x20005c1c

0800c328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c336:	2300      	movs	r3, #0
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d109      	bne.n	800c354 <xTimerGenericCommand+0x2c>
 800c340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	623b      	str	r3, [r7, #32]
 800c352:	e7fe      	b.n	800c352 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c354:	4b19      	ldr	r3, [pc, #100]	; (800c3bc <xTimerGenericCommand+0x94>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d02a      	beq.n	800c3b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	dc18      	bgt.n	800c3a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c36e:	f7ff feb5 	bl	800c0dc <xTaskGetSchedulerState>
 800c372:	4603      	mov	r3, r0
 800c374:	2b02      	cmp	r3, #2
 800c376:	d109      	bne.n	800c38c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c378:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <xTimerGenericCommand+0x94>)
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	f107 0110 	add.w	r1, r7, #16
 800c380:	2300      	movs	r3, #0
 800c382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c384:	f7fe fc42 	bl	800ac0c <xQueueGenericSend>
 800c388:	6278      	str	r0, [r7, #36]	; 0x24
 800c38a:	e012      	b.n	800c3b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c38c:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <xTimerGenericCommand+0x94>)
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	f107 0110 	add.w	r1, r7, #16
 800c394:	2300      	movs	r3, #0
 800c396:	2200      	movs	r2, #0
 800c398:	f7fe fc38 	bl	800ac0c <xQueueGenericSend>
 800c39c:	6278      	str	r0, [r7, #36]	; 0x24
 800c39e:	e008      	b.n	800c3b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3a0:	4b06      	ldr	r3, [pc, #24]	; (800c3bc <xTimerGenericCommand+0x94>)
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	f107 0110 	add.w	r1, r7, #16
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	f7fe fd28 	bl	800ae00 <xQueueGenericSendFromISR>
 800c3b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3728      	adds	r7, #40	; 0x28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20005c18 	.word	0x20005c18

0800c3c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af02      	add	r7, sp, #8
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ca:	4b22      	ldr	r3, [pc, #136]	; (800c454 <prvProcessExpiredTimer+0x94>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe f8af 	bl	800a53c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3e4:	f003 0304 	and.w	r3, r3, #4
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d021      	beq.n	800c430 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	699a      	ldr	r2, [r3, #24]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	18d1      	adds	r1, r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	6978      	ldr	r0, [r7, #20]
 800c3fa:	f000 f8d1 	bl	800c5a0 <prvInsertTimerInActiveList>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01e      	beq.n	800c442 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c404:	2300      	movs	r3, #0
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	2300      	movs	r3, #0
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	2100      	movs	r1, #0
 800c40e:	6978      	ldr	r0, [r7, #20]
 800c410:	f7ff ff8a 	bl	800c328 <xTimerGenericCommand>
 800c414:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d112      	bne.n	800c442 <prvProcessExpiredTimer+0x82>
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	e7fe      	b.n	800c42e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c436:	f023 0301 	bic.w	r3, r3, #1
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	6978      	ldr	r0, [r7, #20]
 800c448:	4798      	blx	r3
}
 800c44a:	bf00      	nop
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20005c10 	.word	0x20005c10

0800c458 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f857 	bl	800c518 <prvGetNextExpireTime>
 800c46a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	4619      	mov	r1, r3
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 f803 	bl	800c47c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c476:	f000 f8d5 	bl	800c624 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c47a:	e7f1      	b.n	800c460 <prvTimerTask+0x8>

0800c47c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c486:	f7ff fa57 	bl	800b938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c48a:	f107 0308 	add.w	r3, r7, #8
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 f866 	bl	800c560 <prvSampleTimeNow>
 800c494:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d130      	bne.n	800c4fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <prvProcessTimerOrBlockTask+0x3c>
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d806      	bhi.n	800c4b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4aa:	f7ff fa53 	bl	800b954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4ae:	68f9      	ldr	r1, [r7, #12]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ff85 	bl	800c3c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4b6:	e024      	b.n	800c502 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d008      	beq.n	800c4d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4be:	4b13      	ldr	r3, [pc, #76]	; (800c50c <prvProcessTimerOrBlockTask+0x90>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <prvProcessTimerOrBlockTask+0x50>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e000      	b.n	800c4ce <prvProcessTimerOrBlockTask+0x52>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4d0:	4b0f      	ldr	r3, [pc, #60]	; (800c510 <prvProcessTimerOrBlockTask+0x94>)
 800c4d2:	6818      	ldr	r0, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f7fe ffc1 	bl	800b464 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4e2:	f7ff fa37 	bl	800b954 <xTaskResumeAll>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4ec:	4b09      	ldr	r3, [pc, #36]	; (800c514 <prvProcessTimerOrBlockTask+0x98>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	f3bf 8f6f 	isb	sy
}
 800c4fc:	e001      	b.n	800c502 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4fe:	f7ff fa29 	bl	800b954 <xTaskResumeAll>
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	20005c14 	.word	0x20005c14
 800c510:	20005c18 	.word	0x20005c18
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c520:	4b0e      	ldr	r3, [pc, #56]	; (800c55c <prvGetNextExpireTime+0x44>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <prvGetNextExpireTime+0x16>
 800c52a:	2201      	movs	r2, #1
 800c52c:	e000      	b.n	800c530 <prvGetNextExpireTime+0x18>
 800c52e:	2200      	movs	r2, #0
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d105      	bne.n	800c548 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c53c:	4b07      	ldr	r3, [pc, #28]	; (800c55c <prvGetNextExpireTime+0x44>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e001      	b.n	800c54c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c548:	2300      	movs	r3, #0
 800c54a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c54c:	68fb      	ldr	r3, [r7, #12]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20005c10 	.word	0x20005c10

0800c560 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c568:	f7ff fa90 	bl	800ba8c <xTaskGetTickCount>
 800c56c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c56e:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <prvSampleTimeNow+0x3c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	429a      	cmp	r2, r3
 800c576:	d205      	bcs.n	800c584 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c578:	f000 f930 	bl	800c7dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	e002      	b.n	800c58a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c58a:	4a04      	ldr	r2, [pc, #16]	; (800c59c <prvSampleTimeNow+0x3c>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c590:	68fb      	ldr	r3, [r7, #12]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20005c20 	.word	0x20005c20

0800c5a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d812      	bhi.n	800c5ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	1ad2      	subs	r2, r2, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d302      	bcc.n	800c5da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	617b      	str	r3, [r7, #20]
 800c5d8:	e01b      	b.n	800c612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5da:	4b10      	ldr	r3, [pc, #64]	; (800c61c <prvInsertTimerInActiveList+0x7c>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f7fd ff70 	bl	800a4ca <vListInsert>
 800c5ea:	e012      	b.n	800c612 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d206      	bcs.n	800c602 <prvInsertTimerInActiveList+0x62>
 800c5f4:	68ba      	ldr	r2, [r7, #8]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d302      	bcc.n	800c602 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	617b      	str	r3, [r7, #20]
 800c600:	e007      	b.n	800c612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <prvInsertTimerInActiveList+0x80>)
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3304      	adds	r3, #4
 800c60a:	4619      	mov	r1, r3
 800c60c:	4610      	mov	r0, r2
 800c60e:	f7fd ff5c 	bl	800a4ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c612:	697b      	ldr	r3, [r7, #20]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3718      	adds	r7, #24
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	20005c14 	.word	0x20005c14
 800c620:	20005c10 	.word	0x20005c10

0800c624 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08e      	sub	sp, #56	; 0x38
 800c628:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c62a:	e0c6      	b.n	800c7ba <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da17      	bge.n	800c662 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c632:	1d3b      	adds	r3, r7, #4
 800c634:	3304      	adds	r3, #4
 800c636:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d109      	bne.n	800c652 <prvProcessReceivedCommands+0x2e>
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	61fb      	str	r3, [r7, #28]
 800c650:	e7fe      	b.n	800c650 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c658:	6850      	ldr	r0, [r2, #4]
 800c65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65c:	6892      	ldr	r2, [r2, #8]
 800c65e:	4611      	mov	r1, r2
 800c660:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f2c0 80a7 	blt.w	800c7b8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c678:	3304      	adds	r3, #4
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fd ff5e 	bl	800a53c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c680:	463b      	mov	r3, r7
 800c682:	4618      	mov	r0, r3
 800c684:	f7ff ff6c 	bl	800c560 <prvSampleTimeNow>
 800c688:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	f200 8094 	bhi.w	800c7ba <prvProcessReceivedCommands+0x196>
 800c692:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <prvProcessReceivedCommands+0x74>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c6c1 	.word	0x0800c6c1
 800c69c:	0800c6c1 	.word	0x0800c6c1
 800c6a0:	0800c6c1 	.word	0x0800c6c1
 800c6a4:	0800c733 	.word	0x0800c733
 800c6a8:	0800c747 	.word	0x0800c747
 800c6ac:	0800c78f 	.word	0x0800c78f
 800c6b0:	0800c6c1 	.word	0x0800c6c1
 800c6b4:	0800c6c1 	.word	0x0800c6c1
 800c6b8:	0800c733 	.word	0x0800c733
 800c6bc:	0800c747 	.word	0x0800c747
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6c6:	f043 0301 	orr.w	r3, r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	18d1      	adds	r1, r2, r3
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e0:	f7ff ff5e 	bl	800c5a0 <prvInsertTimerInActiveList>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d067      	beq.n	800c7ba <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	6a1b      	ldr	r3, [r3, #32]
 800c6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d05c      	beq.n	800c7ba <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	441a      	add	r2, r3
 800c708:	2300      	movs	r3, #0
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	2300      	movs	r3, #0
 800c70e:	2100      	movs	r1, #0
 800c710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c712:	f7ff fe09 	bl	800c328 <xTimerGenericCommand>
 800c716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d14d      	bne.n	800c7ba <prvProcessReceivedCommands+0x196>
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	61bb      	str	r3, [r7, #24]
 800c730:	e7fe      	b.n	800c730 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c738:	f023 0301 	bic.w	r3, r3, #1
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c744:	e039      	b.n	800c7ba <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c74c:	f043 0301 	orr.w	r3, r3, #1
 800c750:	b2da      	uxtb	r2, r3
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d109      	bne.n	800c77a <prvProcessReceivedCommands+0x156>
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	e7fe      	b.n	800c778 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	18d1      	adds	r1, r2, r3
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c788:	f7ff ff0a 	bl	800c5a0 <prvInsertTimerInActiveList>
					break;
 800c78c:	e015      	b.n	800c7ba <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c794:	f003 0302 	and.w	r3, r3, #2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d103      	bne.n	800c7a4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79e:	f7fd fd2f 	bl	800a200 <vPortFree>
 800c7a2:	e00a      	b.n	800c7ba <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7aa:	f023 0301 	bic.w	r3, r3, #1
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7b6:	e000      	b.n	800c7ba <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ba:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <prvProcessReceivedCommands+0x1b4>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	1d39      	adds	r1, r7, #4
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fc3a 	bl	800b03c <xQueueReceive>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f47f af2e 	bne.w	800c62c <prvProcessReceivedCommands+0x8>
	}
}
 800c7d0:	bf00      	nop
 800c7d2:	3730      	adds	r7, #48	; 0x30
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20005c18 	.word	0x20005c18

0800c7dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7e2:	e047      	b.n	800c874 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7e4:	4b2d      	ldr	r3, [pc, #180]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ee:	4b2b      	ldr	r3, [pc, #172]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd fe9d 	bl	800a53c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	2b00      	cmp	r3, #0
 800c816:	d02d      	beq.n	800c874 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	4413      	add	r3, r2
 800c820:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	429a      	cmp	r2, r3
 800c828:	d90e      	bls.n	800c848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c836:	4b19      	ldr	r3, [pc, #100]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3304      	adds	r3, #4
 800c83e:	4619      	mov	r1, r3
 800c840:	4610      	mov	r0, r2
 800c842:	f7fd fe42 	bl	800a4ca <vListInsert>
 800c846:	e015      	b.n	800c874 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c848:	2300      	movs	r3, #0
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	2300      	movs	r3, #0
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	2100      	movs	r1, #0
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fd68 	bl	800c328 <xTimerGenericCommand>
 800c858:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d109      	bne.n	800c874 <prvSwitchTimerLists+0x98>
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	603b      	str	r3, [r7, #0]
 800c872:	e7fe      	b.n	800c872 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c874:	4b09      	ldr	r3, [pc, #36]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1b2      	bne.n	800c7e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c87e:	4b07      	ldr	r3, [pc, #28]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c884:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <prvSwitchTimerLists+0xc4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a04      	ldr	r2, [pc, #16]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c88a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c88c:	4a04      	ldr	r2, [pc, #16]	; (800c8a0 <prvSwitchTimerLists+0xc4>)
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	6013      	str	r3, [r2, #0]
}
 800c892:	bf00      	nop
 800c894:	3718      	adds	r7, #24
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20005c10 	.word	0x20005c10
 800c8a0:	20005c14 	.word	0x20005c14

0800c8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8aa:	f7fd ff97 	bl	800a7dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ae:	4b15      	ldr	r3, [pc, #84]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d120      	bne.n	800c8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8b6:	4814      	ldr	r0, [pc, #80]	; (800c908 <prvCheckForValidListAndQueue+0x64>)
 800c8b8:	f7fd fdb6 	bl	800a428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8bc:	4813      	ldr	r0, [pc, #76]	; (800c90c <prvCheckForValidListAndQueue+0x68>)
 800c8be:	f7fd fdb3 	bl	800a428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <prvCheckForValidListAndQueue+0x6c>)
 800c8c4:	4a10      	ldr	r2, [pc, #64]	; (800c908 <prvCheckForValidListAndQueue+0x64>)
 800c8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8c8:	4b12      	ldr	r3, [pc, #72]	; (800c914 <prvCheckForValidListAndQueue+0x70>)
 800c8ca:	4a10      	ldr	r2, [pc, #64]	; (800c90c <prvCheckForValidListAndQueue+0x68>)
 800c8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4b11      	ldr	r3, [pc, #68]	; (800c918 <prvCheckForValidListAndQueue+0x74>)
 800c8d4:	4a11      	ldr	r2, [pc, #68]	; (800c91c <prvCheckForValidListAndQueue+0x78>)
 800c8d6:	2110      	movs	r1, #16
 800c8d8:	200a      	movs	r0, #10
 800c8da:	f7fe f901 	bl	800aae0 <xQueueGenericCreateStatic>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	4b08      	ldr	r3, [pc, #32]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d005      	beq.n	800c8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	490b      	ldr	r1, [pc, #44]	; (800c920 <prvCheckForValidListAndQueue+0x7c>)
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fd8e 	bl	800b414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f8:	f7fd ff9e 	bl	800a838 <vPortExitCritical>
}
 800c8fc:	bf00      	nop
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20005c18 	.word	0x20005c18
 800c908:	20005be8 	.word	0x20005be8
 800c90c:	20005bfc 	.word	0x20005bfc
 800c910:	20005c10 	.word	0x20005c10
 800c914:	20005c14 	.word	0x20005c14
 800c918:	20005cc4 	.word	0x20005cc4
 800c91c:	20005c24 	.word	0x20005c24
 800c920:	0800e688 	.word	0x0800e688

0800c924 <_ZN14WatchdogThread4initEv>:
#include <string.h>
#include "iwdg.h"

#include "usart.h"

void WatchdogThread::init() {
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]

}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <_ZN14WatchdogThread4loopEv>:

uint8_t i = 0;

void WatchdogThread::loop() {
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c944:	4618      	mov	r0, r3
 800c946:	f7f8 fd25 	bl	8005394 <HAL_IWDG_Refresh>
	#ifdef CORE_CM7
	i++;
 800c94a:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <_ZN14WatchdogThread4loopEv+0x3c>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	b2da      	uxtb	r2, r3
 800c952:	4b08      	ldr	r3, [pc, #32]	; (800c974 <_ZN14WatchdogThread4loopEv+0x3c>)
 800c954:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &i, 1, 1000);
 800c956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c95a:	2201      	movs	r2, #1
 800c95c:	4905      	ldr	r1, [pc, #20]	; (800c974 <_ZN14WatchdogThread4loopEv+0x3c>)
 800c95e:	4806      	ldr	r0, [pc, #24]	; (800c978 <_ZN14WatchdogThread4loopEv+0x40>)
 800c960:	f7fc f8dc 	bl	8008b1c <HAL_UART_Transmit>
#endif
	osDelay(100);
 800c964:	2064      	movs	r0, #100	; 0x64
 800c966:	f7fd facf 	bl	8009f08 <osDelay>
}
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20005d14 	.word	0x20005d14
 800c978:	20006700 	.word	0x20006700

0800c97c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority_t priority, uint32_t stackSize);
	~Thread() {};
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	4a04      	ldr	r2, [pc, #16]	; (800c998 <_ZN6ThreadD1Ev+0x1c>)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	0800e6e4 	.word	0x0800e6e4

0800c99c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4907      	ldr	r1, [pc, #28]	; (800c9c8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f86c 	bl	800ca88 <_ZN6ThreadC1EPKc>
 800c9b0:	4a06      	ldr	r2, [pc, #24]	; (800c9cc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	0800e690 	.word	0x0800e690
 800c9cc:	0800e6d4 	.word	0x0800e6d4

0800c9d0 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	4a05      	ldr	r2, [pc, #20]	; (800c9f0 <_ZN14WatchdogThreadD1Ev+0x20>)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff ffcb 	bl	800c97c <_ZN6ThreadD1Ev>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	0800e6d4 	.word	0x0800e6d4

0800c9f4 <__tcf_0>:
}
#endif

#ifdef CORE_CM7
void initCortexM7() {
	static WatchdogThread watchdog(&hiwdg1);
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	4801      	ldr	r0, [pc, #4]	; (800ca00 <__tcf_0+0xc>)
 800c9fa:	f7ff ffe9 	bl	800c9d0 <_ZN14WatchdogThreadD1Ev>
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20005d18 	.word	0x20005d18

0800ca04 <initCortexM7>:
void initCortexM7() {
 800ca04:	b580      	push	{r7, lr}
 800ca06:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg1);
 800ca08:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <initCortexM7+0x50>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	f3bf 8f5b 	dmb	ish
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bf0c      	ite	eq
 800ca1a:	2301      	moveq	r3, #1
 800ca1c:	2300      	movne	r3, #0
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d014      	beq.n	800ca4e <initCortexM7+0x4a>
 800ca24:	480b      	ldr	r0, [pc, #44]	; (800ca54 <initCortexM7+0x50>)
 800ca26:	f000 f877 	bl	800cb18 <__cxa_guard_acquire>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bf14      	ite	ne
 800ca30:	2301      	movne	r3, #1
 800ca32:	2300      	moveq	r3, #0
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d009      	beq.n	800ca4e <initCortexM7+0x4a>
 800ca3a:	4907      	ldr	r1, [pc, #28]	; (800ca58 <initCortexM7+0x54>)
 800ca3c:	4807      	ldr	r0, [pc, #28]	; (800ca5c <initCortexM7+0x58>)
 800ca3e:	f7ff ffad 	bl	800c99c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 800ca42:	4804      	ldr	r0, [pc, #16]	; (800ca54 <initCortexM7+0x50>)
 800ca44:	f000 f874 	bl	800cb30 <__cxa_guard_release>
 800ca48:	4805      	ldr	r0, [pc, #20]	; (800ca60 <initCortexM7+0x5c>)
 800ca4a:	f000 f88f 	bl	800cb6c <atexit>
}
 800ca4e:	bf00      	nop
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20005d48 	.word	0x20005d48
 800ca58:	20005eec 	.word	0x20005eec
 800ca5c:	20005d18 	.word	0x20005d18
 800ca60:	0800c9f5 	.word	0x0800c9f5

0800ca64 <_Z10__task_runPv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(void* arg) {
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	60fb      	str	r3, [r7, #12]

	thread->init();
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	4798      	blx	r3

	while(true) {
		thread->loop();
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	4798      	blx	r3
 800ca86:	e7f8      	b.n	800ca7a <_Z10__task_runPv+0x16>

0800ca88 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
 800ca92:	2218      	movs	r2, #24
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f805 	bl	800caa6 <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	607a      	str	r2, [r7, #4]
 800cab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	68b9      	ldr	r1, [r7, #8]
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f000 f806 	bl	800cacc <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
 800cada:	4a0d      	ldr	r2, [pc, #52]	; (800cb10 <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	601a      	str	r2, [r3, #0]
	attributes.name = name;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	605a      	str	r2, [r3, #4]
	attributes.priority = priority;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	61da      	str	r2, [r3, #28]
	attributes.stack_size = stackSize;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	619a      	str	r2, [r3, #24]

	this->handle = osThreadNew(__task_run, this, &attributes);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3304      	adds	r3, #4
 800caf6:	461a      	mov	r2, r3
 800caf8:	68f9      	ldr	r1, [r7, #12]
 800cafa:	4806      	ldr	r0, [pc, #24]	; (800cb14 <_ZN6ThreadC1EPKc12osPriority_tm+0x48>)
 800cafc:	f7fd f95e 	bl	8009dbc <osThreadNew>
 800cb00:	4602      	mov	r2, r0
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	0800e6e4 	.word	0x0800e6e4
 800cb14:	0800ca65 	.word	0x0800ca65

0800cb18 <__cxa_guard_acquire>:
 800cb18:	6803      	ldr	r3, [r0, #0]
 800cb1a:	07db      	lsls	r3, r3, #31
 800cb1c:	d406      	bmi.n	800cb2c <__cxa_guard_acquire+0x14>
 800cb1e:	7843      	ldrb	r3, [r0, #1]
 800cb20:	b103      	cbz	r3, 800cb24 <__cxa_guard_acquire+0xc>
 800cb22:	deff      	udf	#255	; 0xff
 800cb24:	2301      	movs	r3, #1
 800cb26:	7043      	strb	r3, [r0, #1]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	4770      	bx	lr
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	4770      	bx	lr

0800cb30 <__cxa_guard_release>:
 800cb30:	2301      	movs	r3, #1
 800cb32:	6003      	str	r3, [r0, #0]
 800cb34:	4770      	bx	lr

0800cb36 <__cxa_pure_virtual>:
 800cb36:	b508      	push	{r3, lr}
 800cb38:	f000 f80c 	bl	800cb54 <_ZSt9terminatev>

0800cb3c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cb3c:	b508      	push	{r3, lr}
 800cb3e:	4780      	blx	r0
 800cb40:	f000 f80d 	bl	800cb5e <abort>

0800cb44 <_ZSt13get_terminatev>:
 800cb44:	4b02      	ldr	r3, [pc, #8]	; (800cb50 <_ZSt13get_terminatev+0xc>)
 800cb46:	6818      	ldr	r0, [r3, #0]
 800cb48:	f3bf 8f5b 	dmb	ish
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	20000014 	.word	0x20000014

0800cb54 <_ZSt9terminatev>:
 800cb54:	b508      	push	{r3, lr}
 800cb56:	f7ff fff5 	bl	800cb44 <_ZSt13get_terminatev>
 800cb5a:	f7ff ffef 	bl	800cb3c <_ZN10__cxxabiv111__terminateEPFvvE>

0800cb5e <abort>:
 800cb5e:	b508      	push	{r3, lr}
 800cb60:	2006      	movs	r0, #6
 800cb62:	f000 fba3 	bl	800d2ac <raise>
 800cb66:	2001      	movs	r0, #1
 800cb68:	f7f5 f984 	bl	8001e74 <_exit>

0800cb6c <atexit>:
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	4601      	mov	r1, r0
 800cb70:	461a      	mov	r2, r3
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 bbc4 	b.w	800d300 <__register_exitproc>

0800cb78 <__libc_init_array>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	4e0d      	ldr	r6, [pc, #52]	; (800cbb0 <__libc_init_array+0x38>)
 800cb7c:	4c0d      	ldr	r4, [pc, #52]	; (800cbb4 <__libc_init_array+0x3c>)
 800cb7e:	1ba4      	subs	r4, r4, r6
 800cb80:	10a4      	asrs	r4, r4, #2
 800cb82:	2500      	movs	r5, #0
 800cb84:	42a5      	cmp	r5, r4
 800cb86:	d109      	bne.n	800cb9c <__libc_init_array+0x24>
 800cb88:	4e0b      	ldr	r6, [pc, #44]	; (800cbb8 <__libc_init_array+0x40>)
 800cb8a:	4c0c      	ldr	r4, [pc, #48]	; (800cbbc <__libc_init_array+0x44>)
 800cb8c:	f001 fd60 	bl	800e650 <_init>
 800cb90:	1ba4      	subs	r4, r4, r6
 800cb92:	10a4      	asrs	r4, r4, #2
 800cb94:	2500      	movs	r5, #0
 800cb96:	42a5      	cmp	r5, r4
 800cb98:	d105      	bne.n	800cba6 <__libc_init_array+0x2e>
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cba0:	4798      	blx	r3
 800cba2:	3501      	adds	r5, #1
 800cba4:	e7ee      	b.n	800cb84 <__libc_init_array+0xc>
 800cba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbaa:	4798      	blx	r3
 800cbac:	3501      	adds	r5, #1
 800cbae:	e7f2      	b.n	800cb96 <__libc_init_array+0x1e>
 800cbb0:	0800e97c 	.word	0x0800e97c
 800cbb4:	0800e97c 	.word	0x0800e97c
 800cbb8:	0800e97c 	.word	0x0800e97c
 800cbbc:	0800e980 	.word	0x0800e980

0800cbc0 <__ascii_mbtowc>:
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	b901      	cbnz	r1, 800cbc6 <__ascii_mbtowc+0x6>
 800cbc4:	a901      	add	r1, sp, #4
 800cbc6:	b142      	cbz	r2, 800cbda <__ascii_mbtowc+0x1a>
 800cbc8:	b14b      	cbz	r3, 800cbde <__ascii_mbtowc+0x1e>
 800cbca:	7813      	ldrb	r3, [r2, #0]
 800cbcc:	600b      	str	r3, [r1, #0]
 800cbce:	7812      	ldrb	r2, [r2, #0]
 800cbd0:	1c10      	adds	r0, r2, #0
 800cbd2:	bf18      	it	ne
 800cbd4:	2001      	movne	r0, #1
 800cbd6:	b002      	add	sp, #8
 800cbd8:	4770      	bx	lr
 800cbda:	4610      	mov	r0, r2
 800cbdc:	e7fb      	b.n	800cbd6 <__ascii_mbtowc+0x16>
 800cbde:	f06f 0001 	mvn.w	r0, #1
 800cbe2:	e7f8      	b.n	800cbd6 <__ascii_mbtowc+0x16>

0800cbe4 <memcpy>:
 800cbe4:	b510      	push	{r4, lr}
 800cbe6:	1e43      	subs	r3, r0, #1
 800cbe8:	440a      	add	r2, r1
 800cbea:	4291      	cmp	r1, r2
 800cbec:	d100      	bne.n	800cbf0 <memcpy+0xc>
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbf8:	e7f7      	b.n	800cbea <memcpy+0x6>

0800cbfa <memset>:
 800cbfa:	4402      	add	r2, r0
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d100      	bne.n	800cc04 <memset+0xa>
 800cc02:	4770      	bx	lr
 800cc04:	f803 1b01 	strb.w	r1, [r3], #1
 800cc08:	e7f9      	b.n	800cbfe <memset+0x4>

0800cc0a <__cvt>:
 800cc0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0c:	ed2d 8b02 	vpush	{d8}
 800cc10:	eeb0 8b40 	vmov.f64	d8, d0
 800cc14:	b085      	sub	sp, #20
 800cc16:	4617      	mov	r7, r2
 800cc18:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cc1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cc1c:	ee18 2a90 	vmov	r2, s17
 800cc20:	f025 0520 	bic.w	r5, r5, #32
 800cc24:	2a00      	cmp	r2, #0
 800cc26:	bfb6      	itet	lt
 800cc28:	222d      	movlt	r2, #45	; 0x2d
 800cc2a:	2200      	movge	r2, #0
 800cc2c:	eeb1 8b40 	vneglt.f64	d8, d0
 800cc30:	2d46      	cmp	r5, #70	; 0x46
 800cc32:	460c      	mov	r4, r1
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	d004      	beq.n	800cc42 <__cvt+0x38>
 800cc38:	2d45      	cmp	r5, #69	; 0x45
 800cc3a:	d100      	bne.n	800cc3e <__cvt+0x34>
 800cc3c:	3401      	adds	r4, #1
 800cc3e:	2102      	movs	r1, #2
 800cc40:	e000      	b.n	800cc44 <__cvt+0x3a>
 800cc42:	2103      	movs	r1, #3
 800cc44:	ab03      	add	r3, sp, #12
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	ab02      	add	r3, sp, #8
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	4622      	mov	r2, r4
 800cc4e:	4633      	mov	r3, r6
 800cc50:	eeb0 0b48 	vmov.f64	d0, d8
 800cc54:	f000 fc44 	bl	800d4e0 <_dtoa_r>
 800cc58:	2d47      	cmp	r5, #71	; 0x47
 800cc5a:	d101      	bne.n	800cc60 <__cvt+0x56>
 800cc5c:	07fb      	lsls	r3, r7, #31
 800cc5e:	d51e      	bpl.n	800cc9e <__cvt+0x94>
 800cc60:	2d46      	cmp	r5, #70	; 0x46
 800cc62:	eb00 0304 	add.w	r3, r0, r4
 800cc66:	d10c      	bne.n	800cc82 <__cvt+0x78>
 800cc68:	7802      	ldrb	r2, [r0, #0]
 800cc6a:	2a30      	cmp	r2, #48	; 0x30
 800cc6c:	d107      	bne.n	800cc7e <__cvt+0x74>
 800cc6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc76:	bf1c      	itt	ne
 800cc78:	f1c4 0401 	rsbne	r4, r4, #1
 800cc7c:	6034      	strne	r4, [r6, #0]
 800cc7e:	6832      	ldr	r2, [r6, #0]
 800cc80:	4413      	add	r3, r2
 800cc82:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8a:	d007      	beq.n	800cc9c <__cvt+0x92>
 800cc8c:	2130      	movs	r1, #48	; 0x30
 800cc8e:	9a03      	ldr	r2, [sp, #12]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d204      	bcs.n	800cc9e <__cvt+0x94>
 800cc94:	1c54      	adds	r4, r2, #1
 800cc96:	9403      	str	r4, [sp, #12]
 800cc98:	7011      	strb	r1, [r2, #0]
 800cc9a:	e7f8      	b.n	800cc8e <__cvt+0x84>
 800cc9c:	9303      	str	r3, [sp, #12]
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cca2:	1a1b      	subs	r3, r3, r0
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	b005      	add	sp, #20
 800cca8:	ecbd 8b02 	vpop	{d8}
 800ccac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccae <__exponent>:
 800ccae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	bfba      	itte	lt
 800ccb6:	4249      	neglt	r1, r1
 800ccb8:	232d      	movlt	r3, #45	; 0x2d
 800ccba:	232b      	movge	r3, #43	; 0x2b
 800ccbc:	2909      	cmp	r1, #9
 800ccbe:	f804 2b02 	strb.w	r2, [r4], #2
 800ccc2:	7043      	strb	r3, [r0, #1]
 800ccc4:	dd20      	ble.n	800cd08 <__exponent+0x5a>
 800ccc6:	f10d 0307 	add.w	r3, sp, #7
 800ccca:	461f      	mov	r7, r3
 800cccc:	260a      	movs	r6, #10
 800ccce:	fb91 f5f6 	sdiv	r5, r1, r6
 800ccd2:	fb06 1115 	mls	r1, r6, r5, r1
 800ccd6:	3130      	adds	r1, #48	; 0x30
 800ccd8:	2d09      	cmp	r5, #9
 800ccda:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ccde:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800cce2:	4629      	mov	r1, r5
 800cce4:	dc09      	bgt.n	800ccfa <__exponent+0x4c>
 800cce6:	3130      	adds	r1, #48	; 0x30
 800cce8:	3b02      	subs	r3, #2
 800ccea:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ccee:	42bb      	cmp	r3, r7
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	d304      	bcc.n	800ccfe <__exponent+0x50>
 800ccf4:	1a10      	subs	r0, r2, r0
 800ccf6:	b003      	add	sp, #12
 800ccf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	e7e7      	b.n	800ccce <__exponent+0x20>
 800ccfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd02:	f804 2b01 	strb.w	r2, [r4], #1
 800cd06:	e7f2      	b.n	800ccee <__exponent+0x40>
 800cd08:	2330      	movs	r3, #48	; 0x30
 800cd0a:	4419      	add	r1, r3
 800cd0c:	7083      	strb	r3, [r0, #2]
 800cd0e:	1d02      	adds	r2, r0, #4
 800cd10:	70c1      	strb	r1, [r0, #3]
 800cd12:	e7ef      	b.n	800ccf4 <__exponent+0x46>
 800cd14:	0000      	movs	r0, r0
	...

0800cd18 <_printf_float>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	b08d      	sub	sp, #52	; 0x34
 800cd1e:	460c      	mov	r4, r1
 800cd20:	4616      	mov	r6, r2
 800cd22:	461f      	mov	r7, r3
 800cd24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cd28:	4605      	mov	r5, r0
 800cd2a:	f001 f925 	bl	800df78 <_localeconv_r>
 800cd2e:	f8d0 b000 	ldr.w	fp, [r0]
 800cd32:	4658      	mov	r0, fp
 800cd34:	f7f3 fad4 	bl	80002e0 <strlen>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd3c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd40:	9005      	str	r0, [sp, #20]
 800cd42:	3307      	adds	r3, #7
 800cd44:	f023 0307 	bic.w	r3, r3, #7
 800cd48:	f103 0108 	add.w	r1, r3, #8
 800cd4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cd50:	6822      	ldr	r2, [r4, #0]
 800cd52:	f8c8 1000 	str.w	r1, [r8]
 800cd56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd5a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cd5e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800cfe8 <_printf_float+0x2d0>
 800cd62:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cd66:	eeb0 6bc0 	vabs.f64	d6, d0
 800cd6a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd72:	dd24      	ble.n	800cdbe <_printf_float+0xa6>
 800cd74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7c:	d502      	bpl.n	800cd84 <_printf_float+0x6c>
 800cd7e:	232d      	movs	r3, #45	; 0x2d
 800cd80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd84:	499a      	ldr	r1, [pc, #616]	; (800cff0 <_printf_float+0x2d8>)
 800cd86:	4b9b      	ldr	r3, [pc, #620]	; (800cff4 <_printf_float+0x2dc>)
 800cd88:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cd8c:	bf8c      	ite	hi
 800cd8e:	4688      	movhi	r8, r1
 800cd90:	4698      	movls	r8, r3
 800cd92:	f022 0204 	bic.w	r2, r2, #4
 800cd96:	2303      	movs	r3, #3
 800cd98:	6123      	str	r3, [r4, #16]
 800cd9a:	6022      	str	r2, [r4, #0]
 800cd9c:	f04f 0a00 	mov.w	sl, #0
 800cda0:	9700      	str	r7, [sp, #0]
 800cda2:	4633      	mov	r3, r6
 800cda4:	aa0b      	add	r2, sp, #44	; 0x2c
 800cda6:	4621      	mov	r1, r4
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f000 f9e1 	bl	800d170 <_printf_common>
 800cdae:	3001      	adds	r0, #1
 800cdb0:	f040 8089 	bne.w	800cec6 <_printf_float+0x1ae>
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdb8:	b00d      	add	sp, #52	; 0x34
 800cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	eeb4 0b40 	vcmp.f64	d0, d0
 800cdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc6:	d702      	bvc.n	800cdce <_printf_float+0xb6>
 800cdc8:	498b      	ldr	r1, [pc, #556]	; (800cff8 <_printf_float+0x2e0>)
 800cdca:	4b8c      	ldr	r3, [pc, #560]	; (800cffc <_printf_float+0x2e4>)
 800cdcc:	e7dc      	b.n	800cd88 <_printf_float+0x70>
 800cdce:	6861      	ldr	r1, [r4, #4]
 800cdd0:	1c4b      	adds	r3, r1, #1
 800cdd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cdd6:	ab0a      	add	r3, sp, #40	; 0x28
 800cdd8:	a809      	add	r0, sp, #36	; 0x24
 800cdda:	d13b      	bne.n	800ce54 <_printf_float+0x13c>
 800cddc:	2106      	movs	r1, #6
 800cdde:	6061      	str	r1, [r4, #4]
 800cde0:	f04f 0c00 	mov.w	ip, #0
 800cde4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800cde8:	e9cd 0900 	strd	r0, r9, [sp]
 800cdec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cdf0:	6022      	str	r2, [r4, #0]
 800cdf2:	6861      	ldr	r1, [r4, #4]
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f7ff ff08 	bl	800cc0a <__cvt>
 800cdfa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800cdfe:	2b47      	cmp	r3, #71	; 0x47
 800ce00:	4680      	mov	r8, r0
 800ce02:	d109      	bne.n	800ce18 <_printf_float+0x100>
 800ce04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce06:	1cd8      	adds	r0, r3, #3
 800ce08:	db02      	blt.n	800ce10 <_printf_float+0xf8>
 800ce0a:	6862      	ldr	r2, [r4, #4]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	dd47      	ble.n	800cea0 <_printf_float+0x188>
 800ce10:	f1a9 0902 	sub.w	r9, r9, #2
 800ce14:	fa5f f989 	uxtb.w	r9, r9
 800ce18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ce1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce1e:	d824      	bhi.n	800ce6a <_printf_float+0x152>
 800ce20:	3901      	subs	r1, #1
 800ce22:	464a      	mov	r2, r9
 800ce24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce28:	9109      	str	r1, [sp, #36]	; 0x24
 800ce2a:	f7ff ff40 	bl	800ccae <__exponent>
 800ce2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce30:	1813      	adds	r3, r2, r0
 800ce32:	2a01      	cmp	r2, #1
 800ce34:	4682      	mov	sl, r0
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	dc02      	bgt.n	800ce40 <_printf_float+0x128>
 800ce3a:	6822      	ldr	r2, [r4, #0]
 800ce3c:	07d1      	lsls	r1, r2, #31
 800ce3e:	d501      	bpl.n	800ce44 <_printf_float+0x12c>
 800ce40:	3301      	adds	r3, #1
 800ce42:	6123      	str	r3, [r4, #16]
 800ce44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0a9      	beq.n	800cda0 <_printf_float+0x88>
 800ce4c:	232d      	movs	r3, #45	; 0x2d
 800ce4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce52:	e7a5      	b.n	800cda0 <_printf_float+0x88>
 800ce54:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ce58:	f000 8178 	beq.w	800d14c <_printf_float+0x434>
 800ce5c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ce60:	d1be      	bne.n	800cde0 <_printf_float+0xc8>
 800ce62:	2900      	cmp	r1, #0
 800ce64:	d1bc      	bne.n	800cde0 <_printf_float+0xc8>
 800ce66:	2101      	movs	r1, #1
 800ce68:	e7b9      	b.n	800cdde <_printf_float+0xc6>
 800ce6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ce6e:	d119      	bne.n	800cea4 <_printf_float+0x18c>
 800ce70:	2900      	cmp	r1, #0
 800ce72:	6863      	ldr	r3, [r4, #4]
 800ce74:	dd0c      	ble.n	800ce90 <_printf_float+0x178>
 800ce76:	6121      	str	r1, [r4, #16]
 800ce78:	b913      	cbnz	r3, 800ce80 <_printf_float+0x168>
 800ce7a:	6822      	ldr	r2, [r4, #0]
 800ce7c:	07d2      	lsls	r2, r2, #31
 800ce7e:	d502      	bpl.n	800ce86 <_printf_float+0x16e>
 800ce80:	3301      	adds	r3, #1
 800ce82:	440b      	add	r3, r1
 800ce84:	6123      	str	r3, [r4, #16]
 800ce86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce88:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce8a:	f04f 0a00 	mov.w	sl, #0
 800ce8e:	e7d9      	b.n	800ce44 <_printf_float+0x12c>
 800ce90:	b913      	cbnz	r3, 800ce98 <_printf_float+0x180>
 800ce92:	6822      	ldr	r2, [r4, #0]
 800ce94:	07d0      	lsls	r0, r2, #31
 800ce96:	d501      	bpl.n	800ce9c <_printf_float+0x184>
 800ce98:	3302      	adds	r3, #2
 800ce9a:	e7f3      	b.n	800ce84 <_printf_float+0x16c>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e7f1      	b.n	800ce84 <_printf_float+0x16c>
 800cea0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cea4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	db05      	blt.n	800ceb8 <_printf_float+0x1a0>
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	07d1      	lsls	r1, r2, #31
 800ceb2:	d5e8      	bpl.n	800ce86 <_printf_float+0x16e>
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	e7e5      	b.n	800ce84 <_printf_float+0x16c>
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	bfd4      	ite	le
 800cebc:	f1c3 0302 	rsble	r3, r3, #2
 800cec0:	2301      	movgt	r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	e7de      	b.n	800ce84 <_printf_float+0x16c>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	055a      	lsls	r2, r3, #21
 800ceca:	d407      	bmi.n	800cedc <_printf_float+0x1c4>
 800cecc:	6923      	ldr	r3, [r4, #16]
 800cece:	4642      	mov	r2, r8
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	3001      	adds	r0, #1
 800ced8:	d12a      	bne.n	800cf30 <_printf_float+0x218>
 800ceda:	e76b      	b.n	800cdb4 <_printf_float+0x9c>
 800cedc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cee0:	f240 80de 	bls.w	800d0a0 <_printf_float+0x388>
 800cee4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cee8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ceec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef0:	d133      	bne.n	800cf5a <_printf_float+0x242>
 800cef2:	2301      	movs	r3, #1
 800cef4:	4a42      	ldr	r2, [pc, #264]	; (800d000 <_printf_float+0x2e8>)
 800cef6:	4631      	mov	r1, r6
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b8      	blx	r7
 800cefc:	3001      	adds	r0, #1
 800cefe:	f43f af59 	beq.w	800cdb4 <_printf_float+0x9c>
 800cf02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf06:	429a      	cmp	r2, r3
 800cf08:	db02      	blt.n	800cf10 <_printf_float+0x1f8>
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	07d8      	lsls	r0, r3, #31
 800cf0e:	d50f      	bpl.n	800cf30 <_printf_float+0x218>
 800cf10:	9b05      	ldr	r3, [sp, #20]
 800cf12:	465a      	mov	r2, fp
 800cf14:	4631      	mov	r1, r6
 800cf16:	4628      	mov	r0, r5
 800cf18:	47b8      	blx	r7
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	f43f af4a 	beq.w	800cdb4 <_printf_float+0x9c>
 800cf20:	f04f 0800 	mov.w	r8, #0
 800cf24:	f104 091a 	add.w	r9, r4, #26
 800cf28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	4543      	cmp	r3, r8
 800cf2e:	dc09      	bgt.n	800cf44 <_printf_float+0x22c>
 800cf30:	6823      	ldr	r3, [r4, #0]
 800cf32:	079b      	lsls	r3, r3, #30
 800cf34:	f100 8105 	bmi.w	800d142 <_printf_float+0x42a>
 800cf38:	68e0      	ldr	r0, [r4, #12]
 800cf3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf3c:	4298      	cmp	r0, r3
 800cf3e:	bfb8      	it	lt
 800cf40:	4618      	movlt	r0, r3
 800cf42:	e739      	b.n	800cdb8 <_printf_float+0xa0>
 800cf44:	2301      	movs	r3, #1
 800cf46:	464a      	mov	r2, r9
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	47b8      	blx	r7
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f43f af30 	beq.w	800cdb4 <_printf_float+0x9c>
 800cf54:	f108 0801 	add.w	r8, r8, #1
 800cf58:	e7e6      	b.n	800cf28 <_printf_float+0x210>
 800cf5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dc2b      	bgt.n	800cfb8 <_printf_float+0x2a0>
 800cf60:	2301      	movs	r3, #1
 800cf62:	4a27      	ldr	r2, [pc, #156]	; (800d000 <_printf_float+0x2e8>)
 800cf64:	4631      	mov	r1, r6
 800cf66:	4628      	mov	r0, r5
 800cf68:	47b8      	blx	r7
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	f43f af22 	beq.w	800cdb4 <_printf_float+0x9c>
 800cf70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf72:	b923      	cbnz	r3, 800cf7e <_printf_float+0x266>
 800cf74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf76:	b913      	cbnz	r3, 800cf7e <_printf_float+0x266>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	07d9      	lsls	r1, r3, #31
 800cf7c:	d5d8      	bpl.n	800cf30 <_printf_float+0x218>
 800cf7e:	9b05      	ldr	r3, [sp, #20]
 800cf80:	465a      	mov	r2, fp
 800cf82:	4631      	mov	r1, r6
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f af13 	beq.w	800cdb4 <_printf_float+0x9c>
 800cf8e:	f04f 0900 	mov.w	r9, #0
 800cf92:	f104 0a1a 	add.w	sl, r4, #26
 800cf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf98:	425b      	negs	r3, r3
 800cf9a:	454b      	cmp	r3, r9
 800cf9c:	dc01      	bgt.n	800cfa2 <_printf_float+0x28a>
 800cf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa0:	e795      	b.n	800cece <_printf_float+0x1b6>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4652      	mov	r2, sl
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	47b8      	blx	r7
 800cfac:	3001      	adds	r0, #1
 800cfae:	f43f af01 	beq.w	800cdb4 <_printf_float+0x9c>
 800cfb2:	f109 0901 	add.w	r9, r9, #1
 800cfb6:	e7ee      	b.n	800cf96 <_printf_float+0x27e>
 800cfb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	bfa8      	it	ge
 800cfc0:	461a      	movge	r2, r3
 800cfc2:	2a00      	cmp	r2, #0
 800cfc4:	4691      	mov	r9, r2
 800cfc6:	dd07      	ble.n	800cfd8 <_printf_float+0x2c0>
 800cfc8:	4613      	mov	r3, r2
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4642      	mov	r2, r8
 800cfce:	4628      	mov	r0, r5
 800cfd0:	47b8      	blx	r7
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	f43f aeee 	beq.w	800cdb4 <_printf_float+0x9c>
 800cfd8:	f104 031a 	add.w	r3, r4, #26
 800cfdc:	f04f 0a00 	mov.w	sl, #0
 800cfe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfe4:	9307      	str	r3, [sp, #28]
 800cfe6:	e017      	b.n	800d018 <_printf_float+0x300>
 800cfe8:	ffffffff 	.word	0xffffffff
 800cfec:	7fefffff 	.word	0x7fefffff
 800cff0:	0800e6fa 	.word	0x0800e6fa
 800cff4:	0800e6f6 	.word	0x0800e6f6
 800cff8:	0800e702 	.word	0x0800e702
 800cffc:	0800e6fe 	.word	0x0800e6fe
 800d000:	0800e706 	.word	0x0800e706
 800d004:	2301      	movs	r3, #1
 800d006:	9a07      	ldr	r2, [sp, #28]
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	f43f aed0 	beq.w	800cdb4 <_printf_float+0x9c>
 800d014:	f10a 0a01 	add.w	sl, sl, #1
 800d018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d01a:	9306      	str	r3, [sp, #24]
 800d01c:	eba3 0309 	sub.w	r3, r3, r9
 800d020:	4553      	cmp	r3, sl
 800d022:	dcef      	bgt.n	800d004 <_printf_float+0x2ec>
 800d024:	9b06      	ldr	r3, [sp, #24]
 800d026:	4498      	add	r8, r3
 800d028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d02c:	429a      	cmp	r2, r3
 800d02e:	db15      	blt.n	800d05c <_printf_float+0x344>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	07da      	lsls	r2, r3, #31
 800d034:	d412      	bmi.n	800d05c <_printf_float+0x344>
 800d036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d038:	9a06      	ldr	r2, [sp, #24]
 800d03a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d03c:	1a9a      	subs	r2, r3, r2
 800d03e:	eba3 0a01 	sub.w	sl, r3, r1
 800d042:	4592      	cmp	sl, r2
 800d044:	bfa8      	it	ge
 800d046:	4692      	movge	sl, r2
 800d048:	f1ba 0f00 	cmp.w	sl, #0
 800d04c:	dc0e      	bgt.n	800d06c <_printf_float+0x354>
 800d04e:	f04f 0800 	mov.w	r8, #0
 800d052:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d056:	f104 091a 	add.w	r9, r4, #26
 800d05a:	e019      	b.n	800d090 <_printf_float+0x378>
 800d05c:	9b05      	ldr	r3, [sp, #20]
 800d05e:	465a      	mov	r2, fp
 800d060:	4631      	mov	r1, r6
 800d062:	4628      	mov	r0, r5
 800d064:	47b8      	blx	r7
 800d066:	3001      	adds	r0, #1
 800d068:	d1e5      	bne.n	800d036 <_printf_float+0x31e>
 800d06a:	e6a3      	b.n	800cdb4 <_printf_float+0x9c>
 800d06c:	4653      	mov	r3, sl
 800d06e:	4642      	mov	r2, r8
 800d070:	4631      	mov	r1, r6
 800d072:	4628      	mov	r0, r5
 800d074:	47b8      	blx	r7
 800d076:	3001      	adds	r0, #1
 800d078:	d1e9      	bne.n	800d04e <_printf_float+0x336>
 800d07a:	e69b      	b.n	800cdb4 <_printf_float+0x9c>
 800d07c:	2301      	movs	r3, #1
 800d07e:	464a      	mov	r2, r9
 800d080:	4631      	mov	r1, r6
 800d082:	4628      	mov	r0, r5
 800d084:	47b8      	blx	r7
 800d086:	3001      	adds	r0, #1
 800d088:	f43f ae94 	beq.w	800cdb4 <_printf_float+0x9c>
 800d08c:	f108 0801 	add.w	r8, r8, #1
 800d090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d094:	1a9b      	subs	r3, r3, r2
 800d096:	eba3 030a 	sub.w	r3, r3, sl
 800d09a:	4543      	cmp	r3, r8
 800d09c:	dcee      	bgt.n	800d07c <_printf_float+0x364>
 800d09e:	e747      	b.n	800cf30 <_printf_float+0x218>
 800d0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0a2:	2a01      	cmp	r2, #1
 800d0a4:	dc01      	bgt.n	800d0aa <_printf_float+0x392>
 800d0a6:	07db      	lsls	r3, r3, #31
 800d0a8:	d539      	bpl.n	800d11e <_printf_float+0x406>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	4642      	mov	r2, r8
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	47b8      	blx	r7
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	f43f ae7d 	beq.w	800cdb4 <_printf_float+0x9c>
 800d0ba:	9b05      	ldr	r3, [sp, #20]
 800d0bc:	465a      	mov	r2, fp
 800d0be:	4631      	mov	r1, r6
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	47b8      	blx	r7
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	f108 0801 	add.w	r8, r8, #1
 800d0ca:	f43f ae73 	beq.w	800cdb4 <_printf_float+0x9c>
 800d0ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d0e0:	d018      	beq.n	800d114 <_printf_float+0x3fc>
 800d0e2:	4642      	mov	r2, r8
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	47b8      	blx	r7
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	d10e      	bne.n	800d10c <_printf_float+0x3f4>
 800d0ee:	e661      	b.n	800cdb4 <_printf_float+0x9c>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	464a      	mov	r2, r9
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	47b8      	blx	r7
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	f43f ae5a 	beq.w	800cdb4 <_printf_float+0x9c>
 800d100:	f108 0801 	add.w	r8, r8, #1
 800d104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d106:	3b01      	subs	r3, #1
 800d108:	4543      	cmp	r3, r8
 800d10a:	dcf1      	bgt.n	800d0f0 <_printf_float+0x3d8>
 800d10c:	4653      	mov	r3, sl
 800d10e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d112:	e6dd      	b.n	800ced0 <_printf_float+0x1b8>
 800d114:	f04f 0800 	mov.w	r8, #0
 800d118:	f104 091a 	add.w	r9, r4, #26
 800d11c:	e7f2      	b.n	800d104 <_printf_float+0x3ec>
 800d11e:	2301      	movs	r3, #1
 800d120:	e7df      	b.n	800d0e2 <_printf_float+0x3ca>
 800d122:	2301      	movs	r3, #1
 800d124:	464a      	mov	r2, r9
 800d126:	4631      	mov	r1, r6
 800d128:	4628      	mov	r0, r5
 800d12a:	47b8      	blx	r7
 800d12c:	3001      	adds	r0, #1
 800d12e:	f43f ae41 	beq.w	800cdb4 <_printf_float+0x9c>
 800d132:	f108 0801 	add.w	r8, r8, #1
 800d136:	68e3      	ldr	r3, [r4, #12]
 800d138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d13a:	1a9b      	subs	r3, r3, r2
 800d13c:	4543      	cmp	r3, r8
 800d13e:	dcf0      	bgt.n	800d122 <_printf_float+0x40a>
 800d140:	e6fa      	b.n	800cf38 <_printf_float+0x220>
 800d142:	f04f 0800 	mov.w	r8, #0
 800d146:	f104 0919 	add.w	r9, r4, #25
 800d14a:	e7f4      	b.n	800d136 <_printf_float+0x41e>
 800d14c:	2900      	cmp	r1, #0
 800d14e:	f43f ae8a 	beq.w	800ce66 <_printf_float+0x14e>
 800d152:	f04f 0c00 	mov.w	ip, #0
 800d156:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d15a:	e9cd 0900 	strd	r0, r9, [sp]
 800d15e:	6022      	str	r2, [r4, #0]
 800d160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d164:	4628      	mov	r0, r5
 800d166:	f7ff fd50 	bl	800cc0a <__cvt>
 800d16a:	4680      	mov	r8, r0
 800d16c:	e64a      	b.n	800ce04 <_printf_float+0xec>
 800d16e:	bf00      	nop

0800d170 <_printf_common>:
 800d170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d174:	4691      	mov	r9, r2
 800d176:	461f      	mov	r7, r3
 800d178:	688a      	ldr	r2, [r1, #8]
 800d17a:	690b      	ldr	r3, [r1, #16]
 800d17c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d180:	4293      	cmp	r3, r2
 800d182:	bfb8      	it	lt
 800d184:	4613      	movlt	r3, r2
 800d186:	f8c9 3000 	str.w	r3, [r9]
 800d18a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d18e:	4606      	mov	r6, r0
 800d190:	460c      	mov	r4, r1
 800d192:	b112      	cbz	r2, 800d19a <_printf_common+0x2a>
 800d194:	3301      	adds	r3, #1
 800d196:	f8c9 3000 	str.w	r3, [r9]
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	0699      	lsls	r1, r3, #26
 800d19e:	bf42      	ittt	mi
 800d1a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d1a4:	3302      	addmi	r3, #2
 800d1a6:	f8c9 3000 	strmi.w	r3, [r9]
 800d1aa:	6825      	ldr	r5, [r4, #0]
 800d1ac:	f015 0506 	ands.w	r5, r5, #6
 800d1b0:	d107      	bne.n	800d1c2 <_printf_common+0x52>
 800d1b2:	f104 0a19 	add.w	sl, r4, #25
 800d1b6:	68e3      	ldr	r3, [r4, #12]
 800d1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800d1bc:	1a9b      	subs	r3, r3, r2
 800d1be:	42ab      	cmp	r3, r5
 800d1c0:	dc28      	bgt.n	800d214 <_printf_common+0xa4>
 800d1c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1c6:	6822      	ldr	r2, [r4, #0]
 800d1c8:	3300      	adds	r3, #0
 800d1ca:	bf18      	it	ne
 800d1cc:	2301      	movne	r3, #1
 800d1ce:	0692      	lsls	r2, r2, #26
 800d1d0:	d42d      	bmi.n	800d22e <_printf_common+0xbe>
 800d1d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	4630      	mov	r0, r6
 800d1da:	47c0      	blx	r8
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d020      	beq.n	800d222 <_printf_common+0xb2>
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	68e5      	ldr	r5, [r4, #12]
 800d1e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d1e8:	f003 0306 	and.w	r3, r3, #6
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	bf08      	it	eq
 800d1f0:	1aad      	subeq	r5, r5, r2
 800d1f2:	68a3      	ldr	r3, [r4, #8]
 800d1f4:	6922      	ldr	r2, [r4, #16]
 800d1f6:	bf0c      	ite	eq
 800d1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1fc:	2500      	movne	r5, #0
 800d1fe:	4293      	cmp	r3, r2
 800d200:	bfc4      	itt	gt
 800d202:	1a9b      	subgt	r3, r3, r2
 800d204:	18ed      	addgt	r5, r5, r3
 800d206:	f04f 0900 	mov.w	r9, #0
 800d20a:	341a      	adds	r4, #26
 800d20c:	454d      	cmp	r5, r9
 800d20e:	d11a      	bne.n	800d246 <_printf_common+0xd6>
 800d210:	2000      	movs	r0, #0
 800d212:	e008      	b.n	800d226 <_printf_common+0xb6>
 800d214:	2301      	movs	r3, #1
 800d216:	4652      	mov	r2, sl
 800d218:	4639      	mov	r1, r7
 800d21a:	4630      	mov	r0, r6
 800d21c:	47c0      	blx	r8
 800d21e:	3001      	adds	r0, #1
 800d220:	d103      	bne.n	800d22a <_printf_common+0xba>
 800d222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22a:	3501      	adds	r5, #1
 800d22c:	e7c3      	b.n	800d1b6 <_printf_common+0x46>
 800d22e:	18e1      	adds	r1, r4, r3
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	2030      	movs	r0, #48	; 0x30
 800d234:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d238:	4422      	add	r2, r4
 800d23a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d23e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d242:	3302      	adds	r3, #2
 800d244:	e7c5      	b.n	800d1d2 <_printf_common+0x62>
 800d246:	2301      	movs	r3, #1
 800d248:	4622      	mov	r2, r4
 800d24a:	4639      	mov	r1, r7
 800d24c:	4630      	mov	r0, r6
 800d24e:	47c0      	blx	r8
 800d250:	3001      	adds	r0, #1
 800d252:	d0e6      	beq.n	800d222 <_printf_common+0xb2>
 800d254:	f109 0901 	add.w	r9, r9, #1
 800d258:	e7d8      	b.n	800d20c <_printf_common+0x9c>

0800d25a <_raise_r>:
 800d25a:	291f      	cmp	r1, #31
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4604      	mov	r4, r0
 800d260:	460d      	mov	r5, r1
 800d262:	d904      	bls.n	800d26e <_raise_r+0x14>
 800d264:	2316      	movs	r3, #22
 800d266:	6003      	str	r3, [r0, #0]
 800d268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d26c:	bd38      	pop	{r3, r4, r5, pc}
 800d26e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d270:	b112      	cbz	r2, 800d278 <_raise_r+0x1e>
 800d272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d276:	b94b      	cbnz	r3, 800d28c <_raise_r+0x32>
 800d278:	4620      	mov	r0, r4
 800d27a:	f000 f831 	bl	800d2e0 <_getpid_r>
 800d27e:	462a      	mov	r2, r5
 800d280:	4601      	mov	r1, r0
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d288:	f000 b818 	b.w	800d2bc <_kill_r>
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d00a      	beq.n	800d2a6 <_raise_r+0x4c>
 800d290:	1c59      	adds	r1, r3, #1
 800d292:	d103      	bne.n	800d29c <_raise_r+0x42>
 800d294:	2316      	movs	r3, #22
 800d296:	6003      	str	r3, [r0, #0]
 800d298:	2001      	movs	r0, #1
 800d29a:	e7e7      	b.n	800d26c <_raise_r+0x12>
 800d29c:	2400      	movs	r4, #0
 800d29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	4798      	blx	r3
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	e7e0      	b.n	800d26c <_raise_r+0x12>
	...

0800d2ac <raise>:
 800d2ac:	4b02      	ldr	r3, [pc, #8]	; (800d2b8 <raise+0xc>)
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	f7ff bfd2 	b.w	800d25a <_raise_r>
 800d2b6:	bf00      	nop
 800d2b8:	20000018 	.word	0x20000018

0800d2bc <_kill_r>:
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	4c07      	ldr	r4, [pc, #28]	; (800d2dc <_kill_r+0x20>)
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	4608      	mov	r0, r1
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	f7f4 fdc1 	bl	8001e50 <_kill>
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	d102      	bne.n	800d2d8 <_kill_r+0x1c>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	b103      	cbz	r3, 800d2d8 <_kill_r+0x1c>
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	bd38      	pop	{r3, r4, r5, pc}
 800d2da:	bf00      	nop
 800d2dc:	20006d5c 	.word	0x20006d5c

0800d2e0 <_getpid_r>:
 800d2e0:	f7f4 bdae 	b.w	8001e40 <_getpid>

0800d2e4 <__ascii_wctomb>:
 800d2e4:	b149      	cbz	r1, 800d2fa <__ascii_wctomb+0x16>
 800d2e6:	2aff      	cmp	r2, #255	; 0xff
 800d2e8:	bf85      	ittet	hi
 800d2ea:	238a      	movhi	r3, #138	; 0x8a
 800d2ec:	6003      	strhi	r3, [r0, #0]
 800d2ee:	700a      	strbls	r2, [r1, #0]
 800d2f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d2f4:	bf98      	it	ls
 800d2f6:	2001      	movls	r0, #1
 800d2f8:	4770      	bx	lr
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	4770      	bx	lr
	...

0800d300 <__register_exitproc>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	4d2c      	ldr	r5, [pc, #176]	; (800d3b8 <__register_exitproc+0xb8>)
 800d306:	682c      	ldr	r4, [r5, #0]
 800d308:	4607      	mov	r7, r0
 800d30a:	460e      	mov	r6, r1
 800d30c:	4691      	mov	r9, r2
 800d30e:	4698      	mov	r8, r3
 800d310:	b934      	cbnz	r4, 800d320 <__register_exitproc+0x20>
 800d312:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <__register_exitproc+0xbc>)
 800d314:	4c2a      	ldr	r4, [pc, #168]	; (800d3c0 <__register_exitproc+0xc0>)
 800d316:	602c      	str	r4, [r5, #0]
 800d318:	b113      	cbz	r3, 800d320 <__register_exitproc+0x20>
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800d320:	6863      	ldr	r3, [r4, #4]
 800d322:	2b1f      	cmp	r3, #31
 800d324:	dd3d      	ble.n	800d3a2 <__register_exitproc+0xa2>
 800d326:	4b27      	ldr	r3, [pc, #156]	; (800d3c4 <__register_exitproc+0xc4>)
 800d328:	b91b      	cbnz	r3, 800d332 <__register_exitproc+0x32>
 800d32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d332:	208c      	movs	r0, #140	; 0x8c
 800d334:	f000 fe2e 	bl	800df94 <malloc>
 800d338:	4604      	mov	r4, r0
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d0f5      	beq.n	800d32a <__register_exitproc+0x2a>
 800d33e:	2300      	movs	r3, #0
 800d340:	682a      	ldr	r2, [r5, #0]
 800d342:	6002      	str	r2, [r0, #0]
 800d344:	6043      	str	r3, [r0, #4]
 800d346:	6028      	str	r0, [r5, #0]
 800d348:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800d34c:	b30f      	cbz	r7, 800d392 <__register_exitproc+0x92>
 800d34e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800d352:	f000 fe1f 	bl	800df94 <malloc>
 800d356:	2800      	cmp	r0, #0
 800d358:	d0e7      	beq.n	800d32a <__register_exitproc+0x2a>
 800d35a:	2300      	movs	r3, #0
 800d35c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800d360:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800d364:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800d368:	6862      	ldr	r2, [r4, #4]
 800d36a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800d36e:	2301      	movs	r3, #1
 800d370:	4093      	lsls	r3, r2
 800d372:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800d376:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800d37a:	431a      	orrs	r2, r3
 800d37c:	2f02      	cmp	r7, #2
 800d37e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800d382:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800d386:	bf02      	ittt	eq
 800d388:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800d38c:	4313      	orreq	r3, r2
 800d38e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800d392:	6863      	ldr	r3, [r4, #4]
 800d394:	1c5a      	adds	r2, r3, #1
 800d396:	3302      	adds	r3, #2
 800d398:	6062      	str	r2, [r4, #4]
 800d39a:	2000      	movs	r0, #0
 800d39c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800d3a0:	e7c5      	b.n	800d32e <__register_exitproc+0x2e>
 800d3a2:	2f00      	cmp	r7, #0
 800d3a4:	d0f5      	beq.n	800d392 <__register_exitproc+0x92>
 800d3a6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d1dc      	bne.n	800d368 <__register_exitproc+0x68>
 800d3ae:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <__register_exitproc+0xc4>)
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0ba      	beq.n	800d32a <__register_exitproc+0x2a>
 800d3b4:	e7cb      	b.n	800d34e <__register_exitproc+0x4e>
 800d3b6:	bf00      	nop
 800d3b8:	20005dd8 	.word	0x20005dd8
 800d3bc:	00000000 	.word	0x00000000
 800d3c0:	20005d4c 	.word	0x20005d4c
 800d3c4:	0800df95 	.word	0x0800df95

0800d3c8 <quorem>:
 800d3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	6903      	ldr	r3, [r0, #16]
 800d3ce:	690c      	ldr	r4, [r1, #16]
 800d3d0:	42a3      	cmp	r3, r4
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	f2c0 8082 	blt.w	800d4dc <quorem+0x114>
 800d3d8:	3c01      	subs	r4, #1
 800d3da:	f101 0714 	add.w	r7, r1, #20
 800d3de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d3e2:	f100 0614 	add.w	r6, r0, #20
 800d3e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d3ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d3ee:	eb06 030c 	add.w	r3, r6, ip
 800d3f2:	3501      	adds	r5, #1
 800d3f4:	eb07 090c 	add.w	r9, r7, ip
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	fbb0 f5f5 	udiv	r5, r0, r5
 800d3fe:	b395      	cbz	r5, 800d466 <quorem+0x9e>
 800d400:	f04f 0a00 	mov.w	sl, #0
 800d404:	4638      	mov	r0, r7
 800d406:	46b6      	mov	lr, r6
 800d408:	46d3      	mov	fp, sl
 800d40a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d40e:	b293      	uxth	r3, r2
 800d410:	fb05 a303 	mla	r3, r5, r3, sl
 800d414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d418:	b29b      	uxth	r3, r3
 800d41a:	ebab 0303 	sub.w	r3, fp, r3
 800d41e:	0c12      	lsrs	r2, r2, #16
 800d420:	f8de b000 	ldr.w	fp, [lr]
 800d424:	fb05 a202 	mla	r2, r5, r2, sl
 800d428:	fa13 f38b 	uxtah	r3, r3, fp
 800d42c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d430:	fa1f fb82 	uxth.w	fp, r2
 800d434:	f8de 2000 	ldr.w	r2, [lr]
 800d438:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d440:	b29b      	uxth	r3, r3
 800d442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d446:	4581      	cmp	r9, r0
 800d448:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d44c:	f84e 3b04 	str.w	r3, [lr], #4
 800d450:	d2db      	bcs.n	800d40a <quorem+0x42>
 800d452:	f856 300c 	ldr.w	r3, [r6, ip]
 800d456:	b933      	cbnz	r3, 800d466 <quorem+0x9e>
 800d458:	9b01      	ldr	r3, [sp, #4]
 800d45a:	3b04      	subs	r3, #4
 800d45c:	429e      	cmp	r6, r3
 800d45e:	461a      	mov	r2, r3
 800d460:	d330      	bcc.n	800d4c4 <quorem+0xfc>
 800d462:	f8c8 4010 	str.w	r4, [r8, #16]
 800d466:	4640      	mov	r0, r8
 800d468:	f000 ffb2 	bl	800e3d0 <__mcmp>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	db25      	blt.n	800d4bc <quorem+0xf4>
 800d470:	3501      	adds	r5, #1
 800d472:	4630      	mov	r0, r6
 800d474:	f04f 0c00 	mov.w	ip, #0
 800d478:	f857 2b04 	ldr.w	r2, [r7], #4
 800d47c:	f8d0 e000 	ldr.w	lr, [r0]
 800d480:	b293      	uxth	r3, r2
 800d482:	ebac 0303 	sub.w	r3, ip, r3
 800d486:	0c12      	lsrs	r2, r2, #16
 800d488:	fa13 f38e 	uxtah	r3, r3, lr
 800d48c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d494:	b29b      	uxth	r3, r3
 800d496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d49a:	45b9      	cmp	r9, r7
 800d49c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4a0:	f840 3b04 	str.w	r3, [r0], #4
 800d4a4:	d2e8      	bcs.n	800d478 <quorem+0xb0>
 800d4a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d4aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d4ae:	b92a      	cbnz	r2, 800d4bc <quorem+0xf4>
 800d4b0:	3b04      	subs	r3, #4
 800d4b2:	429e      	cmp	r6, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	d30b      	bcc.n	800d4d0 <quorem+0x108>
 800d4b8:	f8c8 4010 	str.w	r4, [r8, #16]
 800d4bc:	4628      	mov	r0, r5
 800d4be:	b003      	add	sp, #12
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c4:	6812      	ldr	r2, [r2, #0]
 800d4c6:	3b04      	subs	r3, #4
 800d4c8:	2a00      	cmp	r2, #0
 800d4ca:	d1ca      	bne.n	800d462 <quorem+0x9a>
 800d4cc:	3c01      	subs	r4, #1
 800d4ce:	e7c5      	b.n	800d45c <quorem+0x94>
 800d4d0:	6812      	ldr	r2, [r2, #0]
 800d4d2:	3b04      	subs	r3, #4
 800d4d4:	2a00      	cmp	r2, #0
 800d4d6:	d1ef      	bne.n	800d4b8 <quorem+0xf0>
 800d4d8:	3c01      	subs	r4, #1
 800d4da:	e7ea      	b.n	800d4b2 <quorem+0xea>
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e7ee      	b.n	800d4be <quorem+0xf6>

0800d4e0 <_dtoa_r>:
 800d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	ec57 6b10 	vmov	r6, r7, d0
 800d4e8:	b095      	sub	sp, #84	; 0x54
 800d4ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4ec:	9108      	str	r1, [sp, #32]
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d4f2:	9311      	str	r3, [sp, #68]	; 0x44
 800d4f4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d4f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d4fc:	b93d      	cbnz	r5, 800d50e <_dtoa_r+0x2e>
 800d4fe:	2010      	movs	r0, #16
 800d500:	f000 fd48 	bl	800df94 <malloc>
 800d504:	6260      	str	r0, [r4, #36]	; 0x24
 800d506:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d50a:	6005      	str	r5, [r0, #0]
 800d50c:	60c5      	str	r5, [r0, #12]
 800d50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d510:	6819      	ldr	r1, [r3, #0]
 800d512:	b151      	cbz	r1, 800d52a <_dtoa_r+0x4a>
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	604a      	str	r2, [r1, #4]
 800d518:	2301      	movs	r3, #1
 800d51a:	4093      	lsls	r3, r2
 800d51c:	608b      	str	r3, [r1, #8]
 800d51e:	4620      	mov	r0, r4
 800d520:	f000 fd74 	bl	800e00c <_Bfree>
 800d524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d526:	2200      	movs	r2, #0
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	1e3b      	subs	r3, r7, #0
 800d52c:	bfb9      	ittee	lt
 800d52e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d532:	9303      	strlt	r3, [sp, #12]
 800d534:	2300      	movge	r3, #0
 800d536:	f8c8 3000 	strge.w	r3, [r8]
 800d53a:	9d03      	ldr	r5, [sp, #12]
 800d53c:	4bac      	ldr	r3, [pc, #688]	; (800d7f0 <_dtoa_r+0x310>)
 800d53e:	bfbc      	itt	lt
 800d540:	2201      	movlt	r2, #1
 800d542:	f8c8 2000 	strlt.w	r2, [r8]
 800d546:	43ab      	bics	r3, r5
 800d548:	d11b      	bne.n	800d582 <_dtoa_r+0xa2>
 800d54a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d54c:	f242 730f 	movw	r3, #9999	; 0x270f
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	9b02      	ldr	r3, [sp, #8]
 800d554:	b923      	cbnz	r3, 800d560 <_dtoa_r+0x80>
 800d556:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d55a:	2d00      	cmp	r5, #0
 800d55c:	f000 84dd 	beq.w	800df1a <_dtoa_r+0xa3a>
 800d560:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d562:	b953      	cbnz	r3, 800d57a <_dtoa_r+0x9a>
 800d564:	4ba3      	ldr	r3, [pc, #652]	; (800d7f4 <_dtoa_r+0x314>)
 800d566:	e020      	b.n	800d5aa <_dtoa_r+0xca>
 800d568:	4ba3      	ldr	r3, [pc, #652]	; (800d7f8 <_dtoa_r+0x318>)
 800d56a:	9304      	str	r3, [sp, #16]
 800d56c:	3308      	adds	r3, #8
 800d56e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d570:	6013      	str	r3, [r2, #0]
 800d572:	9804      	ldr	r0, [sp, #16]
 800d574:	b015      	add	sp, #84	; 0x54
 800d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57a:	4b9e      	ldr	r3, [pc, #632]	; (800d7f4 <_dtoa_r+0x314>)
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	3303      	adds	r3, #3
 800d580:	e7f5      	b.n	800d56e <_dtoa_r+0x8e>
 800d582:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d586:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d592:	d10c      	bne.n	800d5ae <_dtoa_r+0xce>
 800d594:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d596:	2301      	movs	r3, #1
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 84b9 	beq.w	800df14 <_dtoa_r+0xa34>
 800d5a2:	4b96      	ldr	r3, [pc, #600]	; (800d7fc <_dtoa_r+0x31c>)
 800d5a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	e7e1      	b.n	800d572 <_dtoa_r+0x92>
 800d5ae:	a913      	add	r1, sp, #76	; 0x4c
 800d5b0:	aa12      	add	r2, sp, #72	; 0x48
 800d5b2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f000 ff81 	bl	800e4be <__d2b>
 800d5bc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d5c0:	9001      	str	r0, [sp, #4]
 800d5c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d5c4:	2e00      	cmp	r6, #0
 800d5c6:	d046      	beq.n	800d656 <_dtoa_r+0x176>
 800d5c8:	9805      	ldr	r0, [sp, #20]
 800d5ca:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d5ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5d2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d5d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d5da:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d5de:	2700      	movs	r7, #0
 800d5e0:	ee07 aa90 	vmov	s15, sl
 800d5e4:	ec43 2b16 	vmov	d6, r2, r3
 800d5e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d5ec:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d7d8 <_dtoa_r+0x2f8>
 800d5f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d5f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5f8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d7e0 <_dtoa_r+0x300>
 800d5fc:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d600:	eeb0 7b46 	vmov.f64	d7, d6
 800d604:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d7e8 <_dtoa_r+0x308>
 800d608:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d60c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d610:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d618:	ee16 ba90 	vmov	fp, s13
 800d61c:	d508      	bpl.n	800d630 <_dtoa_r+0x150>
 800d61e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d622:	eeb4 6b47 	vcmp.f64	d6, d7
 800d626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62a:	bf18      	it	ne
 800d62c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800d630:	f1bb 0f16 	cmp.w	fp, #22
 800d634:	d834      	bhi.n	800d6a0 <_dtoa_r+0x1c0>
 800d636:	4b72      	ldr	r3, [pc, #456]	; (800d800 <_dtoa_r+0x320>)
 800d638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d63c:	ed93 7b00 	vldr	d7, [r3]
 800d640:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d644:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64c:	dd01      	ble.n	800d652 <_dtoa_r+0x172>
 800d64e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d652:	2300      	movs	r3, #0
 800d654:	e025      	b.n	800d6a2 <_dtoa_r+0x1c2>
 800d656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d658:	eb01 0a03 	add.w	sl, r1, r3
 800d65c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d660:	2b20      	cmp	r3, #32
 800d662:	dd17      	ble.n	800d694 <_dtoa_r+0x1b4>
 800d664:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d668:	9a02      	ldr	r2, [sp, #8]
 800d66a:	409d      	lsls	r5, r3
 800d66c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d670:	fa22 f303 	lsr.w	r3, r2, r3
 800d674:	432b      	orrs	r3, r5
 800d676:	ee07 3a90 	vmov	s15, r3
 800d67a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d67e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d682:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d686:	9805      	ldr	r0, [sp, #20]
 800d688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d68c:	2701      	movs	r7, #1
 800d68e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d692:	e7a5      	b.n	800d5e0 <_dtoa_r+0x100>
 800d694:	9a02      	ldr	r2, [sp, #8]
 800d696:	f1c3 0320 	rsb	r3, r3, #32
 800d69a:	fa02 f303 	lsl.w	r3, r2, r3
 800d69e:	e7ea      	b.n	800d676 <_dtoa_r+0x196>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	eba1 0a0a 	sub.w	sl, r1, sl
 800d6a6:	9310      	str	r3, [sp, #64]	; 0x40
 800d6a8:	f1ba 0301 	subs.w	r3, sl, #1
 800d6ac:	9307      	str	r3, [sp, #28]
 800d6ae:	bf43      	ittte	mi
 800d6b0:	2300      	movmi	r3, #0
 800d6b2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d6b6:	9307      	strmi	r3, [sp, #28]
 800d6b8:	f04f 0a00 	movpl.w	sl, #0
 800d6bc:	f1bb 0f00 	cmp.w	fp, #0
 800d6c0:	db19      	blt.n	800d6f6 <_dtoa_r+0x216>
 800d6c2:	9b07      	ldr	r3, [sp, #28]
 800d6c4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d6c8:	445b      	add	r3, fp
 800d6ca:	9307      	str	r3, [sp, #28]
 800d6cc:	f04f 0800 	mov.w	r8, #0
 800d6d0:	9b08      	ldr	r3, [sp, #32]
 800d6d2:	2b09      	cmp	r3, #9
 800d6d4:	d866      	bhi.n	800d7a4 <_dtoa_r+0x2c4>
 800d6d6:	2b05      	cmp	r3, #5
 800d6d8:	bfc4      	itt	gt
 800d6da:	3b04      	subgt	r3, #4
 800d6dc:	9308      	strgt	r3, [sp, #32]
 800d6de:	9b08      	ldr	r3, [sp, #32]
 800d6e0:	f1a3 0302 	sub.w	r3, r3, #2
 800d6e4:	bfcc      	ite	gt
 800d6e6:	2500      	movgt	r5, #0
 800d6e8:	2501      	movle	r5, #1
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d866      	bhi.n	800d7bc <_dtoa_r+0x2dc>
 800d6ee:	e8df f003 	tbb	[pc, r3]
 800d6f2:	5755      	.short	0x5755
 800d6f4:	4909      	.short	0x4909
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d6fc:	f1cb 0800 	rsb	r8, fp, #0
 800d700:	930b      	str	r3, [sp, #44]	; 0x2c
 800d702:	e7e5      	b.n	800d6d0 <_dtoa_r+0x1f0>
 800d704:	2301      	movs	r3, #1
 800d706:	9309      	str	r3, [sp, #36]	; 0x24
 800d708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	dd59      	ble.n	800d7c2 <_dtoa_r+0x2e2>
 800d70e:	9306      	str	r3, [sp, #24]
 800d710:	4699      	mov	r9, r3
 800d712:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d714:	2200      	movs	r2, #0
 800d716:	6072      	str	r2, [r6, #4]
 800d718:	2204      	movs	r2, #4
 800d71a:	f102 0014 	add.w	r0, r2, #20
 800d71e:	4298      	cmp	r0, r3
 800d720:	6871      	ldr	r1, [r6, #4]
 800d722:	d953      	bls.n	800d7cc <_dtoa_r+0x2ec>
 800d724:	4620      	mov	r0, r4
 800d726:	f000 fc3d 	bl	800dfa4 <_Balloc>
 800d72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d72c:	6030      	str	r0, [r6, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	9304      	str	r3, [sp, #16]
 800d732:	f1b9 0f0e 	cmp.w	r9, #14
 800d736:	f200 80c2 	bhi.w	800d8be <_dtoa_r+0x3de>
 800d73a:	2d00      	cmp	r5, #0
 800d73c:	f000 80bf 	beq.w	800d8be <_dtoa_r+0x3de>
 800d740:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d744:	f1bb 0f00 	cmp.w	fp, #0
 800d748:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d74c:	f340 80e6 	ble.w	800d91c <_dtoa_r+0x43c>
 800d750:	4a2b      	ldr	r2, [pc, #172]	; (800d800 <_dtoa_r+0x320>)
 800d752:	f00b 030f 	and.w	r3, fp, #15
 800d756:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d75a:	ed93 7b00 	vldr	d7, [r3]
 800d75e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d762:	06da      	lsls	r2, r3, #27
 800d764:	f140 80d8 	bpl.w	800d918 <_dtoa_r+0x438>
 800d768:	4a26      	ldr	r2, [pc, #152]	; (800d804 <_dtoa_r+0x324>)
 800d76a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d76e:	ed92 6b08 	vldr	d6, [r2, #32]
 800d772:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d776:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d77a:	f003 030f 	and.w	r3, r3, #15
 800d77e:	2203      	movs	r2, #3
 800d780:	4920      	ldr	r1, [pc, #128]	; (800d804 <_dtoa_r+0x324>)
 800d782:	e04a      	b.n	800d81a <_dtoa_r+0x33a>
 800d784:	2301      	movs	r3, #1
 800d786:	9309      	str	r3, [sp, #36]	; 0x24
 800d788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d78a:	445b      	add	r3, fp
 800d78c:	f103 0901 	add.w	r9, r3, #1
 800d790:	9306      	str	r3, [sp, #24]
 800d792:	464b      	mov	r3, r9
 800d794:	2b01      	cmp	r3, #1
 800d796:	bfb8      	it	lt
 800d798:	2301      	movlt	r3, #1
 800d79a:	e7ba      	b.n	800d712 <_dtoa_r+0x232>
 800d79c:	2300      	movs	r3, #0
 800d79e:	e7b2      	b.n	800d706 <_dtoa_r+0x226>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	e7f0      	b.n	800d786 <_dtoa_r+0x2a6>
 800d7a4:	2501      	movs	r5, #1
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7b0:	9306      	str	r3, [sp, #24]
 800d7b2:	4699      	mov	r9, r3
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	2312      	movs	r3, #18
 800d7b8:	920a      	str	r2, [sp, #40]	; 0x28
 800d7ba:	e7aa      	b.n	800d712 <_dtoa_r+0x232>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c0:	e7f4      	b.n	800d7ac <_dtoa_r+0x2cc>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	9306      	str	r3, [sp, #24]
 800d7c6:	4699      	mov	r9, r3
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	e7f5      	b.n	800d7b8 <_dtoa_r+0x2d8>
 800d7cc:	3101      	adds	r1, #1
 800d7ce:	6071      	str	r1, [r6, #4]
 800d7d0:	0052      	lsls	r2, r2, #1
 800d7d2:	e7a2      	b.n	800d71a <_dtoa_r+0x23a>
 800d7d4:	f3af 8000 	nop.w
 800d7d8:	636f4361 	.word	0x636f4361
 800d7dc:	3fd287a7 	.word	0x3fd287a7
 800d7e0:	8b60c8b3 	.word	0x8b60c8b3
 800d7e4:	3fc68a28 	.word	0x3fc68a28
 800d7e8:	509f79fb 	.word	0x509f79fb
 800d7ec:	3fd34413 	.word	0x3fd34413
 800d7f0:	7ff00000 	.word	0x7ff00000
 800d7f4:	0800e812 	.word	0x0800e812
 800d7f8:	0800e809 	.word	0x0800e809
 800d7fc:	0800e707 	.word	0x0800e707
 800d800:	0800e8a0 	.word	0x0800e8a0
 800d804:	0800e878 	.word	0x0800e878
 800d808:	07de      	lsls	r6, r3, #31
 800d80a:	d504      	bpl.n	800d816 <_dtoa_r+0x336>
 800d80c:	ed91 6b00 	vldr	d6, [r1]
 800d810:	3201      	adds	r2, #1
 800d812:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d816:	105b      	asrs	r3, r3, #1
 800d818:	3108      	adds	r1, #8
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1f4      	bne.n	800d808 <_dtoa_r+0x328>
 800d81e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d822:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d826:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d82a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 80a7 	beq.w	800d980 <_dtoa_r+0x4a0>
 800d832:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d836:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d83a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d842:	f140 809d 	bpl.w	800d980 <_dtoa_r+0x4a0>
 800d846:	f1b9 0f00 	cmp.w	r9, #0
 800d84a:	f000 8099 	beq.w	800d980 <_dtoa_r+0x4a0>
 800d84e:	9b06      	ldr	r3, [sp, #24]
 800d850:	2b00      	cmp	r3, #0
 800d852:	dd30      	ble.n	800d8b6 <_dtoa_r+0x3d6>
 800d854:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d85c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d860:	9d06      	ldr	r5, [sp, #24]
 800d862:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800d866:	3201      	adds	r2, #1
 800d868:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d86c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d870:	ee07 2a90 	vmov	s15, r2
 800d874:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d878:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d87c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d880:	9a03      	ldr	r2, [sp, #12]
 800d882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d886:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d88a:	2d00      	cmp	r5, #0
 800d88c:	d17b      	bne.n	800d986 <_dtoa_r+0x4a6>
 800d88e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d892:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d896:	ec41 0b17 	vmov	d7, r0, r1
 800d89a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a2:	f300 8253 	bgt.w	800dd4c <_dtoa_r+0x86c>
 800d8a6:	eeb1 7b47 	vneg.f64	d7, d7
 800d8aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b2:	f100 8249 	bmi.w	800dd48 <_dtoa_r+0x868>
 800d8b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d8ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f2c0 8119 	blt.w	800daf8 <_dtoa_r+0x618>
 800d8c6:	f1bb 0f0e 	cmp.w	fp, #14
 800d8ca:	f300 8115 	bgt.w	800daf8 <_dtoa_r+0x618>
 800d8ce:	4bc3      	ldr	r3, [pc, #780]	; (800dbdc <_dtoa_r+0x6fc>)
 800d8d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d8d4:	ed93 6b00 	vldr	d6, [r3]
 800d8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f280 80ba 	bge.w	800da54 <_dtoa_r+0x574>
 800d8e0:	f1b9 0f00 	cmp.w	r9, #0
 800d8e4:	f300 80b6 	bgt.w	800da54 <_dtoa_r+0x574>
 800d8e8:	f040 822d 	bne.w	800dd46 <_dtoa_r+0x866>
 800d8ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d8f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d8f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d900:	464d      	mov	r5, r9
 800d902:	464f      	mov	r7, r9
 800d904:	f280 8204 	bge.w	800dd10 <_dtoa_r+0x830>
 800d908:	9b04      	ldr	r3, [sp, #16]
 800d90a:	9a04      	ldr	r2, [sp, #16]
 800d90c:	1c5e      	adds	r6, r3, #1
 800d90e:	2331      	movs	r3, #49	; 0x31
 800d910:	7013      	strb	r3, [r2, #0]
 800d912:	f10b 0b01 	add.w	fp, fp, #1
 800d916:	e1ff      	b.n	800dd18 <_dtoa_r+0x838>
 800d918:	2202      	movs	r2, #2
 800d91a:	e731      	b.n	800d780 <_dtoa_r+0x2a0>
 800d91c:	d02e      	beq.n	800d97c <_dtoa_r+0x49c>
 800d91e:	f1cb 0300 	rsb	r3, fp, #0
 800d922:	4aae      	ldr	r2, [pc, #696]	; (800dbdc <_dtoa_r+0x6fc>)
 800d924:	f003 010f 	and.w	r1, r3, #15
 800d928:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d92c:	ed92 7b00 	vldr	d7, [r2]
 800d930:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d934:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d938:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d93c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d940:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d944:	49a6      	ldr	r1, [pc, #664]	; (800dbe0 <_dtoa_r+0x700>)
 800d946:	111b      	asrs	r3, r3, #4
 800d948:	2000      	movs	r0, #0
 800d94a:	2202      	movs	r2, #2
 800d94c:	b93b      	cbnz	r3, 800d95e <_dtoa_r+0x47e>
 800d94e:	2800      	cmp	r0, #0
 800d950:	f43f af6b 	beq.w	800d82a <_dtoa_r+0x34a>
 800d954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d95c:	e765      	b.n	800d82a <_dtoa_r+0x34a>
 800d95e:	07dd      	lsls	r5, r3, #31
 800d960:	d509      	bpl.n	800d976 <_dtoa_r+0x496>
 800d962:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d966:	ed91 7b00 	vldr	d7, [r1]
 800d96a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d96e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d972:	3201      	adds	r2, #1
 800d974:	2001      	movs	r0, #1
 800d976:	105b      	asrs	r3, r3, #1
 800d978:	3108      	adds	r1, #8
 800d97a:	e7e7      	b.n	800d94c <_dtoa_r+0x46c>
 800d97c:	2202      	movs	r2, #2
 800d97e:	e754      	b.n	800d82a <_dtoa_r+0x34a>
 800d980:	465b      	mov	r3, fp
 800d982:	464d      	mov	r5, r9
 800d984:	e770      	b.n	800d868 <_dtoa_r+0x388>
 800d986:	4a95      	ldr	r2, [pc, #596]	; (800dbdc <_dtoa_r+0x6fc>)
 800d988:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d98c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d992:	ec41 0b17 	vmov	d7, r0, r1
 800d996:	b35a      	cbz	r2, 800d9f0 <_dtoa_r+0x510>
 800d998:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d99c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d9a0:	9e04      	ldr	r6, [sp, #16]
 800d9a2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d9a6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d9ae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9b2:	ee14 2a90 	vmov	r2, s9
 800d9b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9ba:	3230      	adds	r2, #48	; 0x30
 800d9bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c8:	f806 2b01 	strb.w	r2, [r6], #1
 800d9cc:	d43b      	bmi.n	800da46 <_dtoa_r+0x566>
 800d9ce:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d9d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9da:	d472      	bmi.n	800dac2 <_dtoa_r+0x5e2>
 800d9dc:	9a04      	ldr	r2, [sp, #16]
 800d9de:	1ab2      	subs	r2, r6, r2
 800d9e0:	4295      	cmp	r5, r2
 800d9e2:	f77f af68 	ble.w	800d8b6 <_dtoa_r+0x3d6>
 800d9e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d9ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d9ee:	e7de      	b.n	800d9ae <_dtoa_r+0x4ce>
 800d9f0:	9a04      	ldr	r2, [sp, #16]
 800d9f2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d9f6:	1956      	adds	r6, r2, r5
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9fe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da02:	ee14 2a90 	vmov	r2, s9
 800da06:	3230      	adds	r2, #48	; 0x30
 800da08:	f801 2b01 	strb.w	r2, [r1], #1
 800da0c:	42b1      	cmp	r1, r6
 800da0e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da12:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da16:	d11a      	bne.n	800da4e <_dtoa_r+0x56e>
 800da18:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800da1c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800da20:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	dc4b      	bgt.n	800dac2 <_dtoa_r+0x5e2>
 800da2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da36:	f57f af3e 	bpl.w	800d8b6 <_dtoa_r+0x3d6>
 800da3a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da3e:	2a30      	cmp	r2, #48	; 0x30
 800da40:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800da44:	d001      	beq.n	800da4a <_dtoa_r+0x56a>
 800da46:	469b      	mov	fp, r3
 800da48:	e02a      	b.n	800daa0 <_dtoa_r+0x5c0>
 800da4a:	460e      	mov	r6, r1
 800da4c:	e7f5      	b.n	800da3a <_dtoa_r+0x55a>
 800da4e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da52:	e7d4      	b.n	800d9fe <_dtoa_r+0x51e>
 800da54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da58:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800da5c:	9e04      	ldr	r6, [sp, #16]
 800da5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800da66:	ee15 3a10 	vmov	r3, s10
 800da6a:	3330      	adds	r3, #48	; 0x30
 800da6c:	f806 3b01 	strb.w	r3, [r6], #1
 800da70:	9b04      	ldr	r3, [sp, #16]
 800da72:	1af3      	subs	r3, r6, r3
 800da74:	4599      	cmp	r9, r3
 800da76:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800da7a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800da7e:	d133      	bne.n	800dae8 <_dtoa_r+0x608>
 800da80:	ee37 7b07 	vadd.f64	d7, d7, d7
 800da84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da8c:	dc18      	bgt.n	800dac0 <_dtoa_r+0x5e0>
 800da8e:	eeb4 7b46 	vcmp.f64	d7, d6
 800da92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da96:	d103      	bne.n	800daa0 <_dtoa_r+0x5c0>
 800da98:	ee15 3a10 	vmov	r3, s10
 800da9c:	07db      	lsls	r3, r3, #31
 800da9e:	d40f      	bmi.n	800dac0 <_dtoa_r+0x5e0>
 800daa0:	9901      	ldr	r1, [sp, #4]
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 fab2 	bl	800e00c <_Bfree>
 800daa8:	2300      	movs	r3, #0
 800daaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800daac:	7033      	strb	r3, [r6, #0]
 800daae:	f10b 0301 	add.w	r3, fp, #1
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f43f ad5b 	beq.w	800d572 <_dtoa_r+0x92>
 800dabc:	601e      	str	r6, [r3, #0]
 800dabe:	e558      	b.n	800d572 <_dtoa_r+0x92>
 800dac0:	465b      	mov	r3, fp
 800dac2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dac6:	2939      	cmp	r1, #57	; 0x39
 800dac8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800dacc:	d106      	bne.n	800dadc <_dtoa_r+0x5fc>
 800dace:	9904      	ldr	r1, [sp, #16]
 800dad0:	4291      	cmp	r1, r2
 800dad2:	d107      	bne.n	800dae4 <_dtoa_r+0x604>
 800dad4:	2230      	movs	r2, #48	; 0x30
 800dad6:	700a      	strb	r2, [r1, #0]
 800dad8:	3301      	adds	r3, #1
 800dada:	460a      	mov	r2, r1
 800dadc:	7811      	ldrb	r1, [r2, #0]
 800dade:	3101      	adds	r1, #1
 800dae0:	7011      	strb	r1, [r2, #0]
 800dae2:	e7b0      	b.n	800da46 <_dtoa_r+0x566>
 800dae4:	4616      	mov	r6, r2
 800dae6:	e7ec      	b.n	800dac2 <_dtoa_r+0x5e2>
 800dae8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800daec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800daf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf4:	d1b3      	bne.n	800da5e <_dtoa_r+0x57e>
 800daf6:	e7d3      	b.n	800daa0 <_dtoa_r+0x5c0>
 800daf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	f000 808d 	beq.w	800dc1a <_dtoa_r+0x73a>
 800db00:	9a08      	ldr	r2, [sp, #32]
 800db02:	2a01      	cmp	r2, #1
 800db04:	dc72      	bgt.n	800dbec <_dtoa_r+0x70c>
 800db06:	2f00      	cmp	r7, #0
 800db08:	d06c      	beq.n	800dbe4 <_dtoa_r+0x704>
 800db0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db0e:	4645      	mov	r5, r8
 800db10:	4656      	mov	r6, sl
 800db12:	9a07      	ldr	r2, [sp, #28]
 800db14:	2101      	movs	r1, #1
 800db16:	441a      	add	r2, r3
 800db18:	4620      	mov	r0, r4
 800db1a:	449a      	add	sl, r3
 800db1c:	9207      	str	r2, [sp, #28]
 800db1e:	f000 fb15 	bl	800e14c <__i2b>
 800db22:	4607      	mov	r7, r0
 800db24:	2e00      	cmp	r6, #0
 800db26:	dd0b      	ble.n	800db40 <_dtoa_r+0x660>
 800db28:	9b07      	ldr	r3, [sp, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	dd08      	ble.n	800db40 <_dtoa_r+0x660>
 800db2e:	42b3      	cmp	r3, r6
 800db30:	9a07      	ldr	r2, [sp, #28]
 800db32:	bfa8      	it	ge
 800db34:	4633      	movge	r3, r6
 800db36:	ebaa 0a03 	sub.w	sl, sl, r3
 800db3a:	1af6      	subs	r6, r6, r3
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	9307      	str	r3, [sp, #28]
 800db40:	f1b8 0f00 	cmp.w	r8, #0
 800db44:	d01d      	beq.n	800db82 <_dtoa_r+0x6a2>
 800db46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d06a      	beq.n	800dc22 <_dtoa_r+0x742>
 800db4c:	b18d      	cbz	r5, 800db72 <_dtoa_r+0x692>
 800db4e:	4639      	mov	r1, r7
 800db50:	462a      	mov	r2, r5
 800db52:	4620      	mov	r0, r4
 800db54:	f000 fb9a 	bl	800e28c <__pow5mult>
 800db58:	9a01      	ldr	r2, [sp, #4]
 800db5a:	4601      	mov	r1, r0
 800db5c:	4607      	mov	r7, r0
 800db5e:	4620      	mov	r0, r4
 800db60:	f000 fafd 	bl	800e15e <__multiply>
 800db64:	9901      	ldr	r1, [sp, #4]
 800db66:	900c      	str	r0, [sp, #48]	; 0x30
 800db68:	4620      	mov	r0, r4
 800db6a:	f000 fa4f 	bl	800e00c <_Bfree>
 800db6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db70:	9301      	str	r3, [sp, #4]
 800db72:	ebb8 0205 	subs.w	r2, r8, r5
 800db76:	d004      	beq.n	800db82 <_dtoa_r+0x6a2>
 800db78:	9901      	ldr	r1, [sp, #4]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 fb86 	bl	800e28c <__pow5mult>
 800db80:	9001      	str	r0, [sp, #4]
 800db82:	2101      	movs	r1, #1
 800db84:	4620      	mov	r0, r4
 800db86:	f000 fae1 	bl	800e14c <__i2b>
 800db8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db8c:	4605      	mov	r5, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 81ca 	beq.w	800df28 <_dtoa_r+0xa48>
 800db94:	461a      	mov	r2, r3
 800db96:	4601      	mov	r1, r0
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 fb77 	bl	800e28c <__pow5mult>
 800db9e:	9b08      	ldr	r3, [sp, #32]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	4605      	mov	r5, r0
 800dba4:	dc44      	bgt.n	800dc30 <_dtoa_r+0x750>
 800dba6:	9b02      	ldr	r3, [sp, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d13c      	bne.n	800dc26 <_dtoa_r+0x746>
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d137      	bne.n	800dc26 <_dtoa_r+0x746>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbbc:	0d1b      	lsrs	r3, r3, #20
 800dbbe:	051b      	lsls	r3, r3, #20
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d033      	beq.n	800dc2c <_dtoa_r+0x74c>
 800dbc4:	9b07      	ldr	r3, [sp, #28]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	f10a 0a01 	add.w	sl, sl, #1
 800dbcc:	9307      	str	r3, [sp, #28]
 800dbce:	f04f 0801 	mov.w	r8, #1
 800dbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbd4:	bb73      	cbnz	r3, 800dc34 <_dtoa_r+0x754>
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	e034      	b.n	800dc44 <_dtoa_r+0x764>
 800dbda:	bf00      	nop
 800dbdc:	0800e8a0 	.word	0x0800e8a0
 800dbe0:	0800e878 	.word	0x0800e878
 800dbe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dbea:	e790      	b.n	800db0e <_dtoa_r+0x62e>
 800dbec:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800dbf0:	45a8      	cmp	r8, r5
 800dbf2:	bfbf      	itttt	lt
 800dbf4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800dbf6:	eba5 0808 	sublt.w	r8, r5, r8
 800dbfa:	4443      	addlt	r3, r8
 800dbfc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800dbfe:	bfb6      	itet	lt
 800dc00:	46a8      	movlt	r8, r5
 800dc02:	eba8 0505 	subge.w	r5, r8, r5
 800dc06:	2500      	movlt	r5, #0
 800dc08:	f1b9 0f00 	cmp.w	r9, #0
 800dc0c:	bfb9      	ittee	lt
 800dc0e:	ebaa 0609 	sublt.w	r6, sl, r9
 800dc12:	2300      	movlt	r3, #0
 800dc14:	4656      	movge	r6, sl
 800dc16:	464b      	movge	r3, r9
 800dc18:	e77b      	b.n	800db12 <_dtoa_r+0x632>
 800dc1a:	4645      	mov	r5, r8
 800dc1c:	4656      	mov	r6, sl
 800dc1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dc20:	e780      	b.n	800db24 <_dtoa_r+0x644>
 800dc22:	4642      	mov	r2, r8
 800dc24:	e7a8      	b.n	800db78 <_dtoa_r+0x698>
 800dc26:	f04f 0800 	mov.w	r8, #0
 800dc2a:	e7d2      	b.n	800dbd2 <_dtoa_r+0x6f2>
 800dc2c:	4698      	mov	r8, r3
 800dc2e:	e7d0      	b.n	800dbd2 <_dtoa_r+0x6f2>
 800dc30:	f04f 0800 	mov.w	r8, #0
 800dc34:	692b      	ldr	r3, [r5, #16]
 800dc36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dc3a:	6918      	ldr	r0, [r3, #16]
 800dc3c:	f000 fa38 	bl	800e0b0 <__hi0bits>
 800dc40:	f1c0 0020 	rsb	r0, r0, #32
 800dc44:	9b07      	ldr	r3, [sp, #28]
 800dc46:	4418      	add	r0, r3
 800dc48:	f010 001f 	ands.w	r0, r0, #31
 800dc4c:	d047      	beq.n	800dcde <_dtoa_r+0x7fe>
 800dc4e:	f1c0 0320 	rsb	r3, r0, #32
 800dc52:	2b04      	cmp	r3, #4
 800dc54:	dd3b      	ble.n	800dcce <_dtoa_r+0x7ee>
 800dc56:	9b07      	ldr	r3, [sp, #28]
 800dc58:	f1c0 001c 	rsb	r0, r0, #28
 800dc5c:	4482      	add	sl, r0
 800dc5e:	4406      	add	r6, r0
 800dc60:	4403      	add	r3, r0
 800dc62:	9307      	str	r3, [sp, #28]
 800dc64:	f1ba 0f00 	cmp.w	sl, #0
 800dc68:	dd05      	ble.n	800dc76 <_dtoa_r+0x796>
 800dc6a:	4652      	mov	r2, sl
 800dc6c:	9901      	ldr	r1, [sp, #4]
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 fb5a 	bl	800e328 <__lshift>
 800dc74:	9001      	str	r0, [sp, #4]
 800dc76:	9b07      	ldr	r3, [sp, #28]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	dd05      	ble.n	800dc88 <_dtoa_r+0x7a8>
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	461a      	mov	r2, r3
 800dc80:	4620      	mov	r0, r4
 800dc82:	f000 fb51 	bl	800e328 <__lshift>
 800dc86:	4605      	mov	r5, r0
 800dc88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc8a:	b353      	cbz	r3, 800dce2 <_dtoa_r+0x802>
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	9801      	ldr	r0, [sp, #4]
 800dc90:	f000 fb9e 	bl	800e3d0 <__mcmp>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	da24      	bge.n	800dce2 <_dtoa_r+0x802>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	220a      	movs	r2, #10
 800dc9c:	9901      	ldr	r1, [sp, #4]
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f000 f9cb 	bl	800e03a <__multadd>
 800dca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca6:	9001      	str	r0, [sp, #4]
 800dca8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8142 	beq.w	800df36 <_dtoa_r+0xa56>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	220a      	movs	r2, #10
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f000 f9be 	bl	800e03a <__multadd>
 800dcbe:	9b06      	ldr	r3, [sp, #24]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	4607      	mov	r7, r0
 800dcc4:	dc4b      	bgt.n	800dd5e <_dtoa_r+0x87e>
 800dcc6:	9b08      	ldr	r3, [sp, #32]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	dd48      	ble.n	800dd5e <_dtoa_r+0x87e>
 800dccc:	e011      	b.n	800dcf2 <_dtoa_r+0x812>
 800dcce:	d0c9      	beq.n	800dc64 <_dtoa_r+0x784>
 800dcd0:	9a07      	ldr	r2, [sp, #28]
 800dcd2:	331c      	adds	r3, #28
 800dcd4:	441a      	add	r2, r3
 800dcd6:	449a      	add	sl, r3
 800dcd8:	441e      	add	r6, r3
 800dcda:	4613      	mov	r3, r2
 800dcdc:	e7c1      	b.n	800dc62 <_dtoa_r+0x782>
 800dcde:	4603      	mov	r3, r0
 800dce0:	e7f6      	b.n	800dcd0 <_dtoa_r+0x7f0>
 800dce2:	f1b9 0f00 	cmp.w	r9, #0
 800dce6:	dc34      	bgt.n	800dd52 <_dtoa_r+0x872>
 800dce8:	9b08      	ldr	r3, [sp, #32]
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	dd31      	ble.n	800dd52 <_dtoa_r+0x872>
 800dcee:	f8cd 9018 	str.w	r9, [sp, #24]
 800dcf2:	9b06      	ldr	r3, [sp, #24]
 800dcf4:	b963      	cbnz	r3, 800dd10 <_dtoa_r+0x830>
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	2205      	movs	r2, #5
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f000 f99d 	bl	800e03a <__multadd>
 800dd00:	4601      	mov	r1, r0
 800dd02:	4605      	mov	r5, r0
 800dd04:	9801      	ldr	r0, [sp, #4]
 800dd06:	f000 fb63 	bl	800e3d0 <__mcmp>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f73f adfc 	bgt.w	800d908 <_dtoa_r+0x428>
 800dd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd12:	9e04      	ldr	r6, [sp, #16]
 800dd14:	ea6f 0b03 	mvn.w	fp, r3
 800dd18:	f04f 0900 	mov.w	r9, #0
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 f974 	bl	800e00c <_Bfree>
 800dd24:	2f00      	cmp	r7, #0
 800dd26:	f43f aebb 	beq.w	800daa0 <_dtoa_r+0x5c0>
 800dd2a:	f1b9 0f00 	cmp.w	r9, #0
 800dd2e:	d005      	beq.n	800dd3c <_dtoa_r+0x85c>
 800dd30:	45b9      	cmp	r9, r7
 800dd32:	d003      	beq.n	800dd3c <_dtoa_r+0x85c>
 800dd34:	4649      	mov	r1, r9
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 f968 	bl	800e00c <_Bfree>
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f000 f964 	bl	800e00c <_Bfree>
 800dd44:	e6ac      	b.n	800daa0 <_dtoa_r+0x5c0>
 800dd46:	2500      	movs	r5, #0
 800dd48:	462f      	mov	r7, r5
 800dd4a:	e7e1      	b.n	800dd10 <_dtoa_r+0x830>
 800dd4c:	469b      	mov	fp, r3
 800dd4e:	462f      	mov	r7, r5
 800dd50:	e5da      	b.n	800d908 <_dtoa_r+0x428>
 800dd52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd54:	f8cd 9018 	str.w	r9, [sp, #24]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 80f3 	beq.w	800df44 <_dtoa_r+0xa64>
 800dd5e:	2e00      	cmp	r6, #0
 800dd60:	dd05      	ble.n	800dd6e <_dtoa_r+0x88e>
 800dd62:	4639      	mov	r1, r7
 800dd64:	4632      	mov	r2, r6
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fade 	bl	800e328 <__lshift>
 800dd6c:	4607      	mov	r7, r0
 800dd6e:	f1b8 0f00 	cmp.w	r8, #0
 800dd72:	d04c      	beq.n	800de0e <_dtoa_r+0x92e>
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f914 	bl	800dfa4 <_Balloc>
 800dd7c:	693a      	ldr	r2, [r7, #16]
 800dd7e:	3202      	adds	r2, #2
 800dd80:	4606      	mov	r6, r0
 800dd82:	0092      	lsls	r2, r2, #2
 800dd84:	f107 010c 	add.w	r1, r7, #12
 800dd88:	300c      	adds	r0, #12
 800dd8a:	f7fe ff2b 	bl	800cbe4 <memcpy>
 800dd8e:	2201      	movs	r2, #1
 800dd90:	4631      	mov	r1, r6
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 fac8 	bl	800e328 <__lshift>
 800dd98:	9b02      	ldr	r3, [sp, #8]
 800dd9a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	46b9      	mov	r9, r7
 800dda4:	9307      	str	r3, [sp, #28]
 800dda6:	4607      	mov	r7, r0
 800dda8:	4629      	mov	r1, r5
 800ddaa:	9801      	ldr	r0, [sp, #4]
 800ddac:	f7ff fb0c 	bl	800d3c8 <quorem>
 800ddb0:	4649      	mov	r1, r9
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ddb8:	9801      	ldr	r0, [sp, #4]
 800ddba:	f000 fb09 	bl	800e3d0 <__mcmp>
 800ddbe:	463a      	mov	r2, r7
 800ddc0:	9002      	str	r0, [sp, #8]
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f000 fb1d 	bl	800e404 <__mdiff>
 800ddca:	68c3      	ldr	r3, [r0, #12]
 800ddcc:	4602      	mov	r2, r0
 800ddce:	bb03      	cbnz	r3, 800de12 <_dtoa_r+0x932>
 800ddd0:	4601      	mov	r1, r0
 800ddd2:	9009      	str	r0, [sp, #36]	; 0x24
 800ddd4:	9801      	ldr	r0, [sp, #4]
 800ddd6:	f000 fafb 	bl	800e3d0 <__mcmp>
 800ddda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dddc:	4603      	mov	r3, r0
 800ddde:	4611      	mov	r1, r2
 800dde0:	4620      	mov	r0, r4
 800dde2:	9309      	str	r3, [sp, #36]	; 0x24
 800dde4:	f000 f912 	bl	800e00c <_Bfree>
 800dde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddea:	b9a3      	cbnz	r3, 800de16 <_dtoa_r+0x936>
 800ddec:	9a08      	ldr	r2, [sp, #32]
 800ddee:	b992      	cbnz	r2, 800de16 <_dtoa_r+0x936>
 800ddf0:	9a07      	ldr	r2, [sp, #28]
 800ddf2:	b982      	cbnz	r2, 800de16 <_dtoa_r+0x936>
 800ddf4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ddf8:	d029      	beq.n	800de4e <_dtoa_r+0x96e>
 800ddfa:	9b02      	ldr	r3, [sp, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dd01      	ble.n	800de04 <_dtoa_r+0x924>
 800de00:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800de04:	f10a 0601 	add.w	r6, sl, #1
 800de08:	f88a 8000 	strb.w	r8, [sl]
 800de0c:	e786      	b.n	800dd1c <_dtoa_r+0x83c>
 800de0e:	4638      	mov	r0, r7
 800de10:	e7c2      	b.n	800dd98 <_dtoa_r+0x8b8>
 800de12:	2301      	movs	r3, #1
 800de14:	e7e3      	b.n	800ddde <_dtoa_r+0x8fe>
 800de16:	9a02      	ldr	r2, [sp, #8]
 800de18:	2a00      	cmp	r2, #0
 800de1a:	db04      	blt.n	800de26 <_dtoa_r+0x946>
 800de1c:	d124      	bne.n	800de68 <_dtoa_r+0x988>
 800de1e:	9a08      	ldr	r2, [sp, #32]
 800de20:	bb12      	cbnz	r2, 800de68 <_dtoa_r+0x988>
 800de22:	9a07      	ldr	r2, [sp, #28]
 800de24:	bb02      	cbnz	r2, 800de68 <_dtoa_r+0x988>
 800de26:	2b00      	cmp	r3, #0
 800de28:	ddec      	ble.n	800de04 <_dtoa_r+0x924>
 800de2a:	2201      	movs	r2, #1
 800de2c:	9901      	ldr	r1, [sp, #4]
 800de2e:	4620      	mov	r0, r4
 800de30:	f000 fa7a 	bl	800e328 <__lshift>
 800de34:	4629      	mov	r1, r5
 800de36:	9001      	str	r0, [sp, #4]
 800de38:	f000 faca 	bl	800e3d0 <__mcmp>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	dc03      	bgt.n	800de48 <_dtoa_r+0x968>
 800de40:	d1e0      	bne.n	800de04 <_dtoa_r+0x924>
 800de42:	f018 0f01 	tst.w	r8, #1
 800de46:	d0dd      	beq.n	800de04 <_dtoa_r+0x924>
 800de48:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de4c:	d1d8      	bne.n	800de00 <_dtoa_r+0x920>
 800de4e:	2339      	movs	r3, #57	; 0x39
 800de50:	f10a 0601 	add.w	r6, sl, #1
 800de54:	f88a 3000 	strb.w	r3, [sl]
 800de58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de5c:	2b39      	cmp	r3, #57	; 0x39
 800de5e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800de62:	d04c      	beq.n	800defe <_dtoa_r+0xa1e>
 800de64:	3301      	adds	r3, #1
 800de66:	e051      	b.n	800df0c <_dtoa_r+0xa2c>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f10a 0601 	add.w	r6, sl, #1
 800de6e:	dd05      	ble.n	800de7c <_dtoa_r+0x99c>
 800de70:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de74:	d0eb      	beq.n	800de4e <_dtoa_r+0x96e>
 800de76:	f108 0801 	add.w	r8, r8, #1
 800de7a:	e7c5      	b.n	800de08 <_dtoa_r+0x928>
 800de7c:	9b04      	ldr	r3, [sp, #16]
 800de7e:	9a06      	ldr	r2, [sp, #24]
 800de80:	f806 8c01 	strb.w	r8, [r6, #-1]
 800de84:	1af3      	subs	r3, r6, r3
 800de86:	4293      	cmp	r3, r2
 800de88:	d021      	beq.n	800dece <_dtoa_r+0x9ee>
 800de8a:	2300      	movs	r3, #0
 800de8c:	220a      	movs	r2, #10
 800de8e:	9901      	ldr	r1, [sp, #4]
 800de90:	4620      	mov	r0, r4
 800de92:	f000 f8d2 	bl	800e03a <__multadd>
 800de96:	45b9      	cmp	r9, r7
 800de98:	9001      	str	r0, [sp, #4]
 800de9a:	f04f 0300 	mov.w	r3, #0
 800de9e:	f04f 020a 	mov.w	r2, #10
 800dea2:	4649      	mov	r1, r9
 800dea4:	4620      	mov	r0, r4
 800dea6:	d105      	bne.n	800deb4 <_dtoa_r+0x9d4>
 800dea8:	f000 f8c7 	bl	800e03a <__multadd>
 800deac:	4681      	mov	r9, r0
 800deae:	4607      	mov	r7, r0
 800deb0:	46b2      	mov	sl, r6
 800deb2:	e779      	b.n	800dda8 <_dtoa_r+0x8c8>
 800deb4:	f000 f8c1 	bl	800e03a <__multadd>
 800deb8:	4639      	mov	r1, r7
 800deba:	4681      	mov	r9, r0
 800debc:	2300      	movs	r3, #0
 800debe:	220a      	movs	r2, #10
 800dec0:	4620      	mov	r0, r4
 800dec2:	f000 f8ba 	bl	800e03a <__multadd>
 800dec6:	4607      	mov	r7, r0
 800dec8:	e7f2      	b.n	800deb0 <_dtoa_r+0x9d0>
 800deca:	f04f 0900 	mov.w	r9, #0
 800dece:	2201      	movs	r2, #1
 800ded0:	9901      	ldr	r1, [sp, #4]
 800ded2:	4620      	mov	r0, r4
 800ded4:	f000 fa28 	bl	800e328 <__lshift>
 800ded8:	4629      	mov	r1, r5
 800deda:	9001      	str	r0, [sp, #4]
 800dedc:	f000 fa78 	bl	800e3d0 <__mcmp>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dcb9      	bgt.n	800de58 <_dtoa_r+0x978>
 800dee4:	d102      	bne.n	800deec <_dtoa_r+0xa0c>
 800dee6:	f018 0f01 	tst.w	r8, #1
 800deea:	d1b5      	bne.n	800de58 <_dtoa_r+0x978>
 800deec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800def0:	2b30      	cmp	r3, #48	; 0x30
 800def2:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800def6:	f47f af11 	bne.w	800dd1c <_dtoa_r+0x83c>
 800defa:	4616      	mov	r6, r2
 800defc:	e7f6      	b.n	800deec <_dtoa_r+0xa0c>
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	4293      	cmp	r3, r2
 800df02:	d105      	bne.n	800df10 <_dtoa_r+0xa30>
 800df04:	9a04      	ldr	r2, [sp, #16]
 800df06:	f10b 0b01 	add.w	fp, fp, #1
 800df0a:	2331      	movs	r3, #49	; 0x31
 800df0c:	7013      	strb	r3, [r2, #0]
 800df0e:	e705      	b.n	800dd1c <_dtoa_r+0x83c>
 800df10:	4616      	mov	r6, r2
 800df12:	e7a1      	b.n	800de58 <_dtoa_r+0x978>
 800df14:	4b16      	ldr	r3, [pc, #88]	; (800df70 <_dtoa_r+0xa90>)
 800df16:	f7ff bb48 	b.w	800d5aa <_dtoa_r+0xca>
 800df1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f47f ab23 	bne.w	800d568 <_dtoa_r+0x88>
 800df22:	4b14      	ldr	r3, [pc, #80]	; (800df74 <_dtoa_r+0xa94>)
 800df24:	f7ff bb41 	b.w	800d5aa <_dtoa_r+0xca>
 800df28:	9b08      	ldr	r3, [sp, #32]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	f77f ae3b 	ble.w	800dba6 <_dtoa_r+0x6c6>
 800df30:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800df34:	e64f      	b.n	800dbd6 <_dtoa_r+0x6f6>
 800df36:	9b06      	ldr	r3, [sp, #24]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	dc03      	bgt.n	800df44 <_dtoa_r+0xa64>
 800df3c:	9b08      	ldr	r3, [sp, #32]
 800df3e:	2b02      	cmp	r3, #2
 800df40:	f73f aed7 	bgt.w	800dcf2 <_dtoa_r+0x812>
 800df44:	9e04      	ldr	r6, [sp, #16]
 800df46:	9801      	ldr	r0, [sp, #4]
 800df48:	4629      	mov	r1, r5
 800df4a:	f7ff fa3d 	bl	800d3c8 <quorem>
 800df4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800df52:	f806 8b01 	strb.w	r8, [r6], #1
 800df56:	9b04      	ldr	r3, [sp, #16]
 800df58:	9a06      	ldr	r2, [sp, #24]
 800df5a:	1af3      	subs	r3, r6, r3
 800df5c:	429a      	cmp	r2, r3
 800df5e:	ddb4      	ble.n	800deca <_dtoa_r+0x9ea>
 800df60:	2300      	movs	r3, #0
 800df62:	220a      	movs	r2, #10
 800df64:	9901      	ldr	r1, [sp, #4]
 800df66:	4620      	mov	r0, r4
 800df68:	f000 f867 	bl	800e03a <__multadd>
 800df6c:	9001      	str	r0, [sp, #4]
 800df6e:	e7ea      	b.n	800df46 <_dtoa_r+0xa66>
 800df70:	0800e706 	.word	0x0800e706
 800df74:	0800e809 	.word	0x0800e809

0800df78 <_localeconv_r>:
 800df78:	4b04      	ldr	r3, [pc, #16]	; (800df8c <_localeconv_r+0x14>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6a18      	ldr	r0, [r3, #32]
 800df7e:	4b04      	ldr	r3, [pc, #16]	; (800df90 <_localeconv_r+0x18>)
 800df80:	2800      	cmp	r0, #0
 800df82:	bf08      	it	eq
 800df84:	4618      	moveq	r0, r3
 800df86:	30f0      	adds	r0, #240	; 0xf0
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	20000018 	.word	0x20000018
 800df90:	2000007c 	.word	0x2000007c

0800df94 <malloc>:
 800df94:	4b02      	ldr	r3, [pc, #8]	; (800dfa0 <malloc+0xc>)
 800df96:	4601      	mov	r1, r0
 800df98:	6818      	ldr	r0, [r3, #0]
 800df9a:	f000 baed 	b.w	800e578 <_malloc_r>
 800df9e:	bf00      	nop
 800dfa0:	20000018 	.word	0x20000018

0800dfa4 <_Balloc>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	460e      	mov	r6, r1
 800dfac:	b93d      	cbnz	r5, 800dfbe <_Balloc+0x1a>
 800dfae:	2010      	movs	r0, #16
 800dfb0:	f7ff fff0 	bl	800df94 <malloc>
 800dfb4:	6260      	str	r0, [r4, #36]	; 0x24
 800dfb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfba:	6005      	str	r5, [r0, #0]
 800dfbc:	60c5      	str	r5, [r0, #12]
 800dfbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dfc0:	68eb      	ldr	r3, [r5, #12]
 800dfc2:	b183      	cbz	r3, 800dfe6 <_Balloc+0x42>
 800dfc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dfcc:	b9b8      	cbnz	r0, 800dffe <_Balloc+0x5a>
 800dfce:	2101      	movs	r1, #1
 800dfd0:	fa01 f506 	lsl.w	r5, r1, r6
 800dfd4:	1d6a      	adds	r2, r5, #5
 800dfd6:	0092      	lsls	r2, r2, #2
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 fabf 	bl	800e55c <_calloc_r>
 800dfde:	b160      	cbz	r0, 800dffa <_Balloc+0x56>
 800dfe0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dfe4:	e00e      	b.n	800e004 <_Balloc+0x60>
 800dfe6:	2221      	movs	r2, #33	; 0x21
 800dfe8:	2104      	movs	r1, #4
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fab6 	bl	800e55c <_calloc_r>
 800dff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff2:	60e8      	str	r0, [r5, #12]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1e4      	bne.n	800dfc4 <_Balloc+0x20>
 800dffa:	2000      	movs	r0, #0
 800dffc:	bd70      	pop	{r4, r5, r6, pc}
 800dffe:	6802      	ldr	r2, [r0, #0]
 800e000:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e004:	2300      	movs	r3, #0
 800e006:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e00a:	e7f7      	b.n	800dffc <_Balloc+0x58>

0800e00c <_Bfree>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e010:	4606      	mov	r6, r0
 800e012:	460d      	mov	r5, r1
 800e014:	b93c      	cbnz	r4, 800e026 <_Bfree+0x1a>
 800e016:	2010      	movs	r0, #16
 800e018:	f7ff ffbc 	bl	800df94 <malloc>
 800e01c:	6270      	str	r0, [r6, #36]	; 0x24
 800e01e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e022:	6004      	str	r4, [r0, #0]
 800e024:	60c4      	str	r4, [r0, #12]
 800e026:	b13d      	cbz	r5, 800e038 <_Bfree+0x2c>
 800e028:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e02a:	686a      	ldr	r2, [r5, #4]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e032:	6029      	str	r1, [r5, #0]
 800e034:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e038:	bd70      	pop	{r4, r5, r6, pc}

0800e03a <__multadd>:
 800e03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e03e:	690d      	ldr	r5, [r1, #16]
 800e040:	461f      	mov	r7, r3
 800e042:	4606      	mov	r6, r0
 800e044:	460c      	mov	r4, r1
 800e046:	f101 0c14 	add.w	ip, r1, #20
 800e04a:	2300      	movs	r3, #0
 800e04c:	f8dc 0000 	ldr.w	r0, [ip]
 800e050:	b281      	uxth	r1, r0
 800e052:	fb02 7101 	mla	r1, r2, r1, r7
 800e056:	0c0f      	lsrs	r7, r1, #16
 800e058:	0c00      	lsrs	r0, r0, #16
 800e05a:	fb02 7000 	mla	r0, r2, r0, r7
 800e05e:	b289      	uxth	r1, r1
 800e060:	3301      	adds	r3, #1
 800e062:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e066:	429d      	cmp	r5, r3
 800e068:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e06c:	f84c 1b04 	str.w	r1, [ip], #4
 800e070:	dcec      	bgt.n	800e04c <__multadd+0x12>
 800e072:	b1d7      	cbz	r7, 800e0aa <__multadd+0x70>
 800e074:	68a3      	ldr	r3, [r4, #8]
 800e076:	42ab      	cmp	r3, r5
 800e078:	dc12      	bgt.n	800e0a0 <__multadd+0x66>
 800e07a:	6861      	ldr	r1, [r4, #4]
 800e07c:	4630      	mov	r0, r6
 800e07e:	3101      	adds	r1, #1
 800e080:	f7ff ff90 	bl	800dfa4 <_Balloc>
 800e084:	6922      	ldr	r2, [r4, #16]
 800e086:	3202      	adds	r2, #2
 800e088:	f104 010c 	add.w	r1, r4, #12
 800e08c:	4680      	mov	r8, r0
 800e08e:	0092      	lsls	r2, r2, #2
 800e090:	300c      	adds	r0, #12
 800e092:	f7fe fda7 	bl	800cbe4 <memcpy>
 800e096:	4621      	mov	r1, r4
 800e098:	4630      	mov	r0, r6
 800e09a:	f7ff ffb7 	bl	800e00c <_Bfree>
 800e09e:	4644      	mov	r4, r8
 800e0a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0a4:	3501      	adds	r5, #1
 800e0a6:	615f      	str	r7, [r3, #20]
 800e0a8:	6125      	str	r5, [r4, #16]
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0b0 <__hi0bits>:
 800e0b0:	0c02      	lsrs	r2, r0, #16
 800e0b2:	0412      	lsls	r2, r2, #16
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	b9b2      	cbnz	r2, 800e0e6 <__hi0bits+0x36>
 800e0b8:	0403      	lsls	r3, r0, #16
 800e0ba:	2010      	movs	r0, #16
 800e0bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e0c0:	bf04      	itt	eq
 800e0c2:	021b      	lsleq	r3, r3, #8
 800e0c4:	3008      	addeq	r0, #8
 800e0c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e0ca:	bf04      	itt	eq
 800e0cc:	011b      	lsleq	r3, r3, #4
 800e0ce:	3004      	addeq	r0, #4
 800e0d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e0d4:	bf04      	itt	eq
 800e0d6:	009b      	lsleq	r3, r3, #2
 800e0d8:	3002      	addeq	r0, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	db06      	blt.n	800e0ec <__hi0bits+0x3c>
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	d503      	bpl.n	800e0ea <__hi0bits+0x3a>
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	4770      	bx	lr
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	e7e8      	b.n	800e0bc <__hi0bits+0xc>
 800e0ea:	2020      	movs	r0, #32
 800e0ec:	4770      	bx	lr

0800e0ee <__lo0bits>:
 800e0ee:	6803      	ldr	r3, [r0, #0]
 800e0f0:	f013 0207 	ands.w	r2, r3, #7
 800e0f4:	4601      	mov	r1, r0
 800e0f6:	d00b      	beq.n	800e110 <__lo0bits+0x22>
 800e0f8:	07da      	lsls	r2, r3, #31
 800e0fa:	d423      	bmi.n	800e144 <__lo0bits+0x56>
 800e0fc:	0798      	lsls	r0, r3, #30
 800e0fe:	bf49      	itett	mi
 800e100:	085b      	lsrmi	r3, r3, #1
 800e102:	089b      	lsrpl	r3, r3, #2
 800e104:	2001      	movmi	r0, #1
 800e106:	600b      	strmi	r3, [r1, #0]
 800e108:	bf5c      	itt	pl
 800e10a:	600b      	strpl	r3, [r1, #0]
 800e10c:	2002      	movpl	r0, #2
 800e10e:	4770      	bx	lr
 800e110:	b298      	uxth	r0, r3
 800e112:	b9a8      	cbnz	r0, 800e140 <__lo0bits+0x52>
 800e114:	0c1b      	lsrs	r3, r3, #16
 800e116:	2010      	movs	r0, #16
 800e118:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e11c:	bf04      	itt	eq
 800e11e:	0a1b      	lsreq	r3, r3, #8
 800e120:	3008      	addeq	r0, #8
 800e122:	071a      	lsls	r2, r3, #28
 800e124:	bf04      	itt	eq
 800e126:	091b      	lsreq	r3, r3, #4
 800e128:	3004      	addeq	r0, #4
 800e12a:	079a      	lsls	r2, r3, #30
 800e12c:	bf04      	itt	eq
 800e12e:	089b      	lsreq	r3, r3, #2
 800e130:	3002      	addeq	r0, #2
 800e132:	07da      	lsls	r2, r3, #31
 800e134:	d402      	bmi.n	800e13c <__lo0bits+0x4e>
 800e136:	085b      	lsrs	r3, r3, #1
 800e138:	d006      	beq.n	800e148 <__lo0bits+0x5a>
 800e13a:	3001      	adds	r0, #1
 800e13c:	600b      	str	r3, [r1, #0]
 800e13e:	4770      	bx	lr
 800e140:	4610      	mov	r0, r2
 800e142:	e7e9      	b.n	800e118 <__lo0bits+0x2a>
 800e144:	2000      	movs	r0, #0
 800e146:	4770      	bx	lr
 800e148:	2020      	movs	r0, #32
 800e14a:	4770      	bx	lr

0800e14c <__i2b>:
 800e14c:	b510      	push	{r4, lr}
 800e14e:	460c      	mov	r4, r1
 800e150:	2101      	movs	r1, #1
 800e152:	f7ff ff27 	bl	800dfa4 <_Balloc>
 800e156:	2201      	movs	r2, #1
 800e158:	6144      	str	r4, [r0, #20]
 800e15a:	6102      	str	r2, [r0, #16]
 800e15c:	bd10      	pop	{r4, pc}

0800e15e <__multiply>:
 800e15e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e162:	4614      	mov	r4, r2
 800e164:	690a      	ldr	r2, [r1, #16]
 800e166:	6923      	ldr	r3, [r4, #16]
 800e168:	429a      	cmp	r2, r3
 800e16a:	bfb8      	it	lt
 800e16c:	460b      	movlt	r3, r1
 800e16e:	4688      	mov	r8, r1
 800e170:	bfbc      	itt	lt
 800e172:	46a0      	movlt	r8, r4
 800e174:	461c      	movlt	r4, r3
 800e176:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e17a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e182:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e186:	eb07 0609 	add.w	r6, r7, r9
 800e18a:	42b3      	cmp	r3, r6
 800e18c:	bfb8      	it	lt
 800e18e:	3101      	addlt	r1, #1
 800e190:	f7ff ff08 	bl	800dfa4 <_Balloc>
 800e194:	f100 0514 	add.w	r5, r0, #20
 800e198:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e19c:	462b      	mov	r3, r5
 800e19e:	2200      	movs	r2, #0
 800e1a0:	4573      	cmp	r3, lr
 800e1a2:	d316      	bcc.n	800e1d2 <__multiply+0x74>
 800e1a4:	f104 0214 	add.w	r2, r4, #20
 800e1a8:	f108 0114 	add.w	r1, r8, #20
 800e1ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e1b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	9b00      	ldr	r3, [sp, #0]
 800e1b8:	9201      	str	r2, [sp, #4]
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d80c      	bhi.n	800e1d8 <__multiply+0x7a>
 800e1be:	2e00      	cmp	r6, #0
 800e1c0:	dd03      	ble.n	800e1ca <__multiply+0x6c>
 800e1c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d05d      	beq.n	800e286 <__multiply+0x128>
 800e1ca:	6106      	str	r6, [r0, #16]
 800e1cc:	b003      	add	sp, #12
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d2:	f843 2b04 	str.w	r2, [r3], #4
 800e1d6:	e7e3      	b.n	800e1a0 <__multiply+0x42>
 800e1d8:	f8b2 b000 	ldrh.w	fp, [r2]
 800e1dc:	f1bb 0f00 	cmp.w	fp, #0
 800e1e0:	d023      	beq.n	800e22a <__multiply+0xcc>
 800e1e2:	4689      	mov	r9, r1
 800e1e4:	46ac      	mov	ip, r5
 800e1e6:	f04f 0800 	mov.w	r8, #0
 800e1ea:	f859 4b04 	ldr.w	r4, [r9], #4
 800e1ee:	f8dc a000 	ldr.w	sl, [ip]
 800e1f2:	b2a3      	uxth	r3, r4
 800e1f4:	fa1f fa8a 	uxth.w	sl, sl
 800e1f8:	fb0b a303 	mla	r3, fp, r3, sl
 800e1fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e200:	f8dc 4000 	ldr.w	r4, [ip]
 800e204:	4443      	add	r3, r8
 800e206:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e20a:	fb0b 840a 	mla	r4, fp, sl, r8
 800e20e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e212:	46e2      	mov	sl, ip
 800e214:	b29b      	uxth	r3, r3
 800e216:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e21a:	454f      	cmp	r7, r9
 800e21c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e220:	f84a 3b04 	str.w	r3, [sl], #4
 800e224:	d82b      	bhi.n	800e27e <__multiply+0x120>
 800e226:	f8cc 8004 	str.w	r8, [ip, #4]
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e230:	3204      	adds	r2, #4
 800e232:	f1ba 0f00 	cmp.w	sl, #0
 800e236:	d020      	beq.n	800e27a <__multiply+0x11c>
 800e238:	682b      	ldr	r3, [r5, #0]
 800e23a:	4689      	mov	r9, r1
 800e23c:	46a8      	mov	r8, r5
 800e23e:	f04f 0b00 	mov.w	fp, #0
 800e242:	f8b9 c000 	ldrh.w	ip, [r9]
 800e246:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e24a:	fb0a 440c 	mla	r4, sl, ip, r4
 800e24e:	445c      	add	r4, fp
 800e250:	46c4      	mov	ip, r8
 800e252:	b29b      	uxth	r3, r3
 800e254:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e258:	f84c 3b04 	str.w	r3, [ip], #4
 800e25c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e260:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e264:	0c1b      	lsrs	r3, r3, #16
 800e266:	fb0a b303 	mla	r3, sl, r3, fp
 800e26a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e26e:	454f      	cmp	r7, r9
 800e270:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e274:	d805      	bhi.n	800e282 <__multiply+0x124>
 800e276:	f8c8 3004 	str.w	r3, [r8, #4]
 800e27a:	3504      	adds	r5, #4
 800e27c:	e79b      	b.n	800e1b6 <__multiply+0x58>
 800e27e:	46d4      	mov	ip, sl
 800e280:	e7b3      	b.n	800e1ea <__multiply+0x8c>
 800e282:	46e0      	mov	r8, ip
 800e284:	e7dd      	b.n	800e242 <__multiply+0xe4>
 800e286:	3e01      	subs	r6, #1
 800e288:	e799      	b.n	800e1be <__multiply+0x60>
	...

0800e28c <__pow5mult>:
 800e28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e290:	4615      	mov	r5, r2
 800e292:	f012 0203 	ands.w	r2, r2, #3
 800e296:	4606      	mov	r6, r0
 800e298:	460f      	mov	r7, r1
 800e29a:	d007      	beq.n	800e2ac <__pow5mult+0x20>
 800e29c:	3a01      	subs	r2, #1
 800e29e:	4c21      	ldr	r4, [pc, #132]	; (800e324 <__pow5mult+0x98>)
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2a6:	f7ff fec8 	bl	800e03a <__multadd>
 800e2aa:	4607      	mov	r7, r0
 800e2ac:	10ad      	asrs	r5, r5, #2
 800e2ae:	d035      	beq.n	800e31c <__pow5mult+0x90>
 800e2b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2b2:	b93c      	cbnz	r4, 800e2c4 <__pow5mult+0x38>
 800e2b4:	2010      	movs	r0, #16
 800e2b6:	f7ff fe6d 	bl	800df94 <malloc>
 800e2ba:	6270      	str	r0, [r6, #36]	; 0x24
 800e2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2c0:	6004      	str	r4, [r0, #0]
 800e2c2:	60c4      	str	r4, [r0, #12]
 800e2c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2cc:	b94c      	cbnz	r4, 800e2e2 <__pow5mult+0x56>
 800e2ce:	f240 2171 	movw	r1, #625	; 0x271
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f7ff ff3a 	bl	800e14c <__i2b>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2de:	4604      	mov	r4, r0
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	f04f 0800 	mov.w	r8, #0
 800e2e6:	07eb      	lsls	r3, r5, #31
 800e2e8:	d50a      	bpl.n	800e300 <__pow5mult+0x74>
 800e2ea:	4639      	mov	r1, r7
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	f7ff ff35 	bl	800e15e <__multiply>
 800e2f4:	4639      	mov	r1, r7
 800e2f6:	4681      	mov	r9, r0
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f7ff fe87 	bl	800e00c <_Bfree>
 800e2fe:	464f      	mov	r7, r9
 800e300:	106d      	asrs	r5, r5, #1
 800e302:	d00b      	beq.n	800e31c <__pow5mult+0x90>
 800e304:	6820      	ldr	r0, [r4, #0]
 800e306:	b938      	cbnz	r0, 800e318 <__pow5mult+0x8c>
 800e308:	4622      	mov	r2, r4
 800e30a:	4621      	mov	r1, r4
 800e30c:	4630      	mov	r0, r6
 800e30e:	f7ff ff26 	bl	800e15e <__multiply>
 800e312:	6020      	str	r0, [r4, #0]
 800e314:	f8c0 8000 	str.w	r8, [r0]
 800e318:	4604      	mov	r4, r0
 800e31a:	e7e4      	b.n	800e2e6 <__pow5mult+0x5a>
 800e31c:	4638      	mov	r0, r7
 800e31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e322:	bf00      	nop
 800e324:	0800e968 	.word	0x0800e968

0800e328 <__lshift>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	460c      	mov	r4, r1
 800e32e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e332:	6923      	ldr	r3, [r4, #16]
 800e334:	6849      	ldr	r1, [r1, #4]
 800e336:	eb0a 0903 	add.w	r9, sl, r3
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	4607      	mov	r7, r0
 800e33e:	4616      	mov	r6, r2
 800e340:	f109 0501 	add.w	r5, r9, #1
 800e344:	42ab      	cmp	r3, r5
 800e346:	db32      	blt.n	800e3ae <__lshift+0x86>
 800e348:	4638      	mov	r0, r7
 800e34a:	f7ff fe2b 	bl	800dfa4 <_Balloc>
 800e34e:	2300      	movs	r3, #0
 800e350:	4680      	mov	r8, r0
 800e352:	f100 0114 	add.w	r1, r0, #20
 800e356:	461a      	mov	r2, r3
 800e358:	4553      	cmp	r3, sl
 800e35a:	db2b      	blt.n	800e3b4 <__lshift+0x8c>
 800e35c:	6920      	ldr	r0, [r4, #16]
 800e35e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e362:	f104 0314 	add.w	r3, r4, #20
 800e366:	f016 021f 	ands.w	r2, r6, #31
 800e36a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e36e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e372:	d025      	beq.n	800e3c0 <__lshift+0x98>
 800e374:	f1c2 0e20 	rsb	lr, r2, #32
 800e378:	2000      	movs	r0, #0
 800e37a:	681e      	ldr	r6, [r3, #0]
 800e37c:	468a      	mov	sl, r1
 800e37e:	4096      	lsls	r6, r2
 800e380:	4330      	orrs	r0, r6
 800e382:	f84a 0b04 	str.w	r0, [sl], #4
 800e386:	f853 0b04 	ldr.w	r0, [r3], #4
 800e38a:	459c      	cmp	ip, r3
 800e38c:	fa20 f00e 	lsr.w	r0, r0, lr
 800e390:	d814      	bhi.n	800e3bc <__lshift+0x94>
 800e392:	6048      	str	r0, [r1, #4]
 800e394:	b108      	cbz	r0, 800e39a <__lshift+0x72>
 800e396:	f109 0502 	add.w	r5, r9, #2
 800e39a:	3d01      	subs	r5, #1
 800e39c:	4638      	mov	r0, r7
 800e39e:	f8c8 5010 	str.w	r5, [r8, #16]
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	f7ff fe32 	bl	800e00c <_Bfree>
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ae:	3101      	adds	r1, #1
 800e3b0:	005b      	lsls	r3, r3, #1
 800e3b2:	e7c7      	b.n	800e344 <__lshift+0x1c>
 800e3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	e7cd      	b.n	800e358 <__lshift+0x30>
 800e3bc:	4651      	mov	r1, sl
 800e3be:	e7dc      	b.n	800e37a <__lshift+0x52>
 800e3c0:	3904      	subs	r1, #4
 800e3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3ca:	459c      	cmp	ip, r3
 800e3cc:	d8f9      	bhi.n	800e3c2 <__lshift+0x9a>
 800e3ce:	e7e4      	b.n	800e39a <__lshift+0x72>

0800e3d0 <__mcmp>:
 800e3d0:	6903      	ldr	r3, [r0, #16]
 800e3d2:	690a      	ldr	r2, [r1, #16]
 800e3d4:	1a9b      	subs	r3, r3, r2
 800e3d6:	b530      	push	{r4, r5, lr}
 800e3d8:	d10c      	bne.n	800e3f4 <__mcmp+0x24>
 800e3da:	0092      	lsls	r2, r2, #2
 800e3dc:	3014      	adds	r0, #20
 800e3de:	3114      	adds	r1, #20
 800e3e0:	1884      	adds	r4, r0, r2
 800e3e2:	4411      	add	r1, r2
 800e3e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e3e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3ec:	4295      	cmp	r5, r2
 800e3ee:	d003      	beq.n	800e3f8 <__mcmp+0x28>
 800e3f0:	d305      	bcc.n	800e3fe <__mcmp+0x2e>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	bd30      	pop	{r4, r5, pc}
 800e3f8:	42a0      	cmp	r0, r4
 800e3fa:	d3f3      	bcc.n	800e3e4 <__mcmp+0x14>
 800e3fc:	e7fa      	b.n	800e3f4 <__mcmp+0x24>
 800e3fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e402:	e7f7      	b.n	800e3f4 <__mcmp+0x24>

0800e404 <__mdiff>:
 800e404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e408:	460d      	mov	r5, r1
 800e40a:	4607      	mov	r7, r0
 800e40c:	4611      	mov	r1, r2
 800e40e:	4628      	mov	r0, r5
 800e410:	4614      	mov	r4, r2
 800e412:	f7ff ffdd 	bl	800e3d0 <__mcmp>
 800e416:	1e06      	subs	r6, r0, #0
 800e418:	d108      	bne.n	800e42c <__mdiff+0x28>
 800e41a:	4631      	mov	r1, r6
 800e41c:	4638      	mov	r0, r7
 800e41e:	f7ff fdc1 	bl	800dfa4 <_Balloc>
 800e422:	2301      	movs	r3, #1
 800e424:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42c:	bfa4      	itt	ge
 800e42e:	4623      	movge	r3, r4
 800e430:	462c      	movge	r4, r5
 800e432:	4638      	mov	r0, r7
 800e434:	6861      	ldr	r1, [r4, #4]
 800e436:	bfa6      	itte	ge
 800e438:	461d      	movge	r5, r3
 800e43a:	2600      	movge	r6, #0
 800e43c:	2601      	movlt	r6, #1
 800e43e:	f7ff fdb1 	bl	800dfa4 <_Balloc>
 800e442:	692b      	ldr	r3, [r5, #16]
 800e444:	60c6      	str	r6, [r0, #12]
 800e446:	6926      	ldr	r6, [r4, #16]
 800e448:	f105 0914 	add.w	r9, r5, #20
 800e44c:	f104 0214 	add.w	r2, r4, #20
 800e450:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e454:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e458:	f100 0514 	add.w	r5, r0, #20
 800e45c:	f04f 0e00 	mov.w	lr, #0
 800e460:	f852 ab04 	ldr.w	sl, [r2], #4
 800e464:	f859 4b04 	ldr.w	r4, [r9], #4
 800e468:	fa1e f18a 	uxtah	r1, lr, sl
 800e46c:	b2a3      	uxth	r3, r4
 800e46e:	1ac9      	subs	r1, r1, r3
 800e470:	0c23      	lsrs	r3, r4, #16
 800e472:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e476:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e47a:	b289      	uxth	r1, r1
 800e47c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e480:	45c8      	cmp	r8, r9
 800e482:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e486:	4694      	mov	ip, r2
 800e488:	f845 3b04 	str.w	r3, [r5], #4
 800e48c:	d8e8      	bhi.n	800e460 <__mdiff+0x5c>
 800e48e:	45bc      	cmp	ip, r7
 800e490:	d304      	bcc.n	800e49c <__mdiff+0x98>
 800e492:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e496:	b183      	cbz	r3, 800e4ba <__mdiff+0xb6>
 800e498:	6106      	str	r6, [r0, #16]
 800e49a:	e7c5      	b.n	800e428 <__mdiff+0x24>
 800e49c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e4a0:	fa1e f381 	uxtah	r3, lr, r1
 800e4a4:	141a      	asrs	r2, r3, #16
 800e4a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e4b4:	f845 3b04 	str.w	r3, [r5], #4
 800e4b8:	e7e9      	b.n	800e48e <__mdiff+0x8a>
 800e4ba:	3e01      	subs	r6, #1
 800e4bc:	e7e9      	b.n	800e492 <__mdiff+0x8e>

0800e4be <__d2b>:
 800e4be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4c2:	460e      	mov	r6, r1
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	ec59 8b10 	vmov	r8, r9, d0
 800e4ca:	4615      	mov	r5, r2
 800e4cc:	f7ff fd6a 	bl	800dfa4 <_Balloc>
 800e4d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4da:	bb34      	cbnz	r4, 800e52a <__d2b+0x6c>
 800e4dc:	9301      	str	r3, [sp, #4]
 800e4de:	f1b8 0300 	subs.w	r3, r8, #0
 800e4e2:	d027      	beq.n	800e534 <__d2b+0x76>
 800e4e4:	a802      	add	r0, sp, #8
 800e4e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e4ea:	f7ff fe00 	bl	800e0ee <__lo0bits>
 800e4ee:	9900      	ldr	r1, [sp, #0]
 800e4f0:	b1f0      	cbz	r0, 800e530 <__d2b+0x72>
 800e4f2:	9a01      	ldr	r2, [sp, #4]
 800e4f4:	f1c0 0320 	rsb	r3, r0, #32
 800e4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4fc:	430b      	orrs	r3, r1
 800e4fe:	40c2      	lsrs	r2, r0
 800e500:	617b      	str	r3, [r7, #20]
 800e502:	9201      	str	r2, [sp, #4]
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	61bb      	str	r3, [r7, #24]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	bf14      	ite	ne
 800e50c:	2102      	movne	r1, #2
 800e50e:	2101      	moveq	r1, #1
 800e510:	6139      	str	r1, [r7, #16]
 800e512:	b1c4      	cbz	r4, 800e546 <__d2b+0x88>
 800e514:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e518:	4404      	add	r4, r0
 800e51a:	6034      	str	r4, [r6, #0]
 800e51c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e520:	6028      	str	r0, [r5, #0]
 800e522:	4638      	mov	r0, r7
 800e524:	b003      	add	sp, #12
 800e526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e52a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e52e:	e7d5      	b.n	800e4dc <__d2b+0x1e>
 800e530:	6179      	str	r1, [r7, #20]
 800e532:	e7e7      	b.n	800e504 <__d2b+0x46>
 800e534:	a801      	add	r0, sp, #4
 800e536:	f7ff fdda 	bl	800e0ee <__lo0bits>
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	617b      	str	r3, [r7, #20]
 800e53e:	2101      	movs	r1, #1
 800e540:	6139      	str	r1, [r7, #16]
 800e542:	3020      	adds	r0, #32
 800e544:	e7e5      	b.n	800e512 <__d2b+0x54>
 800e546:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e54a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e54e:	6030      	str	r0, [r6, #0]
 800e550:	6918      	ldr	r0, [r3, #16]
 800e552:	f7ff fdad 	bl	800e0b0 <__hi0bits>
 800e556:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e55a:	e7e1      	b.n	800e520 <__d2b+0x62>

0800e55c <_calloc_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	fb02 f401 	mul.w	r4, r2, r1
 800e562:	4621      	mov	r1, r4
 800e564:	f000 f808 	bl	800e578 <_malloc_r>
 800e568:	4605      	mov	r5, r0
 800e56a:	b118      	cbz	r0, 800e574 <_calloc_r+0x18>
 800e56c:	4622      	mov	r2, r4
 800e56e:	2100      	movs	r1, #0
 800e570:	f7fe fb43 	bl	800cbfa <memset>
 800e574:	4628      	mov	r0, r5
 800e576:	bd38      	pop	{r3, r4, r5, pc}

0800e578 <_malloc_r>:
 800e578:	b570      	push	{r4, r5, r6, lr}
 800e57a:	1ccd      	adds	r5, r1, #3
 800e57c:	f025 0503 	bic.w	r5, r5, #3
 800e580:	3508      	adds	r5, #8
 800e582:	2d0c      	cmp	r5, #12
 800e584:	bf38      	it	cc
 800e586:	250c      	movcc	r5, #12
 800e588:	2d00      	cmp	r5, #0
 800e58a:	4606      	mov	r6, r0
 800e58c:	db01      	blt.n	800e592 <_malloc_r+0x1a>
 800e58e:	42a9      	cmp	r1, r5
 800e590:	d903      	bls.n	800e59a <_malloc_r+0x22>
 800e592:	230c      	movs	r3, #12
 800e594:	6033      	str	r3, [r6, #0]
 800e596:	2000      	movs	r0, #0
 800e598:	bd70      	pop	{r4, r5, r6, pc}
 800e59a:	f000 f857 	bl	800e64c <__malloc_lock>
 800e59e:	4a21      	ldr	r2, [pc, #132]	; (800e624 <_malloc_r+0xac>)
 800e5a0:	6814      	ldr	r4, [r2, #0]
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	b991      	cbnz	r1, 800e5cc <_malloc_r+0x54>
 800e5a6:	4c20      	ldr	r4, [pc, #128]	; (800e628 <_malloc_r+0xb0>)
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	b91b      	cbnz	r3, 800e5b4 <_malloc_r+0x3c>
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f000 f83d 	bl	800e62c <_sbrk_r>
 800e5b2:	6020      	str	r0, [r4, #0]
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f000 f838 	bl	800e62c <_sbrk_r>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d124      	bne.n	800e60a <_malloc_r+0x92>
 800e5c0:	230c      	movs	r3, #12
 800e5c2:	6033      	str	r3, [r6, #0]
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f000 f842 	bl	800e64e <__malloc_unlock>
 800e5ca:	e7e4      	b.n	800e596 <_malloc_r+0x1e>
 800e5cc:	680b      	ldr	r3, [r1, #0]
 800e5ce:	1b5b      	subs	r3, r3, r5
 800e5d0:	d418      	bmi.n	800e604 <_malloc_r+0x8c>
 800e5d2:	2b0b      	cmp	r3, #11
 800e5d4:	d90f      	bls.n	800e5f6 <_malloc_r+0x7e>
 800e5d6:	600b      	str	r3, [r1, #0]
 800e5d8:	50cd      	str	r5, [r1, r3]
 800e5da:	18cc      	adds	r4, r1, r3
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f000 f836 	bl	800e64e <__malloc_unlock>
 800e5e2:	f104 000b 	add.w	r0, r4, #11
 800e5e6:	1d23      	adds	r3, r4, #4
 800e5e8:	f020 0007 	bic.w	r0, r0, #7
 800e5ec:	1ac3      	subs	r3, r0, r3
 800e5ee:	d0d3      	beq.n	800e598 <_malloc_r+0x20>
 800e5f0:	425a      	negs	r2, r3
 800e5f2:	50e2      	str	r2, [r4, r3]
 800e5f4:	e7d0      	b.n	800e598 <_malloc_r+0x20>
 800e5f6:	428c      	cmp	r4, r1
 800e5f8:	684b      	ldr	r3, [r1, #4]
 800e5fa:	bf16      	itet	ne
 800e5fc:	6063      	strne	r3, [r4, #4]
 800e5fe:	6013      	streq	r3, [r2, #0]
 800e600:	460c      	movne	r4, r1
 800e602:	e7eb      	b.n	800e5dc <_malloc_r+0x64>
 800e604:	460c      	mov	r4, r1
 800e606:	6849      	ldr	r1, [r1, #4]
 800e608:	e7cc      	b.n	800e5a4 <_malloc_r+0x2c>
 800e60a:	1cc4      	adds	r4, r0, #3
 800e60c:	f024 0403 	bic.w	r4, r4, #3
 800e610:	42a0      	cmp	r0, r4
 800e612:	d005      	beq.n	800e620 <_malloc_r+0xa8>
 800e614:	1a21      	subs	r1, r4, r0
 800e616:	4630      	mov	r0, r6
 800e618:	f000 f808 	bl	800e62c <_sbrk_r>
 800e61c:	3001      	adds	r0, #1
 800e61e:	d0cf      	beq.n	800e5c0 <_malloc_r+0x48>
 800e620:	6025      	str	r5, [r4, #0]
 800e622:	e7db      	b.n	800e5dc <_malloc_r+0x64>
 800e624:	20005ddc 	.word	0x20005ddc
 800e628:	20005de0 	.word	0x20005de0

0800e62c <_sbrk_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4c06      	ldr	r4, [pc, #24]	; (800e648 <_sbrk_r+0x1c>)
 800e630:	2300      	movs	r3, #0
 800e632:	4605      	mov	r5, r0
 800e634:	4608      	mov	r0, r1
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	f7f3 fc26 	bl	8001e88 <_sbrk>
 800e63c:	1c43      	adds	r3, r0, #1
 800e63e:	d102      	bne.n	800e646 <_sbrk_r+0x1a>
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	b103      	cbz	r3, 800e646 <_sbrk_r+0x1a>
 800e644:	602b      	str	r3, [r5, #0]
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	20006d5c 	.word	0x20006d5c

0800e64c <__malloc_lock>:
 800e64c:	4770      	bx	lr

0800e64e <__malloc_unlock>:
 800e64e:	4770      	bx	lr

0800e650 <_init>:
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	bf00      	nop
 800e654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e656:	bc08      	pop	{r3}
 800e658:	469e      	mov	lr, r3
 800e65a:	4770      	bx	lr

0800e65c <_fini>:
 800e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65e:	bf00      	nop
 800e660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e662:	bc08      	pop	{r3}
 800e664:	469e      	mov	lr, r3
 800e666:	4770      	bx	lr
