
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d108  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003710  0801d3a8  0801d3a8  0002d3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020ab8  08020ab8  00030ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08020ac0  08020ac0  00030ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020ac8  08020ac8  00030ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  24000000  08020acc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000885c  2400020c  08020cd8  0004020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24008a68  08020cd8  00048a68  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08020cd8  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0006b541  00000000  00000000  0004023a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000b1c5  00000000  00000000  000ab77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002b78  00000000  00000000  000b6940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000028e0  00000000  00000000  000b94b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00053be0  00000000  00000000  000bbd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0003ee59  00000000  00000000  0010f978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001bac50  00000000  00000000  0014e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00309421  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c3b4  00000000  00000000  0030949c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d390 	.word	0x0801d390

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	0801d390 	.word	0x0801d390

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b4:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <SystemInit+0x104>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ba:	4a3e      	ldr	r2, [pc, #248]	; (80007b4 <SystemInit+0x104>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <SystemInit+0x104>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4a3a      	ldr	r2, [pc, #232]	; (80007b4 <SystemInit+0x104>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d0:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <SystemInit+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	2b06      	cmp	r3, #6
 80006da:	d807      	bhi.n	80006ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <SystemInit+0x108>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f023 030f 	bic.w	r3, r3, #15
 80006e4:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <SystemInit+0x108>)
 80006e6:	f043 0307 	orr.w	r3, r3, #7
 80006ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <SystemInit+0x10c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a32      	ldr	r2, [pc, #200]	; (80007bc <SystemInit+0x10c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <SystemInit+0x10c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <SystemInit+0x10c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	492e      	ldr	r1, [pc, #184]	; (80007bc <SystemInit+0x10c>)
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <SystemInit+0x110>)
 8000706:	4013      	ands	r3, r2
 8000708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <SystemInit+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	2b07      	cmp	r3, #7
 8000714:	d907      	bls.n	8000726 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemInit+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f023 030f 	bic.w	r3, r3, #15
 800071e:	4a26      	ldr	r2, [pc, #152]	; (80007b8 <SystemInit+0x108>)
 8000720:	f043 0307 	orr.w	r3, r3, #7
 8000724:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemInit+0x10c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemInit+0x10c>)
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <SystemInit+0x114>)
 800073c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemInit+0x10c>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemInit+0x118>)
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemInit+0x10c>)
 8000746:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemInit+0x11c>)
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <SystemInit+0x10c>)
 800074c:	2200      	movs	r2, #0
 800074e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <SystemInit+0x10c>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <SystemInit+0x11c>)
 8000754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemInit+0x10c>)
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <SystemInit+0x10c>)
 800075e:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SystemInit+0x11c>)
 8000760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <SystemInit+0x10c>)
 8000764:	2200      	movs	r2, #0
 8000766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <SystemInit+0x10c>)
 800076e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x10c>)
 8000776:	2200      	movs	r2, #0
 8000778:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <SystemInit+0x120>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <SystemInit+0x120>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <SystemInit+0x124>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <SystemInit+0x128>)
 800078c:	4013      	ands	r3, r2
 800078e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000792:	d202      	bcs.n	800079a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SystemInit+0x12c>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <SystemInit+0x130>)
 800079c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SystemInit+0x104>)
 80007a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	52002000 	.word	0x52002000
 80007bc:	58024400 	.word	0x58024400
 80007c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c4:	02020200 	.word	0x02020200
 80007c8:	01ff0000 	.word	0x01ff0000
 80007cc:	01010280 	.word	0x01010280
 80007d0:	580000c0 	.word	0x580000c0
 80007d4:	5c001000 	.word	0x5c001000
 80007d8:	ffff0000 	.word	0xffff0000
 80007dc:	51008108 	.word	0x51008108
 80007e0:	52004000 	.word	0x52004000

080007e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <vApplicationGetIdleTaskMemory+0x2c>)
 80007f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <vApplicationGetIdleTaskMemory+0x30>)
 80007fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000802:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	24000228 	.word	0x24000228
 8000814:	2400027c 	.word	0x2400027c

08000818 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Create the thread(s) */
  /* definition and creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 800081c:	f019 fb76 	bl	8019f0c <initCortexM7>
  /* USER CODE END RTOS_THREADS */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800082c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <SCB_EnableICache+0x3c>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800083c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <SCB_EnableICache+0x3c>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <SCB_EnableICache+0x3c>)
 8000846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000850:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <SCB_EnableDCache+0x7c>)
 800086c:	2200      	movs	r2, #0
 800086e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000872:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <SCB_EnableDCache+0x7c>)
 8000878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800087c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	0b5b      	lsrs	r3, r3, #13
 8000882:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000886:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000890:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	015a      	lsls	r2, r3, #5
 8000896:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800089a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a0:	490f      	ldr	r1, [pc, #60]	; (80008e0 <SCB_EnableDCache+0x7c>)
 80008a2:	4313      	orrs	r3, r2
 80008a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	60ba      	str	r2, [r7, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1ef      	bne.n	8000892 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	60fa      	str	r2, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e5      	bne.n	8000888 <SCB_EnableDCache+0x24>
 80008bc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <SCB_EnableDCache+0x7c>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <SCB_EnableDCache+0x7c>)
 80008c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ca:	6153      	str	r3, [r2, #20]
 80008cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008ea:	f000 f949 	bl	8000b80 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80008ee:	f7ff ff99 	bl	8000824 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80008f2:	f7ff ffb7 	bl	8000864 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fc:	bf00      	nop
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <main+0xa4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <main+0x30>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dcf4      	bgt.n	80008fe <main+0x1a>
  if ( timeout < 0 )
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	da01      	bge.n	800091e <main+0x3a>
  {
  Error_Handler();
 800091a:	f000 f98d 	bl	8000c38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 ffdf 	bl	80018e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f833 	bl	800098c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <main+0xa4>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a16      	ldr	r2, [pc, #88]	; (8000988 <main+0xa4>)
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <main+0xa4>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000944:	2000      	movs	r0, #0
 8000946:	f005 f91d 	bl	8005b84 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800094a:	2100      	movs	r1, #0
 800094c:	2000      	movs	r0, #0
 800094e:	f005 f949 	bl	8005be4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000956:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000958:	bf00      	nop
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <main+0xa4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <main+0x8c>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	dcf4      	bgt.n	800095a <main+0x76>
if ( timeout < 0 )
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da01      	bge.n	800097a <main+0x96>
{
Error_Handler();
 8000976:	f000 f95f 	bl	8000c38 <Error_Handler>
  MX_SPI2_Init();
  MX_SPI3_Init();
  MX_SPI4_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();*/
  MX_USART3_UART_Init();
 800097a:	f000 fb75 	bl	8001068 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800097e:	f7ff ff4b 	bl	8000818 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000982:	f009 ffb1 	bl	800a8e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000986:	e7fe      	b.n	8000986 <main+0xa2>
 8000988:	58024400 	.word	0x58024400

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ce      	sub	sp, #312	; 0x138
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000996:	224c      	movs	r2, #76	; 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f019 fff7 	bl	801a98e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80009a4:	2220      	movs	r2, #32
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f019 fff0 	bl	801a98e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4618      	mov	r0, r3
 80009b4:	23bc      	movs	r3, #188	; 0xbc
 80009b6:	461a      	mov	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f019 ffe8 	bl	801a98e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009be:	2004      	movs	r0, #4
 80009c0:	f005 f934 	bl	8005c2c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	4b68      	ldr	r3, [pc, #416]	; (8000b70 <SystemClock_Config+0x1e4>)
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	4a67      	ldr	r2, [pc, #412]	; (8000b70 <SystemClock_Config+0x1e4>)
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009d8:	4b65      	ldr	r3, [pc, #404]	; (8000b70 <SystemClock_Config+0x1e4>)
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	f003 0201 	and.w	r2, r3, #1
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	4b63      	ldr	r3, [pc, #396]	; (8000b74 <SystemClock_Config+0x1e8>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a62      	ldr	r2, [pc, #392]	; (8000b74 <SystemClock_Config+0x1e8>)
 80009ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <SystemClock_Config+0x1e8>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a06:	bf00      	nop
 8000a08:	4b5a      	ldr	r3, [pc, #360]	; (8000b74 <SystemClock_Config+0x1e8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a14:	d1f8      	bne.n	8000a08 <SystemClock_Config+0x7c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000a16:	4b58      	ldr	r3, [pc, #352]	; (8000b78 <SystemClock_Config+0x1ec>)
 8000a18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a1c:	4a56      	ldr	r2, [pc, #344]	; (8000b78 <SystemClock_Config+0x1ec>)
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000a26:	4b54      	ldr	r3, [pc, #336]	; (8000b78 <SystemClock_Config+0x1ec>)
 8000a28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	681b      	ldr	r3, [r3, #0]

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    RCC_OscInitStruct.PLL.PLLM = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    RCC_OscInitStruct.PLL.PLLN = 400;
 8000a64:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    HAL_StatusTypeDef ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a90:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 f923 	bl	8005ce0 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    if(ret != HAL_OK)
 8000aa0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d000      	beq.n	8000aaa <SystemClock_Config+0x11e>
    {
      while(1);
 8000aa8:	e7fe      	b.n	8000aa8 <SystemClock_Config+0x11c>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                                   RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000abc:	2308      	movs	r3, #8
 8000abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000adc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 fd0c 	bl	8006500 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

    if(ret != HAL_OK)
 8000aee:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d000      	beq.n	8000af8 <SystemClock_Config+0x16c>
      {
        while(1);
 8000af6:	e7fe      	b.n	8000af6 <SystemClock_Config+0x16a>
      }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <SystemClock_Config+0x1f0>)
 8000afe:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_QSPI;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2203      	movs	r2, #3
 8000b26:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2218      	movs	r2, #24
 8000b2e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4618      	mov	r0, r3
 8000b56:	f006 f899 	bl	8006c8c <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x1d8>
  {
    Error_Handler();
 8000b60:	f000 f86a 	bl	8000c38 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	0240b01b 	.word	0x0240b01b

08000b80 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b92:	f001 f801 	bl	8001b98 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x30040000;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MPU_Config+0x8c>)
 8000b9c:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f81b 	bl	8001c00 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as Normal Non Cacheable
       for LwIP RAM heap which contains the Tx buffers */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x30044000;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MPU_Config+0x90>)
 8000bd0:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000bd2:	230d      	movs	r3, #13
 8000bd4:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 f801 	bl	8001c00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f000 ffe0 	bl	8001bc4 <HAL_MPU_Enable>

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	30040000 	.word	0x30040000
 8000c10:	30044000 	.word	0x30044000

08000c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c26:	f000 fe97 	bl	8001958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40001400 	.word	0x40001400

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <Error_Handler+0x6>

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x38>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x38>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x38>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	210f      	movs	r1, #15
 8000c68:	f06f 0001 	mvn.w	r0, #1
 8000c6c:	f000 ff6c 	bl	8001b48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b090      	sub	sp, #64	; 0x40
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d827      	bhi.n	8000cda <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	2037      	movs	r0, #55	; 0x37
 8000c90:	f000 ff5a 	bl	8001b48 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c94:	2037      	movs	r0, #55	; 0x37
 8000c96:	f000 ff71 	bl	8001b7c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c9a:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <HAL_InitTick+0xc4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_InitTick+0xc8>)
 8000ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <HAL_InitTick+0xc8>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_InitTick+0xc8>)
 8000cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbe:	f107 0210 	add.w	r2, r7, #16
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 ff9d 	bl	8006c08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d106      	bne.n	8000ce6 <HAL_InitTick+0x6a>
 8000cd8:	e001      	b.n	8000cde <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e02b      	b.n	8000d36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cde:	f005 ff67 	bl	8006bb0 <HAL_RCC_GetPCLK1Freq>
 8000ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ce4:	e004      	b.n	8000cf0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce6:	f005 ff63 	bl	8006bb0 <HAL_RCC_GetPCLK1Freq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_InitTick+0xcc>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	0c9b      	lsrs	r3, r3, #18
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_InitTick+0xd4>)
 8000d02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d10:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d20:	f007 fd78 	bl	8008814 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d104      	bne.n	8000d34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <HAL_InitTick+0xd0>)
 8000d2c:	f007 fdd4 	bl	80088d8 <HAL_TIM_Base_Start_IT>
 8000d30:	4603      	mov	r3, r0
 8000d32:	e000      	b.n	8000d36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3740      	adds	r7, #64	; 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000008 	.word	0x24000008
 8000d44:	58024400 	.word	0x58024400
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	24005168 	.word	0x24005168
 8000d50:	40001400 	.word	0x40001400

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA1_Stream2_IRQHandler+0x10>)
 8000d86:	f001 fd33 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24004c10 	.word	0x24004c10

08000d94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA1_Stream3_IRQHandler+0x10>)
 8000d9a:	f001 fd29 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24005000 	.word	0x24005000

08000da8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <DMA1_Stream4_IRQHandler+0x10>)
 8000dae:	f001 fd1f 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	240050f0 	.word	0x240050f0

08000dbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA1_Stream5_IRQHandler+0x10>)
 8000dc2:	f001 fd15 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	24004d88 	.word	0x24004d88

08000dd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <DMA1_Stream6_IRQHandler+0x10>)
 8000dd6:	f001 fd0b 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24004c88 	.word	0x24004c88

08000de4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <SPI2_IRQHandler+0x10>)
 8000dea:	f007 fa4f 	bl	800828c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24004b88 	.word	0x24004b88

08000df8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <DMA1_Stream7_IRQHandler+0x10>)
 8000dfe:	f001 fcf7 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24004e00 	.word	0x24004e00

08000e0c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <SPI3_IRQHandler+0x10>)
 8000e12:	f007 fa3b 	bl	800828c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24004d00 	.word	0x24004d00

08000e20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM7_IRQHandler+0x10>)
 8000e26:	f007 fd8d 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	24005168 	.word	0x24005168

08000e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA2_Stream0_IRQHandler+0x10>)
 8000e3a:	f001 fcd9 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24005510 	.word	0x24005510

08000e48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <DMA2_Stream1_IRQHandler+0x10>)
 8000e4e:	f001 fccf 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	24005420 	.word	0x24005420

08000e5c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <DMA2_Stream4_IRQHandler+0x10>)
 8000e62:	f001 fcc5 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	240051b4 	.word	0x240051b4

08000e70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <ETH_IRQHandler+0x10>)
 8000e76:	f003 fafb 	bl	8004470 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24005894 	.word	0x24005894

08000e84 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <DMA2_Stream5_IRQHandler+0x10>)
 8000e8a:	f001 fcb1 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24005588 	.word	0x24005588

08000e98 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <DMA2_Stream6_IRQHandler+0x10>)
 8000e9e:	f001 fca7 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2400522c 	.word	0x2400522c

08000eac <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <DMA2_Stream7_IRQHandler+0x10>)
 8000eb2:	f001 fc9d 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	24005498 	.word	0x24005498

08000ec0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <SPI4_IRQHandler+0x10>)
 8000ec6:	f007 f9e1 	bl	800828c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24004e78 	.word	0x24004e78

08000ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	return 1;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_kill>:

int _kill(int pid, int sig)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <_kill+0x20>)
 8000ef0:	2216      	movs	r2, #22
 8000ef2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	24008a3c 	.word	0x24008a3c

08000f08 <_exit>:

void _exit (int status)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffe5 	bl	8000ee4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f1a:	e7fe      	b.n	8000f1a <_exit+0x12>

08000f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e009      	b.n	8000f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf1      	blt.n	8000f68 <_write+0x12>
	}
	return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d205      	bcs.n	8001034 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <_sbrk+0x6c>)
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001032:	e009      	b.n	8001048 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	24080000 	.word	0x24080000
 8001058:	00000800 	.word	0x00000800
 800105c:	24000a7c 	.word	0x24000a7c
 8001060:	24008a68 	.word	0x24008a68
 8001064:	24008a3c 	.word	0x24008a3c

08001068 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <MX_USART3_UART_Init+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010b2:	f007 fe47 	bl	8008d44 <HAL_UART_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010bc:	f7ff fdbc 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010c4:	f008 fe77 	bl	8009db6 <HAL_UARTEx_SetTxFifoThreshold>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ce:	f7ff fdb3 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010d6:	f008 feac 	bl	8009e32 <HAL_UARTEx_SetRxFifoThreshold>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f7ff fdaa 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010e6:	f008 fe2d 	bl	8009d44 <HAL_UARTEx_DisableFifoMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f7ff fda2 	bl	8000c38 <Error_Handler>
  }

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2400531c 	.word	0x2400531c
 80010fc:	40004800 	.word	0x40004800

08001100 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a90      	ldr	r2, [pc, #576]	; (8001360 <HAL_UART_MspInit+0x260>)
 800111e:	4293      	cmp	r3, r2
 8001120:	f040 808c 	bne.w	800123c <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001124:	4b8f      	ldr	r3, [pc, #572]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800112a:	4a8e      	ldr	r2, [pc, #568]	; (8001364 <HAL_UART_MspInit+0x264>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001134:	4b8b      	ldr	r3, [pc, #556]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	4a86      	ldr	r2, [pc, #536]	; (8001364 <HAL_UART_MspInit+0x264>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001152:	4b84      	ldr	r3, [pc, #528]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001160:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001172:	2307      	movs	r3, #7
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	487a      	ldr	r0, [pc, #488]	; (8001368 <HAL_UART_MspInit+0x268>)
 800117e:	f004 fb2f 	bl	80057e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8001182:	4b7a      	ldr	r3, [pc, #488]	; (800136c <HAL_UART_MspInit+0x26c>)
 8001184:	4a7a      	ldr	r2, [pc, #488]	; (8001370 <HAL_UART_MspInit+0x270>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001188:	4b78      	ldr	r3, [pc, #480]	; (800136c <HAL_UART_MspInit+0x26c>)
 800118a:	2229      	movs	r2, #41	; 0x29
 800118c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118e:	4b77      	ldr	r3, [pc, #476]	; (800136c <HAL_UART_MspInit+0x26c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <HAL_UART_MspInit+0x26c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b74      	ldr	r3, [pc, #464]	; (800136c <HAL_UART_MspInit+0x26c>)
 800119c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	4b72      	ldr	r3, [pc, #456]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a8:	4b70      	ldr	r3, [pc, #448]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011c2:	486a      	ldr	r0, [pc, #424]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011c4:	f000 fd74 	bl	8001cb0 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80011ce:	f7ff fd33 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011d6:	679a      	str	r2, [r3, #120]	; 0x78
 80011d8:	4a64      	ldr	r2, [pc, #400]	; (800136c <HAL_UART_MspInit+0x26c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_UART_MspInit+0x274>)
 80011e0:	4a65      	ldr	r2, [pc, #404]	; (8001378 <HAL_UART_MspInit+0x278>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80011e4:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_UART_MspInit+0x274>)
 80011e6:	222a      	movs	r2, #42	; 0x2a
 80011e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_UART_MspInit+0x274>)
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f0:	4b60      	ldr	r3, [pc, #384]	; (8001374 <HAL_UART_MspInit+0x274>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_UART_MspInit+0x274>)
 80011f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_UART_MspInit+0x274>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_UART_MspInit+0x274>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800120a:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <HAL_UART_MspInit+0x274>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001210:	4b58      	ldr	r3, [pc, #352]	; (8001374 <HAL_UART_MspInit+0x274>)
 8001212:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001216:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_UART_MspInit+0x274>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800121e:	4855      	ldr	r0, [pc, #340]	; (8001374 <HAL_UART_MspInit+0x274>)
 8001220:	f000 fd46 	bl	8001cb0 <HAL_DMA_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800122a:	f7ff fd05 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <HAL_UART_MspInit+0x274>)
 8001232:	675a      	str	r2, [r3, #116]	; 0x74
 8001234:	4a4f      	ldr	r2, [pc, #316]	; (8001374 <HAL_UART_MspInit+0x274>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800123a:	e1aa      	b.n	8001592 <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_UART_MspInit+0x27c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 80a6 	bne.w	8001394 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001248:	4b46      	ldr	r3, [pc, #280]	; (8001364 <HAL_UART_MspInit+0x264>)
 800124a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800124e:	4a45      	ldr	r2, [pc, #276]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <HAL_UART_MspInit+0x264>)
 800125a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a3d      	ldr	r2, [pc, #244]	; (8001364 <HAL_UART_MspInit+0x264>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_UART_MspInit+0x264>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001284:	2360      	movs	r3, #96	; 0x60
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001294:	2307      	movs	r3, #7
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	4838      	ldr	r0, [pc, #224]	; (8001380 <HAL_UART_MspInit+0x280>)
 80012a0:	f004 fa9e 	bl	80057e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <HAL_UART_MspInit+0x288>)
 80012a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012ac:	222b      	movs	r2, #43	; 0x2b
 80012ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012e4:	4827      	ldr	r0, [pc, #156]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012e6:	f000 fce3 	bl	8001cb0 <HAL_DMA_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80012f0:	f7ff fca2 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a23      	ldr	r2, [pc, #140]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012f8:	679a      	str	r2, [r3, #120]	; 0x78
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_UART_MspInit+0x284>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001302:	4a23      	ldr	r2, [pc, #140]	; (8001390 <HAL_UART_MspInit+0x290>)
 8001304:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001308:	222c      	movs	r2, #44	; 0x2c
 800130a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_UART_MspInit+0x28c>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_UART_MspInit+0x28c>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_UART_MspInit+0x28c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001338:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_UART_MspInit+0x28c>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001342:	f000 fcb5 	bl	8001cb0 <HAL_DMA_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_UART_MspInit+0x250>
      Error_Handler();
 800134c:	f7ff fc74 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001354:	675a      	str	r2, [r3, #116]	; 0x74
 8001356:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_UART_MspInit+0x28c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800135c:	e119      	b.n	8001592 <HAL_UART_MspInit+0x492>
 800135e:	bf00      	nop
 8001360:	40011000 	.word	0x40011000
 8001364:	58024400 	.word	0x58024400
 8001368:	58020000 	.word	0x58020000
 800136c:	24005510 	.word	0x24005510
 8001370:	40020410 	.word	0x40020410
 8001374:	24005420 	.word	0x24005420
 8001378:	40020428 	.word	0x40020428
 800137c:	40004400 	.word	0x40004400
 8001380:	58020c00 	.word	0x58020c00
 8001384:	240051b4 	.word	0x240051b4
 8001388:	40020470 	.word	0x40020470
 800138c:	24005588 	.word	0x24005588
 8001390:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a80      	ldr	r2, [pc, #512]	; (800159c <HAL_UART_MspInit+0x49c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d16b      	bne.n	8001476 <HAL_UART_MspInit+0x376>
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 80013a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a4:	4a7e      	ldr	r2, [pc, #504]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 80013a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013ae:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 80013b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80013bc:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013be:	4a7a      	ldr	r2, [pc, #488]	; (80015a8 <HAL_UART_MspInit+0x4a8>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013c4:	222d      	movs	r2, #45	; 0x2d
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c8:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d4:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e2:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013ee:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80013fc:	4869      	ldr	r0, [pc, #420]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 80013fe:	f000 fc57 	bl	8001cb0 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x30c>
      Error_Handler();
 8001408:	f7ff fc16 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 8001410:	679a      	str	r2, [r3, #120]	; 0x78
 8001412:	4a64      	ldr	r2, [pc, #400]	; (80015a4 <HAL_UART_MspInit+0x4a4>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8001418:	4b64      	ldr	r3, [pc, #400]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 800141a:	4a65      	ldr	r2, [pc, #404]	; (80015b0 <HAL_UART_MspInit+0x4b0>)
 800141c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001420:	222e      	movs	r2, #46	; 0x2e
 8001422:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001424:	4b61      	ldr	r3, [pc, #388]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001430:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001438:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143e:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001444:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 800144c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001450:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001458:	4854      	ldr	r0, [pc, #336]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 800145a:	f000 fc29 	bl	8001cb0 <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x368>
      Error_Handler();
 8001464:	f7ff fbe8 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 800146c:	675a      	str	r2, [r3, #116]	; 0x74
 800146e:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_UART_MspInit+0x4ac>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001474:	e08d      	b.n	8001592 <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART6)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_UART_MspInit+0x4b4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	f040 8088 	bne.w	8001592 <HAL_UART_MspInit+0x492>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 8001484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001488:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 8001494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_UART_MspInit+0x4a0>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80014ce:	2307      	movs	r3, #7
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <HAL_UART_MspInit+0x4b8>)
 80014da:	f004 f981 	bl	80057e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 80014de:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 80014e0:	4a37      	ldr	r2, [pc, #220]	; (80015c0 <HAL_UART_MspInit+0x4c0>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 80014e6:	2247      	movs	r2, #71	; 0x47
 80014e8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 80014f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800151c:	4827      	ldr	r0, [pc, #156]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 800151e:	f000 fbc7 	bl	8001cb0 <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001528:	f7ff fb86 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a23      	ldr	r2, [pc, #140]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 8001530:	679a      	str	r2, [r3, #120]	; 0x78
 8001532:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_UART_MspInit+0x4bc>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_UART_MspInit+0x4c8>)
 800153c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001540:	2248      	movs	r2, #72	; 0x48
 8001542:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001556:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001576:	4813      	ldr	r0, [pc, #76]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 8001578:	f000 fb9a 	bl	8001cb0 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0x486>
      Error_Handler();
 8001582:	f7ff fb59 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 800158a:	675a      	str	r2, [r3, #116]	; 0x74
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_UART_MspInit+0x4c4>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	; 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40004800 	.word	0x40004800
 80015a0:	58024400 	.word	0x58024400
 80015a4:	240052a4 	.word	0x240052a4
 80015a8:	40020440 	.word	0x40020440
 80015ac:	240053a8 	.word	0x240053a8
 80015b0:	40020458 	.word	0x40020458
 80015b4:	40011400 	.word	0x40011400
 80015b8:	58020800 	.word	0x58020800
 80015bc:	2400522c 	.word	0x2400522c
 80015c0:	400204a0 	.word	0x400204a0
 80015c4:	24005498 	.word	0x24005498
 80015c8:	400204b8 	.word	0x400204b8

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015d0:	f7ff f86e 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015d6:	e003      	b.n	80015e0 <LoopCopyDataInit>

080015d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80015da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015de:	3104      	adds	r1, #4

080015e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015e0:	480a      	ldr	r0, [pc, #40]	; (800160c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80015e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e8:	d3f6      	bcc.n	80015d8 <CopyDataInit>
  ldr  r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80015ec:	e002      	b.n	80015f4 <LoopFillZerobss>

080015ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015f0:	f842 3b04 	str.w	r3, [r2], #4

080015f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f8:	d3f9      	bcc.n	80015ee <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f019 f95f 	bl	801a8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff f971 	bl	80008e4 <main>
  bx  lr    
 8001602:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001604:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001608:	08020acc 	.word	0x08020acc
  ldr  r0, =_sdata
 800160c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001610:	2400020c 	.word	0x2400020c
  ldr  r2, =_sbss
 8001614:	2400020c 	.word	0x2400020c
  ldr  r3, = _ebss
 8001618:	24008a68 	.word	0x24008a68

0800161c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC3_IRQHandler>

0800161e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <LAN8742_RegisterBusIO+0x28>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <LAN8742_RegisterBusIO+0x28>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <LAN8742_RegisterBusIO+0x28>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164a:	e014      	b.n	8001676 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d17c      	bne.n	800179c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2220      	movs	r2, #32
 80016b4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e01c      	b.n	80016f6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f107 0208 	add.w	r2, r7, #8
 80016c4:	2112      	movs	r1, #18
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	4798      	blx	r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da03      	bge.n	80016d8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80016d0:	f06f 0304 	mvn.w	r3, #4
 80016d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80016d6:	e00b      	b.n	80016f0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d105      	bne.n	80016f0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
         break;
 80016ee:	e005      	b.n	80016fc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b1f      	cmp	r3, #31
 80016fa:	d9df      	bls.n	80016bc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b1f      	cmp	r3, #31
 8001702:	d902      	bls.n	800170a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001704:	f06f 0302 	mvn.w	r3, #2
 8001708:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d145      	bne.n	800179c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6810      	ldr	r0, [r2, #0]
 8001718:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800171c:	2100      	movs	r1, #0
 800171e:	4798      	blx	r3
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	db37      	blt.n	8001796 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6810      	ldr	r0, [r2, #0]
 800172e:	f107 0208 	add.w	r2, r7, #8
 8001732:	2100      	movs	r1, #0
 8001734:	4798      	blx	r3
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	db28      	blt.n	800178e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4798      	blx	r3
 8001742:	4603      	mov	r3, r0
 8001744:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001746:	e01c      	b.n	8001782 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4798      	blx	r3
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800175a:	d80e      	bhi.n	800177a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6810      	ldr	r0, [r2, #0]
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	2100      	movs	r1, #0
 800176a:	4798      	blx	r3
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	da07      	bge.n	8001782 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001772:	f06f 0304 	mvn.w	r3, #4
 8001776:	613b      	str	r3, [r7, #16]
                 break;
 8001778:	e010      	b.n	800179c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800177a:	f06f 0301 	mvn.w	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
               break;
 8001780:	e00c      	b.n	800179c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1dd      	bne.n	8001748 <LAN8742_Init+0xc6>
 800178c:	e006      	b.n	800179c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800178e:	f06f 0304 	mvn.w	r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	e002      	b.n	800179c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001796:	f06f 0303 	mvn.w	r3, #3
 800179a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d112      	bne.n	80017c8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4798      	blx	r3
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80017ac:	bf00      	nop
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4798      	blx	r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017c0:	d9f5      	bls.n	80017ae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80017c8:	693b      	ldr	r3, [r7, #16]
 }
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6810      	ldr	r0, [r2, #0]
 80017e6:	f107 020c 	add.w	r2, r7, #12
 80017ea:	2101      	movs	r1, #1
 80017ec:	4798      	blx	r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	da02      	bge.n	80017fa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017f4:	f06f 0304 	mvn.w	r3, #4
 80017f8:	e06e      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6810      	ldr	r0, [r2, #0]
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	2101      	movs	r1, #1
 8001808:	4798      	blx	r3
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	da02      	bge.n	8001816 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001810:	f06f 0304 	mvn.w	r3, #4
 8001814:	e060      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001820:	2301      	movs	r3, #1
 8001822:	e059      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	f107 020c 	add.w	r2, r7, #12
 8001830:	2100      	movs	r1, #0
 8001832:	4798      	blx	r3
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	da02      	bge.n	8001840 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800183a:	f06f 0304 	mvn.w	r3, #4
 800183e:	e04b      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11b      	bne.n	8001882 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <LAN8742_GetLinkState+0x90>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800185e:	2302      	movs	r3, #2
 8001860:	e03a      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800186c:	2303      	movs	r3, #3
 800186e:	e033      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800187a:	2304      	movs	r3, #4
 800187c:	e02c      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800187e:	2305      	movs	r3, #5
 8001880:	e02a      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6810      	ldr	r0, [r2, #0]
 800188a:	f107 020c 	add.w	r2, r7, #12
 800188e:	211f      	movs	r1, #31
 8001890:	4798      	blx	r3
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	da02      	bge.n	800189e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001898:	f06f 0304 	mvn.w	r3, #4
 800189c:	e01c      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80018a8:	2306      	movs	r3, #6
 80018aa:	e015      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	2b18      	cmp	r3, #24
 80018b4:	d101      	bne.n	80018ba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018b6:	2302      	movs	r3, #2
 80018b8:	e00e      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 031c 	and.w	r3, r3, #28
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d101      	bne.n	80018c8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e007      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 031c 	and.w	r3, r3, #28
 80018ce:	2b14      	cmp	r3, #20
 80018d0:	d101      	bne.n	80018d6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018d2:	2304      	movs	r3, #4
 80018d4:	e000      	b.n	80018d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018d6:	2305      	movs	r3, #5
    }				
  }
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e6:	2003      	movs	r0, #3
 80018e8:	f000 f923 	bl	8001b32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018ec:	f004 ffbe 	bl	800686c <HAL_RCC_GetSysClockFreq>
 80018f0:	4601      	mov	r1, r0
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_Init+0x68>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <HAL_Init+0x6c>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa21 f303 	lsr.w	r3, r1, r3
 8001908:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_Init+0x68>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_Init+0x6c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x70>)
 8001922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_Init+0x74>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff f9a6 	bl	8000c7c <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e002      	b.n	8001940 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800193a:	f7ff f981 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58024400 	.word	0x58024400
 800194c:	080204b8 	.word	0x080204b8
 8001950:	24000004 	.word	0x24000004
 8001954:	24000000 	.word	0x24000000

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	2400000c 	.word	0x2400000c
 800197c:	240057a4 	.word	0x240057a4

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	240057a4 	.word	0x240057a4

08001998 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetREVID+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0c1b      	lsrs	r3, r3, #16
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	5c001000 	.word	0x5c001000

080019b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019c0:	4904      	ldr	r1, [pc, #16]	; (80019d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	58000400 	.word	0x58000400

080019d8 <__NVIC_SetPriorityGrouping>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <__NVIC_SetPriorityGrouping+0x40>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x40>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00
 8001a1c:	05fa0000 	.word	0x05fa0000

08001a20 <__NVIC_GetPriorityGrouping>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff4c 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b56:	f7ff ff63 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	6978      	ldr	r0, [r7, #20]
 8001b62:	f7ff ffb3 	bl	8001acc <NVIC_EncodePriority>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff82 	bl	8001a78 <__NVIC_SetPriority>
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff56 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b9c:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MPU_Disable+0x24>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_MPU_Disable+0x24>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_MPU_Disable+0x28>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	e000ed90 	.word	0xe000ed90

08001bc4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_MPU_Enable+0x34>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_MPU_Enable+0x38>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_MPU_Enable+0x38>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001be6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed90 	.word	0xe000ed90
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	785a      	ldrb	r2, [r3, #1]
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c0e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d029      	beq.n	8001c6c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c18:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
 8001c24:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7adb      	ldrb	r3, [r3, #11]
 8001c2a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7a9b      	ldrb	r3, [r3, #10]
 8001c32:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7b5b      	ldrb	r3, [r3, #13]
 8001c3a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7bdb      	ldrb	r3, [r3, #15]
 8001c4a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7a5b      	ldrb	r3, [r3, #9]
 8001c52:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7a1b      	ldrb	r3, [r3, #8]
 8001c5a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c5c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c66:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c68:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c6a:	e005      	b.n	8001c78 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_MPU_ConfigRegion+0x84>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed90 	.word	0xe000ed90

08001c88 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_GetCurrentCPUID+0x24>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d101      	bne.n	8001c9e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e000      	b.n	8001ca0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001c9e:	2301      	movs	r3, #1
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff fe62 	bl	8001980 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e316      	b.n	80022f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <HAL_DMA_Init+0x1b8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d04a      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a65      	ldr	r2, [pc, #404]	; (8001e6c <HAL_DMA_Init+0x1bc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d045      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_DMA_Init+0x1c0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d040      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <HAL_DMA_Init+0x1c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d03b      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a60      	ldr	r2, [pc, #384]	; (8001e78 <HAL_DMA_Init+0x1c8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d036      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5f      	ldr	r2, [pc, #380]	; (8001e7c <HAL_DMA_Init+0x1cc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d031      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_DMA_Init+0x1d0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02c      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <HAL_DMA_Init+0x1d4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d027      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_DMA_Init+0x1d8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d022      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a59      	ldr	r2, [pc, #356]	; (8001e8c <HAL_DMA_Init+0x1dc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d01d      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <HAL_DMA_Init+0x1e0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d018      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_DMA_Init+0x1e4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a54      	ldr	r2, [pc, #336]	; (8001e98 <HAL_DMA_Init+0x1e8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00e      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a53      	ldr	r2, [pc, #332]	; (8001e9c <HAL_DMA_Init+0x1ec>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_DMA_Init+0x1f0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_DMA_Init+0xb8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a50      	ldr	r2, [pc, #320]	; (8001ea4 <HAL_DMA_Init+0x1f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Init+0xbc>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_Init+0xbe>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 813b 	beq.w	8001fea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a37      	ldr	r2, [pc, #220]	; (8001e68 <HAL_DMA_Init+0x1b8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d04a      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a36      	ldr	r2, [pc, #216]	; (8001e6c <HAL_DMA_Init+0x1bc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d045      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <HAL_DMA_Init+0x1c0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d040      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a33      	ldr	r2, [pc, #204]	; (8001e74 <HAL_DMA_Init+0x1c4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d03b      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <HAL_DMA_Init+0x1c8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d036      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a30      	ldr	r2, [pc, #192]	; (8001e7c <HAL_DMA_Init+0x1cc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d031      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <HAL_DMA_Init+0x1d0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02c      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_DMA_Init+0x1d4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d027      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_DMA_Init+0x1d8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <HAL_DMA_Init+0x1dc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d01d      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <HAL_DMA_Init+0x1e0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_DMA_Init+0x1e4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <HAL_DMA_Init+0x1e8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <HAL_DMA_Init+0x1ec>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_DMA_Init+0x1f0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Init+0x174>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_DMA_Init+0x1f4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d108      	bne.n	8001e36 <HAL_DMA_Init+0x186>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e007      	b.n	8001e46 <HAL_DMA_Init+0x196>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e46:	e02f      	b.n	8001ea8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e48:	f7ff fd9a 	bl	8001980 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d928      	bls.n	8001ea8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e246      	b.n	80022f6 <HAL_DMA_Init+0x646>
 8001e68:	40020010 	.word	0x40020010
 8001e6c:	40020028 	.word	0x40020028
 8001e70:	40020040 	.word	0x40020040
 8001e74:	40020058 	.word	0x40020058
 8001e78:	40020070 	.word	0x40020070
 8001e7c:	40020088 	.word	0x40020088
 8001e80:	400200a0 	.word	0x400200a0
 8001e84:	400200b8 	.word	0x400200b8
 8001e88:	40020410 	.word	0x40020410
 8001e8c:	40020428 	.word	0x40020428
 8001e90:	40020440 	.word	0x40020440
 8001e94:	40020458 	.word	0x40020458
 8001e98:	40020470 	.word	0x40020470
 8001e9c:	40020488 	.word	0x40020488
 8001ea0:	400204a0 	.word	0x400204a0
 8001ea4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1c8      	bne.n	8001e48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4b83      	ldr	r3, [pc, #524]	; (80020d0 <HAL_DMA_Init+0x420>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ece:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4313      	orrs	r3, r2
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f0c:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <HAL_DMA_Init+0x424>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b71      	ldr	r3, [pc, #452]	; (80020d8 <HAL_DMA_Init+0x428>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f18:	d328      	bcc.n	8001f6c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b28      	cmp	r3, #40	; 0x28
 8001f20:	d903      	bls.n	8001f2a <HAL_DMA_Init+0x27a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b2e      	cmp	r3, #46	; 0x2e
 8001f28:	d917      	bls.n	8001f5a <HAL_DMA_Init+0x2aa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f30:	d903      	bls.n	8001f3a <HAL_DMA_Init+0x28a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b42      	cmp	r3, #66	; 0x42
 8001f38:	d90f      	bls.n	8001f5a <HAL_DMA_Init+0x2aa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b46      	cmp	r3, #70	; 0x46
 8001f40:	d903      	bls.n	8001f4a <HAL_DMA_Init+0x29a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b48      	cmp	r3, #72	; 0x48
 8001f48:	d907      	bls.n	8001f5a <HAL_DMA_Init+0x2aa>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b4e      	cmp	r3, #78	; 0x4e
 8001f50:	d905      	bls.n	8001f5e <HAL_DMA_Init+0x2ae>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b52      	cmp	r3, #82	; 0x52
 8001f58:	d801      	bhi.n	8001f5e <HAL_DMA_Init+0x2ae>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_DMA_Init+0x2b0>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f6a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d117      	bne.n	8001fc6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f001 fbfd 	bl	80037a8 <DMA_CheckFifoParam>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e197      	b.n	80022f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f001 fb38 	bl	8003644 <DMA_CalcBaseAndBitshift>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	223f      	movs	r2, #63	; 0x3f
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e0cd      	b.n	8002186 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <HAL_DMA_Init+0x42c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d022      	beq.n	800203a <HAL_DMA_Init+0x38a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <HAL_DMA_Init+0x430>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_Init+0x38a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a38      	ldr	r2, [pc, #224]	; (80020e4 <HAL_DMA_Init+0x434>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <HAL_DMA_Init+0x38a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a36      	ldr	r2, [pc, #216]	; (80020e8 <HAL_DMA_Init+0x438>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_DMA_Init+0x38a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a35      	ldr	r2, [pc, #212]	; (80020ec <HAL_DMA_Init+0x43c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Init+0x38a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <HAL_DMA_Init+0x440>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_DMA_Init+0x38a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_DMA_Init+0x444>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_DMA_Init+0x38a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <HAL_DMA_Init+0x448>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_DMA_Init+0x38e>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_DMA_Init+0x390>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8097 	beq.w	8002174 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a24      	ldr	r2, [pc, #144]	; (80020dc <HAL_DMA_Init+0x42c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d021      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_DMA_Init+0x430>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01c      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <HAL_DMA_Init+0x434>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d017      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_DMA_Init+0x438>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d012      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_DMA_Init+0x43c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_DMA_Init+0x440>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d008      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_DMA_Init+0x444>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <HAL_DMA_Init+0x3e4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_DMA_Init+0x448>)
 8002092:	4293      	cmp	r3, r2
 8002094:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_DMA_Init+0x44c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d020      	beq.n	8002100 <HAL_DMA_Init+0x450>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b80      	cmp	r3, #128	; 0x80
 80020c4:	d102      	bne.n	80020cc <HAL_DMA_Init+0x41c>
 80020c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ca:	e01a      	b.n	8002102 <HAL_DMA_Init+0x452>
 80020cc:	2300      	movs	r3, #0
 80020ce:	e018      	b.n	8002102 <HAL_DMA_Init+0x452>
 80020d0:	fe10803f 	.word	0xfe10803f
 80020d4:	5c001000 	.word	0x5c001000
 80020d8:	ffff0000 	.word	0xffff0000
 80020dc:	58025408 	.word	0x58025408
 80020e0:	5802541c 	.word	0x5802541c
 80020e4:	58025430 	.word	0x58025430
 80020e8:	58025444 	.word	0x58025444
 80020ec:	58025458 	.word	0x58025458
 80020f0:	5802546c 	.word	0x5802546c
 80020f4:	58025480 	.word	0x58025480
 80020f8:	58025494 	.word	0x58025494
 80020fc:	fffe000f 	.word	0xfffe000f
 8002100:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68d2      	ldr	r2, [r2, #12]
 8002106:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002130:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <HAL_DMA_Init+0x650>)
 8002148:	4413      	add	r3, r2
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_DMA_Init+0x654>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	009a      	lsls	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f001 fa73 	bl	8003644 <DMA_CalcBaseAndBitshift>
 800215e:	4603      	mov	r3, r0
 8002160:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	e008      	b.n	8002186 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2240      	movs	r2, #64	; 0x40
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0b7      	b.n	80022f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5f      	ldr	r2, [pc, #380]	; (8002308 <HAL_DMA_Init+0x658>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d072      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a5d      	ldr	r2, [pc, #372]	; (800230c <HAL_DMA_Init+0x65c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d06d      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <HAL_DMA_Init+0x660>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d068      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_DMA_Init+0x664>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d063      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a59      	ldr	r2, [pc, #356]	; (8002318 <HAL_DMA_Init+0x668>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d05e      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_DMA_Init+0x66c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d059      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_DMA_Init+0x670>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d054      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a54      	ldr	r2, [pc, #336]	; (8002324 <HAL_DMA_Init+0x674>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04f      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a53      	ldr	r2, [pc, #332]	; (8002328 <HAL_DMA_Init+0x678>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a51      	ldr	r2, [pc, #324]	; (800232c <HAL_DMA_Init+0x67c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d045      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a50      	ldr	r2, [pc, #320]	; (8002330 <HAL_DMA_Init+0x680>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d040      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <HAL_DMA_Init+0x684>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d03b      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_DMA_Init+0x688>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d036      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4b      	ldr	r2, [pc, #300]	; (800233c <HAL_DMA_Init+0x68c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <HAL_DMA_Init+0x690>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_DMA_Init+0x694>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d027      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a47      	ldr	r2, [pc, #284]	; (8002348 <HAL_DMA_Init+0x698>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a45      	ldr	r2, [pc, #276]	; (800234c <HAL_DMA_Init+0x69c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a44      	ldr	r2, [pc, #272]	; (8002350 <HAL_DMA_Init+0x6a0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HAL_DMA_Init+0x6a4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <HAL_DMA_Init+0x6a8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_DMA_Init+0x6ac>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_DMA_Init+0x6b0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Init+0x5c6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3c      	ldr	r2, [pc, #240]	; (8002364 <HAL_DMA_Init+0x6b4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_DMA_Init+0x5ca>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_DMA_Init+0x5cc>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d032      	beq.n	80022e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f001 fb0d 	bl	80038a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d102      	bne.n	8002294 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d010      	beq.n	80022d4 <HAL_DMA_Init+0x624>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d80c      	bhi.n	80022d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f001 fb8a 	bl	80039d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	e008      	b.n	80022e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	a7fdabf8 	.word	0xa7fdabf8
 8002304:	cccccccd 	.word	0xcccccccd
 8002308:	40020010 	.word	0x40020010
 800230c:	40020028 	.word	0x40020028
 8002310:	40020040 	.word	0x40020040
 8002314:	40020058 	.word	0x40020058
 8002318:	40020070 	.word	0x40020070
 800231c:	40020088 	.word	0x40020088
 8002320:	400200a0 	.word	0x400200a0
 8002324:	400200b8 	.word	0x400200b8
 8002328:	40020410 	.word	0x40020410
 800232c:	40020428 	.word	0x40020428
 8002330:	40020440 	.word	0x40020440
 8002334:	40020458 	.word	0x40020458
 8002338:	40020470 	.word	0x40020470
 800233c:	40020488 	.word	0x40020488
 8002340:	400204a0 	.word	0x400204a0
 8002344:	400204b8 	.word	0x400204b8
 8002348:	58025408 	.word	0x58025408
 800234c:	5802541c 	.word	0x5802541c
 8002350:	58025430 	.word	0x58025430
 8002354:	58025444 	.word	0x58025444
 8002358:	58025458 	.word	0x58025458
 800235c:	5802546c 	.word	0x5802546c
 8002360:	58025480 	.word	0x58025480
 8002364:	58025494 	.word	0x58025494

08002368 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e205      	b.n	8002786 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d004      	beq.n	8002390 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e1fa      	b.n	8002786 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a8c      	ldr	r2, [pc, #560]	; (80025c8 <HAL_DMA_Abort_IT+0x260>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04a      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a8b      	ldr	r2, [pc, #556]	; (80025cc <HAL_DMA_Abort_IT+0x264>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d045      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a89      	ldr	r2, [pc, #548]	; (80025d0 <HAL_DMA_Abort_IT+0x268>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d040      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a88      	ldr	r2, [pc, #544]	; (80025d4 <HAL_DMA_Abort_IT+0x26c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03b      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a86      	ldr	r2, [pc, #536]	; (80025d8 <HAL_DMA_Abort_IT+0x270>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d036      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a85      	ldr	r2, [pc, #532]	; (80025dc <HAL_DMA_Abort_IT+0x274>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d031      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a83      	ldr	r2, [pc, #524]	; (80025e0 <HAL_DMA_Abort_IT+0x278>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02c      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a82      	ldr	r2, [pc, #520]	; (80025e4 <HAL_DMA_Abort_IT+0x27c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d027      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a80      	ldr	r2, [pc, #512]	; (80025e8 <HAL_DMA_Abort_IT+0x280>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7f      	ldr	r2, [pc, #508]	; (80025ec <HAL_DMA_Abort_IT+0x284>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01d      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7d      	ldr	r2, [pc, #500]	; (80025f0 <HAL_DMA_Abort_IT+0x288>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d018      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_DMA_Abort_IT+0x28c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_DMA_Abort_IT+0x290>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a79      	ldr	r2, [pc, #484]	; (80025fc <HAL_DMA_Abort_IT+0x294>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a77      	ldr	r2, [pc, #476]	; (8002600 <HAL_DMA_Abort_IT+0x298>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_DMA_Abort_IT+0xc8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a76      	ldr	r2, [pc, #472]	; (8002604 <HAL_DMA_Abort_IT+0x29c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Abort_IT+0xcc>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_DMA_Abort_IT+0xce>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d065      	beq.n	8002506 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_DMA_Abort_IT+0x260>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04a      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5e      	ldr	r2, [pc, #376]	; (80025cc <HAL_DMA_Abort_IT+0x264>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d045      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a5d      	ldr	r2, [pc, #372]	; (80025d0 <HAL_DMA_Abort_IT+0x268>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d040      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a5b      	ldr	r2, [pc, #364]	; (80025d4 <HAL_DMA_Abort_IT+0x26c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d03b      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_DMA_Abort_IT+0x270>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d036      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_DMA_Abort_IT+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d031      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a57      	ldr	r2, [pc, #348]	; (80025e0 <HAL_DMA_Abort_IT+0x278>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d02c      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <HAL_DMA_Abort_IT+0x27c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d027      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a54      	ldr	r2, [pc, #336]	; (80025e8 <HAL_DMA_Abort_IT+0x280>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d022      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_DMA_Abort_IT+0x284>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01d      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a51      	ldr	r2, [pc, #324]	; (80025f0 <HAL_DMA_Abort_IT+0x288>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d018      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a4f      	ldr	r2, [pc, #316]	; (80025f4 <HAL_DMA_Abort_IT+0x28c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4e      	ldr	r2, [pc, #312]	; (80025f8 <HAL_DMA_Abort_IT+0x290>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00e      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_DMA_Abort_IT+0x294>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_DMA_Abort_IT+0x298>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x17a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a49      	ldr	r2, [pc, #292]	; (8002604 <HAL_DMA_Abort_IT+0x29c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d108      	bne.n	80024f4 <HAL_DMA_Abort_IT+0x18c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e147      	b.n	8002784 <HAL_DMA_Abort_IT+0x41c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e13e      	b.n	8002784 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 020e 	bic.w	r2, r2, #14
 8002514:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_DMA_Abort_IT+0x260>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d04a      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_DMA_Abort_IT+0x264>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d045      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a28      	ldr	r2, [pc, #160]	; (80025d0 <HAL_DMA_Abort_IT+0x268>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d040      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <HAL_DMA_Abort_IT+0x26c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d03b      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_DMA_Abort_IT+0x270>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d036      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_DMA_Abort_IT+0x274>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d031      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_DMA_Abort_IT+0x278>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d02c      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_DMA_Abort_IT+0x27c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d027      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_DMA_Abort_IT+0x280>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_DMA_Abort_IT+0x284>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01d      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_DMA_Abort_IT+0x288>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d018      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_DMA_Abort_IT+0x28c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_DMA_Abort_IT+0x290>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00e      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_DMA_Abort_IT+0x294>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <HAL_DMA_Abort_IT+0x298>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d004      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x24e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <HAL_DMA_Abort_IT+0x29c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d128      	bne.n	8002608 <HAL_DMA_Abort_IT+0x2a0>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e027      	b.n	8002618 <HAL_DMA_Abort_IT+0x2b0>
 80025c8:	40020010 	.word	0x40020010
 80025cc:	40020028 	.word	0x40020028
 80025d0:	40020040 	.word	0x40020040
 80025d4:	40020058 	.word	0x40020058
 80025d8:	40020070 	.word	0x40020070
 80025dc:	40020088 	.word	0x40020088
 80025e0:	400200a0 	.word	0x400200a0
 80025e4:	400200b8 	.word	0x400200b8
 80025e8:	40020410 	.word	0x40020410
 80025ec:	40020428 	.word	0x40020428
 80025f0:	40020440 	.word	0x40020440
 80025f4:	40020458 	.word	0x40020458
 80025f8:	40020470 	.word	0x40020470
 80025fc:	40020488 	.word	0x40020488
 8002600:	400204a0 	.word	0x400204a0
 8002604:	400204b8 	.word	0x400204b8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <HAL_DMA_Abort_IT+0x428>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d072      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5b      	ldr	r2, [pc, #364]	; (8002794 <HAL_DMA_Abort_IT+0x42c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d06d      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a59      	ldr	r2, [pc, #356]	; (8002798 <HAL_DMA_Abort_IT+0x430>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d068      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a58      	ldr	r2, [pc, #352]	; (800279c <HAL_DMA_Abort_IT+0x434>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d063      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_DMA_Abort_IT+0x438>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d05e      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a55      	ldr	r2, [pc, #340]	; (80027a4 <HAL_DMA_Abort_IT+0x43c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d059      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a53      	ldr	r2, [pc, #332]	; (80027a8 <HAL_DMA_Abort_IT+0x440>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d054      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_DMA_Abort_IT+0x444>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04f      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_DMA_Abort_IT+0x448>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_DMA_Abort_IT+0x44c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_DMA_Abort_IT+0x450>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4c      	ldr	r2, [pc, #304]	; (80027bc <HAL_DMA_Abort_IT+0x454>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <HAL_DMA_Abort_IT+0x458>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_DMA_Abort_IT+0x45c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_DMA_Abort_IT+0x460>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a46      	ldr	r2, [pc, #280]	; (80027cc <HAL_DMA_Abort_IT+0x464>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a44      	ldr	r2, [pc, #272]	; (80027d0 <HAL_DMA_Abort_IT+0x468>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a43      	ldr	r2, [pc, #268]	; (80027d4 <HAL_DMA_Abort_IT+0x46c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <HAL_DMA_Abort_IT+0x470>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a40      	ldr	r2, [pc, #256]	; (80027dc <HAL_DMA_Abort_IT+0x474>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3e      	ldr	r2, [pc, #248]	; (80027e0 <HAL_DMA_Abort_IT+0x478>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3d      	ldr	r2, [pc, #244]	; (80027e4 <HAL_DMA_Abort_IT+0x47c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <HAL_DMA_Abort_IT+0x480>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_Abort_IT+0x3a0>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <HAL_DMA_Abort_IT+0x484>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_DMA_Abort_IT+0x3a4>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_DMA_Abort_IT+0x3a6>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2201      	movs	r2, #1
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002740:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002758:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002762:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	58025408 	.word	0x58025408
 80027d4:	5802541c 	.word	0x5802541c
 80027d8:	58025430 	.word	0x58025430
 80027dc:	58025444 	.word	0x58025444
 80027e0:	58025458 	.word	0x58025458
 80027e4:	5802546c 	.word	0x5802546c
 80027e8:	58025480 	.word	0x58025480
 80027ec:	58025494 	.word	0x58025494

080027f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027fc:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_DMA_IRQHandler+0x1ac>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <HAL_DMA_IRQHandler+0x1b0>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0a9b      	lsrs	r3, r3, #10
 8002808:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a5f      	ldr	r2, [pc, #380]	; (80029a4 <HAL_DMA_IRQHandler+0x1b4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <HAL_DMA_IRQHandler+0x1b8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a5c      	ldr	r2, [pc, #368]	; (80029ac <HAL_DMA_IRQHandler+0x1bc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5a      	ldr	r2, [pc, #360]	; (80029b0 <HAL_DMA_IRQHandler+0x1c0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_DMA_IRQHandler+0x1c4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a57      	ldr	r2, [pc, #348]	; (80029b8 <HAL_DMA_IRQHandler+0x1c8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_DMA_IRQHandler+0x1cc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <HAL_DMA_IRQHandler+0x1d0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a53      	ldr	r2, [pc, #332]	; (80029c4 <HAL_DMA_IRQHandler+0x1d4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a51      	ldr	r2, [pc, #324]	; (80029c8 <HAL_DMA_IRQHandler+0x1d8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a50      	ldr	r2, [pc, #320]	; (80029cc <HAL_DMA_IRQHandler+0x1dc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_DMA_IRQHandler+0x1e0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_DMA_IRQHandler+0x1e4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_DMA_IRQHandler+0x1e8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_DMA_IRQHandler+0x1ec>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xd2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <HAL_DMA_IRQHandler+0x1f0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_IRQHandler+0xd6>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_IRQHandler+0xd8>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 842b 	beq.w	8003124 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2208      	movs	r2, #8
 80028d8:	409a      	lsls	r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80a2 	beq.w	8002a28 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <HAL_DMA_IRQHandler+0x1b4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d04a      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <HAL_DMA_IRQHandler+0x1b8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d045      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <HAL_DMA_IRQHandler+0x1bc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d040      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <HAL_DMA_IRQHandler+0x1c0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d03b      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <HAL_DMA_IRQHandler+0x1c4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d036      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_DMA_IRQHandler+0x1c8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d031      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_DMA_IRQHandler+0x1cc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02c      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_DMA_IRQHandler+0x1d0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d027      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_DMA_IRQHandler+0x1d4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d022      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_DMA_IRQHandler+0x1d8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d01d      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_DMA_IRQHandler+0x1dc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d018      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_DMA_IRQHandler+0x1e0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_DMA_IRQHandler+0x1e4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00e      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_DMA_IRQHandler+0x1e8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_DMA_IRQHandler+0x1ec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_DMA_IRQHandler+0x194>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_DMA_IRQHandler+0x1f0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d12f      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x1f4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e02e      	b.n	80029f8 <HAL_DMA_IRQHandler+0x208>
 800299a:	bf00      	nop
 800299c:	24000000 	.word	0x24000000
 80029a0:	1b4e81b5 	.word	0x1b4e81b5
 80029a4:	40020010 	.word	0x40020010
 80029a8:	40020028 	.word	0x40020028
 80029ac:	40020040 	.word	0x40020040
 80029b0:	40020058 	.word	0x40020058
 80029b4:	40020070 	.word	0x40020070
 80029b8:	40020088 	.word	0x40020088
 80029bc:	400200a0 	.word	0x400200a0
 80029c0:	400200b8 	.word	0x400200b8
 80029c4:	40020410 	.word	0x40020410
 80029c8:	40020428 	.word	0x40020428
 80029cc:	40020440 	.word	0x40020440
 80029d0:	40020458 	.word	0x40020458
 80029d4:	40020470 	.word	0x40020470
 80029d8:	40020488 	.word	0x40020488
 80029dc:	400204a0 	.word	0x400204a0
 80029e0:	400204b8 	.word	0x400204b8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0204 	bic.w	r2, r2, #4
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2208      	movs	r2, #8
 8002a16:	409a      	lsls	r2, r3
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <HAL_DMA_IRQHandler+0x3f8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d04a      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a67      	ldr	r2, [pc, #412]	; (8002bec <HAL_DMA_IRQHandler+0x3fc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d045      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a66      	ldr	r2, [pc, #408]	; (8002bf0 <HAL_DMA_IRQHandler+0x400>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d040      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a64      	ldr	r2, [pc, #400]	; (8002bf4 <HAL_DMA_IRQHandler+0x404>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d03b      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a63      	ldr	r2, [pc, #396]	; (8002bf8 <HAL_DMA_IRQHandler+0x408>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d036      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <HAL_DMA_IRQHandler+0x40c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d031      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a60      	ldr	r2, [pc, #384]	; (8002c00 <HAL_DMA_IRQHandler+0x410>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d02c      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_DMA_IRQHandler+0x414>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d027      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_DMA_IRQHandler+0x418>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_DMA_IRQHandler+0x41c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01d      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <HAL_DMA_IRQHandler+0x420>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d018      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_DMA_IRQHandler+0x424>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a57      	ldr	r2, [pc, #348]	; (8002c18 <HAL_DMA_IRQHandler+0x428>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00e      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a55      	ldr	r2, [pc, #340]	; (8002c1c <HAL_DMA_IRQHandler+0x42c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a54      	ldr	r2, [pc, #336]	; (8002c20 <HAL_DMA_IRQHandler+0x430>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_DMA_IRQHandler+0x2ee>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_DMA_IRQHandler+0x434>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10a      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x304>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e003      	b.n	8002afc <HAL_DMA_IRQHandler+0x30c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2201      	movs	r2, #1
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	f043 0202 	orr.w	r2, r3, #2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2204      	movs	r2, #4
 8002b26:	409a      	lsls	r2, r3
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 808f 	beq.w	8002c50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <HAL_DMA_IRQHandler+0x3f8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d04a      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_DMA_IRQHandler+0x3fc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d045      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_DMA_IRQHandler+0x400>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d040      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_DMA_IRQHandler+0x404>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d03b      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <HAL_DMA_IRQHandler+0x408>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d036      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <HAL_DMA_IRQHandler+0x40c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d031      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_DMA_IRQHandler+0x410>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d02c      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <HAL_DMA_IRQHandler+0x414>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d027      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_DMA_IRQHandler+0x418>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_DMA_IRQHandler+0x41c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01d      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_DMA_IRQHandler+0x420>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_DMA_IRQHandler+0x424>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_DMA_IRQHandler+0x428>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_DMA_IRQHandler+0x42c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <HAL_DMA_IRQHandler+0x430>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x3e2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_DMA_IRQHandler+0x434>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12a      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x438>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e023      	b.n	8002c30 <HAL_DMA_IRQHandler+0x440>
 8002be8:	40020010 	.word	0x40020010
 8002bec:	40020028 	.word	0x40020028
 8002bf0:	40020040 	.word	0x40020040
 8002bf4:	40020058 	.word	0x40020058
 8002bf8:	40020070 	.word	0x40020070
 8002bfc:	40020088 	.word	0x40020088
 8002c00:	400200a0 	.word	0x400200a0
 8002c04:	400200b8 	.word	0x400200b8
 8002c08:	40020410 	.word	0x40020410
 8002c0c:	40020428 	.word	0x40020428
 8002c10:	40020440 	.word	0x40020440
 8002c14:	40020458 	.word	0x40020458
 8002c18:	40020470 	.word	0x40020470
 8002c1c:	40020488 	.word	0x40020488
 8002c20:	400204a0 	.word	0x400204a0
 8002c24:	400204b8 	.word	0x400204b8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2210      	movs	r2, #16
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a6 	beq.w	8002db2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a85      	ldr	r2, [pc, #532]	; (8002e80 <HAL_DMA_IRQHandler+0x690>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d04a      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a83      	ldr	r2, [pc, #524]	; (8002e84 <HAL_DMA_IRQHandler+0x694>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d045      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a82      	ldr	r2, [pc, #520]	; (8002e88 <HAL_DMA_IRQHandler+0x698>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d040      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a80      	ldr	r2, [pc, #512]	; (8002e8c <HAL_DMA_IRQHandler+0x69c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7f      	ldr	r2, [pc, #508]	; (8002e90 <HAL_DMA_IRQHandler+0x6a0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d036      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a7d      	ldr	r2, [pc, #500]	; (8002e94 <HAL_DMA_IRQHandler+0x6a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	; (8002e98 <HAL_DMA_IRQHandler+0x6a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d02c      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7a      	ldr	r2, [pc, #488]	; (8002e9c <HAL_DMA_IRQHandler+0x6ac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a79      	ldr	r2, [pc, #484]	; (8002ea0 <HAL_DMA_IRQHandler+0x6b0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a77      	ldr	r2, [pc, #476]	; (8002ea4 <HAL_DMA_IRQHandler+0x6b4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a76      	ldr	r2, [pc, #472]	; (8002ea8 <HAL_DMA_IRQHandler+0x6b8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a74      	ldr	r2, [pc, #464]	; (8002eac <HAL_DMA_IRQHandler+0x6bc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a73      	ldr	r2, [pc, #460]	; (8002eb0 <HAL_DMA_IRQHandler+0x6c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <HAL_DMA_IRQHandler+0x6c4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a70      	ldr	r2, [pc, #448]	; (8002eb8 <HAL_DMA_IRQHandler+0x6c8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x516>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6e      	ldr	r2, [pc, #440]	; (8002ebc <HAL_DMA_IRQHandler+0x6cc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10a      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x52c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e009      	b.n	8002d30 <HAL_DMA_IRQHandler+0x540>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d03e      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d024      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
 8002d70:	e01f      	b.n	8002db2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01b      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	e016      	b.n	8002db2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2220      	movs	r2, #32
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8110 	beq.w	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2c      	ldr	r2, [pc, #176]	; (8002e80 <HAL_DMA_IRQHandler+0x690>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <HAL_DMA_IRQHandler+0x694>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d045      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_DMA_IRQHandler+0x698>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d040      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_DMA_IRQHandler+0x69c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d03b      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <HAL_DMA_IRQHandler+0x6a0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d036      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <HAL_DMA_IRQHandler+0x6a4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d031      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_DMA_IRQHandler+0x6a8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02c      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_DMA_IRQHandler+0x6ac>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d027      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_DMA_IRQHandler+0x6b0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_DMA_IRQHandler+0x6b4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01d      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_DMA_IRQHandler+0x6b8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_DMA_IRQHandler+0x6bc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_DMA_IRQHandler+0x6c0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_DMA_IRQHandler+0x6c4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_DMA_IRQHandler+0x6c8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x678>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_DMA_IRQHandler+0x6cc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d12b      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x6d0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e02a      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x6e4>
 8002e7e:	bf00      	nop
 8002e80:	40020010 	.word	0x40020010
 8002e84:	40020028 	.word	0x40020028
 8002e88:	40020040 	.word	0x40020040
 8002e8c:	40020058 	.word	0x40020058
 8002e90:	40020070 	.word	0x40020070
 8002e94:	40020088 	.word	0x40020088
 8002e98:	400200a0 	.word	0x400200a0
 8002e9c:	400200b8 	.word	0x400200b8
 8002ea0:	40020410 	.word	0x40020410
 8002ea4:	40020428 	.word	0x40020428
 8002ea8:	40020440 	.word	0x40020440
 8002eac:	40020458 	.word	0x40020458
 8002eb0:	40020470 	.word	0x40020470
 8002eb4:	40020488 	.word	0x40020488
 8002eb8:	400204a0 	.word	0x400204a0
 8002ebc:	400204b8 	.word	0x400204b8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8087 	beq.w	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d139      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0216 	bic.w	r2, r2, #22
 8002f04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x736>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	223f      	movs	r2, #63	; 0x3f
 8002f40:	409a      	lsls	r2, r3
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 834a 	beq.w	80035f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
          }
          return;
 8002f68:	e344      	b.n	80035f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d018      	beq.n	8002faa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02c      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e027      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d023      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
 8002fa8:	e01e      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0210 	bic.w	r2, r2, #16
 8002fc6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8306 	beq.w	80035fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8088 	beq.w	8003110 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2204      	movs	r2, #4
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7a      	ldr	r2, [pc, #488]	; (80031f8 <HAL_DMA_IRQHandler+0xa08>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04a      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a79      	ldr	r2, [pc, #484]	; (80031fc <HAL_DMA_IRQHandler+0xa0c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d045      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a77      	ldr	r2, [pc, #476]	; (8003200 <HAL_DMA_IRQHandler+0xa10>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d040      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a76      	ldr	r2, [pc, #472]	; (8003204 <HAL_DMA_IRQHandler+0xa14>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d03b      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a74      	ldr	r2, [pc, #464]	; (8003208 <HAL_DMA_IRQHandler+0xa18>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d036      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a73      	ldr	r2, [pc, #460]	; (800320c <HAL_DMA_IRQHandler+0xa1c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d031      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a71      	ldr	r2, [pc, #452]	; (8003210 <HAL_DMA_IRQHandler+0xa20>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02c      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a70      	ldr	r2, [pc, #448]	; (8003214 <HAL_DMA_IRQHandler+0xa24>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d027      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_DMA_IRQHandler+0xa28>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6d      	ldr	r2, [pc, #436]	; (800321c <HAL_DMA_IRQHandler+0xa2c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01d      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a6b      	ldr	r2, [pc, #428]	; (8003220 <HAL_DMA_IRQHandler+0xa30>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_DMA_IRQHandler+0xa34>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a68      	ldr	r2, [pc, #416]	; (8003228 <HAL_DMA_IRQHandler+0xa38>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a67      	ldr	r2, [pc, #412]	; (800322c <HAL_DMA_IRQHandler+0xa3c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a65      	ldr	r2, [pc, #404]	; (8003230 <HAL_DMA_IRQHandler+0xa40>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x8b8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a64      	ldr	r2, [pc, #400]	; (8003234 <HAL_DMA_IRQHandler+0xa44>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <HAL_DMA_IRQHandler+0x8ca>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e007      	b.n	80030ca <HAL_DMA_IRQHandler+0x8da>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d307      	bcc.n	80030e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f2      	bne.n	80030ca <HAL_DMA_IRQHandler+0x8da>
 80030e4:	e000      	b.n	80030e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80030e6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2203      	movs	r2, #3
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003106:	e003      	b.n	8003110 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8272 	beq.w	80035fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
 8003122:	e26c      	b.n	80035fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a43      	ldr	r2, [pc, #268]	; (8003238 <HAL_DMA_IRQHandler+0xa48>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a42      	ldr	r2, [pc, #264]	; (800323c <HAL_DMA_IRQHandler+0xa4c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a40      	ldr	r2, [pc, #256]	; (8003240 <HAL_DMA_IRQHandler+0xa50>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a3f      	ldr	r2, [pc, #252]	; (8003244 <HAL_DMA_IRQHandler+0xa54>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <HAL_DMA_IRQHandler+0xa58>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3c      	ldr	r2, [pc, #240]	; (800324c <HAL_DMA_IRQHandler+0xa5c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <HAL_DMA_IRQHandler+0xa60>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_DMA_IRQHandler+0x984>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a39      	ldr	r2, [pc, #228]	; (8003254 <HAL_DMA_IRQHandler+0xa64>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_DMA_IRQHandler+0x988>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_DMA_IRQHandler+0x98a>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 823f 	beq.w	80035fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2204      	movs	r2, #4
 8003192:	409a      	lsls	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80cd 	beq.w	8003338 <HAL_DMA_IRQHandler+0xb48>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80c7 	beq.w	8003338 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2204      	movs	r2, #4
 80031b4:	409a      	lsls	r2, r3
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d049      	beq.n	8003258 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8210 	beq.w	80035f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031e0:	e20a      	b.n	80035f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8206 	beq.w	80035f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031f4:	e200      	b.n	80035f8 <HAL_DMA_IRQHandler+0xe08>
 80031f6:	bf00      	nop
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
 8003238:	58025408 	.word	0x58025408
 800323c:	5802541c 	.word	0x5802541c
 8003240:	58025430 	.word	0x58025430
 8003244:	58025444 	.word	0x58025444
 8003248:	58025458 	.word	0x58025458
 800324c:	5802546c 	.word	0x5802546c
 8003250:	58025480 	.word	0x58025480
 8003254:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d160      	bne.n	8003324 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a8c      	ldr	r2, [pc, #560]	; (8003498 <HAL_DMA_IRQHandler+0xca8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d04a      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a8a      	ldr	r2, [pc, #552]	; (800349c <HAL_DMA_IRQHandler+0xcac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d045      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a89      	ldr	r2, [pc, #548]	; (80034a0 <HAL_DMA_IRQHandler+0xcb0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d040      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a87      	ldr	r2, [pc, #540]	; (80034a4 <HAL_DMA_IRQHandler+0xcb4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d03b      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a86      	ldr	r2, [pc, #536]	; (80034a8 <HAL_DMA_IRQHandler+0xcb8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d036      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a84      	ldr	r2, [pc, #528]	; (80034ac <HAL_DMA_IRQHandler+0xcbc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d031      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a83      	ldr	r2, [pc, #524]	; (80034b0 <HAL_DMA_IRQHandler+0xcc0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d02c      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a81      	ldr	r2, [pc, #516]	; (80034b4 <HAL_DMA_IRQHandler+0xcc4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d027      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a80      	ldr	r2, [pc, #512]	; (80034b8 <HAL_DMA_IRQHandler+0xcc8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a7e      	ldr	r2, [pc, #504]	; (80034bc <HAL_DMA_IRQHandler+0xccc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01d      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7d      	ldr	r2, [pc, #500]	; (80034c0 <HAL_DMA_IRQHandler+0xcd0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a7b      	ldr	r2, [pc, #492]	; (80034c4 <HAL_DMA_IRQHandler+0xcd4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_DMA_IRQHandler+0xcd8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a78      	ldr	r2, [pc, #480]	; (80034cc <HAL_DMA_IRQHandler+0xcdc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_DMA_IRQHandler+0xce0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_DMA_IRQHandler+0xb12>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a75      	ldr	r2, [pc, #468]	; (80034d4 <HAL_DMA_IRQHandler+0xce4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <HAL_DMA_IRQHandler+0xb24>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0208 	bic.w	r2, r2, #8
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e007      	b.n	8003324 <HAL_DMA_IRQHandler+0xb34>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0204 	bic.w	r2, r2, #4
 8003322:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8165 	beq.w	80035f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003336:	e15f      	b.n	80035f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2202      	movs	r2, #2
 8003342:	409a      	lsls	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80c5 	beq.w	80034d8 <HAL_DMA_IRQHandler+0xce8>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80bf 	beq.w	80034d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2202      	movs	r2, #2
 8003364:	409a      	lsls	r2, r3
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 813a 	beq.w	80035fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003390:	e134      	b.n	80035fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8130 	beq.w	80035fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033a4:	e12a      	b.n	80035fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d168      	bne.n	8003482 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_DMA_IRQHandler+0xca8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d04a      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a37      	ldr	r2, [pc, #220]	; (800349c <HAL_DMA_IRQHandler+0xcac>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d045      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a35      	ldr	r2, [pc, #212]	; (80034a0 <HAL_DMA_IRQHandler+0xcb0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d040      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a34      	ldr	r2, [pc, #208]	; (80034a4 <HAL_DMA_IRQHandler+0xcb4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d03b      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a32      	ldr	r2, [pc, #200]	; (80034a8 <HAL_DMA_IRQHandler+0xcb8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d036      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_DMA_IRQHandler+0xcbc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d031      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <HAL_DMA_IRQHandler+0xcc0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02c      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2e      	ldr	r2, [pc, #184]	; (80034b4 <HAL_DMA_IRQHandler+0xcc4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d027      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <HAL_DMA_IRQHandler+0xcc8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <HAL_DMA_IRQHandler+0xccc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01d      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <HAL_DMA_IRQHandler+0xcd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <HAL_DMA_IRQHandler+0xcd4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <HAL_DMA_IRQHandler+0xcd8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a25      	ldr	r2, [pc, #148]	; (80034cc <HAL_DMA_IRQHandler+0xcdc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <HAL_DMA_IRQHandler+0xce0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_DMA_IRQHandler+0xc60>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <HAL_DMA_IRQHandler+0xce4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <HAL_DMA_IRQHandler+0xc72>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0214 	bic.w	r2, r2, #20
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e007      	b.n	8003472 <HAL_DMA_IRQHandler+0xc82>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 020a 	bic.w	r2, r2, #10
 8003470:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b8 	beq.w	80035fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003494:	e0b2      	b.n	80035fc <HAL_DMA_IRQHandler+0xe0c>
 8003496:	bf00      	nop
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	2208      	movs	r2, #8
 80034e2:	409a      	lsls	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8088 	beq.w	80035fe <HAL_DMA_IRQHandler+0xe0e>
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8082 	beq.w	80035fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a41      	ldr	r2, [pc, #260]	; (8003604 <HAL_DMA_IRQHandler+0xe14>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <HAL_DMA_IRQHandler+0xe18>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a3e      	ldr	r2, [pc, #248]	; (800360c <HAL_DMA_IRQHandler+0xe1c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <HAL_DMA_IRQHandler+0xe20>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <HAL_DMA_IRQHandler+0xe24>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a39      	ldr	r2, [pc, #228]	; (8003618 <HAL_DMA_IRQHandler+0xe28>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a38      	ldr	r2, [pc, #224]	; (800361c <HAL_DMA_IRQHandler+0xe2c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a36      	ldr	r2, [pc, #216]	; (8003620 <HAL_DMA_IRQHandler+0xe30>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a35      	ldr	r2, [pc, #212]	; (8003624 <HAL_DMA_IRQHandler+0xe34>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a33      	ldr	r2, [pc, #204]	; (8003628 <HAL_DMA_IRQHandler+0xe38>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a32      	ldr	r2, [pc, #200]	; (800362c <HAL_DMA_IRQHandler+0xe3c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a30      	ldr	r2, [pc, #192]	; (8003630 <HAL_DMA_IRQHandler+0xe40>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <HAL_DMA_IRQHandler+0xe44>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <HAL_DMA_IRQHandler+0xe48>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2c      	ldr	r2, [pc, #176]	; (800363c <HAL_DMA_IRQHandler+0xe4c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_IRQHandler+0xdaa>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <HAL_DMA_IRQHandler+0xe50>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <HAL_DMA_IRQHandler+0xdbc>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 021c 	bic.w	r2, r2, #28
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e007      	b.n	80035bc <HAL_DMA_IRQHandler+0xdcc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 020e 	bic.w	r2, r2, #14
 80035ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2201      	movs	r2, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	e004      	b.n	80035fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80035f4:	bf00      	nop
 80035f6:	e002      	b.n	80035fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035f8:	bf00      	nop
 80035fa:	e000      	b.n	80035fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40020010 	.word	0x40020010
 8003608:	40020028 	.word	0x40020028
 800360c:	40020040 	.word	0x40020040
 8003610:	40020058 	.word	0x40020058
 8003614:	40020070 	.word	0x40020070
 8003618:	40020088 	.word	0x40020088
 800361c:	400200a0 	.word	0x400200a0
 8003620:	400200b8 	.word	0x400200b8
 8003624:	40020410 	.word	0x40020410
 8003628:	40020428 	.word	0x40020428
 800362c:	40020440 	.word	0x40020440
 8003630:	40020458 	.word	0x40020458
 8003634:	40020470 	.word	0x40020470
 8003638:	40020488 	.word	0x40020488
 800363c:	400204a0 	.word	0x400204a0
 8003640:	400204b8 	.word	0x400204b8

08003644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a42      	ldr	r2, [pc, #264]	; (800375c <DMA_CalcBaseAndBitshift+0x118>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a41      	ldr	r2, [pc, #260]	; (8003760 <DMA_CalcBaseAndBitshift+0x11c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3f      	ldr	r2, [pc, #252]	; (8003764 <DMA_CalcBaseAndBitshift+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3e      	ldr	r2, [pc, #248]	; (8003768 <DMA_CalcBaseAndBitshift+0x124>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a3c      	ldr	r2, [pc, #240]	; (800376c <DMA_CalcBaseAndBitshift+0x128>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <DMA_CalcBaseAndBitshift+0x12c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a39      	ldr	r2, [pc, #228]	; (8003774 <DMA_CalcBaseAndBitshift+0x130>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a38      	ldr	r2, [pc, #224]	; (8003778 <DMA_CalcBaseAndBitshift+0x134>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a36      	ldr	r2, [pc, #216]	; (800377c <DMA_CalcBaseAndBitshift+0x138>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a35      	ldr	r2, [pc, #212]	; (8003780 <DMA_CalcBaseAndBitshift+0x13c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a33      	ldr	r2, [pc, #204]	; (8003784 <DMA_CalcBaseAndBitshift+0x140>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a32      	ldr	r2, [pc, #200]	; (8003788 <DMA_CalcBaseAndBitshift+0x144>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a30      	ldr	r2, [pc, #192]	; (800378c <DMA_CalcBaseAndBitshift+0x148>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <DMA_CalcBaseAndBitshift+0x14c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <DMA_CalcBaseAndBitshift+0x150>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <DMA_CalcBaseAndBitshift+0xa8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <DMA_CalcBaseAndBitshift+0x154>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <DMA_CalcBaseAndBitshift+0xac>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <DMA_CalcBaseAndBitshift+0xae>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	3b10      	subs	r3, #16
 80036fe:	4a27      	ldr	r2, [pc, #156]	; (800379c <DMA_CalcBaseAndBitshift+0x158>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003710:	5cd3      	ldrb	r3, [r2, r3]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b03      	cmp	r3, #3
 800371c:	d908      	bls.n	8003730 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <DMA_CalcBaseAndBitshift+0x160>)
 8003726:	4013      	ands	r3, r2
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
 800372e:	e00d      	b.n	800374c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <DMA_CalcBaseAndBitshift+0x160>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
 800373e:	e005      	b.n	800374c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	aaaaaaab 	.word	0xaaaaaaab
 80037a0:	080204c8 	.word	0x080204c8
 80037a4:	fffffc00 	.word	0xfffffc00

080037a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d120      	bne.n	80037fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d858      	bhi.n	8003876 <DMA_CheckFifoParam+0xce>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <DMA_CheckFifoParam+0x24>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037ef 	.word	0x080037ef
 80037d4:	080037dd 	.word	0x080037dd
 80037d8:	08003877 	.word	0x08003877
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d048      	beq.n	800387a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ec:	e045      	b.n	800387a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037f6:	d142      	bne.n	800387e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037fc:	e03f      	b.n	800387e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003806:	d123      	bne.n	8003850 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	2b03      	cmp	r3, #3
 800380e:	d838      	bhi.n	8003882 <DMA_CheckFifoParam+0xda>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <DMA_CheckFifoParam+0x70>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003829 	.word	0x08003829
 800381c:	0800382f 	.word	0x0800382f
 8003820:	08003829 	.word	0x08003829
 8003824:	08003841 	.word	0x08003841
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
        break;
 800382c:	e030      	b.n	8003890 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d025      	beq.n	8003886 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800383e:	e022      	b.n	8003886 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003848:	d11f      	bne.n	800388a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800384e:	e01c      	b.n	800388a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	2b02      	cmp	r3, #2
 8003856:	d902      	bls.n	800385e <DMA_CheckFifoParam+0xb6>
 8003858:	2b03      	cmp	r3, #3
 800385a:	d003      	beq.n	8003864 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800385c:	e018      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
        break;
 8003862:	e015      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
    break;
 8003874:	e00b      	b.n	800388e <DMA_CheckFifoParam+0xe6>
        break;
 8003876:	bf00      	nop
 8003878:	e00a      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        break;
 800387a:	bf00      	nop
 800387c:	e008      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        break;
 800387e:	bf00      	nop
 8003880:	e006      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        break;
 8003882:	bf00      	nop
 8003884:	e004      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
        break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
    break;
 800388e:	bf00      	nop
    }
  }

  return status;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a38      	ldr	r2, [pc, #224]	; (8003994 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a36      	ldr	r2, [pc, #216]	; (8003998 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a35      	ldr	r2, [pc, #212]	; (800399c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a32      	ldr	r2, [pc, #200]	; (80039a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a30      	ldr	r2, [pc, #192]	; (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2d      	ldr	r2, [pc, #180]	; (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01a      	beq.n	800393e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	3b08      	subs	r3, #8
 8003910:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	461a      	mov	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a24      	ldr	r2, [pc, #144]	; (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800392c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800393c:	e024      	b.n	8003988 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3b10      	subs	r3, #16
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d806      	bhi.n	8003966 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d902      	bls.n	8003966 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3308      	adds	r3, #8
 8003964:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4b18      	ldr	r3, [pc, #96]	; (80039cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003978:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2201      	movs	r2, #1
 8003982:	409a      	lsls	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	58025408 	.word	0x58025408
 8003998:	5802541c 	.word	0x5802541c
 800399c:	58025430 	.word	0x58025430
 80039a0:	58025444 	.word	0x58025444
 80039a4:	58025458 	.word	0x58025458
 80039a8:	5802546c 	.word	0x5802546c
 80039ac:	58025480 	.word	0x58025480
 80039b0:	58025494 	.word	0x58025494
 80039b4:	cccccccd 	.word	0xcccccccd
 80039b8:	16009600 	.word	0x16009600
 80039bc:	58025880 	.word	0x58025880
 80039c0:	aaaaaaab 	.word	0xaaaaaaab
 80039c4:	400204b8 	.word	0x400204b8
 80039c8:	4002040f 	.word	0x4002040f
 80039cc:	10008200 	.word	0x10008200
 80039d0:	40020880 	.word	0x40020880

080039d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04a      	beq.n	8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d847      	bhi.n	8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d022      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d01d      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4b17      	ldr	r3, [pc, #92]	; (8003aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a5c:	671a      	str	r2, [r3, #112]	; 0x70
 8003a5e:	e009      	b.n	8003a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003a72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	58025408 	.word	0x58025408
 8003a90:	5802541c 	.word	0x5802541c
 8003a94:	58025430 	.word	0x58025430
 8003a98:	58025444 	.word	0x58025444
 8003a9c:	58025458 	.word	0x58025458
 8003aa0:	5802546c 	.word	0x5802546c
 8003aa4:	58025480 	.word	0x58025480
 8003aa8:	58025494 	.word	0x58025494
 8003aac:	1600963f 	.word	0x1600963f
 8003ab0:	58025940 	.word	0x58025940
 8003ab4:	1000823f 	.word	0x1000823f
 8003ab8:	40020940 	.word	0x40020940

08003abc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0c6      	b.n	8003c5c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f006 fa7c 	bl	8009fd4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2223      	movs	r2, #35	; 0x23
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4b60      	ldr	r3, [pc, #384]	; (8003c64 <HAL_ETH_Init+0x1a8>)
 8003ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ae8:	4a5e      	ldr	r2, [pc, #376]	; (8003c64 <HAL_ETH_Init+0x1a8>)
 8003aea:	f043 0302 	orr.w	r3, r3, #2
 8003aee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003af2:	4b5c      	ldr	r3, [pc, #368]	; (8003c64 <HAL_ETH_Init+0x1a8>)
 8003af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7a1b      	ldrb	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7fd ff51 	bl	80019b0 <HAL_SYSCFG_ETHInterfaceSelect>
 8003b0e:	e003      	b.n	8003b18 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003b10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b14:	f7fd ff4c 	bl	80019b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b30:	f7fd ff26 	bl	8001980 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b36:	e00f      	b.n	8003b58 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003b38:	f7fd ff22 	bl	8001980 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b46:	d907      	bls.n	8003b58 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	22e0      	movs	r2, #224	; 0xe0
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e081      	b.n	8003c5c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e6      	bne.n	8003b38 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f001 fae8 	bl	8005140 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003b70:	f002 ffee 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <HAL_ETH_Init+0x1ac>)
 8003b78:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7c:	0c9a      	lsrs	r2, r3, #18
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3a01      	subs	r2, #1
 8003b84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f001 fa3b 	bl	8005004 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ba4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	22e0      	movs	r2, #224	; 0xe0
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e04a      	b.n	8003c5c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f241 1308 	movw	r3, #4360	; 0x1108
 8003bce:	4413      	add	r3, r2
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_ETH_Init+0x1b0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6952      	ldr	r2, [r2, #20]
 8003bda:	0052      	lsls	r2, r2, #1
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	6809      	ldr	r1, [r1, #0]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	f241 1308 	movw	r3, #4360	; 0x1108
 8003be6:	440b      	add	r3, r1
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 fb00 	bl	80051f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f001 fb44 	bl	800527e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	3305      	adds	r3, #5
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	021a      	lsls	r2, r3, #8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	3303      	adds	r3, #3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	061a      	lsls	r2, r3, #24
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	3302      	adds	r3, #2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c42:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2210      	movs	r2, #16
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2210      	movs	r2, #16
 8003c58:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	58024400 	.word	0x58024400
 8003c68:	431bde83 	.word	0x431bde83
 8003c6c:	ffff8001 	.word	0xffff8001

08003c70 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	330a      	adds	r3, #10
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_ETH_DescAssignMemory+0x28>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d904      	bls.n	8003ca2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e021      	b.n	8003ce6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d174      	bne.n	8003dec <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2223      	movs	r2, #35	; 0x23
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e00f      	b.n	8003d2e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	330a      	adds	r3, #10
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d9ec      	bls.n	8003d0e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0202 	orr.w	r2, r2, #2
 8003d48:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f241 1304 	movw	r3, #4356	; 0x1104
 8003d76:	4413      	add	r3, r2
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6811      	ldr	r1, [r2, #0]
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	f241 1304 	movw	r3, #4356	; 0x1104
 8003d86:	440b      	add	r3, r1
 8003d88:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d92:	4413      	add	r3, r2
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003da2:	440b      	add	r3, r1
 8003da4:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8003db8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003dbc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f241 1334 	movw	r3, #4404	; 0x1134
 8003dc6:	4413      	add	r3, r2
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6811      	ldr	r1, [r2, #0]
 8003dce:	f24d 0241 	movw	r2, #53313	; 0xd041
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	f241 1334 	movw	r3, #4404	; 0x1134
 8003dd8:	440b      	add	r3, r1
 8003dda:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2210      	movs	r2, #16
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2222      	movs	r2, #34	; 0x22
 8003de6:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d067      	beq.n	8003edc <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2223      	movs	r2, #35	; 0x23
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f241 1334 	movw	r3, #4404	; 0x1134
 8003e1a:	4413      	add	r3, r2
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	4a32      	ldr	r2, [pc, #200]	; (8003eec <HAL_ETH_Stop_IT+0xf0>)
 8003e24:	401a      	ands	r2, r3
 8003e26:	f241 1334 	movw	r3, #4404	; 0x1134
 8003e2a:	440b      	add	r3, r1
 8003e2c:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f241 1304 	movw	r3, #4356	; 0x1104
 8003e36:	4413      	add	r3, r2
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	f241 1304 	movw	r3, #4356	; 0x1104
 8003e46:	440b      	add	r3, r1
 8003e48:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003e52:	4413      	add	r3, r2
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6811      	ldr	r1, [r2, #0]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003e62:	440b      	add	r3, r1
 8003e64:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0202 	bic.w	r2, r2, #2
 8003e98:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e00f      	b.n	8003ec0 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	330a      	adds	r3, #10
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d9ec      	bls.n	8003ea0 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	ffff2fbe 	.word	0xffff2fbe

08003ef0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e073      	b.n	8003ffa <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d16e      	bne.n	8003ff8 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f001 fa0a 	bl	8005338 <ETH_Prepare_Tx_Descriptors>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e05f      	b.n	8003ffa <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3206      	adds	r2, #6
 8003f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f46:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d904      	bls.n	8003f64 <HAL_ETH_Transmit+0x74>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	1f1a      	subs	r2, r3, #4
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	3106      	adds	r1, #6
 8003f70:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003f74:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003f78:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8003f7a:	f7fd fd01 	bl	8001980 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003f80:	e034      	b.n	8003fec <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d011      	beq.n	8003fb8 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	f043 0208 	orr.w	r2, r3, #8
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	22e0      	movs	r2, #224	; 0xe0
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e020      	b.n	8003ffa <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fbe:	d015      	beq.n	8003fec <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fd fcde 	bl	8001980 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <HAL_ETH_Transmit+0xe6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	22e0      	movs	r2, #224	; 0xe0
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e006      	b.n	8003ffa <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	dbc6      	blt.n	8003f82 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8004002:	b480      	push	{r7}
 8004004:	b089      	sub	sp, #36	; 0x24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	332c      	adds	r3, #44	; 0x2c
 800400e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d06b      	beq.n	800410c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8004034:	2300      	movs	r3, #0
 8004036:	e0ce      	b.n	80041d6 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3301      	adds	r3, #1
 800403c:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d036      	beq.n	80040b8 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3301      	adds	r3, #1
 800404e:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d902      	bls.n	800406c <HAL_ETH_IsRxDataAvailable+0x6a>
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3b04      	subs	r3, #4
 800406a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004074:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db11      	blt.n	80040a2 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2201      	movs	r2, #1
 800408e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3301      	adds	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d902      	bls.n	80040a2 <HAL_ETH_IsRxDataAvailable+0xa0>
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3b04      	subs	r3, #4
 80040a0:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e08e      	b.n	80041d6 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80040c8:	2301      	movs	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d902      	bls.n	80040de <HAL_ETH_IsRxDataAvailable+0xdc>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3b04      	subs	r3, #4
 80040dc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e010      	b.n	800410c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3301      	adds	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d902      	bls.n	8004102 <HAL_ETH_IsRxDataAvailable+0x100>
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3b04      	subs	r3, #4
 8004100:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db02      	blt.n	800411a <HAL_ETH_IsRxDataAvailable+0x118>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d98e      	bls.n	8004038 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d056      	beq.n	80041ce <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004138:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e03b      	b.n	80041b8 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800414e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3b01      	subs	r3, #1
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	429a      	cmp	r2, r3
 8004194:	d20d      	bcs.n	80041b2 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3301      	adds	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d902      	bls.n	80041a8 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b0:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3301      	adds	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d3bf      	bcc.n	8004140 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	f241 1328 	movw	r3, #4392	; 0x1128
 80041ca:	440b      	add	r3, r1
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]

  return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08a      	sub	sp, #40	; 0x28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	332c      	adds	r3, #44	; 0x2c
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004204:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07d      	b.n	8004316 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff feed 	bl	8004002 <HAL_ETH_IsRxDataAvailable>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e071      	b.n	8004316 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	e031      	b.n	80042ac <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	461a      	mov	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	461a      	mov	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004282:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	3301      	adds	r3, #1
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2b03      	cmp	r3, #3
 800428e:	d902      	bls.n	8004296 <HAL_ETH_GetRxDataBuffer+0xb4>
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	3b04      	subs	r3, #4
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	3301      	adds	r3, #1
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d3c7      	bcc.n	8004248 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	461a      	mov	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d803      	bhi.n	80042e2 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	e018      	b.n	8004314 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d012      	beq.n	8004310 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	461a      	mov	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	1ad2      	subs	r2, r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e001      	b.n	8004314 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	332c      	adds	r3, #44	; 0x2c
 800432c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fe60 	bl	8004002 <HAL_ETH_IsRxDataAvailable>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e017      	b.n	800437c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	3b01      	subs	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d902      	bls.n	8004364 <HAL_ETH_GetRxDataLength+0x46>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3b04      	subs	r3, #4
 8004362:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	332c      	adds	r3, #44	; 0x2c
 8004390:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e057      	b.n	8004464 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	3301      	adds	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e03b      	b.n	8004440 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d6:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20d      	bcs.n	800443a <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d902      	bls.n	8004430 <HAL_ETH_BuildRxDescriptors+0xac>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3b04      	subs	r3, #4
 800442e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004438:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3301      	adds	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d3bf      	bcc.n	80043c8 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	f241 1328 	movw	r3, #4392	; 0x1128
 8004452:	440b      	add	r3, r1
 8004454:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3724      	adds	r7, #36	; 0x24
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d113      	bne.n	80044b2 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004492:	4413      	add	r3, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d109      	bne.n	80044b2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f005 fe7e 	bl	800a1a0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80044ac:	f248 0240 	movw	r2, #32832	; 0x8040
 80044b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d113      	bne.n	80044ec <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	f241 1334 	movw	r3, #4404	; 0x1134
 80044cc:	4413      	add	r3, r2
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d109      	bne.n	80044ec <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8c7 	bl	800466c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80044e6:	f248 0201 	movw	r2, #32769	; 0x8001
 80044ea:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fe:	d149      	bne.n	8004594 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	f241 1334 	movw	r3, #4404	; 0x1134
 8004508:	4413      	add	r3, r2
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004514:	d13e      	bne.n	8004594 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	f043 0208 	orr.w	r2, r3, #8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d11b      	bne.n	800456e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	f241 1302 	movw	r3, #4354	; 0x1102
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004552:	4413      	add	r3, r2
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6811      	ldr	r1, [r2, #0]
 800455a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800455e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004562:	440b      	add	r3, r1
 8004564:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	22e0      	movs	r2, #224	; 0xe0
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
 800456c:	e00f      	b.n	800458e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004588:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800458c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f876 	bl	8004680 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800459c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80045a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045a4:	d10e      	bne.n	80045c4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	22e0      	movs	r2, #224	; 0xe0
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f86b 	bl	8004694 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d10d      	bne.n	80045f0 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f85f 	bl	80046a8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d10d      	bne.n	800461c <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f853 	bl	80046bc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800461c:	f7fd fb34 	bl	8001c88 <HAL_GetCurrentCPUID>
 8004620:	4603      	mov	r3, r0
 8004622:	2b03      	cmp	r3, #3
 8004624:	d10d      	bne.n	8004642 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <HAL_ETH_IRQHandler+0x1f4>)
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d014      	beq.n	800465c <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <HAL_ETH_IRQHandler+0x1f4>)
 8004634:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f848 	bl	80046d0 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004640:	e00c      	b.n	800465c <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_ETH_IRQHandler+0x1f8>)
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_ETH_IRQHandler+0x1f8>)
 8004650:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f83a 	bl	80046d0 <HAL_ETH_WakeUpCallback>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	58000080 	.word	0x58000080
 8004668:	580000c0 	.word	0x580000c0

0800466c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e03e      	b.n	8004784 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800470e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	055b      	lsls	r3, r3, #21
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f043 030c 	orr.w	r3, r3, #12
 8004732:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004746:	f7fd f91b 	bl	8001980 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800474c:	e009      	b.n	8004762 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800474e:	f7fd f917 	bl	8001980 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800475c:	d901      	bls.n	8004762 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e010      	b.n	8004784 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ed      	bne.n	800474e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e03c      	b.n	8004828 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047b6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	055b      	lsls	r3, r3, #21
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 030c 	bic.w	r3, r3, #12
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_ETH_WritePHYRegister+0xa4>)
 80047ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80047f2:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <HAL_ETH_WritePHYRegister+0xa4>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80047fa:	f7fd f8c1 	bl	8001980 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004800:	e009      	b.n	8004816 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004802:	f7fd f8bd 	bl	8001980 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004810:	d901      	bls.n	8004816 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e008      	b.n	8004828 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ed      	bne.n	8004802 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40028000 	.word	0x40028000

08004834 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e1c3      	b.n	8004bd0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0e5b      	lsrs	r3, r3, #25
 8004a92:	f003 021f 	and.w	r2, r3, #31
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 020f 	and.w	r2, r3, #15
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004b5c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004b6c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e00a      	b.n	8004c06 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d105      	bne.n	8004c04 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f860 	bl	8004cc0 <ETH_SetMACConfig>

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c20:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c28:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004c2a:	f001 ff91 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8004c2e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d908      	bls.n	8004c4a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d804      	bhi.n	8004c4a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e027      	b.n	8004c9a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d908      	bls.n	8004c64 <HAL_ETH_SetMDIOClockRange+0x54>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d804      	bhi.n	8004c64 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e01a      	b.n	8004c9a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d903      	bls.n	8004c74 <HAL_ETH_SetMDIOClockRange+0x64>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d911      	bls.n	8004c98 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d908      	bls.n	8004c8e <HAL_ETH_SetMDIOClockRange+0x7e>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <HAL_ETH_SetMDIOClockRange+0xac>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d804      	bhi.n	8004c8e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e005      	b.n	8004c9a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e000      	b.n	8004c9a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004c98:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	01312cff 	.word	0x01312cff
 8004cb0:	02160ebf 	.word	0x02160ebf
 8004cb4:	039386ff 	.word	0x039386ff
 8004cb8:	05f5e0ff 	.word	0x05f5e0ff
 8004cbc:	08f0d17f 	.word	0x08f0d17f

08004cc0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004cd2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	791b      	ldrb	r3, [r3, #4]
 8004cd8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004cda:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	7b1b      	ldrb	r3, [r3, #12]
 8004ce0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004ce2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	7b5b      	ldrb	r3, [r3, #13]
 8004ce8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004cea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	7b9b      	ldrb	r3, [r3, #14]
 8004cf0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004cf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	7bdb      	ldrb	r3, [r3, #15]
 8004cf8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004cfa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	7c12      	ldrb	r2, [r2, #16]
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d102      	bne.n	8004d0a <ETH_SetMACConfig+0x4a>
 8004d04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d08:	e000      	b.n	8004d0c <ETH_SetMACConfig+0x4c>
 8004d0a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d0c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	7c52      	ldrb	r2, [r2, #17]
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d102      	bne.n	8004d1c <ETH_SetMACConfig+0x5c>
 8004d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d1a:	e000      	b.n	8004d1e <ETH_SetMACConfig+0x5e>
 8004d1c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004d1e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	7c9b      	ldrb	r3, [r3, #18]
 8004d24:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004d26:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004d2c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004d32:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	7f1b      	ldrb	r3, [r3, #28]
 8004d38:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004d3a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	7f5b      	ldrb	r3, [r3, #29]
 8004d40:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004d42:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	7f92      	ldrb	r2, [r2, #30]
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	d102      	bne.n	8004d52 <ETH_SetMACConfig+0x92>
 8004d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d50:	e000      	b.n	8004d54 <ETH_SetMACConfig+0x94>
 8004d52:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004d54:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	7fdb      	ldrb	r3, [r3, #31]
 8004d5a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004d5c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004d64:	2a00      	cmp	r2, #0
 8004d66:	d102      	bne.n	8004d6e <ETH_SetMACConfig+0xae>
 8004d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d6c:	e000      	b.n	8004d70 <ETH_SetMACConfig+0xb0>
 8004d6e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004d70:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004d76:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004d80:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b56      	ldr	r3, [pc, #344]	; (8004eec <ETH_SetMACConfig+0x22c>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004daa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004dac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004db4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004db6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004dbe:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004dc0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	d102      	bne.n	8004dd2 <ETH_SetMACConfig+0x112>
 8004dcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004dd0:	e000      	b.n	8004dd4 <ETH_SetMACConfig+0x114>
 8004dd2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004dd4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <ETH_SetMACConfig+0x230>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004df8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	4b3a      	ldr	r3, [pc, #232]	; (8004ef4 <ETH_SetMACConfig+0x234>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	430b      	orrs	r3, r1
 8004e14:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004e1c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004e22:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	d101      	bne.n	8004e32 <ETH_SetMACConfig+0x172>
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	e000      	b.n	8004e34 <ETH_SetMACConfig+0x174>
 8004e32:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004e34:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e46:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004e5c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004e64:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f023 0103 	bic.w	r1, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004e8a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d101      	bne.n	8004eae <ETH_SetMACConfig+0x1ee>
 8004eaa:	2240      	movs	r2, #64	; 0x40
 8004eac:	e000      	b.n	8004eb0 <ETH_SetMACConfig+0x1f0>
 8004eae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004eb0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004eb8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004eba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004ec2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ed0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	00048083 	.word	0x00048083
 8004ef0:	c0f88000 	.word	0xc0f88000
 8004ef4:	fffffef0 	.word	0xfffffef0

08004ef8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <ETH_SetDMAConfig+0xf8>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	6809      	ldr	r1, [r1, #0]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004f1e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	791b      	ldrb	r3, [r3, #4]
 8004f24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004f2a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	7b1b      	ldrb	r3, [r3, #12]
 8004f30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	f241 0304 	movw	r3, #4100	; 0x1004
 8004f3e:	4413      	add	r3, r2
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <ETH_SetDMAConfig+0xfc>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004f52:	440b      	add	r3, r1
 8004f54:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	7b5b      	ldrb	r3, [r3, #13]
 8004f5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <ETH_SetDMAConfig+0x100>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6811      	ldr	r1, [r2, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004f7e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	7d1b      	ldrb	r3, [r3, #20]
 8004f88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004f8a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	7f5b      	ldrb	r3, [r3, #29]
 8004f90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f241 1304 	movw	r3, #4356	; 0x1104
 8004f9e:	4413      	add	r3, r2
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <ETH_SetDMAConfig+0x104>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6811      	ldr	r1, [r2, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	f241 1304 	movw	r3, #4356	; 0x1104
 8004fb2:	440b      	add	r3, r1
 8004fb4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	7f1b      	ldrb	r3, [r3, #28]
 8004fba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	f241 1308 	movw	r3, #4360	; 0x1108
 8004fcc:	4413      	add	r3, r2
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <ETH_SetDMAConfig+0x108>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6811      	ldr	r1, [r2, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	f241 1308 	movw	r3, #4360	; 0x1108
 8004fe0:	440b      	add	r3, r1
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	ffff87fd 	.word	0xffff87fd
 8004ff4:	ffff2ffe 	.word	0xffff2ffe
 8004ff8:	fffec000 	.word	0xfffec000
 8004ffc:	ffc0efef 	.word	0xffc0efef
 8005000:	7fc0ffff 	.word	0x7fc0ffff

08005004 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b0a4      	sub	sp, #144	; 0x90
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005012:	2300      	movs	r3, #0
 8005014:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800504c:	2300      	movs	r3, #0
 800504e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005050:	2300      	movs	r3, #0
 8005052:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800505c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005060:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005068:	2300      	movs	r3, #0
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005072:	2300      	movs	r3, #0
 8005074:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005078:	2300      	movs	r3, #0
 800507a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800507e:	2300      	movs	r3, #0
 8005080:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005082:	2300      	movs	r3, #0
 8005084:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005086:	2300      	movs	r3, #0
 8005088:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800509c:	2320      	movs	r3, #32
 800509e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80050ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80050b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80050c0:	2302      	movs	r3, #2
 80050c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80050de:	2300      	movs	r3, #0
 80050e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80050e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fde6 	bl	8004cc0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80050f8:	2301      	movs	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005106:	2300      	movs	r3, #0
 8005108:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800510a:	2300      	movs	r3, #0
 800510c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800510e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005112:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005118:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800511c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005124:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800512a:	f107 0308 	add.w	r3, r7, #8
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fee1 	bl	8004ef8 <ETH_SetDMAConfig>
}
 8005136:	bf00      	nop
 8005138:	3790      	adds	r7, #144	; 0x90
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005150:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005158:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800515a:	f001 fcf9 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 800515e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d908      	bls.n	800517a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d804      	bhi.n	800517a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e027      	b.n	80051ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d908      	bls.n	8005194 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d804      	bhi.n	8005194 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e01a      	b.n	80051ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d903      	bls.n	80051a4 <ETH_MAC_MDIO_ClkConfig+0x64>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d911      	bls.n	80051c8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d908      	bls.n	80051be <ETH_MAC_MDIO_ClkConfig+0x7e>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <ETH_MAC_MDIO_ClkConfig+0xac>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d804      	bhi.n	80051be <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e005      	b.n	80051ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e000      	b.n	80051ca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80051c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	01312cff 	.word	0x01312cff
 80051e0:	02160ebf 	.word	0x02160ebf
 80051e4:	039386ff 	.word	0x039386ff
 80051e8:	05f5e0ff 	.word	0x05f5e0ff
 80051ec:	08f0d17f 	.word	0x08f0d17f

080051f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e01d      	b.n	800523a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	440b      	add	r3, r1
 800520e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	3206      	adds	r2, #6
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d9de      	bls.n	80051fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	f241 132c 	movw	r3, #4396	; 0x112c
 800524e:	4413      	add	r3, r2
 8005250:	2203      	movs	r2, #3
 8005252:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68d9      	ldr	r1, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005260:	4413      	add	r3, r2
 8005262:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e024      	b.n	80052d6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6919      	ldr	r1, [r3, #16]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	440b      	add	r3, r1
 800529c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2200      	movs	r2, #0
 80052ba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	330a      	adds	r3, #10
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d9d7      	bls.n	800528c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f241 1330 	movw	r3, #4400	; 0x1130
 8005302:	4413      	add	r3, r2
 8005304:	2203      	movs	r2, #3
 8005306:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6919      	ldr	r1, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	f241 131c 	movw	r3, #4380	; 0x111c
 8005314:	4413      	add	r3, r2
 8005316:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	f241 1328 	movw	r3, #4392	; 0x1128
 8005328:	4413      	add	r3, r2
 800532a:	6019      	str	r1, [r3, #0]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005338:	b480      	push	{r7}
 800533a:	b08d      	sub	sp, #52	; 0x34
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3318      	adds	r3, #24
 8005348:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8005356:	2300      	movs	r3, #0
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005362:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005376:	d101      	bne.n	800537c <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	e223      	b.n	80057c4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d044      	beq.n	8005412 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	4b72      	ldr	r3, [pc, #456]	; (8005558 <ETH_Prepare_Tx_Descriptors+0x220>)
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005394:	431a      	orrs	r2, r3
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d027      	beq.n	8005412 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	431a      	orrs	r2, r3
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	431a      	orrs	r2, r3
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00e      	beq.n	800543c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	4b4e      	ldr	r3, [pc, #312]	; (800555c <ETH_Prepare_Tx_Descriptors+0x224>)
 8005424:	4013      	ands	r3, r2
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	6992      	ldr	r2, [r2, #24]
 800542a:	431a      	orrs	r2, r3
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <ETH_Prepare_Tx_Descriptors+0x11c>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d030      	beq.n	80054b6 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	3301      	adds	r3, #1
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	2b03      	cmp	r3, #3
 8005476:	d902      	bls.n	800547e <ETH_Prepare_Tx_Descriptors+0x146>
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	3b04      	subs	r3, #4
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	3301      	adds	r3, #1
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800549a:	d10c      	bne.n	80054b6 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80054b2:	2302      	movs	r3, #2
 80054b4:	e186      	b.n	80057c4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	3301      	adds	r3, #1
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	4b24      	ldr	r3, [pc, #144]	; (800555c <ETH_Prepare_Tx_Descriptors+0x224>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	6852      	ldr	r2, [r2, #4]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <ETH_Prepare_Tx_Descriptors+0x228>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	0412      	lsls	r2, r2, #16
 80054fe:	431a      	orrs	r2, r3
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	e008      	b.n	8005518 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	2200      	movs	r2, #0
 800550a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <ETH_Prepare_Tx_Descriptors+0x228>)
 8005512:	4013      	ands	r3, r2
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d021      	beq.n	8005568 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	04db      	lsls	r3, r3, #19
 8005532:	431a      	orrs	r2, r3
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800553e:	4013      	ands	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	69d2      	ldr	r2, [r2, #28]
 8005544:	431a      	orrs	r2, r3
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	e02e      	b.n	80055b6 <ETH_Prepare_Tx_Descriptors+0x27e>
 8005558:	ffff0000 	.word	0xffff0000
 800555c:	ffffc000 	.word	0xffffc000
 8005560:	c000ffff 	.word	0xc000ffff
 8005564:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	4b98      	ldr	r3, [pc, #608]	; (80057d0 <ETH_Prepare_Tx_Descriptors+0x498>)
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	6852      	ldr	r2, [r2, #4]
 8005574:	431a      	orrs	r2, r3
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	431a      	orrs	r2, r3
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	431a      	orrs	r2, r3
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80c0 	beq.w	8005786 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	431a      	orrs	r2, r3
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005618:	e0b5      	b.n	8005786 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	3301      	adds	r3, #1
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2b03      	cmp	r3, #3
 8005630:	d902      	bls.n	8005638 <ETH_Prepare_Tx_Descriptors+0x300>
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	3b04      	subs	r3, #4
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565a:	d126      	bne.n	80056aa <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005668:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	e016      	b.n	800569e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	3301      	adds	r3, #1
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	2b03      	cmp	r3, #3
 8005686:	d902      	bls.n	800568e <ETH_Prepare_Tx_Descriptors+0x356>
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	3b04      	subs	r3, #4
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005696:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	3301      	adds	r3, #1
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
 800569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3e4      	bcc.n	8005670 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80056a6:	2302      	movs	r3, #2
 80056a8:	e08c      	b.n	80057c4 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	3301      	adds	r3, #1
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	4b43      	ldr	r3, [pc, #268]	; (80057d4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	6852      	ldr	r2, [r2, #4]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	4b3a      	ldr	r3, [pc, #232]	; (80057d8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	6852      	ldr	r2, [r2, #4]
 80056f6:	0412      	lsls	r2, r2, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	609a      	str	r2, [r3, #8]
 80056fe:	e008      	b.n	8005712 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800570c:	4013      	ands	r3, r2
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005724:	4013      	ands	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	69d2      	ldr	r2, [r2, #28]
 800572a:	431a      	orrs	r2, r3
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	60da      	str	r2, [r3, #12]
 800573c:	e017      	b.n	800576e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005744:	4013      	ands	r3, r2
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	6852      	ldr	r2, [r2, #4]
 800574a:	431a      	orrs	r2, r3
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	431a      	orrs	r2, r3
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f47f af45 	bne.w	800561a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	e005      	b.n	80057b0 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c0:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3734      	adds	r7, #52	; 0x34
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	ffff8000 	.word	0xffff8000
 80057d4:	ffffc000 	.word	0xffffc000
 80057d8:	c000ffff 	.word	0xc000ffff
 80057dc:	fffc0000 	.word	0xfffc0000

080057e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b089      	sub	sp, #36	; 0x24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057ee:	4b89      	ldr	r3, [pc, #548]	; (8005a14 <HAL_GPIO_Init+0x234>)
 80057f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057f2:	e194      	b.n	8005b1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2101      	movs	r1, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8186 	beq.w	8005b18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d00b      	beq.n	800582c <HAL_GPIO_Init+0x4c>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d007      	beq.n	800582c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005820:	2b11      	cmp	r3, #17
 8005822:	d003      	beq.n	800582c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b12      	cmp	r3, #18
 800582a:	d130      	bne.n	800588e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4013      	ands	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005862:	2201      	movs	r2, #1
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0201 	and.w	r2, r3, #1
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_Init+0xee>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b12      	cmp	r3, #18
 80058cc:	d123      	bne.n	8005916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	220f      	movs	r2, #15
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	08da      	lsrs	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3208      	adds	r2, #8
 8005910:	69b9      	ldr	r1, [r7, #24]
 8005912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0203 	and.w	r2, r3, #3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80e0 	beq.w	8005b18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005958:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <HAL_GPIO_Init+0x238>)
 800595a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800595e:	4a2e      	ldr	r2, [pc, #184]	; (8005a18 <HAL_GPIO_Init+0x238>)
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_GPIO_Init+0x238>)
 800596a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005976:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <HAL_GPIO_Init+0x23c>)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	3302      	adds	r3, #2
 800597e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	220f      	movs	r2, #15
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4013      	ands	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <HAL_GPIO_Init+0x240>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d052      	beq.n	8005a48 <HAL_GPIO_Init+0x268>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <HAL_GPIO_Init+0x244>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_GPIO_Init+0x22e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <HAL_GPIO_Init+0x248>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02b      	beq.n	8005a0a <HAL_GPIO_Init+0x22a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_GPIO_Init+0x24c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d025      	beq.n	8005a06 <HAL_GPIO_Init+0x226>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <HAL_GPIO_Init+0x250>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <HAL_GPIO_Init+0x222>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <HAL_GPIO_Init+0x254>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d019      	beq.n	80059fe <HAL_GPIO_Init+0x21e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1a      	ldr	r2, [pc, #104]	; (8005a38 <HAL_GPIO_Init+0x258>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_GPIO_Init+0x21a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <HAL_GPIO_Init+0x25c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00d      	beq.n	80059f6 <HAL_GPIO_Init+0x216>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <HAL_GPIO_Init+0x260>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <HAL_GPIO_Init+0x212>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_GPIO_Init+0x264>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_GPIO_Init+0x20e>
 80059ea:	2309      	movs	r3, #9
 80059ec:	e02d      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 80059ee:	230a      	movs	r3, #10
 80059f0:	e02b      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 80059f2:	2308      	movs	r3, #8
 80059f4:	e029      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 80059f6:	2307      	movs	r3, #7
 80059f8:	e027      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 80059fa:	2306      	movs	r3, #6
 80059fc:	e025      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 80059fe:	2305      	movs	r3, #5
 8005a00:	e023      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 8005a02:	2304      	movs	r3, #4
 8005a04:	e021      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 8005a06:	2303      	movs	r3, #3
 8005a08:	e01f      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e01d      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e01b      	b.n	8005a4a <HAL_GPIO_Init+0x26a>
 8005a12:	bf00      	nop
 8005a14:	58000080 	.word	0x58000080
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	58000400 	.word	0x58000400
 8005a20:	58020000 	.word	0x58020000
 8005a24:	58020400 	.word	0x58020400
 8005a28:	58020800 	.word	0x58020800
 8005a2c:	58020c00 	.word	0x58020c00
 8005a30:	58021000 	.word	0x58021000
 8005a34:	58021400 	.word	0x58021400
 8005a38:	58021800 	.word	0x58021800
 8005a3c:	58021c00 	.word	0x58021c00
 8005a40:	58022000 	.word	0x58022000
 8005a44:	58022400 	.word	0x58022400
 8005a48:	2300      	movs	r3, #0
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	f002 0203 	and.w	r2, r2, #3
 8005a50:	0092      	lsls	r2, r2, #2
 8005a52:	4093      	lsls	r3, r2
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a5a:	4938      	ldr	r1, [pc, #224]	; (8005b3c <HAL_GPIO_Init+0x35c>)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	3302      	adds	r3, #2
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4013      	ands	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f47f ae63 	bne.w	80057f4 <HAL_GPIO_Init+0x14>
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3724      	adds	r7, #36	; 0x24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	58000400 	.word	0x58000400

08005b40 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8005b4a:	490c      	ldr	r1, [pc, #48]	; (8005b7c <HAL_HSEM_Take+0x3c>)
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <HAL_HSEM_Take+0x40>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <HAL_HSEM_Take+0x3c>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <HAL_HSEM_Take+0x40>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d101      	bne.n	8005b6e <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	58026400 	.word	0x58026400
 8005b80:	80000300 	.word	0x80000300

08005b84 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <HAL_HSEM_FastTake+0x2c>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3320      	adds	r3, #32
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <HAL_HSEM_FastTake+0x30>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d101      	bne.n	8005ba0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	58026400 	.word	0x58026400
 8005bb4:	80000300 	.word	0x80000300

08005bb8 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8005bc0:	4a07      	ldr	r2, [pc, #28]	; (8005be0 <HAL_HSEM_IsSemTaken+0x28>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da01      	bge.n	8005bd0 <HAL_HSEM_IsSemTaken+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_HSEM_IsSemTaken+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	58026400 	.word	0x58026400

08005be4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005bee:	4906      	ldr	r1, [pc, #24]	; (8005c08 <HAL_HSEM_Release+0x24>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	58026400 	.word	0x58026400

08005c0c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	d00a      	beq.n	8005c56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d001      	beq.n	8005c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e040      	b.n	8005cd4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e03e      	b.n	8005cd4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c56:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005c5e:	491f      	ldr	r1, [pc, #124]	; (8005cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c66:	f7fb fe8b 	bl	8001980 <HAL_GetTick>
 8005c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c6c:	e009      	b.n	8005c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c6e:	f7fb fe87 	bl	8001980 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c7c:	d901      	bls.n	8005c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e028      	b.n	8005cd4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c82:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	d1ee      	bne.n	8005c6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b1e      	cmp	r3, #30
 8005c94:	d008      	beq.n	8005ca8 <HAL_PWREx_ConfigSupply+0x7c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b2e      	cmp	r3, #46	; 0x2e
 8005c9a:	d005      	beq.n	8005ca8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b1d      	cmp	r3, #29
 8005ca0:	d002      	beq.n	8005ca8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b2d      	cmp	r3, #45	; 0x2d
 8005ca6:	d114      	bne.n	8005cd2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005ca8:	f7fb fe6a 	bl	8001980 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005cae:	e009      	b.n	8005cc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cb0:	f7fb fe66 	bl	8001980 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cbe:	d901      	bls.n	8005cc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e007      	b.n	8005cd4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd0:	d1ee      	bne.n	8005cb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	58024800 	.word	0x58024800

08005ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	; 0x30
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e3ff      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8087 	beq.w	8005e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d00:	4b99      	ldr	r3, [pc, #612]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d0a:	4b97      	ldr	r3, [pc, #604]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d007      	beq.n	8005d26 <HAL_RCC_OscConfig+0x46>
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	2b18      	cmp	r3, #24
 8005d1a:	d110      	bne.n	8005d3e <HAL_RCC_OscConfig+0x5e>
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d10b      	bne.n	8005d3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d26:	4b90      	ldr	r3, [pc, #576]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d06c      	beq.n	8005e0c <HAL_RCC_OscConfig+0x12c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d168      	bne.n	8005e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e3d9      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d46:	d106      	bne.n	8005d56 <HAL_RCC_OscConfig+0x76>
 8005d48:	4b87      	ldr	r3, [pc, #540]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a86      	ldr	r2, [pc, #536]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	e02e      	b.n	8005db4 <HAL_RCC_OscConfig+0xd4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x98>
 8005d5e:	4b82      	ldr	r3, [pc, #520]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a81      	ldr	r2, [pc, #516]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4b7f      	ldr	r3, [pc, #508]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a7e      	ldr	r2, [pc, #504]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e01d      	b.n	8005db4 <HAL_RCC_OscConfig+0xd4>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0xbc>
 8005d82:	4b79      	ldr	r3, [pc, #484]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a78      	ldr	r2, [pc, #480]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b76      	ldr	r3, [pc, #472]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a75      	ldr	r2, [pc, #468]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e00b      	b.n	8005db4 <HAL_RCC_OscConfig+0xd4>
 8005d9c:	4b72      	ldr	r3, [pc, #456]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a71      	ldr	r2, [pc, #452]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	4b6f      	ldr	r3, [pc, #444]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a6e      	ldr	r2, [pc, #440]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fb fde0 	bl	8001980 <HAL_GetTick>
 8005dc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc4:	f7fb fddc 	bl	8001980 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e38d      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dd6:	4b64      	ldr	r3, [pc, #400]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0xe4>
 8005de2:	e014      	b.n	8005e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fb fdcc 	bl	8001980 <HAL_GetTick>
 8005de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dec:	f7fb fdc8 	bl	8001980 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b64      	cmp	r3, #100	; 0x64
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e379      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dfe:	4b5a      	ldr	r3, [pc, #360]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0x10c>
 8005e0a:	e000      	b.n	8005e0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80ae 	beq.w	8005f78 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1c:	4b52      	ldr	r3, [pc, #328]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e26:	4b50      	ldr	r3, [pc, #320]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_RCC_OscConfig+0x162>
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b18      	cmp	r3, #24
 8005e36:	d13a      	bne.n	8005eae <HAL_RCC_OscConfig+0x1ce>
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d135      	bne.n	8005eae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e42:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x17a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e34b      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5a:	f7fb fd9d 	bl	8001998 <HAL_GetREVID>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d817      	bhi.n	8005e98 <HAL_RCC_OscConfig+0x1b8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d108      	bne.n	8005e82 <HAL_RCC_OscConfig+0x1a2>
 8005e70:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e78:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e80:	e07a      	b.n	8005f78 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e82:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	031b      	lsls	r3, r3, #12
 8005e90:	4935      	ldr	r1, [pc, #212]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e96:	e06f      	b.n	8005f78 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e98:	4b33      	ldr	r3, [pc, #204]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	061b      	lsls	r3, r3, #24
 8005ea6:	4930      	ldr	r1, [pc, #192]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eac:	e064      	b.n	8005f78 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d045      	beq.n	8005f42 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eb6:	4b2c      	ldr	r3, [pc, #176]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 0219 	bic.w	r2, r3, #25
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	4929      	ldr	r1, [pc, #164]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fb fd5a 	bl	8001980 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fb fd56 	bl	8001980 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e307      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee2:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eee:	f7fb fd53 	bl	8001998 <HAL_GetREVID>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d817      	bhi.n	8005f2c <HAL_RCC_OscConfig+0x24c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d108      	bne.n	8005f16 <HAL_RCC_OscConfig+0x236>
 8005f04:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f0c:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f12:	6053      	str	r3, [r2, #4]
 8005f14:	e030      	b.n	8005f78 <HAL_RCC_OscConfig+0x298>
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	031b      	lsls	r3, r3, #12
 8005f24:	4910      	ldr	r1, [pc, #64]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	604b      	str	r3, [r1, #4]
 8005f2a:	e025      	b.n	8005f78 <HAL_RCC_OscConfig+0x298>
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	490b      	ldr	r1, [pc, #44]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
 8005f40:	e01a      	b.n	8005f78 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <HAL_RCC_OscConfig+0x288>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fb fd17 	bl	8001980 <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f54:	e00a      	b.n	8005f6c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f56:	f7fb fd13 	bl	8001980 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d903      	bls.n	8005f6c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e2c4      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
 8005f68:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f6c:	4ba4      	ldr	r3, [pc, #656]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ee      	bne.n	8005f56 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80a9 	beq.w	80060d8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f86:	4b9e      	ldr	r3, [pc, #632]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f90:	4b9b      	ldr	r3, [pc, #620]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d007      	beq.n	8005fac <HAL_RCC_OscConfig+0x2cc>
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b18      	cmp	r3, #24
 8005fa0:	d13a      	bne.n	8006018 <HAL_RCC_OscConfig+0x338>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d135      	bne.n	8006018 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fac:	4b94      	ldr	r3, [pc, #592]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x2e4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e296      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fc4:	f7fb fce8 	bl	8001998 <HAL_GetREVID>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d817      	bhi.n	8006002 <HAL_RCC_OscConfig+0x322>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d108      	bne.n	8005fec <HAL_RCC_OscConfig+0x30c>
 8005fda:	4b89      	ldr	r3, [pc, #548]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fe2:	4a87      	ldr	r2, [pc, #540]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fea:	e075      	b.n	80060d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fec:	4b84      	ldr	r3, [pc, #528]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	069b      	lsls	r3, r3, #26
 8005ffa:	4981      	ldr	r1, [pc, #516]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006000:	e06a      	b.n	80060d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006002:	4b7f      	ldr	r3, [pc, #508]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	061b      	lsls	r3, r3, #24
 8006010:	497b      	ldr	r1, [pc, #492]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006016:	e05f      	b.n	80060d8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d042      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006020:	4b77      	ldr	r3, [pc, #476]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a76      	ldr	r2, [pc, #472]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fb fca8 	bl	8001980 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006034:	f7fb fca4 	bl	8001980 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e255      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006046:	4b6e      	ldr	r3, [pc, #440]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006052:	f7fb fca1 	bl	8001998 <HAL_GetREVID>
 8006056:	4602      	mov	r2, r0
 8006058:	f241 0303 	movw	r3, #4099	; 0x1003
 800605c:	429a      	cmp	r2, r3
 800605e:	d817      	bhi.n	8006090 <HAL_RCC_OscConfig+0x3b0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	2b20      	cmp	r3, #32
 8006066:	d108      	bne.n	800607a <HAL_RCC_OscConfig+0x39a>
 8006068:	4b65      	ldr	r3, [pc, #404]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006070:	4a63      	ldr	r2, [pc, #396]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006072:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006076:	6053      	str	r3, [r2, #4]
 8006078:	e02e      	b.n	80060d8 <HAL_RCC_OscConfig+0x3f8>
 800607a:	4b61      	ldr	r3, [pc, #388]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	069b      	lsls	r3, r3, #26
 8006088:	495d      	ldr	r1, [pc, #372]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 800608a:	4313      	orrs	r3, r2
 800608c:	604b      	str	r3, [r1, #4]
 800608e:	e023      	b.n	80060d8 <HAL_RCC_OscConfig+0x3f8>
 8006090:	4b5b      	ldr	r3, [pc, #364]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	061b      	lsls	r3, r3, #24
 800609e:	4958      	ldr	r1, [pc, #352]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60cb      	str	r3, [r1, #12]
 80060a4:	e018      	b.n	80060d8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060a6:	4b56      	ldr	r3, [pc, #344]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a55      	ldr	r2, [pc, #340]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80060ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b2:	f7fb fc65 	bl	8001980 <HAL_GetTick>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060ba:	f7fb fc61 	bl	8001980 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e212      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060cc:	4b4c      	ldr	r3, [pc, #304]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f0      	bne.n	80060ba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d036      	beq.n	8006152 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d019      	beq.n	8006120 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ec:	4b44      	ldr	r3, [pc, #272]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80060ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f0:	4a43      	ldr	r2, [pc, #268]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fb fc42 	bl	8001980 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006100:	f7fb fc3e 	bl	8001980 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e1ef      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006112:	4b3b      	ldr	r3, [pc, #236]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x420>
 800611e:	e018      	b.n	8006152 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006120:	4b37      	ldr	r3, [pc, #220]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006124:	4a36      	ldr	r2, [pc, #216]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612c:	f7fb fc28 	bl	8001980 <HAL_GetTick>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006134:	f7fb fc24 	bl	8001980 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e1d5      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d036      	beq.n	80061cc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d019      	beq.n	800619a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006166:	4b26      	ldr	r3, [pc, #152]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a25      	ldr	r2, [pc, #148]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 800616c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006172:	f7fb fc05 	bl	8001980 <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800617a:	f7fb fc01 	bl	8001980 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e1b2      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800618c:	4b1c      	ldr	r3, [pc, #112]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x49a>
 8006198:	e018      	b.n	80061cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800619a:	4b19      	ldr	r3, [pc, #100]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a18      	ldr	r2, [pc, #96]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80061a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061a6:	f7fb fbeb 	bl	8001980 <HAL_GetTick>
 80061aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061ae:	f7fb fbe7 	bl	8001980 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e198      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <HAL_RCC_OscConfig+0x520>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f0      	bne.n	80061ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8085 	beq.w	80062e4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_RCC_OscConfig+0x524>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <HAL_RCC_OscConfig+0x524>)
 80061e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061e6:	f7fb fbcb 	bl	8001980 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ec:	e00c      	b.n	8006208 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061ee:	f7fb fbc7 	bl	8001980 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b64      	cmp	r3, #100	; 0x64
 80061fa:	d905      	bls.n	8006208 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e178      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
 8006200:	58024400 	.word	0x58024400
 8006204:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006208:	4b96      	ldr	r3, [pc, #600]	; (8006464 <HAL_RCC_OscConfig+0x784>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ec      	beq.n	80061ee <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d106      	bne.n	800622a <HAL_RCC_OscConfig+0x54a>
 800621c:	4b92      	ldr	r3, [pc, #584]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	4a91      	ldr	r2, [pc, #580]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6713      	str	r3, [r2, #112]	; 0x70
 8006228:	e02d      	b.n	8006286 <HAL_RCC_OscConfig+0x5a6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x56c>
 8006232:	4b8d      	ldr	r3, [pc, #564]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	4a8c      	ldr	r2, [pc, #560]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006238:	f023 0301 	bic.w	r3, r3, #1
 800623c:	6713      	str	r3, [r2, #112]	; 0x70
 800623e:	4b8a      	ldr	r3, [pc, #552]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a89      	ldr	r2, [pc, #548]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
 800624a:	e01c      	b.n	8006286 <HAL_RCC_OscConfig+0x5a6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b05      	cmp	r3, #5
 8006252:	d10c      	bne.n	800626e <HAL_RCC_OscConfig+0x58e>
 8006254:	4b84      	ldr	r3, [pc, #528]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	4a83      	ldr	r2, [pc, #524]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800625a:	f043 0304 	orr.w	r3, r3, #4
 800625e:	6713      	str	r3, [r2, #112]	; 0x70
 8006260:	4b81      	ldr	r3, [pc, #516]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4a80      	ldr	r2, [pc, #512]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	6713      	str	r3, [r2, #112]	; 0x70
 800626c:	e00b      	b.n	8006286 <HAL_RCC_OscConfig+0x5a6>
 800626e:	4b7e      	ldr	r3, [pc, #504]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a7d      	ldr	r2, [pc, #500]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	4b7b      	ldr	r3, [pc, #492]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a7a      	ldr	r2, [pc, #488]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d015      	beq.n	80062ba <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628e:	f7fb fb77 	bl	8001980 <HAL_GetTick>
 8006292:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006296:	f7fb fb73 	bl	8001980 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e122      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ac:	4b6e      	ldr	r3, [pc, #440]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ee      	beq.n	8006296 <HAL_RCC_OscConfig+0x5b6>
 80062b8:	e014      	b.n	80062e4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fb fb61 	bl	8001980 <HAL_GetTick>
 80062be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fb fb5d 	bl	8001980 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e10c      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062d8:	4b63      	ldr	r3, [pc, #396]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ee      	bne.n	80062c2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8101 	beq.w	80064f0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062ee:	4b5e      	ldr	r3, [pc, #376]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f6:	2b18      	cmp	r3, #24
 80062f8:	f000 80bc 	beq.w	8006474 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b02      	cmp	r3, #2
 8006302:	f040 8095 	bne.w	8006430 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006306:	4b58      	ldr	r3, [pc, #352]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a57      	ldr	r2, [pc, #348]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800630c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fb fb35 	bl	8001980 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631a:	f7fb fb31 	bl	8001980 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e0e2      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800632c:	4b4e      	ldr	r3, [pc, #312]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f0      	bne.n	800631a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006338:	4b4b      	ldr	r3, [pc, #300]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800633a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633c:	4b4b      	ldr	r3, [pc, #300]	; (800646c <HAL_RCC_OscConfig+0x78c>)
 800633e:	4013      	ands	r3, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006348:	0112      	lsls	r2, r2, #4
 800634a:	430a      	orrs	r2, r1
 800634c:	4946      	ldr	r1, [pc, #280]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800634e:	4313      	orrs	r3, r2
 8006350:	628b      	str	r3, [r1, #40]	; 0x28
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	3b01      	subs	r3, #1
 8006358:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	3b01      	subs	r3, #1
 8006362:	025b      	lsls	r3, r3, #9
 8006364:	b29b      	uxth	r3, r3
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	3b01      	subs	r3, #1
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	3b01      	subs	r3, #1
 800637c:	061b      	lsls	r3, r3, #24
 800637e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006382:	4939      	ldr	r1, [pc, #228]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006384:	4313      	orrs	r3, r2
 8006386:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006388:	4b37      	ldr	r3, [pc, #220]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	4a36      	ldr	r2, [pc, #216]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 800638e:	f023 0301 	bic.w	r3, r3, #1
 8006392:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006394:	4b34      	ldr	r3, [pc, #208]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006398:	4b35      	ldr	r3, [pc, #212]	; (8006470 <HAL_RCC_OscConfig+0x790>)
 800639a:	4013      	ands	r3, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063a0:	00d2      	lsls	r2, r2, #3
 80063a2:	4931      	ldr	r1, [pc, #196]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063a8:	4b2f      	ldr	r3, [pc, #188]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	f023 020c 	bic.w	r2, r3, #12
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	492c      	ldr	r1, [pc, #176]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063ba:	4b2b      	ldr	r3, [pc, #172]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	f023 0202 	bic.w	r2, r3, #2
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	4928      	ldr	r1, [pc, #160]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063cc:	4b26      	ldr	r3, [pc, #152]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	4a25      	ldr	r2, [pc, #148]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d8:	4b23      	ldr	r3, [pc, #140]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4a22      	ldr	r2, [pc, #136]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063e4:	4b20      	ldr	r3, [pc, #128]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	4a1f      	ldr	r2, [pc, #124]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063f0:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fb faba 	bl	8001980 <HAL_GetTick>
 800640c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006410:	f7fb fab6 	bl	8001980 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e067      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006422:	4b11      	ldr	r3, [pc, #68]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0x730>
 800642e:	e05f      	b.n	80064f0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0c      	ldr	r2, [pc, #48]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800643a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fb faa0 	bl	8001980 <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006444:	f7fb fa9c 	bl	8001980 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e04d      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006456:	4b04      	ldr	r3, [pc, #16]	; (8006468 <HAL_RCC_OscConfig+0x788>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x764>
 8006462:	e045      	b.n	80064f0 <HAL_RCC_OscConfig+0x810>
 8006464:	58024800 	.word	0x58024800
 8006468:	58024400 	.word	0x58024400
 800646c:	fffffc0c 	.word	0xfffffc0c
 8006470:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006474:	4b21      	ldr	r3, [pc, #132]	; (80064fc <HAL_RCC_OscConfig+0x81c>)
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800647a:	4b20      	ldr	r3, [pc, #128]	; (80064fc <HAL_RCC_OscConfig+0x81c>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2b01      	cmp	r3, #1
 8006486:	d031      	beq.n	80064ec <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f003 0203 	and.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006492:	429a      	cmp	r2, r3
 8006494:	d12a      	bne.n	80064ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d122      	bne.n	80064ec <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d11a      	bne.n	80064ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	0a5b      	lsrs	r3, r3, #9
 80064ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d111      	bne.n	80064ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d108      	bne.n	80064ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d001      	beq.n	80064f0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3730      	adds	r7, #48	; 0x30
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	58024400 	.word	0x58024400

08006500 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e19c      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006514:	4b8a      	ldr	r3, [pc, #552]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d910      	bls.n	8006544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b87      	ldr	r3, [pc, #540]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 020f 	bic.w	r2, r3, #15
 800652a:	4985      	ldr	r1, [pc, #532]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006532:	4b83      	ldr	r3, [pc, #524]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e184      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	4b7b      	ldr	r3, [pc, #492]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800655c:	429a      	cmp	r2, r3
 800655e:	d908      	bls.n	8006572 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006560:	4b78      	ldr	r3, [pc, #480]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	4975      	ldr	r1, [pc, #468]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800656e:	4313      	orrs	r3, r2
 8006570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d010      	beq.n	80065a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	4b70      	ldr	r3, [pc, #448]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800658a:	429a      	cmp	r2, r3
 800658c:	d908      	bls.n	80065a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	496a      	ldr	r1, [pc, #424]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800659c:	4313      	orrs	r3, r2
 800659e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	4b64      	ldr	r3, [pc, #400]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d908      	bls.n	80065ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065bc:	4b61      	ldr	r3, [pc, #388]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	495e      	ldr	r1, [pc, #376]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	4b59      	ldr	r3, [pc, #356]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d908      	bls.n	80065fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065ea:	4b56      	ldr	r3, [pc, #344]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4953      	ldr	r1, [pc, #332]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	4b4d      	ldr	r3, [pc, #308]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	429a      	cmp	r2, r3
 8006616:	d908      	bls.n	800662a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006618:	4b4a      	ldr	r3, [pc, #296]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f023 020f 	bic.w	r2, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4947      	ldr	r1, [pc, #284]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006626:	4313      	orrs	r3, r2
 8006628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d055      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006636:	4b43      	ldr	r3, [pc, #268]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	4940      	ldr	r1, [pc, #256]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006644:	4313      	orrs	r3, r2
 8006646:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d107      	bne.n	8006660 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006650:	4b3c      	ldr	r3, [pc, #240]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d121      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0f6      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d107      	bne.n	8006678 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006668:	4b36      	ldr	r3, [pc, #216]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d115      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0ea      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006680:	4b30      	ldr	r3, [pc, #192]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0de      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006690:	4b2c      	ldr	r3, [pc, #176]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0d6      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f023 0207 	bic.w	r2, r3, #7
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4925      	ldr	r1, [pc, #148]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fb f965 	bl	8001980 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ba:	f7fb f961 	bl	8001980 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0be      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	429a      	cmp	r2, r3
 80066e0:	d1eb      	bne.n	80066ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	4b14      	ldr	r3, [pc, #80]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d208      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f023 020f 	bic.w	r2, r3, #15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	490e      	ldr	r1, [pc, #56]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800670c:	4313      	orrs	r3, r2
 800670e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d214      	bcs.n	8006748 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 020f 	bic.w	r2, r3, #15
 8006726:	4906      	ldr	r1, [pc, #24]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d005      	beq.n	8006748 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e086      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
 8006740:	52002000 	.word	0x52002000
 8006744:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006760:	429a      	cmp	r2, r3
 8006762:	d208      	bcs.n	8006776 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006764:	4b3c      	ldr	r3, [pc, #240]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	4939      	ldr	r1, [pc, #228]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006772:	4313      	orrs	r3, r2
 8006774:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d010      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	4b34      	ldr	r3, [pc, #208]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800678e:	429a      	cmp	r2, r3
 8006790:	d208      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	492e      	ldr	r1, [pc, #184]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699a      	ldr	r2, [r3, #24]
 80067b4:	4b28      	ldr	r3, [pc, #160]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067bc:	429a      	cmp	r2, r3
 80067be:	d208      	bcs.n	80067d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067c0:	4b25      	ldr	r3, [pc, #148]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	4922      	ldr	r1, [pc, #136]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d208      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067ee:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	4917      	ldr	r1, [pc, #92]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006800:	f000 f834 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006804:	4601      	mov	r1, r0
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	4a12      	ldr	r2, [pc, #72]	; (800685c <HAL_RCC_ClockConfig+0x35c>)
 8006812:	5cd3      	ldrb	r3, [r2, r3]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	fa21 f303 	lsr.w	r3, r1, r3
 800681c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <HAL_RCC_ClockConfig+0x35c>)
 8006828:	5cd3      	ldrb	r3, [r2, r3]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <HAL_RCC_ClockConfig+0x360>)
 8006836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006838:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x364>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800683e:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <HAL_RCC_ClockConfig+0x368>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fa fa1a 	bl	8000c7c <HAL_InitTick>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
 800685c:	080204b8 	.word	0x080204b8
 8006860:	24000004 	.word	0x24000004
 8006864:	24000000 	.word	0x24000000
 8006868:	24000008 	.word	0x24000008

0800686c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	; 0x24
 8006870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006872:	4baf      	ldr	r3, [pc, #700]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687a:	2b18      	cmp	r3, #24
 800687c:	f200 814e 	bhi.w	8006b1c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068ed 	.word	0x080068ed
 800688c:	08006b1d 	.word	0x08006b1d
 8006890:	08006b1d 	.word	0x08006b1d
 8006894:	08006b1d 	.word	0x08006b1d
 8006898:	08006b1d 	.word	0x08006b1d
 800689c:	08006b1d 	.word	0x08006b1d
 80068a0:	08006b1d 	.word	0x08006b1d
 80068a4:	08006b1d 	.word	0x08006b1d
 80068a8:	08006913 	.word	0x08006913
 80068ac:	08006b1d 	.word	0x08006b1d
 80068b0:	08006b1d 	.word	0x08006b1d
 80068b4:	08006b1d 	.word	0x08006b1d
 80068b8:	08006b1d 	.word	0x08006b1d
 80068bc:	08006b1d 	.word	0x08006b1d
 80068c0:	08006b1d 	.word	0x08006b1d
 80068c4:	08006b1d 	.word	0x08006b1d
 80068c8:	08006919 	.word	0x08006919
 80068cc:	08006b1d 	.word	0x08006b1d
 80068d0:	08006b1d 	.word	0x08006b1d
 80068d4:	08006b1d 	.word	0x08006b1d
 80068d8:	08006b1d 	.word	0x08006b1d
 80068dc:	08006b1d 	.word	0x08006b1d
 80068e0:	08006b1d 	.word	0x08006b1d
 80068e4:	08006b1d 	.word	0x08006b1d
 80068e8:	0800691f 	.word	0x0800691f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ec:	4b90      	ldr	r3, [pc, #576]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f8:	4b8d      	ldr	r3, [pc, #564]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	08db      	lsrs	r3, r3, #3
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	4a8c      	ldr	r2, [pc, #560]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800690a:	e10a      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800690c:	4b89      	ldr	r3, [pc, #548]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800690e:	61bb      	str	r3, [r7, #24]
    break;
 8006910:	e107      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006912:	4b89      	ldr	r3, [pc, #548]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006914:	61bb      	str	r3, [r7, #24]
    break;
 8006916:	e104      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006918:	4b88      	ldr	r3, [pc, #544]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800691a:	61bb      	str	r3, [r7, #24]
    break;
 800691c:	e101      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691e:	4b84      	ldr	r3, [pc, #528]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006928:	4b81      	ldr	r3, [pc, #516]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	091b      	lsrs	r3, r3, #4
 800692e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006932:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006934:	4b7e      	ldr	r3, [pc, #504]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800693e:	4b7c      	ldr	r3, [pc, #496]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80da 	beq.w	8006b16 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d05a      	beq.n	8006a1e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006968:	2b01      	cmp	r3, #1
 800696a:	d302      	bcc.n	8006972 <HAL_RCC_GetSysClockFreq+0x106>
 800696c:	2b02      	cmp	r3, #2
 800696e:	d078      	beq.n	8006a62 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006970:	e099      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006972:	4b6f      	ldr	r3, [pc, #444]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d02d      	beq.n	80069da <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800697e:	4b6c      	ldr	r3, [pc, #432]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	08db      	lsrs	r3, r3, #3
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	4a6a      	ldr	r2, [pc, #424]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a8:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069bc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 80069c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069d8:	e087      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>
 80069e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ec:	4b50      	ldr	r3, [pc, #320]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a00:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1c:	e065      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a28:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a30:	4b3f      	ldr	r3, [pc, #252]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a38:	ee07 3a90 	vmov	s15, r3
 8006a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a44:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a60:	e043      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a74:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a88:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa4:	e021      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006acc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	0a5b      	lsrs	r3, r3, #9
 8006af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af4:	3301      	adds	r3, #1
 8006af6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b0e:	ee17 3a90 	vmov	r3, s15
 8006b12:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b14:	e005      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
    break;
 8006b1a:	e002      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b1e:	61bb      	str	r3, [r7, #24]
    break;
 8006b20:	bf00      	nop
  }

  return sysclockfreq;
 8006b22:	69bb      	ldr	r3, [r7, #24]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3724      	adds	r7, #36	; 0x24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	58024400 	.word	0x58024400
 8006b34:	03d09000 	.word	0x03d09000
 8006b38:	003d0900 	.word	0x003d0900
 8006b3c:	017d7840 	.word	0x017d7840
 8006b40:	46000000 	.word	0x46000000
 8006b44:	4c742400 	.word	0x4c742400
 8006b48:	4a742400 	.word	0x4a742400
 8006b4c:	4bbebc20 	.word	0x4bbebc20

08006b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b56:	f7ff fe89 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b68:	5cd3      	ldrb	r3, [r2, r3]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8006b72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b74:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b7e:	5cd3      	ldrb	r3, [r2, r3]
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	4a07      	ldr	r2, [pc, #28]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b8e:	4a07      	ldr	r2, [pc, #28]	; (8006bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b94:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	080204b8 	.word	0x080204b8
 8006ba8:	24000004 	.word	0x24000004
 8006bac:	24000000 	.word	0x24000000

08006bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bb4:	f7ff ffcc 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	4a04      	ldr	r2, [pc, #16]	; (8006bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bc6:	5cd3      	ldrb	r3, [r2, r3]
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	080204b8 	.word	0x080204b8

08006bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006be0:	f7ff ffb6 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8006be4:	4601      	mov	r1, r0
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	0a1b      	lsrs	r3, r3, #8
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bf2:	5cd3      	ldrb	r3, [r2, r3]
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	58024400 	.word	0x58024400
 8006c04:	080204b8 	.word	0x080204b8

08006c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	223f      	movs	r2, #63	; 0x3f
 8006c16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f003 0207 	and.w	r2, r3, #7
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006c24:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006c30:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 020f 	and.w	r2, r3, #15
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006c3c:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_RCC_GetClockConfig+0x7c>)
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCC_GetClockConfig+0x80>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	601a      	str	r2, [r3, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	58024400 	.word	0x58024400
 8006c88:	52002000 	.word	0x52002000

08006c8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c94:	2300      	movs	r3, #0
 8006c96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d03d      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb0:	d013      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb6:	d802      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006cbc:	e01f      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc2:	d013      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006cc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cc8:	d01c      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006cca:	e018      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ccc:	4baf      	ldr	r3, [pc, #700]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	4aae      	ldr	r2, [pc, #696]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cd8:	e015      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	2102      	movs	r1, #2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f96f 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cea:	e00c      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3324      	adds	r3, #36	; 0x24
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fa18 	bl	8008128 <RCCEx_PLL3_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cfc:	e003      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	75fb      	strb	r3, [r7, #23]
      break;
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d0c:	4b9f      	ldr	r3, [pc, #636]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d18:	499c      	ldr	r1, [pc, #624]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8006d1e:	e001      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d03d      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d826      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d55 	.word	0x08006d55
 8006d44:	08006d63 	.word	0x08006d63
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	08006d8d 	.word	0x08006d8d
 8006d50:	08006d8d 	.word	0x08006d8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d54:	4b8d      	ldr	r3, [pc, #564]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	4a8c      	ldr	r2, [pc, #560]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d60:	e015      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 f92b 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d72:	e00c      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f9d4 	bl	8008128 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d94:	4b7d      	ldr	r3, [pc, #500]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	f023 0207 	bic.w	r2, r3, #7
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	497a      	ldr	r1, [pc, #488]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	650b      	str	r3, [r1, #80]	; 0x50
 8006da6:	e001      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03e      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d01c      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006dc0:	2b80      	cmp	r3, #128	; 0x80
 8006dc2:	d804      	bhi.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d00d      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006dcc:	e01e      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006dce:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd0:	d01f      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd6:	d01e      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dd8:	e018      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dda:	4b6c      	ldr	r3, [pc, #432]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a6b      	ldr	r2, [pc, #428]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006de6:	e017      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 f8e8 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006df8:	e00e      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3324      	adds	r3, #36	; 0x24
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 f991 	bl	8008128 <RCCEx_PLL3_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e0a:	e005      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e10:	e002      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e1e:	4b5b      	ldr	r3, [pc, #364]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e22:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2a:	4958      	ldr	r1, [pc, #352]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	650b      	str	r3, [r1, #80]	; 0x50
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d044      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e4c:	d01f      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e52:	d805      	bhi.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e5c:	d00e      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006e5e:	e01f      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006e60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e64:	d01f      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e6a:	d01e      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e6c:	e018      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6e:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4a46      	ldr	r2, [pc, #280]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e7a:	e017      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 f89e 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e8c:	e00e      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3324      	adds	r3, #36	; 0x24
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 f947 	bl	8008128 <RCCEx_PLL3_Config>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e9e:	e005      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006eb2:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ec0:	4932      	ldr	r1, [pc, #200]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ec6:	e001      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d044      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ee2:	d01f      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ee8:	d805      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006eee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ef2:	d00e      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006ef4:	e01f      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006ef6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006efa:	d01f      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f00:	d01e      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f02:	e018      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f04:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a20      	ldr	r2, [pc, #128]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f10:	e017      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3304      	adds	r3, #4
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 f853 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f22:	e00e      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3324      	adds	r3, #36	; 0x24
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 f8fc 	bl	8008128 <RCCEx_PLL3_Config>
 8006f30:	4603      	mov	r3, r0
 8006f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f34:	e005      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3a:	e002      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e000      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f48:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f56:	490d      	ldr	r1, [pc, #52]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f5c:	e001      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d035      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d00c      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d802      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01b      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006f7e:	e017      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d00c      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d018      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006f88:	e012      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f8a:	bf00      	nop
 8006f8c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4baf      	ldr	r3, [pc, #700]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4aae      	ldr	r2, [pc, #696]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f9c:	e00e      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 f80d 	bl	8007fc4 <RCCEx_PLL2_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fae:	e005      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb4:	e002      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006fc2:	4ba3      	ldr	r3, [pc, #652]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fce:	49a0      	ldr	r1, [pc, #640]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fd4:	e001      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d042      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fee:	d01f      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff4:	d805      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffe:	d00e      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007000:	e01f      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007002:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007006:	d01f      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800700c:	d01e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800700e:	e018      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007010:	4b8f      	ldr	r3, [pc, #572]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	4a8e      	ldr	r2, [pc, #568]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800701a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800701c:	e017      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ffcd 	bl	8007fc4 <RCCEx_PLL2_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800702e:	e00e      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3324      	adds	r3, #36	; 0x24
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f876 	bl	8008128 <RCCEx_PLL3_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007040:	e005      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
      break;
 8007046:	e002      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800704c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d109      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007054:	4b7e      	ldr	r3, [pc, #504]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	497b      	ldr	r1, [pc, #492]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007062:	4313      	orrs	r3, r2
 8007064:	650b      	str	r3, [r1, #80]	; 0x50
 8007066:	e001      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d042      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007080:	d01b      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007086:	d805      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d022      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d00a      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007092:	e01b      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007098:	d01d      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800709a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800709e:	d01c      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80070a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070a4:	d01b      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x452>
 80070a6:	e011      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
 80070ac:	2101      	movs	r1, #1
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 ff88 	bl	8007fc4 <RCCEx_PLL2_Config>
 80070b4:	4603      	mov	r3, r0
 80070b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070b8:	e012      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3324      	adds	r3, #36	; 0x24
 80070be:	2101      	movs	r1, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 f831 	bl	8008128 <RCCEx_PLL3_Config>
 80070c6:	4603      	mov	r3, r0
 80070c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070ca:	e009      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
      break;
 80070d0:	e006      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070d2:	bf00      	nop
 80070d4:	e004      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070d6:	bf00      	nop
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070da:	bf00      	nop
 80070dc:	e000      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d109      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070e6:	4b5a      	ldr	r3, [pc, #360]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f2:	4957      	ldr	r1, [pc, #348]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	650b      	str	r3, [r1, #80]	; 0x50
 80070f8:	e001      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d044      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007114:	d01b      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800711a:	d805      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d022      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007124:	d00a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007126:	e01b      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d01d      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800712e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007132:	d01c      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007134:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007138:	d01b      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f000 ff3e 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800714c:	e012      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3324      	adds	r3, #36	; 0x24
 8007152:	2101      	movs	r1, #1
 8007154:	4618      	mov	r0, r3
 8007156:	f000 ffe7 	bl	8008128 <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800715e:	e009      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
      break;
 8007164:	e006      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007166:	bf00      	nop
 8007168:	e004      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800716a:	bf00      	nop
 800716c:	e002      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800717a:	4b35      	ldr	r3, [pc, #212]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007188:	4931      	ldr	r1, [pc, #196]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800718a:	4313      	orrs	r3, r2
 800718c:	658b      	str	r3, [r1, #88]	; 0x58
 800718e:	e001      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d02d      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071a8:	d005      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80071aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ae:	d009      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d013      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80071b4:	e00f      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b6:	4b26      	ldr	r3, [pc, #152]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	4a25      	ldr	r2, [pc, #148]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071c2:	e00c      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	2101      	movs	r1, #1
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fefa 	bl	8007fc4 <RCCEx_PLL2_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071d4:	e003      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
      break;
 80071da:	e000      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80071dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071e4:	4b1a      	ldr	r3, [pc, #104]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f0:	4917      	ldr	r1, [pc, #92]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	650b      	str	r3, [r1, #80]	; 0x50
 80071f6:	e001      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d035      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720c:	2b03      	cmp	r3, #3
 800720e:	d81b      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007255 	.word	0x08007255
 800721c:	08007229 	.word	0x08007229
 8007220:	08007237 	.word	0x08007237
 8007224:	08007255 	.word	0x08007255
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4a08      	ldr	r2, [pc, #32]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007234:	e00f      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	2102      	movs	r1, #2
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fec1 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007246:	e006      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
      break;
 800724c:	e003      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400
      break;
 8007254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800725c:	4bba      	ldr	r3, [pc, #744]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800725e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007260:	f023 0203 	bic.w	r2, r3, #3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007268:	49b7      	ldr	r1, [pc, #732]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800726a:	4313      	orrs	r3, r2
 800726c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800726e:	e001      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8086 	beq.w	800738e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007282:	4bb2      	ldr	r3, [pc, #712]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4ab1      	ldr	r2, [pc, #708]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800728e:	f7fa fb77 	bl	8001980 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007294:	e009      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007296:	f7fa fb73 	bl	8001980 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b64      	cmp	r3, #100	; 0x64
 80072a2:	d902      	bls.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	75fb      	strb	r3, [r7, #23]
        break;
 80072a8:	e005      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072aa:	4ba8      	ldr	r3, [pc, #672]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0ef      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d166      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072bc:	4ba2      	ldr	r3, [pc, #648]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072c6:	4053      	eors	r3, r2
 80072c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d013      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072d0:	4b9d      	ldr	r3, [pc, #628]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072da:	4b9b      	ldr	r3, [pc, #620]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a9a      	ldr	r2, [pc, #616]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072e6:	4b98      	ldr	r3, [pc, #608]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a97      	ldr	r2, [pc, #604]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072f2:	4a95      	ldr	r2, [pc, #596]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007302:	d115      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7fa fb3c 	bl	8001980 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800730a:	e00b      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730c:	f7fa fb38 	bl	8001980 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f241 3288 	movw	r2, #5000	; 0x1388
 800731a:	4293      	cmp	r3, r2
 800731c:	d902      	bls.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	75fb      	strb	r3, [r7, #23]
            break;
 8007322:	e005      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007324:	4b88      	ldr	r3, [pc, #544]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0ed      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d126      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800733c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007344:	d10d      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007346:	4b80      	ldr	r3, [pc, #512]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007354:	0919      	lsrs	r1, r3, #4
 8007356:	4b7e      	ldr	r3, [pc, #504]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007358:	400b      	ands	r3, r1
 800735a:	497b      	ldr	r1, [pc, #492]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800735c:	4313      	orrs	r3, r2
 800735e:	610b      	str	r3, [r1, #16]
 8007360:	e005      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007362:	4b79      	ldr	r3, [pc, #484]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	4a78      	ldr	r2, [pc, #480]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007368:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800736c:	6113      	str	r3, [r2, #16]
 800736e:	4b76      	ldr	r3, [pc, #472]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007370:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800737c:	4972      	ldr	r1, [pc, #456]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800737e:	4313      	orrs	r3, r2
 8007380:	670b      	str	r3, [r1, #112]	; 0x70
 8007382:	e004      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	75bb      	strb	r3, [r7, #22]
 8007388:	e001      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d07d      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739e:	2b28      	cmp	r3, #40	; 0x28
 80073a0:	d866      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80073a2:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a8:	08007477 	.word	0x08007477
 80073ac:	08007471 	.word	0x08007471
 80073b0:	08007471 	.word	0x08007471
 80073b4:	08007471 	.word	0x08007471
 80073b8:	08007471 	.word	0x08007471
 80073bc:	08007471 	.word	0x08007471
 80073c0:	08007471 	.word	0x08007471
 80073c4:	08007471 	.word	0x08007471
 80073c8:	0800744d 	.word	0x0800744d
 80073cc:	08007471 	.word	0x08007471
 80073d0:	08007471 	.word	0x08007471
 80073d4:	08007471 	.word	0x08007471
 80073d8:	08007471 	.word	0x08007471
 80073dc:	08007471 	.word	0x08007471
 80073e0:	08007471 	.word	0x08007471
 80073e4:	08007471 	.word	0x08007471
 80073e8:	0800745f 	.word	0x0800745f
 80073ec:	08007471 	.word	0x08007471
 80073f0:	08007471 	.word	0x08007471
 80073f4:	08007471 	.word	0x08007471
 80073f8:	08007471 	.word	0x08007471
 80073fc:	08007471 	.word	0x08007471
 8007400:	08007471 	.word	0x08007471
 8007404:	08007471 	.word	0x08007471
 8007408:	08007477 	.word	0x08007477
 800740c:	08007471 	.word	0x08007471
 8007410:	08007471 	.word	0x08007471
 8007414:	08007471 	.word	0x08007471
 8007418:	08007471 	.word	0x08007471
 800741c:	08007471 	.word	0x08007471
 8007420:	08007471 	.word	0x08007471
 8007424:	08007471 	.word	0x08007471
 8007428:	08007477 	.word	0x08007477
 800742c:	08007471 	.word	0x08007471
 8007430:	08007471 	.word	0x08007471
 8007434:	08007471 	.word	0x08007471
 8007438:	08007471 	.word	0x08007471
 800743c:	08007471 	.word	0x08007471
 8007440:	08007471 	.word	0x08007471
 8007444:	08007471 	.word	0x08007471
 8007448:	08007477 	.word	0x08007477
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2101      	movs	r1, #1
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fdb6 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800745c:	e00c      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	2101      	movs	r1, #1
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fe5f 	bl	8008128 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800746e:	e003      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800747e:	4b32      	ldr	r3, [pc, #200]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800748a:	492f      	ldr	r1, [pc, #188]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800748c:	4313      	orrs	r3, r2
 800748e:	654b      	str	r3, [r1, #84]	; 0x54
 8007490:	e001      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d037      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d820      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x860>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074f3 	.word	0x080074f3
 80074b4:	080074c9 	.word	0x080074c9
 80074b8:	080074db 	.word	0x080074db
 80074bc:	080074f3 	.word	0x080074f3
 80074c0:	080074f3 	.word	0x080074f3
 80074c4:	080074f3 	.word	0x080074f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	2101      	movs	r1, #1
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fd78 	bl	8007fc4 <RCCEx_PLL2_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074d8:	e00c      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3324      	adds	r3, #36	; 0x24
 80074de:	2101      	movs	r1, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fe21 	bl	8008128 <RCCEx_PLL3_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074ea:	e003      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
      break;
 80074f0:	e000      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80074f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074fa:	4b13      	ldr	r3, [pc, #76]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f023 0207 	bic.w	r2, r3, #7
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007506:	4910      	ldr	r1, [pc, #64]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007508:	4313      	orrs	r3, r2
 800750a:	654b      	str	r3, [r1, #84]	; 0x54
 800750c:	e001      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d040      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	2b05      	cmp	r3, #5
 8007526:	d827      	bhi.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007528:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	0800757f 	.word	0x0800757f
 8007534:	08007555 	.word	0x08007555
 8007538:	08007567 	.word	0x08007567
 800753c:	0800757f 	.word	0x0800757f
 8007540:	0800757f 	.word	0x0800757f
 8007544:	0800757f 	.word	0x0800757f
 8007548:	58024400 	.word	0x58024400
 800754c:	58024800 	.word	0x58024800
 8007550:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	2101      	movs	r1, #1
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fd32 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007564:	e00c      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3324      	adds	r3, #36	; 0x24
 800756a:	2101      	movs	r1, #1
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fddb 	bl	8008128 <RCCEx_PLL3_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007576:	e003      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
      break;
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800757e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007586:	4bb2      	ldr	r3, [pc, #712]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758a:	f023 0207 	bic.w	r2, r3, #7
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007594:	49ae      	ldr	r1, [pc, #696]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007596:	4313      	orrs	r3, r2
 8007598:	658b      	str	r3, [r1, #88]	; 0x58
 800759a:	e001      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d044      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b6:	d01b      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80075b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075bc:	d805      	bhi.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d022      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80075c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c6:	d00a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x952>
 80075c8:	e01b      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80075ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ce:	d01d      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x980>
 80075d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d4:	d01c      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80075d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075da:	d01b      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80075dc:	e011      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fced 	bl	8007fc4 <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075ee:	e012      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3324      	adds	r3, #36	; 0x24
 80075f4:	2102      	movs	r1, #2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fd96 	bl	8008128 <RCCEx_PLL3_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007600:	e009      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]
      break;
 8007606:	e006      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007608:	bf00      	nop
 800760a:	e004      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800760c:	bf00      	nop
 800760e:	e002      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800761c:	4b8c      	ldr	r3, [pc, #560]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762a:	4989      	ldr	r1, [pc, #548]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800762c:	4313      	orrs	r3, r2
 800762e:	654b      	str	r3, [r1, #84]	; 0x54
 8007630:	e001      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d044      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764c:	d01b      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007652:	d805      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d022      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765c:	d00a      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800765e:	e01b      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007664:	d01d      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007666:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800766a:	d01c      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800766c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007670:	d01b      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007672:	e011      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fca2 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007684:	e012      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	; 0x24
 800768a:	2102      	movs	r1, #2
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fd4b 	bl	8008128 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007696:	e009      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
      break;
 800769c:	e006      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800769e:	bf00      	nop
 80076a0:	e004      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076a2:	bf00      	nop
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076b2:	4b67      	ldr	r3, [pc, #412]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076c0:	4963      	ldr	r1, [pc, #396]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	658b      	str	r3, [r1, #88]	; 0x58
 80076c6:	e001      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d044      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e2:	d01b      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80076e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e8:	d805      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d022      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80076f4:	e01b      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fa:	d01d      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80076fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007700:	d01c      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007702:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007706:	d01b      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007708:	e011      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fc57 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800771a:	e012      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	2102      	movs	r1, #2
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fd00 	bl	8008128 <RCCEx_PLL3_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800772c:	e009      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]
      break;
 8007732:	e006      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007734:	bf00      	nop
 8007736:	e004      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007738:	bf00      	nop
 800773a:	e002      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800773c:	bf00      	nop
 800773e:	e000      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007748:	4b41      	ldr	r3, [pc, #260]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007756:	493e      	ldr	r1, [pc, #248]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007758:	4313      	orrs	r3, r2
 800775a:	658b      	str	r3, [r1, #88]	; 0x58
 800775c:	e001      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01a      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007778:	d10a      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	2102      	movs	r1, #2
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fcd1 	bl	8008128 <RCCEx_PLL3_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007790:	4b2f      	ldr	r3, [pc, #188]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779e:	492c      	ldr	r1, [pc, #176]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01a      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ba:	d10a      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3324      	adds	r3, #36	; 0x24
 80077c0:	2102      	movs	r1, #2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fcb0 	bl	8008128 <RCCEx_PLL3_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077e0:	491b      	ldr	r1, [pc, #108]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d032      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fc:	d00d      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80077fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007802:	d016      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d111      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fbd8 	bl	8007fc4 <RCCEx_PLL2_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007818:	e00c      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3324      	adds	r3, #36	; 0x24
 800781e:	2102      	movs	r1, #2
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fc81 	bl	8008128 <RCCEx_PLL3_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
      break;
 8007830:	e000      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10c      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007848:	4901      	ldr	r1, [pc, #4]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800784a:	4313      	orrs	r3, r2
 800784c:	658b      	str	r3, [r1, #88]	; 0x58
 800784e:	e003      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d02f      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800786e:	d00c      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007874:	d015      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800787a:	d10f      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787c:	4b79      	ldr	r3, [pc, #484]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	4a78      	ldr	r2, [pc, #480]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007888:	e00c      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3324      	adds	r3, #36	; 0x24
 800788e:	2101      	movs	r1, #1
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fc49 	bl	8008128 <RCCEx_PLL3_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800789a:	e003      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	75fb      	strb	r3, [r7, #23]
      break;
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80078a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078aa:	4b6e      	ldr	r3, [pc, #440]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b8:	496a      	ldr	r1, [pc, #424]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	654b      	str	r3, [r1, #84]	; 0x54
 80078be:	e001      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d029      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078dc:	d007      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80078de:	e00f      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e0:	4b60      	ldr	r3, [pc, #384]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	4a5f      	ldr	r2, [pc, #380]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078ec:	e00b      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3304      	adds	r3, #4
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fb65 	bl	8007fc4 <RCCEx_PLL2_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078fe:	e002      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	75fb      	strb	r3, [r7, #23]
      break;
 8007904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800790c:	4b55      	ldr	r3, [pc, #340]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800790e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007918:	4952      	ldr	r1, [pc, #328]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800791a:	4313      	orrs	r3, r2
 800791c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800791e:	e001      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3324      	adds	r3, #36	; 0x24
 8007934:	2102      	movs	r1, #2
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fbf6 	bl	8008128 <RCCEx_PLL3_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02f      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795a:	d00c      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800795c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007960:	d802      	bhi.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d011      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007966:	e00d      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d00f      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800796e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007972:	d00e      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007974:	e006      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007976:	4b3b      	ldr	r3, [pc, #236]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a3a      	ldr	r2, [pc, #232]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800797c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007980:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007982:	e007      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
      break;
 8007988:	e004      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800798a:	bf00      	nop
 800798c:	e002      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d109      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800799a:	4b32      	ldr	r3, [pc, #200]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800799c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a6:	492f      	ldr	r1, [pc, #188]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	654b      	str	r3, [r1, #84]	; 0x54
 80079ac:	e001      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d008      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079be:	4b29      	ldr	r3, [pc, #164]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	4926      	ldr	r1, [pc, #152]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079dc:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079ea:	491e      	ldr	r1, [pc, #120]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079fc:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a08:	4916      	ldr	r1, [pc, #88]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a24:	6113      	str	r3, [r2, #16]
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a30:	490c      	ldr	r1, [pc, #48]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da08      	bge.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	4906      	ldr	r1, [pc, #24]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007a50:	7dbb      	ldrb	r3, [r7, #22]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	58024400 	.word	0x58024400

08007a68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a6c:	f7ff f870 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8007a70:	4601      	mov	r1, r0
 8007a72:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	4a04      	ldr	r2, [pc, #16]	; (8007a90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a7e:	5cd3      	ldrb	r3, [r2, r3]
 8007a80:	f003 031f 	and.w	r3, r3, #31
 8007a84:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	080204b8 	.word	0x080204b8

08007a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b089      	sub	sp, #36	; 0x24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a9c:	4b9d      	ldr	r3, [pc, #628]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007aa6:	4b9b      	ldr	r3, [pc, #620]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	0b1b      	lsrs	r3, r3, #12
 8007aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ab2:	4b98      	ldr	r3, [pc, #608]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007abe:	4b95      	ldr	r3, [pc, #596]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	08db      	lsrs	r3, r3, #3
 8007ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	fb02 f303 	mul.w	r3, r2, r3
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 810a 	beq.w	8007cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d05a      	beq.n	8007b9e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d302      	bcc.n	8007af2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d078      	beq.n	8007be2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007af0:	e099      	b.n	8007c26 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af2:	4b88      	ldr	r3, [pc, #544]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d02d      	beq.n	8007b5a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007afe:	4b85      	ldr	r3, [pc, #532]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	08db      	lsrs	r3, r3, #3
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	4a83      	ldr	r2, [pc, #524]	; (8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b28:	4b7a      	ldr	r3, [pc, #488]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b58:	e087      	b.n	8007c6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6c:	4b69      	ldr	r3, [pc, #420]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b9c:	e065      	b.n	8007c6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb0:	4b58      	ldr	r3, [pc, #352]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007be0:	e043      	b.n	8007c6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	ee07 3a90 	vmov	s15, r3
 8007be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf4:	4b47      	ldr	r3, [pc, #284]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfc:	ee07 3a90 	vmov	s15, r3
 8007c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c24:	e021      	b.n	8007c6a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c30:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c38:	4b36      	ldr	r3, [pc, #216]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c68:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c6a:	4b2a      	ldr	r3, [pc, #168]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	0a5b      	lsrs	r3, r3, #9
 8007c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c74:	ee07 3a90 	vmov	s15, r3
 8007c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c90:	ee17 2a90 	vmov	r2, s15
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c98:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cbe:	ee17 2a90 	vmov	r2, s15
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007cc6:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	0e1b      	lsrs	r3, r3, #24
 8007ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cec:	ee17 2a90 	vmov	r2, s15
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cf4:	e008      	b.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	609a      	str	r2, [r3, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	3724      	adds	r7, #36	; 0x24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	58024400 	.word	0x58024400
 8007d18:	03d09000 	.word	0x03d09000
 8007d1c:	46000000 	.word	0x46000000
 8007d20:	4c742400 	.word	0x4c742400
 8007d24:	4a742400 	.word	0x4a742400
 8007d28:	4bbebc20 	.word	0x4bbebc20

08007d2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b089      	sub	sp, #36	; 0x24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d34:	4b9d      	ldr	r3, [pc, #628]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d3e:	4b9b      	ldr	r3, [pc, #620]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	0d1b      	lsrs	r3, r3, #20
 8007d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d4a:	4b98      	ldr	r3, [pc, #608]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	0a1b      	lsrs	r3, r3, #8
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d56:	4b95      	ldr	r3, [pc, #596]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	08db      	lsrs	r3, r3, #3
 8007d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 810a 	beq.w	8007f8e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d05a      	beq.n	8007e36 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d302      	bcc.n	8007d8a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d078      	beq.n	8007e7a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007d88:	e099      	b.n	8007ebe <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d8a:	4b88      	ldr	r3, [pc, #544]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02d      	beq.n	8007df2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d96:	4b85      	ldr	r3, [pc, #532]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	08db      	lsrs	r3, r3, #3
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	4a83      	ldr	r2, [pc, #524]	; (8007fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007da2:	fa22 f303 	lsr.w	r3, r2, r3
 8007da6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	ee07 3a90 	vmov	s15, r3
 8007db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc0:	4b7a      	ldr	r3, [pc, #488]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	ee07 3a90 	vmov	s15, r3
 8007dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007df0:	e087      	b.n	8007f02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e04:	4b69      	ldr	r3, [pc, #420]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e18:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e34:	e065      	b.n	8007f02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e48:	4b58      	ldr	r3, [pc, #352]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e78:	e043      	b.n	8007f02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8c:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebc:	e021      	b.n	8007f02 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed0:	4b36      	ldr	r3, [pc, #216]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f00:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f02:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	0a5b      	lsrs	r3, r3, #9
 8007f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f28:	ee17 2a90 	vmov	r2, s15
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f56:	ee17 2a90 	vmov	r2, s15
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f5e:	4b13      	ldr	r3, [pc, #76]	; (8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	0e1b      	lsrs	r3, r3, #24
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f84:	ee17 2a90 	vmov	r2, s15
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	3724      	adds	r7, #36	; 0x24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	03d09000 	.word	0x03d09000
 8007fb4:	46000000 	.word	0x46000000
 8007fb8:	4c742400 	.word	0x4c742400
 8007fbc:	4a742400 	.word	0x4a742400
 8007fc0:	4bbebc20 	.word	0x4bbebc20

08007fc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fd2:	4b53      	ldr	r3, [pc, #332]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d101      	bne.n	8007fe2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e099      	b.n	8008116 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fe2:	4b4f      	ldr	r3, [pc, #316]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a4e      	ldr	r2, [pc, #312]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fee:	f7f9 fcc7 	bl	8001980 <HAL_GetTick>
 8007ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ff4:	e008      	b.n	8008008 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ff6:	f7f9 fcc3 	bl	8001980 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e086      	b.n	8008116 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008008:	4b45      	ldr	r3, [pc, #276]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f0      	bne.n	8007ff6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008014:	4b42      	ldr	r3, [pc, #264]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	493f      	ldr	r1, [pc, #252]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008024:	4313      	orrs	r3, r2
 8008026:	628b      	str	r3, [r1, #40]	; 0x28
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	3b01      	subs	r3, #1
 800802e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	3b01      	subs	r3, #1
 8008038:	025b      	lsls	r3, r3, #9
 800803a:	b29b      	uxth	r3, r3
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	3b01      	subs	r3, #1
 8008044:	041b      	lsls	r3, r3, #16
 8008046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	3b01      	subs	r3, #1
 8008052:	061b      	lsls	r3, r3, #24
 8008054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008058:	4931      	ldr	r1, [pc, #196]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800805e:	4b30      	ldr	r3, [pc, #192]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	492d      	ldr	r1, [pc, #180]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800806c:	4313      	orrs	r3, r2
 800806e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008070:	4b2b      	ldr	r3, [pc, #172]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f023 0220 	bic.w	r2, r3, #32
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	4928      	ldr	r1, [pc, #160]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800807e:	4313      	orrs	r3, r2
 8008080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	4a26      	ldr	r2, [pc, #152]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008088:	f023 0310 	bic.w	r3, r3, #16
 800808c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800808e:	4b24      	ldr	r3, [pc, #144]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 8008090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008092:	4b24      	ldr	r3, [pc, #144]	; (8008124 <RCCEx_PLL2_Config+0x160>)
 8008094:	4013      	ands	r3, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	69d2      	ldr	r2, [r2, #28]
 800809a:	00d2      	lsls	r2, r2, #3
 800809c:	4920      	ldr	r1, [pc, #128]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080a2:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	4a1e      	ldr	r2, [pc, #120]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	f043 0310 	orr.w	r3, r3, #16
 80080ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080b4:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4a19      	ldr	r2, [pc, #100]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080c0:	e00f      	b.n	80080e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d106      	bne.n	80080d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a14      	ldr	r2, [pc, #80]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080d4:	e005      	b.n	80080e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080d6:	4b12      	ldr	r3, [pc, #72]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	4a11      	ldr	r2, [pc, #68]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a0e      	ldr	r2, [pc, #56]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 80080e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ee:	f7f9 fc47 	bl	8001980 <HAL_GetTick>
 80080f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080f4:	e008      	b.n	8008108 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080f6:	f7f9 fc43 	bl	8001980 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e006      	b.n	8008116 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <RCCEx_PLL2_Config+0x15c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0f0      	beq.n	80080f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	58024400 	.word	0x58024400
 8008124:	ffff0007 	.word	0xffff0007

08008128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008136:	4b53      	ldr	r3, [pc, #332]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d101      	bne.n	8008146 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e099      	b.n	800827a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008146:	4b4f      	ldr	r3, [pc, #316]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a4e      	ldr	r2, [pc, #312]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800814c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008152:	f7f9 fc15 	bl	8001980 <HAL_GetTick>
 8008156:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008158:	e008      	b.n	800816c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800815a:	f7f9 fc11 	bl	8001980 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e086      	b.n	800827a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800816c:	4b45      	ldr	r3, [pc, #276]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f0      	bne.n	800815a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008178:	4b42      	ldr	r3, [pc, #264]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	051b      	lsls	r3, r3, #20
 8008186:	493f      	ldr	r1, [pc, #252]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	628b      	str	r3, [r1, #40]	; 0x28
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	3b01      	subs	r3, #1
 8008192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	025b      	lsls	r3, r3, #9
 800819e:	b29b      	uxth	r3, r3
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081bc:	4931      	ldr	r1, [pc, #196]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081c2:	4b30      	ldr	r3, [pc, #192]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	492d      	ldr	r1, [pc, #180]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081d4:	4b2b      	ldr	r3, [pc, #172]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4928      	ldr	r1, [pc, #160]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081e6:	4b27      	ldr	r3, [pc, #156]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a26      	ldr	r2, [pc, #152]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <RCCEx_PLL3_Config+0x160>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	69d2      	ldr	r2, [r2, #28]
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	4920      	ldr	r1, [pc, #128]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800820c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	4a19      	ldr	r2, [pc, #100]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800821e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008224:	e00f      	b.n	8008246 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d106      	bne.n	800823a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800822c:	4b15      	ldr	r3, [pc, #84]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008238:	e005      	b.n	8008246 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	4a11      	ldr	r2, [pc, #68]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800824c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008252:	f7f9 fb95 	bl	8001980 <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008258:	e008      	b.n	800826c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800825a:	f7f9 fb91 	bl	8001980 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e006      	b.n	800827a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <RCCEx_PLL3_Config+0x15c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	ffff0007 	.word	0xffff0007

0800828c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80082a4:	6a3a      	ldr	r2, [r7, #32]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4013      	ands	r3, r2
 80082aa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082be:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3330      	adds	r3, #48	; 0x30
 80082c6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d113      	bne.n	80082fa <HAL_SPI_IRQHandler+0x6e>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10e      	bne.n	80082fa <HAL_SPI_IRQHandler+0x6e>
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0304 	and.w	r3, r3, #4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
    hspi->RxISR(hspi);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
    handled = 1UL;
 80082f6:	2301      	movs	r3, #1
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10f      	bne.n	8008324 <HAL_SPI_IRQHandler+0x98>
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <HAL_SPI_IRQHandler+0x98>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
    handled = 1UL;
 8008320:	2301      	movs	r3, #1
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10f      	bne.n	800834e <HAL_SPI_IRQHandler+0xc2>
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <HAL_SPI_IRQHandler+0xc2>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
    handled = 1UL;
 800834a:	2301      	movs	r3, #1
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8170 	bne.w	8008636 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 80a0 	beq.w	80084a2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699a      	ldr	r2, [r3, #24]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0208 	orr.w	r2, r2, #8
 8008370:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699a      	ldr	r2, [r3, #24]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0210 	orr.w	r2, r2, #16
 8008380:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008390:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0208 	bic.w	r2, r2, #8
 80083a0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00f      	beq.n	80083cc <HAL_SPI_IRQHandler+0x140>
 80083ac:	7cfb      	ldrb	r3, [r7, #19]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d004      	beq.n	80083bc <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_SPI_IRQHandler+0x140>
 80083bc:	7cfb      	ldrb	r3, [r7, #19]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d059      	beq.n	8008476 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d154      	bne.n	8008476 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d13d      	bne.n	8008456 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80083da:	e036      	b.n	800844a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b0f      	cmp	r3, #15
 80083e2:	d90b      	bls.n	80083fc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083ee:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f4:	1d1a      	adds	r2, r3, #4
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	665a      	str	r2, [r3, #100]	; 0x64
 80083fa:	e01d      	b.n	8008438 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	2b07      	cmp	r3, #7
 8008402:	d90b      	bls.n	800841c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	8812      	ldrh	r2, [r2, #0]
 800840c:	b292      	uxth	r2, r2
 800840e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	1c9a      	adds	r2, r3, #2
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	665a      	str	r2, [r3, #100]	; 0x64
 800841a:	e00d      	b.n	8008438 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008428:	7812      	ldrb	r2, [r2, #0]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800843e:	b29b      	uxth	r3, r3
 8008440:	3b01      	subs	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1c2      	bne.n	80083dc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f93c 	bl	80086d4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f90c 	bl	800868c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8008474:	e0e4      	b.n	8008640 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008476:	7cfb      	ldrb	r3, [r7, #19]
 8008478:	2b05      	cmp	r3, #5
 800847a:	d103      	bne.n	8008484 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8fb 	bl	8008678 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8008482:	e0da      	b.n	800863a <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	2b04      	cmp	r3, #4
 8008488:	d103      	bne.n	8008492 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f8ea 	bl	8008664 <HAL_SPI_RxCpltCallback>
    return;
 8008490:	e0d3      	b.n	800863a <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008492:	7cfb      	ldrb	r3, [r7, #19]
 8008494:	2b03      	cmp	r3, #3
 8008496:	f040 80d0 	bne.w	800863a <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f8d8 	bl	8008650 <HAL_SPI_TxCpltCallback>
    return;
 80084a0:	e0cb      	b.n	800863a <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00d      	beq.n	80084c8 <HAL_SPI_IRQHandler+0x23c>
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c4:	619a      	str	r2, [r3, #24]

    return;
 80084c6:	e0bb      	b.n	8008640 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 80b6 	beq.w	8008640 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00f      	beq.n	80084fe <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e4:	f043 0204 	orr.w	r2, r3, #4
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00f      	beq.n	8008528 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850e:	f043 0201 	orr.w	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699a      	ldr	r2, [r3, #24]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008526:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00f      	beq.n	8008552 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008538:	f043 0208 	orr.w	r2, r3, #8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699a      	ldr	r2, [r3, #24]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008550:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00f      	beq.n	800857c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008562:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0220 	orr.w	r2, r2, #32
 800857a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008582:	2b00      	cmp	r3, #0
 8008584:	d05b      	beq.n	800863e <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0201 	bic.w	r2, r2, #1
 8008594:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6919      	ldr	r1, [r3, #16]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b29      	ldr	r3, [pc, #164]	; (8008648 <HAL_SPI_IRQHandler+0x3bc>)
 80085a2:	400b      	ands	r3, r1
 80085a4:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085b0:	d138      	bne.n	8008624 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80085c0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d013      	beq.n	80085f2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	4a1f      	ldr	r2, [pc, #124]	; (800864c <HAL_SPI_IRQHandler+0x3c0>)
 80085d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7f9 fec6 	bl	8002368 <HAL_DMA_Abort_IT>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d021      	beq.n	800863e <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fe:	4a13      	ldr	r2, [pc, #76]	; (800864c <HAL_SPI_IRQHandler+0x3c0>)
 8008600:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008606:	4618      	mov	r0, r3
 8008608:	f7f9 feae 	bl	8002368 <HAL_DMA_Abort_IT>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d015      	beq.n	800863e <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008622:	e00c      	b.n	800863e <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f82d 	bl	800868c <HAL_SPI_ErrorCallback>
    return;
 8008632:	bf00      	nop
 8008634:	e003      	b.n	800863e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008636:	bf00      	nop
 8008638:	e002      	b.n	8008640 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800863e:	bf00      	nop
  }
}
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	fffffc94 	.word	0xfffffc94
 800864c:	080086a1 	.word	0x080086a1

08008650 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ffe0 	bl	800868c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0208 	orr.w	r2, r2, #8
 80086f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0210 	orr.w	r2, r2, #16
 8008702:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0201 	bic.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6919      	ldr	r1, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b3c      	ldr	r3, [pc, #240]	; (8008810 <SPI_CloseTransfer+0x13c>)
 8008720:	400b      	ands	r3, r1
 8008722:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008732:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b04      	cmp	r3, #4
 800873e:	d014      	beq.n	800876a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00f      	beq.n	800876a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008750:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699a      	ldr	r2, [r3, #24]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0220 	orr.w	r2, r2, #32
 8008768:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d014      	beq.n	80087a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00f      	beq.n	80087a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008786:	f043 0204 	orr.w	r2, r3, #4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800879e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00f      	beq.n	80087ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b0:	f043 0201 	orr.w	r2, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00f      	beq.n	80087f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087da:	f043 0208 	orr.w	r2, r3, #8
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008804:	bf00      	nop
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	fffffc90 	.word	0xfffffc90

08008814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e049      	b.n	80088ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f841 	bl	80088c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f000 f9be 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
	...

080088d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d001      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e021      	b.n	8008934 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <HAL_TIM_Base_Start_IT+0x68>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b06      	cmp	r3, #6
 8008918:	d00b      	beq.n	8008932 <HAL_TIM_Base_Start_IT+0x5a>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008920:	d007      	beq.n	8008932 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	00010007 	.word	0x00010007

08008944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d122      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b02      	cmp	r3, #2
 8008966:	d11b      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0202 	mvn.w	r2, #2
 8008970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f905 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f8f7 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f908 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0204 	mvn.w	r2, #4
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f8db 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f8cd 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f8de 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0208 	mvn.w	r2, #8
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f8b1 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8a3 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8b4 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0210 	mvn.w	r2, #16
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2208      	movs	r2, #8
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f887 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f879 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f88a 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10e      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d107      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0201 	mvn.w	r2, #1
 8008ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7f8 f8a6 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d10e      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae0:	2b80      	cmp	r3, #128	; 0x80
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f914 	bl	8008d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b02:	d10e      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0e:	2b80      	cmp	r3, #128	; 0x80
 8008b10:	d107      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f907 	bl	8008d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d10e      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d107      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f838 	bl	8008bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d10e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f06f 0220 	mvn.w	r2, #32
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f8c7 	bl	8008d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a40      	ldr	r2, [pc, #256]	; (8008ce8 <TIM_Base_SetConfig+0x114>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d013      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf2:	d00f      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3d      	ldr	r2, [pc, #244]	; (8008cec <TIM_Base_SetConfig+0x118>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00b      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3c      	ldr	r2, [pc, #240]	; (8008cf0 <TIM_Base_SetConfig+0x11c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a3b      	ldr	r2, [pc, #236]	; (8008cf4 <TIM_Base_SetConfig+0x120>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_Base_SetConfig+0x40>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a3a      	ldr	r2, [pc, #232]	; (8008cf8 <TIM_Base_SetConfig+0x124>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d108      	bne.n	8008c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2f      	ldr	r2, [pc, #188]	; (8008ce8 <TIM_Base_SetConfig+0x114>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01f      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c34:	d01b      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2c      	ldr	r2, [pc, #176]	; (8008cec <TIM_Base_SetConfig+0x118>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d017      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2b      	ldr	r2, [pc, #172]	; (8008cf0 <TIM_Base_SetConfig+0x11c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a2a      	ldr	r2, [pc, #168]	; (8008cf4 <TIM_Base_SetConfig+0x120>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00f      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a29      	ldr	r2, [pc, #164]	; (8008cf8 <TIM_Base_SetConfig+0x124>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00b      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a28      	ldr	r2, [pc, #160]	; (8008cfc <TIM_Base_SetConfig+0x128>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d007      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <TIM_Base_SetConfig+0x12c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d003      	beq.n	8008c6e <TIM_Base_SetConfig+0x9a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a26      	ldr	r2, [pc, #152]	; (8008d04 <TIM_Base_SetConfig+0x130>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d108      	bne.n	8008c80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a10      	ldr	r2, [pc, #64]	; (8008ce8 <TIM_Base_SetConfig+0x114>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00f      	beq.n	8008ccc <TIM_Base_SetConfig+0xf8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a12      	ldr	r2, [pc, #72]	; (8008cf8 <TIM_Base_SetConfig+0x124>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00b      	beq.n	8008ccc <TIM_Base_SetConfig+0xf8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a11      	ldr	r2, [pc, #68]	; (8008cfc <TIM_Base_SetConfig+0x128>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d007      	beq.n	8008ccc <TIM_Base_SetConfig+0xf8>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <TIM_Base_SetConfig+0x12c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_Base_SetConfig+0xf8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a0f      	ldr	r2, [pc, #60]	; (8008d04 <TIM_Base_SetConfig+0x130>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d103      	bne.n	8008cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	615a      	str	r2, [r3, #20]
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	40010000 	.word	0x40010000
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40000c00 	.word	0x40000c00
 8008cf8:	40010400 	.word	0x40010400
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400
 8008d04:	40014800 	.word	0x40014800

08008d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e042      	b.n	8008ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7f8 f9c9 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2224      	movs	r2, #36	; 0x24
 8008d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f8c2 	bl	8008f10 <UART_SetConfig>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e022      	b.n	8008ddc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fe66 	bl	8009a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 feed 	bl	8009bb4 <UART_CheckIdleState>
 8008dda:	4603      	mov	r3, r0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	f040 8083 	bne.w	8008f06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_UART_Transmit+0x28>
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e07b      	b.n	8008f08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_UART_Transmit+0x3a>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e074      	b.n	8008f08 <HAL_UART_Transmit+0x124>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2221      	movs	r2, #33	; 0x21
 8008e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008e36:	f7f8 fda3 	bl	8001980 <HAL_GetTick>
 8008e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	88fa      	ldrh	r2, [r7, #6]
 8008e40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	88fa      	ldrh	r2, [r7, #6]
 8008e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e54:	d108      	bne.n	8008e68 <HAL_UART_Transmit+0x84>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d104      	bne.n	8008e68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	e003      	b.n	8008e70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008e78:	e02c      	b.n	8008ed4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2180      	movs	r1, #128	; 0x80
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fedd 	bl	8009c44 <UART_WaitOnFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e039      	b.n	8008f08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ea8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	3302      	adds	r3, #2
 8008eae:	61bb      	str	r3, [r7, #24]
 8008eb0:	e007      	b.n	8008ec2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1cc      	bne.n	8008e7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2140      	movs	r1, #64	; 0x40
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 feaa 	bl	8009c44 <UART_WaitOnFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e006      	b.n	8008f08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e000      	b.n	8008f08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f06:	2302      	movs	r3, #2
  }
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008f14:	b08e      	sub	sp, #56	; 0x38
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4bc1      	ldr	r3, [pc, #772]	; (8009250 <UART_SetConfig+0x340>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6812      	ldr	r2, [r2, #0]
 8008f50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f52:	430b      	orrs	r3, r1
 8008f54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4ab7      	ldr	r2, [pc, #732]	; (8009254 <UART_SetConfig+0x344>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f82:	4313      	orrs	r3, r2
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	4bb2      	ldr	r3, [pc, #712]	; (8009258 <UART_SetConfig+0x348>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f96:	430b      	orrs	r3, r1
 8008f98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	f023 010f 	bic.w	r1, r3, #15
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4aa9      	ldr	r2, [pc, #676]	; (800925c <UART_SetConfig+0x34c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d177      	bne.n	80090aa <UART_SetConfig+0x19a>
 8008fba:	4ba9      	ldr	r3, [pc, #676]	; (8009260 <UART_SetConfig+0x350>)
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fc2:	2b28      	cmp	r3, #40	; 0x28
 8008fc4:	d86c      	bhi.n	80090a0 <UART_SetConfig+0x190>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <UART_SetConfig+0xbc>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08009071 	.word	0x08009071
 8008fd0:	080090a1 	.word	0x080090a1
 8008fd4:	080090a1 	.word	0x080090a1
 8008fd8:	080090a1 	.word	0x080090a1
 8008fdc:	080090a1 	.word	0x080090a1
 8008fe0:	080090a1 	.word	0x080090a1
 8008fe4:	080090a1 	.word	0x080090a1
 8008fe8:	080090a1 	.word	0x080090a1
 8008fec:	08009079 	.word	0x08009079
 8008ff0:	080090a1 	.word	0x080090a1
 8008ff4:	080090a1 	.word	0x080090a1
 8008ff8:	080090a1 	.word	0x080090a1
 8008ffc:	080090a1 	.word	0x080090a1
 8009000:	080090a1 	.word	0x080090a1
 8009004:	080090a1 	.word	0x080090a1
 8009008:	080090a1 	.word	0x080090a1
 800900c:	08009081 	.word	0x08009081
 8009010:	080090a1 	.word	0x080090a1
 8009014:	080090a1 	.word	0x080090a1
 8009018:	080090a1 	.word	0x080090a1
 800901c:	080090a1 	.word	0x080090a1
 8009020:	080090a1 	.word	0x080090a1
 8009024:	080090a1 	.word	0x080090a1
 8009028:	080090a1 	.word	0x080090a1
 800902c:	08009089 	.word	0x08009089
 8009030:	080090a1 	.word	0x080090a1
 8009034:	080090a1 	.word	0x080090a1
 8009038:	080090a1 	.word	0x080090a1
 800903c:	080090a1 	.word	0x080090a1
 8009040:	080090a1 	.word	0x080090a1
 8009044:	080090a1 	.word	0x080090a1
 8009048:	080090a1 	.word	0x080090a1
 800904c:	08009091 	.word	0x08009091
 8009050:	080090a1 	.word	0x080090a1
 8009054:	080090a1 	.word	0x080090a1
 8009058:	080090a1 	.word	0x080090a1
 800905c:	080090a1 	.word	0x080090a1
 8009060:	080090a1 	.word	0x080090a1
 8009064:	080090a1 	.word	0x080090a1
 8009068:	080090a1 	.word	0x080090a1
 800906c:	08009099 	.word	0x08009099
 8009070:	2301      	movs	r3, #1
 8009072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009076:	e233      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009078:	2304      	movs	r3, #4
 800907a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800907e:	e22f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009080:	2308      	movs	r3, #8
 8009082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009086:	e22b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009088:	2310      	movs	r3, #16
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908e:	e227      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009090:	2320      	movs	r3, #32
 8009092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009096:	e223      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009098:	2340      	movs	r3, #64	; 0x40
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e21f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80090a0:	2380      	movs	r3, #128	; 0x80
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	bf00      	nop
 80090a8:	e21a      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a6d      	ldr	r2, [pc, #436]	; (8009264 <UART_SetConfig+0x354>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d132      	bne.n	800911a <UART_SetConfig+0x20a>
 80090b4:	4b6a      	ldr	r3, [pc, #424]	; (8009260 <UART_SetConfig+0x350>)
 80090b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	2b05      	cmp	r3, #5
 80090be:	d827      	bhi.n	8009110 <UART_SetConfig+0x200>
 80090c0:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <UART_SetConfig+0x1b8>)
 80090c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c6:	bf00      	nop
 80090c8:	080090e1 	.word	0x080090e1
 80090cc:	080090e9 	.word	0x080090e9
 80090d0:	080090f1 	.word	0x080090f1
 80090d4:	080090f9 	.word	0x080090f9
 80090d8:	08009101 	.word	0x08009101
 80090dc:	08009109 	.word	0x08009109
 80090e0:	2300      	movs	r3, #0
 80090e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e6:	e1fb      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80090e8:	2304      	movs	r3, #4
 80090ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ee:	e1f7      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80090f0:	2308      	movs	r3, #8
 80090f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f6:	e1f3      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80090f8:	2310      	movs	r3, #16
 80090fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fe:	e1ef      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009100:	2320      	movs	r3, #32
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009106:	e1eb      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009108:	2340      	movs	r3, #64	; 0x40
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e1e7      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009110:	2380      	movs	r3, #128	; 0x80
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	bf00      	nop
 8009118:	e1e2      	b.n	80094e0 <UART_SetConfig+0x5d0>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a52      	ldr	r2, [pc, #328]	; (8009268 <UART_SetConfig+0x358>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d132      	bne.n	800918a <UART_SetConfig+0x27a>
 8009124:	4b4e      	ldr	r3, [pc, #312]	; (8009260 <UART_SetConfig+0x350>)
 8009126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	2b05      	cmp	r3, #5
 800912e:	d827      	bhi.n	8009180 <UART_SetConfig+0x270>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <UART_SetConfig+0x228>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009151 	.word	0x08009151
 800913c:	08009159 	.word	0x08009159
 8009140:	08009161 	.word	0x08009161
 8009144:	08009169 	.word	0x08009169
 8009148:	08009171 	.word	0x08009171
 800914c:	08009179 	.word	0x08009179
 8009150:	2300      	movs	r3, #0
 8009152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009156:	e1c3      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009158:	2304      	movs	r3, #4
 800915a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915e:	e1bf      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009160:	2308      	movs	r3, #8
 8009162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009166:	e1bb      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009168:	2310      	movs	r3, #16
 800916a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916e:	e1b7      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009170:	2320      	movs	r3, #32
 8009172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009176:	e1b3      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009178:	2340      	movs	r3, #64	; 0x40
 800917a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917e:	e1af      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009180:	2380      	movs	r3, #128	; 0x80
 8009182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009186:	bf00      	nop
 8009188:	e1aa      	b.n	80094e0 <UART_SetConfig+0x5d0>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a37      	ldr	r2, [pc, #220]	; (800926c <UART_SetConfig+0x35c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d132      	bne.n	80091fa <UART_SetConfig+0x2ea>
 8009194:	4b32      	ldr	r3, [pc, #200]	; (8009260 <UART_SetConfig+0x350>)
 8009196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	2b05      	cmp	r3, #5
 800919e:	d827      	bhi.n	80091f0 <UART_SetConfig+0x2e0>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <UART_SetConfig+0x298>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091c9 	.word	0x080091c9
 80091b0:	080091d1 	.word	0x080091d1
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c6:	e18b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091c8:	2304      	movs	r3, #4
 80091ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ce:	e187      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091d0:	2308      	movs	r3, #8
 80091d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d6:	e183      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091d8:	2310      	movs	r3, #16
 80091da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091de:	e17f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091e0:	2320      	movs	r3, #32
 80091e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e6:	e17b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091e8:	2340      	movs	r3, #64	; 0x40
 80091ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ee:	e177      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091f0:	2380      	movs	r3, #128	; 0x80
 80091f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f6:	bf00      	nop
 80091f8:	e172      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a1c      	ldr	r2, [pc, #112]	; (8009270 <UART_SetConfig+0x360>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d144      	bne.n	800928e <UART_SetConfig+0x37e>
 8009204:	4b16      	ldr	r3, [pc, #88]	; (8009260 <UART_SetConfig+0x350>)
 8009206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	2b05      	cmp	r3, #5
 800920e:	d839      	bhi.n	8009284 <UART_SetConfig+0x374>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <UART_SetConfig+0x308>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	08009231 	.word	0x08009231
 800921c:	08009239 	.word	0x08009239
 8009220:	08009241 	.word	0x08009241
 8009224:	08009249 	.word	0x08009249
 8009228:	08009275 	.word	0x08009275
 800922c:	0800927d 	.word	0x0800927d
 8009230:	2300      	movs	r3, #0
 8009232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009236:	e153      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009238:	2304      	movs	r3, #4
 800923a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923e:	e14f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009240:	2308      	movs	r3, #8
 8009242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009246:	e14b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009248:	2310      	movs	r3, #16
 800924a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924e:	e147      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009250:	cfff69f3 	.word	0xcfff69f3
 8009254:	58000c00 	.word	0x58000c00
 8009258:	11fff4ff 	.word	0x11fff4ff
 800925c:	40011000 	.word	0x40011000
 8009260:	58024400 	.word	0x58024400
 8009264:	40004400 	.word	0x40004400
 8009268:	40004800 	.word	0x40004800
 800926c:	40004c00 	.word	0x40004c00
 8009270:	40005000 	.word	0x40005000
 8009274:	2320      	movs	r3, #32
 8009276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927a:	e131      	b.n	80094e0 <UART_SetConfig+0x5d0>
 800927c:	2340      	movs	r3, #64	; 0x40
 800927e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009282:	e12d      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009284:	2380      	movs	r3, #128	; 0x80
 8009286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928a:	bf00      	nop
 800928c:	e128      	b.n	80094e0 <UART_SetConfig+0x5d0>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4ab6      	ldr	r2, [pc, #728]	; (800956c <UART_SetConfig+0x65c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d178      	bne.n	800938a <UART_SetConfig+0x47a>
 8009298:	4bb5      	ldr	r3, [pc, #724]	; (8009570 <UART_SetConfig+0x660>)
 800929a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092a0:	2b28      	cmp	r3, #40	; 0x28
 80092a2:	d86d      	bhi.n	8009380 <UART_SetConfig+0x470>
 80092a4:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <UART_SetConfig+0x39c>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	08009351 	.word	0x08009351
 80092b0:	08009381 	.word	0x08009381
 80092b4:	08009381 	.word	0x08009381
 80092b8:	08009381 	.word	0x08009381
 80092bc:	08009381 	.word	0x08009381
 80092c0:	08009381 	.word	0x08009381
 80092c4:	08009381 	.word	0x08009381
 80092c8:	08009381 	.word	0x08009381
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009381 	.word	0x08009381
 80092d4:	08009381 	.word	0x08009381
 80092d8:	08009381 	.word	0x08009381
 80092dc:	08009381 	.word	0x08009381
 80092e0:	08009381 	.word	0x08009381
 80092e4:	08009381 	.word	0x08009381
 80092e8:	08009381 	.word	0x08009381
 80092ec:	08009361 	.word	0x08009361
 80092f0:	08009381 	.word	0x08009381
 80092f4:	08009381 	.word	0x08009381
 80092f8:	08009381 	.word	0x08009381
 80092fc:	08009381 	.word	0x08009381
 8009300:	08009381 	.word	0x08009381
 8009304:	08009381 	.word	0x08009381
 8009308:	08009381 	.word	0x08009381
 800930c:	08009369 	.word	0x08009369
 8009310:	08009381 	.word	0x08009381
 8009314:	08009381 	.word	0x08009381
 8009318:	08009381 	.word	0x08009381
 800931c:	08009381 	.word	0x08009381
 8009320:	08009381 	.word	0x08009381
 8009324:	08009381 	.word	0x08009381
 8009328:	08009381 	.word	0x08009381
 800932c:	08009371 	.word	0x08009371
 8009330:	08009381 	.word	0x08009381
 8009334:	08009381 	.word	0x08009381
 8009338:	08009381 	.word	0x08009381
 800933c:	08009381 	.word	0x08009381
 8009340:	08009381 	.word	0x08009381
 8009344:	08009381 	.word	0x08009381
 8009348:	08009381 	.word	0x08009381
 800934c:	08009379 	.word	0x08009379
 8009350:	2301      	movs	r3, #1
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009356:	e0c3      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009358:	2304      	movs	r3, #4
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935e:	e0bf      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009360:	2308      	movs	r3, #8
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e0bb      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009368:	2310      	movs	r3, #16
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e0b7      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009370:	2320      	movs	r3, #32
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e0b3      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e0af      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	bf00      	nop
 8009388:	e0aa      	b.n	80094e0 <UART_SetConfig+0x5d0>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a79      	ldr	r2, [pc, #484]	; (8009574 <UART_SetConfig+0x664>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d132      	bne.n	80093fa <UART_SetConfig+0x4ea>
 8009394:	4b76      	ldr	r3, [pc, #472]	; (8009570 <UART_SetConfig+0x660>)
 8009396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	2b05      	cmp	r3, #5
 800939e:	d827      	bhi.n	80093f0 <UART_SetConfig+0x4e0>
 80093a0:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <UART_SetConfig+0x498>)
 80093a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a6:	bf00      	nop
 80093a8:	080093c1 	.word	0x080093c1
 80093ac:	080093c9 	.word	0x080093c9
 80093b0:	080093d1 	.word	0x080093d1
 80093b4:	080093d9 	.word	0x080093d9
 80093b8:	080093e1 	.word	0x080093e1
 80093bc:	080093e9 	.word	0x080093e9
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c6:	e08b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093c8:	2304      	movs	r3, #4
 80093ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ce:	e087      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093d0:	2308      	movs	r3, #8
 80093d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d6:	e083      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093d8:	2310      	movs	r3, #16
 80093da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093de:	e07f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093e0:	2320      	movs	r3, #32
 80093e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e6:	e07b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ee:	e077      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093f0:	2380      	movs	r3, #128	; 0x80
 80093f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f6:	bf00      	nop
 80093f8:	e072      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a5e      	ldr	r2, [pc, #376]	; (8009578 <UART_SetConfig+0x668>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d132      	bne.n	800946a <UART_SetConfig+0x55a>
 8009404:	4b5a      	ldr	r3, [pc, #360]	; (8009570 <UART_SetConfig+0x660>)
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	2b05      	cmp	r3, #5
 800940e:	d827      	bhi.n	8009460 <UART_SetConfig+0x550>
 8009410:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <UART_SetConfig+0x508>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	08009431 	.word	0x08009431
 800941c:	08009439 	.word	0x08009439
 8009420:	08009441 	.word	0x08009441
 8009424:	08009449 	.word	0x08009449
 8009428:	08009451 	.word	0x08009451
 800942c:	08009459 	.word	0x08009459
 8009430:	2300      	movs	r3, #0
 8009432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009436:	e053      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009438:	2304      	movs	r3, #4
 800943a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943e:	e04f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009440:	2308      	movs	r3, #8
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e04b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009448:	2310      	movs	r3, #16
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e047      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009450:	2320      	movs	r3, #32
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e043      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009458:	2340      	movs	r3, #64	; 0x40
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e03f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 8009460:	2380      	movs	r3, #128	; 0x80
 8009462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009466:	bf00      	nop
 8009468:	e03a      	b.n	80094e0 <UART_SetConfig+0x5d0>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a43      	ldr	r2, [pc, #268]	; (800957c <UART_SetConfig+0x66c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d132      	bne.n	80094da <UART_SetConfig+0x5ca>
 8009474:	4b3e      	ldr	r3, [pc, #248]	; (8009570 <UART_SetConfig+0x660>)
 8009476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	2b05      	cmp	r3, #5
 800947e:	d827      	bhi.n	80094d0 <UART_SetConfig+0x5c0>
 8009480:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <UART_SetConfig+0x578>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	080094a1 	.word	0x080094a1
 800948c:	080094a9 	.word	0x080094a9
 8009490:	080094b1 	.word	0x080094b1
 8009494:	080094b9 	.word	0x080094b9
 8009498:	080094c1 	.word	0x080094c1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	2302      	movs	r3, #2
 80094a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094a6:	e01b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ae:	e017      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b6:	e013      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094be:	e00f      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094c0:	2320      	movs	r3, #32
 80094c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c6:	e00b      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ce:	e007      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094d0:	2380      	movs	r3, #128	; 0x80
 80094d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d6:	bf00      	nop
 80094d8:	e002      	b.n	80094e0 <UART_SetConfig+0x5d0>
 80094da:	2380      	movs	r3, #128	; 0x80
 80094dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a25      	ldr	r2, [pc, #148]	; (800957c <UART_SetConfig+0x66c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	f040 80b8 	bne.w	800965c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	d019      	beq.n	8009528 <UART_SetConfig+0x618>
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	dc04      	bgt.n	8009502 <UART_SetConfig+0x5f2>
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d009      	beq.n	8009510 <UART_SetConfig+0x600>
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d00b      	beq.n	8009518 <UART_SetConfig+0x608>
 8009500:	e042      	b.n	8009588 <UART_SetConfig+0x678>
 8009502:	2b20      	cmp	r3, #32
 8009504:	d02b      	beq.n	800955e <UART_SetConfig+0x64e>
 8009506:	2b40      	cmp	r3, #64	; 0x40
 8009508:	d02c      	beq.n	8009564 <UART_SetConfig+0x654>
 800950a:	2b10      	cmp	r3, #16
 800950c:	d014      	beq.n	8009538 <UART_SetConfig+0x628>
 800950e:	e03b      	b.n	8009588 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009510:	f7fe faaa 	bl	8007a68 <HAL_RCCEx_GetD3PCLK1Freq>
 8009514:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009516:	e03d      	b.n	8009594 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe fab9 	bl	8007a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009526:	e035      	b.n	8009594 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009528:	f107 0308 	add.w	r3, r7, #8
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe fbfd 	bl	8007d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009536:	e02d      	b.n	8009594 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009538:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <UART_SetConfig+0x660>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <UART_SetConfig+0x660>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	08db      	lsrs	r3, r3, #3
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	4a0c      	ldr	r2, [pc, #48]	; (8009580 <UART_SetConfig+0x670>)
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009556:	e01d      	b.n	8009594 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009558:	4b09      	ldr	r3, [pc, #36]	; (8009580 <UART_SetConfig+0x670>)
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800955c:	e01a      	b.n	8009594 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <UART_SetConfig+0x674>)
 8009560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009562:	e017      	b.n	8009594 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800956a:	e013      	b.n	8009594 <UART_SetConfig+0x684>
 800956c:	40011400 	.word	0x40011400
 8009570:	58024400 	.word	0x58024400
 8009574:	40007800 	.word	0x40007800
 8009578:	40007c00 	.word	0x40007c00
 800957c:	58000c00 	.word	0x58000c00
 8009580:	03d09000 	.word	0x03d09000
 8009584:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009592:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 824d 	beq.w	8009a36 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	4aad      	ldr	r2, [pc, #692]	; (8009858 <UART_SetConfig+0x948>)
 80095a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a6:	461a      	mov	r2, r3
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ae:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	4613      	mov	r3, r2
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	4413      	add	r3, r2
 80095ba:	6a3a      	ldr	r2, [r7, #32]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d305      	bcc.n	80095cc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095c6:	6a3a      	ldr	r2, [r7, #32]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d903      	bls.n	80095d4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80095d2:	e230      	b.n	8009a36 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	4618      	mov	r0, r3
 80095d8:	f04f 0100 	mov.w	r1, #0
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	4a9d      	ldr	r2, [pc, #628]	; (8009858 <UART_SetConfig+0x948>)
 80095e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f04f 0400 	mov.w	r4, #0
 80095ec:	461a      	mov	r2, r3
 80095ee:	4623      	mov	r3, r4
 80095f0:	f7f6 fede 	bl	80003b0 <__aeabi_uldivmod>
 80095f4:	4603      	mov	r3, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	4619      	mov	r1, r3
 80095fa:	4622      	mov	r2, r4
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	f04f 0400 	mov.w	r4, #0
 8009604:	0214      	lsls	r4, r2, #8
 8009606:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800960a:	020b      	lsls	r3, r1, #8
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6852      	ldr	r2, [r2, #4]
 8009610:	0852      	lsrs	r2, r2, #1
 8009612:	4611      	mov	r1, r2
 8009614:	f04f 0200 	mov.w	r2, #0
 8009618:	eb13 0b01 	adds.w	fp, r3, r1
 800961c:	eb44 0c02 	adc.w	ip, r4, r2
 8009620:	4658      	mov	r0, fp
 8009622:	4661      	mov	r1, ip
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f04f 0400 	mov.w	r4, #0
 800962c:	461a      	mov	r2, r3
 800962e:	4623      	mov	r3, r4
 8009630:	f7f6 febe 	bl	80003b0 <__aeabi_uldivmod>
 8009634:	4603      	mov	r3, r0
 8009636:	460c      	mov	r4, r1
 8009638:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009640:	d308      	bcc.n	8009654 <UART_SetConfig+0x744>
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009648:	d204      	bcs.n	8009654 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009650:	60da      	str	r2, [r3, #12]
 8009652:	e1f0      	b.n	8009a36 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800965a:	e1ec      	b.n	8009a36 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009664:	f040 8100 	bne.w	8009868 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800966c:	2b40      	cmp	r3, #64	; 0x40
 800966e:	f200 80b7 	bhi.w	80097e0 <UART_SetConfig+0x8d0>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <UART_SetConfig+0x768>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	0800977d 	.word	0x0800977d
 800967c:	08009785 	.word	0x08009785
 8009680:	080097e1 	.word	0x080097e1
 8009684:	080097e1 	.word	0x080097e1
 8009688:	0800978d 	.word	0x0800978d
 800968c:	080097e1 	.word	0x080097e1
 8009690:	080097e1 	.word	0x080097e1
 8009694:	080097e1 	.word	0x080097e1
 8009698:	0800979d 	.word	0x0800979d
 800969c:	080097e1 	.word	0x080097e1
 80096a0:	080097e1 	.word	0x080097e1
 80096a4:	080097e1 	.word	0x080097e1
 80096a8:	080097e1 	.word	0x080097e1
 80096ac:	080097e1 	.word	0x080097e1
 80096b0:	080097e1 	.word	0x080097e1
 80096b4:	080097e1 	.word	0x080097e1
 80096b8:	080097ad 	.word	0x080097ad
 80096bc:	080097e1 	.word	0x080097e1
 80096c0:	080097e1 	.word	0x080097e1
 80096c4:	080097e1 	.word	0x080097e1
 80096c8:	080097e1 	.word	0x080097e1
 80096cc:	080097e1 	.word	0x080097e1
 80096d0:	080097e1 	.word	0x080097e1
 80096d4:	080097e1 	.word	0x080097e1
 80096d8:	080097e1 	.word	0x080097e1
 80096dc:	080097e1 	.word	0x080097e1
 80096e0:	080097e1 	.word	0x080097e1
 80096e4:	080097e1 	.word	0x080097e1
 80096e8:	080097e1 	.word	0x080097e1
 80096ec:	080097e1 	.word	0x080097e1
 80096f0:	080097e1 	.word	0x080097e1
 80096f4:	080097e1 	.word	0x080097e1
 80096f8:	080097d3 	.word	0x080097d3
 80096fc:	080097e1 	.word	0x080097e1
 8009700:	080097e1 	.word	0x080097e1
 8009704:	080097e1 	.word	0x080097e1
 8009708:	080097e1 	.word	0x080097e1
 800970c:	080097e1 	.word	0x080097e1
 8009710:	080097e1 	.word	0x080097e1
 8009714:	080097e1 	.word	0x080097e1
 8009718:	080097e1 	.word	0x080097e1
 800971c:	080097e1 	.word	0x080097e1
 8009720:	080097e1 	.word	0x080097e1
 8009724:	080097e1 	.word	0x080097e1
 8009728:	080097e1 	.word	0x080097e1
 800972c:	080097e1 	.word	0x080097e1
 8009730:	080097e1 	.word	0x080097e1
 8009734:	080097e1 	.word	0x080097e1
 8009738:	080097e1 	.word	0x080097e1
 800973c:	080097e1 	.word	0x080097e1
 8009740:	080097e1 	.word	0x080097e1
 8009744:	080097e1 	.word	0x080097e1
 8009748:	080097e1 	.word	0x080097e1
 800974c:	080097e1 	.word	0x080097e1
 8009750:	080097e1 	.word	0x080097e1
 8009754:	080097e1 	.word	0x080097e1
 8009758:	080097e1 	.word	0x080097e1
 800975c:	080097e1 	.word	0x080097e1
 8009760:	080097e1 	.word	0x080097e1
 8009764:	080097e1 	.word	0x080097e1
 8009768:	080097e1 	.word	0x080097e1
 800976c:	080097e1 	.word	0x080097e1
 8009770:	080097e1 	.word	0x080097e1
 8009774:	080097e1 	.word	0x080097e1
 8009778:	080097d9 	.word	0x080097d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800977c:	f7fd fa18 	bl	8006bb0 <HAL_RCC_GetPCLK1Freq>
 8009780:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009782:	e033      	b.n	80097ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009784:	f7fd fa2a 	bl	8006bdc <HAL_RCC_GetPCLK2Freq>
 8009788:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800978a:	e02f      	b.n	80097ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe f97f 	bl	8007a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800979a:	e027      	b.n	80097ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800979c:	f107 0308 	add.w	r3, r7, #8
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fac3 	bl	8007d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097aa:	e01f      	b.n	80097ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ac:	4b2b      	ldr	r3, [pc, #172]	; (800985c <UART_SetConfig+0x94c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d009      	beq.n	80097cc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097b8:	4b28      	ldr	r3, [pc, #160]	; (800985c <UART_SetConfig+0x94c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	08db      	lsrs	r3, r3, #3
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	4a27      	ldr	r2, [pc, #156]	; (8009860 <UART_SetConfig+0x950>)
 80097c4:	fa22 f303 	lsr.w	r3, r2, r3
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097ca:	e00f      	b.n	80097ec <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80097cc:	4b24      	ldr	r3, [pc, #144]	; (8009860 <UART_SetConfig+0x950>)
 80097ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097d0:	e00c      	b.n	80097ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097d2:	4b24      	ldr	r3, [pc, #144]	; (8009864 <UART_SetConfig+0x954>)
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097d6:	e009      	b.n	80097ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097de:	e005      	b.n	80097ec <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 8121 	beq.w	8009a36 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	4a17      	ldr	r2, [pc, #92]	; (8009858 <UART_SetConfig+0x948>)
 80097fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097fe:	461a      	mov	r2, r3
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	fbb3 f3f2 	udiv	r3, r3, r2
 8009806:	005a      	lsls	r2, r3, #1
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	441a      	add	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	fbb2 f3f3 	udiv	r3, r2, r3
 8009818:	b29b      	uxth	r3, r3
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	2b0f      	cmp	r3, #15
 8009820:	d916      	bls.n	8009850 <UART_SetConfig+0x940>
 8009822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009828:	d212      	bcs.n	8009850 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	b29b      	uxth	r3, r3
 800982e:	f023 030f 	bic.w	r3, r3, #15
 8009832:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	b29b      	uxth	r3, r3
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	b29a      	uxth	r2, r3
 8009840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009842:	4313      	orrs	r3, r2
 8009844:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800984c:	60da      	str	r2, [r3, #12]
 800984e:	e0f2      	b.n	8009a36 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009856:	e0ee      	b.n	8009a36 <UART_SetConfig+0xb26>
 8009858:	080204d0 	.word	0x080204d0
 800985c:	58024400 	.word	0x58024400
 8009860:	03d09000 	.word	0x03d09000
 8009864:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800986c:	2b40      	cmp	r3, #64	; 0x40
 800986e:	f200 80b7 	bhi.w	80099e0 <UART_SetConfig+0xad0>
 8009872:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <UART_SetConfig+0x968>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	0800997d 	.word	0x0800997d
 800987c:	08009985 	.word	0x08009985
 8009880:	080099e1 	.word	0x080099e1
 8009884:	080099e1 	.word	0x080099e1
 8009888:	0800998d 	.word	0x0800998d
 800988c:	080099e1 	.word	0x080099e1
 8009890:	080099e1 	.word	0x080099e1
 8009894:	080099e1 	.word	0x080099e1
 8009898:	0800999d 	.word	0x0800999d
 800989c:	080099e1 	.word	0x080099e1
 80098a0:	080099e1 	.word	0x080099e1
 80098a4:	080099e1 	.word	0x080099e1
 80098a8:	080099e1 	.word	0x080099e1
 80098ac:	080099e1 	.word	0x080099e1
 80098b0:	080099e1 	.word	0x080099e1
 80098b4:	080099e1 	.word	0x080099e1
 80098b8:	080099ad 	.word	0x080099ad
 80098bc:	080099e1 	.word	0x080099e1
 80098c0:	080099e1 	.word	0x080099e1
 80098c4:	080099e1 	.word	0x080099e1
 80098c8:	080099e1 	.word	0x080099e1
 80098cc:	080099e1 	.word	0x080099e1
 80098d0:	080099e1 	.word	0x080099e1
 80098d4:	080099e1 	.word	0x080099e1
 80098d8:	080099e1 	.word	0x080099e1
 80098dc:	080099e1 	.word	0x080099e1
 80098e0:	080099e1 	.word	0x080099e1
 80098e4:	080099e1 	.word	0x080099e1
 80098e8:	080099e1 	.word	0x080099e1
 80098ec:	080099e1 	.word	0x080099e1
 80098f0:	080099e1 	.word	0x080099e1
 80098f4:	080099e1 	.word	0x080099e1
 80098f8:	080099d3 	.word	0x080099d3
 80098fc:	080099e1 	.word	0x080099e1
 8009900:	080099e1 	.word	0x080099e1
 8009904:	080099e1 	.word	0x080099e1
 8009908:	080099e1 	.word	0x080099e1
 800990c:	080099e1 	.word	0x080099e1
 8009910:	080099e1 	.word	0x080099e1
 8009914:	080099e1 	.word	0x080099e1
 8009918:	080099e1 	.word	0x080099e1
 800991c:	080099e1 	.word	0x080099e1
 8009920:	080099e1 	.word	0x080099e1
 8009924:	080099e1 	.word	0x080099e1
 8009928:	080099e1 	.word	0x080099e1
 800992c:	080099e1 	.word	0x080099e1
 8009930:	080099e1 	.word	0x080099e1
 8009934:	080099e1 	.word	0x080099e1
 8009938:	080099e1 	.word	0x080099e1
 800993c:	080099e1 	.word	0x080099e1
 8009940:	080099e1 	.word	0x080099e1
 8009944:	080099e1 	.word	0x080099e1
 8009948:	080099e1 	.word	0x080099e1
 800994c:	080099e1 	.word	0x080099e1
 8009950:	080099e1 	.word	0x080099e1
 8009954:	080099e1 	.word	0x080099e1
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080099e1 	.word	0x080099e1
 8009960:	080099e1 	.word	0x080099e1
 8009964:	080099e1 	.word	0x080099e1
 8009968:	080099e1 	.word	0x080099e1
 800996c:	080099e1 	.word	0x080099e1
 8009970:	080099e1 	.word	0x080099e1
 8009974:	080099e1 	.word	0x080099e1
 8009978:	080099d9 	.word	0x080099d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800997c:	f7fd f918 	bl	8006bb0 <HAL_RCC_GetPCLK1Freq>
 8009980:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009982:	e033      	b.n	80099ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009984:	f7fd f92a 	bl	8006bdc <HAL_RCC_GetPCLK2Freq>
 8009988:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800998a:	e02f      	b.n	80099ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800998c:	f107 0314 	add.w	r3, r7, #20
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe f87f 	bl	8007a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800999a:	e027      	b.n	80099ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe f9c3 	bl	8007d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099aa:	e01f      	b.n	80099ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ac:	4b2c      	ldr	r3, [pc, #176]	; (8009a60 <UART_SetConfig+0xb50>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099b8:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <UART_SetConfig+0xb50>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	08db      	lsrs	r3, r3, #3
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	4a28      	ldr	r2, [pc, #160]	; (8009a64 <UART_SetConfig+0xb54>)
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099ca:	e00f      	b.n	80099ec <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80099cc:	4b25      	ldr	r3, [pc, #148]	; (8009a64 <UART_SetConfig+0xb54>)
 80099ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099d0:	e00c      	b.n	80099ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099d2:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <UART_SetConfig+0xb58>)
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099d6:	e009      	b.n	80099ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099de:	e005      	b.n	80099ec <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099ea:	bf00      	nop
    }

    if (pclk != 0U)
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d021      	beq.n	8009a36 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	4a1d      	ldr	r2, [pc, #116]	; (8009a6c <UART_SetConfig+0xb5c>)
 80099f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	085b      	lsrs	r3, r3, #1
 8009a0a:	441a      	add	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	2b0f      	cmp	r3, #15
 8009a1c:	d908      	bls.n	8009a30 <UART_SetConfig+0xb20>
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a24:	d204      	bcs.n	8009a30 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a2c:	60da      	str	r2, [r3, #12]
 8009a2e:	e002      	b.n	8009a36 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009a52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3738      	adds	r7, #56	; 0x38
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009a60:	58024400 	.word	0x58024400
 8009a64:	03d09000 	.word	0x03d09000
 8009a68:	003d0900 	.word	0x003d0900
 8009a6c:	080204d0 	.word	0x080204d0

08009a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00a      	beq.n	8009a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae2:	f003 0308 	and.w	r3, r3, #8
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01a      	beq.n	8009b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b6e:	d10a      	bne.n	8009b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	605a      	str	r2, [r3, #4]
  }
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009bc4:	f7f7 fedc 	bl	8001980 <HAL_GetTick>
 8009bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0308 	and.w	r3, r3, #8
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d10e      	bne.n	8009bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f82c 	bl	8009c44 <UART_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e022      	b.n	8009c3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d10e      	bne.n	8009c22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f816 	bl	8009c44 <UART_WaitOnFlagUntilTimeout>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e00c      	b.n	8009c3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	4613      	mov	r3, r2
 8009c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c54:	e062      	b.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5c:	d05e      	beq.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5e:	f7f7 fe8f 	bl	8001980 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d302      	bcc.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11d      	bne.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c82:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0201 	bic.w	r2, r2, #1
 8009c92:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e045      	b.n	8009d3c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d02e      	beq.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ccc:	d126      	bne.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ce6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689a      	ldr	r2, [r3, #8]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f022 0201 	bic.w	r2, r2, #1
 8009cf6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e00f      	b.n	8009d3c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69da      	ldr	r2, [r3, #28]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	4013      	ands	r3, r2
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2301      	moveq	r3, #1
 8009d2e:	2300      	movne	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	461a      	mov	r2, r3
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d08d      	beq.n	8009c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <HAL_UARTEx_DisableFifoMode+0x16>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e027      	b.n	8009daa <HAL_UARTEx_DisableFifoMode+0x66>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2224      	movs	r2, #36	; 0x24
 8009d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e02d      	b.n	8009e2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2224      	movs	r2, #36	; 0x24
 8009dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0201 	bic.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f850 	bl	8009eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d101      	bne.n	8009e4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e46:	2302      	movs	r3, #2
 8009e48:	e02d      	b.n	8009ea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2224      	movs	r2, #36	; 0x24
 8009e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f022 0201 	bic.w	r2, r2, #1
 8009e70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f812 	bl	8009eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b089      	sub	sp, #36	; 0x24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009eb8:	4a2f      	ldr	r2, [pc, #188]	; (8009f78 <UARTEx_SetNbDataToProcess+0xc8>)
 8009eba:	f107 0314 	add.w	r3, r7, #20
 8009ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ec2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009ec6:	4a2d      	ldr	r2, [pc, #180]	; (8009f7c <UARTEx_SetNbDataToProcess+0xcc>)
 8009ec8:	f107 030c 	add.w	r3, r7, #12
 8009ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ed0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d108      	bne.n	8009eee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009eec:	e03d      	b.n	8009f6a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eee:	2310      	movs	r3, #16
 8009ef0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ef2:	2310      	movs	r3, #16
 8009ef4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	0e5b      	lsrs	r3, r3, #25
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	0f5b      	lsrs	r3, r3, #29
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009f16:	7fbb      	ldrb	r3, [r7, #30]
 8009f18:	7f3a      	ldrb	r2, [r7, #28]
 8009f1a:	f107 0120 	add.w	r1, r7, #32
 8009f1e:	440a      	add	r2, r1
 8009f20:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009f24:	fb02 f303 	mul.w	r3, r2, r3
 8009f28:	7f3a      	ldrb	r2, [r7, #28]
 8009f2a:	f107 0120 	add.w	r1, r7, #32
 8009f2e:	440a      	add	r2, r1
 8009f30:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009f34:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009f40:	7ffb      	ldrb	r3, [r7, #31]
 8009f42:	7f7a      	ldrb	r2, [r7, #29]
 8009f44:	f107 0120 	add.w	r1, r7, #32
 8009f48:	440a      	add	r2, r1
 8009f4a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009f4e:	fb02 f303 	mul.w	r3, r2, r3
 8009f52:	7f7a      	ldrb	r2, [r7, #29]
 8009f54:	f107 0120 	add.w	r1, r7, #32
 8009f58:	440a      	add	r2, r1
 8009f5a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009f5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f6a:	bf00      	nop
 8009f6c:	3724      	adds	r7, #36	; 0x24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	0801d3a8 	.word	0x0801d3a8
 8009f7c:	0801d3b0 	.word	0x0801d3b0

08009f80 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009f92:	2320      	movs	r3, #32
 8009f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f96:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8009f9a:	e00b      	b.n	8009fb4 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009f9c:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <SCB_InvalidateDCache_by_Addr+0x50>)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4413      	add	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dcf0      	bgt.n	8009f9c <SCB_InvalidateDCache_by_Addr+0x1c>
 8009fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009fbe:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000ed00 	.word	0xe000ed00

08009fd4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	609a      	str	r2, [r3, #8]
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a65      	ldr	r2, [pc, #404]	; (800a188 <HAL_ETH_MspInit+0x1b4>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	f040 80c3 	bne.w	800a17e <HAL_ETH_MspInit+0x1aa>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009ff8:	4b64      	ldr	r3, [pc, #400]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 8009ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ffe:	4a63      	ldr	r2, [pc, #396]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a004:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a008:	4b60      	ldr	r3, [pc, #384]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a00a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a00e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a012:	623b      	str	r3, [r7, #32]
 800a014:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a016:	4b5d      	ldr	r3, [pc, #372]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a01c:	4a5b      	ldr	r2, [pc, #364]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a01e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a026:	4b59      	ldr	r3, [pc, #356]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a034:	4b55      	ldr	r3, [pc, #340]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a03a:	4a54      	ldr	r2, [pc, #336]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a03c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a044:	4b51      	ldr	r3, [pc, #324]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a04e:	61bb      	str	r3, [r7, #24]
 800a050:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a052:	4b4e      	ldr	r3, [pc, #312]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a058:	4a4c      	ldr	r2, [pc, #304]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a05a:	f043 0304 	orr.w	r3, r3, #4
 800a05e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a062:	4b4a      	ldr	r3, [pc, #296]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a070:	4b46      	ldr	r3, [pc, #280]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a076:	4a45      	ldr	r2, [pc, #276]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a078:	f043 0301 	orr.w	r3, r3, #1
 800a07c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a080:	4b42      	ldr	r3, [pc, #264]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a08e:	4b3f      	ldr	r3, [pc, #252]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a094:	4a3d      	ldr	r2, [pc, #244]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a096:	f043 0302 	orr.w	r3, r3, #2
 800a09a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a09e:	4b3b      	ldr	r3, [pc, #236]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a0a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0a4:	f003 0302 	and.w	r3, r3, #2
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a0ac:	4b37      	ldr	r3, [pc, #220]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a0ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0b2:	4a36      	ldr	r2, [pc, #216]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0bc:	4b33      	ldr	r3, [pc, #204]	; (800a18c <HAL_ETH_MspInit+0x1b8>)
 800a0be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c6:	60bb      	str	r3, [r7, #8]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PG11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a0ca:	2332      	movs	r3, #50	; 0x32
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0da:	230b      	movs	r3, #11
 800a0dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	482a      	ldr	r0, [pc, #168]	; (800a190 <HAL_ETH_MspInit+0x1bc>)
 800a0e6:	f7fb fb7b 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800a0ea:	2382      	movs	r3, #130	; 0x82
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0fa:	230b      	movs	r3, #11
 800a0fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a102:	4619      	mov	r1, r3
 800a104:	4823      	ldr	r0, [pc, #140]	; (800a194 <HAL_ETH_MspInit+0x1c0>)
 800a106:	f7fb fb6b 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a10a:	2304      	movs	r3, #4
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a10e:	2302      	movs	r3, #2
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a112:	2300      	movs	r3, #0
 800a114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a116:	2303      	movs	r3, #3
 800a118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a11a:	230b      	movs	r3, #11
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a122:	4619      	mov	r1, r3
 800a124:	481b      	ldr	r0, [pc, #108]	; (800a194 <HAL_ETH_MspInit+0x1c0>)
 800a126:	f7fb fb5b 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a12a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a130:	2302      	movs	r3, #2
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a134:	2300      	movs	r3, #0
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a138:	2300      	movs	r3, #0
 800a13a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a13c:	230b      	movs	r3, #11
 800a13e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a144:	4619      	mov	r1, r3
 800a146:	4814      	ldr	r0, [pc, #80]	; (800a198 <HAL_ETH_MspInit+0x1c4>)
 800a148:	f7fb fb4a 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a14c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a152:	2302      	movs	r3, #2
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a156:	2300      	movs	r3, #0
 800a158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a15a:	2300      	movs	r3, #0
 800a15c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a15e:	230b      	movs	r3, #11
 800a160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a166:	4619      	mov	r1, r3
 800a168:	480c      	ldr	r0, [pc, #48]	; (800a19c <HAL_ETH_MspInit+0x1c8>)
 800a16a:	f7fb fb39 	bl	80057e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a16e:	2200      	movs	r2, #0
 800a170:	2105      	movs	r1, #5
 800a172:	203d      	movs	r0, #61	; 0x3d
 800a174:	f7f7 fce8 	bl	8001b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a178:	203d      	movs	r0, #61	; 0x3d
 800a17a:	f7f7 fcff 	bl	8001b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a17e:	bf00      	nop
 800a180:	3738      	adds	r7, #56	; 0x38
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	40028000 	.word	0x40028000
 800a18c:	58024400 	.word	0x58024400
 800a190:	58020800 	.word	0x58020800
 800a194:	58020000 	.word	0x58020000
 800a198:	58020400 	.word	0x58020400
 800a19c:	58021800 	.word	0x58021800

0800a1a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <HAL_ETH_RxCpltCallback+0x1c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 fd31 	bl	800ac14 <osSemaphoreRelease>
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	24000a80 	.word	0x24000a80

0800a1c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a1c0:	b5b0      	push	{r4, r5, r7, lr}
 800a1c2:	b0ac      	sub	sp, #176	; 0xb0
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a1da:	4b91      	ldr	r3, [pc, #580]	; (800a420 <low_level_init+0x260>)
 800a1dc:	4a91      	ldr	r2, [pc, #580]	; (800a424 <low_level_init+0x264>)
 800a1de:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a1e6:	2380      	movs	r3, #128	; 0x80
 800a1e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a1ec:	23e1      	movs	r3, #225	; 0xe1
 800a1ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a204:	4a86      	ldr	r2, [pc, #536]	; (800a420 <low_level_init+0x260>)
 800a206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a20a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a20c:	4b84      	ldr	r3, [pc, #528]	; (800a420 <low_level_init+0x260>)
 800a20e:	2201      	movs	r2, #1
 800a210:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a212:	4b83      	ldr	r3, [pc, #524]	; (800a420 <low_level_init+0x260>)
 800a214:	4a84      	ldr	r2, [pc, #528]	; (800a428 <low_level_init+0x268>)
 800a216:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a218:	4b81      	ldr	r3, [pc, #516]	; (800a420 <low_level_init+0x260>)
 800a21a:	4a84      	ldr	r2, [pc, #528]	; (800a42c <low_level_init+0x26c>)
 800a21c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a21e:	4b80      	ldr	r3, [pc, #512]	; (800a420 <low_level_init+0x260>)
 800a220:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a224:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a226:	487e      	ldr	r0, [pc, #504]	; (800a420 <low_level_init+0x260>)
 800a228:	f7f9 fc48 	bl	8003abc <HAL_ETH_Init>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a232:	2234      	movs	r2, #52	; 0x34
 800a234:	2100      	movs	r1, #0
 800a236:	487e      	ldr	r0, [pc, #504]	; (800a430 <low_level_init+0x270>)
 800a238:	f010 fba9 	bl	801a98e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a23c:	4b7c      	ldr	r3, [pc, #496]	; (800a430 <low_level_init+0x270>)
 800a23e:	2221      	movs	r2, #33	; 0x21
 800a240:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a242:	4b7b      	ldr	r3, [pc, #492]	; (800a430 <low_level_init+0x270>)
 800a244:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a248:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a24a:	4b79      	ldr	r3, [pc, #484]	; (800a430 <low_level_init+0x270>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a250:	4878      	ldr	r0, [pc, #480]	; (800a434 <low_level_init+0x274>)
 800a252:	f008 f899 	bl	8012388 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2206      	movs	r2, #6
 800a25a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a25e:	4b70      	ldr	r3, [pc, #448]	; (800a420 <low_level_init+0x260>)
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a26a:	4b6d      	ldr	r3, [pc, #436]	; (800a420 <low_level_init+0x260>)
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	785a      	ldrb	r2, [r3, #1]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a276:	4b6a      	ldr	r3, [pc, #424]	; (800a420 <low_level_init+0x260>)
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	789a      	ldrb	r2, [r3, #2]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a282:	4b67      	ldr	r3, [pc, #412]	; (800a420 <low_level_init+0x260>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	78da      	ldrb	r2, [r3, #3]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a28e:	4b64      	ldr	r3, [pc, #400]	; (800a420 <low_level_init+0x260>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	791a      	ldrb	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a29a:	4b61      	ldr	r3, [pc, #388]	; (800a420 <low_level_init+0x260>)
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	795a      	ldrb	r2, [r3, #5]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a2ac:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a2b4:	f043 030a 	orr.w	r3, r3, #10
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2c6:	e012      	b.n	800a2ee <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a2d0:	fb02 f303 	mul.w	r3, r2, r3
 800a2d4:	4a58      	ldr	r2, [pc, #352]	; (800a438 <low_level_init+0x278>)
 800a2d6:	441a      	add	r2, r3
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a2de:	4850      	ldr	r0, [pc, #320]	; (800a420 <low_level_init+0x260>)
 800a2e0:	f7f9 fcc6 	bl	8003c70 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d9e8      	bls.n	800a2c8 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a2fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a302:	2101      	movs	r1, #1
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fc03 	bl	800ab10 <osSemaphoreCreate>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4b4b      	ldr	r3, [pc, #300]	; (800a43c <low_level_init+0x27c>)
 800a30e:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a310:	4b4b      	ldr	r3, [pc, #300]	; (800a440 <low_level_init+0x280>)
 800a312:	f107 040c 	add.w	r4, r7, #12
 800a316:	461d      	mov	r5, r3
 800a318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a31a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a31c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a320:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 faf3 	bl	800a916 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a330:	4944      	ldr	r1, [pc, #272]	; (800a444 <low_level_init+0x284>)
 800a332:	4845      	ldr	r0, [pc, #276]	; (800a448 <low_level_init+0x288>)
 800a334:	f7f7 f973 	bl	800161e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a338:	4843      	ldr	r0, [pc, #268]	; (800a448 <low_level_init+0x288>)
 800a33a:	f7f7 f9a2 	bl	8001682 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a33e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d165      	bne.n	800a412 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a346:	4840      	ldr	r0, [pc, #256]	; (800a448 <low_level_init+0x288>)
 800a348:	f7f7 fa43 	bl	80017d2 <LAN8742_GetLinkState>
 800a34c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a354:	2b01      	cmp	r3, #1
 800a356:	dc06      	bgt.n	800a366 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f008 fbfb 	bl	8012b54 <netif_set_link_down>
      netif_set_down(netif);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f008 fb8e 	bl	8012a80 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a364:	e057      	b.n	800a416 <low_level_init+0x256>
      switch (PHYLinkState)
 800a366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a36a:	3b02      	subs	r3, #2
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d82b      	bhi.n	800a3c8 <low_level_init+0x208>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <low_level_init+0x1b8>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a39b 	.word	0x0800a39b
 800a380:	0800a3ab 	.word	0x0800a3ab
 800a384:	0800a3bb 	.word	0x0800a3bb
        duplex = ETH_FULLDUPLEX_MODE;
 800a388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a38c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a398:	e01f      	b.n	800a3da <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a3a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a3a8:	e017      	b.n	800a3da <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a3aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a3b8:	e00f      	b.n	800a3da <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a3c6:	e008      	b.n	800a3da <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a3c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a3d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a3d8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a3da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3de:	4619      	mov	r1, r3
 800a3e0:	480f      	ldr	r0, [pc, #60]	; (800a420 <low_level_init+0x260>)
 800a3e2:	f7fa fa27 	bl	8004834 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a3e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3ea:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a3ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a3f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4809      	ldr	r0, [pc, #36]	; (800a420 <low_level_init+0x260>)
 800a3fa:	f7fa fbef 	bl	8004bdc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a3fe:	4808      	ldr	r0, [pc, #32]	; (800a420 <low_level_init+0x260>)
 800a400:	f7f9 fc77 	bl	8003cf2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f008 facf 	bl	80129a8 <netif_set_up>
    netif_set_link_up(netif);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f008 fb6a 	bl	8012ae4 <netif_set_link_up>
}
 800a410:	e001      	b.n	800a416 <low_level_init+0x256>
    Error_Handler();
 800a412:	f7f6 fc11 	bl	8000c38 <Error_Handler>
}
 800a416:	bf00      	nop
 800a418:	37b0      	adds	r7, #176	; 0xb0
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bdb0      	pop	{r4, r5, r7, pc}
 800a41e:	bf00      	nop
 800a420:	24005894 	.word	0x24005894
 800a424:	40028000 	.word	0x40028000
 800a428:	30040060 	.word	0x30040060
 800a42c:	30040000 	.word	0x30040000
 800a430:	24005904 	.word	0x24005904
 800a434:	080204e8 	.word	0x080204e8
 800a438:	30040200 	.word	0x30040200
 800a43c:	24000a80 	.word	0x24000a80
 800a440:	0801d3c0 	.word	0x0801d3c0
 800a444:	24000010 	.word	0x24000010
 800a448:	24005874 	.word	0x24005874

0800a44c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b092      	sub	sp, #72	; 0x48
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a456:	2300      	movs	r3, #0
 800a458:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	2230      	movs	r2, #48	; 0x30
 800a466:	2100      	movs	r1, #0
 800a468:	4618      	mov	r0, r3
 800a46a:	f010 fa90 	bl	801a98e <memset>

  for(q = p; q != NULL; q = q->next)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	643b      	str	r3, [r7, #64]	; 0x40
 800a472:	e049      	b.n	800a508 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a476:	2b03      	cmp	r3, #3
 800a478:	d902      	bls.n	800a480 <low_level_output+0x34>
      return ERR_IF;
 800a47a:	f06f 030b 	mvn.w	r3, #11
 800a47e:	e056      	b.n	800a52e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	6859      	ldr	r1, [r3, #4]
 800a484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a486:	4613      	mov	r3, r2
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a492:	4413      	add	r3, r2
 800a494:	3b3c      	subs	r3, #60	; 0x3c
 800a496:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49a:	895b      	ldrh	r3, [r3, #10]
 800a49c:	4619      	mov	r1, r3
 800a49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4ac:	4413      	add	r3, r2
 800a4ae:	3b38      	subs	r3, #56	; 0x38
 800a4b0:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d012      	beq.n	800a4de <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	f107 000c 	add.w	r0, r7, #12
 800a4c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	440b      	add	r3, r1
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	18c1      	adds	r1, r0, r3
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4d8:	4413      	add	r3, r2
 800a4da:	3b34      	subs	r3, #52	; 0x34
 800a4dc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	4413      	add	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4f4:	4413      	add	r3, r2
 800a4f6:	3b34      	subs	r3, #52	; 0x34
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fe:	3301      	adds	r3, #1
 800a500:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	643b      	str	r3, [r7, #64]	; 0x40
 800a508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1b2      	bne.n	800a474 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	891b      	ldrh	r3, [r3, #8]
 800a512:	461a      	mov	r2, r3
 800a514:	4b08      	ldr	r3, [pc, #32]	; (800a538 <low_level_output+0xec>)
 800a516:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a518:	4a07      	ldr	r2, [pc, #28]	; (800a538 <low_level_output+0xec>)
 800a51a:	f107 030c 	add.w	r3, r7, #12
 800a51e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a520:	2214      	movs	r2, #20
 800a522:	4905      	ldr	r1, [pc, #20]	; (800a538 <low_level_output+0xec>)
 800a524:	4805      	ldr	r0, [pc, #20]	; (800a53c <low_level_output+0xf0>)
 800a526:	f7f9 fce3 	bl	8003ef0 <HAL_ETH_Transmit>

  return errval;
 800a52a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3748      	adds	r7, #72	; 0x48
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	24005904 	.word	0x24005904
 800a53c:	24005894 	.word	0x24005894

0800a540 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b094      	sub	sp, #80	; 0x50
 800a544:	af02      	add	r7, sp, #8
 800a546:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a548:	2300      	movs	r3, #0
 800a54a:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60bb      	str	r3, [r7, #8]
 800a550:	2300      	movs	r3, #0
 800a552:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a554:	f107 030c 	add.w	r3, r7, #12
 800a558:	2230      	movs	r2, #48	; 0x30
 800a55a:	2100      	movs	r1, #0
 800a55c:	4618      	mov	r0, r3
 800a55e:	f010 fa16 	bl	801a98e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a562:	2300      	movs	r3, #0
 800a564:	643b      	str	r3, [r7, #64]	; 0x40
 800a566:	e015      	b.n	800a594 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	f107 010c 	add.w	r1, r7, #12
 800a570:	4613      	mov	r3, r2
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4419      	add	r1, r3
 800a57a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a57c:	4613      	mov	r3, r2
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a588:	4413      	add	r3, r2
 800a58a:	3b34      	subs	r3, #52	; 0x34
 800a58c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a590:	3301      	adds	r3, #1
 800a592:	643b      	str	r3, [r7, #64]	; 0x40
 800a594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a596:	2b02      	cmp	r3, #2
 800a598:	d9e6      	bls.n	800a568 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a59a:	f107 030c 	add.w	r3, r7, #12
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4818      	ldr	r0, [pc, #96]	; (800a604 <low_level_input+0xc4>)
 800a5a2:	f7f9 fe1e 	bl	80041e2 <HAL_ETH_GetRxDataBuffer>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d125      	bne.n	800a5f8 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a5ac:	f107 0308 	add.w	r3, r7, #8
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4814      	ldr	r0, [pc, #80]	; (800a604 <low_level_input+0xc4>)
 800a5b4:	f7f9 feb3 	bl	800431e <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a5b8:	4812      	ldr	r0, [pc, #72]	; (800a604 <low_level_input+0xc4>)
 800a5ba:	f7f9 fee3 	bl	8004384 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff fcdb 	bl	8009f80 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a5ca:	480f      	ldr	r0, [pc, #60]	; (800a608 <low_level_input+0xc8>)
 800a5cc:	f007 ff58 	bl	8012480 <memp_malloc_pool>
 800a5d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00f      	beq.n	800a5f8 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5da:	4a0c      	ldr	r2, [pc, #48]	; (800a60c <low_level_input+0xcc>)
 800a5dc:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	b299      	uxth	r1, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	9201      	str	r2, [sp, #4]
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ee:	2241      	movs	r2, #65	; 0x41
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f008 fccf 	bl	8012f94 <pbuf_alloced_custom>
 800a5f6:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800a5f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3748      	adds	r7, #72	; 0x48
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	24005894 	.word	0x24005894
 800a608:	080204e8 	.word	0x080204e8
 800a60c:	0800a6bd 	.word	0x0800a6bd

0800a610 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a61c:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <ethernetif_input+0x4c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a624:	4618      	mov	r0, r3
 800a626:	f000 faa7 	bl	800ab78 <osSemaphoreWait>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1f5      	bne.n	800a61c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff ff85 	bl	800a540 <low_level_input>
 800a636:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00a      	beq.n	800a654 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	68f9      	ldr	r1, [r7, #12]
 800a644:	68b8      	ldr	r0, [r7, #8]
 800a646:	4798      	blx	r3
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a64e:	68b8      	ldr	r0, [r7, #8]
 800a650:	f008 fe5a 	bl	8013308 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1ea      	bne.n	800a630 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a65a:	e7df      	b.n	800a61c <ethernetif_input+0xc>
 800a65c:	24000a80 	.word	0x24000a80

0800a660 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <ethernetif_init+0x1c>
 800a66e:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <ethernetif_init+0x48>)
 800a670:	f240 224f 	movw	r2, #591	; 0x24f
 800a674:	490d      	ldr	r1, [pc, #52]	; (800a6ac <ethernetif_init+0x4c>)
 800a676:	480e      	ldr	r0, [pc, #56]	; (800a6b0 <ethernetif_init+0x50>)
 800a678:	f010 fdca 	bl	801b210 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2273      	movs	r2, #115	; 0x73
 800a680:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2274      	movs	r2, #116	; 0x74
 800a688:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <ethernetif_init+0x54>)
 800a690:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a08      	ldr	r2, [pc, #32]	; (800a6b8 <ethernetif_init+0x58>)
 800a696:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fd91 	bl	800a1c0 <low_level_init>

  return ERR_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	0801d3dc 	.word	0x0801d3dc
 800a6ac:	0801d3f8 	.word	0x0801d3f8
 800a6b0:	0801d408 	.word	0x0801d408
 800a6b4:	0800fc7d 	.word	0x0800fc7d
 800a6b8:	0800a44d 	.word	0x0800a44d

0800a6bc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a6c8:	68f9      	ldr	r1, [r7, #12]
 800a6ca:	4803      	ldr	r0, [pc, #12]	; (800a6d8 <pbuf_free_custom+0x1c>)
 800a6cc:	f007 ff4c 	bl	8012568 <memp_free_pool>
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	080204e8 	.word	0x080204e8

0800a6dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a6e0:	f7f7 f94e 	bl	8001980 <HAL_GetTick>
 800a6e4:	4603      	mov	r3, r0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a6f0:	4802      	ldr	r0, [pc, #8]	; (800a6fc <ETH_PHY_IO_Init+0x10>)
 800a6f2:	f7fa fa8d 	bl	8004c10 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	24005894 	.word	0x24005894

0800a700 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  return 0;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	68f9      	ldr	r1, [r7, #12]
 800a722:	4807      	ldr	r0, [pc, #28]	; (800a740 <ETH_PHY_IO_ReadReg+0x30>)
 800a724:	f7f9 ffde 	bl	80046e4 <HAL_ETH_ReadPHYRegister>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a732:	e000      	b.n	800a736 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	24005894 	.word	0x24005894

0800a744 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	68f9      	ldr	r1, [r7, #12]
 800a756:	4807      	ldr	r0, [pc, #28]	; (800a774 <ETH_PHY_IO_WriteReg+0x30>)
 800a758:	f7fa f818 	bl	800478c <HAL_ETH_WritePHYRegister>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a766:	e000      	b.n	800a76a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	24005894 	.word	0x24005894

0800a778 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a77c:	f7f7 f900 	bl	8001980 <HAL_GetTick>
 800a780:	4603      	mov	r3, r0
}
 800a782:	4618      	mov	r0, r3
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b0a0      	sub	sp, #128	; 0x80
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800a790:	2300      	movs	r3, #0
 800a792:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a794:	2300      	movs	r3, #0
 800a796:	67bb      	str	r3, [r7, #120]	; 0x78
 800a798:	2300      	movs	r3, #0
 800a79a:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a7a0:	483a      	ldr	r0, [pc, #232]	; (800a88c <ethernet_link_thread+0x104>)
 800a7a2:	f7f7 f816 	bl	80017d2 <LAN8742_GetLinkState>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a7aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7b0:	089b      	lsrs	r3, r3, #2
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00c      	beq.n	800a7d6 <ethernet_link_thread+0x4e>
 800a7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d809      	bhi.n	800a7d6 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a7c2:	4833      	ldr	r0, [pc, #204]	; (800a890 <ethernet_link_thread+0x108>)
 800a7c4:	f7f9 fb1a 	bl	8003dfc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a7c8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a7ca:	f008 f959 	bl	8012a80 <netif_set_down>
    netif_set_link_down(netif);
 800a7ce:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a7d0:	f008 f9c0 	bl	8012b54 <netif_set_link_down>
 800a7d4:	e055      	b.n	800a882 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a7d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d14e      	bne.n	800a882 <ethernet_link_thread+0xfa>
 800a7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d94b      	bls.n	800a882 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	3b02      	subs	r3, #2
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d82a      	bhi.n	800a848 <ethernet_link_thread+0xc0>
 800a7f2:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <ethernet_link_thread+0x70>)
 800a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f8:	0800a809 	.word	0x0800a809
 800a7fc:	0800a81b 	.word	0x0800a81b
 800a800:	0800a82b 	.word	0x0800a82b
 800a804:	0800a83b 	.word	0x0800a83b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a80c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a80e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a812:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a814:	2301      	movs	r3, #1
 800a816:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a818:	e017      	b.n	800a84a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a81e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a822:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a824:	2301      	movs	r3, #1
 800a826:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a828:	e00f      	b.n	800a84a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a82a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a82e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a830:	2300      	movs	r3, #0
 800a832:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a834:	2301      	movs	r3, #1
 800a836:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a838:	e007      	b.n	800a84a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a83a:	2300      	movs	r3, #0
 800a83c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a83e:	2300      	movs	r3, #0
 800a840:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a842:	2301      	movs	r3, #1
 800a844:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a846:	e000      	b.n	800a84a <ethernet_link_thread+0xc2>
    default:
      break;
 800a848:	bf00      	nop
    }

    if(linkchanged)
 800a84a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d018      	beq.n	800a882 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a850:	f107 0308 	add.w	r3, r7, #8
 800a854:	4619      	mov	r1, r3
 800a856:	480e      	ldr	r0, [pc, #56]	; (800a890 <ethernet_link_thread+0x108>)
 800a858:	f7f9 ffec 	bl	8004834 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a85e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a862:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a864:	f107 0308 	add.w	r3, r7, #8
 800a868:	4619      	mov	r1, r3
 800a86a:	4809      	ldr	r0, [pc, #36]	; (800a890 <ethernet_link_thread+0x108>)
 800a86c:	f7fa f9b6 	bl	8004bdc <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800a870:	4807      	ldr	r0, [pc, #28]	; (800a890 <ethernet_link_thread+0x108>)
 800a872:	f7f9 fa3e 	bl	8003cf2 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a876:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a878:	f008 f896 	bl	80129a8 <netif_set_up>
      netif_set_link_up(netif);
 800a87c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a87e:	f008 f931 	bl	8012ae4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a882:	2064      	movs	r0, #100	; 0x64
 800a884:	f000 f893 	bl	800a9ae <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a888:	e78a      	b.n	800a7a0 <ethernet_link_thread+0x18>
 800a88a:	bf00      	nop
 800a88c:	24005874 	.word	0x24005874
 800a890:	24005894 	.word	0x24005894

0800a894 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8a6:	2b84      	cmp	r3, #132	; 0x84
 800a8a8:	d005      	beq.n	800a8b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	3303      	adds	r3, #3
 800a8b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ca:	f3ef 8305 	mrs	r3, IPSR
 800a8ce:	607b      	str	r3, [r7, #4]
  return(result);
 800a8d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bf14      	ite	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	2300      	moveq	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a8ec:	f002 f85a 	bl	800c9a4 <vTaskStartScheduler>
  
  return osOK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a8fa:	f7ff ffe3 	bl	800a8c4 <inHandlerMode>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a904:	f002 f966 	bl	800cbd4 <xTaskGetTickCountFromISR>
 800a908:	4603      	mov	r3, r0
 800a90a:	e002      	b.n	800a912 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a90c:	f002 f952 	bl	800cbb4 <xTaskGetTickCount>
 800a910:	4603      	mov	r3, r0
  }
}
 800a912:	4618      	mov	r0, r3
 800a914:	bd80      	pop	{r7, pc}

0800a916 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a916:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a918:	b089      	sub	sp, #36	; 0x24
 800a91a:	af04      	add	r7, sp, #16
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d020      	beq.n	800a96a <osThreadCreate+0x54>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01c      	beq.n	800a96a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685c      	ldr	r4, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681d      	ldr	r5, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	691e      	ldr	r6, [r3, #16]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff ffa6 	bl	800a894 <makeFreeRtosPriority>
 800a948:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a952:	9202      	str	r2, [sp, #8]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	9100      	str	r1, [sp, #0]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	4632      	mov	r2, r6
 800a95c:	4629      	mov	r1, r5
 800a95e:	4620      	mov	r0, r4
 800a960:	f001 fe5d 	bl	800c61e <xTaskCreateStatic>
 800a964:	4603      	mov	r3, r0
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	e01c      	b.n	800a9a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685c      	ldr	r4, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a976:	b29e      	uxth	r6, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff ff88 	bl	800a894 <makeFreeRtosPriority>
 800a984:	4602      	mov	r2, r0
 800a986:	f107 030c 	add.w	r3, r7, #12
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	9200      	str	r2, [sp, #0]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	4632      	mov	r2, r6
 800a992:	4629      	mov	r1, r5
 800a994:	4620      	mov	r0, r4
 800a996:	f001 fe9c 	bl	800c6d2 <xTaskCreate>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d001      	beq.n	800a9a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e000      	b.n	800a9a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <osDelay+0x16>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	e000      	b.n	800a9c6 <osDelay+0x18>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f001 ffb8 	bl	800c93c <vTaskDelay>
  
  return osOK;
 800a9cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d007      	beq.n	800a9f6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	f001 f85a 	bl	800baa6 <xQueueCreateMutexStatic>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	e003      	b.n	800a9fe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f001 f83d 	bl	800ba76 <xQueueCreateMutex>
 800a9fc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aa12:	2300      	movs	r3, #0
 800aa14:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <osMutexWait+0x18>
    return osErrorParameter;
 800aa1c:	2380      	movs	r3, #128	; 0x80
 800aa1e:	e03a      	b.n	800aa96 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa2a:	d103      	bne.n	800aa34 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	e009      	b.n	800aa48 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <osMutexWait+0x40>
      ticks = 1;
 800aa44:	2301      	movs	r3, #1
 800aa46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aa48:	f7ff ff3c 	bl	800a8c4 <inHandlerMode>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d017      	beq.n	800aa82 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aa52:	f107 0308 	add.w	r3, r7, #8
 800aa56:	461a      	mov	r2, r3
 800aa58:	2100      	movs	r1, #0
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 fc3a 	bl	800c2d4 <xQueueReceiveFromISR>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d001      	beq.n	800aa6a <osMutexWait+0x62>
      return osErrorOS;
 800aa66:	23ff      	movs	r3, #255	; 0xff
 800aa68:	e015      	b.n	800aa96 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d011      	beq.n	800aa94 <osMutexWait+0x8c>
 800aa70:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <osMutexWait+0x98>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	e008      	b.n	800aa94 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f001 fb1d 	bl	800c0c4 <xQueueSemaphoreTake>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d001      	beq.n	800aa94 <osMutexWait+0x8c>
    return osErrorOS;
 800aa90:	23ff      	movs	r3, #255	; 0xff
 800aa92:	e000      	b.n	800aa96 <osMutexWait+0x8e>
  }
  
  return osOK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800aab4:	f7ff ff06 	bl	800a8c4 <inHandlerMode>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d016      	beq.n	800aaec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aabe:	f107 0308 	add.w	r3, r7, #8
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f001 f997 	bl	800bdf8 <xQueueGiveFromISR>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d001      	beq.n	800aad4 <osMutexRelease+0x30>
      return osErrorOS;
 800aad0:	23ff      	movs	r3, #255	; 0xff
 800aad2:	e017      	b.n	800ab04 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d013      	beq.n	800ab02 <osMutexRelease+0x5e>
 800aada:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <osMutexRelease+0x68>)
 800aadc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	e00a      	b.n	800ab02 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800aaec:	2300      	movs	r3, #0
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fff2 	bl	800badc <xQueueGenericSend>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d001      	beq.n	800ab02 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800aafe:	23ff      	movs	r3, #255	; 0xff
 800ab00:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ab02:	68fb      	ldr	r3, [r7, #12]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d010      	beq.n	800ab44 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d10b      	bne.n	800ab40 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	2001      	movs	r0, #1
 800ab38:	f000 feb2 	bl	800b8a0 <xQueueGenericCreateStatic>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	e016      	b.n	800ab6e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e014      	b.n	800ab6e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d110      	bne.n	800ab6c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800ab4a:	2203      	movs	r2, #3
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	2001      	movs	r0, #1
 800ab50:	f000 ff19 	bl	800b986 <xQueueGenericCreate>
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d005      	beq.n	800ab68 <osSemaphoreCreate+0x58>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 ffba 	bl	800badc <xQueueGenericSend>
      return sema;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	e000      	b.n	800ab6e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ab6c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ab82:	2300      	movs	r3, #0
 800ab84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ab8c:	2380      	movs	r3, #128	; 0x80
 800ab8e:	e03a      	b.n	800ac06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab9a:	d103      	bne.n	800aba4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	e009      	b.n	800abb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d006      	beq.n	800abb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <osSemaphoreWait+0x40>
      ticks = 1;
 800abb4:	2301      	movs	r3, #1
 800abb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800abb8:	f7ff fe84 	bl	800a8c4 <inHandlerMode>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d017      	beq.n	800abf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	461a      	mov	r2, r3
 800abc8:	2100      	movs	r1, #0
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 fb82 	bl	800c2d4 <xQueueReceiveFromISR>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d001      	beq.n	800abda <osSemaphoreWait+0x62>
      return osErrorOS;
 800abd6:	23ff      	movs	r3, #255	; 0xff
 800abd8:	e015      	b.n	800ac06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d011      	beq.n	800ac04 <osSemaphoreWait+0x8c>
 800abe0:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <osSemaphoreWait+0x98>)
 800abe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	e008      	b.n	800ac04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800abf2:	68f9      	ldr	r1, [r7, #12]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f001 fa65 	bl	800c0c4 <xQueueSemaphoreTake>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d001      	beq.n	800ac04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ac00:	23ff      	movs	r3, #255	; 0xff
 800ac02:	e000      	b.n	800ac06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ac24:	f7ff fe4e 	bl	800a8c4 <inHandlerMode>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d016      	beq.n	800ac5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac2e:	f107 0308 	add.w	r3, r7, #8
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 f8df 	bl	800bdf8 <xQueueGiveFromISR>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d001      	beq.n	800ac44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ac40:	23ff      	movs	r3, #255	; 0xff
 800ac42:	e017      	b.n	800ac74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d013      	beq.n	800ac72 <osSemaphoreRelease+0x5e>
 800ac4a:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <osSemaphoreRelease+0x68>)
 800ac4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	e00a      	b.n	800ac72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2100      	movs	r1, #0
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 ff3a 	bl	800badc <xQueueGenericSend>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d001      	beq.n	800ac72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ac6e:	23ff      	movs	r3, #255	; 0xff
 800ac70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ac72:	68fb      	ldr	r3, [r7, #12]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d012      	beq.n	800acb8 <osMessageCreate+0x38>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00e      	beq.n	800acb8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6818      	ldr	r0, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6859      	ldr	r1, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689a      	ldr	r2, [r3, #8]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68dc      	ldr	r4, [r3, #12]
 800acaa:	2300      	movs	r3, #0
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	4623      	mov	r3, r4
 800acb0:	f000 fdf6 	bl	800b8a0 <xQueueGenericCreateStatic>
 800acb4:	4603      	mov	r3, r0
 800acb6:	e008      	b.n	800acca <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	4619      	mov	r1, r3
 800acc4:	f000 fe5f 	bl	800b986 <xQueueGenericCreate>
 800acc8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800acca:	4618      	mov	r0, r3
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd90      	pop	{r4, r7, pc}
	...

0800acd4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ace0:	2300      	movs	r3, #0
 800ace2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <osMessagePut+0x1e>
    ticks = 1;
 800acee:	2301      	movs	r3, #1
 800acf0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800acf2:	f7ff fde7 	bl	800a8c4 <inHandlerMode>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d018      	beq.n	800ad2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800acfc:	f107 0210 	add.w	r2, r7, #16
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	2300      	movs	r3, #0
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 ffe2 	bl	800bcd0 <xQueueGenericSendFromISR>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d001      	beq.n	800ad16 <osMessagePut+0x42>
      return osErrorOS;
 800ad12:	23ff      	movs	r3, #255	; 0xff
 800ad14:	e018      	b.n	800ad48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d014      	beq.n	800ad46 <osMessagePut+0x72>
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <osMessagePut+0x7c>)
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	e00b      	b.n	800ad46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ad2e:	f107 0108 	add.w	r1, r7, #8
 800ad32:	2300      	movs	r3, #0
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 fed0 	bl	800badc <xQueueGenericSend>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d001      	beq.n	800ad46 <osMessagePut+0x72>
      return osErrorOS;
 800ad42:	23ff      	movs	r3, #255	; 0xff
 800ad44:	e000      	b.n	800ad48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ad54:	b590      	push	{r4, r7, lr}
 800ad56:	b08b      	sub	sp, #44	; 0x2c
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ad6e:	2380      	movs	r3, #128	; 0x80
 800ad70:	617b      	str	r3, [r7, #20]
    return event;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	461c      	mov	r4, r3
 800ad76:	f107 0314 	add.w	r3, r7, #20
 800ad7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad82:	e054      	b.n	800ae2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad92:	d103      	bne.n	800ad9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ad94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
 800ad9a:	e009      	b.n	800adb0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d006      	beq.n	800adb0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <osMessageGet+0x5c>
      ticks = 1;
 800adac:	2301      	movs	r3, #1
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800adb0:	f7ff fd88 	bl	800a8c4 <inHandlerMode>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d01c      	beq.n	800adf4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800adba:	f107 0220 	add.w	r2, r7, #32
 800adbe:	f107 0314 	add.w	r3, r7, #20
 800adc2:	3304      	adds	r3, #4
 800adc4:	4619      	mov	r1, r3
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f001 fa84 	bl	800c2d4 <xQueueReceiveFromISR>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b01      	cmp	r3, #1
 800add0:	d102      	bne.n	800add8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800add2:	2310      	movs	r3, #16
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	e001      	b.n	800addc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01d      	beq.n	800ae1e <osMessageGet+0xca>
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <osMessageGet+0xe4>)
 800ade4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	e014      	b.n	800ae1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800adf4:	f107 0314 	add.w	r3, r7, #20
 800adf8:	3304      	adds	r3, #4
 800adfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfc:	4619      	mov	r1, r3
 800adfe:	68b8      	ldr	r0, [r7, #8]
 800ae00:	f001 f884 	bl	800bf0c <xQueueReceive>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d102      	bne.n	800ae10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ae0a:	2310      	movs	r3, #16
 800ae0c:	617b      	str	r3, [r7, #20]
 800ae0e:	e006      	b.n	800ae1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <osMessageGet+0xc6>
 800ae16:	2300      	movs	r3, #0
 800ae18:	e000      	b.n	800ae1c <osMessageGet+0xc8>
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	461c      	mov	r4, r3
 800ae22:	f107 0314 	add.w	r3, r7, #20
 800ae26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	372c      	adds	r7, #44	; 0x2c
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd90      	pop	{r4, r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08a      	sub	sp, #40	; 0x28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae48:	f001 fe0a 	bl	800ca60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae4c:	4b57      	ldr	r3, [pc, #348]	; (800afac <pvPortMalloc+0x170>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae54:	f000 f90c 	bl	800b070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae58:	4b55      	ldr	r3, [pc, #340]	; (800afb0 <pvPortMalloc+0x174>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 808c 	bne.w	800af7e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01c      	beq.n	800aea6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ae6c:	2208      	movs	r2, #8
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4413      	add	r3, r2
 800ae72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d013      	beq.n	800aea6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f023 0307 	bic.w	r3, r3, #7
 800ae84:	3308      	adds	r3, #8
 800ae86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d009      	beq.n	800aea6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e7fe      	b.n	800aea4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d068      	beq.n	800af7e <pvPortMalloc+0x142>
 800aeac:	4b41      	ldr	r3, [pc, #260]	; (800afb4 <pvPortMalloc+0x178>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d863      	bhi.n	800af7e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aeb6:	4b40      	ldr	r3, [pc, #256]	; (800afb8 <pvPortMalloc+0x17c>)
 800aeb8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aeba:	4b3f      	ldr	r3, [pc, #252]	; (800afb8 <pvPortMalloc+0x17c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aec0:	e004      	b.n	800aecc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d903      	bls.n	800aede <pvPortMalloc+0xa2>
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1f1      	bne.n	800aec2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aede:	4b33      	ldr	r3, [pc, #204]	; (800afac <pvPortMalloc+0x170>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d04a      	beq.n	800af7e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2208      	movs	r2, #8
 800aeee:	4413      	add	r3, r2
 800aef0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	1ad2      	subs	r2, r2, r3
 800af02:	2308      	movs	r3, #8
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	429a      	cmp	r2, r3
 800af08:	d91e      	bls.n	800af48 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4413      	add	r3, r2
 800af10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d009      	beq.n	800af30 <pvPortMalloc+0xf4>
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	e7fe      	b.n	800af2e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	1ad2      	subs	r2, r2, r3
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af42:	69b8      	ldr	r0, [r7, #24]
 800af44:	f000 f8f6 	bl	800b134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af48:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <pvPortMalloc+0x178>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	4a18      	ldr	r2, [pc, #96]	; (800afb4 <pvPortMalloc+0x178>)
 800af54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af56:	4b17      	ldr	r3, [pc, #92]	; (800afb4 <pvPortMalloc+0x178>)
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	4b18      	ldr	r3, [pc, #96]	; (800afbc <pvPortMalloc+0x180>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d203      	bcs.n	800af6a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af62:	4b14      	ldr	r3, [pc, #80]	; (800afb4 <pvPortMalloc+0x178>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a15      	ldr	r2, [pc, #84]	; (800afbc <pvPortMalloc+0x180>)
 800af68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <pvPortMalloc+0x174>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	431a      	orrs	r2, r3
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af7e:	f001 fd7d 	bl	800ca7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d009      	beq.n	800afa0 <pvPortMalloc+0x164>
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e7fe      	b.n	800af9e <pvPortMalloc+0x162>
	return pvReturn;
 800afa0:	69fb      	ldr	r3, [r7, #28]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3728      	adds	r7, #40	; 0x28
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	24004690 	.word	0x24004690
 800afb0:	2400469c 	.word	0x2400469c
 800afb4:	24004694 	.word	0x24004694
 800afb8:	24004688 	.word	0x24004688
 800afbc:	24004698 	.word	0x24004698

0800afc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d046      	beq.n	800b060 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afd2:	2308      	movs	r3, #8
 800afd4:	425b      	negs	r3, r3
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4413      	add	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	4b20      	ldr	r3, [pc, #128]	; (800b068 <vPortFree+0xa8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4013      	ands	r3, r2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d109      	bne.n	800b002 <vPortFree+0x42>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d009      	beq.n	800b01e <vPortFree+0x5e>
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	60bb      	str	r3, [r7, #8]
 800b01c:	e7fe      	b.n	800b01c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	4b11      	ldr	r3, [pc, #68]	; (800b068 <vPortFree+0xa8>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4013      	ands	r3, r2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d019      	beq.n	800b060 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d115      	bne.n	800b060 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <vPortFree+0xa8>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	43db      	mvns	r3, r3
 800b03e:	401a      	ands	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b044:	f001 fd0c 	bl	800ca60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	4b07      	ldr	r3, [pc, #28]	; (800b06c <vPortFree+0xac>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4413      	add	r3, r2
 800b052:	4a06      	ldr	r2, [pc, #24]	; (800b06c <vPortFree+0xac>)
 800b054:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b056:	6938      	ldr	r0, [r7, #16]
 800b058:	f000 f86c 	bl	800b134 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b05c:	f001 fd0e 	bl	800ca7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b060:	bf00      	nop
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	2400469c 	.word	0x2400469c
 800b06c:	24004694 	.word	0x24004694

0800b070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b076:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b07a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b07c:	4b27      	ldr	r3, [pc, #156]	; (800b11c <prvHeapInit+0xac>)
 800b07e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00c      	beq.n	800b0a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3307      	adds	r3, #7
 800b08e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f023 0307 	bic.w	r3, r3, #7
 800b096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	4a1f      	ldr	r2, [pc, #124]	; (800b11c <prvHeapInit+0xac>)
 800b0a0:	4413      	add	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0a8:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <prvHeapInit+0xb0>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0ae:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <prvHeapInit+0xb0>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0bc:	2208      	movs	r2, #8
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	1a9b      	subs	r3, r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0307 	bic.w	r3, r3, #7
 800b0ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4a15      	ldr	r2, [pc, #84]	; (800b124 <prvHeapInit+0xb4>)
 800b0d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0d2:	4b14      	ldr	r3, [pc, #80]	; (800b124 <prvHeapInit+0xb4>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0da:	4b12      	ldr	r3, [pc, #72]	; (800b124 <prvHeapInit+0xb4>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	1ad2      	subs	r2, r2, r3
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0f0:	4b0c      	ldr	r3, [pc, #48]	; (800b124 <prvHeapInit+0xb4>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4a0a      	ldr	r2, [pc, #40]	; (800b128 <prvHeapInit+0xb8>)
 800b0fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4a09      	ldr	r2, [pc, #36]	; (800b12c <prvHeapInit+0xbc>)
 800b106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b108:	4b09      	ldr	r3, [pc, #36]	; (800b130 <prvHeapInit+0xc0>)
 800b10a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b10e:	601a      	str	r2, [r3, #0]
}
 800b110:	bf00      	nop
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	24000a88 	.word	0x24000a88
 800b120:	24004688 	.word	0x24004688
 800b124:	24004690 	.word	0x24004690
 800b128:	24004698 	.word	0x24004698
 800b12c:	24004694 	.word	0x24004694
 800b130:	2400469c 	.word	0x2400469c

0800b134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b13c:	4b28      	ldr	r3, [pc, #160]	; (800b1e0 <prvInsertBlockIntoFreeList+0xac>)
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e002      	b.n	800b148 <prvInsertBlockIntoFreeList+0x14>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d8f7      	bhi.n	800b142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	d108      	bne.n	800b176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	441a      	add	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d118      	bne.n	800b1bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	429a      	cmp	r2, r3
 800b194:	d00d      	beq.n	800b1b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	441a      	add	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	e008      	b.n	800b1c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1b2:	4b0c      	ldr	r3, [pc, #48]	; (800b1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	e003      	b.n	800b1c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d002      	beq.n	800b1d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	24004688 	.word	0x24004688
 800b1e4:	24004690 	.word	0x24004690

0800b1e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f103 0208 	add.w	r2, r3, #8
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b200:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f103 0208 	add.w	r2, r3, #8
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f103 0208 	add.w	r2, r3, #8
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b236:	bf00      	nop
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b242:	b480      	push	{r7}
 800b244:	b085      	sub	sp, #20
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	601a      	str	r2, [r3, #0]
}
 800b27e:	bf00      	nop
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b28a:	b480      	push	{r7}
 800b28c:	b085      	sub	sp, #20
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2a0:	d103      	bne.n	800b2aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e00c      	b.n	800b2c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e002      	b.n	800b2b8 <vListInsert+0x2e>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d2f6      	bcs.n	800b2b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	601a      	str	r2, [r3, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	6892      	ldr	r2, [r2, #8]
 800b312:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	6852      	ldr	r2, [r2, #4]
 800b31c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	429a      	cmp	r2, r3
 800b326:	d103      	bne.n	800b330 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	1e5a      	subs	r2, r3, #1
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3b04      	subs	r3, #4
 800b360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3b04      	subs	r3, #4
 800b36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f023 0201 	bic.w	r2, r3, #1
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3b04      	subs	r3, #4
 800b37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b380:	4a0c      	ldr	r2, [pc, #48]	; (800b3b4 <pxPortInitialiseStack+0x64>)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3b14      	subs	r3, #20
 800b38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3b04      	subs	r3, #4
 800b396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f06f 0202 	mvn.w	r2, #2
 800b39e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3b20      	subs	r3, #32
 800b3a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	0800b3b9 	.word	0x0800b3b9

0800b3b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3c2:	4b11      	ldr	r3, [pc, #68]	; (800b408 <prvTaskExitError+0x50>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ca:	d009      	beq.n	800b3e0 <prvTaskExitError+0x28>
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	e7fe      	b.n	800b3de <prvTaskExitError+0x26>
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3f2:	bf00      	nop
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0fc      	beq.n	800b3f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	24000024 	.word	0x24000024
 800b40c:	00000000 	.word	0x00000000

0800b410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <pxCurrentTCBConst2>)
 800b412:	6819      	ldr	r1, [r3, #0]
 800b414:	6808      	ldr	r0, [r1, #0]
 800b416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	f380 8809 	msr	PSP, r0
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	f380 8811 	msr	BASEPRI, r0
 800b42a:	4770      	bx	lr
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst2>:
 800b430:	240046a8 	.word	0x240046a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b438:	4808      	ldr	r0, [pc, #32]	; (800b45c <prvPortStartFirstTask+0x24>)
 800b43a:	6800      	ldr	r0, [r0, #0]
 800b43c:	6800      	ldr	r0, [r0, #0]
 800b43e:	f380 8808 	msr	MSP, r0
 800b442:	f04f 0000 	mov.w	r0, #0
 800b446:	f380 8814 	msr	CONTROL, r0
 800b44a:	b662      	cpsie	i
 800b44c:	b661      	cpsie	f
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	df00      	svc	0
 800b458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b45a:	bf00      	nop
 800b45c:	e000ed08 	.word	0xe000ed08

0800b460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b466:	4b44      	ldr	r3, [pc, #272]	; (800b578 <xPortStartScheduler+0x118>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a44      	ldr	r2, [pc, #272]	; (800b57c <xPortStartScheduler+0x11c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d109      	bne.n	800b484 <xPortStartScheduler+0x24>
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	613b      	str	r3, [r7, #16]
 800b482:	e7fe      	b.n	800b482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b484:	4b3c      	ldr	r3, [pc, #240]	; (800b578 <xPortStartScheduler+0x118>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a3d      	ldr	r2, [pc, #244]	; (800b580 <xPortStartScheduler+0x120>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d109      	bne.n	800b4a2 <xPortStartScheduler+0x42>
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e7fe      	b.n	800b4a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4a2:	4b38      	ldr	r3, [pc, #224]	; (800b584 <xPortStartScheduler+0x124>)
 800b4a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	22ff      	movs	r2, #255	; 0xff
 800b4b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	4b30      	ldr	r3, [pc, #192]	; (800b588 <xPortStartScheduler+0x128>)
 800b4c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4ca:	4b30      	ldr	r3, [pc, #192]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4cc:	2207      	movs	r2, #7
 800b4ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4d0:	e009      	b.n	800b4e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b4d2:	4b2e      	ldr	r3, [pc, #184]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4a2c      	ldr	r2, [pc, #176]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4dc:	78fb      	ldrb	r3, [r7, #3]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4e6:	78fb      	ldrb	r3, [r7, #3]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ee:	2b80      	cmp	r3, #128	; 0x80
 800b4f0:	d0ef      	beq.n	800b4d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4f2:	4b26      	ldr	r3, [pc, #152]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f1c3 0307 	rsb	r3, r3, #7
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d009      	beq.n	800b512 <xPortStartScheduler+0xb2>
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	e7fe      	b.n	800b510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b512:	4b1e      	ldr	r3, [pc, #120]	; (800b58c <xPortStartScheduler+0x12c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	4a1c      	ldr	r2, [pc, #112]	; (800b58c <xPortStartScheduler+0x12c>)
 800b51a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b51c:	4b1b      	ldr	r3, [pc, #108]	; (800b58c <xPortStartScheduler+0x12c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b524:	4a19      	ldr	r2, [pc, #100]	; (800b58c <xPortStartScheduler+0x12c>)
 800b526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b530:	4b17      	ldr	r3, [pc, #92]	; (800b590 <xPortStartScheduler+0x130>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a16      	ldr	r2, [pc, #88]	; (800b590 <xPortStartScheduler+0x130>)
 800b536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b53a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b53c:	4b14      	ldr	r3, [pc, #80]	; (800b590 <xPortStartScheduler+0x130>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a13      	ldr	r2, [pc, #76]	; (800b590 <xPortStartScheduler+0x130>)
 800b542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b548:	f000 f8d6 	bl	800b6f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b54c:	4b11      	ldr	r3, [pc, #68]	; (800b594 <xPortStartScheduler+0x134>)
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b552:	f000 f8f5 	bl	800b740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b556:	4b10      	ldr	r3, [pc, #64]	; (800b598 <xPortStartScheduler+0x138>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a0f      	ldr	r2, [pc, #60]	; (800b598 <xPortStartScheduler+0x138>)
 800b55c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b562:	f7ff ff69 	bl	800b438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b566:	f001 fbff 	bl	800cd68 <vTaskSwitchContext>
	prvTaskExitError();
 800b56a:	f7ff ff25 	bl	800b3b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	e000ed00 	.word	0xe000ed00
 800b57c:	410fc271 	.word	0x410fc271
 800b580:	410fc270 	.word	0x410fc270
 800b584:	e000e400 	.word	0xe000e400
 800b588:	240046a0 	.word	0x240046a0
 800b58c:	240046a4 	.word	0x240046a4
 800b590:	e000ed20 	.word	0xe000ed20
 800b594:	24000024 	.word	0x24000024
 800b598:	e000ef34 	.word	0xe000ef34

0800b59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5b4:	4b0e      	ldr	r3, [pc, #56]	; (800b5f0 <vPortEnterCritical+0x54>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	4a0d      	ldr	r2, [pc, #52]	; (800b5f0 <vPortEnterCritical+0x54>)
 800b5bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <vPortEnterCritical+0x54>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d10e      	bne.n	800b5e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5c6:	4b0b      	ldr	r3, [pc, #44]	; (800b5f4 <vPortEnterCritical+0x58>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d009      	beq.n	800b5e4 <vPortEnterCritical+0x48>
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	603b      	str	r3, [r7, #0]
 800b5e2:	e7fe      	b.n	800b5e2 <vPortEnterCritical+0x46>
	}
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	24000024 	.word	0x24000024
 800b5f4:	e000ed04 	.word	0xe000ed04

0800b5f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <vPortExitCritical+0x4c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d109      	bne.n	800b61a <vPortExitCritical+0x22>
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	607b      	str	r3, [r7, #4]
 800b618:	e7fe      	b.n	800b618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b61a:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <vPortExitCritical+0x4c>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3b01      	subs	r3, #1
 800b620:	4a08      	ldr	r2, [pc, #32]	; (800b644 <vPortExitCritical+0x4c>)
 800b622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <vPortExitCritical+0x4c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d104      	bne.n	800b636 <vPortExitCritical+0x3e>
 800b62c:	2300      	movs	r3, #0
 800b62e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b636:	bf00      	nop
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	24000024 	.word	0x24000024
	...

0800b650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b650:	f3ef 8009 	mrs	r0, PSP
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <pxCurrentTCBConst>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	f01e 0f10 	tst.w	lr, #16
 800b660:	bf08      	it	eq
 800b662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66a:	6010      	str	r0, [r2, #0]
 800b66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b674:	f380 8811 	msr	BASEPRI, r0
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f001 fb72 	bl	800cd68 <vTaskSwitchContext>
 800b684:	f04f 0000 	mov.w	r0, #0
 800b688:	f380 8811 	msr	BASEPRI, r0
 800b68c:	bc09      	pop	{r0, r3}
 800b68e:	6819      	ldr	r1, [r3, #0]
 800b690:	6808      	ldr	r0, [r1, #0]
 800b692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b696:	f01e 0f10 	tst.w	lr, #16
 800b69a:	bf08      	it	eq
 800b69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6a0:	f380 8809 	msr	PSP, r0
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	f3af 8000 	nop.w

0800b6b0 <pxCurrentTCBConst>:
 800b6b0:	240046a8 	.word	0x240046a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop

0800b6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6d0:	f001 fa92 	bl	800cbf8 <xTaskIncrementTick>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6da:	4b06      	ldr	r3, [pc, #24]	; (800b6f4 <SysTick_Handler+0x3c>)
 800b6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6ec:	bf00      	nop
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	e000ed04 	.word	0xe000ed04

0800b6f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6fc:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <vPortSetupTimerInterrupt+0x34>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <vPortSetupTimerInterrupt+0x38>)
 800b704:	2200      	movs	r2, #0
 800b706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b708:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <vPortSetupTimerInterrupt+0x3c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a0a      	ldr	r2, [pc, #40]	; (800b738 <vPortSetupTimerInterrupt+0x40>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	099b      	lsrs	r3, r3, #6
 800b714:	4a09      	ldr	r2, [pc, #36]	; (800b73c <vPortSetupTimerInterrupt+0x44>)
 800b716:	3b01      	subs	r3, #1
 800b718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b71a:	4b04      	ldr	r3, [pc, #16]	; (800b72c <vPortSetupTimerInterrupt+0x34>)
 800b71c:	2207      	movs	r2, #7
 800b71e:	601a      	str	r2, [r3, #0]
}
 800b720:	bf00      	nop
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	e000e010 	.word	0xe000e010
 800b730:	e000e018 	.word	0xe000e018
 800b734:	24000000 	.word	0x24000000
 800b738:	10624dd3 	.word	0x10624dd3
 800b73c:	e000e014 	.word	0xe000e014

0800b740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b750 <vPortEnableVFP+0x10>
 800b744:	6801      	ldr	r1, [r0, #0]
 800b746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b74a:	6001      	str	r1, [r0, #0]
 800b74c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b74e:	bf00      	nop
 800b750:	e000ed88 	.word	0xe000ed88

0800b754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b75a:	f3ef 8305 	mrs	r3, IPSR
 800b75e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b0f      	cmp	r3, #15
 800b764:	d913      	bls.n	800b78e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b766:	4a16      	ldr	r2, [pc, #88]	; (800b7c0 <vPortValidateInterruptPriority+0x6c>)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b770:	4b14      	ldr	r3, [pc, #80]	; (800b7c4 <vPortValidateInterruptPriority+0x70>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	7afa      	ldrb	r2, [r7, #11]
 800b776:	429a      	cmp	r2, r3
 800b778:	d209      	bcs.n	800b78e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	607b      	str	r3, [r7, #4]
 800b78c:	e7fe      	b.n	800b78c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <vPortValidateInterruptPriority+0x74>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b796:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <vPortValidateInterruptPriority+0x78>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d909      	bls.n	800b7b2 <vPortValidateInterruptPriority+0x5e>
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	e7fe      	b.n	800b7b0 <vPortValidateInterruptPriority+0x5c>
	}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	e000e3f0 	.word	0xe000e3f0
 800b7c4:	240046a0 	.word	0x240046a0
 800b7c8:	e000ed0c 	.word	0xe000ed0c
 800b7cc:	240046a4 	.word	0x240046a4

0800b7d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d109      	bne.n	800b7f8 <xQueueGenericReset+0x28>
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60bb      	str	r3, [r7, #8]
 800b7f6:	e7fe      	b.n	800b7f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b7f8:	f7ff fed0 	bl	800b59c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b804:	68f9      	ldr	r1, [r7, #12]
 800b806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b808:	fb01 f303 	mul.w	r3, r1, r3
 800b80c:	441a      	add	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b828:	3b01      	subs	r3, #1
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b82e:	fb01 f303 	mul.w	r3, r1, r3
 800b832:	441a      	add	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	22ff      	movs	r2, #255	; 0xff
 800b83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	22ff      	movs	r2, #255	; 0xff
 800b844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d114      	bne.n	800b878 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d01a      	beq.n	800b88c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3310      	adds	r3, #16
 800b85a:	4618      	mov	r0, r3
 800b85c:	f001 fb02 	bl	800ce64 <xTaskRemoveFromEventList>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d012      	beq.n	800b88c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b866:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <xQueueGenericReset+0xcc>)
 800b868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	e009      	b.n	800b88c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	3310      	adds	r3, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff fcb3 	bl	800b1e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3324      	adds	r3, #36	; 0x24
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff fcae 	bl	800b1e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b88c:	f7ff feb4 	bl	800b5f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b890:	2301      	movs	r3, #1
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	e000ed04 	.word	0xe000ed04

0800b8a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08e      	sub	sp, #56	; 0x38
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d109      	bne.n	800b8c8 <xQueueGenericCreateStatic+0x28>
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8c6:	e7fe      	b.n	800b8c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d109      	bne.n	800b8e2 <xQueueGenericCreateStatic+0x42>
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e0:	e7fe      	b.n	800b8e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <xQueueGenericCreateStatic+0x4e>
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <xQueueGenericCreateStatic+0x52>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e000      	b.n	800b8f4 <xQueueGenericCreateStatic+0x54>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d109      	bne.n	800b90c <xQueueGenericCreateStatic+0x6c>
 800b8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	623b      	str	r3, [r7, #32]
 800b90a:	e7fe      	b.n	800b90a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <xQueueGenericCreateStatic+0x78>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <xQueueGenericCreateStatic+0x7c>
 800b918:	2301      	movs	r3, #1
 800b91a:	e000      	b.n	800b91e <xQueueGenericCreateStatic+0x7e>
 800b91c:	2300      	movs	r3, #0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d109      	bne.n	800b936 <xQueueGenericCreateStatic+0x96>
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	e7fe      	b.n	800b934 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b936:	2348      	movs	r3, #72	; 0x48
 800b938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b48      	cmp	r3, #72	; 0x48
 800b93e:	d009      	beq.n	800b954 <xQueueGenericCreateStatic+0xb4>
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	61bb      	str	r3, [r7, #24]
 800b952:	e7fe      	b.n	800b952 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b954:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00d      	beq.n	800b97c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	2201      	movs	r2, #1
 800b964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b968:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4613      	mov	r3, r2
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 f844 	bl	800ba04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b97e:	4618      	mov	r0, r3
 800b980:	3730      	adds	r7, #48	; 0x30
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b986:	b580      	push	{r7, lr}
 800b988:	b08a      	sub	sp, #40	; 0x28
 800b98a:	af02      	add	r7, sp, #8
 800b98c:	60f8      	str	r0, [r7, #12]
 800b98e:	60b9      	str	r1, [r7, #8]
 800b990:	4613      	mov	r3, r2
 800b992:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d109      	bne.n	800b9ae <xQueueGenericCreate+0x28>
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	e7fe      	b.n	800b9ac <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d102      	bne.n	800b9ba <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	61fb      	str	r3, [r7, #28]
 800b9b8:	e004      	b.n	800b9c4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	fb02 f303 	mul.w	r3, r2, r3
 800b9c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	3348      	adds	r3, #72	; 0x48
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fa37 	bl	800ae3c <pvPortMalloc>
 800b9ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d011      	beq.n	800b9fa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	3348      	adds	r3, #72	; 0x48
 800b9de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9e8:	79fa      	ldrb	r2, [r7, #7]
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 f805 	bl	800ba04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9fa:	69bb      	ldr	r3, [r7, #24]
	}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e002      	b.n	800ba26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba32:	2101      	movs	r1, #1
 800ba34:	69b8      	ldr	r0, [r7, #24]
 800ba36:	f7ff fecb 	bl	800b7d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b082      	sub	sp, #8
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00e      	beq.n	800ba6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba62:	2300      	movs	r3, #0
 800ba64:	2200      	movs	r2, #0
 800ba66:	2100      	movs	r1, #0
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f837 	bl	800badc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba6e:	bf00      	nop
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba80:	2301      	movs	r3, #1
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	6939      	ldr	r1, [r7, #16]
 800ba8e:	6978      	ldr	r0, [r7, #20]
 800ba90:	f7ff ff79 	bl	800b986 <xQueueGenericCreate>
 800ba94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7ff ffd3 	bl	800ba42 <prvInitialiseMutex>

		return xNewQueue;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b088      	sub	sp, #32
 800baaa:	af02      	add	r7, sp, #8
 800baac:	4603      	mov	r3, r0
 800baae:	6039      	str	r1, [r7, #0]
 800bab0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bab2:	2301      	movs	r3, #1
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	2300      	movs	r3, #0
 800bab8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2200      	movs	r2, #0
 800bac2:	6939      	ldr	r1, [r7, #16]
 800bac4:	6978      	ldr	r0, [r7, #20]
 800bac6:	f7ff feeb 	bl	800b8a0 <xQueueGenericCreateStatic>
 800baca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7ff ffb8 	bl	800ba42 <prvInitialiseMutex>

		return xNewQueue;
 800bad2:	68fb      	ldr	r3, [r7, #12]
	}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3718      	adds	r7, #24
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08e      	sub	sp, #56	; 0x38
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800baea:	2300      	movs	r3, #0
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d109      	bne.n	800bb0c <xQueueGenericSend+0x30>
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb0a:	e7fe      	b.n	800bb0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d103      	bne.n	800bb1a <xQueueGenericSend+0x3e>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <xQueueGenericSend+0x42>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e000      	b.n	800bb20 <xQueueGenericSend+0x44>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d109      	bne.n	800bb38 <xQueueGenericSend+0x5c>
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	627b      	str	r3, [r7, #36]	; 0x24
 800bb36:	e7fe      	b.n	800bb36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d103      	bne.n	800bb46 <xQueueGenericSend+0x6a>
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d101      	bne.n	800bb4a <xQueueGenericSend+0x6e>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <xQueueGenericSend+0x70>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d109      	bne.n	800bb64 <xQueueGenericSend+0x88>
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	623b      	str	r3, [r7, #32]
 800bb62:	e7fe      	b.n	800bb62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb64:	f001 fb34 	bl	800d1d0 <xTaskGetSchedulerState>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d102      	bne.n	800bb74 <xQueueGenericSend+0x98>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <xQueueGenericSend+0x9c>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e000      	b.n	800bb7a <xQueueGenericSend+0x9e>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d109      	bne.n	800bb92 <xQueueGenericSend+0xb6>
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	61fb      	str	r3, [r7, #28]
 800bb90:	e7fe      	b.n	800bb90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb92:	f7ff fd03 	bl	800b59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d302      	bcc.n	800bba8 <xQueueGenericSend+0xcc>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d129      	bne.n	800bbfc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbae:	f000 fc26 	bl	800c3fe <prvCopyDataToQueue>
 800bbb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d010      	beq.n	800bbde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	3324      	adds	r3, #36	; 0x24
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f001 f94f 	bl	800ce64 <xTaskRemoveFromEventList>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d013      	beq.n	800bbf4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbcc:	4b3f      	ldr	r3, [pc, #252]	; (800bccc <xQueueGenericSend+0x1f0>)
 800bbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	e00a      	b.n	800bbf4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d007      	beq.n	800bbf4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bbe4:	4b39      	ldr	r3, [pc, #228]	; (800bccc <xQueueGenericSend+0x1f0>)
 800bbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbea:	601a      	str	r2, [r3, #0]
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bbf4:	f7ff fd00 	bl	800b5f8 <vPortExitCritical>
				return pdPASS;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e063      	b.n	800bcc4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d103      	bne.n	800bc0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc02:	f7ff fcf9 	bl	800b5f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e05c      	b.n	800bcc4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d106      	bne.n	800bc1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	4618      	mov	r0, r3
 800bc16:	f001 f987 	bl	800cf28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc1e:	f7ff fceb 	bl	800b5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc22:	f000 ff1d 	bl	800ca60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc26:	f7ff fcb9 	bl	800b59c <vPortEnterCritical>
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc30:	b25b      	sxtb	r3, r3
 800bc32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc36:	d103      	bne.n	800bc40 <xQueueGenericSend+0x164>
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc46:	b25b      	sxtb	r3, r3
 800bc48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc4c:	d103      	bne.n	800bc56 <xQueueGenericSend+0x17a>
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc56:	f7ff fccf 	bl	800b5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc5a:	1d3a      	adds	r2, r7, #4
 800bc5c:	f107 0314 	add.w	r3, r7, #20
 800bc60:	4611      	mov	r1, r2
 800bc62:	4618      	mov	r0, r3
 800bc64:	f001 f976 	bl	800cf54 <xTaskCheckForTimeOut>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d124      	bne.n	800bcb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc70:	f000 fcbd 	bl	800c5ee <prvIsQueueFull>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d018      	beq.n	800bcac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	3310      	adds	r3, #16
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 f8ca 	bl	800ce1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc8a:	f000 fc48 	bl	800c51e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc8e:	f000 fef5 	bl	800ca7c <xTaskResumeAll>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f47f af7c 	bne.w	800bb92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <xQueueGenericSend+0x1f0>)
 800bc9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	e772      	b.n	800bb92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bcac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcae:	f000 fc36 	bl	800c51e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcb2:	f000 fee3 	bl	800ca7c <xTaskResumeAll>
 800bcb6:	e76c      	b.n	800bb92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bcb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcba:	f000 fc30 	bl	800c51e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcbe:	f000 fedd 	bl	800ca7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bcc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3738      	adds	r7, #56	; 0x38
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	e000ed04 	.word	0xe000ed04

0800bcd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d109      	bne.n	800bcfc <xQueueGenericSendFromISR+0x2c>
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfa:	e7fe      	b.n	800bcfa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <xQueueGenericSendFromISR+0x3a>
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <xQueueGenericSendFromISR+0x3e>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e000      	b.n	800bd10 <xQueueGenericSendFromISR+0x40>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d109      	bne.n	800bd28 <xQueueGenericSendFromISR+0x58>
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	e7fe      	b.n	800bd26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d103      	bne.n	800bd36 <xQueueGenericSendFromISR+0x66>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <xQueueGenericSendFromISR+0x6a>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <xQueueGenericSendFromISR+0x6c>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d109      	bne.n	800bd54 <xQueueGenericSendFromISR+0x84>
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	61fb      	str	r3, [r7, #28]
 800bd52:	e7fe      	b.n	800bd52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd54:	f7ff fcfe 	bl	800b754 <vPortValidateInterruptPriority>
	__asm volatile
 800bd58:	f3ef 8211 	mrs	r2, BASEPRI
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	61ba      	str	r2, [r7, #24]
 800bd6e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d302      	bcc.n	800bd86 <xQueueGenericSendFromISR+0xb6>
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d12c      	bne.n	800bde0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd96:	f000 fb32 	bl	800c3fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bd9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bda2:	d112      	bne.n	800bdca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d016      	beq.n	800bdda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	3324      	adds	r3, #36	; 0x24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 f857 	bl	800ce64 <xTaskRemoveFromEventList>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00e      	beq.n	800bdda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00b      	beq.n	800bdda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	e007      	b.n	800bdda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdce:	3301      	adds	r3, #1
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	b25a      	sxtb	r2, r3
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bdda:	2301      	movs	r3, #1
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bdde:	e001      	b.n	800bde4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	637b      	str	r3, [r7, #52]	; 0x34
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3738      	adds	r7, #56	; 0x38
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08e      	sub	sp, #56	; 0x38
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d109      	bne.n	800be20 <xQueueGiveFromISR+0x28>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	623b      	str	r3, [r7, #32]
 800be1e:	e7fe      	b.n	800be1e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	d009      	beq.n	800be3c <xQueueGiveFromISR+0x44>
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	61fb      	str	r3, [r7, #28]
 800be3a:	e7fe      	b.n	800be3a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d103      	bne.n	800be4c <xQueueGiveFromISR+0x54>
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <xQueueGiveFromISR+0x58>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <xQueueGiveFromISR+0x5a>
 800be50:	2300      	movs	r3, #0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d109      	bne.n	800be6a <xQueueGiveFromISR+0x72>
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	61bb      	str	r3, [r7, #24]
 800be68:	e7fe      	b.n	800be68 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be6a:	f7ff fc73 	bl	800b754 <vPortValidateInterruptPriority>
	__asm volatile
 800be6e:	f3ef 8211 	mrs	r2, BASEPRI
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	617a      	str	r2, [r7, #20]
 800be84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800be86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be96:	429a      	cmp	r2, r3
 800be98:	d22b      	bcs.n	800bef2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800beac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beb4:	d112      	bne.n	800bedc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d016      	beq.n	800beec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	3324      	adds	r3, #36	; 0x24
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 ffce 	bl	800ce64 <xTaskRemoveFromEventList>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00e      	beq.n	800beec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00b      	beq.n	800beec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2201      	movs	r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e007      	b.n	800beec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bee0:	3301      	adds	r3, #1
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	b25a      	sxtb	r2, r3
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800beec:	2301      	movs	r3, #1
 800beee:	637b      	str	r3, [r7, #52]	; 0x34
 800bef0:	e001      	b.n	800bef6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	637b      	str	r3, [r7, #52]	; 0x34
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3738      	adds	r7, #56	; 0x38
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08c      	sub	sp, #48	; 0x30
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <xQueueReceive+0x2e>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	623b      	str	r3, [r7, #32]
 800bf38:	e7fe      	b.n	800bf38 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <xQueueReceive+0x3c>
 800bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <xQueueReceive+0x40>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e000      	b.n	800bf4e <xQueueReceive+0x42>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <xQueueReceive+0x5a>
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	e7fe      	b.n	800bf64 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf66:	f001 f933 	bl	800d1d0 <xTaskGetSchedulerState>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <xQueueReceive+0x6a>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <xQueueReceive+0x6e>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <xQueueReceive+0x70>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d109      	bne.n	800bf94 <xQueueReceive+0x88>
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	e7fe      	b.n	800bf92 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf94:	f7ff fb02 	bl	800b59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01f      	beq.n	800bfe4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa8:	f000 fa93 	bl	800c4d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	1e5a      	subs	r2, r3, #1
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00f      	beq.n	800bfdc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	3310      	adds	r3, #16
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 ff4f 	bl	800ce64 <xTaskRemoveFromEventList>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d007      	beq.n	800bfdc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfcc:	4b3c      	ldr	r3, [pc, #240]	; (800c0c0 <xQueueReceive+0x1b4>)
 800bfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfdc:	f7ff fb0c 	bl	800b5f8 <vPortExitCritical>
				return pdPASS;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e069      	b.n	800c0b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfea:	f7ff fb05 	bl	800b5f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfee:	2300      	movs	r3, #0
 800bff0:	e062      	b.n	800c0b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d106      	bne.n	800c006 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bff8:	f107 0310 	add.w	r3, r7, #16
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 ff93 	bl	800cf28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c002:	2301      	movs	r3, #1
 800c004:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c006:	f7ff faf7 	bl	800b5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c00a:	f000 fd29 	bl	800ca60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c00e:	f7ff fac5 	bl	800b59c <vPortEnterCritical>
 800c012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c018:	b25b      	sxtb	r3, r3
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c01e:	d103      	bne.n	800c028 <xQueueReceive+0x11c>
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c02e:	b25b      	sxtb	r3, r3
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c034:	d103      	bne.n	800c03e <xQueueReceive+0x132>
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c03e:	f7ff fadb 	bl	800b5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c042:	1d3a      	adds	r2, r7, #4
 800c044:	f107 0310 	add.w	r3, r7, #16
 800c048:	4611      	mov	r1, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 ff82 	bl	800cf54 <xTaskCheckForTimeOut>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d123      	bne.n	800c09e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c058:	f000 fab3 	bl	800c5c2 <prvIsQueueEmpty>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d017      	beq.n	800c092 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	3324      	adds	r3, #36	; 0x24
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4611      	mov	r1, r2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 fed6 	bl	800ce1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c072:	f000 fa54 	bl	800c51e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c076:	f000 fd01 	bl	800ca7c <xTaskResumeAll>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d189      	bne.n	800bf94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c080:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <xQueueReceive+0x1b4>)
 800c082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	e780      	b.n	800bf94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c094:	f000 fa43 	bl	800c51e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c098:	f000 fcf0 	bl	800ca7c <xTaskResumeAll>
 800c09c:	e77a      	b.n	800bf94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0a0:	f000 fa3d 	bl	800c51e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0a4:	f000 fcea 	bl	800ca7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0aa:	f000 fa8a 	bl	800c5c2 <prvIsQueueEmpty>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f43f af6f 	beq.w	800bf94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3730      	adds	r7, #48	; 0x30
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	e000ed04 	.word	0xe000ed04

0800c0c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08e      	sub	sp, #56	; 0x38
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d109      	bne.n	800c0f4 <xQueueSemaphoreTake+0x30>
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	623b      	str	r3, [r7, #32]
 800c0f2:	e7fe      	b.n	800c0f2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d009      	beq.n	800c110 <xQueueSemaphoreTake+0x4c>
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	61fb      	str	r3, [r7, #28]
 800c10e:	e7fe      	b.n	800c10e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c110:	f001 f85e 	bl	800d1d0 <xTaskGetSchedulerState>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d102      	bne.n	800c120 <xQueueSemaphoreTake+0x5c>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <xQueueSemaphoreTake+0x60>
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <xQueueSemaphoreTake+0x62>
 800c124:	2300      	movs	r3, #0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d109      	bne.n	800c13e <xQueueSemaphoreTake+0x7a>
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	61bb      	str	r3, [r7, #24]
 800c13c:	e7fe      	b.n	800c13c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c13e:	f7ff fa2d 	bl	800b59c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d024      	beq.n	800c198 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	1e5a      	subs	r2, r3, #1
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d104      	bne.n	800c168 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c15e:	f001 f9f1 	bl	800d544 <pvTaskIncrementMutexHeldCount>
 800c162:	4602      	mov	r2, r0
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00f      	beq.n	800c190 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	3310      	adds	r3, #16
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fe75 	bl	800ce64 <xTaskRemoveFromEventList>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c180:	4b53      	ldr	r3, [pc, #332]	; (800c2d0 <xQueueSemaphoreTake+0x20c>)
 800c182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c186:	601a      	str	r2, [r3, #0]
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c190:	f7ff fa32 	bl	800b5f8 <vPortExitCritical>
				return pdPASS;
 800c194:	2301      	movs	r3, #1
 800c196:	e096      	b.n	800c2c6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d110      	bne.n	800c1c0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d009      	beq.n	800c1b8 <xQueueSemaphoreTake+0xf4>
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	e7fe      	b.n	800c1b6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c1b8:	f7ff fa1e 	bl	800b5f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e082      	b.n	800c2c6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1c6:	f107 030c 	add.w	r3, r7, #12
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 feac 	bl	800cf28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1d4:	f7ff fa10 	bl	800b5f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1d8:	f000 fc42 	bl	800ca60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1dc:	f7ff f9de 	bl	800b59c <vPortEnterCritical>
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1e6:	b25b      	sxtb	r3, r3
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ec:	d103      	bne.n	800c1f6 <xQueueSemaphoreTake+0x132>
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1fc:	b25b      	sxtb	r3, r3
 800c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c202:	d103      	bne.n	800c20c <xQueueSemaphoreTake+0x148>
 800c204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c206:	2200      	movs	r2, #0
 800c208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c20c:	f7ff f9f4 	bl	800b5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c210:	463a      	mov	r2, r7
 800c212:	f107 030c 	add.w	r3, r7, #12
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fe9b 	bl	800cf54 <xTaskCheckForTimeOut>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d132      	bne.n	800c28a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c226:	f000 f9cc 	bl	800c5c2 <prvIsQueueEmpty>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d026      	beq.n	800c27e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c238:	f7ff f9b0 	bl	800b59c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 ffe3 	bl	800d20c <xTaskPriorityInherit>
 800c246:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c248:	f7ff f9d6 	bl	800b5f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	3324      	adds	r3, #36	; 0x24
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	4611      	mov	r1, r2
 800c254:	4618      	mov	r0, r3
 800c256:	f000 fde1 	bl	800ce1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c25a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c25c:	f000 f95f 	bl	800c51e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c260:	f000 fc0c 	bl	800ca7c <xTaskResumeAll>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	f47f af69 	bne.w	800c13e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c26c:	4b18      	ldr	r3, [pc, #96]	; (800c2d0 <xQueueSemaphoreTake+0x20c>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	e75f      	b.n	800c13e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c27e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c280:	f000 f94d 	bl	800c51e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c284:	f000 fbfa 	bl	800ca7c <xTaskResumeAll>
 800c288:	e759      	b.n	800c13e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c28a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c28c:	f000 f947 	bl	800c51e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c290:	f000 fbf4 	bl	800ca7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c296:	f000 f994 	bl	800c5c2 <prvIsQueueEmpty>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f43f af4e 	beq.w	800c13e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00d      	beq.n	800c2c4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c2a8:	f7ff f978 	bl	800b59c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c2ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ae:	f000 f88e 	bl	800c3ce <prvGetDisinheritPriorityAfterTimeout>
 800c2b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 f8aa 	bl	800d414 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c2c0:	f7ff f99a 	bl	800b5f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3738      	adds	r7, #56	; 0x38
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	e000ed04 	.word	0xe000ed04

0800c2d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08e      	sub	sp, #56	; 0x38
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d109      	bne.n	800c2fe <xQueueReceiveFromISR+0x2a>
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	623b      	str	r3, [r7, #32]
 800c2fc:	e7fe      	b.n	800c2fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d103      	bne.n	800c30c <xQueueReceiveFromISR+0x38>
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <xQueueReceiveFromISR+0x3c>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <xQueueReceiveFromISR+0x3e>
 800c310:	2300      	movs	r3, #0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d109      	bne.n	800c32a <xQueueReceiveFromISR+0x56>
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	e7fe      	b.n	800c328 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c32a:	f7ff fa13 	bl	800b754 <vPortValidateInterruptPriority>
	__asm volatile
 800c32e:	f3ef 8211 	mrs	r2, BASEPRI
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	61ba      	str	r2, [r7, #24]
 800c344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	2b00      	cmp	r3, #0
 800c354:	d02f      	beq.n	800c3b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c364:	f000 f8b5 	bl	800c4d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	1e5a      	subs	r2, r3, #1
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c378:	d112      	bne.n	800c3a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d016      	beq.n	800c3b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	3310      	adds	r3, #16
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fd6c 	bl	800ce64 <xTaskRemoveFromEventList>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00e      	beq.n	800c3b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	e007      	b.n	800c3b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	b25a      	sxtb	r2, r3
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b4:	e001      	b.n	800c3ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3738      	adds	r7, #56	; 0x38
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d006      	beq.n	800c3ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f1c3 0307 	rsb	r3, r3, #7
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e001      	b.n	800c3f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
	}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b086      	sub	sp, #24
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c40a:	2300      	movs	r3, #0
 800c40c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c412:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10d      	bne.n	800c438 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d14d      	bne.n	800c4c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 ff6f 	bl	800d30c <xTaskPriorityDisinherit>
 800c42e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	609a      	str	r2, [r3, #8]
 800c436:	e043      	b.n	800c4c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d119      	bne.n	800c472 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6858      	ldr	r0, [r3, #4]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	461a      	mov	r2, r3
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	f00e fa7c 	bl	801a946 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c456:	441a      	add	r2, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	429a      	cmp	r2, r3
 800c466:	d32b      	bcc.n	800c4c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	605a      	str	r2, [r3, #4]
 800c470:	e026      	b.n	800c4c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	68d8      	ldr	r0, [r3, #12]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	461a      	mov	r2, r3
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	f00e fa62 	bl	801a946 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	68da      	ldr	r2, [r3, #12]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48a:	425b      	negs	r3, r3
 800c48c:	441a      	add	r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d207      	bcs.n	800c4ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	689a      	ldr	r2, [r3, #8]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a6:	425b      	negs	r3, r3
 800c4a8:	441a      	add	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d105      	bne.n	800c4c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d002      	beq.n	800c4c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c4c8:	697b      	ldr	r3, [r7, #20]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d018      	beq.n	800c516 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68da      	ldr	r2, [r3, #12]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ec:	441a      	add	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d303      	bcc.n	800c506 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68d9      	ldr	r1, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50e:	461a      	mov	r2, r3
 800c510:	6838      	ldr	r0, [r7, #0]
 800c512:	f00e fa18 	bl	801a946 <memcpy>
	}
}
 800c516:	bf00      	nop
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c526:	f7ff f839 	bl	800b59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c530:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c532:	e011      	b.n	800c558 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d012      	beq.n	800c562 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3324      	adds	r3, #36	; 0x24
 800c540:	4618      	mov	r0, r3
 800c542:	f000 fc8f 	bl	800ce64 <xTaskRemoveFromEventList>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c54c:	f000 fd62 	bl	800d014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	3b01      	subs	r3, #1
 800c554:	b2db      	uxtb	r3, r3
 800c556:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dce9      	bgt.n	800c534 <prvUnlockQueue+0x16>
 800c560:	e000      	b.n	800c564 <prvUnlockQueue+0x46>
					break;
 800c562:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	22ff      	movs	r2, #255	; 0xff
 800c568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c56c:	f7ff f844 	bl	800b5f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c570:	f7ff f814 	bl	800b59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c57a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c57c:	e011      	b.n	800c5a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d012      	beq.n	800c5ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3310      	adds	r3, #16
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fc6a 	bl	800ce64 <xTaskRemoveFromEventList>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c596:	f000 fd3d 	bl	800d014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dce9      	bgt.n	800c57e <prvUnlockQueue+0x60>
 800c5aa:	e000      	b.n	800c5ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c5ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	22ff      	movs	r2, #255	; 0xff
 800c5b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c5b6:	f7ff f81f 	bl	800b5f8 <vPortExitCritical>
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5ca:	f7fe ffe7 	bl	800b59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d102      	bne.n	800c5dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	60fb      	str	r3, [r7, #12]
 800c5da:	e001      	b.n	800c5e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5e0:	f7ff f80a 	bl	800b5f8 <vPortExitCritical>

	return xReturn;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5f6:	f7fe ffd1 	bl	800b59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c602:	429a      	cmp	r2, r3
 800c604:	d102      	bne.n	800c60c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c606:	2301      	movs	r3, #1
 800c608:	60fb      	str	r3, [r7, #12]
 800c60a:	e001      	b.n	800c610 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c60c:	2300      	movs	r3, #0
 800c60e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c610:	f7fe fff2 	bl	800b5f8 <vPortExitCritical>

	return xReturn;
 800c614:	68fb      	ldr	r3, [r7, #12]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b08e      	sub	sp, #56	; 0x38
 800c622:	af04      	add	r7, sp, #16
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	607a      	str	r2, [r7, #4]
 800c62a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d109      	bne.n	800c646 <xTaskCreateStatic+0x28>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	623b      	str	r3, [r7, #32]
 800c644:	e7fe      	b.n	800c644 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d109      	bne.n	800c660 <xTaskCreateStatic+0x42>
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	61fb      	str	r3, [r7, #28]
 800c65e:	e7fe      	b.n	800c65e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c660:	2354      	movs	r3, #84	; 0x54
 800c662:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2b54      	cmp	r3, #84	; 0x54
 800c668:	d009      	beq.n	800c67e <xTaskCreateStatic+0x60>
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	61bb      	str	r3, [r7, #24]
 800c67c:	e7fe      	b.n	800c67c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c67e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01e      	beq.n	800c6c4 <xTaskCreateStatic+0xa6>
 800c686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01b      	beq.n	800c6c4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c694:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c698:	2202      	movs	r2, #2
 800c69a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c69e:	2300      	movs	r3, #0
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	9302      	str	r3, [sp, #8]
 800c6a6:	f107 0314 	add.w	r3, r7, #20
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 f850 	bl	800c75c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6be:	f000 f8d3 	bl	800c868 <prvAddNewTaskToReadyList>
 800c6c2:	e001      	b.n	800c6c8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6c8:	697b      	ldr	r3, [r7, #20]
	}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3728      	adds	r7, #40	; 0x28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b08c      	sub	sp, #48	; 0x30
 800c6d6:	af04      	add	r7, sp, #16
 800c6d8:	60f8      	str	r0, [r7, #12]
 800c6da:	60b9      	str	r1, [r7, #8]
 800c6dc:	603b      	str	r3, [r7, #0]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6e2:	88fb      	ldrh	r3, [r7, #6]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe fba8 	bl	800ae3c <pvPortMalloc>
 800c6ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00e      	beq.n	800c712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6f4:	2054      	movs	r0, #84	; 0x54
 800c6f6:	f7fe fba1 	bl	800ae3c <pvPortMalloc>
 800c6fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	631a      	str	r2, [r3, #48]	; 0x30
 800c708:	e005      	b.n	800c716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c70a:	6978      	ldr	r0, [r7, #20]
 800c70c:	f7fe fc58 	bl	800afc0 <vPortFree>
 800c710:	e001      	b.n	800c716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d017      	beq.n	800c74c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c724:	88fa      	ldrh	r2, [r7, #6]
 800c726:	2300      	movs	r3, #0
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	68b9      	ldr	r1, [r7, #8]
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f000 f80e 	bl	800c75c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c740:	69f8      	ldr	r0, [r7, #28]
 800c742:	f000 f891 	bl	800c868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c746:	2301      	movs	r3, #1
 800c748:	61bb      	str	r3, [r7, #24]
 800c74a:	e002      	b.n	800c752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c74c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c752:	69bb      	ldr	r3, [r7, #24]
	}
 800c754:	4618      	mov	r0, r3
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c774:	440b      	add	r3, r1
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	f023 0307 	bic.w	r3, r3, #7
 800c782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d009      	beq.n	800c7a2 <prvInitialiseNewTask+0x46>
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	e7fe      	b.n	800c7a0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d01f      	beq.n	800c7e8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61fb      	str	r3, [r7, #28]
 800c7ac:	e012      	b.n	800c7d4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	7819      	ldrb	r1, [r3, #0]
 800c7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	3334      	adds	r3, #52	; 0x34
 800c7be:	460a      	mov	r2, r1
 800c7c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	61fb      	str	r3, [r7, #28]
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	2b0f      	cmp	r3, #15
 800c7d8:	d9e9      	bls.n	800c7ae <prvInitialiseNewTask+0x52>
 800c7da:	e000      	b.n	800c7de <prvInitialiseNewTask+0x82>
			{
				break;
 800c7dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7e6:	e003      	b.n	800c7f0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	2b06      	cmp	r3, #6
 800c7f4:	d901      	bls.n	800c7fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7f6:	2306      	movs	r3, #6
 800c7f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c804:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	2200      	movs	r2, #0
 800c80a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	3304      	adds	r3, #4
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fd09 	bl	800b228 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	3318      	adds	r3, #24
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fd04 	bl	800b228 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c824:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	f1c3 0207 	rsb	r2, r3, #7
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c834:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	2200      	movs	r2, #0
 800c83a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	68f9      	ldr	r1, [r7, #12]
 800c848:	69b8      	ldr	r0, [r7, #24]
 800c84a:	f7fe fd81 	bl	800b350 <pxPortInitialiseStack>
 800c84e:	4602      	mov	r2, r0
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c860:	bf00      	nop
 800c862:	3720      	adds	r7, #32
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c870:	f7fe fe94 	bl	800b59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c874:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <prvAddNewTaskToReadyList+0xb8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3301      	adds	r3, #1
 800c87a:	4a29      	ldr	r2, [pc, #164]	; (800c920 <prvAddNewTaskToReadyList+0xb8>)
 800c87c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c87e:	4b29      	ldr	r3, [pc, #164]	; (800c924 <prvAddNewTaskToReadyList+0xbc>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d109      	bne.n	800c89a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c886:	4a27      	ldr	r2, [pc, #156]	; (800c924 <prvAddNewTaskToReadyList+0xbc>)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c88c:	4b24      	ldr	r3, [pc, #144]	; (800c920 <prvAddNewTaskToReadyList+0xb8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d110      	bne.n	800c8b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c894:	f000 fbe2 	bl	800d05c <prvInitialiseTaskLists>
 800c898:	e00d      	b.n	800c8b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c89a:	4b23      	ldr	r3, [pc, #140]	; (800c928 <prvAddNewTaskToReadyList+0xc0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d109      	bne.n	800c8b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8a2:	4b20      	ldr	r3, [pc, #128]	; (800c924 <prvAddNewTaskToReadyList+0xbc>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d802      	bhi.n	800c8b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8b0:	4a1c      	ldr	r2, [pc, #112]	; (800c924 <prvAddNewTaskToReadyList+0xbc>)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8b6:	4b1d      	ldr	r3, [pc, #116]	; (800c92c <prvAddNewTaskToReadyList+0xc4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	4a1b      	ldr	r2, [pc, #108]	; (800c92c <prvAddNewTaskToReadyList+0xc4>)
 800c8be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	409a      	lsls	r2, r3
 800c8c8:	4b19      	ldr	r3, [pc, #100]	; (800c930 <prvAddNewTaskToReadyList+0xc8>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	4a18      	ldr	r2, [pc, #96]	; (800c930 <prvAddNewTaskToReadyList+0xc8>)
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4a15      	ldr	r2, [pc, #84]	; (800c934 <prvAddNewTaskToReadyList+0xcc>)
 800c8e0:	441a      	add	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	f7fe fcaa 	bl	800b242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8ee:	f7fe fe83 	bl	800b5f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8f2:	4b0d      	ldr	r3, [pc, #52]	; (800c928 <prvAddNewTaskToReadyList+0xc0>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00e      	beq.n	800c918 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8fa:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <prvAddNewTaskToReadyList+0xbc>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	429a      	cmp	r2, r3
 800c906:	d207      	bcs.n	800c918 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c908:	4b0b      	ldr	r3, [pc, #44]	; (800c938 <prvAddNewTaskToReadyList+0xd0>)
 800c90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90e:	601a      	str	r2, [r3, #0]
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	240047a8 	.word	0x240047a8
 800c924:	240046a8 	.word	0x240046a8
 800c928:	240047b4 	.word	0x240047b4
 800c92c:	240047c4 	.word	0x240047c4
 800c930:	240047b0 	.word	0x240047b0
 800c934:	240046ac 	.word	0x240046ac
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d016      	beq.n	800c97c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <vTaskDelay+0x60>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d009      	beq.n	800c96a <vTaskDelay+0x2e>
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60bb      	str	r3, [r7, #8]
 800c968:	e7fe      	b.n	800c968 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c96a:	f000 f879 	bl	800ca60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c96e:	2100      	movs	r1, #0
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fdfb 	bl	800d56c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c976:	f000 f881 	bl	800ca7c <xTaskResumeAll>
 800c97a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d107      	bne.n	800c992 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c982:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <vTaskDelay+0x64>)
 800c984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c992:	bf00      	nop
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	240047d0 	.word	0x240047d0
 800c9a0:	e000ed04 	.word	0xe000ed04

0800c9a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9b2:	463a      	mov	r2, r7
 800c9b4:	1d39      	adds	r1, r7, #4
 800c9b6:	f107 0308 	add.w	r3, r7, #8
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7f3 ff12 	bl	80007e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	9202      	str	r2, [sp, #8]
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	460a      	mov	r2, r1
 800c9d2:	491d      	ldr	r1, [pc, #116]	; (800ca48 <vTaskStartScheduler+0xa4>)
 800c9d4:	481d      	ldr	r0, [pc, #116]	; (800ca4c <vTaskStartScheduler+0xa8>)
 800c9d6:	f7ff fe22 	bl	800c61e <xTaskCreateStatic>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4b1c      	ldr	r3, [pc, #112]	; (800ca50 <vTaskStartScheduler+0xac>)
 800c9de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ca50 <vTaskStartScheduler+0xac>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	617b      	str	r3, [r7, #20]
 800c9ec:	e001      	b.n	800c9f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d115      	bne.n	800ca24 <vTaskStartScheduler+0x80>
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca0a:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <vTaskStartScheduler+0xb0>)
 800ca0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca12:	4b11      	ldr	r3, [pc, #68]	; (800ca58 <vTaskStartScheduler+0xb4>)
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca18:	4b10      	ldr	r3, [pc, #64]	; (800ca5c <vTaskStartScheduler+0xb8>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca1e:	f7fe fd1f 	bl	800b460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca22:	e00d      	b.n	800ca40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca2a:	d109      	bne.n	800ca40 <vTaskStartScheduler+0x9c>
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e7fe      	b.n	800ca3e <vTaskStartScheduler+0x9a>
}
 800ca40:	bf00      	nop
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	0801d430 	.word	0x0801d430
 800ca4c:	0800d02d 	.word	0x0800d02d
 800ca50:	240047cc 	.word	0x240047cc
 800ca54:	240047c8 	.word	0x240047c8
 800ca58:	240047b4 	.word	0x240047b4
 800ca5c:	240047ac 	.word	0x240047ac

0800ca60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca64:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <vTaskSuspendAll+0x18>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	4a03      	ldr	r2, [pc, #12]	; (800ca78 <vTaskSuspendAll+0x18>)
 800ca6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca6e:	bf00      	nop
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	240047d0 	.word	0x240047d0

0800ca7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca8a:	4b41      	ldr	r3, [pc, #260]	; (800cb90 <xTaskResumeAll+0x114>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d109      	bne.n	800caa6 <xTaskResumeAll+0x2a>
 800ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	603b      	str	r3, [r7, #0]
 800caa4:	e7fe      	b.n	800caa4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800caa6:	f7fe fd79 	bl	800b59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800caaa:	4b39      	ldr	r3, [pc, #228]	; (800cb90 <xTaskResumeAll+0x114>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3b01      	subs	r3, #1
 800cab0:	4a37      	ldr	r2, [pc, #220]	; (800cb90 <xTaskResumeAll+0x114>)
 800cab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cab4:	4b36      	ldr	r3, [pc, #216]	; (800cb90 <xTaskResumeAll+0x114>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d161      	bne.n	800cb80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cabc:	4b35      	ldr	r3, [pc, #212]	; (800cb94 <xTaskResumeAll+0x118>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d05d      	beq.n	800cb80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cac4:	e02e      	b.n	800cb24 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac6:	4b34      	ldr	r3, [pc, #208]	; (800cb98 <xTaskResumeAll+0x11c>)
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3318      	adds	r3, #24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe fc12 	bl	800b2fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3304      	adds	r3, #4
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe fc0d 	bl	800b2fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	2201      	movs	r2, #1
 800cae8:	409a      	lsls	r2, r3
 800caea:	4b2c      	ldr	r3, [pc, #176]	; (800cb9c <xTaskResumeAll+0x120>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4313      	orrs	r3, r2
 800caf0:	4a2a      	ldr	r2, [pc, #168]	; (800cb9c <xTaskResumeAll+0x120>)
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4a27      	ldr	r2, [pc, #156]	; (800cba0 <xTaskResumeAll+0x124>)
 800cb02:	441a      	add	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	f7fe fb99 	bl	800b242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb14:	4b23      	ldr	r3, [pc, #140]	; (800cba4 <xTaskResumeAll+0x128>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d302      	bcc.n	800cb24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cb1e:	4b22      	ldr	r3, [pc, #136]	; (800cba8 <xTaskResumeAll+0x12c>)
 800cb20:	2201      	movs	r2, #1
 800cb22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb24:	4b1c      	ldr	r3, [pc, #112]	; (800cb98 <xTaskResumeAll+0x11c>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1cc      	bne.n	800cac6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb32:	f000 fb2d 	bl	800d190 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb36:	4b1d      	ldr	r3, [pc, #116]	; (800cbac <xTaskResumeAll+0x130>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d010      	beq.n	800cb64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb42:	f000 f859 	bl	800cbf8 <xTaskIncrementTick>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d002      	beq.n	800cb52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cb4c:	4b16      	ldr	r3, [pc, #88]	; (800cba8 <xTaskResumeAll+0x12c>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1f1      	bne.n	800cb42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cb5e:	4b13      	ldr	r3, [pc, #76]	; (800cbac <xTaskResumeAll+0x130>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb64:	4b10      	ldr	r3, [pc, #64]	; (800cba8 <xTaskResumeAll+0x12c>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d009      	beq.n	800cb80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb70:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <xTaskResumeAll+0x134>)
 800cb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb80:	f7fe fd3a 	bl	800b5f8 <vPortExitCritical>

	return xAlreadyYielded;
 800cb84:	68bb      	ldr	r3, [r7, #8]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	240047d0 	.word	0x240047d0
 800cb94:	240047a8 	.word	0x240047a8
 800cb98:	24004768 	.word	0x24004768
 800cb9c:	240047b0 	.word	0x240047b0
 800cba0:	240046ac 	.word	0x240046ac
 800cba4:	240046a8 	.word	0x240046a8
 800cba8:	240047bc 	.word	0x240047bc
 800cbac:	240047b8 	.word	0x240047b8
 800cbb0:	e000ed04 	.word	0xe000ed04

0800cbb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbba:	4b05      	ldr	r3, [pc, #20]	; (800cbd0 <xTaskGetTickCount+0x1c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbc0:	687b      	ldr	r3, [r7, #4]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	240047ac 	.word	0x240047ac

0800cbd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbda:	f7fe fdbb 	bl	800b754 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cbde:	2300      	movs	r3, #0
 800cbe0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cbe2:	4b04      	ldr	r3, [pc, #16]	; (800cbf4 <xTaskGetTickCountFromISR+0x20>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbe8:	683b      	ldr	r3, [r7, #0]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	240047ac 	.word	0x240047ac

0800cbf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc02:	4b4e      	ldr	r3, [pc, #312]	; (800cd3c <xTaskIncrementTick+0x144>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f040 8087 	bne.w	800cd1a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc0c:	4b4c      	ldr	r3, [pc, #304]	; (800cd40 <xTaskIncrementTick+0x148>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3301      	adds	r3, #1
 800cc12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc14:	4a4a      	ldr	r2, [pc, #296]	; (800cd40 <xTaskIncrementTick+0x148>)
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d11f      	bne.n	800cc60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc20:	4b48      	ldr	r3, [pc, #288]	; (800cd44 <xTaskIncrementTick+0x14c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d009      	beq.n	800cc3e <xTaskIncrementTick+0x46>
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	e7fe      	b.n	800cc3c <xTaskIncrementTick+0x44>
 800cc3e:	4b41      	ldr	r3, [pc, #260]	; (800cd44 <xTaskIncrementTick+0x14c>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	4b40      	ldr	r3, [pc, #256]	; (800cd48 <xTaskIncrementTick+0x150>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a3e      	ldr	r2, [pc, #248]	; (800cd44 <xTaskIncrementTick+0x14c>)
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	4a3e      	ldr	r2, [pc, #248]	; (800cd48 <xTaskIncrementTick+0x150>)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6013      	str	r3, [r2, #0]
 800cc52:	4b3e      	ldr	r3, [pc, #248]	; (800cd4c <xTaskIncrementTick+0x154>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3301      	adds	r3, #1
 800cc58:	4a3c      	ldr	r2, [pc, #240]	; (800cd4c <xTaskIncrementTick+0x154>)
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	f000 fa98 	bl	800d190 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc60:	4b3b      	ldr	r3, [pc, #236]	; (800cd50 <xTaskIncrementTick+0x158>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d348      	bcc.n	800ccfc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc6a:	4b36      	ldr	r3, [pc, #216]	; (800cd44 <xTaskIncrementTick+0x14c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d104      	bne.n	800cc7e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc74:	4b36      	ldr	r3, [pc, #216]	; (800cd50 <xTaskIncrementTick+0x158>)
 800cc76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc7a:	601a      	str	r2, [r3, #0]
					break;
 800cc7c:	e03e      	b.n	800ccfc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc7e:	4b31      	ldr	r3, [pc, #196]	; (800cd44 <xTaskIncrementTick+0x14c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d203      	bcs.n	800cc9e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc96:	4a2e      	ldr	r2, [pc, #184]	; (800cd50 <xTaskIncrementTick+0x158>)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc9c:	e02e      	b.n	800ccfc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	3304      	adds	r3, #4
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fe fb2a 	bl	800b2fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d004      	beq.n	800ccba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	3318      	adds	r3, #24
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fb21 	bl	800b2fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	409a      	lsls	r2, r3
 800ccc2:	4b24      	ldr	r3, [pc, #144]	; (800cd54 <xTaskIncrementTick+0x15c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	4a22      	ldr	r2, [pc, #136]	; (800cd54 <xTaskIncrementTick+0x15c>)
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4a1f      	ldr	r2, [pc, #124]	; (800cd58 <xTaskIncrementTick+0x160>)
 800ccda:	441a      	add	r2, r3
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	3304      	adds	r3, #4
 800cce0:	4619      	mov	r1, r3
 800cce2:	4610      	mov	r0, r2
 800cce4:	f7fe faad 	bl	800b242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccec:	4b1b      	ldr	r3, [pc, #108]	; (800cd5c <xTaskIncrementTick+0x164>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d3b9      	bcc.n	800cc6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccfa:	e7b6      	b.n	800cc6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ccfc:	4b17      	ldr	r3, [pc, #92]	; (800cd5c <xTaskIncrementTick+0x164>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd02:	4915      	ldr	r1, [pc, #84]	; (800cd58 <xTaskIncrementTick+0x160>)
 800cd04:	4613      	mov	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	440b      	add	r3, r1
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d907      	bls.n	800cd24 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800cd14:	2301      	movs	r3, #1
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	e004      	b.n	800cd24 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd1a:	4b11      	ldr	r3, [pc, #68]	; (800cd60 <xTaskIncrementTick+0x168>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	4a0f      	ldr	r2, [pc, #60]	; (800cd60 <xTaskIncrementTick+0x168>)
 800cd22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd24:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <xTaskIncrementTick+0x16c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd30:	697b      	ldr	r3, [r7, #20]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	240047d0 	.word	0x240047d0
 800cd40:	240047ac 	.word	0x240047ac
 800cd44:	24004760 	.word	0x24004760
 800cd48:	24004764 	.word	0x24004764
 800cd4c:	240047c0 	.word	0x240047c0
 800cd50:	240047c8 	.word	0x240047c8
 800cd54:	240047b0 	.word	0x240047b0
 800cd58:	240046ac 	.word	0x240046ac
 800cd5c:	240046a8 	.word	0x240046a8
 800cd60:	240047b8 	.word	0x240047b8
 800cd64:	240047bc 	.word	0x240047bc

0800cd68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd6e:	4b26      	ldr	r3, [pc, #152]	; (800ce08 <vTaskSwitchContext+0xa0>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd76:	4b25      	ldr	r3, [pc, #148]	; (800ce0c <vTaskSwitchContext+0xa4>)
 800cd78:	2201      	movs	r2, #1
 800cd7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd7c:	e03e      	b.n	800cdfc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800cd7e:	4b23      	ldr	r3, [pc, #140]	; (800ce0c <vTaskSwitchContext+0xa4>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd84:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <vTaskSwitchContext+0xa8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	fab3 f383 	clz	r3, r3
 800cd90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	f1c3 031f 	rsb	r3, r3, #31
 800cd98:	617b      	str	r3, [r7, #20]
 800cd9a:	491e      	ldr	r1, [pc, #120]	; (800ce14 <vTaskSwitchContext+0xac>)
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d109      	bne.n	800cdc2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	e7fe      	b.n	800cdc0 <vTaskSwitchContext+0x58>
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4a11      	ldr	r2, [pc, #68]	; (800ce14 <vTaskSwitchContext+0xac>)
 800cdce:	4413      	add	r3, r2
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	605a      	str	r2, [r3, #4]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	3308      	adds	r3, #8
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d104      	bne.n	800cdf2 <vTaskSwitchContext+0x8a>
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	605a      	str	r2, [r3, #4]
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	4a07      	ldr	r2, [pc, #28]	; (800ce18 <vTaskSwitchContext+0xb0>)
 800cdfa:	6013      	str	r3, [r2, #0]
}
 800cdfc:	bf00      	nop
 800cdfe:	371c      	adds	r7, #28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	240047d0 	.word	0x240047d0
 800ce0c:	240047bc 	.word	0x240047bc
 800ce10:	240047b0 	.word	0x240047b0
 800ce14:	240046ac 	.word	0x240046ac
 800ce18:	240046a8 	.word	0x240046a8

0800ce1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d109      	bne.n	800ce40 <vTaskPlaceOnEventList+0x24>
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	60fb      	str	r3, [r7, #12]
 800ce3e:	e7fe      	b.n	800ce3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce40:	4b07      	ldr	r3, [pc, #28]	; (800ce60 <vTaskPlaceOnEventList+0x44>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3318      	adds	r3, #24
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7fe fa1e 	bl	800b28a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce4e:	2101      	movs	r1, #1
 800ce50:	6838      	ldr	r0, [r7, #0]
 800ce52:	f000 fb8b 	bl	800d56c <prvAddCurrentTaskToDelayedList>
}
 800ce56:	bf00      	nop
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	240046a8 	.word	0x240046a8

0800ce64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d109      	bne.n	800ce8e <xTaskRemoveFromEventList+0x2a>
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	60fb      	str	r3, [r7, #12]
 800ce8c:	e7fe      	b.n	800ce8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	3318      	adds	r3, #24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe fa32 	bl	800b2fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce98:	4b1d      	ldr	r3, [pc, #116]	; (800cf10 <xTaskRemoveFromEventList+0xac>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d11c      	bne.n	800ceda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	3304      	adds	r3, #4
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fa29 	bl	800b2fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	2201      	movs	r2, #1
 800ceb0:	409a      	lsls	r2, r3
 800ceb2:	4b18      	ldr	r3, [pc, #96]	; (800cf14 <xTaskRemoveFromEventList+0xb0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	4a16      	ldr	r2, [pc, #88]	; (800cf14 <xTaskRemoveFromEventList+0xb0>)
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4a13      	ldr	r2, [pc, #76]	; (800cf18 <xTaskRemoveFromEventList+0xb4>)
 800ceca:	441a      	add	r2, r3
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	3304      	adds	r3, #4
 800ced0:	4619      	mov	r1, r3
 800ced2:	4610      	mov	r0, r2
 800ced4:	f7fe f9b5 	bl	800b242 <vListInsertEnd>
 800ced8:	e005      	b.n	800cee6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	3318      	adds	r3, #24
 800cede:	4619      	mov	r1, r3
 800cee0:	480e      	ldr	r0, [pc, #56]	; (800cf1c <xTaskRemoveFromEventList+0xb8>)
 800cee2:	f7fe f9ae 	bl	800b242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceea:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <xTaskRemoveFromEventList+0xbc>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d905      	bls.n	800cf00 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cef4:	2301      	movs	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cef8:	4b0a      	ldr	r3, [pc, #40]	; (800cf24 <xTaskRemoveFromEventList+0xc0>)
 800cefa:	2201      	movs	r2, #1
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	e001      	b.n	800cf04 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf04:	697b      	ldr	r3, [r7, #20]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3718      	adds	r7, #24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	240047d0 	.word	0x240047d0
 800cf14:	240047b0 	.word	0x240047b0
 800cf18:	240046ac 	.word	0x240046ac
 800cf1c:	24004768 	.word	0x24004768
 800cf20:	240046a8 	.word	0x240046a8
 800cf24:	240047bc 	.word	0x240047bc

0800cf28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf30:	4b06      	ldr	r3, [pc, #24]	; (800cf4c <vTaskInternalSetTimeOutState+0x24>)
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf38:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <vTaskInternalSetTimeOutState+0x28>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	605a      	str	r2, [r3, #4]
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	240047c0 	.word	0x240047c0
 800cf50:	240047ac 	.word	0x240047ac

0800cf54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d109      	bne.n	800cf78 <xTaskCheckForTimeOut+0x24>
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	613b      	str	r3, [r7, #16]
 800cf76:	e7fe      	b.n	800cf76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d109      	bne.n	800cf92 <xTaskCheckForTimeOut+0x3e>
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60fb      	str	r3, [r7, #12]
 800cf90:	e7fe      	b.n	800cf90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cf92:	f7fe fb03 	bl	800b59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf96:	4b1d      	ldr	r3, [pc, #116]	; (800d00c <xTaskCheckForTimeOut+0xb8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	69ba      	ldr	r2, [r7, #24]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfae:	d102      	bne.n	800cfb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61fb      	str	r3, [r7, #28]
 800cfb4:	e023      	b.n	800cffe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4b15      	ldr	r3, [pc, #84]	; (800d010 <xTaskCheckForTimeOut+0xbc>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d007      	beq.n	800cfd2 <xTaskCheckForTimeOut+0x7e>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	69ba      	ldr	r2, [r7, #24]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d302      	bcc.n	800cfd2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	61fb      	str	r3, [r7, #28]
 800cfd0:	e015      	b.n	800cffe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d20b      	bcs.n	800cff4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	1ad2      	subs	r2, r2, r3
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff ff9d 	bl	800cf28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfee:	2300      	movs	r3, #0
 800cff0:	61fb      	str	r3, [r7, #28]
 800cff2:	e004      	b.n	800cffe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2200      	movs	r2, #0
 800cff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cffa:	2301      	movs	r3, #1
 800cffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cffe:	f7fe fafb 	bl	800b5f8 <vPortExitCritical>

	return xReturn;
 800d002:	69fb      	ldr	r3, [r7, #28]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3720      	adds	r7, #32
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	240047ac 	.word	0x240047ac
 800d010:	240047c0 	.word	0x240047c0

0800d014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d014:	b480      	push	{r7}
 800d016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d018:	4b03      	ldr	r3, [pc, #12]	; (800d028 <vTaskMissedYield+0x14>)
 800d01a:	2201      	movs	r2, #1
 800d01c:	601a      	str	r2, [r3, #0]
}
 800d01e:	bf00      	nop
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	240047bc 	.word	0x240047bc

0800d02c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d034:	f000 f852 	bl	800d0dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d038:	4b06      	ldr	r3, [pc, #24]	; (800d054 <prvIdleTask+0x28>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d9f9      	bls.n	800d034 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d040:	4b05      	ldr	r3, [pc, #20]	; (800d058 <prvIdleTask+0x2c>)
 800d042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d046:	601a      	str	r2, [r3, #0]
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d050:	e7f0      	b.n	800d034 <prvIdleTask+0x8>
 800d052:	bf00      	nop
 800d054:	240046ac 	.word	0x240046ac
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d062:	2300      	movs	r3, #0
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	e00c      	b.n	800d082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	4613      	mov	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4413      	add	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4a12      	ldr	r2, [pc, #72]	; (800d0bc <prvInitialiseTaskLists+0x60>)
 800d074:	4413      	add	r3, r2
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe f8b6 	bl	800b1e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3301      	adds	r3, #1
 800d080:	607b      	str	r3, [r7, #4]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b06      	cmp	r3, #6
 800d086:	d9ef      	bls.n	800d068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d088:	480d      	ldr	r0, [pc, #52]	; (800d0c0 <prvInitialiseTaskLists+0x64>)
 800d08a:	f7fe f8ad 	bl	800b1e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d08e:	480d      	ldr	r0, [pc, #52]	; (800d0c4 <prvInitialiseTaskLists+0x68>)
 800d090:	f7fe f8aa 	bl	800b1e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d094:	480c      	ldr	r0, [pc, #48]	; (800d0c8 <prvInitialiseTaskLists+0x6c>)
 800d096:	f7fe f8a7 	bl	800b1e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d09a:	480c      	ldr	r0, [pc, #48]	; (800d0cc <prvInitialiseTaskLists+0x70>)
 800d09c:	f7fe f8a4 	bl	800b1e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0a0:	480b      	ldr	r0, [pc, #44]	; (800d0d0 <prvInitialiseTaskLists+0x74>)
 800d0a2:	f7fe f8a1 	bl	800b1e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0a6:	4b0b      	ldr	r3, [pc, #44]	; (800d0d4 <prvInitialiseTaskLists+0x78>)
 800d0a8:	4a05      	ldr	r2, [pc, #20]	; (800d0c0 <prvInitialiseTaskLists+0x64>)
 800d0aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <prvInitialiseTaskLists+0x7c>)
 800d0ae:	4a05      	ldr	r2, [pc, #20]	; (800d0c4 <prvInitialiseTaskLists+0x68>)
 800d0b0:	601a      	str	r2, [r3, #0]
}
 800d0b2:	bf00      	nop
 800d0b4:	3708      	adds	r7, #8
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	240046ac 	.word	0x240046ac
 800d0c0:	24004738 	.word	0x24004738
 800d0c4:	2400474c 	.word	0x2400474c
 800d0c8:	24004768 	.word	0x24004768
 800d0cc:	2400477c 	.word	0x2400477c
 800d0d0:	24004794 	.word	0x24004794
 800d0d4:	24004760 	.word	0x24004760
 800d0d8:	24004764 	.word	0x24004764

0800d0dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0e2:	e019      	b.n	800d118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0e4:	f7fe fa5a 	bl	800b59c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e8:	4b0f      	ldr	r3, [pc, #60]	; (800d128 <prvCheckTasksWaitingTermination+0x4c>)
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fe f901 	bl	800b2fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0fa:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <prvCheckTasksWaitingTermination+0x50>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	4a0a      	ldr	r2, [pc, #40]	; (800d12c <prvCheckTasksWaitingTermination+0x50>)
 800d102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <prvCheckTasksWaitingTermination+0x54>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3b01      	subs	r3, #1
 800d10a:	4a09      	ldr	r2, [pc, #36]	; (800d130 <prvCheckTasksWaitingTermination+0x54>)
 800d10c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d10e:	f7fe fa73 	bl	800b5f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f80e 	bl	800d134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d118:	4b05      	ldr	r3, [pc, #20]	; (800d130 <prvCheckTasksWaitingTermination+0x54>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1e1      	bne.n	800d0e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	2400477c 	.word	0x2400477c
 800d12c:	240047a8 	.word	0x240047a8
 800d130:	24004790 	.word	0x24004790

0800d134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d142:	2b00      	cmp	r3, #0
 800d144:	d108      	bne.n	800d158 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fd ff38 	bl	800afc0 <vPortFree>
				vPortFree( pxTCB );
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7fd ff35 	bl	800afc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d156:	e017      	b.n	800d188 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d103      	bne.n	800d16a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7fd ff2c 	bl	800afc0 <vPortFree>
	}
 800d168:	e00e      	b.n	800d188 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d170:	2b02      	cmp	r3, #2
 800d172:	d009      	beq.n	800d188 <prvDeleteTCB+0x54>
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	60fb      	str	r3, [r7, #12]
 800d186:	e7fe      	b.n	800d186 <prvDeleteTCB+0x52>
	}
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d196:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <prvResetNextTaskUnblockTime+0x38>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d104      	bne.n	800d1aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvResetNextTaskUnblockTime+0x3c>)
 800d1a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1a8:	e008      	b.n	800d1bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <prvResetNextTaskUnblockTime+0x38>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <prvResetNextTaskUnblockTime+0x3c>)
 800d1ba:	6013      	str	r3, [r2, #0]
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	24004760 	.word	0x24004760
 800d1cc:	240047c8 	.word	0x240047c8

0800d1d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1d6:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <xTaskGetSchedulerState+0x34>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	607b      	str	r3, [r7, #4]
 800d1e2:	e008      	b.n	800d1f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <xTaskGetSchedulerState+0x38>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d102      	bne.n	800d1f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1ec:	2302      	movs	r3, #2
 800d1ee:	607b      	str	r3, [r7, #4]
 800d1f0:	e001      	b.n	800d1f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1f6:	687b      	ldr	r3, [r7, #4]
	}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	240047b4 	.word	0x240047b4
 800d208:	240047d0 	.word	0x240047d0

0800d20c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d218:	2300      	movs	r3, #0
 800d21a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d069      	beq.n	800d2f6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d226:	4b36      	ldr	r3, [pc, #216]	; (800d300 <xTaskPriorityInherit+0xf4>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d259      	bcs.n	800d2e4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	db06      	blt.n	800d246 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d238:	4b31      	ldr	r3, [pc, #196]	; (800d300 <xTaskPriorityInherit+0xf4>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23e:	f1c3 0207 	rsb	r2, r3, #7
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	6959      	ldr	r1, [r3, #20]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24e:	4613      	mov	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4a2b      	ldr	r2, [pc, #172]	; (800d304 <xTaskPriorityInherit+0xf8>)
 800d258:	4413      	add	r3, r2
 800d25a:	4299      	cmp	r1, r3
 800d25c:	d13a      	bne.n	800d2d4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	3304      	adds	r3, #4
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe f84a 	bl	800b2fc <uxListRemove>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d115      	bne.n	800d29a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d272:	4924      	ldr	r1, [pc, #144]	; (800d304 <xTaskPriorityInherit+0xf8>)
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <xTaskPriorityInherit+0x8e>
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	2201      	movs	r2, #1
 800d28a:	fa02 f303 	lsl.w	r3, r2, r3
 800d28e:	43da      	mvns	r2, r3
 800d290:	4b1d      	ldr	r3, [pc, #116]	; (800d308 <xTaskPriorityInherit+0xfc>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4013      	ands	r3, r2
 800d296:	4a1c      	ldr	r2, [pc, #112]	; (800d308 <xTaskPriorityInherit+0xfc>)
 800d298:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d29a:	4b19      	ldr	r3, [pc, #100]	; (800d300 <xTaskPriorityInherit+0xf4>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	409a      	lsls	r2, r3
 800d2ac:	4b16      	ldr	r3, [pc, #88]	; (800d308 <xTaskPriorityInherit+0xfc>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	4a15      	ldr	r2, [pc, #84]	; (800d308 <xTaskPriorityInherit+0xfc>)
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4a10      	ldr	r2, [pc, #64]	; (800d304 <xTaskPriorityInherit+0xf8>)
 800d2c4:	441a      	add	r2, r3
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f7fd ffb8 	bl	800b242 <vListInsertEnd>
 800d2d2:	e004      	b.n	800d2de <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <xTaskPriorityInherit+0xf4>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	60fb      	str	r3, [r7, #12]
 800d2e2:	e008      	b.n	800d2f6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e8:	4b05      	ldr	r3, [pc, #20]	; (800d300 <xTaskPriorityInherit+0xf4>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d201      	bcs.n	800d2f6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	240046a8 	.word	0x240046a8
 800d304:	240046ac 	.word	0x240046ac
 800d308:	240047b0 	.word	0x240047b0

0800d30c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d06c      	beq.n	800d3fc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d322:	4b39      	ldr	r3, [pc, #228]	; (800d408 <xTaskPriorityDisinherit+0xfc>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d009      	beq.n	800d340 <xTaskPriorityDisinherit+0x34>
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	e7fe      	b.n	800d33e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d344:	2b00      	cmp	r3, #0
 800d346:	d109      	bne.n	800d35c <xTaskPriorityDisinherit+0x50>
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	60bb      	str	r3, [r7, #8]
 800d35a:	e7fe      	b.n	800d35a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d360:	1e5a      	subs	r2, r3, #1
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d36e:	429a      	cmp	r2, r3
 800d370:	d044      	beq.n	800d3fc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d376:	2b00      	cmp	r3, #0
 800d378:	d140      	bne.n	800d3fc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fd ffbc 	bl	800b2fc <uxListRemove>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d115      	bne.n	800d3b6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38e:	491f      	ldr	r1, [pc, #124]	; (800d40c <xTaskPriorityDisinherit+0x100>)
 800d390:	4613      	mov	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4413      	add	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	440b      	add	r3, r1
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10a      	bne.n	800d3b6 <xTaskPriorityDisinherit+0xaa>
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3aa:	43da      	mvns	r2, r3
 800d3ac:	4b18      	ldr	r3, [pc, #96]	; (800d410 <xTaskPriorityDisinherit+0x104>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	4a17      	ldr	r2, [pc, #92]	; (800d410 <xTaskPriorityDisinherit+0x104>)
 800d3b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c2:	f1c3 0207 	rsb	r2, r3, #7
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	409a      	lsls	r2, r3
 800d3d2:	4b0f      	ldr	r3, [pc, #60]	; (800d410 <xTaskPriorityDisinherit+0x104>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	4a0d      	ldr	r2, [pc, #52]	; (800d410 <xTaskPriorityDisinherit+0x104>)
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4a08      	ldr	r2, [pc, #32]	; (800d40c <xTaskPriorityDisinherit+0x100>)
 800d3ea:	441a      	add	r2, r3
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fd ff25 	bl	800b242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3fc:	697b      	ldr	r3, [r7, #20]
	}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	240046a8 	.word	0x240046a8
 800d40c:	240046ac 	.word	0x240046ac
 800d410:	240047b0 	.word	0x240047b0

0800d414 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d422:	2301      	movs	r3, #1
 800d424:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f000 8081 	beq.w	800d530 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d432:	2b00      	cmp	r3, #0
 800d434:	d109      	bne.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e7fe      	b.n	800d448 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d902      	bls.n	800d45a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	61fb      	str	r3, [r7, #28]
 800d458:	e002      	b.n	800d460 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	429a      	cmp	r2, r3
 800d468:	d062      	beq.n	800d530 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	429a      	cmp	r2, r3
 800d472:	d15d      	bne.n	800d530 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d474:	4b30      	ldr	r3, [pc, #192]	; (800d538 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	69ba      	ldr	r2, [r7, #24]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d109      	bne.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60bb      	str	r3, [r7, #8]
 800d490:	e7fe      	b.n	800d490 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d496:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	69fa      	ldr	r2, [r7, #28]
 800d49c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	699b      	ldr	r3, [r3, #24]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	db04      	blt.n	800d4b0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f1c3 0207 	rsb	r2, r3, #7
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	6959      	ldr	r1, [r3, #20]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4a1f      	ldr	r2, [pc, #124]	; (800d53c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d4c0:	4413      	add	r3, r2
 800d4c2:	4299      	cmp	r1, r3
 800d4c4:	d134      	bne.n	800d530 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fd ff16 	bl	800b2fc <uxListRemove>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d115      	bne.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4da:	4918      	ldr	r1, [pc, #96]	; (800d53c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d4dc:	4613      	mov	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	440b      	add	r3, r1
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10a      	bne.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f6:	43da      	mvns	r2, r3
 800d4f8:	4b11      	ldr	r3, [pc, #68]	; (800d540 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	4a10      	ldr	r2, [pc, #64]	; (800d540 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d500:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d506:	2201      	movs	r2, #1
 800d508:	409a      	lsls	r2, r3
 800d50a:	4b0d      	ldr	r3, [pc, #52]	; (800d540 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4313      	orrs	r3, r2
 800d510:	4a0b      	ldr	r2, [pc, #44]	; (800d540 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4a06      	ldr	r2, [pc, #24]	; (800d53c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d522:	441a      	add	r2, r3
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	3304      	adds	r3, #4
 800d528:	4619      	mov	r1, r3
 800d52a:	4610      	mov	r0, r2
 800d52c:	f7fd fe89 	bl	800b242 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d530:	bf00      	nop
 800d532:	3720      	adds	r7, #32
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	240046a8 	.word	0x240046a8
 800d53c:	240046ac 	.word	0x240046ac
 800d540:	240047b0 	.word	0x240047b0

0800d544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d544:	b480      	push	{r7}
 800d546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d548:	4b07      	ldr	r3, [pc, #28]	; (800d568 <pvTaskIncrementMutexHeldCount+0x24>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d004      	beq.n	800d55a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <pvTaskIncrementMutexHeldCount+0x24>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d556:	3201      	adds	r2, #1
 800d558:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d55a:	4b03      	ldr	r3, [pc, #12]	; (800d568 <pvTaskIncrementMutexHeldCount+0x24>)
 800d55c:	681b      	ldr	r3, [r3, #0]
	}
 800d55e:	4618      	mov	r0, r3
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	240046a8 	.word	0x240046a8

0800d56c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d576:	4b29      	ldr	r3, [pc, #164]	; (800d61c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d57c:	4b28      	ldr	r3, [pc, #160]	; (800d620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3304      	adds	r3, #4
 800d582:	4618      	mov	r0, r3
 800d584:	f7fd feba 	bl	800b2fc <uxListRemove>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10b      	bne.n	800d5a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d58e:	4b24      	ldr	r3, [pc, #144]	; (800d620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	2201      	movs	r2, #1
 800d596:	fa02 f303 	lsl.w	r3, r2, r3
 800d59a:	43da      	mvns	r2, r3
 800d59c:	4b21      	ldr	r3, [pc, #132]	; (800d624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	4a20      	ldr	r2, [pc, #128]	; (800d624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5ac:	d10a      	bne.n	800d5c4 <prvAddCurrentTaskToDelayedList+0x58>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d007      	beq.n	800d5c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5b4:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	481a      	ldr	r0, [pc, #104]	; (800d628 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d5be:	f7fd fe40 	bl	800b242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5c2:	e026      	b.n	800d612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5cc:	4b14      	ldr	r3, [pc, #80]	; (800d620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d209      	bcs.n	800d5f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5dc:	4b13      	ldr	r3, [pc, #76]	; (800d62c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	f7fd fe4e 	bl	800b28a <vListInsert>
}
 800d5ee:	e010      	b.n	800d612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	4b0a      	ldr	r3, [pc, #40]	; (800d620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	f7fd fe44 	bl	800b28a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d602:	4b0c      	ldr	r3, [pc, #48]	; (800d634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d202      	bcs.n	800d612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d60c:	4a09      	ldr	r2, [pc, #36]	; (800d634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	6013      	str	r3, [r2, #0]
}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	240047ac 	.word	0x240047ac
 800d620:	240046a8 	.word	0x240046a8
 800d624:	240047b0 	.word	0x240047b0
 800d628:	24004794 	.word	0x24004794
 800d62c:	24004764 	.word	0x24004764
 800d630:	24004760 	.word	0x24004760
 800d634:	240047c8 	.word	0x240047c8

0800d638 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d642:	88fb      	ldrh	r3, [r7, #6]
 800d644:	021b      	lsls	r3, r3, #8
 800d646:	b21a      	sxth	r2, r3
 800d648:	88fb      	ldrh	r3, [r7, #6]
 800d64a:	0a1b      	lsrs	r3, r3, #8
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	b21b      	sxth	r3, r3
 800d650:	4313      	orrs	r3, r2
 800d652:	b21b      	sxth	r3, r3
 800d654:	b29b      	uxth	r3, r3
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d662:	b480      	push	{r7}
 800d664:	b083      	sub	sp, #12
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	061a      	lsls	r2, r3, #24
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	021b      	lsls	r3, r3, #8
 800d672:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	0a1b      	lsrs	r3, r3, #8
 800d67c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d680:	431a      	orrs	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	0e1b      	lsrs	r3, r3, #24
 800d686:	4313      	orrs	r3, r2
}
 800d688:	4618      	mov	r0, r3
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800d698:	4b20      	ldr	r3, [pc, #128]	; (800d71c <dhcp_inc_pcb_refcount+0x88>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d133      	bne.n	800d708 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d6a0:	4b1f      	ldr	r3, [pc, #124]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d005      	beq.n	800d6b4 <dhcp_inc_pcb_refcount+0x20>
 800d6a8:	4b1e      	ldr	r3, [pc, #120]	; (800d724 <dhcp_inc_pcb_refcount+0x90>)
 800d6aa:	22e5      	movs	r2, #229	; 0xe5
 800d6ac:	491e      	ldr	r1, [pc, #120]	; (800d728 <dhcp_inc_pcb_refcount+0x94>)
 800d6ae:	481f      	ldr	r0, [pc, #124]	; (800d72c <dhcp_inc_pcb_refcount+0x98>)
 800d6b0:	f00d fdae 	bl	801b210 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800d6b4:	f00c face 	bl	8019c54 <udp_new>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	4b19      	ldr	r3, [pc, #100]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6bc:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800d6be:	4b18      	ldr	r3, [pc, #96]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800d6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6ca:	e024      	b.n	800d716 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d6cc:	4b14      	ldr	r3, [pc, #80]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	7a5a      	ldrb	r2, [r3, #9]
 800d6d2:	4b13      	ldr	r3, [pc, #76]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f042 0220 	orr.w	r2, r2, #32
 800d6da:	b2d2      	uxtb	r2, r2
 800d6dc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d6de:	4b10      	ldr	r3, [pc, #64]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2244      	movs	r2, #68	; 0x44
 800d6e4:	4912      	ldr	r1, [pc, #72]	; (800d730 <dhcp_inc_pcb_refcount+0x9c>)
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f00c f95c 	bl	80199a4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d6ec:	4b0c      	ldr	r3, [pc, #48]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2243      	movs	r2, #67	; 0x43
 800d6f2:	490f      	ldr	r1, [pc, #60]	; (800d730 <dhcp_inc_pcb_refcount+0x9c>)
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f00c f9dd 	bl	8019ab4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d6fa:	4b09      	ldr	r3, [pc, #36]	; (800d720 <dhcp_inc_pcb_refcount+0x8c>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2200      	movs	r2, #0
 800d700:	490c      	ldr	r1, [pc, #48]	; (800d734 <dhcp_inc_pcb_refcount+0xa0>)
 800d702:	4618      	mov	r0, r3
 800d704:	f00c fa44 	bl	8019b90 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800d708:	4b04      	ldr	r3, [pc, #16]	; (800d71c <dhcp_inc_pcb_refcount+0x88>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	3301      	adds	r3, #1
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	4b02      	ldr	r3, [pc, #8]	; (800d71c <dhcp_inc_pcb_refcount+0x88>)
 800d712:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	240047d8 	.word	0x240047d8
 800d720:	240047d4 	.word	0x240047d4
 800d724:	0801d438 	.word	0x0801d438
 800d728:	0801d48c 	.word	0x0801d48c
 800d72c:	0801d4b4 	.word	0x0801d4b4
 800d730:	08020504 	.word	0x08020504
 800d734:	0800eff1 	.word	0x0800eff1

0800d738 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d73c:	4b0e      	ldr	r3, [pc, #56]	; (800d778 <dhcp_dec_pcb_refcount+0x40>)
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d105      	bne.n	800d750 <dhcp_dec_pcb_refcount+0x18>
 800d744:	4b0d      	ldr	r3, [pc, #52]	; (800d77c <dhcp_dec_pcb_refcount+0x44>)
 800d746:	22ff      	movs	r2, #255	; 0xff
 800d748:	490d      	ldr	r1, [pc, #52]	; (800d780 <dhcp_dec_pcb_refcount+0x48>)
 800d74a:	480e      	ldr	r0, [pc, #56]	; (800d784 <dhcp_dec_pcb_refcount+0x4c>)
 800d74c:	f00d fd60 	bl	801b210 <iprintf>
  dhcp_pcb_refcount--;
 800d750:	4b09      	ldr	r3, [pc, #36]	; (800d778 <dhcp_dec_pcb_refcount+0x40>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	3b01      	subs	r3, #1
 800d756:	b2da      	uxtb	r2, r3
 800d758:	4b07      	ldr	r3, [pc, #28]	; (800d778 <dhcp_dec_pcb_refcount+0x40>)
 800d75a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800d75c:	4b06      	ldr	r3, [pc, #24]	; (800d778 <dhcp_dec_pcb_refcount+0x40>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d107      	bne.n	800d774 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <dhcp_dec_pcb_refcount+0x50>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f00c fa31 	bl	8019bd0 <udp_remove>
    dhcp_pcb = NULL;
 800d76e:	4b06      	ldr	r3, [pc, #24]	; (800d788 <dhcp_dec_pcb_refcount+0x50>)
 800d770:	2200      	movs	r2, #0
 800d772:	601a      	str	r2, [r3, #0]
  }
}
 800d774:	bf00      	nop
 800d776:	bd80      	pop	{r7, pc}
 800d778:	240047d8 	.word	0x240047d8
 800d77c:	0801d438 	.word	0x0801d438
 800d780:	0801d4dc 	.word	0x0801d4dc
 800d784:	0801d4b4 	.word	0x0801d4b4
 800d788:	240047d4 	.word	0x240047d4

0800d78c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d798:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d79a:	210c      	movs	r1, #12
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f001 f869 	bl	800e874 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d7a2:	4b06      	ldr	r3, [pc, #24]	; (800d7bc <dhcp_handle_nak+0x30>)
 800d7a4:	4a05      	ldr	r2, [pc, #20]	; (800d7bc <dhcp_handle_nak+0x30>)
 800d7a6:	4905      	ldr	r1, [pc, #20]	; (800d7bc <dhcp_handle_nak+0x30>)
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f005 f8a3 	bl	80128f4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fc5c 	bl	800e06c <dhcp_discover>
}
 800d7b4:	bf00      	nop
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	08020504 	.word	0x08020504

0800d7c0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d7ce:	2108      	movs	r1, #8
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f001 f84f 	bl	800e874 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	331c      	adds	r3, #28
 800d7da:	2200      	movs	r2, #0
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f002 fb4e 	bl	800fe80 <etharp_query>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	799b      	ldrb	r3, [r3, #6]
 800d7ec:	2bff      	cmp	r3, #255	; 0xff
 800d7ee:	d005      	beq.n	800d7fc <dhcp_check+0x3c>
    dhcp->tries++;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	799b      	ldrb	r3, [r3, #6]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800d7fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d800:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d802:	893b      	ldrh	r3, [r7, #8]
 800d804:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d808:	4a06      	ldr	r2, [pc, #24]	; (800d824 <dhcp_check+0x64>)
 800d80a:	fb82 1203 	smull	r1, r2, r2, r3
 800d80e:	1152      	asrs	r2, r2, #5
 800d810:	17db      	asrs	r3, r3, #31
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	b29a      	uxth	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	10624dd3 	.word	0x10624dd3

0800d828 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d838:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <dhcp_handle_offer+0x44>)
 800d83a:	789b      	ldrb	r3, [r3, #2]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d011      	beq.n	800d864 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d846:	4b0a      	ldr	r3, [pc, #40]	; (800d870 <dhcp_handle_offer+0x48>)
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff ff09 	bl	800d662 <lwip_htonl>
 800d850:	4602      	mov	r2, r0
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	691a      	ldr	r2, [r3, #16]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f808 	bl	800d874 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800d864:	bf00      	nop
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	24005938 	.word	0x24005938
 800d870:	24005940 	.word	0x24005940

0800d874 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800d874:	b5b0      	push	{r4, r5, r7, lr}
 800d876:	b08a      	sub	sp, #40	; 0x28
 800d878:	af02      	add	r7, sp, #8
 800d87a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d109      	bne.n	800d896 <dhcp_select+0x22>
 800d882:	4b71      	ldr	r3, [pc, #452]	; (800da48 <dhcp_select+0x1d4>)
 800d884:	f240 1277 	movw	r2, #375	; 0x177
 800d888:	4970      	ldr	r1, [pc, #448]	; (800da4c <dhcp_select+0x1d8>)
 800d88a:	4871      	ldr	r0, [pc, #452]	; (800da50 <dhcp_select+0x1dc>)
 800d88c:	f00d fcc0 	bl	801b210 <iprintf>
 800d890:	f06f 030f 	mvn.w	r3, #15
 800d894:	e0d3      	b.n	800da3e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d109      	bne.n	800d8b6 <dhcp_select+0x42>
 800d8a2:	4b69      	ldr	r3, [pc, #420]	; (800da48 <dhcp_select+0x1d4>)
 800d8a4:	f240 1279 	movw	r2, #377	; 0x179
 800d8a8:	496a      	ldr	r1, [pc, #424]	; (800da54 <dhcp_select+0x1e0>)
 800d8aa:	4869      	ldr	r0, [pc, #420]	; (800da50 <dhcp_select+0x1dc>)
 800d8ac:	f00d fcb0 	bl	801b210 <iprintf>
 800d8b0:	f06f 0305 	mvn.w	r3, #5
 800d8b4:	e0c3      	b.n	800da3e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	69b8      	ldr	r0, [r7, #24]
 800d8ba:	f000 ffdb 	bl	800e874 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d8be:	f107 030c 	add.w	r3, r7, #12
 800d8c2:	2203      	movs	r2, #3
 800d8c4:	69b9      	ldr	r1, [r7, #24]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 fc5e 	bl	800f188 <dhcp_create_msg>
 800d8cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 8085 	beq.w	800d9e0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d8dc:	89b8      	ldrh	r0, [r7, #12]
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	2239      	movs	r2, #57	; 0x39
 800d8e8:	f000 ffde 	bl	800e8a8 <dhcp_option>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d8f0:	89b8      	ldrh	r0, [r7, #12]
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	f001 f82d 	bl	800e95c <dhcp_option_short>
 800d902:	4603      	mov	r3, r0
 800d904:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d906:	89b8      	ldrh	r0, [r7, #12]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d90e:	2304      	movs	r3, #4
 800d910:	2232      	movs	r2, #50	; 0x32
 800d912:	f000 ffc9 	bl	800e8a8 <dhcp_option>
 800d916:	4603      	mov	r3, r0
 800d918:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d91a:	89bc      	ldrh	r4, [r7, #12]
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	4618      	mov	r0, r3
 800d928:	f7ff fe9b 	bl	800d662 <lwip_htonl>
 800d92c:	4603      	mov	r3, r0
 800d92e:	461a      	mov	r2, r3
 800d930:	4629      	mov	r1, r5
 800d932:	4620      	mov	r0, r4
 800d934:	f001 f844 	bl	800e9c0 <dhcp_option_long>
 800d938:	4603      	mov	r3, r0
 800d93a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d93c:	89b8      	ldrh	r0, [r7, #12]
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d944:	2304      	movs	r3, #4
 800d946:	2236      	movs	r2, #54	; 0x36
 800d948:	f000 ffae 	bl	800e8a8 <dhcp_option>
 800d94c:	4603      	mov	r3, r0
 800d94e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d950:	89bc      	ldrh	r4, [r7, #12]
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff fe80 	bl	800d662 <lwip_htonl>
 800d962:	4603      	mov	r3, r0
 800d964:	461a      	mov	r2, r3
 800d966:	4629      	mov	r1, r5
 800d968:	4620      	mov	r0, r4
 800d96a:	f001 f829 	bl	800e9c0 <dhcp_option_long>
 800d96e:	4603      	mov	r3, r0
 800d970:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d972:	89b8      	ldrh	r0, [r7, #12]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d97a:	2303      	movs	r3, #3
 800d97c:	2237      	movs	r2, #55	; 0x37
 800d97e:	f000 ff93 	bl	800e8a8 <dhcp_option>
 800d982:	4603      	mov	r3, r0
 800d984:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d986:	2300      	movs	r3, #0
 800d988:	77bb      	strb	r3, [r7, #30]
 800d98a:	e00e      	b.n	800d9aa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d98c:	89b8      	ldrh	r0, [r7, #12]
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d994:	7fbb      	ldrb	r3, [r7, #30]
 800d996:	4a30      	ldr	r2, [pc, #192]	; (800da58 <dhcp_select+0x1e4>)
 800d998:	5cd3      	ldrb	r3, [r2, r3]
 800d99a:	461a      	mov	r2, r3
 800d99c:	f000 ffb8 	bl	800e910 <dhcp_option_byte>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d9a4:	7fbb      	ldrb	r3, [r7, #30]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	77bb      	strb	r3, [r7, #30]
 800d9aa:	7fbb      	ldrb	r3, [r7, #30]
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d9ed      	bls.n	800d98c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d9b0:	89b8      	ldrh	r0, [r7, #12]
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	33f0      	adds	r3, #240	; 0xf0
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	f001 fcbb 	bl	800f334 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d9be:	4b27      	ldr	r3, [pc, #156]	; (800da5c <dhcp_select+0x1e8>)
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	4b27      	ldr	r3, [pc, #156]	; (800da60 <dhcp_select+0x1ec>)
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	2343      	movs	r3, #67	; 0x43
 800d9cc:	4a25      	ldr	r2, [pc, #148]	; (800da64 <dhcp_select+0x1f0>)
 800d9ce:	6979      	ldr	r1, [r7, #20]
 800d9d0:	f00b ff02 	bl	80197d8 <udp_sendto_if_src>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d9d8:	6978      	ldr	r0, [r7, #20]
 800d9da:	f005 fc95 	bl	8013308 <pbuf_free>
 800d9de:	e001      	b.n	800d9e4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d9e0:	23ff      	movs	r3, #255	; 0xff
 800d9e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	799b      	ldrb	r3, [r3, #6]
 800d9e8:	2bff      	cmp	r3, #255	; 0xff
 800d9ea:	d005      	beq.n	800d9f8 <dhcp_select+0x184>
    dhcp->tries++;
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	799b      	ldrb	r3, [r3, #6]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	799b      	ldrb	r3, [r3, #6]
 800d9fc:	2b05      	cmp	r3, #5
 800d9fe:	d80d      	bhi.n	800da1c <dhcp_select+0x1a8>
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	799b      	ldrb	r3, [r3, #6]
 800da04:	461a      	mov	r2, r3
 800da06:	2301      	movs	r3, #1
 800da08:	4093      	lsls	r3, r2
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	0152      	lsls	r2, r2, #5
 800da10:	1ad2      	subs	r2, r2, r3
 800da12:	0092      	lsls	r2, r2, #2
 800da14:	4413      	add	r3, r2
 800da16:	00db      	lsls	r3, r3, #3
 800da18:	b29b      	uxth	r3, r3
 800da1a:	e001      	b.n	800da20 <dhcp_select+0x1ac>
 800da1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800da20:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800da22:	89fb      	ldrh	r3, [r7, #14]
 800da24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800da28:	4a0f      	ldr	r2, [pc, #60]	; (800da68 <dhcp_select+0x1f4>)
 800da2a:	fb82 1203 	smull	r1, r2, r2, r3
 800da2e:	1152      	asrs	r2, r2, #5
 800da30:	17db      	asrs	r3, r3, #31
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	b29a      	uxth	r2, r3
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800da3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3720      	adds	r7, #32
 800da42:	46bd      	mov	sp, r7
 800da44:	bdb0      	pop	{r4, r5, r7, pc}
 800da46:	bf00      	nop
 800da48:	0801d438 	.word	0x0801d438
 800da4c:	0801d500 	.word	0x0801d500
 800da50:	0801d4b4 	.word	0x0801d4b4
 800da54:	0801d51c 	.word	0x0801d51c
 800da58:	24000028 	.word	0x24000028
 800da5c:	240047d4 	.word	0x240047d4
 800da60:	08020504 	.word	0x08020504
 800da64:	08020508 	.word	0x08020508
 800da68:	10624dd3 	.word	0x10624dd3

0800da6c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800da72:	4b27      	ldr	r3, [pc, #156]	; (800db10 <dhcp_coarse_tmr+0xa4>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	607b      	str	r3, [r7, #4]
 800da78:	e042      	b.n	800db00 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d039      	beq.n	800dafa <dhcp_coarse_tmr+0x8e>
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	795b      	ldrb	r3, [r3, #5]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d035      	beq.n	800dafa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	8a9b      	ldrh	r3, [r3, #20]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d012      	beq.n	800dabc <dhcp_coarse_tmr+0x50>
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	8a5b      	ldrh	r3, [r3, #18]
 800da9a:	3301      	adds	r3, #1
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	825a      	strh	r2, [r3, #18]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	8a5a      	ldrh	r2, [r3, #18]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	8a9b      	ldrh	r3, [r3, #20]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d106      	bne.n	800dabc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fe46 	bl	800e740 <dhcp_release_and_stop>
        dhcp_start(netif);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f96b 	bl	800dd90 <dhcp_start>
 800daba:	e01e      	b.n	800dafa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	8a1b      	ldrh	r3, [r3, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00b      	beq.n	800dadc <dhcp_coarse_tmr+0x70>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	8a1b      	ldrh	r3, [r3, #16]
 800dac8:	1e5a      	subs	r2, r3, #1
 800daca:	b291      	uxth	r1, r2
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	8211      	strh	r1, [r2, #16]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d103      	bne.n	800dadc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 f8c7 	bl	800dc68 <dhcp_t2_timeout>
 800dada:	e00e      	b.n	800dafa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	89db      	ldrh	r3, [r3, #14]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00a      	beq.n	800dafa <dhcp_coarse_tmr+0x8e>
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	89db      	ldrh	r3, [r3, #14]
 800dae8:	1e5a      	subs	r2, r3, #1
 800daea:	b291      	uxth	r1, r2
 800daec:	683a      	ldr	r2, [r7, #0]
 800daee:	81d1      	strh	r1, [r2, #14]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d102      	bne.n	800dafa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f888 	bl	800dc0a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	607b      	str	r3, [r7, #4]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1b9      	bne.n	800da7a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	24008a30 	.word	0x24008a30

0800db14 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800db1a:	4b16      	ldr	r3, [pc, #88]	; (800db74 <dhcp_fine_tmr+0x60>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	607b      	str	r3, [r7, #4]
 800db20:	e020      	b.n	800db64 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d017      	beq.n	800db5e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	891b      	ldrh	r3, [r3, #8]
 800db32:	2b01      	cmp	r3, #1
 800db34:	d906      	bls.n	800db44 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	891b      	ldrh	r3, [r3, #8]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	811a      	strh	r2, [r3, #8]
 800db42:	e00c      	b.n	800db5e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	891b      	ldrh	r3, [r3, #8]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d108      	bne.n	800db5e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	891b      	ldrh	r3, [r3, #8]
 800db50:	3b01      	subs	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f80d 	bl	800db78 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	607b      	str	r3, [r7, #4]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1db      	bne.n	800db22 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	24008a30 	.word	0x24008a30

0800db78 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	795b      	ldrb	r3, [r3, #5]
 800db8a:	2b0c      	cmp	r3, #12
 800db8c:	d003      	beq.n	800db96 <dhcp_timeout+0x1e>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	795b      	ldrb	r3, [r3, #5]
 800db92:	2b06      	cmp	r3, #6
 800db94:	d103      	bne.n	800db9e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fa68 	bl	800e06c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800db9c:	e031      	b.n	800dc02 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	795b      	ldrb	r3, [r3, #5]
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d10e      	bne.n	800dbc4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	799b      	ldrb	r3, [r3, #6]
 800dbaa:	2b05      	cmp	r3, #5
 800dbac:	d803      	bhi.n	800dbb6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7ff fe60 	bl	800d874 <dhcp_select>
}
 800dbb4:	e025      	b.n	800dc02 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fdc2 	bl	800e740 <dhcp_release_and_stop>
      dhcp_start(netif);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 f8e7 	bl	800dd90 <dhcp_start>
}
 800dbc2:	e01e      	b.n	800dc02 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	795b      	ldrb	r3, [r3, #5]
 800dbc8:	2b08      	cmp	r3, #8
 800dbca:	d10b      	bne.n	800dbe4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	799b      	ldrb	r3, [r3, #6]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d803      	bhi.n	800dbdc <dhcp_timeout+0x64>
      dhcp_check(netif);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff fdf3 	bl	800d7c0 <dhcp_check>
}
 800dbda:	e012      	b.n	800dc02 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fae7 	bl	800e1b0 <dhcp_bind>
}
 800dbe2:	e00e      	b.n	800dc02 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	795b      	ldrb	r3, [r3, #5]
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d10a      	bne.n	800dc02 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	799b      	ldrb	r3, [r3, #6]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d803      	bhi.n	800dbfc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 fced 	bl	800e5d4 <dhcp_reboot>
}
 800dbfa:	e002      	b.n	800dc02 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 fa35 	bl	800e06c <dhcp_discover>
}
 800dc02:	bf00      	nop
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc16:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	795b      	ldrb	r3, [r3, #5]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d007      	beq.n	800dc30 <dhcp_t1_timeout+0x26>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	795b      	ldrb	r3, [r3, #5]
 800dc24:	2b0a      	cmp	r3, #10
 800dc26:	d003      	beq.n	800dc30 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc2c:	2b05      	cmp	r3, #5
 800dc2e:	d117      	bne.n	800dc60 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fb97 	bl	800e364 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	899b      	ldrh	r3, [r3, #12]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	8a5b      	ldrh	r3, [r3, #18]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	dd0c      	ble.n	800dc60 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	899b      	ldrh	r3, [r3, #12]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8a5b      	ldrh	r3, [r3, #18]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	da00      	bge.n	800dc58 <dhcp_t1_timeout+0x4e>
 800dc56:	3301      	adds	r3, #1
 800dc58:	105b      	asrs	r3, r3, #1
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800dc60:	bf00      	nop
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc74:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	795b      	ldrb	r3, [r3, #5]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d00b      	beq.n	800dc96 <dhcp_t2_timeout+0x2e>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	795b      	ldrb	r3, [r3, #5]
 800dc82:	2b0a      	cmp	r3, #10
 800dc84:	d007      	beq.n	800dc96 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800dc8a:	2b05      	cmp	r3, #5
 800dc8c:	d003      	beq.n	800dc96 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	795b      	ldrb	r3, [r3, #5]
 800dc92:	2b04      	cmp	r3, #4
 800dc94:	d117      	bne.n	800dcc6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fc00 	bl	800e49c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	8a9b      	ldrh	r3, [r3, #20]
 800dca0:	461a      	mov	r2, r3
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	8a5b      	ldrh	r3, [r3, #18]
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	dd0c      	ble.n	800dcc6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	8a9b      	ldrh	r3, [r3, #20]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	8a5b      	ldrh	r3, [r3, #18]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	da00      	bge.n	800dcbe <dhcp_t2_timeout+0x56>
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	105b      	asrs	r3, r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800dcc6:	bf00      	nop
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
	...

0800dcd0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcde:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2200      	movs	r2, #0
 800dcea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800dcec:	4b26      	ldr	r3, [pc, #152]	; (800dd88 <dhcp_handle_ack+0xb8>)
 800dcee:	78db      	ldrb	r3, [r3, #3]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d003      	beq.n	800dcfc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800dcf4:	4b25      	ldr	r3, [pc, #148]	; (800dd8c <dhcp_handle_ack+0xbc>)
 800dcf6:	68da      	ldr	r2, [r3, #12]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800dcfc:	4b22      	ldr	r3, [pc, #136]	; (800dd88 <dhcp_handle_ack+0xb8>)
 800dcfe:	791b      	ldrb	r3, [r3, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d004      	beq.n	800dd0e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800dd04:	4b21      	ldr	r3, [pc, #132]	; (800dd8c <dhcp_handle_ack+0xbc>)
 800dd06:	691a      	ldr	r2, [r3, #16]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd0c:	e004      	b.n	800dd18 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd12:	085a      	lsrs	r2, r3, #1
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800dd18:	4b1b      	ldr	r3, [pc, #108]	; (800dd88 <dhcp_handle_ack+0xb8>)
 800dd1a:	795b      	ldrb	r3, [r3, #5]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d004      	beq.n	800dd2a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800dd20:	4b1a      	ldr	r3, [pc, #104]	; (800dd8c <dhcp_handle_ack+0xbc>)
 800dd22:	695a      	ldr	r2, [r3, #20]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	631a      	str	r2, [r3, #48]	; 0x30
 800dd28:	e007      	b.n	800dd3a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd2e:	4613      	mov	r3, r2
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	1a9b      	subs	r3, r3, r2
 800dd34:	08da      	lsrs	r2, r3, #3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800dd42:	4b11      	ldr	r3, [pc, #68]	; (800dd88 <dhcp_handle_ack+0xb8>)
 800dd44:	799b      	ldrb	r3, [r3, #6]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800dd4a:	4b10      	ldr	r3, [pc, #64]	; (800dd8c <dhcp_handle_ack+0xbc>)
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fc87 	bl	800d662 <lwip_htonl>
 800dd54:	4602      	mov	r2, r0
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	71da      	strb	r2, [r3, #7]
 800dd60:	e002      	b.n	800dd68 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800dd68:	4b07      	ldr	r3, [pc, #28]	; (800dd88 <dhcp_handle_ack+0xb8>)
 800dd6a:	79db      	ldrb	r3, [r3, #7]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d007      	beq.n	800dd80 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800dd70:	4b06      	ldr	r3, [pc, #24]	; (800dd8c <dhcp_handle_ack+0xbc>)
 800dd72:	69db      	ldr	r3, [r3, #28]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7ff fc74 	bl	800d662 <lwip_htonl>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800dd80:	bf00      	nop
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	24005938 	.word	0x24005938
 800dd8c:	24005940 	.word	0x24005940

0800dd90 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d109      	bne.n	800ddb2 <dhcp_start+0x22>
 800dd9e:	4b37      	ldr	r3, [pc, #220]	; (800de7c <dhcp_start+0xec>)
 800dda0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800dda4:	4936      	ldr	r1, [pc, #216]	; (800de80 <dhcp_start+0xf0>)
 800dda6:	4837      	ldr	r0, [pc, #220]	; (800de84 <dhcp_start+0xf4>)
 800dda8:	f00d fa32 	bl	801b210 <iprintf>
 800ddac:	f06f 030f 	mvn.w	r3, #15
 800ddb0:	e060      	b.n	800de74 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddb8:	f003 0301 	and.w	r3, r3, #1
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d109      	bne.n	800ddd4 <dhcp_start+0x44>
 800ddc0:	4b2e      	ldr	r3, [pc, #184]	; (800de7c <dhcp_start+0xec>)
 800ddc2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ddc6:	4930      	ldr	r1, [pc, #192]	; (800de88 <dhcp_start+0xf8>)
 800ddc8:	482e      	ldr	r0, [pc, #184]	; (800de84 <dhcp_start+0xf4>)
 800ddca:	f00d fa21 	bl	801b210 <iprintf>
 800ddce:	f06f 030f 	mvn.w	r3, #15
 800ddd2:	e04f      	b.n	800de74 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddde:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800dde2:	d202      	bcs.n	800ddea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800dde4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde8:	e044      	b.n	800de74 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10d      	bne.n	800de0c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ddf0:	2034      	movs	r0, #52	; 0x34
 800ddf2:	f004 f9bf 	bl	8012174 <mem_malloc>
 800ddf6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d102      	bne.n	800de04 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ddfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de02:	e037      	b.n	800de74 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	625a      	str	r2, [r3, #36]	; 0x24
 800de0a:	e005      	b.n	800de18 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	791b      	ldrb	r3, [r3, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800de14:	f7ff fc90 	bl	800d738 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800de18:	2234      	movs	r2, #52	; 0x34
 800de1a:	2100      	movs	r1, #0
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f00c fdb6 	bl	801a98e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800de22:	f7ff fc37 	bl	800d694 <dhcp_inc_pcb_refcount>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <dhcp_start+0xa2>
    return ERR_MEM;
 800de2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de30:	e020      	b.n	800de74 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2201      	movs	r2, #1
 800de36:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de3e:	f003 0304 	and.w	r3, r3, #4
 800de42:	2b00      	cmp	r3, #0
 800de44:	d105      	bne.n	800de52 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800de46:	2102      	movs	r1, #2
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 fd13 	bl	800e874 <dhcp_set_state>
    return ERR_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	e010      	b.n	800de74 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f90a 	bl	800e06c <dhcp_discover>
 800de58:	4603      	mov	r3, r0
 800de5a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800de5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d005      	beq.n	800de70 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fc6b 	bl	800e740 <dhcp_release_and_stop>
    return ERR_MEM;
 800de6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de6e:	e001      	b.n	800de74 <dhcp_start+0xe4>
  }
  return result;
 800de70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	0801d438 	.word	0x0801d438
 800de80:	0801d538 	.word	0x0801d538
 800de84:	0801d4b4 	.word	0x0801d4b4
 800de88:	0801d57c 	.word	0x0801d57c

0800de8c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de98:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d037      	beq.n	800df10 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	795b      	ldrb	r3, [r3, #5]
 800dea4:	2b0a      	cmp	r3, #10
 800dea6:	d820      	bhi.n	800deea <dhcp_network_changed+0x5e>
 800dea8:	a201      	add	r2, pc, #4	; (adr r2, 800deb0 <dhcp_network_changed+0x24>)
 800deaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deae:	bf00      	nop
 800deb0:	0800df15 	.word	0x0800df15
 800deb4:	0800deeb 	.word	0x0800deeb
 800deb8:	0800deeb 	.word	0x0800deeb
 800debc:	0800dedd 	.word	0x0800dedd
 800dec0:	0800dedd 	.word	0x0800dedd
 800dec4:	0800dedd 	.word	0x0800dedd
 800dec8:	0800deeb 	.word	0x0800deeb
 800decc:	0800deeb 	.word	0x0800deeb
 800ded0:	0800deeb 	.word	0x0800deeb
 800ded4:	0800deeb 	.word	0x0800deeb
 800ded8:	0800dedd 	.word	0x0800dedd
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2200      	movs	r2, #0
 800dee0:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 fb76 	bl	800e5d4 <dhcp_reboot>
      break;
 800dee8:	e015      	b.n	800df16 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	795b      	ldrb	r3, [r3, #5]
 800deee:	2b0c      	cmp	r3, #12
 800def0:	d906      	bls.n	800df00 <dhcp_network_changed+0x74>
 800def2:	4b0a      	ldr	r3, [pc, #40]	; (800df1c <dhcp_network_changed+0x90>)
 800def4:	f240 326d 	movw	r2, #877	; 0x36d
 800def8:	4909      	ldr	r1, [pc, #36]	; (800df20 <dhcp_network_changed+0x94>)
 800defa:	480a      	ldr	r0, [pc, #40]	; (800df24 <dhcp_network_changed+0x98>)
 800defc:	f00d f988 	bl	801b210 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2200      	movs	r2, #0
 800df04:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 f8b0 	bl	800e06c <dhcp_discover>
      break;
 800df0c:	bf00      	nop
 800df0e:	e002      	b.n	800df16 <dhcp_network_changed+0x8a>
    return;
 800df10:	bf00      	nop
 800df12:	e000      	b.n	800df16 <dhcp_network_changed+0x8a>
      break;
 800df14:	bf00      	nop
  }
}
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	0801d438 	.word	0x0801d438
 800df20:	0801d5a0 	.word	0x0801d5a0
 800df24:	0801d4b4 	.word	0x0801d4b4

0800df28 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d107      	bne.n	800df48 <dhcp_arp_reply+0x20>
 800df38:	4b0e      	ldr	r3, [pc, #56]	; (800df74 <dhcp_arp_reply+0x4c>)
 800df3a:	f240 328b 	movw	r2, #907	; 0x38b
 800df3e:	490e      	ldr	r1, [pc, #56]	; (800df78 <dhcp_arp_reply+0x50>)
 800df40:	480e      	ldr	r0, [pc, #56]	; (800df7c <dhcp_arp_reply+0x54>)
 800df42:	f00d f965 	bl	801b210 <iprintf>
 800df46:	e012      	b.n	800df6e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00c      	beq.n	800df6e <dhcp_arp_reply+0x46>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	795b      	ldrb	r3, [r3, #5]
 800df58:	2b08      	cmp	r3, #8
 800df5a:	d108      	bne.n	800df6e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	69db      	ldr	r3, [r3, #28]
 800df64:	429a      	cmp	r2, r3
 800df66:	d102      	bne.n	800df6e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f809 	bl	800df80 <dhcp_decline>
    }
  }
}
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	0801d438 	.word	0x0801d438
 800df78:	0801d538 	.word	0x0801d538
 800df7c:	0801d4b4 	.word	0x0801d4b4

0800df80 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800df80:	b5b0      	push	{r4, r5, r7, lr}
 800df82:	b08a      	sub	sp, #40	; 0x28
 800df84:	af02      	add	r7, sp, #8
 800df86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800df8e:	210c      	movs	r1, #12
 800df90:	69b8      	ldr	r0, [r7, #24]
 800df92:	f000 fc6f 	bl	800e874 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800df96:	f107 030c 	add.w	r3, r7, #12
 800df9a:	2204      	movs	r2, #4
 800df9c:	69b9      	ldr	r1, [r7, #24]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f001 f8f2 	bl	800f188 <dhcp_create_msg>
 800dfa4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d035      	beq.n	800e018 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800dfb2:	89b8      	ldrh	r0, [r7, #12]
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dfba:	2304      	movs	r3, #4
 800dfbc:	2232      	movs	r2, #50	; 0x32
 800dfbe:	f000 fc73 	bl	800e8a8 <dhcp_option>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800dfc6:	89bc      	ldrh	r4, [r7, #12]
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7ff fb45 	bl	800d662 <lwip_htonl>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	461a      	mov	r2, r3
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 fcee 	bl	800e9c0 <dhcp_option_long>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dfe8:	89b8      	ldrh	r0, [r7, #12]
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	33f0      	adds	r3, #240	; 0xf0
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	4619      	mov	r1, r3
 800dff2:	f001 f99f 	bl	800f334 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800dff6:	4b19      	ldr	r3, [pc, #100]	; (800e05c <dhcp_decline+0xdc>)
 800dff8:	6818      	ldr	r0, [r3, #0]
 800dffa:	4b19      	ldr	r3, [pc, #100]	; (800e060 <dhcp_decline+0xe0>)
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	2343      	movs	r3, #67	; 0x43
 800e004:	4a17      	ldr	r2, [pc, #92]	; (800e064 <dhcp_decline+0xe4>)
 800e006:	6979      	ldr	r1, [r7, #20]
 800e008:	f00b fbe6 	bl	80197d8 <udp_sendto_if_src>
 800e00c:	4603      	mov	r3, r0
 800e00e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e010:	6978      	ldr	r0, [r7, #20]
 800e012:	f005 f979 	bl	8013308 <pbuf_free>
 800e016:	e001      	b.n	800e01c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e018:	23ff      	movs	r3, #255	; 0xff
 800e01a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	799b      	ldrb	r3, [r3, #6]
 800e020:	2bff      	cmp	r3, #255	; 0xff
 800e022:	d005      	beq.n	800e030 <dhcp_decline+0xb0>
    dhcp->tries++;
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	799b      	ldrb	r3, [r3, #6]
 800e028:	3301      	adds	r3, #1
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800e030:	f242 7310 	movw	r3, #10000	; 0x2710
 800e034:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e036:	89fb      	ldrh	r3, [r7, #14]
 800e038:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e03c:	4a0a      	ldr	r2, [pc, #40]	; (800e068 <dhcp_decline+0xe8>)
 800e03e:	fb82 1203 	smull	r1, r2, r2, r3
 800e042:	1152      	asrs	r2, r2, #5
 800e044:	17db      	asrs	r3, r3, #31
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	b29a      	uxth	r2, r3
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e04e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3720      	adds	r7, #32
 800e056:	46bd      	mov	sp, r7
 800e058:	bdb0      	pop	{r4, r5, r7, pc}
 800e05a:	bf00      	nop
 800e05c:	240047d4 	.word	0x240047d4
 800e060:	08020504 	.word	0x08020504
 800e064:	08020508 	.word	0x08020508
 800e068:	10624dd3 	.word	0x10624dd3

0800e06c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08a      	sub	sp, #40	; 0x28
 800e070:	af02      	add	r7, sp, #8
 800e072:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e078:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	2200      	movs	r2, #0
 800e082:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e084:	2106      	movs	r1, #6
 800e086:	69b8      	ldr	r0, [r7, #24]
 800e088:	f000 fbf4 	bl	800e874 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800e08c:	f107 0308 	add.w	r3, r7, #8
 800e090:	2201      	movs	r2, #1
 800e092:	69b9      	ldr	r1, [r7, #24]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f001 f877 	bl	800f188 <dhcp_create_msg>
 800e09a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d04b      	beq.n	800e13a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e0a8:	8938      	ldrh	r0, [r7, #8]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	2239      	movs	r2, #57	; 0x39
 800e0b4:	f000 fbf8 	bl	800e8a8 <dhcp_option>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e0bc:	8938      	ldrh	r0, [r7, #8]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f000 fc47 	bl	800e95c <dhcp_option_short>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e0d2:	8938      	ldrh	r0, [r7, #8]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0da:	2303      	movs	r3, #3
 800e0dc:	2237      	movs	r2, #55	; 0x37
 800e0de:	f000 fbe3 	bl	800e8a8 <dhcp_option>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	77fb      	strb	r3, [r7, #31]
 800e0ea:	e00e      	b.n	800e10a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e0ec:	8938      	ldrh	r0, [r7, #8]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0f4:	7ffb      	ldrb	r3, [r7, #31]
 800e0f6:	4a29      	ldr	r2, [pc, #164]	; (800e19c <dhcp_discover+0x130>)
 800e0f8:	5cd3      	ldrb	r3, [r2, r3]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f000 fc08 	bl	800e910 <dhcp_option_byte>
 800e100:	4603      	mov	r3, r0
 800e102:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e104:	7ffb      	ldrb	r3, [r7, #31]
 800e106:	3301      	adds	r3, #1
 800e108:	77fb      	strb	r3, [r7, #31]
 800e10a:	7ffb      	ldrb	r3, [r7, #31]
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d9ed      	bls.n	800e0ec <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e110:	8938      	ldrh	r0, [r7, #8]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	33f0      	adds	r3, #240	; 0xf0
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	4619      	mov	r1, r3
 800e11a:	f001 f90b 	bl	800f334 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e11e:	4b20      	ldr	r3, [pc, #128]	; (800e1a0 <dhcp_discover+0x134>)
 800e120:	6818      	ldr	r0, [r3, #0]
 800e122:	4b20      	ldr	r3, [pc, #128]	; (800e1a4 <dhcp_discover+0x138>)
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	2343      	movs	r3, #67	; 0x43
 800e12c:	4a1e      	ldr	r2, [pc, #120]	; (800e1a8 <dhcp_discover+0x13c>)
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	f00b fb52 	bl	80197d8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800e134:	6938      	ldr	r0, [r7, #16]
 800e136:	f005 f8e7 	bl	8013308 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	799b      	ldrb	r3, [r3, #6]
 800e13e:	2bff      	cmp	r3, #255	; 0xff
 800e140:	d005      	beq.n	800e14e <dhcp_discover+0xe2>
    dhcp->tries++;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	799b      	ldrb	r3, [r3, #6]
 800e146:	3301      	adds	r3, #1
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	799b      	ldrb	r3, [r3, #6]
 800e152:	2b05      	cmp	r3, #5
 800e154:	d80d      	bhi.n	800e172 <dhcp_discover+0x106>
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	799b      	ldrb	r3, [r3, #6]
 800e15a:	461a      	mov	r2, r3
 800e15c:	2301      	movs	r3, #1
 800e15e:	4093      	lsls	r3, r2
 800e160:	b29b      	uxth	r3, r3
 800e162:	461a      	mov	r2, r3
 800e164:	0152      	lsls	r2, r2, #5
 800e166:	1ad2      	subs	r2, r2, r3
 800e168:	0092      	lsls	r2, r2, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	00db      	lsls	r3, r3, #3
 800e16e:	b29b      	uxth	r3, r3
 800e170:	e001      	b.n	800e176 <dhcp_discover+0x10a>
 800e172:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e176:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e178:	897b      	ldrh	r3, [r7, #10]
 800e17a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e17e:	4a0b      	ldr	r2, [pc, #44]	; (800e1ac <dhcp_discover+0x140>)
 800e180:	fb82 1203 	smull	r1, r2, r2, r3
 800e184:	1152      	asrs	r2, r2, #5
 800e186:	17db      	asrs	r3, r3, #31
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e190:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3720      	adds	r7, #32
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	24000028 	.word	0x24000028
 800e1a0:	240047d4 	.word	0x240047d4
 800e1a4:	08020504 	.word	0x08020504
 800e1a8:	08020508 	.word	0x08020508
 800e1ac:	10624dd3 	.word	0x10624dd3

0800e1b0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b088      	sub	sp, #32
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d107      	bne.n	800e1ce <dhcp_bind+0x1e>
 800e1be:	4b64      	ldr	r3, [pc, #400]	; (800e350 <dhcp_bind+0x1a0>)
 800e1c0:	f240 4215 	movw	r2, #1045	; 0x415
 800e1c4:	4963      	ldr	r1, [pc, #396]	; (800e354 <dhcp_bind+0x1a4>)
 800e1c6:	4864      	ldr	r0, [pc, #400]	; (800e358 <dhcp_bind+0x1a8>)
 800e1c8:	f00d f822 	bl	801b210 <iprintf>
 800e1cc:	e0bc      	b.n	800e348 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d107      	bne.n	800e1ea <dhcp_bind+0x3a>
 800e1da:	4b5d      	ldr	r3, [pc, #372]	; (800e350 <dhcp_bind+0x1a0>)
 800e1dc:	f240 4217 	movw	r2, #1047	; 0x417
 800e1e0:	495e      	ldr	r1, [pc, #376]	; (800e35c <dhcp_bind+0x1ac>)
 800e1e2:	485d      	ldr	r0, [pc, #372]	; (800e358 <dhcp_bind+0x1a8>)
 800e1e4:	f00d f814 	bl	801b210 <iprintf>
 800e1e8:	e0ae      	b.n	800e348 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1f8:	d019      	beq.n	800e22e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fe:	331e      	adds	r3, #30
 800e200:	4a57      	ldr	r2, [pc, #348]	; (800e360 <dhcp_bind+0x1b0>)
 800e202:	fba2 2303 	umull	r2, r3, r2, r3
 800e206:	095b      	lsrs	r3, r3, #5
 800e208:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e210:	d302      	bcc.n	800e218 <dhcp_bind+0x68>
      timeout = 0xffff;
 800e212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e216:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	8a9b      	ldrh	r3, [r3, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d102      	bne.n	800e22e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	2201      	movs	r2, #1
 800e22c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e236:	d01d      	beq.n	800e274 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23c:	331e      	adds	r3, #30
 800e23e:	4a48      	ldr	r2, [pc, #288]	; (800e360 <dhcp_bind+0x1b0>)
 800e240:	fba2 2303 	umull	r2, r3, r2, r3
 800e244:	095b      	lsrs	r3, r3, #5
 800e246:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e24e:	d302      	bcc.n	800e256 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800e250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e254:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	b29a      	uxth	r2, r3
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	895b      	ldrh	r3, [r3, #10]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d102      	bne.n	800e26c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	2201      	movs	r2, #1
 800e26a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	895a      	ldrh	r2, [r3, #10]
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e27c:	d01d      	beq.n	800e2ba <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e282:	331e      	adds	r3, #30
 800e284:	4a36      	ldr	r2, [pc, #216]	; (800e360 <dhcp_bind+0x1b0>)
 800e286:	fba2 2303 	umull	r2, r3, r2, r3
 800e28a:	095b      	lsrs	r3, r3, #5
 800e28c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e294:	d302      	bcc.n	800e29c <dhcp_bind+0xec>
      timeout = 0xffff;
 800e296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e29a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	899b      	ldrh	r3, [r3, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d102      	bne.n	800e2b2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	899a      	ldrh	r2, [r3, #12]
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	895a      	ldrh	r2, [r3, #10]
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	899b      	ldrh	r3, [r3, #12]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d306      	bcc.n	800e2d4 <dhcp_bind+0x124>
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	899b      	ldrh	r3, [r3, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	79db      	ldrb	r3, [r3, #7]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d003      	beq.n	800e2e4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	613b      	str	r3, [r7, #16]
 800e2e2:	e014      	b.n	800e30e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	331c      	adds	r3, #28
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800e2ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	db02      	blt.n	800e2fa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800e2f4:	23ff      	movs	r3, #255	; 0xff
 800e2f6:	613b      	str	r3, [r7, #16]
 800e2f8:	e009      	b.n	800e30e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	2bbf      	cmp	r3, #191	; 0xbf
 800e2fe:	d903      	bls.n	800e308 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800e300:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	e002      	b.n	800e30e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800e308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e30c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e312:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d108      	bne.n	800e32c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	69da      	ldr	r2, [r3, #28]
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	4013      	ands	r3, r2
 800e322:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e32a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e32c:	210a      	movs	r1, #10
 800e32e:	69b8      	ldr	r0, [r7, #24]
 800e330:	f000 faa0 	bl	800e874 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	f103 011c 	add.w	r1, r3, #28
 800e33a:	f107 030c 	add.w	r3, r7, #12
 800e33e:	f107 0210 	add.w	r2, r7, #16
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f004 fad6 	bl	80128f4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	0801d438 	.word	0x0801d438
 800e354:	0801d5b4 	.word	0x0801d5b4
 800e358:	0801d4b4 	.word	0x0801d4b4
 800e35c:	0801d5d0 	.word	0x0801d5d0
 800e360:	88888889 	.word	0x88888889

0800e364 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08a      	sub	sp, #40	; 0x28
 800e368:	af02      	add	r7, sp, #8
 800e36a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e372:	2105      	movs	r1, #5
 800e374:	69b8      	ldr	r0, [r7, #24]
 800e376:	f000 fa7d 	bl	800e874 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e37a:	f107 030c 	add.w	r3, r7, #12
 800e37e:	2203      	movs	r2, #3
 800e380:	69b9      	ldr	r1, [r7, #24]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 ff00 	bl	800f188 <dhcp_create_msg>
 800e388:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d04e      	beq.n	800e42e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e396:	89b8      	ldrh	r0, [r7, #12]
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e39e:	2302      	movs	r3, #2
 800e3a0:	2239      	movs	r2, #57	; 0x39
 800e3a2:	f000 fa81 	bl	800e8a8 <dhcp_option>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e3aa:	89b8      	ldrh	r0, [r7, #12]
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f000 fad0 	bl	800e95c <dhcp_option_short>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e3c0:	89b8      	ldrh	r0, [r7, #12]
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	2237      	movs	r2, #55	; 0x37
 800e3cc:	f000 fa6c 	bl	800e8a8 <dhcp_option>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	77bb      	strb	r3, [r7, #30]
 800e3d8:	e00e      	b.n	800e3f8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e3da:	89b8      	ldrh	r0, [r7, #12]
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e3e2:	7fbb      	ldrb	r3, [r7, #30]
 800e3e4:	4a2a      	ldr	r2, [pc, #168]	; (800e490 <dhcp_renew+0x12c>)
 800e3e6:	5cd3      	ldrb	r3, [r2, r3]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	f000 fa91 	bl	800e910 <dhcp_option_byte>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e3f2:	7fbb      	ldrb	r3, [r7, #30]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	77bb      	strb	r3, [r7, #30]
 800e3f8:	7fbb      	ldrb	r3, [r7, #30]
 800e3fa:	2b02      	cmp	r3, #2
 800e3fc:	d9ed      	bls.n	800e3da <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e3fe:	89b8      	ldrh	r0, [r7, #12]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	33f0      	adds	r3, #240	; 0xf0
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	4619      	mov	r1, r3
 800e408:	f000 ff94 	bl	800f334 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e40c:	4b21      	ldr	r3, [pc, #132]	; (800e494 <dhcp_renew+0x130>)
 800e40e:	6818      	ldr	r0, [r3, #0]
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	f103 0218 	add.w	r2, r3, #24
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	2343      	movs	r3, #67	; 0x43
 800e41c:	6979      	ldr	r1, [r7, #20]
 800e41e:	f00b f967 	bl	80196f0 <udp_sendto_if>
 800e422:	4603      	mov	r3, r0
 800e424:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f004 ff6e 	bl	8013308 <pbuf_free>
 800e42c:	e001      	b.n	800e432 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e42e:	23ff      	movs	r3, #255	; 0xff
 800e430:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	799b      	ldrb	r3, [r3, #6]
 800e436:	2bff      	cmp	r3, #255	; 0xff
 800e438:	d005      	beq.n	800e446 <dhcp_renew+0xe2>
    dhcp->tries++;
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	799b      	ldrb	r3, [r3, #6]
 800e43e:	3301      	adds	r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	799b      	ldrb	r3, [r3, #6]
 800e44a:	2b09      	cmp	r3, #9
 800e44c:	d80a      	bhi.n	800e464 <dhcp_renew+0x100>
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	799b      	ldrb	r3, [r3, #6]
 800e452:	b29b      	uxth	r3, r3
 800e454:	461a      	mov	r2, r3
 800e456:	0152      	lsls	r2, r2, #5
 800e458:	1ad2      	subs	r2, r2, r3
 800e45a:	0092      	lsls	r2, r2, #2
 800e45c:	4413      	add	r3, r2
 800e45e:	011b      	lsls	r3, r3, #4
 800e460:	b29b      	uxth	r3, r3
 800e462:	e001      	b.n	800e468 <dhcp_renew+0x104>
 800e464:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e468:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e46a:	89fb      	ldrh	r3, [r7, #14]
 800e46c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e470:	4a09      	ldr	r2, [pc, #36]	; (800e498 <dhcp_renew+0x134>)
 800e472:	fb82 1203 	smull	r1, r2, r2, r3
 800e476:	1152      	asrs	r2, r2, #5
 800e478:	17db      	asrs	r3, r3, #31
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e482:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3720      	adds	r7, #32
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	24000028 	.word	0x24000028
 800e494:	240047d4 	.word	0x240047d4
 800e498:	10624dd3 	.word	0x10624dd3

0800e49c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08a      	sub	sp, #40	; 0x28
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e4aa:	2104      	movs	r1, #4
 800e4ac:	69b8      	ldr	r0, [r7, #24]
 800e4ae:	f000 f9e1 	bl	800e874 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e4b2:	f107 030c 	add.w	r3, r7, #12
 800e4b6:	2203      	movs	r2, #3
 800e4b8:	69b9      	ldr	r1, [r7, #24]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fe64 	bl	800f188 <dhcp_create_msg>
 800e4c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d04c      	beq.n	800e562 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e4ce:	89b8      	ldrh	r0, [r7, #12]
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	2239      	movs	r2, #57	; 0x39
 800e4da:	f000 f9e5 	bl	800e8a8 <dhcp_option>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e4e2:	89b8      	ldrh	r0, [r7, #12]
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f000 fa34 	bl	800e95c <dhcp_option_short>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e4f8:	89b8      	ldrh	r0, [r7, #12]
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e500:	2303      	movs	r3, #3
 800e502:	2237      	movs	r2, #55	; 0x37
 800e504:	f000 f9d0 	bl	800e8a8 <dhcp_option>
 800e508:	4603      	mov	r3, r0
 800e50a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e50c:	2300      	movs	r3, #0
 800e50e:	77bb      	strb	r3, [r7, #30]
 800e510:	e00e      	b.n	800e530 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e512:	89b8      	ldrh	r0, [r7, #12]
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e51a:	7fbb      	ldrb	r3, [r7, #30]
 800e51c:	4a29      	ldr	r2, [pc, #164]	; (800e5c4 <dhcp_rebind+0x128>)
 800e51e:	5cd3      	ldrb	r3, [r2, r3]
 800e520:	461a      	mov	r2, r3
 800e522:	f000 f9f5 	bl	800e910 <dhcp_option_byte>
 800e526:	4603      	mov	r3, r0
 800e528:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e52a:	7fbb      	ldrb	r3, [r7, #30]
 800e52c:	3301      	adds	r3, #1
 800e52e:	77bb      	strb	r3, [r7, #30]
 800e530:	7fbb      	ldrb	r3, [r7, #30]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d9ed      	bls.n	800e512 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e536:	89b8      	ldrh	r0, [r7, #12]
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	33f0      	adds	r3, #240	; 0xf0
 800e53c:	697a      	ldr	r2, [r7, #20]
 800e53e:	4619      	mov	r1, r3
 800e540:	f000 fef8 	bl	800f334 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e544:	4b20      	ldr	r3, [pc, #128]	; (800e5c8 <dhcp_rebind+0x12c>)
 800e546:	6818      	ldr	r0, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	2343      	movs	r3, #67	; 0x43
 800e54e:	4a1f      	ldr	r2, [pc, #124]	; (800e5cc <dhcp_rebind+0x130>)
 800e550:	6979      	ldr	r1, [r7, #20]
 800e552:	f00b f8cd 	bl	80196f0 <udp_sendto_if>
 800e556:	4603      	mov	r3, r0
 800e558:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e55a:	6978      	ldr	r0, [r7, #20]
 800e55c:	f004 fed4 	bl	8013308 <pbuf_free>
 800e560:	e001      	b.n	800e566 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e562:	23ff      	movs	r3, #255	; 0xff
 800e564:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	799b      	ldrb	r3, [r3, #6]
 800e56a:	2bff      	cmp	r3, #255	; 0xff
 800e56c:	d005      	beq.n	800e57a <dhcp_rebind+0xde>
    dhcp->tries++;
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	799b      	ldrb	r3, [r3, #6]
 800e572:	3301      	adds	r3, #1
 800e574:	b2da      	uxtb	r2, r3
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	799b      	ldrb	r3, [r3, #6]
 800e57e:	2b09      	cmp	r3, #9
 800e580:	d80a      	bhi.n	800e598 <dhcp_rebind+0xfc>
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	799b      	ldrb	r3, [r3, #6]
 800e586:	b29b      	uxth	r3, r3
 800e588:	461a      	mov	r2, r3
 800e58a:	0152      	lsls	r2, r2, #5
 800e58c:	1ad2      	subs	r2, r2, r3
 800e58e:	0092      	lsls	r2, r2, #2
 800e590:	4413      	add	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	b29b      	uxth	r3, r3
 800e596:	e001      	b.n	800e59c <dhcp_rebind+0x100>
 800e598:	f242 7310 	movw	r3, #10000	; 0x2710
 800e59c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e59e:	89fb      	ldrh	r3, [r7, #14]
 800e5a0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e5a4:	4a0a      	ldr	r2, [pc, #40]	; (800e5d0 <dhcp_rebind+0x134>)
 800e5a6:	fb82 1203 	smull	r1, r2, r2, r3
 800e5aa:	1152      	asrs	r2, r2, #5
 800e5ac:	17db      	asrs	r3, r3, #31
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e5b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3720      	adds	r7, #32
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	24000028 	.word	0x24000028
 800e5c8:	240047d4 	.word	0x240047d4
 800e5cc:	08020508 	.word	0x08020508
 800e5d0:	10624dd3 	.word	0x10624dd3

0800e5d4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800e5d4:	b5b0      	push	{r4, r5, r7, lr}
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	af02      	add	r7, sp, #8
 800e5da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e5e2:	2103      	movs	r1, #3
 800e5e4:	69b8      	ldr	r0, [r7, #24]
 800e5e6:	f000 f945 	bl	800e874 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e5ea:	f107 030c 	add.w	r3, r7, #12
 800e5ee:	2203      	movs	r2, #3
 800e5f0:	69b9      	ldr	r1, [r7, #24]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fdc8 	bl	800f188 <dhcp_create_msg>
 800e5f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d066      	beq.n	800e6ce <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e606:	89b8      	ldrh	r0, [r7, #12]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e60e:	2302      	movs	r3, #2
 800e610:	2239      	movs	r2, #57	; 0x39
 800e612:	f000 f949 	bl	800e8a8 <dhcp_option>
 800e616:	4603      	mov	r3, r0
 800e618:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e61a:	89b8      	ldrh	r0, [r7, #12]
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	33f0      	adds	r3, #240	; 0xf0
 800e620:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e624:	4619      	mov	r1, r3
 800e626:	f000 f999 	bl	800e95c <dhcp_option_short>
 800e62a:	4603      	mov	r3, r0
 800e62c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e62e:	89b8      	ldrh	r0, [r7, #12]
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e636:	2304      	movs	r3, #4
 800e638:	2232      	movs	r2, #50	; 0x32
 800e63a:	f000 f935 	bl	800e8a8 <dhcp_option>
 800e63e:	4603      	mov	r3, r0
 800e640:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e642:	89bc      	ldrh	r4, [r7, #12]
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	69db      	ldr	r3, [r3, #28]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7ff f807 	bl	800d662 <lwip_htonl>
 800e654:	4603      	mov	r3, r0
 800e656:	461a      	mov	r2, r3
 800e658:	4629      	mov	r1, r5
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 f9b0 	bl	800e9c0 <dhcp_option_long>
 800e660:	4603      	mov	r3, r0
 800e662:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e664:	89b8      	ldrh	r0, [r7, #12]
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e66c:	2303      	movs	r3, #3
 800e66e:	2237      	movs	r2, #55	; 0x37
 800e670:	f000 f91a 	bl	800e8a8 <dhcp_option>
 800e674:	4603      	mov	r3, r0
 800e676:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e678:	2300      	movs	r3, #0
 800e67a:	77bb      	strb	r3, [r7, #30]
 800e67c:	e00e      	b.n	800e69c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e67e:	89b8      	ldrh	r0, [r7, #12]
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e686:	7fbb      	ldrb	r3, [r7, #30]
 800e688:	4a29      	ldr	r2, [pc, #164]	; (800e730 <dhcp_reboot+0x15c>)
 800e68a:	5cd3      	ldrb	r3, [r2, r3]
 800e68c:	461a      	mov	r2, r3
 800e68e:	f000 f93f 	bl	800e910 <dhcp_option_byte>
 800e692:	4603      	mov	r3, r0
 800e694:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e696:	7fbb      	ldrb	r3, [r7, #30]
 800e698:	3301      	adds	r3, #1
 800e69a:	77bb      	strb	r3, [r7, #30]
 800e69c:	7fbb      	ldrb	r3, [r7, #30]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d9ed      	bls.n	800e67e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e6a2:	89b8      	ldrh	r0, [r7, #12]
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	33f0      	adds	r3, #240	; 0xf0
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	f000 fe42 	bl	800f334 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e6b0:	4b20      	ldr	r3, [pc, #128]	; (800e734 <dhcp_reboot+0x160>)
 800e6b2:	6818      	ldr	r0, [r3, #0]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	2343      	movs	r3, #67	; 0x43
 800e6ba:	4a1f      	ldr	r2, [pc, #124]	; (800e738 <dhcp_reboot+0x164>)
 800e6bc:	6979      	ldr	r1, [r7, #20]
 800e6be:	f00b f817 	bl	80196f0 <udp_sendto_if>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e6c6:	6978      	ldr	r0, [r7, #20]
 800e6c8:	f004 fe1e 	bl	8013308 <pbuf_free>
 800e6cc:	e001      	b.n	800e6d2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e6ce:	23ff      	movs	r3, #255	; 0xff
 800e6d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	799b      	ldrb	r3, [r3, #6]
 800e6d6:	2bff      	cmp	r3, #255	; 0xff
 800e6d8:	d005      	beq.n	800e6e6 <dhcp_reboot+0x112>
    dhcp->tries++;
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	799b      	ldrb	r3, [r3, #6]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	799b      	ldrb	r3, [r3, #6]
 800e6ea:	2b09      	cmp	r3, #9
 800e6ec:	d80a      	bhi.n	800e704 <dhcp_reboot+0x130>
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	799b      	ldrb	r3, [r3, #6]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	0152      	lsls	r2, r2, #5
 800e6f8:	1ad2      	subs	r2, r2, r3
 800e6fa:	0092      	lsls	r2, r2, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	b29b      	uxth	r3, r3
 800e702:	e001      	b.n	800e708 <dhcp_reboot+0x134>
 800e704:	f242 7310 	movw	r3, #10000	; 0x2710
 800e708:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e70a:	89fb      	ldrh	r3, [r7, #14]
 800e70c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e710:	4a0a      	ldr	r2, [pc, #40]	; (800e73c <dhcp_reboot+0x168>)
 800e712:	fb82 1203 	smull	r1, r2, r2, r3
 800e716:	1152      	asrs	r2, r2, #5
 800e718:	17db      	asrs	r3, r3, #31
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e722:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3720      	adds	r7, #32
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bdb0      	pop	{r4, r5, r7, pc}
 800e72e:	bf00      	nop
 800e730:	24000028 	.word	0x24000028
 800e734:	240047d4 	.word	0x240047d4
 800e738:	08020508 	.word	0x08020508
 800e73c:	10624dd3 	.word	0x10624dd3

0800e740 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800e740:	b5b0      	push	{r4, r5, r7, lr}
 800e742:	b08a      	sub	sp, #40	; 0x28
 800e744:	af02      	add	r7, sp, #8
 800e746:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	2b00      	cmp	r3, #0
 800e752:	f000 8084 	beq.w	800e85e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	795b      	ldrb	r3, [r3, #5]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 8081 	beq.w	800e862 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	699b      	ldr	r3, [r3, #24]
 800e764:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	2200      	movs	r2, #0
 800e76a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	2200      	movs	r2, #0
 800e770:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	2200      	movs	r2, #0
 800e776:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	2200      	movs	r2, #0
 800e77c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	2200      	movs	r2, #0
 800e782:	631a      	str	r2, [r3, #48]	; 0x30
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	2200      	movs	r2, #0
 800e798:	829a      	strh	r2, [r3, #20]
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	8a9a      	ldrh	r2, [r3, #20]
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	825a      	strh	r2, [r3, #18]
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	8a5a      	ldrh	r2, [r3, #18]
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	821a      	strh	r2, [r3, #16]
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	8a1a      	ldrh	r2, [r3, #16]
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fdec 	bl	800f390 <dhcp_supplied_address>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d03b      	beq.n	800e836 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e7be:	f107 030e 	add.w	r3, r7, #14
 800e7c2:	2207      	movs	r2, #7
 800e7c4:	69f9      	ldr	r1, [r7, #28]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fcde 	bl	800f188 <dhcp_create_msg>
 800e7cc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d030      	beq.n	800e836 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e7da:	89f8      	ldrh	r0, [r7, #14]
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e7e2:	2304      	movs	r3, #4
 800e7e4:	2236      	movs	r2, #54	; 0x36
 800e7e6:	f000 f85f 	bl	800e8a8 <dhcp_option>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e7ee:	89fc      	ldrh	r4, [r7, #14]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe ff32 	bl	800d662 <lwip_htonl>
 800e7fe:	4603      	mov	r3, r0
 800e800:	461a      	mov	r2, r3
 800e802:	4629      	mov	r1, r5
 800e804:	4620      	mov	r0, r4
 800e806:	f000 f8db 	bl	800e9c0 <dhcp_option_long>
 800e80a:	4603      	mov	r3, r0
 800e80c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e80e:	89f8      	ldrh	r0, [r7, #14]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	33f0      	adds	r3, #240	; 0xf0
 800e814:	69ba      	ldr	r2, [r7, #24]
 800e816:	4619      	mov	r1, r3
 800e818:	f000 fd8c 	bl	800f334 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e81c:	4b13      	ldr	r3, [pc, #76]	; (800e86c <dhcp_release_and_stop+0x12c>)
 800e81e:	6818      	ldr	r0, [r3, #0]
 800e820:	f107 0210 	add.w	r2, r7, #16
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	2343      	movs	r3, #67	; 0x43
 800e82a:	69b9      	ldr	r1, [r7, #24]
 800e82c:	f00a ff60 	bl	80196f0 <udp_sendto_if>
      pbuf_free(p_out);
 800e830:	69b8      	ldr	r0, [r7, #24]
 800e832:	f004 fd69 	bl	8013308 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e836:	4b0e      	ldr	r3, [pc, #56]	; (800e870 <dhcp_release_and_stop+0x130>)
 800e838:	4a0d      	ldr	r2, [pc, #52]	; (800e870 <dhcp_release_and_stop+0x130>)
 800e83a:	490d      	ldr	r1, [pc, #52]	; (800e870 <dhcp_release_and_stop+0x130>)
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f004 f859 	bl	80128f4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e842:	2100      	movs	r1, #0
 800e844:	69f8      	ldr	r0, [r7, #28]
 800e846:	f000 f815 	bl	800e874 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	791b      	ldrb	r3, [r3, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d008      	beq.n	800e864 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e852:	f7fe ff71 	bl	800d738 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	2200      	movs	r2, #0
 800e85a:	711a      	strb	r2, [r3, #4]
 800e85c:	e002      	b.n	800e864 <dhcp_release_and_stop+0x124>
    return;
 800e85e:	bf00      	nop
 800e860:	e000      	b.n	800e864 <dhcp_release_and_stop+0x124>
    return;
 800e862:	bf00      	nop
  }
}
 800e864:	3720      	adds	r7, #32
 800e866:	46bd      	mov	sp, r7
 800e868:	bdb0      	pop	{r4, r5, r7, pc}
 800e86a:	bf00      	nop
 800e86c:	240047d4 	.word	0x240047d4
 800e870:	08020504 	.word	0x08020504

0800e874 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	460b      	mov	r3, r1
 800e87e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	795b      	ldrb	r3, [r3, #5]
 800e884:	78fa      	ldrb	r2, [r7, #3]
 800e886:	429a      	cmp	r2, r3
 800e888:	d008      	beq.n	800e89c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	78fa      	ldrb	r2, [r7, #3]
 800e88e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	811a      	strh	r2, [r3, #8]
  }
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6039      	str	r1, [r7, #0]
 800e8b0:	4611      	mov	r1, r2
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	80fb      	strh	r3, [r7, #6]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	717b      	strb	r3, [r7, #5]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e8c0:	88fa      	ldrh	r2, [r7, #6]
 800e8c2:	793b      	ldrb	r3, [r7, #4]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	3302      	adds	r3, #2
 800e8c8:	2b44      	cmp	r3, #68	; 0x44
 800e8ca:	d906      	bls.n	800e8da <dhcp_option+0x32>
 800e8cc:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <dhcp_option+0x5c>)
 800e8ce:	f240 529a 	movw	r2, #1434	; 0x59a
 800e8d2:	490d      	ldr	r1, [pc, #52]	; (800e908 <dhcp_option+0x60>)
 800e8d4:	480d      	ldr	r0, [pc, #52]	; (800e90c <dhcp_option+0x64>)
 800e8d6:	f00c fc9b 	bl	801b210 <iprintf>
  options[options_out_len++] = option_type;
 800e8da:	88fb      	ldrh	r3, [r7, #6]
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	80fa      	strh	r2, [r7, #6]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	797a      	ldrb	r2, [r7, #5]
 800e8e8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800e8ea:	88fb      	ldrh	r3, [r7, #6]
 800e8ec:	1c5a      	adds	r2, r3, #1
 800e8ee:	80fa      	strh	r2, [r7, #6]
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	793a      	ldrb	r2, [r7, #4]
 800e8f8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e8fa:	88fb      	ldrh	r3, [r7, #6]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	0801d438 	.word	0x0801d438
 800e908:	0801d5e8 	.word	0x0801d5e8
 800e90c:	0801d4b4 	.word	0x0801d4b4

0800e910 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	80fb      	strh	r3, [r7, #6]
 800e91c:	4613      	mov	r3, r2
 800e91e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e920:	88fb      	ldrh	r3, [r7, #6]
 800e922:	2b43      	cmp	r3, #67	; 0x43
 800e924:	d906      	bls.n	800e934 <dhcp_option_byte+0x24>
 800e926:	4b0a      	ldr	r3, [pc, #40]	; (800e950 <dhcp_option_byte+0x40>)
 800e928:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800e92c:	4909      	ldr	r1, [pc, #36]	; (800e954 <dhcp_option_byte+0x44>)
 800e92e:	480a      	ldr	r0, [pc, #40]	; (800e958 <dhcp_option_byte+0x48>)
 800e930:	f00c fc6e 	bl	801b210 <iprintf>
  options[options_out_len++] = value;
 800e934:	88fb      	ldrh	r3, [r7, #6]
 800e936:	1c5a      	adds	r2, r3, #1
 800e938:	80fa      	strh	r2, [r7, #6]
 800e93a:	461a      	mov	r2, r3
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	4413      	add	r3, r2
 800e940:	797a      	ldrb	r2, [r7, #5]
 800e942:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e944:	88fb      	ldrh	r3, [r7, #6]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	0801d438 	.word	0x0801d438
 800e954:	0801d62c 	.word	0x0801d62c
 800e958:	0801d4b4 	.word	0x0801d4b4

0800e95c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	6039      	str	r1, [r7, #0]
 800e966:	80fb      	strh	r3, [r7, #6]
 800e968:	4613      	mov	r3, r2
 800e96a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e96c:	88fb      	ldrh	r3, [r7, #6]
 800e96e:	3302      	adds	r3, #2
 800e970:	2b44      	cmp	r3, #68	; 0x44
 800e972:	d906      	bls.n	800e982 <dhcp_option_short+0x26>
 800e974:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <dhcp_option_short+0x58>)
 800e976:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e97a:	490f      	ldr	r1, [pc, #60]	; (800e9b8 <dhcp_option_short+0x5c>)
 800e97c:	480f      	ldr	r0, [pc, #60]	; (800e9bc <dhcp_option_short+0x60>)
 800e97e:	f00c fc47 	bl	801b210 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e982:	88bb      	ldrh	r3, [r7, #4]
 800e984:	0a1b      	lsrs	r3, r3, #8
 800e986:	b29a      	uxth	r2, r3
 800e988:	88fb      	ldrh	r3, [r7, #6]
 800e98a:	1c59      	adds	r1, r3, #1
 800e98c:	80f9      	strh	r1, [r7, #6]
 800e98e:	4619      	mov	r1, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	440b      	add	r3, r1
 800e994:	b2d2      	uxtb	r2, r2
 800e996:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e998:	88fb      	ldrh	r3, [r7, #6]
 800e99a:	1c5a      	adds	r2, r3, #1
 800e99c:	80fa      	strh	r2, [r7, #6]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	88ba      	ldrh	r2, [r7, #4]
 800e9a6:	b2d2      	uxtb	r2, r2
 800e9a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e9aa:	88fb      	ldrh	r3, [r7, #6]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	0801d438 	.word	0x0801d438
 800e9b8:	0801d664 	.word	0x0801d664
 800e9bc:	0801d4b4 	.word	0x0801d4b4

0800e9c0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
 800e9cc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e9ce:	89fb      	ldrh	r3, [r7, #14]
 800e9d0:	3304      	adds	r3, #4
 800e9d2:	2b44      	cmp	r3, #68	; 0x44
 800e9d4:	d906      	bls.n	800e9e4 <dhcp_option_long+0x24>
 800e9d6:	4b19      	ldr	r3, [pc, #100]	; (800ea3c <dhcp_option_long+0x7c>)
 800e9d8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800e9dc:	4918      	ldr	r1, [pc, #96]	; (800ea40 <dhcp_option_long+0x80>)
 800e9de:	4819      	ldr	r0, [pc, #100]	; (800ea44 <dhcp_option_long+0x84>)
 800e9e0:	f00c fc16 	bl	801b210 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	0e1a      	lsrs	r2, r3, #24
 800e9e8:	89fb      	ldrh	r3, [r7, #14]
 800e9ea:	1c59      	adds	r1, r3, #1
 800e9ec:	81f9      	strh	r1, [r7, #14]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	440b      	add	r3, r1
 800e9f4:	b2d2      	uxtb	r2, r2
 800e9f6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	0c1a      	lsrs	r2, r3, #16
 800e9fc:	89fb      	ldrh	r3, [r7, #14]
 800e9fe:	1c59      	adds	r1, r3, #1
 800ea00:	81f9      	strh	r1, [r7, #14]
 800ea02:	4619      	mov	r1, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	440b      	add	r3, r1
 800ea08:	b2d2      	uxtb	r2, r2
 800ea0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	0a1a      	lsrs	r2, r3, #8
 800ea10:	89fb      	ldrh	r3, [r7, #14]
 800ea12:	1c59      	adds	r1, r3, #1
 800ea14:	81f9      	strh	r1, [r7, #14]
 800ea16:	4619      	mov	r1, r3
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	440b      	add	r3, r1
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ea20:	89fb      	ldrh	r3, [r7, #14]
 800ea22:	1c5a      	adds	r2, r3, #1
 800ea24:	81fa      	strh	r2, [r7, #14]
 800ea26:	461a      	mov	r2, r3
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	b2d2      	uxtb	r2, r2
 800ea30:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ea32:	89fb      	ldrh	r3, [r7, #14]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0801d438 	.word	0x0801d438
 800ea40:	0801d6a0 	.word	0x0801d6a0
 800ea44:	0801d4b4 	.word	0x0801d4b4

0800ea48 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b090      	sub	sp, #64	; 0x40
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800ea5a:	2208      	movs	r2, #8
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	48be      	ldr	r0, [pc, #760]	; (800ed58 <dhcp_parse_reply+0x310>)
 800ea60:	f00b ff95 	bl	801a98e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	895b      	ldrh	r3, [r3, #10]
 800ea68:	2b2b      	cmp	r3, #43	; 0x2b
 800ea6a:	d802      	bhi.n	800ea72 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800ea6c:	f06f 0301 	mvn.w	r3, #1
 800ea70:	e2a8      	b.n	800efc4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800ea78:	23f0      	movs	r3, #240	; 0xf0
 800ea7a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	891b      	ldrh	r3, [r3, #8]
 800ea80:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800ea86:	e00c      	b.n	800eaa2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	895b      	ldrh	r3, [r3, #10]
 800ea8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	895b      	ldrh	r3, [r3, #10]
 800ea96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d004      	beq.n	800eab2 <dhcp_parse_reply+0x6a>
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	895b      	ldrh	r3, [r3, #10]
 800eaac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d2ea      	bcs.n	800ea88 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800eab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d102      	bne.n	800eabe <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800eab8:	f06f 0301 	mvn.w	r3, #1
 800eabc:	e282      	b.n	800efc4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800eabe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eac0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800eac2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800eac4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800eacc:	e23a      	b.n	800ef44 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800eace:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ead0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ead2:	4413      	add	r3, r2
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800ead8:	2300      	movs	r3, #0
 800eada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800eade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eae2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800eae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eae6:	3302      	adds	r3, #2
 800eae8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800eaea:	8bfa      	ldrh	r2, [r7, #30]
 800eaec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d202      	bcs.n	800eaf8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800eaf2:	f06f 0301 	mvn.w	r3, #1
 800eaf6:	e265      	b.n	800efc4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800eaf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eafa:	3301      	adds	r3, #1
 800eafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eafe:	8952      	ldrh	r2, [r2, #10]
 800eb00:	4293      	cmp	r3, r2
 800eb02:	da07      	bge.n	800eb14 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800eb04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eb06:	3301      	adds	r3, #1
 800eb08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb0a:	4413      	add	r3, r2
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb12:	e00b      	b.n	800eb2c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d004      	beq.n	800eb26 <dhcp_parse_reply+0xde>
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	e000      	b.n	800eb28 <dhcp_parse_reply+0xe0>
 800eb26:	2300      	movs	r3, #0
 800eb28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800eb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
 800eb36:	2b3b      	cmp	r3, #59	; 0x3b
 800eb38:	f200 812d 	bhi.w	800ed96 <dhcp_parse_reply+0x34e>
 800eb3c:	a201      	add	r2, pc, #4	; (adr r2, 800eb44 <dhcp_parse_reply+0xfc>)
 800eb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb42:	bf00      	nop
 800eb44:	0800ec35 	.word	0x0800ec35
 800eb48:	0800ec45 	.word	0x0800ec45
 800eb4c:	0800ed97 	.word	0x0800ed97
 800eb50:	0800ec67 	.word	0x0800ec67
 800eb54:	0800ed97 	.word	0x0800ed97
 800eb58:	0800ed97 	.word	0x0800ed97
 800eb5c:	0800ed97 	.word	0x0800ed97
 800eb60:	0800ed97 	.word	0x0800ed97
 800eb64:	0800ed97 	.word	0x0800ed97
 800eb68:	0800ed97 	.word	0x0800ed97
 800eb6c:	0800ed97 	.word	0x0800ed97
 800eb70:	0800ed97 	.word	0x0800ed97
 800eb74:	0800ed97 	.word	0x0800ed97
 800eb78:	0800ed97 	.word	0x0800ed97
 800eb7c:	0800ed97 	.word	0x0800ed97
 800eb80:	0800ed97 	.word	0x0800ed97
 800eb84:	0800ed97 	.word	0x0800ed97
 800eb88:	0800ed97 	.word	0x0800ed97
 800eb8c:	0800ed97 	.word	0x0800ed97
 800eb90:	0800ed97 	.word	0x0800ed97
 800eb94:	0800ed97 	.word	0x0800ed97
 800eb98:	0800ed97 	.word	0x0800ed97
 800eb9c:	0800ed97 	.word	0x0800ed97
 800eba0:	0800ed97 	.word	0x0800ed97
 800eba4:	0800ed97 	.word	0x0800ed97
 800eba8:	0800ed97 	.word	0x0800ed97
 800ebac:	0800ed97 	.word	0x0800ed97
 800ebb0:	0800ed97 	.word	0x0800ed97
 800ebb4:	0800ed97 	.word	0x0800ed97
 800ebb8:	0800ed97 	.word	0x0800ed97
 800ebbc:	0800ed97 	.word	0x0800ed97
 800ebc0:	0800ed97 	.word	0x0800ed97
 800ebc4:	0800ed97 	.word	0x0800ed97
 800ebc8:	0800ed97 	.word	0x0800ed97
 800ebcc:	0800ed97 	.word	0x0800ed97
 800ebd0:	0800ed97 	.word	0x0800ed97
 800ebd4:	0800ed97 	.word	0x0800ed97
 800ebd8:	0800ed97 	.word	0x0800ed97
 800ebdc:	0800ed97 	.word	0x0800ed97
 800ebe0:	0800ed97 	.word	0x0800ed97
 800ebe4:	0800ed97 	.word	0x0800ed97
 800ebe8:	0800ed97 	.word	0x0800ed97
 800ebec:	0800ed97 	.word	0x0800ed97
 800ebf0:	0800ed97 	.word	0x0800ed97
 800ebf4:	0800ed97 	.word	0x0800ed97
 800ebf8:	0800ed97 	.word	0x0800ed97
 800ebfc:	0800ed97 	.word	0x0800ed97
 800ec00:	0800ed97 	.word	0x0800ed97
 800ec04:	0800ed97 	.word	0x0800ed97
 800ec08:	0800ed97 	.word	0x0800ed97
 800ec0c:	0800ed97 	.word	0x0800ed97
 800ec10:	0800ec93 	.word	0x0800ec93
 800ec14:	0800ecb5 	.word	0x0800ecb5
 800ec18:	0800ecf1 	.word	0x0800ecf1
 800ec1c:	0800ed13 	.word	0x0800ed13
 800ec20:	0800ed97 	.word	0x0800ed97
 800ec24:	0800ed97 	.word	0x0800ed97
 800ec28:	0800ed97 	.word	0x0800ed97
 800ec2c:	0800ed35 	.word	0x0800ed35
 800ec30:	0800ed75 	.word	0x0800ed75
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800ec42:	e0ac      	b.n	800ed9e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec48:	2b04      	cmp	r3, #4
 800ec4a:	d009      	beq.n	800ec60 <dhcp_parse_reply+0x218>
 800ec4c:	4b43      	ldr	r3, [pc, #268]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ec4e:	f240 622e 	movw	r2, #1582	; 0x62e
 800ec52:	4943      	ldr	r1, [pc, #268]	; (800ed60 <dhcp_parse_reply+0x318>)
 800ec54:	4843      	ldr	r0, [pc, #268]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ec56:	f00c fadb 	bl	801b210 <iprintf>
 800ec5a:	f06f 0305 	mvn.w	r3, #5
 800ec5e:	e1b1      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ec60:	2306      	movs	r3, #6
 800ec62:	623b      	str	r3, [r7, #32]
        break;
 800ec64:	e09b      	b.n	800ed9e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ec66:	2304      	movs	r3, #4
 800ec68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ec6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d209      	bcs.n	800ec8c <dhcp_parse_reply+0x244>
 800ec78:	4b38      	ldr	r3, [pc, #224]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ec7a:	f240 6233 	movw	r2, #1587	; 0x633
 800ec7e:	493a      	ldr	r1, [pc, #232]	; (800ed68 <dhcp_parse_reply+0x320>)
 800ec80:	4838      	ldr	r0, [pc, #224]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ec82:	f00c fac5 	bl	801b210 <iprintf>
 800ec86:	f06f 0305 	mvn.w	r3, #5
 800ec8a:	e19b      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ec8c:	2307      	movs	r3, #7
 800ec8e:	623b      	str	r3, [r7, #32]
        break;
 800ec90:	e085      	b.n	800ed9e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec96:	2b04      	cmp	r3, #4
 800ec98:	d009      	beq.n	800ecae <dhcp_parse_reply+0x266>
 800ec9a:	4b30      	ldr	r3, [pc, #192]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ec9c:	f240 6241 	movw	r2, #1601	; 0x641
 800eca0:	492f      	ldr	r1, [pc, #188]	; (800ed60 <dhcp_parse_reply+0x318>)
 800eca2:	4830      	ldr	r0, [pc, #192]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800eca4:	f00c fab4 	bl	801b210 <iprintf>
 800eca8:	f06f 0305 	mvn.w	r3, #5
 800ecac:	e18a      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	623b      	str	r3, [r7, #32]
        break;
 800ecb2:	e074      	b.n	800ed9e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ecb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d009      	beq.n	800ecd0 <dhcp_parse_reply+0x288>
 800ecbc:	4b27      	ldr	r3, [pc, #156]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ecbe:	f240 624f 	movw	r2, #1615	; 0x64f
 800ecc2:	492a      	ldr	r1, [pc, #168]	; (800ed6c <dhcp_parse_reply+0x324>)
 800ecc4:	4827      	ldr	r0, [pc, #156]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ecc6:	f00c faa3 	bl	801b210 <iprintf>
 800ecca:	f06f 0305 	mvn.w	r3, #5
 800ecce:	e179      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ecd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ecd2:	2bf0      	cmp	r3, #240	; 0xf0
 800ecd4:	d009      	beq.n	800ecea <dhcp_parse_reply+0x2a2>
 800ecd6:	4b21      	ldr	r3, [pc, #132]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ecd8:	f240 6251 	movw	r2, #1617	; 0x651
 800ecdc:	4924      	ldr	r1, [pc, #144]	; (800ed70 <dhcp_parse_reply+0x328>)
 800ecde:	4821      	ldr	r0, [pc, #132]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ece0:	f00c fa96 	bl	801b210 <iprintf>
 800ece4:	f06f 0305 	mvn.w	r3, #5
 800ece8:	e16c      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ecea:	2300      	movs	r3, #0
 800ecec:	623b      	str	r3, [r7, #32]
        break;
 800ecee:	e056      	b.n	800ed9e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ecf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d009      	beq.n	800ed0c <dhcp_parse_reply+0x2c4>
 800ecf8:	4b18      	ldr	r3, [pc, #96]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ecfa:	f240 6255 	movw	r2, #1621	; 0x655
 800ecfe:	491b      	ldr	r1, [pc, #108]	; (800ed6c <dhcp_parse_reply+0x324>)
 800ed00:	4818      	ldr	r0, [pc, #96]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ed02:	f00c fa85 	bl	801b210 <iprintf>
 800ed06:	f06f 0305 	mvn.w	r3, #5
 800ed0a:	e15b      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	623b      	str	r3, [r7, #32]
        break;
 800ed10:	e045      	b.n	800ed9e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ed12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	d009      	beq.n	800ed2e <dhcp_parse_reply+0x2e6>
 800ed1a:	4b10      	ldr	r3, [pc, #64]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ed1c:	f240 6259 	movw	r2, #1625	; 0x659
 800ed20:	490f      	ldr	r1, [pc, #60]	; (800ed60 <dhcp_parse_reply+0x318>)
 800ed22:	4810      	ldr	r0, [pc, #64]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ed24:	f00c fa74 	bl	801b210 <iprintf>
 800ed28:	f06f 0305 	mvn.w	r3, #5
 800ed2c:	e14a      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ed2e:	2302      	movs	r3, #2
 800ed30:	623b      	str	r3, [r7, #32]
        break;
 800ed32:	e034      	b.n	800ed9e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d009      	beq.n	800ed50 <dhcp_parse_reply+0x308>
 800ed3c:	4b07      	ldr	r3, [pc, #28]	; (800ed5c <dhcp_parse_reply+0x314>)
 800ed3e:	f240 625d 	movw	r2, #1629	; 0x65d
 800ed42:	4907      	ldr	r1, [pc, #28]	; (800ed60 <dhcp_parse_reply+0x318>)
 800ed44:	4807      	ldr	r0, [pc, #28]	; (800ed64 <dhcp_parse_reply+0x31c>)
 800ed46:	f00c fa63 	bl	801b210 <iprintf>
 800ed4a:	f06f 0305 	mvn.w	r3, #5
 800ed4e:	e139      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800ed50:	2304      	movs	r3, #4
 800ed52:	623b      	str	r3, [r7, #32]
        break;
 800ed54:	e023      	b.n	800ed9e <dhcp_parse_reply+0x356>
 800ed56:	bf00      	nop
 800ed58:	24005938 	.word	0x24005938
 800ed5c:	0801d438 	.word	0x0801d438
 800ed60:	0801d6dc 	.word	0x0801d6dc
 800ed64:	0801d4b4 	.word	0x0801d4b4
 800ed68:	0801d6e8 	.word	0x0801d6e8
 800ed6c:	0801d6fc 	.word	0x0801d6fc
 800ed70:	0801d708 	.word	0x0801d708
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ed74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d009      	beq.n	800ed90 <dhcp_parse_reply+0x348>
 800ed7c:	4b93      	ldr	r3, [pc, #588]	; (800efcc <dhcp_parse_reply+0x584>)
 800ed7e:	f240 6261 	movw	r2, #1633	; 0x661
 800ed82:	4993      	ldr	r1, [pc, #588]	; (800efd0 <dhcp_parse_reply+0x588>)
 800ed84:	4893      	ldr	r0, [pc, #588]	; (800efd4 <dhcp_parse_reply+0x58c>)
 800ed86:	f00c fa43 	bl	801b210 <iprintf>
 800ed8a:	f06f 0305 	mvn.w	r3, #5
 800ed8e:	e119      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ed90:	2305      	movs	r3, #5
 800ed92:	623b      	str	r3, [r7, #32]
        break;
 800ed94:	e003      	b.n	800ed9e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800ed9c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d103      	bne.n	800edac <dhcp_parse_reply+0x364>
      offset++;
 800eda4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eda6:	3301      	adds	r3, #1
 800eda8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800edaa:	e0a1      	b.n	800eef0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800edac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800edae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb2:	4413      	add	r3, r2
 800edb4:	3302      	adds	r3, #2
 800edb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edba:	db02      	blt.n	800edc2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800edbc:	f06f 0301 	mvn.w	r3, #1
 800edc0:	e100      	b.n	800efc4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800edc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800edca:	4413      	add	r3, r2
 800edcc:	b29b      	uxth	r3, r3
 800edce:	3302      	adds	r3, #2
 800edd0:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800edd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f000 808a 	beq.w	800eef0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800eddc:	2300      	movs	r3, #0
 800edde:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	db02      	blt.n	800edec <dhcp_parse_reply+0x3a4>
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	2b07      	cmp	r3, #7
 800edea:	dd06      	ble.n	800edfa <dhcp_parse_reply+0x3b2>
 800edec:	4b77      	ldr	r3, [pc, #476]	; (800efcc <dhcp_parse_reply+0x584>)
 800edee:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800edf2:	4979      	ldr	r1, [pc, #484]	; (800efd8 <dhcp_parse_reply+0x590>)
 800edf4:	4877      	ldr	r0, [pc, #476]	; (800efd4 <dhcp_parse_reply+0x58c>)
 800edf6:	f00c fa0b 	bl	801b210 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800edfa:	4a78      	ldr	r2, [pc, #480]	; (800efdc <dhcp_parse_reply+0x594>)
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	4413      	add	r3, r2
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d174      	bne.n	800eef0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800ee06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee0a:	2b04      	cmp	r3, #4
 800ee0c:	bf28      	it	cs
 800ee0e:	2304      	movcs	r3, #4
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800ee14:	8bfb      	ldrh	r3, [r7, #30]
 800ee16:	8aba      	ldrh	r2, [r7, #20]
 800ee18:	f107 0108 	add.w	r1, r7, #8
 800ee1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee1e:	f004 fc79 	bl	8013714 <pbuf_copy_partial>
 800ee22:	4603      	mov	r3, r0
 800ee24:	461a      	mov	r2, r3
 800ee26:	8abb      	ldrh	r3, [r7, #20]
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d002      	beq.n	800ee32 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800ee2c:	f06f 0301 	mvn.w	r3, #1
 800ee30:	e0c8      	b.n	800efc4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800ee32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee36:	2b04      	cmp	r3, #4
 800ee38:	d933      	bls.n	800eea2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800ee3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee3e:	f003 0303 	and.w	r3, r3, #3
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d009      	beq.n	800ee5c <dhcp_parse_reply+0x414>
 800ee48:	4b60      	ldr	r3, [pc, #384]	; (800efcc <dhcp_parse_reply+0x584>)
 800ee4a:	f240 6281 	movw	r2, #1665	; 0x681
 800ee4e:	4964      	ldr	r1, [pc, #400]	; (800efe0 <dhcp_parse_reply+0x598>)
 800ee50:	4860      	ldr	r0, [pc, #384]	; (800efd4 <dhcp_parse_reply+0x58c>)
 800ee52:	f00c f9dd 	bl	801b210 <iprintf>
 800ee56:	f06f 0305 	mvn.w	r3, #5
 800ee5a:	e0b3      	b.n	800efc4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800ee5c:	4a5f      	ldr	r2, [pc, #380]	; (800efdc <dhcp_parse_reply+0x594>)
 800ee5e:	6a3b      	ldr	r3, [r7, #32]
 800ee60:	4413      	add	r3, r2
 800ee62:	2201      	movs	r2, #1
 800ee64:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fe fbfa 	bl	800d662 <lwip_htonl>
 800ee6e:	4601      	mov	r1, r0
 800ee70:	4a5c      	ldr	r2, [pc, #368]	; (800efe4 <dhcp_parse_reply+0x59c>)
 800ee72:	6a3b      	ldr	r3, [r7, #32]
 800ee74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800ee78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee7c:	3b04      	subs	r3, #4
 800ee7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800ee82:	8bfb      	ldrh	r3, [r7, #30]
 800ee84:	3304      	adds	r3, #4
 800ee86:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800ee88:	8a7a      	ldrh	r2, [r7, #18]
 800ee8a:	8bfb      	ldrh	r3, [r7, #30]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d202      	bcs.n	800ee96 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800ee90:	f06f 0301 	mvn.w	r3, #1
 800ee94:	e096      	b.n	800efc4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800ee96:	8a7b      	ldrh	r3, [r7, #18]
 800ee98:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800ee9a:	6a3b      	ldr	r3, [r7, #32]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800eea0:	e79e      	b.n	800ede0 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800eea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	d106      	bne.n	800eeb8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fe fbd8 	bl	800d662 <lwip_htonl>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	60bb      	str	r3, [r7, #8]
 800eeb6:	e011      	b.n	800eedc <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800eeb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d009      	beq.n	800eed4 <dhcp_parse_reply+0x48c>
 800eec0:	4b42      	ldr	r3, [pc, #264]	; (800efcc <dhcp_parse_reply+0x584>)
 800eec2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800eec6:	4948      	ldr	r1, [pc, #288]	; (800efe8 <dhcp_parse_reply+0x5a0>)
 800eec8:	4842      	ldr	r0, [pc, #264]	; (800efd4 <dhcp_parse_reply+0x58c>)
 800eeca:	f00c f9a1 	bl	801b210 <iprintf>
 800eece:	f06f 0305 	mvn.w	r3, #5
 800eed2:	e077      	b.n	800efc4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800eed4:	f107 0308 	add.w	r3, r7, #8
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800eedc:	4a3f      	ldr	r2, [pc, #252]	; (800efdc <dhcp_parse_reply+0x594>)
 800eede:	6a3b      	ldr	r3, [r7, #32]
 800eee0:	4413      	add	r3, r2
 800eee2:	2201      	movs	r2, #1
 800eee4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	493e      	ldr	r1, [pc, #248]	; (800efe4 <dhcp_parse_reply+0x59c>)
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	895b      	ldrh	r3, [r3, #10]
 800eef4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d324      	bcc.n	800ef44 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	895b      	ldrh	r3, [r3, #10]
 800eefe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	895b      	ldrh	r3, [r3, #10]
 800ef08:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800ef0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d213      	bcs.n	800ef3e <dhcp_parse_reply+0x4f6>
        q = q->next;
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d109      	bne.n	800ef36 <dhcp_parse_reply+0x4ee>
 800ef22:	4b2a      	ldr	r3, [pc, #168]	; (800efcc <dhcp_parse_reply+0x584>)
 800ef24:	f240 629d 	movw	r2, #1693	; 0x69d
 800ef28:	4930      	ldr	r1, [pc, #192]	; (800efec <dhcp_parse_reply+0x5a4>)
 800ef2a:	482a      	ldr	r0, [pc, #168]	; (800efd4 <dhcp_parse_reply+0x58c>)
 800ef2c:	f00c f970 	bl	801b210 <iprintf>
 800ef30:	f06f 0305 	mvn.w	r3, #5
 800ef34:	e046      	b.n	800efc4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef3c:	e002      	b.n	800ef44 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800ef3e:	f06f 0301 	mvn.w	r3, #1
 800ef42:	e03f      	b.n	800efc4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ef44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00a      	beq.n	800ef60 <dhcp_parse_reply+0x518>
 800ef4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d206      	bcs.n	800ef60 <dhcp_parse_reply+0x518>
 800ef52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef56:	4413      	add	r3, r2
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	2bff      	cmp	r3, #255	; 0xff
 800ef5c:	f47f adb7 	bne.w	800eace <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ef60:	4b1e      	ldr	r3, [pc, #120]	; (800efdc <dhcp_parse_reply+0x594>)
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d018      	beq.n	800ef9a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ef68:	4b1e      	ldr	r3, [pc, #120]	; (800efe4 <dhcp_parse_reply+0x59c>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ef6e:	4b1b      	ldr	r3, [pc, #108]	; (800efdc <dhcp_parse_reply+0x594>)
 800ef70:	2200      	movs	r2, #0
 800ef72:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d102      	bne.n	800ef80 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef7e:	e00c      	b.n	800ef9a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d102      	bne.n	800ef8c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800ef86:	2301      	movs	r3, #1
 800ef88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef8a:	e006      	b.n	800ef9a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2b03      	cmp	r3, #3
 800ef90:	d103      	bne.n	800ef9a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800ef92:	2301      	movs	r3, #1
 800ef94:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800ef96:	2301      	movs	r3, #1
 800ef98:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d006      	beq.n	800efae <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800efa0:	2300      	movs	r3, #0
 800efa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800efa4:	236c      	movs	r3, #108	; 0x6c
 800efa6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800efa8:	23ec      	movs	r3, #236	; 0xec
 800efaa:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800efac:	e569      	b.n	800ea82 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800efae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d006      	beq.n	800efc2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800efb8:	232c      	movs	r3, #44	; 0x2c
 800efba:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800efbc:	236c      	movs	r3, #108	; 0x6c
 800efbe:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800efc0:	e55f      	b.n	800ea82 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3740      	adds	r7, #64	; 0x40
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	0801d438 	.word	0x0801d438
 800efd0:	0801d6dc 	.word	0x0801d6dc
 800efd4:	0801d4b4 	.word	0x0801d4b4
 800efd8:	0801d720 	.word	0x0801d720
 800efdc:	24005938 	.word	0x24005938
 800efe0:	0801d734 	.word	0x0801d734
 800efe4:	24005940 	.word	0x24005940
 800efe8:	0801d74c 	.word	0x0801d74c
 800efec:	0801d760 	.word	0x0801d760

0800eff0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b08a      	sub	sp, #40	; 0x28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	607a      	str	r2, [r7, #4]
 800effc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800effe:	4b5f      	ldr	r3, [pc, #380]	; (800f17c <dhcp_recv+0x18c>)
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f000 809d 	beq.w	800f152 <dhcp_recv+0x162>
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	791b      	ldrb	r3, [r3, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f000 8098 	beq.w	800f152 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	895b      	ldrh	r3, [r3, #10]
 800f026:	2b2b      	cmp	r3, #43	; 0x2b
 800f028:	f240 8095 	bls.w	800f156 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b02      	cmp	r3, #2
 800f032:	f040 8092 	bne.w	800f15a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f036:	2300      	movs	r3, #0
 800f038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f03c:	e012      	b.n	800f064 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800f03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f042:	6a3a      	ldr	r2, [r7, #32]
 800f044:	4413      	add	r3, r2
 800f046:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f04e:	69b9      	ldr	r1, [r7, #24]
 800f050:	440b      	add	r3, r1
 800f052:	7f1b      	ldrb	r3, [r3, #28]
 800f054:	429a      	cmp	r2, r3
 800f056:	f040 8082 	bne.w	800f15e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f05e:	3301      	adds	r3, #1
 800f060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f06a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f06e:	429a      	cmp	r2, r3
 800f070:	d203      	bcs.n	800f07a <dhcp_recv+0x8a>
 800f072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f076:	2b05      	cmp	r3, #5
 800f078:	d9e1      	bls.n	800f03e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fe faef 	bl	800d662 <lwip_htonl>
 800f084:	4602      	mov	r2, r0
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d169      	bne.n	800f162 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800f08e:	69f9      	ldr	r1, [r7, #28]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f7ff fcd9 	bl	800ea48 <dhcp_parse_reply>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d164      	bne.n	800f166 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800f09c:	4b38      	ldr	r3, [pc, #224]	; (800f180 <dhcp_recv+0x190>)
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d062      	beq.n	800f16a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800f0aa:	4b36      	ldr	r3, [pc, #216]	; (800f184 <dhcp_recv+0x194>)
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800f0b0:	7cfb      	ldrb	r3, [r7, #19]
 800f0b2:	2b05      	cmp	r3, #5
 800f0b4:	d12a      	bne.n	800f10c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	795b      	ldrb	r3, [r3, #5]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d112      	bne.n	800f0e4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800f0be:	6979      	ldr	r1, [r7, #20]
 800f0c0:	6a38      	ldr	r0, [r7, #32]
 800f0c2:	f7fe fe05 	bl	800dcd0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800f0c6:	6a3b      	ldr	r3, [r7, #32]
 800f0c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0cc:	f003 0308 	and.w	r3, r3, #8
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d003      	beq.n	800f0dc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800f0d4:	6a38      	ldr	r0, [r7, #32]
 800f0d6:	f7fe fb73 	bl	800d7c0 <dhcp_check>
 800f0da:	e047      	b.n	800f16c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800f0dc:	6a38      	ldr	r0, [r7, #32]
 800f0de:	f7ff f867 	bl	800e1b0 <dhcp_bind>
 800f0e2:	e043      	b.n	800f16c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	795b      	ldrb	r3, [r3, #5]
 800f0e8:	2b03      	cmp	r3, #3
 800f0ea:	d007      	beq.n	800f0fc <dhcp_recv+0x10c>
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	795b      	ldrb	r3, [r3, #5]
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d003      	beq.n	800f0fc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f0f8:	2b05      	cmp	r3, #5
 800f0fa:	d137      	bne.n	800f16c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800f0fc:	6979      	ldr	r1, [r7, #20]
 800f0fe:	6a38      	ldr	r0, [r7, #32]
 800f100:	f7fe fde6 	bl	800dcd0 <dhcp_handle_ack>
      dhcp_bind(netif);
 800f104:	6a38      	ldr	r0, [r7, #32]
 800f106:	f7ff f853 	bl	800e1b0 <dhcp_bind>
 800f10a:	e02f      	b.n	800f16c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800f10c:	7cfb      	ldrb	r3, [r7, #19]
 800f10e:	2b06      	cmp	r3, #6
 800f110:	d113      	bne.n	800f13a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800f116:	2b03      	cmp	r3, #3
 800f118:	d00b      	beq.n	800f132 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	795b      	ldrb	r3, [r3, #5]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d007      	beq.n	800f132 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f126:	2b04      	cmp	r3, #4
 800f128:	d003      	beq.n	800f132 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	795b      	ldrb	r3, [r3, #5]
 800f12e:	2b05      	cmp	r3, #5
 800f130:	d103      	bne.n	800f13a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800f132:	6a38      	ldr	r0, [r7, #32]
 800f134:	f7fe fb2a 	bl	800d78c <dhcp_handle_nak>
 800f138:	e018      	b.n	800f16c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800f13a:	7cfb      	ldrb	r3, [r7, #19]
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d108      	bne.n	800f152 <dhcp_recv+0x162>
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	795b      	ldrb	r3, [r3, #5]
 800f144:	2b06      	cmp	r3, #6
 800f146:	d104      	bne.n	800f152 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800f148:	6979      	ldr	r1, [r7, #20]
 800f14a:	6a38      	ldr	r0, [r7, #32]
 800f14c:	f7fe fb6c 	bl	800d828 <dhcp_handle_offer>
 800f150:	e00c      	b.n	800f16c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800f152:	bf00      	nop
 800f154:	e00a      	b.n	800f16c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f156:	bf00      	nop
 800f158:	e008      	b.n	800f16c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f15a:	bf00      	nop
 800f15c:	e006      	b.n	800f16c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800f15e:	bf00      	nop
 800f160:	e004      	b.n	800f16c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f162:	bf00      	nop
 800f164:	e002      	b.n	800f16c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f166:	bf00      	nop
 800f168:	e000      	b.n	800f16c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f16a:	bf00      	nop
  pbuf_free(p);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f004 f8cb 	bl	8013308 <pbuf_free>
}
 800f172:	bf00      	nop
 800f174:	3728      	adds	r7, #40	; 0x28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	24005960 	.word	0x24005960
 800f180:	24005938 	.word	0x24005938
 800f184:	24005940 	.word	0x24005940

0800f188 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b088      	sub	sp, #32
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	603b      	str	r3, [r7, #0]
 800f194:	4613      	mov	r3, r2
 800f196:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d108      	bne.n	800f1b0 <dhcp_create_msg+0x28>
 800f19e:	4b5f      	ldr	r3, [pc, #380]	; (800f31c <dhcp_create_msg+0x194>)
 800f1a0:	f240 7269 	movw	r2, #1897	; 0x769
 800f1a4:	495e      	ldr	r1, [pc, #376]	; (800f320 <dhcp_create_msg+0x198>)
 800f1a6:	485f      	ldr	r0, [pc, #380]	; (800f324 <dhcp_create_msg+0x19c>)
 800f1a8:	f00c f832 	bl	801b210 <iprintf>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	e0b1      	b.n	800f314 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d108      	bne.n	800f1c8 <dhcp_create_msg+0x40>
 800f1b6:	4b59      	ldr	r3, [pc, #356]	; (800f31c <dhcp_create_msg+0x194>)
 800f1b8:	f240 726a 	movw	r2, #1898	; 0x76a
 800f1bc:	495a      	ldr	r1, [pc, #360]	; (800f328 <dhcp_create_msg+0x1a0>)
 800f1be:	4859      	ldr	r0, [pc, #356]	; (800f324 <dhcp_create_msg+0x19c>)
 800f1c0:	f00c f826 	bl	801b210 <iprintf>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e0a5      	b.n	800f314 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800f1c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1cc:	f44f 719a 	mov.w	r1, #308	; 0x134
 800f1d0:	2036      	movs	r0, #54	; 0x36
 800f1d2:	f003 fdb9 	bl	8012d48 <pbuf_alloc>
 800f1d6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	e098      	b.n	800f314 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	895b      	ldrh	r3, [r3, #10]
 800f1e6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800f1ea:	d206      	bcs.n	800f1fa <dhcp_create_msg+0x72>
 800f1ec:	4b4b      	ldr	r3, [pc, #300]	; (800f31c <dhcp_create_msg+0x194>)
 800f1ee:	f240 7272 	movw	r2, #1906	; 0x772
 800f1f2:	494e      	ldr	r1, [pc, #312]	; (800f32c <dhcp_create_msg+0x1a4>)
 800f1f4:	484b      	ldr	r0, [pc, #300]	; (800f324 <dhcp_create_msg+0x19c>)
 800f1f6:	f00c f80b 	bl	801b210 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800f1fa:	79fb      	ldrb	r3, [r7, #7]
 800f1fc:	2b03      	cmp	r3, #3
 800f1fe:	d103      	bne.n	800f208 <dhcp_create_msg+0x80>
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	795b      	ldrb	r3, [r3, #5]
 800f204:	2b03      	cmp	r3, #3
 800f206:	d10d      	bne.n	800f224 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	799b      	ldrb	r3, [r3, #6]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d105      	bne.n	800f21c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800f210:	f00c f816 	bl	801b240 <rand>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
 800f218:	4b45      	ldr	r3, [pc, #276]	; (800f330 <dhcp_create_msg+0x1a8>)
 800f21a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800f21c:	4b44      	ldr	r3, [pc, #272]	; (800f330 <dhcp_create_msg+0x1a8>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800f22a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800f22e:	2100      	movs	r1, #0
 800f230:	6978      	ldr	r0, [r7, #20]
 800f232:	f00b fbac 	bl	801a98e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2201      	movs	r2, #1
 800f23a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	2201      	movs	r2, #1
 800f240:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4618      	mov	r0, r3
 800f252:	f7fe fa06 	bl	800d662 <lwip_htonl>
 800f256:	4602      	mov	r2, r0
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800f25c:	79fb      	ldrb	r3, [r7, #7]
 800f25e:	2b08      	cmp	r3, #8
 800f260:	d010      	beq.n	800f284 <dhcp_create_msg+0xfc>
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	2b04      	cmp	r3, #4
 800f266:	d00d      	beq.n	800f284 <dhcp_create_msg+0xfc>
 800f268:	79fb      	ldrb	r3, [r7, #7]
 800f26a:	2b07      	cmp	r3, #7
 800f26c:	d00a      	beq.n	800f284 <dhcp_create_msg+0xfc>
 800f26e:	79fb      	ldrb	r3, [r7, #7]
 800f270:	2b03      	cmp	r3, #3
 800f272:	d10c      	bne.n	800f28e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800f278:	2b05      	cmp	r3, #5
 800f27a:	d003      	beq.n	800f284 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	795b      	ldrb	r3, [r3, #5]
 800f280:	2b04      	cmp	r3, #4
 800f282:	d104      	bne.n	800f28e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	3304      	adds	r3, #4
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f28e:	2300      	movs	r3, #0
 800f290:	83fb      	strh	r3, [r7, #30]
 800f292:	e00c      	b.n	800f2ae <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800f294:	8bfa      	ldrh	r2, [r7, #30]
 800f296:	8bfb      	ldrh	r3, [r7, #30]
 800f298:	68f9      	ldr	r1, [r7, #12]
 800f29a:	440a      	add	r2, r1
 800f29c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	460a      	mov	r2, r1
 800f2a6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f2a8:	8bfb      	ldrh	r3, [r7, #30]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	83fb      	strh	r3, [r7, #30]
 800f2ae:	8bfb      	ldrh	r3, [r7, #30]
 800f2b0:	2b05      	cmp	r3, #5
 800f2b2:	d9ef      	bls.n	800f294 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f2bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800f2c6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800f2d0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800f2da:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	2235      	movs	r2, #53	; 0x35
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	f7ff fadd 	bl	800e8a8 <dhcp_option>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2f8:	79fa      	ldrb	r2, [r7, #7]
 800f2fa:	8a7b      	ldrh	r3, [r7, #18]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7ff fb07 	bl	800e910 <dhcp_option_byte>
 800f302:	4603      	mov	r3, r0
 800f304:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	8a7a      	ldrh	r2, [r7, #18]
 800f310:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800f312:	69bb      	ldr	r3, [r7, #24]
}
 800f314:	4618      	mov	r0, r3
 800f316:	3720      	adds	r7, #32
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	0801d438 	.word	0x0801d438
 800f320:	0801d774 	.word	0x0801d774
 800f324:	0801d4b4 	.word	0x0801d4b4
 800f328:	0801d794 	.word	0x0801d794
 800f32c:	0801d7b4 	.word	0x0801d7b4
 800f330:	240047dc 	.word	0x240047dc

0800f334 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	4603      	mov	r3, r0
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800f342:	89fb      	ldrh	r3, [r7, #14]
 800f344:	1c5a      	adds	r2, r3, #1
 800f346:	81fa      	strh	r2, [r7, #14]
 800f348:	461a      	mov	r2, r3
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	4413      	add	r3, r2
 800f34e:	22ff      	movs	r2, #255	; 0xff
 800f350:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f352:	e007      	b.n	800f364 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800f354:	89fb      	ldrh	r3, [r7, #14]
 800f356:	1c5a      	adds	r2, r3, #1
 800f358:	81fa      	strh	r2, [r7, #14]
 800f35a:	461a      	mov	r2, r3
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	4413      	add	r3, r2
 800f360:	2200      	movs	r2, #0
 800f362:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f364:	89fb      	ldrh	r3, [r7, #14]
 800f366:	2b43      	cmp	r3, #67	; 0x43
 800f368:	d904      	bls.n	800f374 <dhcp_option_trailer+0x40>
 800f36a:	89fb      	ldrh	r3, [r7, #14]
 800f36c:	f003 0303 	and.w	r3, r3, #3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <dhcp_option_trailer+0x46>
 800f374:	89fb      	ldrh	r3, [r7, #14]
 800f376:	2b43      	cmp	r3, #67	; 0x43
 800f378:	d9ec      	bls.n	800f354 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800f37a:	89fb      	ldrh	r3, [r7, #14]
 800f37c:	33f0      	adds	r3, #240	; 0xf0
 800f37e:	b29b      	uxth	r3, r3
 800f380:	4619      	mov	r1, r3
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f003 fe3a 	bl	8012ffc <pbuf_realloc>
}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d017      	beq.n	800f3ce <dhcp_supplied_address+0x3e>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d013      	beq.n	800f3ce <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	795b      	ldrb	r3, [r3, #5]
 800f3b0:	2b0a      	cmp	r3, #10
 800f3b2:	d007      	beq.n	800f3c4 <dhcp_supplied_address+0x34>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	795b      	ldrb	r3, [r3, #5]
 800f3b8:	2b05      	cmp	r3, #5
 800f3ba:	d003      	beq.n	800f3c4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f3c0:	2b04      	cmp	r3, #4
 800f3c2:	d101      	bne.n	800f3c8 <dhcp_supplied_address+0x38>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	e000      	b.n	800f3ca <dhcp_supplied_address+0x3a>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	e000      	b.n	800f3d0 <dhcp_supplied_address+0x40>
  }
  return 0;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f3e4:	4915      	ldr	r1, [pc, #84]	; (800f43c <etharp_free_entry+0x60>)
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	005b      	lsls	r3, r3, #1
 800f3ec:	4413      	add	r3, r2
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	440b      	add	r3, r1
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d013      	beq.n	800f420 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f3f8:	4910      	ldr	r1, [pc, #64]	; (800f43c <etharp_free_entry+0x60>)
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	4413      	add	r3, r2
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	440b      	add	r3, r1
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4618      	mov	r0, r3
 800f40a:	f003 ff7d 	bl	8013308 <pbuf_free>
    arp_table[i].q = NULL;
 800f40e:	490b      	ldr	r1, [pc, #44]	; (800f43c <etharp_free_entry+0x60>)
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	4613      	mov	r3, r2
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	4413      	add	r3, r2
 800f418:	00db      	lsls	r3, r3, #3
 800f41a:	440b      	add	r3, r1
 800f41c:	2200      	movs	r2, #0
 800f41e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f420:	4906      	ldr	r1, [pc, #24]	; (800f43c <etharp_free_entry+0x60>)
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	4613      	mov	r3, r2
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	4413      	add	r3, r2
 800f42a:	00db      	lsls	r3, r3, #3
 800f42c:	440b      	add	r3, r1
 800f42e:	3314      	adds	r3, #20
 800f430:	2200      	movs	r2, #0
 800f432:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f434:	bf00      	nop
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	240047e0 	.word	0x240047e0

0800f440 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f446:	2300      	movs	r3, #0
 800f448:	607b      	str	r3, [r7, #4]
 800f44a:	e096      	b.n	800f57a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f44c:	494f      	ldr	r1, [pc, #316]	; (800f58c <etharp_tmr+0x14c>)
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	4613      	mov	r3, r2
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	4413      	add	r3, r2
 800f456:	00db      	lsls	r3, r3, #3
 800f458:	440b      	add	r3, r1
 800f45a:	3314      	adds	r3, #20
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f460:	78fb      	ldrb	r3, [r7, #3]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f000 8086 	beq.w	800f574 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f468:	4948      	ldr	r1, [pc, #288]	; (800f58c <etharp_tmr+0x14c>)
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	4613      	mov	r3, r2
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	4413      	add	r3, r2
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	440b      	add	r3, r1
 800f476:	3312      	adds	r3, #18
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	3301      	adds	r3, #1
 800f47c:	b298      	uxth	r0, r3
 800f47e:	4943      	ldr	r1, [pc, #268]	; (800f58c <etharp_tmr+0x14c>)
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	4613      	mov	r3, r2
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	4413      	add	r3, r2
 800f488:	00db      	lsls	r3, r3, #3
 800f48a:	440b      	add	r3, r1
 800f48c:	3312      	adds	r3, #18
 800f48e:	4602      	mov	r2, r0
 800f490:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f492:	493e      	ldr	r1, [pc, #248]	; (800f58c <etharp_tmr+0x14c>)
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	4613      	mov	r3, r2
 800f498:	005b      	lsls	r3, r3, #1
 800f49a:	4413      	add	r3, r2
 800f49c:	00db      	lsls	r3, r3, #3
 800f49e:	440b      	add	r3, r1
 800f4a0:	3312      	adds	r3, #18
 800f4a2:	881b      	ldrh	r3, [r3, #0]
 800f4a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f4a8:	d215      	bcs.n	800f4d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f4aa:	4938      	ldr	r1, [pc, #224]	; (800f58c <etharp_tmr+0x14c>)
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	4413      	add	r3, r2
 800f4b4:	00db      	lsls	r3, r3, #3
 800f4b6:	440b      	add	r3, r1
 800f4b8:	3314      	adds	r3, #20
 800f4ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d10e      	bne.n	800f4de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f4c0:	4932      	ldr	r1, [pc, #200]	; (800f58c <etharp_tmr+0x14c>)
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	005b      	lsls	r3, r3, #1
 800f4c8:	4413      	add	r3, r2
 800f4ca:	00db      	lsls	r3, r3, #3
 800f4cc:	440b      	add	r3, r1
 800f4ce:	3312      	adds	r3, #18
 800f4d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f4d2:	2b04      	cmp	r3, #4
 800f4d4:	d903      	bls.n	800f4de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff ff80 	bl	800f3dc <etharp_free_entry>
 800f4dc:	e04a      	b.n	800f574 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f4de:	492b      	ldr	r1, [pc, #172]	; (800f58c <etharp_tmr+0x14c>)
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	005b      	lsls	r3, r3, #1
 800f4e6:	4413      	add	r3, r2
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	440b      	add	r3, r1
 800f4ec:	3314      	adds	r3, #20
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	2b03      	cmp	r3, #3
 800f4f2:	d10a      	bne.n	800f50a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f4f4:	4925      	ldr	r1, [pc, #148]	; (800f58c <etharp_tmr+0x14c>)
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	4413      	add	r3, r2
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	440b      	add	r3, r1
 800f502:	3314      	adds	r3, #20
 800f504:	2204      	movs	r2, #4
 800f506:	701a      	strb	r2, [r3, #0]
 800f508:	e034      	b.n	800f574 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f50a:	4920      	ldr	r1, [pc, #128]	; (800f58c <etharp_tmr+0x14c>)
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	4613      	mov	r3, r2
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	4413      	add	r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	440b      	add	r3, r1
 800f518:	3314      	adds	r3, #20
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	2b04      	cmp	r3, #4
 800f51e:	d10a      	bne.n	800f536 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f520:	491a      	ldr	r1, [pc, #104]	; (800f58c <etharp_tmr+0x14c>)
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	4613      	mov	r3, r2
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	440b      	add	r3, r1
 800f52e:	3314      	adds	r3, #20
 800f530:	2202      	movs	r2, #2
 800f532:	701a      	strb	r2, [r3, #0]
 800f534:	e01e      	b.n	800f574 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f536:	4915      	ldr	r1, [pc, #84]	; (800f58c <etharp_tmr+0x14c>)
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4613      	mov	r3, r2
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4413      	add	r3, r2
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	440b      	add	r3, r1
 800f544:	3314      	adds	r3, #20
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d113      	bne.n	800f574 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f54c:	490f      	ldr	r1, [pc, #60]	; (800f58c <etharp_tmr+0x14c>)
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	4613      	mov	r3, r2
 800f552:	005b      	lsls	r3, r3, #1
 800f554:	4413      	add	r3, r2
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	440b      	add	r3, r1
 800f55a:	3308      	adds	r3, #8
 800f55c:	6818      	ldr	r0, [r3, #0]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	4613      	mov	r3, r2
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	4413      	add	r3, r2
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	4a08      	ldr	r2, [pc, #32]	; (800f58c <etharp_tmr+0x14c>)
 800f56a:	4413      	add	r3, r2
 800f56c:	3304      	adds	r3, #4
 800f56e:	4619      	mov	r1, r3
 800f570:	f000 fe72 	bl	8010258 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	3301      	adds	r3, #1
 800f578:	607b      	str	r3, [r7, #4]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b09      	cmp	r3, #9
 800f57e:	f77f af65 	ble.w	800f44c <etharp_tmr+0xc>
      }
    }
  }
}
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	240047e0 	.word	0x240047e0

0800f590 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08a      	sub	sp, #40	; 0x28
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	460b      	mov	r3, r1
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f59e:	230a      	movs	r3, #10
 800f5a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f5a2:	230a      	movs	r3, #10
 800f5a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f5a6:	230a      	movs	r3, #10
 800f5a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f5ae:	230a      	movs	r3, #10
 800f5b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	83bb      	strh	r3, [r7, #28]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	837b      	strh	r3, [r7, #26]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f5be:	2300      	movs	r3, #0
 800f5c0:	843b      	strh	r3, [r7, #32]
 800f5c2:	e0ae      	b.n	800f722 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f5c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5c8:	49a6      	ldr	r1, [pc, #664]	; (800f864 <etharp_find_entry+0x2d4>)
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	4413      	add	r3, r2
 800f5d0:	00db      	lsls	r3, r3, #3
 800f5d2:	440b      	add	r3, r1
 800f5d4:	3314      	adds	r3, #20
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f5da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f5de:	2b0a      	cmp	r3, #10
 800f5e0:	d105      	bne.n	800f5ee <etharp_find_entry+0x5e>
 800f5e2:	7dfb      	ldrb	r3, [r7, #23]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d102      	bne.n	800f5ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f5e8:	8c3b      	ldrh	r3, [r7, #32]
 800f5ea:	847b      	strh	r3, [r7, #34]	; 0x22
 800f5ec:	e095      	b.n	800f71a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f000 8092 	beq.w	800f71a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d009      	beq.n	800f610 <etharp_find_entry+0x80>
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d806      	bhi.n	800f610 <etharp_find_entry+0x80>
 800f602:	4b99      	ldr	r3, [pc, #612]	; (800f868 <etharp_find_entry+0x2d8>)
 800f604:	f44f 7292 	mov.w	r2, #292	; 0x124
 800f608:	4998      	ldr	r1, [pc, #608]	; (800f86c <etharp_find_entry+0x2dc>)
 800f60a:	4899      	ldr	r0, [pc, #612]	; (800f870 <etharp_find_entry+0x2e0>)
 800f60c:	f00b fe00 	bl	801b210 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d020      	beq.n	800f658 <etharp_find_entry+0xc8>
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6819      	ldr	r1, [r3, #0]
 800f61a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f61e:	4891      	ldr	r0, [pc, #580]	; (800f864 <etharp_find_entry+0x2d4>)
 800f620:	4613      	mov	r3, r2
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	4413      	add	r3, r2
 800f626:	00db      	lsls	r3, r3, #3
 800f628:	4403      	add	r3, r0
 800f62a:	3304      	adds	r3, #4
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4299      	cmp	r1, r3
 800f630:	d112      	bne.n	800f658 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d00c      	beq.n	800f652 <etharp_find_entry+0xc2>
 800f638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f63c:	4989      	ldr	r1, [pc, #548]	; (800f864 <etharp_find_entry+0x2d4>)
 800f63e:	4613      	mov	r3, r2
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	4413      	add	r3, r2
 800f644:	00db      	lsls	r3, r3, #3
 800f646:	440b      	add	r3, r1
 800f648:	3308      	adds	r3, #8
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d102      	bne.n	800f658 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f652:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f656:	e100      	b.n	800f85a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d140      	bne.n	800f6e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f65e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f662:	4980      	ldr	r1, [pc, #512]	; (800f864 <etharp_find_entry+0x2d4>)
 800f664:	4613      	mov	r3, r2
 800f666:	005b      	lsls	r3, r3, #1
 800f668:	4413      	add	r3, r2
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	440b      	add	r3, r1
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d01a      	beq.n	800f6aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f678:	497a      	ldr	r1, [pc, #488]	; (800f864 <etharp_find_entry+0x2d4>)
 800f67a:	4613      	mov	r3, r2
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	4413      	add	r3, r2
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	440b      	add	r3, r1
 800f684:	3312      	adds	r3, #18
 800f686:	881b      	ldrh	r3, [r3, #0]
 800f688:	8bba      	ldrh	r2, [r7, #28]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d845      	bhi.n	800f71a <etharp_find_entry+0x18a>
            old_queue = i;
 800f68e:	8c3b      	ldrh	r3, [r7, #32]
 800f690:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f696:	4973      	ldr	r1, [pc, #460]	; (800f864 <etharp_find_entry+0x2d4>)
 800f698:	4613      	mov	r3, r2
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	4413      	add	r3, r2
 800f69e:	00db      	lsls	r3, r3, #3
 800f6a0:	440b      	add	r3, r1
 800f6a2:	3312      	adds	r3, #18
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	83bb      	strh	r3, [r7, #28]
 800f6a8:	e037      	b.n	800f71a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f6aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6ae:	496d      	ldr	r1, [pc, #436]	; (800f864 <etharp_find_entry+0x2d4>)
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	4413      	add	r3, r2
 800f6b6:	00db      	lsls	r3, r3, #3
 800f6b8:	440b      	add	r3, r1
 800f6ba:	3312      	adds	r3, #18
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	8b7a      	ldrh	r2, [r7, #26]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d82a      	bhi.n	800f71a <etharp_find_entry+0x18a>
            old_pending = i;
 800f6c4:	8c3b      	ldrh	r3, [r7, #32]
 800f6c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6cc:	4965      	ldr	r1, [pc, #404]	; (800f864 <etharp_find_entry+0x2d4>)
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	4413      	add	r3, r2
 800f6d4:	00db      	lsls	r3, r3, #3
 800f6d6:	440b      	add	r3, r1
 800f6d8:	3312      	adds	r3, #18
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	837b      	strh	r3, [r7, #26]
 800f6de:	e01c      	b.n	800f71a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f6e0:	7dfb      	ldrb	r3, [r7, #23]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d919      	bls.n	800f71a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f6e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6ea:	495e      	ldr	r1, [pc, #376]	; (800f864 <etharp_find_entry+0x2d4>)
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	4413      	add	r3, r2
 800f6f2:	00db      	lsls	r3, r3, #3
 800f6f4:	440b      	add	r3, r1
 800f6f6:	3312      	adds	r3, #18
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	8b3a      	ldrh	r2, [r7, #24]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d80c      	bhi.n	800f71a <etharp_find_entry+0x18a>
            old_stable = i;
 800f700:	8c3b      	ldrh	r3, [r7, #32]
 800f702:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f704:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f708:	4956      	ldr	r1, [pc, #344]	; (800f864 <etharp_find_entry+0x2d4>)
 800f70a:	4613      	mov	r3, r2
 800f70c:	005b      	lsls	r3, r3, #1
 800f70e:	4413      	add	r3, r2
 800f710:	00db      	lsls	r3, r3, #3
 800f712:	440b      	add	r3, r1
 800f714:	3312      	adds	r3, #18
 800f716:	881b      	ldrh	r3, [r3, #0]
 800f718:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f71a:	8c3b      	ldrh	r3, [r7, #32]
 800f71c:	3301      	adds	r3, #1
 800f71e:	b29b      	uxth	r3, r3
 800f720:	843b      	strh	r3, [r7, #32]
 800f722:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f726:	2b09      	cmp	r3, #9
 800f728:	f77f af4c 	ble.w	800f5c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	f003 0302 	and.w	r3, r3, #2
 800f732:	2b00      	cmp	r3, #0
 800f734:	d108      	bne.n	800f748 <etharp_find_entry+0x1b8>
 800f736:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f73a:	2b0a      	cmp	r3, #10
 800f73c:	d107      	bne.n	800f74e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f73e:	7afb      	ldrb	r3, [r7, #11]
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	2b00      	cmp	r3, #0
 800f746:	d102      	bne.n	800f74e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f74c:	e085      	b.n	800f85a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f74e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f752:	2b09      	cmp	r3, #9
 800f754:	dc02      	bgt.n	800f75c <etharp_find_entry+0x1cc>
    i = empty;
 800f756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f758:	843b      	strh	r3, [r7, #32]
 800f75a:	e039      	b.n	800f7d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f75c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f760:	2b09      	cmp	r3, #9
 800f762:	dc14      	bgt.n	800f78e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f766:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f768:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f76c:	493d      	ldr	r1, [pc, #244]	; (800f864 <etharp_find_entry+0x2d4>)
 800f76e:	4613      	mov	r3, r2
 800f770:	005b      	lsls	r3, r3, #1
 800f772:	4413      	add	r3, r2
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	440b      	add	r3, r1
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d018      	beq.n	800f7b0 <etharp_find_entry+0x220>
 800f77e:	4b3a      	ldr	r3, [pc, #232]	; (800f868 <etharp_find_entry+0x2d8>)
 800f780:	f240 126d 	movw	r2, #365	; 0x16d
 800f784:	493b      	ldr	r1, [pc, #236]	; (800f874 <etharp_find_entry+0x2e4>)
 800f786:	483a      	ldr	r0, [pc, #232]	; (800f870 <etharp_find_entry+0x2e0>)
 800f788:	f00b fd42 	bl	801b210 <iprintf>
 800f78c:	e010      	b.n	800f7b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f78e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f792:	2b09      	cmp	r3, #9
 800f794:	dc02      	bgt.n	800f79c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f796:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f798:	843b      	strh	r3, [r7, #32]
 800f79a:	e009      	b.n	800f7b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f79c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f7a0:	2b09      	cmp	r3, #9
 800f7a2:	dc02      	bgt.n	800f7aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f7a4:	8bfb      	ldrh	r3, [r7, #30]
 800f7a6:	843b      	strh	r3, [r7, #32]
 800f7a8:	e002      	b.n	800f7b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7ae:	e054      	b.n	800f85a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f7b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f7b4:	2b09      	cmp	r3, #9
 800f7b6:	dd06      	ble.n	800f7c6 <etharp_find_entry+0x236>
 800f7b8:	4b2b      	ldr	r3, [pc, #172]	; (800f868 <etharp_find_entry+0x2d8>)
 800f7ba:	f240 127f 	movw	r2, #383	; 0x17f
 800f7be:	492e      	ldr	r1, [pc, #184]	; (800f878 <etharp_find_entry+0x2e8>)
 800f7c0:	482b      	ldr	r0, [pc, #172]	; (800f870 <etharp_find_entry+0x2e0>)
 800f7c2:	f00b fd25 	bl	801b210 <iprintf>
    etharp_free_entry(i);
 800f7c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff fe06 	bl	800f3dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f7d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f7d4:	2b09      	cmp	r3, #9
 800f7d6:	dd06      	ble.n	800f7e6 <etharp_find_entry+0x256>
 800f7d8:	4b23      	ldr	r3, [pc, #140]	; (800f868 <etharp_find_entry+0x2d8>)
 800f7da:	f240 1283 	movw	r2, #387	; 0x183
 800f7de:	4926      	ldr	r1, [pc, #152]	; (800f878 <etharp_find_entry+0x2e8>)
 800f7e0:	4823      	ldr	r0, [pc, #140]	; (800f870 <etharp_find_entry+0x2e0>)
 800f7e2:	f00b fd15 	bl	801b210 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f7e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7ea:	491e      	ldr	r1, [pc, #120]	; (800f864 <etharp_find_entry+0x2d4>)
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	4413      	add	r3, r2
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	440b      	add	r3, r1
 800f7f6:	3314      	adds	r3, #20
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d006      	beq.n	800f80c <etharp_find_entry+0x27c>
 800f7fe:	4b1a      	ldr	r3, [pc, #104]	; (800f868 <etharp_find_entry+0x2d8>)
 800f800:	f240 1285 	movw	r2, #389	; 0x185
 800f804:	491d      	ldr	r1, [pc, #116]	; (800f87c <etharp_find_entry+0x2ec>)
 800f806:	481a      	ldr	r0, [pc, #104]	; (800f870 <etharp_find_entry+0x2e0>)
 800f808:	f00b fd02 	bl	801b210 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00b      	beq.n	800f82a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f812:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6819      	ldr	r1, [r3, #0]
 800f81a:	4812      	ldr	r0, [pc, #72]	; (800f864 <etharp_find_entry+0x2d4>)
 800f81c:	4613      	mov	r3, r2
 800f81e:	005b      	lsls	r3, r3, #1
 800f820:	4413      	add	r3, r2
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	4403      	add	r3, r0
 800f826:	3304      	adds	r3, #4
 800f828:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f82a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f82e:	490d      	ldr	r1, [pc, #52]	; (800f864 <etharp_find_entry+0x2d4>)
 800f830:	4613      	mov	r3, r2
 800f832:	005b      	lsls	r3, r3, #1
 800f834:	4413      	add	r3, r2
 800f836:	00db      	lsls	r3, r3, #3
 800f838:	440b      	add	r3, r1
 800f83a:	3312      	adds	r3, #18
 800f83c:	2200      	movs	r2, #0
 800f83e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f844:	4907      	ldr	r1, [pc, #28]	; (800f864 <etharp_find_entry+0x2d4>)
 800f846:	4613      	mov	r3, r2
 800f848:	005b      	lsls	r3, r3, #1
 800f84a:	4413      	add	r3, r2
 800f84c:	00db      	lsls	r3, r3, #3
 800f84e:	440b      	add	r3, r1
 800f850:	3308      	adds	r3, #8
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3728      	adds	r7, #40	; 0x28
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	240047e0 	.word	0x240047e0
 800f868:	0801d7f4 	.word	0x0801d7f4
 800f86c:	0801d848 	.word	0x0801d848
 800f870:	0801d888 	.word	0x0801d888
 800f874:	0801d8b0 	.word	0x0801d8b0
 800f878:	0801d8c8 	.word	0x0801d8c8
 800f87c:	0801d8dc 	.word	0x0801d8dc

0800f880 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b088      	sub	sp, #32
 800f884:	af02      	add	r7, sp, #8
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f894:	2b06      	cmp	r3, #6
 800f896:	d006      	beq.n	800f8a6 <etharp_update_arp_entry+0x26>
 800f898:	4b48      	ldr	r3, [pc, #288]	; (800f9bc <etharp_update_arp_entry+0x13c>)
 800f89a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f89e:	4948      	ldr	r1, [pc, #288]	; (800f9c0 <etharp_update_arp_entry+0x140>)
 800f8a0:	4848      	ldr	r0, [pc, #288]	; (800f9c4 <etharp_update_arp_entry+0x144>)
 800f8a2:	f00b fcb5 	bl	801b210 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d012      	beq.n	800f8d2 <etharp_update_arp_entry+0x52>
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00e      	beq.n	800f8d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68f9      	ldr	r1, [r7, #12]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f001 faee 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 800f8c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d105      	bne.n	800f8d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f8ce:	2be0      	cmp	r3, #224	; 0xe0
 800f8d0:	d102      	bne.n	800f8d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f8d2:	f06f 030f 	mvn.w	r3, #15
 800f8d6:	e06c      	b.n	800f9b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	68b8      	ldr	r0, [r7, #8]
 800f8e0:	f7ff fe56 	bl	800f590 <etharp_find_entry>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f8e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	da02      	bge.n	800f8f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f8f0:	8afb      	ldrh	r3, [r7, #22]
 800f8f2:	b25b      	sxtb	r3, r3
 800f8f4:	e05d      	b.n	800f9b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f8f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8fa:	4933      	ldr	r1, [pc, #204]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	4413      	add	r3, r2
 800f902:	00db      	lsls	r3, r3, #3
 800f904:	440b      	add	r3, r1
 800f906:	3314      	adds	r3, #20
 800f908:	2202      	movs	r2, #2
 800f90a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f90c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f910:	492d      	ldr	r1, [pc, #180]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f912:	4613      	mov	r3, r2
 800f914:	005b      	lsls	r3, r3, #1
 800f916:	4413      	add	r3, r2
 800f918:	00db      	lsls	r3, r3, #3
 800f91a:	440b      	add	r3, r1
 800f91c:	3308      	adds	r3, #8
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f922:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f926:	4613      	mov	r3, r2
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	4413      	add	r3, r2
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	3308      	adds	r3, #8
 800f930:	4a25      	ldr	r2, [pc, #148]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f932:	4413      	add	r3, r2
 800f934:	3304      	adds	r3, #4
 800f936:	2206      	movs	r2, #6
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f00b f803 	bl	801a946 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f940:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f944:	4920      	ldr	r1, [pc, #128]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f946:	4613      	mov	r3, r2
 800f948:	005b      	lsls	r3, r3, #1
 800f94a:	4413      	add	r3, r2
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	440b      	add	r3, r1
 800f950:	3312      	adds	r3, #18
 800f952:	2200      	movs	r2, #0
 800f954:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f956:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f95a:	491b      	ldr	r1, [pc, #108]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f95c:	4613      	mov	r3, r2
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	4413      	add	r3, r2
 800f962:	00db      	lsls	r3, r3, #3
 800f964:	440b      	add	r3, r1
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d021      	beq.n	800f9b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f96c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f970:	4915      	ldr	r1, [pc, #84]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f972:	4613      	mov	r3, r2
 800f974:	005b      	lsls	r3, r3, #1
 800f976:	4413      	add	r3, r2
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	440b      	add	r3, r1
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f980:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f984:	4910      	ldr	r1, [pc, #64]	; (800f9c8 <etharp_update_arp_entry+0x148>)
 800f986:	4613      	mov	r3, r2
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	4413      	add	r3, r2
 800f98c:	00db      	lsls	r3, r3, #3
 800f98e:	440b      	add	r3, r1
 800f990:	2200      	movs	r2, #0
 800f992:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800f99a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6939      	ldr	r1, [r7, #16]
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f000 fcf7 	bl	8010398 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f9aa:	6938      	ldr	r0, [r7, #16]
 800f9ac:	f003 fcac 	bl	8013308 <pbuf_free>
  }
  return ERR_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3718      	adds	r7, #24
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	0801d7f4 	.word	0x0801d7f4
 800f9c0:	0801d908 	.word	0x0801d908
 800f9c4:	0801d888 	.word	0x0801d888
 800f9c8:	240047e0 	.word	0x240047e0

0800f9cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	60fb      	str	r3, [r7, #12]
 800f9d8:	e01e      	b.n	800fa18 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f9da:	4913      	ldr	r1, [pc, #76]	; (800fa28 <etharp_cleanup_netif+0x5c>)
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	4613      	mov	r3, r2
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	4413      	add	r3, r2
 800f9e4:	00db      	lsls	r3, r3, #3
 800f9e6:	440b      	add	r3, r1
 800f9e8:	3314      	adds	r3, #20
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f9ee:	7afb      	ldrb	r3, [r7, #11]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00e      	beq.n	800fa12 <etharp_cleanup_netif+0x46>
 800f9f4:	490c      	ldr	r1, [pc, #48]	; (800fa28 <etharp_cleanup_netif+0x5c>)
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	005b      	lsls	r3, r3, #1
 800f9fc:	4413      	add	r3, r2
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	440b      	add	r3, r1
 800fa02:	3308      	adds	r3, #8
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d102      	bne.n	800fa12 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f7ff fce5 	bl	800f3dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3301      	adds	r3, #1
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b09      	cmp	r3, #9
 800fa1c:	dddd      	ble.n	800f9da <etharp_cleanup_netif+0xe>
    }
  }
}
 800fa1e:	bf00      	nop
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	240047e0 	.word	0x240047e0

0800fa2c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fa2c:	b5b0      	push	{r4, r5, r7, lr}
 800fa2e:	b08a      	sub	sp, #40	; 0x28
 800fa30:	af04      	add	r7, sp, #16
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d107      	bne.n	800fa4c <etharp_input+0x20>
 800fa3c:	4b3f      	ldr	r3, [pc, #252]	; (800fb3c <etharp_input+0x110>)
 800fa3e:	f240 228a 	movw	r2, #650	; 0x28a
 800fa42:	493f      	ldr	r1, [pc, #252]	; (800fb40 <etharp_input+0x114>)
 800fa44:	483f      	ldr	r0, [pc, #252]	; (800fb44 <etharp_input+0x118>)
 800fa46:	f00b fbe3 	bl	801b210 <iprintf>
 800fa4a:	e074      	b.n	800fb36 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	881b      	ldrh	r3, [r3, #0]
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa5c:	d10c      	bne.n	800fa78 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fa62:	2b06      	cmp	r3, #6
 800fa64:	d108      	bne.n	800fa78 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d104      	bne.n	800fa78 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	885b      	ldrh	r3, [r3, #2]
 800fa72:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fa74:	2b08      	cmp	r3, #8
 800fa76:	d003      	beq.n	800fa80 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f003 fc45 	bl	8013308 <pbuf_free>
    return;
 800fa7e:	e05a      	b.n	800fb36 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	330e      	adds	r3, #14
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	3318      	adds	r3, #24
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	3304      	adds	r3, #4
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d102      	bne.n	800faa0 <etharp_input+0x74>
    for_us = 0;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	75fb      	strb	r3, [r7, #23]
 800fa9e:	e009      	b.n	800fab4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	3304      	adds	r3, #4
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	bf0c      	ite	eq
 800faac:	2301      	moveq	r3, #1
 800faae:	2300      	movne	r3, #0
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	f103 0208 	add.w	r2, r3, #8
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <etharp_input+0x98>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e000      	b.n	800fac6 <etharp_input+0x9a>
 800fac4:	2302      	movs	r3, #2
 800fac6:	f107 010c 	add.w	r1, r7, #12
 800faca:	6838      	ldr	r0, [r7, #0]
 800facc:	f7ff fed8 	bl	800f880 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	88db      	ldrh	r3, [r3, #6]
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fada:	d003      	beq.n	800fae4 <etharp_input+0xb8>
 800fadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fae0:	d01e      	beq.n	800fb20 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fae2:	e025      	b.n	800fb30 <etharp_input+0x104>
      if (for_us) {
 800fae4:	7dfb      	ldrb	r3, [r7, #23]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d021      	beq.n	800fb2e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fb00:	693a      	ldr	r2, [r7, #16]
 800fb02:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fb04:	2102      	movs	r1, #2
 800fb06:	9103      	str	r1, [sp, #12]
 800fb08:	f107 010c 	add.w	r1, r7, #12
 800fb0c:	9102      	str	r1, [sp, #8]
 800fb0e:	9201      	str	r2, [sp, #4]
 800fb10:	9300      	str	r3, [sp, #0]
 800fb12:	462b      	mov	r3, r5
 800fb14:	4622      	mov	r2, r4
 800fb16:	4601      	mov	r1, r0
 800fb18:	6838      	ldr	r0, [r7, #0]
 800fb1a:	f000 faef 	bl	80100fc <etharp_raw>
      break;
 800fb1e:	e006      	b.n	800fb2e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800fb20:	f107 030c 	add.w	r3, r7, #12
 800fb24:	4619      	mov	r1, r3
 800fb26:	6838      	ldr	r0, [r7, #0]
 800fb28:	f7fe f9fe 	bl	800df28 <dhcp_arp_reply>
      break;
 800fb2c:	e000      	b.n	800fb30 <etharp_input+0x104>
      break;
 800fb2e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f003 fbe9 	bl	8013308 <pbuf_free>
}
 800fb36:	3718      	adds	r7, #24
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb3c:	0801d7f4 	.word	0x0801d7f4
 800fb40:	0801d960 	.word	0x0801d960
 800fb44:	0801d888 	.word	0x0801d888

0800fb48 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af02      	add	r7, sp, #8
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	4613      	mov	r3, r2
 800fb54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fb56:	79fa      	ldrb	r2, [r7, #7]
 800fb58:	4944      	ldr	r1, [pc, #272]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	4413      	add	r3, r2
 800fb60:	00db      	lsls	r3, r3, #3
 800fb62:	440b      	add	r3, r1
 800fb64:	3314      	adds	r3, #20
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d806      	bhi.n	800fb7a <etharp_output_to_arp_index+0x32>
 800fb6c:	4b40      	ldr	r3, [pc, #256]	; (800fc70 <etharp_output_to_arp_index+0x128>)
 800fb6e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800fb72:	4940      	ldr	r1, [pc, #256]	; (800fc74 <etharp_output_to_arp_index+0x12c>)
 800fb74:	4840      	ldr	r0, [pc, #256]	; (800fc78 <etharp_output_to_arp_index+0x130>)
 800fb76:	f00b fb4b 	bl	801b210 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fb7a:	79fa      	ldrb	r2, [r7, #7]
 800fb7c:	493b      	ldr	r1, [pc, #236]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fb7e:	4613      	mov	r3, r2
 800fb80:	005b      	lsls	r3, r3, #1
 800fb82:	4413      	add	r3, r2
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	440b      	add	r3, r1
 800fb88:	3314      	adds	r3, #20
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d153      	bne.n	800fc38 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fb90:	79fa      	ldrb	r2, [r7, #7]
 800fb92:	4936      	ldr	r1, [pc, #216]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fb94:	4613      	mov	r3, r2
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	4413      	add	r3, r2
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	440b      	add	r3, r1
 800fb9e:	3312      	adds	r3, #18
 800fba0:	881b      	ldrh	r3, [r3, #0]
 800fba2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fba6:	d919      	bls.n	800fbdc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fba8:	79fa      	ldrb	r2, [r7, #7]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	4413      	add	r3, r2
 800fbb0:	00db      	lsls	r3, r3, #3
 800fbb2:	4a2e      	ldr	r2, [pc, #184]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fbb4:	4413      	add	r3, r2
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	4619      	mov	r1, r3
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f000 fb4c 	bl	8010258 <etharp_request>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d138      	bne.n	800fc38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fbc6:	79fa      	ldrb	r2, [r7, #7]
 800fbc8:	4928      	ldr	r1, [pc, #160]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fbca:	4613      	mov	r3, r2
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	4413      	add	r3, r2
 800fbd0:	00db      	lsls	r3, r3, #3
 800fbd2:	440b      	add	r3, r1
 800fbd4:	3314      	adds	r3, #20
 800fbd6:	2203      	movs	r2, #3
 800fbd8:	701a      	strb	r2, [r3, #0]
 800fbda:	e02d      	b.n	800fc38 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fbdc:	79fa      	ldrb	r2, [r7, #7]
 800fbde:	4923      	ldr	r1, [pc, #140]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	4413      	add	r3, r2
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	440b      	add	r3, r1
 800fbea:	3312      	adds	r3, #18
 800fbec:	881b      	ldrh	r3, [r3, #0]
 800fbee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fbf2:	d321      	bcc.n	800fc38 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fbf4:	79fa      	ldrb	r2, [r7, #7]
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	4413      	add	r3, r2
 800fbfc:	00db      	lsls	r3, r3, #3
 800fbfe:	4a1b      	ldr	r2, [pc, #108]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fc00:	4413      	add	r3, r2
 800fc02:	1d19      	adds	r1, r3, #4
 800fc04:	79fa      	ldrb	r2, [r7, #7]
 800fc06:	4613      	mov	r3, r2
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	4413      	add	r3, r2
 800fc0c:	00db      	lsls	r3, r3, #3
 800fc0e:	3308      	adds	r3, #8
 800fc10:	4a16      	ldr	r2, [pc, #88]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fc12:	4413      	add	r3, r2
 800fc14:	3304      	adds	r3, #4
 800fc16:	461a      	mov	r2, r3
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 fafb 	bl	8010214 <etharp_request_dst>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d109      	bne.n	800fc38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fc24:	79fa      	ldrb	r2, [r7, #7]
 800fc26:	4911      	ldr	r1, [pc, #68]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	440b      	add	r3, r1
 800fc32:	3314      	adds	r3, #20
 800fc34:	2203      	movs	r2, #3
 800fc36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800fc3e:	79fa      	ldrb	r2, [r7, #7]
 800fc40:	4613      	mov	r3, r2
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	4413      	add	r3, r2
 800fc46:	00db      	lsls	r3, r3, #3
 800fc48:	3308      	adds	r3, #8
 800fc4a:	4a08      	ldr	r2, [pc, #32]	; (800fc6c <etharp_output_to_arp_index+0x124>)
 800fc4c:	4413      	add	r3, r2
 800fc4e:	1d1a      	adds	r2, r3, #4
 800fc50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc54:	9300      	str	r3, [sp, #0]
 800fc56:	4613      	mov	r3, r2
 800fc58:	460a      	mov	r2, r1
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 fb9b 	bl	8010398 <ethernet_output>
 800fc62:	4603      	mov	r3, r0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3710      	adds	r7, #16
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	240047e0 	.word	0x240047e0
 800fc70:	0801d7f4 	.word	0x0801d7f4
 800fc74:	0801d980 	.word	0x0801d980
 800fc78:	0801d888 	.word	0x0801d888

0800fc7c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b08a      	sub	sp, #40	; 0x28
 800fc80:	af02      	add	r7, sp, #8
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <etharp_output+0x24>
 800fc92:	4b73      	ldr	r3, [pc, #460]	; (800fe60 <etharp_output+0x1e4>)
 800fc94:	f240 321e 	movw	r2, #798	; 0x31e
 800fc98:	4972      	ldr	r1, [pc, #456]	; (800fe64 <etharp_output+0x1e8>)
 800fc9a:	4873      	ldr	r0, [pc, #460]	; (800fe68 <etharp_output+0x1ec>)
 800fc9c:	f00b fab8 	bl	801b210 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <etharp_output+0x38>
 800fca6:	4b6e      	ldr	r3, [pc, #440]	; (800fe60 <etharp_output+0x1e4>)
 800fca8:	f240 321f 	movw	r2, #799	; 0x31f
 800fcac:	496f      	ldr	r1, [pc, #444]	; (800fe6c <etharp_output+0x1f0>)
 800fcae:	486e      	ldr	r0, [pc, #440]	; (800fe68 <etharp_output+0x1ec>)
 800fcb0:	f00b faae 	bl	801b210 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <etharp_output+0x4c>
 800fcba:	4b69      	ldr	r3, [pc, #420]	; (800fe60 <etharp_output+0x1e4>)
 800fcbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fcc0:	496b      	ldr	r1, [pc, #428]	; (800fe70 <etharp_output+0x1f4>)
 800fcc2:	4869      	ldr	r0, [pc, #420]	; (800fe68 <etharp_output+0x1ec>)
 800fcc4:	f00b faa4 	bl	801b210 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68f9      	ldr	r1, [r7, #12]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f001 f8e4 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fcda:	4b66      	ldr	r3, [pc, #408]	; (800fe74 <etharp_output+0x1f8>)
 800fcdc:	61fb      	str	r3, [r7, #28]
 800fcde:	e0af      	b.n	800fe40 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fce8:	2be0      	cmp	r3, #224	; 0xe0
 800fcea:	d118      	bne.n	800fd1e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fcec:	2301      	movs	r3, #1
 800fcee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fcf4:	235e      	movs	r3, #94	; 0x5e
 800fcf6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	3302      	adds	r3, #2
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	3303      	adds	r3, #3
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fd16:	f107 0310 	add.w	r3, r7, #16
 800fd1a:	61fb      	str	r3, [r7, #28]
 800fd1c:	e090      	b.n	800fe40 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	3304      	adds	r3, #4
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	405a      	eors	r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4013      	ands	r3, r2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d012      	beq.n	800fd5c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fd3c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d00b      	beq.n	800fd5c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	330c      	adds	r3, #12
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	330c      	adds	r3, #12
 800fd52:	61bb      	str	r3, [r7, #24]
 800fd54:	e002      	b.n	800fd5c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fd56:	f06f 0303 	mvn.w	r3, #3
 800fd5a:	e07d      	b.n	800fe58 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fd5c:	4b46      	ldr	r3, [pc, #280]	; (800fe78 <etharp_output+0x1fc>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	4619      	mov	r1, r3
 800fd62:	4a46      	ldr	r2, [pc, #280]	; (800fe7c <etharp_output+0x200>)
 800fd64:	460b      	mov	r3, r1
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	440b      	add	r3, r1
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	4413      	add	r3, r2
 800fd6e:	3314      	adds	r3, #20
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d925      	bls.n	800fdc2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fd76:	4b40      	ldr	r3, [pc, #256]	; (800fe78 <etharp_output+0x1fc>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4a3f      	ldr	r2, [pc, #252]	; (800fe7c <etharp_output+0x200>)
 800fd7e:	460b      	mov	r3, r1
 800fd80:	005b      	lsls	r3, r3, #1
 800fd82:	440b      	add	r3, r1
 800fd84:	00db      	lsls	r3, r3, #3
 800fd86:	4413      	add	r3, r2
 800fd88:	3308      	adds	r3, #8
 800fd8a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d117      	bne.n	800fdc2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	4b38      	ldr	r3, [pc, #224]	; (800fe78 <etharp_output+0x1fc>)
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	4937      	ldr	r1, [pc, #220]	; (800fe7c <etharp_output+0x200>)
 800fd9e:	4603      	mov	r3, r0
 800fda0:	005b      	lsls	r3, r3, #1
 800fda2:	4403      	add	r3, r0
 800fda4:	00db      	lsls	r3, r3, #3
 800fda6:	440b      	add	r3, r1
 800fda8:	3304      	adds	r3, #4
 800fdaa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d108      	bne.n	800fdc2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fdb0:	4b31      	ldr	r3, [pc, #196]	; (800fe78 <etharp_output+0x1fc>)
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	68b9      	ldr	r1, [r7, #8]
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	f7ff fec5 	bl	800fb48 <etharp_output_to_arp_index>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	e04a      	b.n	800fe58 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	75fb      	strb	r3, [r7, #23]
 800fdc6:	e031      	b.n	800fe2c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fdc8:	7dfa      	ldrb	r2, [r7, #23]
 800fdca:	492c      	ldr	r1, [pc, #176]	; (800fe7c <etharp_output+0x200>)
 800fdcc:	4613      	mov	r3, r2
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	4413      	add	r3, r2
 800fdd2:	00db      	lsls	r3, r3, #3
 800fdd4:	440b      	add	r3, r1
 800fdd6:	3314      	adds	r3, #20
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d923      	bls.n	800fe26 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fdde:	7dfa      	ldrb	r2, [r7, #23]
 800fde0:	4926      	ldr	r1, [pc, #152]	; (800fe7c <etharp_output+0x200>)
 800fde2:	4613      	mov	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	4413      	add	r3, r2
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	440b      	add	r3, r1
 800fdec:	3308      	adds	r3, #8
 800fdee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d117      	bne.n	800fe26 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	6819      	ldr	r1, [r3, #0]
 800fdfa:	7dfa      	ldrb	r2, [r7, #23]
 800fdfc:	481f      	ldr	r0, [pc, #124]	; (800fe7c <etharp_output+0x200>)
 800fdfe:	4613      	mov	r3, r2
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	4413      	add	r3, r2
 800fe04:	00db      	lsls	r3, r3, #3
 800fe06:	4403      	add	r3, r0
 800fe08:	3304      	adds	r3, #4
 800fe0a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fe0c:	4299      	cmp	r1, r3
 800fe0e:	d10a      	bne.n	800fe26 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fe10:	4a19      	ldr	r2, [pc, #100]	; (800fe78 <etharp_output+0x1fc>)
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fe16:	7dfb      	ldrb	r3, [r7, #23]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	68b9      	ldr	r1, [r7, #8]
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff fe93 	bl	800fb48 <etharp_output_to_arp_index>
 800fe22:	4603      	mov	r3, r0
 800fe24:	e018      	b.n	800fe58 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	75fb      	strb	r3, [r7, #23]
 800fe2c:	7dfb      	ldrb	r3, [r7, #23]
 800fe2e:	2b09      	cmp	r3, #9
 800fe30:	d9ca      	bls.n	800fdc8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	69b9      	ldr	r1, [r7, #24]
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f000 f822 	bl	800fe80 <etharp_query>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	e00b      	b.n	800fe58 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800fe46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	68b9      	ldr	r1, [r7, #8]
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 faa1 	bl	8010398 <ethernet_output>
 800fe56:	4603      	mov	r3, r0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3720      	adds	r7, #32
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	0801d7f4 	.word	0x0801d7f4
 800fe64:	0801d960 	.word	0x0801d960
 800fe68:	0801d888 	.word	0x0801d888
 800fe6c:	0801d9b0 	.word	0x0801d9b0
 800fe70:	0801d950 	.word	0x0801d950
 800fe74:	080204f4 	.word	0x080204f4
 800fe78:	240048d0 	.word	0x240048d0
 800fe7c:	240047e0 	.word	0x240047e0

0800fe80 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b08c      	sub	sp, #48	; 0x30
 800fe84:	af02      	add	r7, sp, #8
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	332a      	adds	r3, #42	; 0x2a
 800fe90:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fe92:	23ff      	movs	r3, #255	; 0xff
 800fe94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68f9      	ldr	r1, [r7, #12]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f000 fffa 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10c      	bne.n	800fec8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800feb6:	2be0      	cmp	r3, #224	; 0xe0
 800feb8:	d006      	beq.n	800fec8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d003      	beq.n	800fec8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d102      	bne.n	800fece <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fec8:	f06f 030f 	mvn.w	r3, #15
 800fecc:	e102      	b.n	80100d4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	2101      	movs	r1, #1
 800fed2:	68b8      	ldr	r0, [r7, #8]
 800fed4:	f7ff fb5c 	bl	800f590 <etharp_find_entry>
 800fed8:	4603      	mov	r3, r0
 800feda:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fedc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	da02      	bge.n	800feea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fee4:	8a7b      	ldrh	r3, [r7, #18]
 800fee6:	b25b      	sxtb	r3, r3
 800fee8:	e0f4      	b.n	80100d4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800feea:	8a7b      	ldrh	r3, [r7, #18]
 800feec:	2b7e      	cmp	r3, #126	; 0x7e
 800feee:	d906      	bls.n	800fefe <etharp_query+0x7e>
 800fef0:	4b7a      	ldr	r3, [pc, #488]	; (80100dc <etharp_query+0x25c>)
 800fef2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fef6:	497a      	ldr	r1, [pc, #488]	; (80100e0 <etharp_query+0x260>)
 800fef8:	487a      	ldr	r0, [pc, #488]	; (80100e4 <etharp_query+0x264>)
 800fefa:	f00b f989 	bl	801b210 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fefe:	8a7b      	ldrh	r3, [r7, #18]
 800ff00:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ff02:	7c7a      	ldrb	r2, [r7, #17]
 800ff04:	4978      	ldr	r1, [pc, #480]	; (80100e8 <etharp_query+0x268>)
 800ff06:	4613      	mov	r3, r2
 800ff08:	005b      	lsls	r3, r3, #1
 800ff0a:	4413      	add	r3, r2
 800ff0c:	00db      	lsls	r3, r3, #3
 800ff0e:	440b      	add	r3, r1
 800ff10:	3314      	adds	r3, #20
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d115      	bne.n	800ff44 <etharp_query+0xc4>
    is_new_entry = 1;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ff1c:	7c7a      	ldrb	r2, [r7, #17]
 800ff1e:	4972      	ldr	r1, [pc, #456]	; (80100e8 <etharp_query+0x268>)
 800ff20:	4613      	mov	r3, r2
 800ff22:	005b      	lsls	r3, r3, #1
 800ff24:	4413      	add	r3, r2
 800ff26:	00db      	lsls	r3, r3, #3
 800ff28:	440b      	add	r3, r1
 800ff2a:	3314      	adds	r3, #20
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ff30:	7c7a      	ldrb	r2, [r7, #17]
 800ff32:	496d      	ldr	r1, [pc, #436]	; (80100e8 <etharp_query+0x268>)
 800ff34:	4613      	mov	r3, r2
 800ff36:	005b      	lsls	r3, r3, #1
 800ff38:	4413      	add	r3, r2
 800ff3a:	00db      	lsls	r3, r3, #3
 800ff3c:	440b      	add	r3, r1
 800ff3e:	3308      	adds	r3, #8
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ff44:	7c7a      	ldrb	r2, [r7, #17]
 800ff46:	4968      	ldr	r1, [pc, #416]	; (80100e8 <etharp_query+0x268>)
 800ff48:	4613      	mov	r3, r2
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	4413      	add	r3, r2
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	440b      	add	r3, r1
 800ff52:	3314      	adds	r3, #20
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d011      	beq.n	800ff7e <etharp_query+0xfe>
 800ff5a:	7c7a      	ldrb	r2, [r7, #17]
 800ff5c:	4962      	ldr	r1, [pc, #392]	; (80100e8 <etharp_query+0x268>)
 800ff5e:	4613      	mov	r3, r2
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	4413      	add	r3, r2
 800ff64:	00db      	lsls	r3, r3, #3
 800ff66:	440b      	add	r3, r1
 800ff68:	3314      	adds	r3, #20
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d806      	bhi.n	800ff7e <etharp_query+0xfe>
 800ff70:	4b5a      	ldr	r3, [pc, #360]	; (80100dc <etharp_query+0x25c>)
 800ff72:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ff76:	495d      	ldr	r1, [pc, #372]	; (80100ec <etharp_query+0x26c>)
 800ff78:	485a      	ldr	r0, [pc, #360]	; (80100e4 <etharp_query+0x264>)
 800ff7a:	f00b f949 	bl	801b210 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d102      	bne.n	800ff8a <etharp_query+0x10a>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10c      	bne.n	800ffa4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ff8a:	68b9      	ldr	r1, [r7, #8]
 800ff8c:	68f8      	ldr	r0, [r7, #12]
 800ff8e:	f000 f963 	bl	8010258 <etharp_request>
 800ff92:	4603      	mov	r3, r0
 800ff94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d102      	bne.n	800ffa4 <etharp_query+0x124>
      return result;
 800ff9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ffa2:	e097      	b.n	80100d4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d106      	bne.n	800ffb8 <etharp_query+0x138>
 800ffaa:	4b4c      	ldr	r3, [pc, #304]	; (80100dc <etharp_query+0x25c>)
 800ffac:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ffb0:	494f      	ldr	r1, [pc, #316]	; (80100f0 <etharp_query+0x270>)
 800ffb2:	484c      	ldr	r0, [pc, #304]	; (80100e4 <etharp_query+0x264>)
 800ffb4:	f00b f92c 	bl	801b210 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ffb8:	7c7a      	ldrb	r2, [r7, #17]
 800ffba:	494b      	ldr	r1, [pc, #300]	; (80100e8 <etharp_query+0x268>)
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	005b      	lsls	r3, r3, #1
 800ffc0:	4413      	add	r3, r2
 800ffc2:	00db      	lsls	r3, r3, #3
 800ffc4:	440b      	add	r3, r1
 800ffc6:	3314      	adds	r3, #20
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d918      	bls.n	8010000 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ffce:	4a49      	ldr	r2, [pc, #292]	; (80100f4 <etharp_query+0x274>)
 800ffd0:	7c7b      	ldrb	r3, [r7, #17]
 800ffd2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ffd4:	7c7a      	ldrb	r2, [r7, #17]
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	4413      	add	r3, r2
 800ffdc:	00db      	lsls	r3, r3, #3
 800ffde:	3308      	adds	r3, #8
 800ffe0:	4a41      	ldr	r2, [pc, #260]	; (80100e8 <etharp_query+0x268>)
 800ffe2:	4413      	add	r3, r2
 800ffe4:	1d1a      	adds	r2, r3, #4
 800ffe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	4613      	mov	r3, r2
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	6879      	ldr	r1, [r7, #4]
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f000 f9d0 	bl	8010398 <ethernet_output>
 800fff8:	4603      	mov	r3, r0
 800fffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fffe:	e067      	b.n	80100d0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010000:	7c7a      	ldrb	r2, [r7, #17]
 8010002:	4939      	ldr	r1, [pc, #228]	; (80100e8 <etharp_query+0x268>)
 8010004:	4613      	mov	r3, r2
 8010006:	005b      	lsls	r3, r3, #1
 8010008:	4413      	add	r3, r2
 801000a:	00db      	lsls	r3, r3, #3
 801000c:	440b      	add	r3, r1
 801000e:	3314      	adds	r3, #20
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d15c      	bne.n	80100d0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010016:	2300      	movs	r3, #0
 8010018:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801001e:	e01c      	b.n	801005a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	895a      	ldrh	r2, [r3, #10]
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	891b      	ldrh	r3, [r3, #8]
 8010028:	429a      	cmp	r2, r3
 801002a:	d10a      	bne.n	8010042 <etharp_query+0x1c2>
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d006      	beq.n	8010042 <etharp_query+0x1c2>
 8010034:	4b29      	ldr	r3, [pc, #164]	; (80100dc <etharp_query+0x25c>)
 8010036:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801003a:	492f      	ldr	r1, [pc, #188]	; (80100f8 <etharp_query+0x278>)
 801003c:	4829      	ldr	r0, [pc, #164]	; (80100e4 <etharp_query+0x264>)
 801003e:	f00b f8e7 	bl	801b210 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	7b1b      	ldrb	r3, [r3, #12]
 8010046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <etharp_query+0x1d4>
        copy_needed = 1;
 801004e:	2301      	movs	r3, #1
 8010050:	61bb      	str	r3, [r7, #24]
        break;
 8010052:	e005      	b.n	8010060 <etharp_query+0x1e0>
      }
      p = p->next;
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	61fb      	str	r3, [r7, #28]
    while (p) {
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1df      	bne.n	8010020 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d007      	beq.n	8010076 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	f44f 7120 	mov.w	r1, #640	; 0x280
 801006c:	200e      	movs	r0, #14
 801006e:	f003 fbc3 	bl	80137f8 <pbuf_clone>
 8010072:	61f8      	str	r0, [r7, #28]
 8010074:	e004      	b.n	8010080 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801007a:	69f8      	ldr	r0, [r7, #28]
 801007c:	f003 f9ea 	bl	8013454 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d021      	beq.n	80100ca <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010086:	7c7a      	ldrb	r2, [r7, #17]
 8010088:	4917      	ldr	r1, [pc, #92]	; (80100e8 <etharp_query+0x268>)
 801008a:	4613      	mov	r3, r2
 801008c:	005b      	lsls	r3, r3, #1
 801008e:	4413      	add	r3, r2
 8010090:	00db      	lsls	r3, r3, #3
 8010092:	440b      	add	r3, r1
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00a      	beq.n	80100b0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801009a:	7c7a      	ldrb	r2, [r7, #17]
 801009c:	4912      	ldr	r1, [pc, #72]	; (80100e8 <etharp_query+0x268>)
 801009e:	4613      	mov	r3, r2
 80100a0:	005b      	lsls	r3, r3, #1
 80100a2:	4413      	add	r3, r2
 80100a4:	00db      	lsls	r3, r3, #3
 80100a6:	440b      	add	r3, r1
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f003 f92c 	bl	8013308 <pbuf_free>
      }
      arp_table[i].q = p;
 80100b0:	7c7a      	ldrb	r2, [r7, #17]
 80100b2:	490d      	ldr	r1, [pc, #52]	; (80100e8 <etharp_query+0x268>)
 80100b4:	4613      	mov	r3, r2
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	4413      	add	r3, r2
 80100ba:	00db      	lsls	r3, r3, #3
 80100bc:	440b      	add	r3, r1
 80100be:	69fa      	ldr	r2, [r7, #28]
 80100c0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80100c2:	2300      	movs	r3, #0
 80100c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100c8:	e002      	b.n	80100d0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80100ca:	23ff      	movs	r3, #255	; 0xff
 80100cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80100d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3728      	adds	r7, #40	; 0x28
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	0801d7f4 	.word	0x0801d7f4
 80100e0:	0801d9bc 	.word	0x0801d9bc
 80100e4:	0801d888 	.word	0x0801d888
 80100e8:	240047e0 	.word	0x240047e0
 80100ec:	0801d9cc 	.word	0x0801d9cc
 80100f0:	0801d9b0 	.word	0x0801d9b0
 80100f4:	240048d0 	.word	0x240048d0
 80100f8:	0801d9f4 	.word	0x0801d9f4

080100fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08a      	sub	sp, #40	; 0x28
 8010100:	af02      	add	r7, sp, #8
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801010a:	2300      	movs	r3, #0
 801010c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d106      	bne.n	8010122 <etharp_raw+0x26>
 8010114:	4b3a      	ldr	r3, [pc, #232]	; (8010200 <etharp_raw+0x104>)
 8010116:	f240 4257 	movw	r2, #1111	; 0x457
 801011a:	493a      	ldr	r1, [pc, #232]	; (8010204 <etharp_raw+0x108>)
 801011c:	483a      	ldr	r0, [pc, #232]	; (8010208 <etharp_raw+0x10c>)
 801011e:	f00b f877 	bl	801b210 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010122:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010126:	211c      	movs	r1, #28
 8010128:	200e      	movs	r0, #14
 801012a:	f002 fe0d 	bl	8012d48 <pbuf_alloc>
 801012e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d102      	bne.n	801013c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801013a:	e05d      	b.n	80101f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	895b      	ldrh	r3, [r3, #10]
 8010140:	2b1b      	cmp	r3, #27
 8010142:	d806      	bhi.n	8010152 <etharp_raw+0x56>
 8010144:	4b2e      	ldr	r3, [pc, #184]	; (8010200 <etharp_raw+0x104>)
 8010146:	f240 4263 	movw	r2, #1123	; 0x463
 801014a:	4930      	ldr	r1, [pc, #192]	; (801020c <etharp_raw+0x110>)
 801014c:	482e      	ldr	r0, [pc, #184]	; (8010208 <etharp_raw+0x10c>)
 801014e:	f00b f85f 	bl	801b210 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010158:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801015a:	4618      	mov	r0, r3
 801015c:	f7fd fa6c 	bl	800d638 <lwip_htons>
 8010160:	4603      	mov	r3, r0
 8010162:	461a      	mov	r2, r3
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801016e:	2b06      	cmp	r3, #6
 8010170:	d006      	beq.n	8010180 <etharp_raw+0x84>
 8010172:	4b23      	ldr	r3, [pc, #140]	; (8010200 <etharp_raw+0x104>)
 8010174:	f240 426a 	movw	r2, #1130	; 0x46a
 8010178:	4925      	ldr	r1, [pc, #148]	; (8010210 <etharp_raw+0x114>)
 801017a:	4823      	ldr	r0, [pc, #140]	; (8010208 <etharp_raw+0x10c>)
 801017c:	f00b f848 	bl	801b210 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	3308      	adds	r3, #8
 8010184:	2206      	movs	r2, #6
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	4618      	mov	r0, r3
 801018a:	f00a fbdc 	bl	801a946 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	3312      	adds	r3, #18
 8010192:	2206      	movs	r2, #6
 8010194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010196:	4618      	mov	r0, r3
 8010198:	f00a fbd5 	bl	801a946 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	330e      	adds	r3, #14
 80101a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101a2:	6812      	ldr	r2, [r2, #0]
 80101a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	3318      	adds	r3, #24
 80101aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ac:	6812      	ldr	r2, [r2, #0]
 80101ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	2200      	movs	r2, #0
 80101b4:	701a      	strb	r2, [r3, #0]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f042 0201 	orr.w	r2, r2, #1
 80101bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	2200      	movs	r2, #0
 80101c2:	f042 0208 	orr.w	r2, r2, #8
 80101c6:	709a      	strb	r2, [r3, #2]
 80101c8:	2200      	movs	r2, #0
 80101ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	2206      	movs	r2, #6
 80101d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	2204      	movs	r2, #4
 80101d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80101d8:	f640 0306 	movw	r3, #2054	; 0x806
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	68ba      	ldr	r2, [r7, #8]
 80101e2:	69b9      	ldr	r1, [r7, #24]
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f000 f8d7 	bl	8010398 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80101ea:	69b8      	ldr	r0, [r7, #24]
 80101ec:	f003 f88c 	bl	8013308 <pbuf_free>
  p = NULL;
 80101f0:	2300      	movs	r3, #0
 80101f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80101f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3720      	adds	r7, #32
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	0801d7f4 	.word	0x0801d7f4
 8010204:	0801d960 	.word	0x0801d960
 8010208:	0801d888 	.word	0x0801d888
 801020c:	0801da10 	.word	0x0801da10
 8010210:	0801da44 	.word	0x0801da44

08010214 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b088      	sub	sp, #32
 8010218:	af04      	add	r7, sp, #16
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010230:	2201      	movs	r2, #1
 8010232:	9203      	str	r2, [sp, #12]
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	9202      	str	r2, [sp, #8]
 8010238:	4a06      	ldr	r2, [pc, #24]	; (8010254 <etharp_request_dst+0x40>)
 801023a:	9201      	str	r2, [sp, #4]
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	4603      	mov	r3, r0
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f7ff ff5a 	bl	80100fc <etharp_raw>
 8010248:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801024a:	4618      	mov	r0, r3
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	080204fc 	.word	0x080204fc

08010258 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010262:	4a05      	ldr	r2, [pc, #20]	; (8010278 <etharp_request+0x20>)
 8010264:	6839      	ldr	r1, [r7, #0]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7ff ffd4 	bl	8010214 <etharp_request_dst>
 801026c:	4603      	mov	r3, r0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	080204f4 	.word	0x080204f4

0801027c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010286:	230e      	movs	r3, #14
 8010288:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	895b      	ldrh	r3, [r3, #10]
 801028e:	2b0e      	cmp	r3, #14
 8010290:	d96e      	bls.n	8010370 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	7bdb      	ldrb	r3, [r3, #15]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80102a0:	3301      	adds	r3, #1
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	7b1a      	ldrb	r2, [r3, #12]
 80102b2:	7b5b      	ldrb	r3, [r3, #13]
 80102b4:	021b      	lsls	r3, r3, #8
 80102b6:	4313      	orrs	r3, r2
 80102b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d023      	beq.n	801030e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d10f      	bne.n	80102ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	785b      	ldrb	r3, [r3, #1]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d11b      	bne.n	801030e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80102da:	2b5e      	cmp	r3, #94	; 0x5e
 80102dc:	d117      	bne.n	801030e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	7b5b      	ldrb	r3, [r3, #13]
 80102e2:	f043 0310 	orr.w	r3, r3, #16
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	735a      	strb	r2, [r3, #13]
 80102ec:	e00f      	b.n	801030e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2206      	movs	r2, #6
 80102f2:	4928      	ldr	r1, [pc, #160]	; (8010394 <ethernet_input+0x118>)
 80102f4:	4618      	mov	r0, r3
 80102f6:	f00a fb17 	bl	801a928 <memcmp>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d106      	bne.n	801030e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	7b5b      	ldrb	r3, [r3, #13]
 8010304:	f043 0308 	orr.w	r3, r3, #8
 8010308:	b2da      	uxtb	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801030e:	89fb      	ldrh	r3, [r7, #14]
 8010310:	2b08      	cmp	r3, #8
 8010312:	d003      	beq.n	801031c <ethernet_input+0xa0>
 8010314:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010318:	d014      	beq.n	8010344 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801031a:	e032      	b.n	8010382 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010322:	f003 0308 	and.w	r3, r3, #8
 8010326:	2b00      	cmp	r3, #0
 8010328:	d024      	beq.n	8010374 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801032a:	8afb      	ldrh	r3, [r7, #22]
 801032c:	4619      	mov	r1, r3
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f002 ff64 	bl	80131fc <pbuf_remove_header>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d11e      	bne.n	8010378 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801033a:	6839      	ldr	r1, [r7, #0]
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 fb95 	bl	8010a6c <ip4_input>
      break;
 8010342:	e013      	b.n	801036c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801034a:	f003 0308 	and.w	r3, r3, #8
 801034e:	2b00      	cmp	r3, #0
 8010350:	d014      	beq.n	801037c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010352:	8afb      	ldrh	r3, [r7, #22]
 8010354:	4619      	mov	r1, r3
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f002 ff50 	bl	80131fc <pbuf_remove_header>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d10e      	bne.n	8010380 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff fb61 	bl	800fa2c <etharp_input>
      break;
 801036a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	e00c      	b.n	801038a <ethernet_input+0x10e>
    goto free_and_return;
 8010370:	bf00      	nop
 8010372:	e006      	b.n	8010382 <ethernet_input+0x106>
        goto free_and_return;
 8010374:	bf00      	nop
 8010376:	e004      	b.n	8010382 <ethernet_input+0x106>
        goto free_and_return;
 8010378:	bf00      	nop
 801037a:	e002      	b.n	8010382 <ethernet_input+0x106>
        goto free_and_return;
 801037c:	bf00      	nop
 801037e:	e000      	b.n	8010382 <ethernet_input+0x106>
        goto free_and_return;
 8010380:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f002 ffc0 	bl	8013308 <pbuf_free>
  return ERR_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3718      	adds	r7, #24
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	080204f4 	.word	0x080204f4

08010398 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80103a6:	8c3b      	ldrh	r3, [r7, #32]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fd f945 	bl	800d638 <lwip_htons>
 80103ae:	4603      	mov	r3, r0
 80103b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80103b2:	210e      	movs	r1, #14
 80103b4:	68b8      	ldr	r0, [r7, #8]
 80103b6:	f002 ff11 	bl	80131dc <pbuf_add_header>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d125      	bne.n	801040c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	8afa      	ldrh	r2, [r7, #22]
 80103ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	2206      	movs	r2, #6
 80103d0:	6839      	ldr	r1, [r7, #0]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f00a fab7 	bl	801a946 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	3306      	adds	r3, #6
 80103dc:	2206      	movs	r2, #6
 80103de:	6879      	ldr	r1, [r7, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f00a fab0 	bl	801a946 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103ec:	2b06      	cmp	r3, #6
 80103ee:	d006      	beq.n	80103fe <ethernet_output+0x66>
 80103f0:	4b0a      	ldr	r3, [pc, #40]	; (801041c <ethernet_output+0x84>)
 80103f2:	f240 1233 	movw	r2, #307	; 0x133
 80103f6:	490a      	ldr	r1, [pc, #40]	; (8010420 <ethernet_output+0x88>)
 80103f8:	480a      	ldr	r0, [pc, #40]	; (8010424 <ethernet_output+0x8c>)
 80103fa:	f00a ff09 	bl	801b210 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	699b      	ldr	r3, [r3, #24]
 8010402:	68b9      	ldr	r1, [r7, #8]
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	4798      	blx	r3
 8010408:	4603      	mov	r3, r0
 801040a:	e002      	b.n	8010412 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801040c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801040e:	f06f 0301 	mvn.w	r3, #1
}
 8010412:	4618      	mov	r0, r3
 8010414:	3718      	adds	r7, #24
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	0801da88 	.word	0x0801da88
 8010420:	0801dadc 	.word	0x0801dadc
 8010424:	0801db10 	.word	0x0801db10

08010428 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b08e      	sub	sp, #56	; 0x38
 801042c:	af04      	add	r7, sp, #16
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010432:	4b87      	ldr	r3, [pc, #540]	; (8010650 <icmp_input+0x228>)
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	f003 030f 	and.w	r3, r3, #15
 8010440:	b2db      	uxtb	r3, r3
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	b2db      	uxtb	r3, r3
 8010446:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801044a:	2b13      	cmp	r3, #19
 801044c:	f240 80e8 	bls.w	8010620 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	895b      	ldrh	r3, [r3, #10]
 8010454:	2b03      	cmp	r3, #3
 8010456:	f240 80e5 	bls.w	8010624 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010464:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010468:	2b00      	cmp	r3, #0
 801046a:	f000 80d2 	beq.w	8010612 <icmp_input+0x1ea>
 801046e:	2b08      	cmp	r3, #8
 8010470:	f040 80d2 	bne.w	8010618 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010474:	4b77      	ldr	r3, [pc, #476]	; (8010654 <icmp_input+0x22c>)
 8010476:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010478:	4b75      	ldr	r3, [pc, #468]	; (8010650 <icmp_input+0x228>)
 801047a:	695b      	ldr	r3, [r3, #20]
 801047c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010480:	2be0      	cmp	r3, #224	; 0xe0
 8010482:	f000 80d6 	beq.w	8010632 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010486:	4b72      	ldr	r3, [pc, #456]	; (8010650 <icmp_input+0x228>)
 8010488:	695a      	ldr	r2, [r3, #20]
 801048a:	4b71      	ldr	r3, [pc, #452]	; (8010650 <icmp_input+0x228>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4619      	mov	r1, r3
 8010490:	4610      	mov	r0, r2
 8010492:	f000 fd03 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	f040 80cc 	bne.w	8010636 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	891b      	ldrh	r3, [r3, #8]
 80104a2:	2b07      	cmp	r3, #7
 80104a4:	f240 80c0 	bls.w	8010628 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f9e0 	bl	801086e <inet_chksum_pbuf>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d003      	beq.n	80104bc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f002 ff27 	bl	8013308 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80104ba:	e0c5      	b.n	8010648 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80104bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104be:	330e      	adds	r3, #14
 80104c0:	4619      	mov	r1, r3
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f002 fe8a 	bl	80131dc <pbuf_add_header>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d04b      	beq.n	8010566 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	891a      	ldrh	r2, [r3, #8]
 80104d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104d4:	4413      	add	r3, r2
 80104d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	891b      	ldrh	r3, [r3, #8]
 80104dc:	8b7a      	ldrh	r2, [r7, #26]
 80104de:	429a      	cmp	r2, r3
 80104e0:	f0c0 80ab 	bcc.w	801063a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80104e4:	8b7b      	ldrh	r3, [r7, #26]
 80104e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104ea:	4619      	mov	r1, r3
 80104ec:	200e      	movs	r0, #14
 80104ee:	f002 fc2b 	bl	8012d48 <pbuf_alloc>
 80104f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f000 80a1 	beq.w	801063e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	895b      	ldrh	r3, [r3, #10]
 8010500:	461a      	mov	r2, r3
 8010502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010504:	3308      	adds	r3, #8
 8010506:	429a      	cmp	r2, r3
 8010508:	d203      	bcs.n	8010512 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801050a:	6978      	ldr	r0, [r7, #20]
 801050c:	f002 fefc 	bl	8013308 <pbuf_free>
          goto icmperr;
 8010510:	e096      	b.n	8010640 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801051a:	4618      	mov	r0, r3
 801051c:	f00a fa13 	bl	801a946 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010522:	4619      	mov	r1, r3
 8010524:	6978      	ldr	r0, [r7, #20]
 8010526:	f002 fe69 	bl	80131fc <pbuf_remove_header>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d009      	beq.n	8010544 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010530:	4b49      	ldr	r3, [pc, #292]	; (8010658 <icmp_input+0x230>)
 8010532:	22b6      	movs	r2, #182	; 0xb6
 8010534:	4949      	ldr	r1, [pc, #292]	; (801065c <icmp_input+0x234>)
 8010536:	484a      	ldr	r0, [pc, #296]	; (8010660 <icmp_input+0x238>)
 8010538:	f00a fe6a 	bl	801b210 <iprintf>
          pbuf_free(r);
 801053c:	6978      	ldr	r0, [r7, #20]
 801053e:	f002 fee3 	bl	8013308 <pbuf_free>
          goto icmperr;
 8010542:	e07d      	b.n	8010640 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010544:	6879      	ldr	r1, [r7, #4]
 8010546:	6978      	ldr	r0, [r7, #20]
 8010548:	f003 f812 	bl	8013570 <pbuf_copy>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d003      	beq.n	801055a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010552:	6978      	ldr	r0, [r7, #20]
 8010554:	f002 fed8 	bl	8013308 <pbuf_free>
          goto icmperr;
 8010558:	e072      	b.n	8010640 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f002 fed4 	bl	8013308 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	607b      	str	r3, [r7, #4]
 8010564:	e00f      	b.n	8010586 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010568:	330e      	adds	r3, #14
 801056a:	4619      	mov	r1, r3
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f002 fe45 	bl	80131fc <pbuf_remove_header>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d006      	beq.n	8010586 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010578:	4b37      	ldr	r3, [pc, #220]	; (8010658 <icmp_input+0x230>)
 801057a:	22c7      	movs	r2, #199	; 0xc7
 801057c:	4939      	ldr	r1, [pc, #228]	; (8010664 <icmp_input+0x23c>)
 801057e:	4838      	ldr	r0, [pc, #224]	; (8010660 <icmp_input+0x238>)
 8010580:	f00a fe46 	bl	801b210 <iprintf>
          goto icmperr;
 8010584:	e05c      	b.n	8010640 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801058c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801058e:	4619      	mov	r1, r3
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f002 fe23 	bl	80131dc <pbuf_add_header>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d13c      	bne.n	8010616 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80105a2:	69fb      	ldr	r3, [r7, #28]
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80105aa:	4b29      	ldr	r3, [pc, #164]	; (8010650 <icmp_input+0x228>)
 80105ac:	691a      	ldr	r2, [r3, #16]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	2200      	movs	r2, #0
 80105b6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	885b      	ldrh	r3, [r3, #2]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d907      	bls.n	80105d6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	885b      	ldrh	r3, [r3, #2]
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	3309      	adds	r3, #9
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	805a      	strh	r2, [r3, #2]
 80105d4:	e006      	b.n	80105e4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	885b      	ldrh	r3, [r3, #2]
 80105da:	b29b      	uxth	r3, r3
 80105dc:	3308      	adds	r3, #8
 80105de:	b29a      	uxth	r2, r3
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	22ff      	movs	r2, #255	; 0xff
 80105e8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2200      	movs	r2, #0
 80105ee:	729a      	strb	r2, [r3, #10]
 80105f0:	2200      	movs	r2, #0
 80105f2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	2301      	movs	r3, #1
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	2300      	movs	r3, #0
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	23ff      	movs	r3, #255	; 0xff
 8010602:	2200      	movs	r2, #0
 8010604:	69f9      	ldr	r1, [r7, #28]
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 fb70 	bl	8010cec <ip4_output_if>
 801060c:	4603      	mov	r3, r0
 801060e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010610:	e001      	b.n	8010616 <icmp_input+0x1ee>
      break;
 8010612:	bf00      	nop
 8010614:	e000      	b.n	8010618 <icmp_input+0x1f0>
      break;
 8010616:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f002 fe75 	bl	8013308 <pbuf_free>
  return;
 801061e:	e013      	b.n	8010648 <icmp_input+0x220>
    goto lenerr;
 8010620:	bf00      	nop
 8010622:	e002      	b.n	801062a <icmp_input+0x202>
    goto lenerr;
 8010624:	bf00      	nop
 8010626:	e000      	b.n	801062a <icmp_input+0x202>
        goto lenerr;
 8010628:	bf00      	nop
lenerr:
  pbuf_free(p);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f002 fe6c 	bl	8013308 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010630:	e00a      	b.n	8010648 <icmp_input+0x220>
        goto icmperr;
 8010632:	bf00      	nop
 8010634:	e004      	b.n	8010640 <icmp_input+0x218>
        goto icmperr;
 8010636:	bf00      	nop
 8010638:	e002      	b.n	8010640 <icmp_input+0x218>
          goto icmperr;
 801063a:	bf00      	nop
 801063c:	e000      	b.n	8010640 <icmp_input+0x218>
          goto icmperr;
 801063e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f002 fe61 	bl	8013308 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010646:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010648:	3728      	adds	r7, #40	; 0x28
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	24005960 	.word	0x24005960
 8010654:	24005974 	.word	0x24005974
 8010658:	0801db38 	.word	0x0801db38
 801065c:	0801db8c 	.word	0x0801db8c
 8010660:	0801dbc4 	.word	0x0801dbc4
 8010664:	0801dbec 	.word	0x0801dbec

08010668 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	460b      	mov	r3, r1
 8010672:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010674:	78fb      	ldrb	r3, [r7, #3]
 8010676:	461a      	mov	r2, r3
 8010678:	2103      	movs	r1, #3
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 f814 	bl	80106a8 <icmp_send_response>
}
 8010680:	bf00      	nop
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010694:	78fb      	ldrb	r3, [r7, #3]
 8010696:	461a      	mov	r2, r3
 8010698:	210b      	movs	r1, #11
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 f804 	bl	80106a8 <icmp_send_response>
}
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08c      	sub	sp, #48	; 0x30
 80106ac:	af04      	add	r7, sp, #16
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	460b      	mov	r3, r1
 80106b2:	70fb      	strb	r3, [r7, #3]
 80106b4:	4613      	mov	r3, r2
 80106b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80106b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106bc:	2124      	movs	r1, #36	; 0x24
 80106be:	2022      	movs	r0, #34	; 0x22
 80106c0:	f002 fb42 	bl	8012d48 <pbuf_alloc>
 80106c4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d056      	beq.n	801077a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	895b      	ldrh	r3, [r3, #10]
 80106d0:	2b23      	cmp	r3, #35	; 0x23
 80106d2:	d806      	bhi.n	80106e2 <icmp_send_response+0x3a>
 80106d4:	4b2b      	ldr	r3, [pc, #172]	; (8010784 <icmp_send_response+0xdc>)
 80106d6:	f240 1269 	movw	r2, #361	; 0x169
 80106da:	492b      	ldr	r1, [pc, #172]	; (8010788 <icmp_send_response+0xe0>)
 80106dc:	482b      	ldr	r0, [pc, #172]	; (801078c <icmp_send_response+0xe4>)
 80106de:	f00a fd97 	bl	801b210 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	78fa      	ldrb	r2, [r7, #3]
 80106f2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	78ba      	ldrb	r2, [r7, #2]
 80106f8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	2200      	movs	r2, #0
 80106fe:	711a      	strb	r2, [r3, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2200      	movs	r2, #0
 8010708:	719a      	strb	r2, [r3, #6]
 801070a:	2200      	movs	r2, #0
 801070c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	f103 0008 	add.w	r0, r3, #8
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	221c      	movs	r2, #28
 801071c:	4619      	mov	r1, r3
 801071e:	f00a f912 	bl	801a946 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010728:	f107 030c 	add.w	r3, r7, #12
 801072c:	4618      	mov	r0, r3
 801072e:	f000 f903 	bl	8010938 <ip4_route>
 8010732:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d01b      	beq.n	8010772 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	2200      	movs	r2, #0
 801073e:	709a      	strb	r2, [r3, #2]
 8010740:	2200      	movs	r2, #0
 8010742:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	895b      	ldrh	r3, [r3, #10]
 8010748:	4619      	mov	r1, r3
 801074a:	6978      	ldr	r0, [r7, #20]
 801074c:	f000 f87d 	bl	801084a <inet_chksum>
 8010750:	4603      	mov	r3, r0
 8010752:	461a      	mov	r2, r3
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010758:	f107 020c 	add.w	r2, r7, #12
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	9302      	str	r3, [sp, #8]
 8010760:	2301      	movs	r3, #1
 8010762:	9301      	str	r3, [sp, #4]
 8010764:	2300      	movs	r3, #0
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	23ff      	movs	r3, #255	; 0xff
 801076a:	2100      	movs	r1, #0
 801076c:	69f8      	ldr	r0, [r7, #28]
 801076e:	f000 fabd 	bl	8010cec <ip4_output_if>
  }
  pbuf_free(q);
 8010772:	69f8      	ldr	r0, [r7, #28]
 8010774:	f002 fdc8 	bl	8013308 <pbuf_free>
 8010778:	e000      	b.n	801077c <icmp_send_response+0xd4>
    return;
 801077a:	bf00      	nop
}
 801077c:	3720      	adds	r7, #32
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	0801db38 	.word	0x0801db38
 8010788:	0801dc20 	.word	0x0801dc20
 801078c:	0801dbc4 	.word	0x0801dbc4

08010790 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010790:	b480      	push	{r7}
 8010792:	b089      	sub	sp, #36	; 0x24
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801079e:	2300      	movs	r3, #0
 80107a0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80107a2:	2300      	movs	r3, #0
 80107a4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d00d      	beq.n	80107d0 <lwip_standard_chksum+0x40>
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	dd0a      	ble.n	80107d0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80107ba:	69fa      	ldr	r2, [r7, #28]
 80107bc:	1c53      	adds	r3, r2, #1
 80107be:	61fb      	str	r3, [r7, #28]
 80107c0:	f107 030e 	add.w	r3, r7, #14
 80107c4:	3301      	adds	r3, #1
 80107c6:	7812      	ldrb	r2, [r2, #0]
 80107c8:	701a      	strb	r2, [r3, #0]
    len--;
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	3b01      	subs	r3, #1
 80107ce:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80107d4:	e00a      	b.n	80107ec <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	1c9a      	adds	r2, r3, #2
 80107da:	61ba      	str	r2, [r7, #24]
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	461a      	mov	r2, r3
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	4413      	add	r3, r2
 80107e4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	3b02      	subs	r3, #2
 80107ea:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	dcf1      	bgt.n	80107d6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	dd04      	ble.n	8010802 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80107f8:	f107 030e 	add.w	r3, r7, #14
 80107fc:	69ba      	ldr	r2, [r7, #24]
 80107fe:	7812      	ldrb	r2, [r2, #0]
 8010800:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8010802:	89fb      	ldrh	r3, [r7, #14]
 8010804:	461a      	mov	r2, r3
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	4413      	add	r3, r2
 801080a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	0c1a      	lsrs	r2, r3, #16
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	b29b      	uxth	r3, r3
 8010814:	4413      	add	r3, r2
 8010816:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	0c1a      	lsrs	r2, r3, #16
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	b29b      	uxth	r3, r3
 8010820:	4413      	add	r3, r2
 8010822:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d007      	beq.n	801083a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	021b      	lsls	r3, r3, #8
 801082e:	b29a      	uxth	r2, r3
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	0a1b      	lsrs	r3, r3, #8
 8010834:	b2db      	uxtb	r3, r3
 8010836:	4313      	orrs	r3, r2
 8010838:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	b29b      	uxth	r3, r3
}
 801083e:	4618      	mov	r0, r3
 8010840:	3724      	adds	r7, #36	; 0x24
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b082      	sub	sp, #8
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	460b      	mov	r3, r1
 8010854:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010856:	887b      	ldrh	r3, [r7, #2]
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff ff98 	bl	8010790 <lwip_standard_chksum>
 8010860:	4603      	mov	r3, r0
 8010862:	43db      	mvns	r3, r3
 8010864:	b29b      	uxth	r3, r3
}
 8010866:	4618      	mov	r0, r3
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}

0801086e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b086      	sub	sp, #24
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801087a:	2300      	movs	r3, #0
 801087c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	613b      	str	r3, [r7, #16]
 8010882:	e02b      	b.n	80108dc <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	685a      	ldr	r2, [r3, #4]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	895b      	ldrh	r3, [r3, #10]
 801088c:	4619      	mov	r1, r3
 801088e:	4610      	mov	r0, r2
 8010890:	f7ff ff7e 	bl	8010790 <lwip_standard_chksum>
 8010894:	4603      	mov	r3, r0
 8010896:	461a      	mov	r2, r3
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	4413      	add	r3, r2
 801089c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	0c1a      	lsrs	r2, r3, #16
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	4413      	add	r3, r2
 80108a8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	895b      	ldrh	r3, [r3, #10]
 80108ae:	f003 0301 	and.w	r3, r3, #1
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00e      	beq.n	80108d6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	bf0c      	ite	eq
 80108be:	2301      	moveq	r3, #1
 80108c0:	2300      	movne	r3, #0
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	021b      	lsls	r3, r3, #8
 80108ca:	b29a      	uxth	r2, r3
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	0a1b      	lsrs	r3, r3, #8
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	4313      	orrs	r3, r2
 80108d4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	613b      	str	r3, [r7, #16]
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1d0      	bne.n	8010884 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d007      	beq.n	80108f8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	021b      	lsls	r3, r3, #8
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	0a1b      	lsrs	r3, r3, #8
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	4313      	orrs	r3, r2
 80108f6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	43db      	mvns	r3, r3
 80108fe:	b29b      	uxth	r3, r3
}
 8010900:	4618      	mov	r0, r3
 8010902:	3718      	adds	r7, #24
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010912:	f003 f82f 	bl	8013974 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010916:	f001 fa01 	bl	8011d1c <mem_init>
  memp_init();
 801091a:	f001 fd65 	bl	80123e8 <memp_init>
  pbuf_init();
  netif_init();
 801091e:	f001 fe71 	bl	8012604 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010922:	f008 fd23 	bl	801936c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010926:	f003 f8af 	bl	8013a88 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801092a:	f008 fc67 	bl	80191fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010940:	4b33      	ldr	r3, [pc, #204]	; (8010a10 <ip4_route+0xd8>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	e036      	b.n	80109b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801094e:	f003 0301 	and.w	r3, r3, #1
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d02b      	beq.n	80109b0 <ip4_route+0x78>
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801095e:	089b      	lsrs	r3, r3, #2
 8010960:	f003 0301 	and.w	r3, r3, #1
 8010964:	b2db      	uxtb	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d022      	beq.n	80109b0 <ip4_route+0x78>
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	3304      	adds	r3, #4
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d01d      	beq.n	80109b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	3304      	adds	r3, #4
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	405a      	eors	r2, r3
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	3308      	adds	r3, #8
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	4013      	ands	r3, r2
 8010988:	2b00      	cmp	r3, #0
 801098a:	d101      	bne.n	8010990 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	e038      	b.n	8010a02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010996:	f003 0302 	and.w	r3, r3, #2
 801099a:	2b00      	cmp	r3, #0
 801099c:	d108      	bne.n	80109b0 <ip4_route+0x78>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	330c      	adds	r3, #12
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d101      	bne.n	80109b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	e028      	b.n	8010a02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	60fb      	str	r3, [r7, #12]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1c5      	bne.n	8010948 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80109bc:	4b15      	ldr	r3, [pc, #84]	; (8010a14 <ip4_route+0xdc>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d01a      	beq.n	80109fa <ip4_route+0xc2>
 80109c4:	4b13      	ldr	r3, [pc, #76]	; (8010a14 <ip4_route+0xdc>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80109cc:	f003 0301 	and.w	r3, r3, #1
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d012      	beq.n	80109fa <ip4_route+0xc2>
 80109d4:	4b0f      	ldr	r3, [pc, #60]	; (8010a14 <ip4_route+0xdc>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00a      	beq.n	80109fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80109e4:	4b0b      	ldr	r3, [pc, #44]	; (8010a14 <ip4_route+0xdc>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3304      	adds	r3, #4
 80109ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d004      	beq.n	80109fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	2b7f      	cmp	r3, #127	; 0x7f
 80109f8:	d101      	bne.n	80109fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	e001      	b.n	8010a02 <ip4_route+0xca>
  }

  return netif_default;
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <ip4_route+0xdc>)
 8010a00:	681b      	ldr	r3, [r3, #0]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3714      	adds	r7, #20
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	24008a30 	.word	0x24008a30
 8010a14:	24008a34 	.word	0x24008a34

08010a18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a26:	f003 0301 	and.w	r3, r3, #1
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d016      	beq.n	8010a5e <ip4_input_accept+0x46>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	3304      	adds	r3, #4
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d011      	beq.n	8010a5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010a3a:	4b0b      	ldr	r3, [pc, #44]	; (8010a68 <ip4_input_accept+0x50>)
 8010a3c:	695a      	ldr	r2, [r3, #20]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	3304      	adds	r3, #4
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d008      	beq.n	8010a5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010a48:	4b07      	ldr	r3, [pc, #28]	; (8010a68 <ip4_input_accept+0x50>)
 8010a4a:	695b      	ldr	r3, [r3, #20]
 8010a4c:	6879      	ldr	r1, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f000 fa24 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 8010a54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	24005960 	.word	0x24005960

08010a6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b088      	sub	sp, #32
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8010a76:	2301      	movs	r3, #1
 8010a78:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	091b      	lsrs	r3, r3, #4
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b04      	cmp	r3, #4
 8010a8a:	d004      	beq.n	8010a96 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f002 fc3b 	bl	8013308 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010a92:	2300      	movs	r3, #0
 8010a94:	e121      	b.n	8010cda <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	f003 030f 	and.w	r3, r3, #15
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	885b      	ldrh	r3, [r3, #2]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fc fdc3 	bl	800d638 <lwip_htons>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	891b      	ldrh	r3, [r3, #8]
 8010aba:	8a3a      	ldrh	r2, [r7, #16]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d204      	bcs.n	8010aca <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8010ac0:	8a3b      	ldrh	r3, [r7, #16]
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f002 fa99 	bl	8012ffc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	895b      	ldrh	r3, [r3, #10]
 8010ace:	8a7a      	ldrh	r2, [r7, #18]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d807      	bhi.n	8010ae4 <ip4_input+0x78>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	891b      	ldrh	r3, [r3, #8]
 8010ad8:	8a3a      	ldrh	r2, [r7, #16]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d802      	bhi.n	8010ae4 <ip4_input+0x78>
 8010ade:	8a7b      	ldrh	r3, [r7, #18]
 8010ae0:	2b13      	cmp	r3, #19
 8010ae2:	d804      	bhi.n	8010aee <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f002 fc0f 	bl	8013308 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010aea:	2300      	movs	r3, #0
 8010aec:	e0f5      	b.n	8010cda <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	4a7c      	ldr	r2, [pc, #496]	; (8010ce4 <ip4_input+0x278>)
 8010af4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	4a7a      	ldr	r2, [pc, #488]	; (8010ce4 <ip4_input+0x278>)
 8010afc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010afe:	4b79      	ldr	r3, [pc, #484]	; (8010ce4 <ip4_input+0x278>)
 8010b00:	695b      	ldr	r3, [r3, #20]
 8010b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b06:	2be0      	cmp	r3, #224	; 0xe0
 8010b08:	d112      	bne.n	8010b30 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b10:	f003 0301 	and.w	r3, r3, #1
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <ip4_input+0xbe>
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	3304      	adds	r3, #4
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d002      	beq.n	8010b2a <ip4_input+0xbe>
      netif = inp;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	61bb      	str	r3, [r7, #24]
 8010b28:	e02a      	b.n	8010b80 <ip4_input+0x114>
    } else {
      netif = NULL;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	61bb      	str	r3, [r7, #24]
 8010b2e:	e027      	b.n	8010b80 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010b30:	6838      	ldr	r0, [r7, #0]
 8010b32:	f7ff ff71 	bl	8010a18 <ip4_input_accept>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d002      	beq.n	8010b42 <ip4_input+0xd6>
      netif = inp;
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	61bb      	str	r3, [r7, #24]
 8010b40:	e01e      	b.n	8010b80 <ip4_input+0x114>
    } else {
      netif = NULL;
 8010b42:	2300      	movs	r3, #0
 8010b44:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010b46:	4b67      	ldr	r3, [pc, #412]	; (8010ce4 <ip4_input+0x278>)
 8010b48:	695b      	ldr	r3, [r3, #20]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8010b4e:	d017      	beq.n	8010b80 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010b50:	4b65      	ldr	r3, [pc, #404]	; (8010ce8 <ip4_input+0x27c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	61bb      	str	r3, [r7, #24]
 8010b56:	e00e      	b.n	8010b76 <ip4_input+0x10a>
          if (netif == inp) {
 8010b58:	69ba      	ldr	r2, [r7, #24]
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d006      	beq.n	8010b6e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010b60:	69b8      	ldr	r0, [r7, #24]
 8010b62:	f7ff ff59 	bl	8010a18 <ip4_input_accept>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d108      	bne.n	8010b7e <ip4_input+0x112>
 8010b6c:	e000      	b.n	8010b70 <ip4_input+0x104>
            continue;
 8010b6e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	61bb      	str	r3, [r7, #24]
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1ed      	bne.n	8010b58 <ip4_input+0xec>
 8010b7c:	e000      	b.n	8010b80 <ip4_input+0x114>
            break;
 8010b7e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d111      	bne.n	8010baa <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	7a5b      	ldrb	r3, [r3, #9]
 8010b8a:	2b11      	cmp	r3, #17
 8010b8c:	d10d      	bne.n	8010baa <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010b8e:	8a7b      	ldrh	r3, [r7, #18]
 8010b90:	69fa      	ldr	r2, [r7, #28]
 8010b92:	4413      	add	r3, r2
 8010b94:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	885b      	ldrh	r3, [r3, #2]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8010ba0:	d103      	bne.n	8010baa <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d017      	beq.n	8010be0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010bb0:	4b4c      	ldr	r3, [pc, #304]	; (8010ce4 <ip4_input+0x278>)
 8010bb2:	691b      	ldr	r3, [r3, #16]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d013      	beq.n	8010be0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010bb8:	4b4a      	ldr	r3, [pc, #296]	; (8010ce4 <ip4_input+0x278>)
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	6839      	ldr	r1, [r7, #0]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 f96c 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d105      	bne.n	8010bd6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010bca:	4b46      	ldr	r3, [pc, #280]	; (8010ce4 <ip4_input+0x278>)
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010bd2:	2be0      	cmp	r3, #224	; 0xe0
 8010bd4:	d104      	bne.n	8010be0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f002 fb96 	bl	8013308 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	e07c      	b.n	8010cda <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d104      	bne.n	8010bf0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f002 fb8e 	bl	8013308 <pbuf_free>
    return ERR_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	e074      	b.n	8010cda <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	88db      	ldrh	r3, [r3, #6]
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010bfc:	4013      	ands	r3, r2
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d00b      	beq.n	8010c1a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fc90 	bl	8011528 <ip4_reass>
 8010c08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d101      	bne.n	8010c14 <ip4_input+0x1a8>
      return ERR_OK;
 8010c10:	2300      	movs	r3, #0
 8010c12:	e062      	b.n	8010cda <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010c1a:	4a32      	ldr	r2, [pc, #200]	; (8010ce4 <ip4_input+0x278>)
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010c20:	4a30      	ldr	r2, [pc, #192]	; (8010ce4 <ip4_input+0x278>)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010c26:	4a2f      	ldr	r2, [pc, #188]	; (8010ce4 <ip4_input+0x278>)
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	f003 030f 	and.w	r3, r3, #15
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	4b29      	ldr	r3, [pc, #164]	; (8010ce4 <ip4_input+0x278>)
 8010c3e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010c40:	8a7b      	ldrh	r3, [r7, #18]
 8010c42:	4619      	mov	r1, r3
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f002 fad9 	bl	80131fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	7a5b      	ldrb	r3, [r3, #9]
 8010c4e:	2b06      	cmp	r3, #6
 8010c50:	d009      	beq.n	8010c66 <ip4_input+0x1fa>
 8010c52:	2b11      	cmp	r3, #17
 8010c54:	d002      	beq.n	8010c5c <ip4_input+0x1f0>
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d00a      	beq.n	8010c70 <ip4_input+0x204>
 8010c5a:	e00e      	b.n	8010c7a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010c5c:	6839      	ldr	r1, [r7, #0]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f008 fc32 	bl	80194c8 <udp_input>
        break;
 8010c64:	e026      	b.n	8010cb4 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010c66:	6839      	ldr	r1, [r7, #0]
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f004 fa9b 	bl	80151a4 <tcp_input>
        break;
 8010c6e:	e021      	b.n	8010cb4 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010c70:	6839      	ldr	r1, [r7, #0]
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7ff fbd8 	bl	8010428 <icmp_input>
        break;
 8010c78:	e01c      	b.n	8010cb4 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010c7a:	4b1a      	ldr	r3, [pc, #104]	; (8010ce4 <ip4_input+0x278>)
 8010c7c:	695b      	ldr	r3, [r3, #20]
 8010c7e:	69b9      	ldr	r1, [r7, #24]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f000 f90b 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d10f      	bne.n	8010cac <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010c8c:	4b15      	ldr	r3, [pc, #84]	; (8010ce4 <ip4_input+0x278>)
 8010c8e:	695b      	ldr	r3, [r3, #20]
 8010c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010c94:	2be0      	cmp	r3, #224	; 0xe0
 8010c96:	d009      	beq.n	8010cac <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f002 fb1f 	bl	80132e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010ca4:	2102      	movs	r1, #2
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7ff fcde 	bl	8010668 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f002 fb2b 	bl	8013308 <pbuf_free>
        break;
 8010cb2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010cb4:	4b0b      	ldr	r3, [pc, #44]	; (8010ce4 <ip4_input+0x278>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010cba:	4b0a      	ldr	r3, [pc, #40]	; (8010ce4 <ip4_input+0x278>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010cc0:	4b08      	ldr	r3, [pc, #32]	; (8010ce4 <ip4_input+0x278>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010cc6:	4b07      	ldr	r3, [pc, #28]	; (8010ce4 <ip4_input+0x278>)
 8010cc8:	2200      	movs	r2, #0
 8010cca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010ccc:	4b05      	ldr	r3, [pc, #20]	; (8010ce4 <ip4_input+0x278>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010cd2:	4b04      	ldr	r3, [pc, #16]	; (8010ce4 <ip4_input+0x278>)
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010cd8:	2300      	movs	r3, #0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3720      	adds	r7, #32
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	24005960 	.word	0x24005960
 8010ce8:	24008a30 	.word	0x24008a30

08010cec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08a      	sub	sp, #40	; 0x28
 8010cf0:	af04      	add	r7, sp, #16
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
 8010cf8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d009      	beq.n	8010d18 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d003      	beq.n	8010d12 <ip4_output_if+0x26>
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d102      	bne.n	8010d18 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	3304      	adds	r3, #4
 8010d16:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010d18:	78fa      	ldrb	r2, [r7, #3]
 8010d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1c:	9302      	str	r3, [sp, #8]
 8010d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	6979      	ldr	r1, [r7, #20]
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f000 f805 	bl	8010d40 <ip4_output_if_src>
 8010d36:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3718      	adds	r7, #24
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	7b9b      	ldrb	r3, [r3, #14]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d006      	beq.n	8010d64 <ip4_output_if_src+0x24>
 8010d56:	4b4b      	ldr	r3, [pc, #300]	; (8010e84 <ip4_output_if_src+0x144>)
 8010d58:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010d5c:	494a      	ldr	r1, [pc, #296]	; (8010e88 <ip4_output_if_src+0x148>)
 8010d5e:	484b      	ldr	r0, [pc, #300]	; (8010e8c <ip4_output_if_src+0x14c>)
 8010d60:	f00a fa56 	bl	801b210 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d060      	beq.n	8010e2c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010d6a:	2314      	movs	r3, #20
 8010d6c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010d6e:	2114      	movs	r1, #20
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f002 fa33 	bl	80131dc <pbuf_add_header>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d002      	beq.n	8010d82 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010d7c:	f06f 0301 	mvn.w	r3, #1
 8010d80:	e07c      	b.n	8010e7c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	895b      	ldrh	r3, [r3, #10]
 8010d8c:	2b13      	cmp	r3, #19
 8010d8e:	d806      	bhi.n	8010d9e <ip4_output_if_src+0x5e>
 8010d90:	4b3c      	ldr	r3, [pc, #240]	; (8010e84 <ip4_output_if_src+0x144>)
 8010d92:	f240 3289 	movw	r2, #905	; 0x389
 8010d96:	493e      	ldr	r1, [pc, #248]	; (8010e90 <ip4_output_if_src+0x150>)
 8010d98:	483c      	ldr	r0, [pc, #240]	; (8010e8c <ip4_output_if_src+0x14c>)
 8010d9a:	f00a fa39 	bl	801b210 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	78fa      	ldrb	r2, [r7, #3]
 8010da2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010daa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010db4:	8b7b      	ldrh	r3, [r7, #26]
 8010db6:	089b      	lsrs	r3, r3, #2
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010dcc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	891b      	ldrh	r3, [r3, #8]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fc fc30 	bl	800d638 <lwip_htons>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	461a      	mov	r2, r3
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	2200      	movs	r2, #0
 8010de4:	719a      	strb	r2, [r3, #6]
 8010de6:	2200      	movs	r2, #0
 8010de8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010dea:	4b2a      	ldr	r3, [pc, #168]	; (8010e94 <ip4_output_if_src+0x154>)
 8010dec:	881b      	ldrh	r3, [r3, #0]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fc fc22 	bl	800d638 <lwip_htons>
 8010df4:	4603      	mov	r3, r0
 8010df6:	461a      	mov	r2, r3
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010dfc:	4b25      	ldr	r3, [pc, #148]	; (8010e94 <ip4_output_if_src+0x154>)
 8010dfe:	881b      	ldrh	r3, [r3, #0]
 8010e00:	3301      	adds	r3, #1
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	4b23      	ldr	r3, [pc, #140]	; (8010e94 <ip4_output_if_src+0x154>)
 8010e06:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d104      	bne.n	8010e18 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010e0e:	4b22      	ldr	r3, [pc, #136]	; (8010e98 <ip4_output_if_src+0x158>)
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	60da      	str	r2, [r3, #12]
 8010e16:	e003      	b.n	8010e20 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	2200      	movs	r2, #0
 8010e24:	729a      	strb	r2, [r3, #10]
 8010e26:	2200      	movs	r2, #0
 8010e28:	72da      	strb	r2, [r3, #11]
 8010e2a:	e00f      	b.n	8010e4c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	895b      	ldrh	r3, [r3, #10]
 8010e30:	2b13      	cmp	r3, #19
 8010e32:	d802      	bhi.n	8010e3a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010e34:	f06f 0301 	mvn.w	r3, #1
 8010e38:	e020      	b.n	8010e7c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010e46:	f107 0314 	add.w	r3, r7, #20
 8010e4a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00c      	beq.n	8010e6e <ip4_output_if_src+0x12e>
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	891a      	ldrh	r2, [r3, #8]
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d906      	bls.n	8010e6e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f000 fd4b 	bl	8011900 <ip4_frag>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	e006      	b.n	8010e7c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	695b      	ldr	r3, [r3, #20]
 8010e72:	687a      	ldr	r2, [r7, #4]
 8010e74:	68f9      	ldr	r1, [r7, #12]
 8010e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e78:	4798      	blx	r3
 8010e7a:	4603      	mov	r3, r0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3720      	adds	r7, #32
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	0801dc4c 	.word	0x0801dc4c
 8010e88:	0801dca0 	.word	0x0801dca0
 8010e8c:	0801dcac 	.word	0x0801dcac
 8010e90:	0801dcd4 	.word	0x0801dcd4
 8010e94:	240048d2 	.word	0x240048d2
 8010e98:	08020504 	.word	0x08020504

08010e9c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010eb0:	d002      	beq.n	8010eb8 <ip4_addr_isbroadcast_u32+0x1c>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d101      	bne.n	8010ebc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e02a      	b.n	8010f12 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ec2:	f003 0302 	and.w	r3, r3, #2
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d101      	bne.n	8010ece <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e021      	b.n	8010f12 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d101      	bne.n	8010ede <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010eda:	2300      	movs	r3, #0
 8010edc:	e019      	b.n	8010f12 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010ede:	68fa      	ldr	r2, [r7, #12]
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	405a      	eors	r2, r3
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	3308      	adds	r3, #8
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4013      	ands	r3, r2
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10d      	bne.n	8010f10 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	3308      	adds	r3, #8
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	43da      	mvns	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	3308      	adds	r3, #8
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d101      	bne.n	8010f10 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e000      	b.n	8010f12 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010f10:	2300      	movs	r3, #0
  }
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
	...

08010f20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010f26:	2300      	movs	r3, #0
 8010f28:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010f2a:	4b12      	ldr	r3, [pc, #72]	; (8010f74 <ip_reass_tmr+0x54>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010f30:	e018      	b.n	8010f64 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	7fdb      	ldrb	r3, [r3, #31]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00b      	beq.n	8010f52 <ip_reass_tmr+0x32>
      r->timer--;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	7fdb      	ldrb	r3, [r3, #31]
 8010f3e:	3b01      	subs	r3, #1
 8010f40:	b2da      	uxtb	r2, r3
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	60fb      	str	r3, [r7, #12]
 8010f50:	e008      	b.n	8010f64 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010f5c:	68b9      	ldr	r1, [r7, #8]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 f80a 	bl	8010f78 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1e3      	bne.n	8010f32 <ip_reass_tmr+0x12>
    }
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	3710      	adds	r7, #16
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	240048d4 	.word	0x240048d4

08010f78 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b088      	sub	sp, #32
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010f86:	683a      	ldr	r2, [r7, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d105      	bne.n	8010f9a <ip_reass_free_complete_datagram+0x22>
 8010f8e:	4b45      	ldr	r3, [pc, #276]	; (80110a4 <ip_reass_free_complete_datagram+0x12c>)
 8010f90:	22ab      	movs	r2, #171	; 0xab
 8010f92:	4945      	ldr	r1, [pc, #276]	; (80110a8 <ip_reass_free_complete_datagram+0x130>)
 8010f94:	4845      	ldr	r0, [pc, #276]	; (80110ac <ip_reass_free_complete_datagram+0x134>)
 8010f96:	f00a f93b 	bl	801b210 <iprintf>
  if (prev != NULL) {
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00a      	beq.n	8010fb6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d005      	beq.n	8010fb6 <ip_reass_free_complete_datagram+0x3e>
 8010faa:	4b3e      	ldr	r3, [pc, #248]	; (80110a4 <ip_reass_free_complete_datagram+0x12c>)
 8010fac:	22ad      	movs	r2, #173	; 0xad
 8010fae:	4940      	ldr	r1, [pc, #256]	; (80110b0 <ip_reass_free_complete_datagram+0x138>)
 8010fb0:	483e      	ldr	r0, [pc, #248]	; (80110ac <ip_reass_free_complete_datagram+0x134>)
 8010fb2:	f00a f92d 	bl	801b210 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	889b      	ldrh	r3, [r3, #4]
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d12a      	bne.n	801101e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	6858      	ldr	r0, [r3, #4]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	3308      	adds	r3, #8
 8010fde:	2214      	movs	r2, #20
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	f009 fcb0 	bl	801a946 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010fe6:	2101      	movs	r1, #1
 8010fe8:	69b8      	ldr	r0, [r7, #24]
 8010fea:	f7ff fb4d 	bl	8010688 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010fee:	69b8      	ldr	r0, [r7, #24]
 8010ff0:	f002 fa18 	bl	8013424 <pbuf_clen>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010ff8:	8bfa      	ldrh	r2, [r7, #30]
 8010ffa:	8a7b      	ldrh	r3, [r7, #18]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011002:	db05      	blt.n	8011010 <ip_reass_free_complete_datagram+0x98>
 8011004:	4b27      	ldr	r3, [pc, #156]	; (80110a4 <ip_reass_free_complete_datagram+0x12c>)
 8011006:	22bc      	movs	r2, #188	; 0xbc
 8011008:	492a      	ldr	r1, [pc, #168]	; (80110b4 <ip_reass_free_complete_datagram+0x13c>)
 801100a:	4828      	ldr	r0, [pc, #160]	; (80110ac <ip_reass_free_complete_datagram+0x134>)
 801100c:	f00a f900 	bl	801b210 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011010:	8bfa      	ldrh	r2, [r7, #30]
 8011012:	8a7b      	ldrh	r3, [r7, #18]
 8011014:	4413      	add	r3, r2
 8011016:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011018:	69b8      	ldr	r0, [r7, #24]
 801101a:	f002 f975 	bl	8013308 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011024:	e01f      	b.n	8011066 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011036:	68f8      	ldr	r0, [r7, #12]
 8011038:	f002 f9f4 	bl	8013424 <pbuf_clen>
 801103c:	4603      	mov	r3, r0
 801103e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011040:	8bfa      	ldrh	r2, [r7, #30]
 8011042:	8a7b      	ldrh	r3, [r7, #18]
 8011044:	4413      	add	r3, r2
 8011046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801104a:	db05      	blt.n	8011058 <ip_reass_free_complete_datagram+0xe0>
 801104c:	4b15      	ldr	r3, [pc, #84]	; (80110a4 <ip_reass_free_complete_datagram+0x12c>)
 801104e:	22cc      	movs	r2, #204	; 0xcc
 8011050:	4918      	ldr	r1, [pc, #96]	; (80110b4 <ip_reass_free_complete_datagram+0x13c>)
 8011052:	4816      	ldr	r0, [pc, #88]	; (80110ac <ip_reass_free_complete_datagram+0x134>)
 8011054:	f00a f8dc 	bl	801b210 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011058:	8bfa      	ldrh	r2, [r7, #30]
 801105a:	8a7b      	ldrh	r3, [r7, #18]
 801105c:	4413      	add	r3, r2
 801105e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f002 f951 	bl	8013308 <pbuf_free>
  while (p != NULL) {
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d1dc      	bne.n	8011026 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801106c:	6839      	ldr	r1, [r7, #0]
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 f8c2 	bl	80111f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011074:	4b10      	ldr	r3, [pc, #64]	; (80110b8 <ip_reass_free_complete_datagram+0x140>)
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	8bfa      	ldrh	r2, [r7, #30]
 801107a:	429a      	cmp	r2, r3
 801107c:	d905      	bls.n	801108a <ip_reass_free_complete_datagram+0x112>
 801107e:	4b09      	ldr	r3, [pc, #36]	; (80110a4 <ip_reass_free_complete_datagram+0x12c>)
 8011080:	22d2      	movs	r2, #210	; 0xd2
 8011082:	490e      	ldr	r1, [pc, #56]	; (80110bc <ip_reass_free_complete_datagram+0x144>)
 8011084:	4809      	ldr	r0, [pc, #36]	; (80110ac <ip_reass_free_complete_datagram+0x134>)
 8011086:	f00a f8c3 	bl	801b210 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801108a:	4b0b      	ldr	r3, [pc, #44]	; (80110b8 <ip_reass_free_complete_datagram+0x140>)
 801108c:	881a      	ldrh	r2, [r3, #0]
 801108e:	8bfb      	ldrh	r3, [r7, #30]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <ip_reass_free_complete_datagram+0x140>)
 8011096:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011098:	8bfb      	ldrh	r3, [r7, #30]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3720      	adds	r7, #32
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	0801dd04 	.word	0x0801dd04
 80110a8:	0801dd5c 	.word	0x0801dd5c
 80110ac:	0801dd68 	.word	0x0801dd68
 80110b0:	0801dd90 	.word	0x0801dd90
 80110b4:	0801dda4 	.word	0x0801dda4
 80110b8:	240048d8 	.word	0x240048d8
 80110bc:	0801ddc4 	.word	0x0801ddc4

080110c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b08a      	sub	sp, #40	; 0x28
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80110ca:	2300      	movs	r3, #0
 80110cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80110ce:	2300      	movs	r3, #0
 80110d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80110d2:	2300      	movs	r3, #0
 80110d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80110d6:	2300      	movs	r3, #0
 80110d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80110de:	4b28      	ldr	r3, [pc, #160]	; (8011180 <ip_reass_remove_oldest_datagram+0xc0>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80110e4:	e030      	b.n	8011148 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80110e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e8:	695a      	ldr	r2, [r3, #20]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d10c      	bne.n	801110c <ip_reass_remove_oldest_datagram+0x4c>
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	699a      	ldr	r2, [r3, #24]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	691b      	ldr	r3, [r3, #16]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d106      	bne.n	801110c <ip_reass_remove_oldest_datagram+0x4c>
 80110fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011100:	899a      	ldrh	r2, [r3, #12]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	889b      	ldrh	r3, [r3, #4]
 8011106:	b29b      	uxth	r3, r3
 8011108:	429a      	cmp	r2, r3
 801110a:	d014      	beq.n	8011136 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	3301      	adds	r3, #1
 8011110:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011112:	6a3b      	ldr	r3, [r7, #32]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d104      	bne.n	8011122 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	61bb      	str	r3, [r7, #24]
 8011120:	e009      	b.n	8011136 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011124:	7fda      	ldrb	r2, [r3, #31]
 8011126:	6a3b      	ldr	r3, [r7, #32]
 8011128:	7fdb      	ldrb	r3, [r3, #31]
 801112a:	429a      	cmp	r2, r3
 801112c:	d803      	bhi.n	8011136 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011130:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011140:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1cb      	bne.n	80110e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801114e:	6a3b      	ldr	r3, [r7, #32]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d008      	beq.n	8011166 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011154:	69b9      	ldr	r1, [r7, #24]
 8011156:	6a38      	ldr	r0, [r7, #32]
 8011158:	f7ff ff0e 	bl	8010f78 <ip_reass_free_complete_datagram>
 801115c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801115e:	697a      	ldr	r2, [r7, #20]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	4413      	add	r3, r2
 8011164:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011166:	697a      	ldr	r2, [r7, #20]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	da02      	bge.n	8011174 <ip_reass_remove_oldest_datagram+0xb4>
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	2b01      	cmp	r3, #1
 8011172:	dcac      	bgt.n	80110ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011174:	697b      	ldr	r3, [r7, #20]
}
 8011176:	4618      	mov	r0, r3
 8011178:	3728      	adds	r7, #40	; 0x28
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	240048d4 	.word	0x240048d4

08011184 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801118e:	2004      	movs	r0, #4
 8011190:	f001 f998 	bl	80124c4 <memp_malloc>
 8011194:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d110      	bne.n	80111be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7ff ff8e 	bl	80110c0 <ip_reass_remove_oldest_datagram>
 80111a4:	4602      	mov	r2, r0
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	4293      	cmp	r3, r2
 80111aa:	dc03      	bgt.n	80111b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80111ac:	2004      	movs	r0, #4
 80111ae:	f001 f989 	bl	80124c4 <memp_malloc>
 80111b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80111ba:	2300      	movs	r3, #0
 80111bc:	e016      	b.n	80111ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80111be:	2220      	movs	r2, #32
 80111c0:	2100      	movs	r1, #0
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f009 fbe3 	bl	801a98e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	220f      	movs	r2, #15
 80111cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80111ce:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <ip_reass_enqueue_new_datagram+0x70>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80111d6:	4a07      	ldr	r2, [pc, #28]	; (80111f4 <ip_reass_enqueue_new_datagram+0x70>)
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	3308      	adds	r3, #8
 80111e0:	2214      	movs	r2, #20
 80111e2:	6879      	ldr	r1, [r7, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f009 fbae 	bl	801a946 <memcpy>
  return ipr;
 80111ea:	68fb      	ldr	r3, [r7, #12]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	240048d4 	.word	0x240048d4

080111f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011202:	4b10      	ldr	r3, [pc, #64]	; (8011244 <ip_reass_dequeue_datagram+0x4c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	429a      	cmp	r2, r3
 801120a:	d104      	bne.n	8011216 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a0c      	ldr	r2, [pc, #48]	; (8011244 <ip_reass_dequeue_datagram+0x4c>)
 8011212:	6013      	str	r3, [r2, #0]
 8011214:	e00d      	b.n	8011232 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d106      	bne.n	801122a <ip_reass_dequeue_datagram+0x32>
 801121c:	4b0a      	ldr	r3, [pc, #40]	; (8011248 <ip_reass_dequeue_datagram+0x50>)
 801121e:	f240 1245 	movw	r2, #325	; 0x145
 8011222:	490a      	ldr	r1, [pc, #40]	; (801124c <ip_reass_dequeue_datagram+0x54>)
 8011224:	480a      	ldr	r0, [pc, #40]	; (8011250 <ip_reass_dequeue_datagram+0x58>)
 8011226:	f009 fff3 	bl	801b210 <iprintf>
    prev->next = ipr->next;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011232:	6879      	ldr	r1, [r7, #4]
 8011234:	2004      	movs	r0, #4
 8011236:	f001 f9bb 	bl	80125b0 <memp_free>
}
 801123a:	bf00      	nop
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	240048d4 	.word	0x240048d4
 8011248:	0801dd04 	.word	0x0801dd04
 801124c:	0801dde8 	.word	0x0801dde8
 8011250:	0801dd68 	.word	0x0801dd68

08011254 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b08c      	sub	sp, #48	; 0x30
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011260:	2300      	movs	r3, #0
 8011262:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011264:	2301      	movs	r3, #1
 8011266:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	885b      	ldrh	r3, [r3, #2]
 8011272:	b29b      	uxth	r3, r3
 8011274:	4618      	mov	r0, r3
 8011276:	f7fc f9df 	bl	800d638 <lwip_htons>
 801127a:	4603      	mov	r3, r0
 801127c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	f003 030f 	and.w	r3, r3, #15
 8011286:	b2db      	uxtb	r3, r3
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801128c:	7e7b      	ldrb	r3, [r7, #25]
 801128e:	b29b      	uxth	r3, r3
 8011290:	8b7a      	ldrh	r2, [r7, #26]
 8011292:	429a      	cmp	r2, r3
 8011294:	d202      	bcs.n	801129c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801129a:	e135      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801129c:	7e7b      	ldrb	r3, [r7, #25]
 801129e:	b29b      	uxth	r3, r3
 80112a0:	8b7a      	ldrh	r2, [r7, #26]
 80112a2:	1ad3      	subs	r3, r2, r3
 80112a4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	88db      	ldrh	r3, [r3, #6]
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fc f9c3 	bl	800d638 <lwip_htons>
 80112b2:	4603      	mov	r3, r0
 80112b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	00db      	lsls	r3, r3, #3
 80112bc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	2200      	movs	r2, #0
 80112c8:	701a      	strb	r2, [r3, #0]
 80112ca:	2200      	movs	r2, #0
 80112cc:	705a      	strb	r2, [r3, #1]
 80112ce:	2200      	movs	r2, #0
 80112d0:	709a      	strb	r2, [r3, #2]
 80112d2:	2200      	movs	r2, #0
 80112d4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	8afa      	ldrh	r2, [r7, #22]
 80112da:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80112dc:	8afa      	ldrh	r2, [r7, #22]
 80112de:	8b7b      	ldrh	r3, [r7, #26]
 80112e0:	4413      	add	r3, r2
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80112e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ea:	88db      	ldrh	r3, [r3, #6]
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	8afa      	ldrh	r2, [r7, #22]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d902      	bls.n	80112fa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80112f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112f8:	e106      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011300:	e068      	b.n	80113d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130a:	889b      	ldrh	r3, [r3, #4]
 801130c:	b29a      	uxth	r2, r3
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	889b      	ldrh	r3, [r3, #4]
 8011312:	b29b      	uxth	r3, r3
 8011314:	429a      	cmp	r2, r3
 8011316:	d235      	bcs.n	8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801131c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	2b00      	cmp	r3, #0
 8011322:	d020      	beq.n	8011366 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011326:	889b      	ldrh	r3, [r3, #4]
 8011328:	b29a      	uxth	r2, r3
 801132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132c:	88db      	ldrh	r3, [r3, #6]
 801132e:	b29b      	uxth	r3, r3
 8011330:	429a      	cmp	r2, r3
 8011332:	d307      	bcc.n	8011344 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011336:	88db      	ldrh	r3, [r3, #6]
 8011338:	b29a      	uxth	r2, r3
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	889b      	ldrh	r3, [r3, #4]
 801133e:	b29b      	uxth	r3, r3
 8011340:	429a      	cmp	r2, r3
 8011342:	d902      	bls.n	801134a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011348:	e0de      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011352:	88db      	ldrh	r3, [r3, #6]
 8011354:	b29a      	uxth	r2, r3
 8011356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011358:	889b      	ldrh	r3, [r3, #4]
 801135a:	b29b      	uxth	r3, r3
 801135c:	429a      	cmp	r2, r3
 801135e:	d03d      	beq.n	80113dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011360:	2300      	movs	r3, #0
 8011362:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011364:	e03a      	b.n	80113dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011368:	88db      	ldrh	r3, [r3, #6]
 801136a:	b29a      	uxth	r2, r3
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	889b      	ldrh	r3, [r3, #4]
 8011370:	b29b      	uxth	r3, r3
 8011372:	429a      	cmp	r2, r3
 8011374:	d902      	bls.n	801137c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801137a:	e0c5      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	605a      	str	r2, [r3, #4]
      break;
 8011382:	e02b      	b.n	80113dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011386:	889b      	ldrh	r3, [r3, #4]
 8011388:	b29a      	uxth	r2, r3
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	889b      	ldrh	r3, [r3, #4]
 801138e:	b29b      	uxth	r3, r3
 8011390:	429a      	cmp	r2, r3
 8011392:	d102      	bne.n	801139a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011398:	e0b6      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139c:	889b      	ldrh	r3, [r3, #4]
 801139e:	b29a      	uxth	r2, r3
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	88db      	ldrh	r3, [r3, #6]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d202      	bcs.n	80113b0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ae:	e0ab      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80113b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d009      	beq.n	80113ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80113b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b8:	88db      	ldrh	r3, [r3, #6]
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	889b      	ldrh	r3, [r3, #4]
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d001      	beq.n	80113ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d193      	bne.n	8011302 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80113da:	e000      	b.n	80113de <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80113dc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d12d      	bne.n	8011440 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d01c      	beq.n	8011424 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	88db      	ldrh	r3, [r3, #6]
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f2:	889b      	ldrh	r3, [r3, #4]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d906      	bls.n	8011408 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80113fa:	4b45      	ldr	r3, [pc, #276]	; (8011510 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80113fc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011400:	4944      	ldr	r1, [pc, #272]	; (8011514 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011402:	4845      	ldr	r0, [pc, #276]	; (8011518 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011404:	f009 ff04 	bl	801b210 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011410:	88db      	ldrh	r3, [r3, #6]
 8011412:	b29a      	uxth	r2, r3
 8011414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011416:	889b      	ldrh	r3, [r3, #4]
 8011418:	b29b      	uxth	r3, r3
 801141a:	429a      	cmp	r2, r3
 801141c:	d010      	beq.n	8011440 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801141e:	2300      	movs	r3, #0
 8011420:	623b      	str	r3, [r7, #32]
 8011422:	e00d      	b.n	8011440 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d006      	beq.n	801143a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801142c:	4b38      	ldr	r3, [pc, #224]	; (8011510 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801142e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8011432:	493a      	ldr	r1, [pc, #232]	; (801151c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011434:	4838      	ldr	r0, [pc, #224]	; (8011518 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011436:	f009 feeb 	bl	801b210 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	68ba      	ldr	r2, [r7, #8]
 801143e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d105      	bne.n	8011452 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	7f9b      	ldrb	r3, [r3, #30]
 801144a:	f003 0301 	and.w	r3, r3, #1
 801144e:	2b00      	cmp	r3, #0
 8011450:	d059      	beq.n	8011506 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d04f      	beq.n	80114f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d006      	beq.n	801146e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	889b      	ldrh	r3, [r3, #4]
 8011468:	b29b      	uxth	r3, r3
 801146a:	2b00      	cmp	r3, #0
 801146c:	d002      	beq.n	8011474 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801146e:	2300      	movs	r3, #0
 8011470:	623b      	str	r3, [r7, #32]
 8011472:	e041      	b.n	80114f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011476:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801147e:	e012      	b.n	80114a6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011488:	88db      	ldrh	r3, [r3, #6]
 801148a:	b29a      	uxth	r2, r3
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	889b      	ldrh	r3, [r3, #4]
 8011490:	b29b      	uxth	r3, r3
 8011492:	429a      	cmp	r2, r3
 8011494:	d002      	beq.n	801149c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011496:	2300      	movs	r3, #0
 8011498:	623b      	str	r3, [r7, #32]
            break;
 801149a:	e007      	b.n	80114ac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1e9      	bne.n	8011480 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80114ac:	6a3b      	ldr	r3, [r7, #32]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d022      	beq.n	80114f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d106      	bne.n	80114c8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80114ba:	4b15      	ldr	r3, [pc, #84]	; (8011510 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80114bc:	f240 12df 	movw	r2, #479	; 0x1df
 80114c0:	4917      	ldr	r1, [pc, #92]	; (8011520 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80114c2:	4815      	ldr	r0, [pc, #84]	; (8011518 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80114c4:	f009 fea4 	bl	801b210 <iprintf>
          LWIP_ASSERT("sanity check",
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d106      	bne.n	80114e2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80114d4:	4b0e      	ldr	r3, [pc, #56]	; (8011510 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80114d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80114da:	4911      	ldr	r1, [pc, #68]	; (8011520 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80114dc:	480e      	ldr	r0, [pc, #56]	; (8011518 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80114de:	f009 fe97 	bl	801b210 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80114e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d006      	beq.n	80114f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80114ea:	4b09      	ldr	r3, [pc, #36]	; (8011510 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80114ec:	f240 12e3 	movw	r2, #483	; 0x1e3
 80114f0:	490c      	ldr	r1, [pc, #48]	; (8011524 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80114f2:	4809      	ldr	r0, [pc, #36]	; (8011518 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80114f4:	f009 fe8c 	bl	801b210 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80114f8:	6a3b      	ldr	r3, [r7, #32]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	bf14      	ite	ne
 80114fe:	2301      	movne	r3, #1
 8011500:	2300      	moveq	r3, #0
 8011502:	b2db      	uxtb	r3, r3
 8011504:	e000      	b.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3730      	adds	r7, #48	; 0x30
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	0801dd04 	.word	0x0801dd04
 8011514:	0801de04 	.word	0x0801de04
 8011518:	0801dd68 	.word	0x0801dd68
 801151c:	0801de24 	.word	0x0801de24
 8011520:	0801de5c 	.word	0x0801de5c
 8011524:	0801de6c 	.word	0x0801de6c

08011528 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08e      	sub	sp, #56	; 0x38
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	f003 030f 	and.w	r3, r3, #15
 801153e:	b2db      	uxtb	r3, r3
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b14      	cmp	r3, #20
 8011546:	f040 8167 	bne.w	8011818 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	88db      	ldrh	r3, [r3, #6]
 801154e:	b29b      	uxth	r3, r3
 8011550:	4618      	mov	r0, r3
 8011552:	f7fc f871 	bl	800d638 <lwip_htons>
 8011556:	4603      	mov	r3, r0
 8011558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801155c:	b29b      	uxth	r3, r3
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011564:	885b      	ldrh	r3, [r3, #2]
 8011566:	b29b      	uxth	r3, r3
 8011568:	4618      	mov	r0, r3
 801156a:	f7fc f865 	bl	800d638 <lwip_htons>
 801156e:	4603      	mov	r3, r0
 8011570:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	f003 030f 	and.w	r3, r3, #15
 801157a:	b2db      	uxtb	r3, r3
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011586:	b29b      	uxth	r3, r3
 8011588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801158a:	429a      	cmp	r2, r3
 801158c:	f0c0 8146 	bcc.w	801181c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011594:	b29b      	uxth	r3, r3
 8011596:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f001 ff41 	bl	8013424 <pbuf_clen>
 80115a2:	4603      	mov	r3, r0
 80115a4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80115a6:	4ba3      	ldr	r3, [pc, #652]	; (8011834 <ip4_reass+0x30c>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	8c3b      	ldrh	r3, [r7, #32]
 80115ae:	4413      	add	r3, r2
 80115b0:	2b0a      	cmp	r3, #10
 80115b2:	dd10      	ble.n	80115d6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80115b4:	8c3b      	ldrh	r3, [r7, #32]
 80115b6:	4619      	mov	r1, r3
 80115b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115ba:	f7ff fd81 	bl	80110c0 <ip_reass_remove_oldest_datagram>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f000 812d 	beq.w	8011820 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80115c6:	4b9b      	ldr	r3, [pc, #620]	; (8011834 <ip4_reass+0x30c>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	461a      	mov	r2, r3
 80115cc:	8c3b      	ldrh	r3, [r7, #32]
 80115ce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80115d0:	2b0a      	cmp	r3, #10
 80115d2:	f300 8125 	bgt.w	8011820 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80115d6:	4b98      	ldr	r3, [pc, #608]	; (8011838 <ip4_reass+0x310>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	633b      	str	r3, [r7, #48]	; 0x30
 80115dc:	e015      	b.n	801160a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e0:	695a      	ldr	r2, [r3, #20]
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d10c      	bne.n	8011604 <ip4_reass+0xdc>
 80115ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ec:	699a      	ldr	r2, [r3, #24]
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d106      	bne.n	8011604 <ip4_reass+0xdc>
 80115f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f8:	899a      	ldrh	r2, [r3, #12]
 80115fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fc:	889b      	ldrh	r3, [r3, #4]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	429a      	cmp	r2, r3
 8011602:	d006      	beq.n	8011612 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	633b      	str	r3, [r7, #48]	; 0x30
 801160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160c:	2b00      	cmp	r3, #0
 801160e:	d1e6      	bne.n	80115de <ip4_reass+0xb6>
 8011610:	e000      	b.n	8011614 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011612:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011616:	2b00      	cmp	r3, #0
 8011618:	d109      	bne.n	801162e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801161a:	8c3b      	ldrh	r3, [r7, #32]
 801161c:	4619      	mov	r1, r3
 801161e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011620:	f7ff fdb0 	bl	8011184 <ip_reass_enqueue_new_datagram>
 8011624:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011628:	2b00      	cmp	r3, #0
 801162a:	d11c      	bne.n	8011666 <ip4_reass+0x13e>
      goto nullreturn;
 801162c:	e0f9      	b.n	8011822 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	88db      	ldrh	r3, [r3, #6]
 8011632:	b29b      	uxth	r3, r3
 8011634:	4618      	mov	r0, r3
 8011636:	f7fb ffff 	bl	800d638 <lwip_htons>
 801163a:	4603      	mov	r3, r0
 801163c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011640:	2b00      	cmp	r3, #0
 8011642:	d110      	bne.n	8011666 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011646:	89db      	ldrh	r3, [r3, #14]
 8011648:	4618      	mov	r0, r3
 801164a:	f7fb fff5 	bl	800d638 <lwip_htons>
 801164e:	4603      	mov	r3, r0
 8011650:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011654:	2b00      	cmp	r3, #0
 8011656:	d006      	beq.n	8011666 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	3308      	adds	r3, #8
 801165c:	2214      	movs	r2, #20
 801165e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011660:	4618      	mov	r0, r3
 8011662:	f009 f970 	bl	801a946 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011668:	88db      	ldrh	r3, [r3, #6]
 801166a:	b29b      	uxth	r3, r3
 801166c:	f003 0320 	and.w	r3, r3, #32
 8011670:	2b00      	cmp	r3, #0
 8011672:	bf0c      	ite	eq
 8011674:	2301      	moveq	r3, #1
 8011676:	2300      	movne	r3, #0
 8011678:	b2db      	uxtb	r3, r3
 801167a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00e      	beq.n	80116a0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011682:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011686:	4413      	add	r3, r2
 8011688:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801168a:	8b7a      	ldrh	r2, [r7, #26]
 801168c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801168e:	429a      	cmp	r2, r3
 8011690:	f0c0 80a0 	bcc.w	80117d4 <ip4_reass+0x2ac>
 8011694:	8b7b      	ldrh	r3, [r7, #26]
 8011696:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801169a:	4293      	cmp	r3, r2
 801169c:	f200 809a 	bhi.w	80117d4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80116a0:	69fa      	ldr	r2, [r7, #28]
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116a6:	f7ff fdd5 	bl	8011254 <ip_reass_chain_frag_into_datagram_and_validate>
 80116aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116b2:	f000 8091 	beq.w	80117d8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80116b6:	4b5f      	ldr	r3, [pc, #380]	; (8011834 <ip4_reass+0x30c>)
 80116b8:	881a      	ldrh	r2, [r3, #0]
 80116ba:	8c3b      	ldrh	r3, [r7, #32]
 80116bc:	4413      	add	r3, r2
 80116be:	b29a      	uxth	r2, r3
 80116c0:	4b5c      	ldr	r3, [pc, #368]	; (8011834 <ip4_reass+0x30c>)
 80116c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00d      	beq.n	80116e6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80116ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80116cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116ce:	4413      	add	r3, r2
 80116d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80116d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d4:	8a7a      	ldrh	r2, [r7, #18]
 80116d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	7f9b      	ldrb	r3, [r3, #30]
 80116dc:	f043 0301 	orr.w	r3, r3, #1
 80116e0:	b2da      	uxtb	r2, r3
 80116e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d171      	bne.n	80117d0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	8b9b      	ldrh	r3, [r3, #28]
 80116f0:	3314      	adds	r3, #20
 80116f2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80116f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80116fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011708:	3308      	adds	r3, #8
 801170a:	2214      	movs	r2, #20
 801170c:	4619      	mov	r1, r3
 801170e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011710:	f009 f919 	bl	801a946 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011714:	8a3b      	ldrh	r3, [r7, #16]
 8011716:	4618      	mov	r0, r3
 8011718:	f7fb ff8e 	bl	800d638 <lwip_htons>
 801171c:	4603      	mov	r3, r0
 801171e:	461a      	mov	r2, r3
 8011720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011722:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011726:	2200      	movs	r2, #0
 8011728:	719a      	strb	r2, [r3, #6]
 801172a:	2200      	movs	r2, #0
 801172c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011730:	2200      	movs	r2, #0
 8011732:	729a      	strb	r2, [r3, #10]
 8011734:	2200      	movs	r2, #0
 8011736:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801173e:	e00d      	b.n	801175c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011746:	2114      	movs	r1, #20
 8011748:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801174a:	f001 fd57 	bl	80131fc <pbuf_remove_header>
      pbuf_cat(p, r);
 801174e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f001 fea7 	bl	80134a4 <pbuf_cat>
      r = iprh->next_pbuf;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1ee      	bne.n	8011740 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011762:	4b35      	ldr	r3, [pc, #212]	; (8011838 <ip4_reass+0x310>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011768:	429a      	cmp	r2, r3
 801176a:	d102      	bne.n	8011772 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801176c:	2300      	movs	r3, #0
 801176e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011770:	e010      	b.n	8011794 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011772:	4b31      	ldr	r3, [pc, #196]	; (8011838 <ip4_reass+0x310>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011778:	e007      	b.n	801178a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011780:	429a      	cmp	r2, r3
 8011782:	d006      	beq.n	8011792 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1f4      	bne.n	801177a <ip4_reass+0x252>
 8011790:	e000      	b.n	8011794 <ip4_reass+0x26c>
          break;
 8011792:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011798:	f7ff fd2e 	bl	80111f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f001 fe41 	bl	8013424 <pbuf_clen>
 80117a2:	4603      	mov	r3, r0
 80117a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80117a6:	4b23      	ldr	r3, [pc, #140]	; (8011834 <ip4_reass+0x30c>)
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	8c3a      	ldrh	r2, [r7, #32]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d906      	bls.n	80117be <ip4_reass+0x296>
 80117b0:	4b22      	ldr	r3, [pc, #136]	; (801183c <ip4_reass+0x314>)
 80117b2:	f240 229b 	movw	r2, #667	; 0x29b
 80117b6:	4922      	ldr	r1, [pc, #136]	; (8011840 <ip4_reass+0x318>)
 80117b8:	4822      	ldr	r0, [pc, #136]	; (8011844 <ip4_reass+0x31c>)
 80117ba:	f009 fd29 	bl	801b210 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80117be:	4b1d      	ldr	r3, [pc, #116]	; (8011834 <ip4_reass+0x30c>)
 80117c0:	881a      	ldrh	r2, [r3, #0]
 80117c2:	8c3b      	ldrh	r3, [r7, #32]
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	4b1a      	ldr	r3, [pc, #104]	; (8011834 <ip4_reass+0x30c>)
 80117ca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	e02c      	b.n	801182a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80117d0:	2300      	movs	r3, #0
 80117d2:	e02a      	b.n	801182a <ip4_reass+0x302>

nullreturn_ipr:
 80117d4:	bf00      	nop
 80117d6:	e000      	b.n	80117da <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80117d8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d106      	bne.n	80117ee <ip4_reass+0x2c6>
 80117e0:	4b16      	ldr	r3, [pc, #88]	; (801183c <ip4_reass+0x314>)
 80117e2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80117e6:	4918      	ldr	r1, [pc, #96]	; (8011848 <ip4_reass+0x320>)
 80117e8:	4816      	ldr	r0, [pc, #88]	; (8011844 <ip4_reass+0x31c>)
 80117ea:	f009 fd11 	bl	801b210 <iprintf>
  if (ipr->p == NULL) {
 80117ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d114      	bne.n	8011820 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80117f6:	4b10      	ldr	r3, [pc, #64]	; (8011838 <ip4_reass+0x310>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d006      	beq.n	801180e <ip4_reass+0x2e6>
 8011800:	4b0e      	ldr	r3, [pc, #56]	; (801183c <ip4_reass+0x314>)
 8011802:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011806:	4911      	ldr	r1, [pc, #68]	; (801184c <ip4_reass+0x324>)
 8011808:	480e      	ldr	r0, [pc, #56]	; (8011844 <ip4_reass+0x31c>)
 801180a:	f009 fd01 	bl	801b210 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801180e:	2100      	movs	r1, #0
 8011810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011812:	f7ff fcf1 	bl	80111f8 <ip_reass_dequeue_datagram>
 8011816:	e004      	b.n	8011822 <ip4_reass+0x2fa>
    goto nullreturn;
 8011818:	bf00      	nop
 801181a:	e002      	b.n	8011822 <ip4_reass+0x2fa>
    goto nullreturn;
 801181c:	bf00      	nop
 801181e:	e000      	b.n	8011822 <ip4_reass+0x2fa>
  }

nullreturn:
 8011820:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f001 fd70 	bl	8013308 <pbuf_free>
  return NULL;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3738      	adds	r7, #56	; 0x38
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	240048d8 	.word	0x240048d8
 8011838:	240048d4 	.word	0x240048d4
 801183c:	0801dd04 	.word	0x0801dd04
 8011840:	0801de90 	.word	0x0801de90
 8011844:	0801dd68 	.word	0x0801dd68
 8011848:	0801deac 	.word	0x0801deac
 801184c:	0801deb8 	.word	0x0801deb8

08011850 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011854:	2005      	movs	r0, #5
 8011856:	f000 fe35 	bl	80124c4 <memp_malloc>
 801185a:	4603      	mov	r3, r0
}
 801185c:	4618      	mov	r0, r3
 801185e:	bd80      	pop	{r7, pc}

08011860 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d106      	bne.n	801187c <ip_frag_free_pbuf_custom_ref+0x1c>
 801186e:	4b07      	ldr	r3, [pc, #28]	; (801188c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011870:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011874:	4906      	ldr	r1, [pc, #24]	; (8011890 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011876:	4807      	ldr	r0, [pc, #28]	; (8011894 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011878:	f009 fcca 	bl	801b210 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801187c:	6879      	ldr	r1, [r7, #4]
 801187e:	2005      	movs	r0, #5
 8011880:	f000 fe96 	bl	80125b0 <memp_free>
}
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	0801dd04 	.word	0x0801dd04
 8011890:	0801ded8 	.word	0x0801ded8
 8011894:	0801dd68 	.word	0x0801dd68

08011898 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d106      	bne.n	80118b8 <ipfrag_free_pbuf_custom+0x20>
 80118aa:	4b11      	ldr	r3, [pc, #68]	; (80118f0 <ipfrag_free_pbuf_custom+0x58>)
 80118ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 80118b0:	4910      	ldr	r1, [pc, #64]	; (80118f4 <ipfrag_free_pbuf_custom+0x5c>)
 80118b2:	4811      	ldr	r0, [pc, #68]	; (80118f8 <ipfrag_free_pbuf_custom+0x60>)
 80118b4:	f009 fcac 	bl	801b210 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d006      	beq.n	80118ce <ipfrag_free_pbuf_custom+0x36>
 80118c0:	4b0b      	ldr	r3, [pc, #44]	; (80118f0 <ipfrag_free_pbuf_custom+0x58>)
 80118c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80118c6:	490d      	ldr	r1, [pc, #52]	; (80118fc <ipfrag_free_pbuf_custom+0x64>)
 80118c8:	480b      	ldr	r0, [pc, #44]	; (80118f8 <ipfrag_free_pbuf_custom+0x60>)
 80118ca:	f009 fca1 	bl	801b210 <iprintf>
  if (pcr->original != NULL) {
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d004      	beq.n	80118e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	695b      	ldr	r3, [r3, #20]
 80118da:	4618      	mov	r0, r3
 80118dc:	f001 fd14 	bl	8013308 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f7ff ffbd 	bl	8011860 <ip_frag_free_pbuf_custom_ref>
}
 80118e6:	bf00      	nop
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	0801dd04 	.word	0x0801dd04
 80118f4:	0801dee4 	.word	0x0801dee4
 80118f8:	0801dd68 	.word	0x0801dd68
 80118fc:	0801def0 	.word	0x0801def0

08011900 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b094      	sub	sp, #80	; 0x50
 8011904:	af02      	add	r7, sp, #8
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801190c:	2300      	movs	r3, #0
 801190e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011916:	3b14      	subs	r3, #20
 8011918:	2b00      	cmp	r3, #0
 801191a:	da00      	bge.n	801191e <ip4_frag+0x1e>
 801191c:	3307      	adds	r3, #7
 801191e:	10db      	asrs	r3, r3, #3
 8011920:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011922:	2314      	movs	r3, #20
 8011924:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 030f 	and.w	r3, r3, #15
 8011938:	b2db      	uxtb	r3, r3
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	b2db      	uxtb	r3, r3
 801193e:	2b14      	cmp	r3, #20
 8011940:	d002      	beq.n	8011948 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011942:	f06f 0305 	mvn.w	r3, #5
 8011946:	e10f      	b.n	8011b68 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	895b      	ldrh	r3, [r3, #10]
 801194c:	2b13      	cmp	r3, #19
 801194e:	d809      	bhi.n	8011964 <ip4_frag+0x64>
 8011950:	4b87      	ldr	r3, [pc, #540]	; (8011b70 <ip4_frag+0x270>)
 8011952:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011956:	4987      	ldr	r1, [pc, #540]	; (8011b74 <ip4_frag+0x274>)
 8011958:	4887      	ldr	r0, [pc, #540]	; (8011b78 <ip4_frag+0x278>)
 801195a:	f009 fc59 	bl	801b210 <iprintf>
 801195e:	f06f 0305 	mvn.w	r3, #5
 8011962:	e101      	b.n	8011b68 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011966:	88db      	ldrh	r3, [r3, #6]
 8011968:	b29b      	uxth	r3, r3
 801196a:	4618      	mov	r0, r3
 801196c:	f7fb fe64 	bl	800d638 <lwip_htons>
 8011970:	4603      	mov	r3, r0
 8011972:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011974:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011976:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801197a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801197e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011984:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	891b      	ldrh	r3, [r3, #8]
 801198a:	3b14      	subs	r3, #20
 801198c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011990:	e0e0      	b.n	8011b54 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011992:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011994:	00db      	lsls	r3, r3, #3
 8011996:	b29b      	uxth	r3, r3
 8011998:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801199c:	4293      	cmp	r3, r2
 801199e:	bf28      	it	cs
 80119a0:	4613      	movcs	r3, r2
 80119a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80119a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119a8:	2114      	movs	r1, #20
 80119aa:	200e      	movs	r0, #14
 80119ac:	f001 f9cc 	bl	8012d48 <pbuf_alloc>
 80119b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f000 80d4 	beq.w	8011b62 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	895b      	ldrh	r3, [r3, #10]
 80119be:	2b13      	cmp	r3, #19
 80119c0:	d806      	bhi.n	80119d0 <ip4_frag+0xd0>
 80119c2:	4b6b      	ldr	r3, [pc, #428]	; (8011b70 <ip4_frag+0x270>)
 80119c4:	f240 3225 	movw	r2, #805	; 0x325
 80119c8:	496c      	ldr	r1, [pc, #432]	; (8011b7c <ip4_frag+0x27c>)
 80119ca:	486b      	ldr	r0, [pc, #428]	; (8011b78 <ip4_frag+0x278>)
 80119cc:	f009 fc20 	bl	801b210 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80119d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	2214      	movs	r2, #20
 80119d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80119d8:	4618      	mov	r0, r3
 80119da:	f008 ffb4 	bl	801a946 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80119de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80119e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80119e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80119ea:	e064      	b.n	8011ab6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	895a      	ldrh	r2, [r3, #10]
 80119f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119f2:	1ad3      	subs	r3, r2, r3
 80119f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	895b      	ldrh	r3, [r3, #10]
 80119fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d906      	bls.n	8011a0e <ip4_frag+0x10e>
 8011a00:	4b5b      	ldr	r3, [pc, #364]	; (8011b70 <ip4_frag+0x270>)
 8011a02:	f240 322d 	movw	r2, #813	; 0x32d
 8011a06:	495e      	ldr	r1, [pc, #376]	; (8011b80 <ip4_frag+0x280>)
 8011a08:	485b      	ldr	r0, [pc, #364]	; (8011b78 <ip4_frag+0x278>)
 8011a0a:	f009 fc01 	bl	801b210 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011a0e:	8bfa      	ldrh	r2, [r7, #30]
 8011a10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011a14:	4293      	cmp	r3, r2
 8011a16:	bf28      	it	cs
 8011a18:	4613      	movcs	r3, r2
 8011a1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011a1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d105      	bne.n	8011a32 <ip4_frag+0x132>
        poff = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	60fb      	str	r3, [r7, #12]
        continue;
 8011a30:	e041      	b.n	8011ab6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011a32:	f7ff ff0d 	bl	8011850 <ip_frag_alloc_pbuf_custom_ref>
 8011a36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d103      	bne.n	8011a46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a40:	f001 fc62 	bl	8013308 <pbuf_free>
        goto memerr;
 8011a44:	e08e      	b.n	8011b64 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011a46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011a4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a4e:	4413      	add	r3, r2
 8011a50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011a54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011a58:	9201      	str	r2, [sp, #4]
 8011a5a:	9300      	str	r3, [sp, #0]
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2241      	movs	r2, #65	; 0x41
 8011a60:	2000      	movs	r0, #0
 8011a62:	f001 fa97 	bl	8012f94 <pbuf_alloced_custom>
 8011a66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011a6e:	69b8      	ldr	r0, [r7, #24]
 8011a70:	f7ff fef6 	bl	8011860 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a76:	f001 fc47 	bl	8013308 <pbuf_free>
        goto memerr;
 8011a7a:	e073      	b.n	8011b64 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f001 fce9 	bl	8013454 <pbuf_ref>
      pcr->original = p;
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	4a3e      	ldr	r2, [pc, #248]	; (8011b84 <ip4_frag+0x284>)
 8011a8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011a8e:	6979      	ldr	r1, [r7, #20]
 8011a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a92:	f001 fd07 	bl	80134a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011a96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011a9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011aa4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d004      	beq.n	8011ab6 <ip4_frag+0x1b6>
        poff = 0;
 8011aac:	2300      	movs	r3, #0
 8011aae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011ab6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d196      	bne.n	80119ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011abe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011ac0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011ac4:	4413      	add	r3, r2
 8011ac6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011ac8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ad0:	3b14      	subs	r3, #20
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	bfd4      	ite	le
 8011ad6:	2301      	movle	r3, #1
 8011ad8:	2300      	movgt	r3, #0
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ae6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011ae8:	6a3b      	ldr	r3, [r7, #32]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d002      	beq.n	8011af4 <ip4_frag+0x1f4>
 8011aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d003      	beq.n	8011afc <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011af4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011afa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011afc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fb fd9a 	bl	800d638 <lwip_htons>
 8011b04:	4603      	mov	r3, r0
 8011b06:	461a      	mov	r2, r3
 8011b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011b0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011b0e:	3314      	adds	r3, #20
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fb fd90 	bl	800d638 <lwip_htons>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	2200      	movs	r2, #0
 8011b24:	729a      	strb	r2, [r3, #10]
 8011b26:	2200      	movs	r2, #0
 8011b28:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	695b      	ldr	r3, [r3, #20]
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b32:	68b8      	ldr	r0, [r7, #8]
 8011b34:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b38:	f001 fbe6 	bl	8013308 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011b3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011b48:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011b4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b4e:	4413      	add	r3, r2
 8011b50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f47f af1a 	bne.w	8011992 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e002      	b.n	8011b68 <ip4_frag+0x268>
      goto memerr;
 8011b62:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3748      	adds	r7, #72	; 0x48
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	0801dd04 	.word	0x0801dd04
 8011b74:	0801defc 	.word	0x0801defc
 8011b78:	0801dd68 	.word	0x0801dd68
 8011b7c:	0801df18 	.word	0x0801df18
 8011b80:	0801df38 	.word	0x0801df38
 8011b84:	08011899 	.word	0x08011899

08011b88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011b92:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <ptr_to_mem+0x20>)
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	88fb      	ldrh	r3, [r7, #6]
 8011b98:	4413      	add	r3, r2
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	370c      	adds	r7, #12
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop
 8011ba8:	240048dc 	.word	0x240048dc

08011bac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4a05      	ldr	r2, [pc, #20]	; (8011bcc <mem_to_ptr+0x20>)
 8011bb8:	6812      	ldr	r2, [r2, #0]
 8011bba:	1a9b      	subs	r3, r3, r2
 8011bbc:	b29b      	uxth	r3, r3
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	370c      	adds	r7, #12
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop
 8011bcc:	240048dc 	.word	0x240048dc

08011bd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011bd0:	b590      	push	{r4, r7, lr}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011bd8:	4b47      	ldr	r3, [pc, #284]	; (8011cf8 <plug_holes+0x128>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d206      	bcs.n	8011bf0 <plug_holes+0x20>
 8011be2:	4b46      	ldr	r3, [pc, #280]	; (8011cfc <plug_holes+0x12c>)
 8011be4:	f240 12df 	movw	r2, #479	; 0x1df
 8011be8:	4945      	ldr	r1, [pc, #276]	; (8011d00 <plug_holes+0x130>)
 8011bea:	4846      	ldr	r0, [pc, #280]	; (8011d04 <plug_holes+0x134>)
 8011bec:	f009 fb10 	bl	801b210 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011bf0:	4b45      	ldr	r3, [pc, #276]	; (8011d08 <plug_holes+0x138>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d306      	bcc.n	8011c08 <plug_holes+0x38>
 8011bfa:	4b40      	ldr	r3, [pc, #256]	; (8011cfc <plug_holes+0x12c>)
 8011bfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011c00:	4942      	ldr	r1, [pc, #264]	; (8011d0c <plug_holes+0x13c>)
 8011c02:	4840      	ldr	r0, [pc, #256]	; (8011d04 <plug_holes+0x134>)
 8011c04:	f009 fb04 	bl	801b210 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	791b      	ldrb	r3, [r3, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d006      	beq.n	8011c1e <plug_holes+0x4e>
 8011c10:	4b3a      	ldr	r3, [pc, #232]	; (8011cfc <plug_holes+0x12c>)
 8011c12:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011c16:	493e      	ldr	r1, [pc, #248]	; (8011d10 <plug_holes+0x140>)
 8011c18:	483a      	ldr	r0, [pc, #232]	; (8011d04 <plug_holes+0x134>)
 8011c1a:	f009 faf9 	bl	801b210 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d906      	bls.n	8011c38 <plug_holes+0x68>
 8011c2a:	4b34      	ldr	r3, [pc, #208]	; (8011cfc <plug_holes+0x12c>)
 8011c2c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011c30:	4938      	ldr	r1, [pc, #224]	; (8011d14 <plug_holes+0x144>)
 8011c32:	4834      	ldr	r0, [pc, #208]	; (8011d04 <plug_holes+0x134>)
 8011c34:	f009 faec 	bl	801b210 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff ffa3 	bl	8011b88 <ptr_to_mem>
 8011c42:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d025      	beq.n	8011c98 <plug_holes+0xc8>
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	791b      	ldrb	r3, [r3, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d121      	bne.n	8011c98 <plug_holes+0xc8>
 8011c54:	4b2c      	ldr	r3, [pc, #176]	; (8011d08 <plug_holes+0x138>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d01c      	beq.n	8011c98 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011c5e:	4b2e      	ldr	r3, [pc, #184]	; (8011d18 <plug_holes+0x148>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	68fa      	ldr	r2, [r7, #12]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d102      	bne.n	8011c6e <plug_holes+0x9e>
      lfree = mem;
 8011c68:	4a2b      	ldr	r2, [pc, #172]	; (8011d18 <plug_holes+0x148>)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	881a      	ldrh	r2, [r3, #0]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	d00a      	beq.n	8011c98 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7ff ff7e 	bl	8011b88 <ptr_to_mem>
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7ff ff8c 	bl	8011bac <mem_to_ptr>
 8011c94:	4603      	mov	r3, r0
 8011c96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	885b      	ldrh	r3, [r3, #2]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7ff ff73 	bl	8011b88 <ptr_to_mem>
 8011ca2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011ca4:	68ba      	ldr	r2, [r7, #8]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d020      	beq.n	8011cee <plug_holes+0x11e>
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	791b      	ldrb	r3, [r3, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d11c      	bne.n	8011cee <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011cb4:	4b18      	ldr	r3, [pc, #96]	; (8011d18 <plug_holes+0x148>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d102      	bne.n	8011cc4 <plug_holes+0xf4>
      lfree = pmem;
 8011cbe:	4a16      	ldr	r2, [pc, #88]	; (8011d18 <plug_holes+0x148>)
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	881a      	ldrh	r2, [r3, #0]
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	881b      	ldrh	r3, [r3, #0]
 8011cd0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d00a      	beq.n	8011cee <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	881b      	ldrh	r3, [r3, #0]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff ff53 	bl	8011b88 <ptr_to_mem>
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	68b8      	ldr	r0, [r7, #8]
 8011ce6:	f7ff ff61 	bl	8011bac <mem_to_ptr>
 8011cea:	4603      	mov	r3, r0
 8011cec:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011cee:	bf00      	nop
 8011cf0:	3714      	adds	r7, #20
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd90      	pop	{r4, r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	240048dc 	.word	0x240048dc
 8011cfc:	0801df48 	.word	0x0801df48
 8011d00:	0801df94 	.word	0x0801df94
 8011d04:	0801dfac 	.word	0x0801dfac
 8011d08:	240048e0 	.word	0x240048e0
 8011d0c:	0801dfd4 	.word	0x0801dfd4
 8011d10:	0801dff0 	.word	0x0801dff0
 8011d14:	0801e00c 	.word	0x0801e00c
 8011d18:	240048e8 	.word	0x240048e8

08011d1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011d22:	4b1d      	ldr	r3, [pc, #116]	; (8011d98 <mem_init+0x7c>)
 8011d24:	4a1d      	ldr	r2, [pc, #116]	; (8011d9c <mem_init+0x80>)
 8011d26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011d28:	4b1b      	ldr	r3, [pc, #108]	; (8011d98 <mem_init+0x7c>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011d34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011d42:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8011d46:	f7ff ff1f 	bl	8011b88 <ptr_to_mem>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	4b14      	ldr	r3, [pc, #80]	; (8011da0 <mem_init+0x84>)
 8011d4e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8011d50:	4b13      	ldr	r3, [pc, #76]	; (8011da0 <mem_init+0x84>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2201      	movs	r2, #1
 8011d56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011d58:	4b11      	ldr	r3, [pc, #68]	; (8011da0 <mem_init+0x84>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011d60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011d62:	4b0f      	ldr	r3, [pc, #60]	; (8011da0 <mem_init+0x84>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011d6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011d6c:	4b0a      	ldr	r3, [pc, #40]	; (8011d98 <mem_init+0x7c>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	4a0c      	ldr	r2, [pc, #48]	; (8011da4 <mem_init+0x88>)
 8011d72:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011d74:	480c      	ldr	r0, [pc, #48]	; (8011da8 <mem_init+0x8c>)
 8011d76:	f001 fe0b 	bl	8013990 <sys_mutex_new>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d006      	beq.n	8011d8e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011d80:	4b0a      	ldr	r3, [pc, #40]	; (8011dac <mem_init+0x90>)
 8011d82:	f240 221f 	movw	r2, #543	; 0x21f
 8011d86:	490a      	ldr	r1, [pc, #40]	; (8011db0 <mem_init+0x94>)
 8011d88:	480a      	ldr	r0, [pc, #40]	; (8011db4 <mem_init+0x98>)
 8011d8a:	f009 fa41 	bl	801b210 <iprintf>
  }
}
 8011d8e:	bf00      	nop
 8011d90:	3708      	adds	r7, #8
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	240048dc 	.word	0x240048dc
 8011d9c:	30044000 	.word	0x30044000
 8011da0:	240048e0 	.word	0x240048e0
 8011da4:	240048e8 	.word	0x240048e8
 8011da8:	240048e4 	.word	0x240048e4
 8011dac:	0801df48 	.word	0x0801df48
 8011db0:	0801e038 	.word	0x0801e038
 8011db4:	0801dfac 	.word	0x0801dfac

08011db8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b086      	sub	sp, #24
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7ff fef3 	bl	8011bac <mem_to_ptr>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff feda 	bl	8011b88 <ptr_to_mem>
 8011dd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	885b      	ldrh	r3, [r3, #2]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff fed4 	bl	8011b88 <ptr_to_mem>
 8011de0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	881b      	ldrh	r3, [r3, #0]
 8011de6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d819      	bhi.n	8011e22 <mem_link_valid+0x6a>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	885b      	ldrh	r3, [r3, #2]
 8011df2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d813      	bhi.n	8011e22 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011dfe:	8afa      	ldrh	r2, [r7, #22]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d004      	beq.n	8011e0e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	8afa      	ldrh	r2, [r7, #22]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d109      	bne.n	8011e22 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011e0e:	4b08      	ldr	r3, [pc, #32]	; (8011e30 <mem_link_valid+0x78>)
 8011e10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011e12:	693a      	ldr	r2, [r7, #16]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d006      	beq.n	8011e26 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	885b      	ldrh	r3, [r3, #2]
 8011e1c:	8afa      	ldrh	r2, [r7, #22]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d001      	beq.n	8011e26 <mem_link_valid+0x6e>
    return 0;
 8011e22:	2300      	movs	r3, #0
 8011e24:	e000      	b.n	8011e28 <mem_link_valid+0x70>
  }
  return 1;
 8011e26:	2301      	movs	r3, #1
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3718      	adds	r7, #24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	240048e0 	.word	0x240048e0

08011e34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b088      	sub	sp, #32
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d070      	beq.n	8011f24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f003 0303 	and.w	r3, r3, #3
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00d      	beq.n	8011e68 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011e4c:	4b37      	ldr	r3, [pc, #220]	; (8011f2c <mem_free+0xf8>)
 8011e4e:	f240 2273 	movw	r2, #627	; 0x273
 8011e52:	4937      	ldr	r1, [pc, #220]	; (8011f30 <mem_free+0xfc>)
 8011e54:	4837      	ldr	r0, [pc, #220]	; (8011f34 <mem_free+0x100>)
 8011e56:	f009 f9db 	bl	801b210 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011e5a:	f001 fdf7 	bl	8013a4c <sys_arch_protect>
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f001 fe01 	bl	8013a68 <sys_arch_unprotect>
    return;
 8011e66:	e05e      	b.n	8011f26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	3b08      	subs	r3, #8
 8011e6c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011e6e:	4b32      	ldr	r3, [pc, #200]	; (8011f38 <mem_free+0x104>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	69fa      	ldr	r2, [r7, #28]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d306      	bcc.n	8011e86 <mem_free+0x52>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f103 020c 	add.w	r2, r3, #12
 8011e7e:	4b2f      	ldr	r3, [pc, #188]	; (8011f3c <mem_free+0x108>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d90d      	bls.n	8011ea2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011e86:	4b29      	ldr	r3, [pc, #164]	; (8011f2c <mem_free+0xf8>)
 8011e88:	f240 227f 	movw	r2, #639	; 0x27f
 8011e8c:	492c      	ldr	r1, [pc, #176]	; (8011f40 <mem_free+0x10c>)
 8011e8e:	4829      	ldr	r0, [pc, #164]	; (8011f34 <mem_free+0x100>)
 8011e90:	f009 f9be 	bl	801b210 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011e94:	f001 fdda 	bl	8013a4c <sys_arch_protect>
 8011e98:	6138      	str	r0, [r7, #16]
 8011e9a:	6938      	ldr	r0, [r7, #16]
 8011e9c:	f001 fde4 	bl	8013a68 <sys_arch_unprotect>
    return;
 8011ea0:	e041      	b.n	8011f26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011ea2:	4828      	ldr	r0, [pc, #160]	; (8011f44 <mem_free+0x110>)
 8011ea4:	f001 fd90 	bl	80139c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	791b      	ldrb	r3, [r3, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d110      	bne.n	8011ed2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011eb0:	4b1e      	ldr	r3, [pc, #120]	; (8011f2c <mem_free+0xf8>)
 8011eb2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011eb6:	4924      	ldr	r1, [pc, #144]	; (8011f48 <mem_free+0x114>)
 8011eb8:	481e      	ldr	r0, [pc, #120]	; (8011f34 <mem_free+0x100>)
 8011eba:	f009 f9a9 	bl	801b210 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011ebe:	4821      	ldr	r0, [pc, #132]	; (8011f44 <mem_free+0x110>)
 8011ec0:	f001 fd91 	bl	80139e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ec4:	f001 fdc2 	bl	8013a4c <sys_arch_protect>
 8011ec8:	6178      	str	r0, [r7, #20]
 8011eca:	6978      	ldr	r0, [r7, #20]
 8011ecc:	f001 fdcc 	bl	8013a68 <sys_arch_unprotect>
    return;
 8011ed0:	e029      	b.n	8011f26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011ed2:	69f8      	ldr	r0, [r7, #28]
 8011ed4:	f7ff ff70 	bl	8011db8 <mem_link_valid>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d110      	bne.n	8011f00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011ede:	4b13      	ldr	r3, [pc, #76]	; (8011f2c <mem_free+0xf8>)
 8011ee0:	f240 2295 	movw	r2, #661	; 0x295
 8011ee4:	4919      	ldr	r1, [pc, #100]	; (8011f4c <mem_free+0x118>)
 8011ee6:	4813      	ldr	r0, [pc, #76]	; (8011f34 <mem_free+0x100>)
 8011ee8:	f009 f992 	bl	801b210 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011eec:	4815      	ldr	r0, [pc, #84]	; (8011f44 <mem_free+0x110>)
 8011eee:	f001 fd7a 	bl	80139e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ef2:	f001 fdab 	bl	8013a4c <sys_arch_protect>
 8011ef6:	61b8      	str	r0, [r7, #24]
 8011ef8:	69b8      	ldr	r0, [r7, #24]
 8011efa:	f001 fdb5 	bl	8013a68 <sys_arch_unprotect>
    return;
 8011efe:	e012      	b.n	8011f26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	2200      	movs	r2, #0
 8011f04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011f06:	4b12      	ldr	r3, [pc, #72]	; (8011f50 <mem_free+0x11c>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	69fa      	ldr	r2, [r7, #28]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d202      	bcs.n	8011f16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011f10:	4a0f      	ldr	r2, [pc, #60]	; (8011f50 <mem_free+0x11c>)
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011f16:	69f8      	ldr	r0, [r7, #28]
 8011f18:	f7ff fe5a 	bl	8011bd0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011f1c:	4809      	ldr	r0, [pc, #36]	; (8011f44 <mem_free+0x110>)
 8011f1e:	f001 fd62 	bl	80139e6 <sys_mutex_unlock>
 8011f22:	e000      	b.n	8011f26 <mem_free+0xf2>
    return;
 8011f24:	bf00      	nop
}
 8011f26:	3720      	adds	r7, #32
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	0801df48 	.word	0x0801df48
 8011f30:	0801e054 	.word	0x0801e054
 8011f34:	0801dfac 	.word	0x0801dfac
 8011f38:	240048dc 	.word	0x240048dc
 8011f3c:	240048e0 	.word	0x240048e0
 8011f40:	0801e078 	.word	0x0801e078
 8011f44:	240048e4 	.word	0x240048e4
 8011f48:	0801e094 	.word	0x0801e094
 8011f4c:	0801e0bc 	.word	0x0801e0bc
 8011f50:	240048e8 	.word	0x240048e8

08011f54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b088      	sub	sp, #32
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011f60:	887b      	ldrh	r3, [r7, #2]
 8011f62:	3303      	adds	r3, #3
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	f023 0303 	bic.w	r3, r3, #3
 8011f6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011f6c:	8bfb      	ldrh	r3, [r7, #30]
 8011f6e:	2b0b      	cmp	r3, #11
 8011f70:	d801      	bhi.n	8011f76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011f72:	230c      	movs	r3, #12
 8011f74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011f76:	8bfb      	ldrh	r3, [r7, #30]
 8011f78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d803      	bhi.n	8011f88 <mem_trim+0x34>
 8011f80:	8bfa      	ldrh	r2, [r7, #30]
 8011f82:	887b      	ldrh	r3, [r7, #2]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d201      	bcs.n	8011f8c <mem_trim+0x38>
    return NULL;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	e0dc      	b.n	8012146 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011f8c:	4b70      	ldr	r3, [pc, #448]	; (8012150 <mem_trim+0x1fc>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d304      	bcc.n	8011fa0 <mem_trim+0x4c>
 8011f96:	4b6f      	ldr	r3, [pc, #444]	; (8012154 <mem_trim+0x200>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d306      	bcc.n	8011fae <mem_trim+0x5a>
 8011fa0:	4b6d      	ldr	r3, [pc, #436]	; (8012158 <mem_trim+0x204>)
 8011fa2:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011fa6:	496d      	ldr	r1, [pc, #436]	; (801215c <mem_trim+0x208>)
 8011fa8:	486d      	ldr	r0, [pc, #436]	; (8012160 <mem_trim+0x20c>)
 8011faa:	f009 f931 	bl	801b210 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011fae:	4b68      	ldr	r3, [pc, #416]	; (8012150 <mem_trim+0x1fc>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d304      	bcc.n	8011fc2 <mem_trim+0x6e>
 8011fb8:	4b66      	ldr	r3, [pc, #408]	; (8012154 <mem_trim+0x200>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d307      	bcc.n	8011fd2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011fc2:	f001 fd43 	bl	8013a4c <sys_arch_protect>
 8011fc6:	60b8      	str	r0, [r7, #8]
 8011fc8:	68b8      	ldr	r0, [r7, #8]
 8011fca:	f001 fd4d 	bl	8013a68 <sys_arch_unprotect>
    return rmem;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	e0b9      	b.n	8012146 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3b08      	subs	r3, #8
 8011fd6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011fd8:	69b8      	ldr	r0, [r7, #24]
 8011fda:	f7ff fde7 	bl	8011bac <mem_to_ptr>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	881a      	ldrh	r2, [r3, #0]
 8011fe6:	8afb      	ldrh	r3, [r7, #22]
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	3b08      	subs	r3, #8
 8011fee:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011ff0:	8bfa      	ldrh	r2, [r7, #30]
 8011ff2:	8abb      	ldrh	r3, [r7, #20]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d906      	bls.n	8012006 <mem_trim+0xb2>
 8011ff8:	4b57      	ldr	r3, [pc, #348]	; (8012158 <mem_trim+0x204>)
 8011ffa:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011ffe:	4959      	ldr	r1, [pc, #356]	; (8012164 <mem_trim+0x210>)
 8012000:	4857      	ldr	r0, [pc, #348]	; (8012160 <mem_trim+0x20c>)
 8012002:	f009 f905 	bl	801b210 <iprintf>
  if (newsize > size) {
 8012006:	8bfa      	ldrh	r2, [r7, #30]
 8012008:	8abb      	ldrh	r3, [r7, #20]
 801200a:	429a      	cmp	r2, r3
 801200c:	d901      	bls.n	8012012 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	e099      	b.n	8012146 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8012012:	8bfa      	ldrh	r2, [r7, #30]
 8012014:	8abb      	ldrh	r3, [r7, #20]
 8012016:	429a      	cmp	r2, r3
 8012018:	d101      	bne.n	801201e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	e093      	b.n	8012146 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801201e:	4852      	ldr	r0, [pc, #328]	; (8012168 <mem_trim+0x214>)
 8012020:	f001 fcd2 	bl	80139c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff fdad 	bl	8011b88 <ptr_to_mem>
 801202e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	791b      	ldrb	r3, [r3, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d141      	bne.n	80120bc <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	881b      	ldrh	r3, [r3, #0]
 801203c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012040:	4293      	cmp	r3, r2
 8012042:	d106      	bne.n	8012052 <mem_trim+0xfe>
 8012044:	4b44      	ldr	r3, [pc, #272]	; (8012158 <mem_trim+0x204>)
 8012046:	f240 22f5 	movw	r2, #757	; 0x2f5
 801204a:	4948      	ldr	r1, [pc, #288]	; (801216c <mem_trim+0x218>)
 801204c:	4844      	ldr	r0, [pc, #272]	; (8012160 <mem_trim+0x20c>)
 801204e:	f009 f8df 	bl	801b210 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012058:	8afa      	ldrh	r2, [r7, #22]
 801205a:	8bfb      	ldrh	r3, [r7, #30]
 801205c:	4413      	add	r3, r2
 801205e:	b29b      	uxth	r3, r3
 8012060:	3308      	adds	r3, #8
 8012062:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012064:	4b42      	ldr	r3, [pc, #264]	; (8012170 <mem_trim+0x21c>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	693a      	ldr	r2, [r7, #16]
 801206a:	429a      	cmp	r2, r3
 801206c:	d106      	bne.n	801207c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 801206e:	89fb      	ldrh	r3, [r7, #14]
 8012070:	4618      	mov	r0, r3
 8012072:	f7ff fd89 	bl	8011b88 <ptr_to_mem>
 8012076:	4602      	mov	r2, r0
 8012078:	4b3d      	ldr	r3, [pc, #244]	; (8012170 <mem_trim+0x21c>)
 801207a:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801207c:	89fb      	ldrh	r3, [r7, #14]
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff fd82 	bl	8011b88 <ptr_to_mem>
 8012084:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	2200      	movs	r2, #0
 801208a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	89ba      	ldrh	r2, [r7, #12]
 8012090:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	8afa      	ldrh	r2, [r7, #22]
 8012096:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	89fa      	ldrh	r2, [r7, #14]
 801209c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	881b      	ldrh	r3, [r3, #0]
 80120a2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d049      	beq.n	801213e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	881b      	ldrh	r3, [r3, #0]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7ff fd6a 	bl	8011b88 <ptr_to_mem>
 80120b4:	4602      	mov	r2, r0
 80120b6:	89fb      	ldrh	r3, [r7, #14]
 80120b8:	8053      	strh	r3, [r2, #2]
 80120ba:	e040      	b.n	801213e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80120bc:	8bfb      	ldrh	r3, [r7, #30]
 80120be:	f103 0214 	add.w	r2, r3, #20
 80120c2:	8abb      	ldrh	r3, [r7, #20]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d83a      	bhi.n	801213e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80120c8:	8afa      	ldrh	r2, [r7, #22]
 80120ca:	8bfb      	ldrh	r3, [r7, #30]
 80120cc:	4413      	add	r3, r2
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	3308      	adds	r3, #8
 80120d2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80120dc:	4293      	cmp	r3, r2
 80120de:	d106      	bne.n	80120ee <mem_trim+0x19a>
 80120e0:	4b1d      	ldr	r3, [pc, #116]	; (8012158 <mem_trim+0x204>)
 80120e2:	f240 3216 	movw	r2, #790	; 0x316
 80120e6:	4921      	ldr	r1, [pc, #132]	; (801216c <mem_trim+0x218>)
 80120e8:	481d      	ldr	r0, [pc, #116]	; (8012160 <mem_trim+0x20c>)
 80120ea:	f009 f891 	bl	801b210 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80120ee:	89fb      	ldrh	r3, [r7, #14]
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7ff fd49 	bl	8011b88 <ptr_to_mem>
 80120f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80120f8:	4b1d      	ldr	r3, [pc, #116]	; (8012170 <mem_trim+0x21c>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	693a      	ldr	r2, [r7, #16]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d202      	bcs.n	8012108 <mem_trim+0x1b4>
      lfree = mem2;
 8012102:	4a1b      	ldr	r2, [pc, #108]	; (8012170 <mem_trim+0x21c>)
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2200      	movs	r2, #0
 801210c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	881a      	ldrh	r2, [r3, #0]
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	8afa      	ldrh	r2, [r7, #22]
 801211a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	89fa      	ldrh	r2, [r7, #14]
 8012120:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	881b      	ldrh	r3, [r3, #0]
 8012126:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801212a:	4293      	cmp	r3, r2
 801212c:	d007      	beq.n	801213e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	881b      	ldrh	r3, [r3, #0]
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff fd28 	bl	8011b88 <ptr_to_mem>
 8012138:	4602      	mov	r2, r0
 801213a:	89fb      	ldrh	r3, [r7, #14]
 801213c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801213e:	480a      	ldr	r0, [pc, #40]	; (8012168 <mem_trim+0x214>)
 8012140:	f001 fc51 	bl	80139e6 <sys_mutex_unlock>
  return rmem;
 8012144:	687b      	ldr	r3, [r7, #4]
}
 8012146:	4618      	mov	r0, r3
 8012148:	3720      	adds	r7, #32
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	240048dc 	.word	0x240048dc
 8012154:	240048e0 	.word	0x240048e0
 8012158:	0801df48 	.word	0x0801df48
 801215c:	0801e0f0 	.word	0x0801e0f0
 8012160:	0801dfac 	.word	0x0801dfac
 8012164:	0801e108 	.word	0x0801e108
 8012168:	240048e4 	.word	0x240048e4
 801216c:	0801e128 	.word	0x0801e128
 8012170:	240048e8 	.word	0x240048e8

08012174 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b088      	sub	sp, #32
 8012178:	af00      	add	r7, sp, #0
 801217a:	4603      	mov	r3, r0
 801217c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801217e:	88fb      	ldrh	r3, [r7, #6]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d101      	bne.n	8012188 <mem_malloc+0x14>
    return NULL;
 8012184:	2300      	movs	r3, #0
 8012186:	e0e6      	b.n	8012356 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012188:	88fb      	ldrh	r3, [r7, #6]
 801218a:	3303      	adds	r3, #3
 801218c:	b29b      	uxth	r3, r3
 801218e:	f023 0303 	bic.w	r3, r3, #3
 8012192:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012194:	8bbb      	ldrh	r3, [r7, #28]
 8012196:	2b0b      	cmp	r3, #11
 8012198:	d801      	bhi.n	801219e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801219a:	230c      	movs	r3, #12
 801219c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801219e:	8bbb      	ldrh	r3, [r7, #28]
 80121a0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d803      	bhi.n	80121b0 <mem_malloc+0x3c>
 80121a8:	8bba      	ldrh	r2, [r7, #28]
 80121aa:	88fb      	ldrh	r3, [r7, #6]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d201      	bcs.n	80121b4 <mem_malloc+0x40>
    return NULL;
 80121b0:	2300      	movs	r3, #0
 80121b2:	e0d0      	b.n	8012356 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80121b4:	486a      	ldr	r0, [pc, #424]	; (8012360 <mem_malloc+0x1ec>)
 80121b6:	f001 fc07 	bl	80139c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80121ba:	4b6a      	ldr	r3, [pc, #424]	; (8012364 <mem_malloc+0x1f0>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4618      	mov	r0, r3
 80121c0:	f7ff fcf4 	bl	8011bac <mem_to_ptr>
 80121c4:	4603      	mov	r3, r0
 80121c6:	83fb      	strh	r3, [r7, #30]
 80121c8:	e0b9      	b.n	801233e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80121ca:	8bfb      	ldrh	r3, [r7, #30]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7ff fcdb 	bl	8011b88 <ptr_to_mem>
 80121d2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	791b      	ldrb	r3, [r3, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f040 80a9 	bne.w	8012330 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	881b      	ldrh	r3, [r3, #0]
 80121e2:	461a      	mov	r2, r3
 80121e4:	8bfb      	ldrh	r3, [r7, #30]
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	f1a3 0208 	sub.w	r2, r3, #8
 80121ec:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80121ee:	429a      	cmp	r2, r3
 80121f0:	f0c0 809e 	bcc.w	8012330 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	461a      	mov	r2, r3
 80121fa:	8bfb      	ldrh	r3, [r7, #30]
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	f1a3 0208 	sub.w	r2, r3, #8
 8012202:	8bbb      	ldrh	r3, [r7, #28]
 8012204:	3314      	adds	r3, #20
 8012206:	429a      	cmp	r2, r3
 8012208:	d335      	bcc.n	8012276 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801220a:	8bfa      	ldrh	r2, [r7, #30]
 801220c:	8bbb      	ldrh	r3, [r7, #28]
 801220e:	4413      	add	r3, r2
 8012210:	b29b      	uxth	r3, r3
 8012212:	3308      	adds	r3, #8
 8012214:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012216:	8a7b      	ldrh	r3, [r7, #18]
 8012218:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801221c:	4293      	cmp	r3, r2
 801221e:	d106      	bne.n	801222e <mem_malloc+0xba>
 8012220:	4b51      	ldr	r3, [pc, #324]	; (8012368 <mem_malloc+0x1f4>)
 8012222:	f240 3287 	movw	r2, #903	; 0x387
 8012226:	4951      	ldr	r1, [pc, #324]	; (801236c <mem_malloc+0x1f8>)
 8012228:	4851      	ldr	r0, [pc, #324]	; (8012370 <mem_malloc+0x1fc>)
 801222a:	f008 fff1 	bl	801b210 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801222e:	8a7b      	ldrh	r3, [r7, #18]
 8012230:	4618      	mov	r0, r3
 8012232:	f7ff fca9 	bl	8011b88 <ptr_to_mem>
 8012236:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2200      	movs	r2, #0
 801223c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	881a      	ldrh	r2, [r3, #0]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	8bfa      	ldrh	r2, [r7, #30]
 801224a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	8a7a      	ldrh	r2, [r7, #18]
 8012250:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	2201      	movs	r2, #1
 8012256:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	881b      	ldrh	r3, [r3, #0]
 801225c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012260:	4293      	cmp	r3, r2
 8012262:	d00b      	beq.n	801227c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	4618      	mov	r0, r3
 801226a:	f7ff fc8d 	bl	8011b88 <ptr_to_mem>
 801226e:	4602      	mov	r2, r0
 8012270:	8a7b      	ldrh	r3, [r7, #18]
 8012272:	8053      	strh	r3, [r2, #2]
 8012274:	e002      	b.n	801227c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	2201      	movs	r2, #1
 801227a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801227c:	4b39      	ldr	r3, [pc, #228]	; (8012364 <mem_malloc+0x1f0>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	697a      	ldr	r2, [r7, #20]
 8012282:	429a      	cmp	r2, r3
 8012284:	d127      	bne.n	80122d6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012286:	4b37      	ldr	r3, [pc, #220]	; (8012364 <mem_malloc+0x1f0>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801228c:	e005      	b.n	801229a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	881b      	ldrh	r3, [r3, #0]
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff fc78 	bl	8011b88 <ptr_to_mem>
 8012298:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	791b      	ldrb	r3, [r3, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d004      	beq.n	80122ac <mem_malloc+0x138>
 80122a2:	4b34      	ldr	r3, [pc, #208]	; (8012374 <mem_malloc+0x200>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	69ba      	ldr	r2, [r7, #24]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d1f0      	bne.n	801228e <mem_malloc+0x11a>
          }
          lfree = cur;
 80122ac:	4a2d      	ldr	r2, [pc, #180]	; (8012364 <mem_malloc+0x1f0>)
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80122b2:	4b2c      	ldr	r3, [pc, #176]	; (8012364 <mem_malloc+0x1f0>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	4b2f      	ldr	r3, [pc, #188]	; (8012374 <mem_malloc+0x200>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d00b      	beq.n	80122d6 <mem_malloc+0x162>
 80122be:	4b29      	ldr	r3, [pc, #164]	; (8012364 <mem_malloc+0x1f0>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	791b      	ldrb	r3, [r3, #4]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d006      	beq.n	80122d6 <mem_malloc+0x162>
 80122c8:	4b27      	ldr	r3, [pc, #156]	; (8012368 <mem_malloc+0x1f4>)
 80122ca:	f240 32b5 	movw	r2, #949	; 0x3b5
 80122ce:	492a      	ldr	r1, [pc, #168]	; (8012378 <mem_malloc+0x204>)
 80122d0:	4827      	ldr	r0, [pc, #156]	; (8012370 <mem_malloc+0x1fc>)
 80122d2:	f008 ff9d 	bl	801b210 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80122d6:	4822      	ldr	r0, [pc, #136]	; (8012360 <mem_malloc+0x1ec>)
 80122d8:	f001 fb85 	bl	80139e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80122dc:	8bba      	ldrh	r2, [r7, #28]
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	4413      	add	r3, r2
 80122e2:	3308      	adds	r3, #8
 80122e4:	4a23      	ldr	r2, [pc, #140]	; (8012374 <mem_malloc+0x200>)
 80122e6:	6812      	ldr	r2, [r2, #0]
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d906      	bls.n	80122fa <mem_malloc+0x186>
 80122ec:	4b1e      	ldr	r3, [pc, #120]	; (8012368 <mem_malloc+0x1f4>)
 80122ee:	f240 32ba 	movw	r2, #954	; 0x3ba
 80122f2:	4922      	ldr	r1, [pc, #136]	; (801237c <mem_malloc+0x208>)
 80122f4:	481e      	ldr	r0, [pc, #120]	; (8012370 <mem_malloc+0x1fc>)
 80122f6:	f008 ff8b 	bl	801b210 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	f003 0303 	and.w	r3, r3, #3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d006      	beq.n	8012312 <mem_malloc+0x19e>
 8012304:	4b18      	ldr	r3, [pc, #96]	; (8012368 <mem_malloc+0x1f4>)
 8012306:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 801230a:	491d      	ldr	r1, [pc, #116]	; (8012380 <mem_malloc+0x20c>)
 801230c:	4818      	ldr	r0, [pc, #96]	; (8012370 <mem_malloc+0x1fc>)
 801230e:	f008 ff7f 	bl	801b210 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	f003 0303 	and.w	r3, r3, #3
 8012318:	2b00      	cmp	r3, #0
 801231a:	d006      	beq.n	801232a <mem_malloc+0x1b6>
 801231c:	4b12      	ldr	r3, [pc, #72]	; (8012368 <mem_malloc+0x1f4>)
 801231e:	f240 32be 	movw	r2, #958	; 0x3be
 8012322:	4918      	ldr	r1, [pc, #96]	; (8012384 <mem_malloc+0x210>)
 8012324:	4812      	ldr	r0, [pc, #72]	; (8012370 <mem_malloc+0x1fc>)
 8012326:	f008 ff73 	bl	801b210 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	3308      	adds	r3, #8
 801232e:	e012      	b.n	8012356 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8012330:	8bfb      	ldrh	r3, [r7, #30]
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff fc28 	bl	8011b88 <ptr_to_mem>
 8012338:	4603      	mov	r3, r0
 801233a:	881b      	ldrh	r3, [r3, #0]
 801233c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801233e:	8bfa      	ldrh	r2, [r7, #30]
 8012340:	8bb9      	ldrh	r1, [r7, #28]
 8012342:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8012346:	1a5b      	subs	r3, r3, r1
 8012348:	429a      	cmp	r2, r3
 801234a:	f4ff af3e 	bcc.w	80121ca <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801234e:	4804      	ldr	r0, [pc, #16]	; (8012360 <mem_malloc+0x1ec>)
 8012350:	f001 fb49 	bl	80139e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	3720      	adds	r7, #32
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	240048e4 	.word	0x240048e4
 8012364:	240048e8 	.word	0x240048e8
 8012368:	0801df48 	.word	0x0801df48
 801236c:	0801e128 	.word	0x0801e128
 8012370:	0801dfac 	.word	0x0801dfac
 8012374:	240048e0 	.word	0x240048e0
 8012378:	0801e13c 	.word	0x0801e13c
 801237c:	0801e158 	.word	0x0801e158
 8012380:	0801e188 	.word	0x0801e188
 8012384:	0801e1b8 	.word	0x0801e1b8

08012388 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	689b      	ldr	r3, [r3, #8]
 8012394:	2200      	movs	r2, #0
 8012396:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	3303      	adds	r3, #3
 801239e:	f023 0303 	bic.w	r3, r3, #3
 80123a2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80123a4:	2300      	movs	r3, #0
 80123a6:	60fb      	str	r3, [r7, #12]
 80123a8:	e011      	b.n	80123ce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	689b      	ldr	r3, [r3, #8]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	689b      	ldr	r3, [r3, #8]
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	461a      	mov	r2, r3
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	4413      	add	r3, r2
 80123c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	3301      	adds	r3, #1
 80123cc:	60fb      	str	r3, [r7, #12]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	885b      	ldrh	r3, [r3, #2]
 80123d2:	461a      	mov	r2, r3
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	4293      	cmp	r3, r2
 80123d8:	dbe7      	blt.n	80123aa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80123da:	bf00      	nop
 80123dc:	3714      	adds	r7, #20
 80123de:	46bd      	mov	sp, r7
 80123e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e4:	4770      	bx	lr
	...

080123e8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80123ee:	2300      	movs	r3, #0
 80123f0:	80fb      	strh	r3, [r7, #6]
 80123f2:	e009      	b.n	8012408 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80123f4:	88fb      	ldrh	r3, [r7, #6]
 80123f6:	4a08      	ldr	r2, [pc, #32]	; (8012418 <memp_init+0x30>)
 80123f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ff ffc3 	bl	8012388 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012402:	88fb      	ldrh	r3, [r7, #6]
 8012404:	3301      	adds	r3, #1
 8012406:	80fb      	strh	r3, [r7, #6]
 8012408:	88fb      	ldrh	r3, [r7, #6]
 801240a:	2b0c      	cmp	r3, #12
 801240c:	d9f2      	bls.n	80123f4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801240e:	bf00      	nop
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	080205a8 	.word	0x080205a8

0801241c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012424:	f001 fb12 	bl	8013a4c <sys_arch_protect>
 8012428:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	689b      	ldr	r3, [r3, #8]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d015      	beq.n	8012464 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	6812      	ldr	r2, [r2, #0]
 8012440:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	f003 0303 	and.w	r3, r3, #3
 8012448:	2b00      	cmp	r3, #0
 801244a:	d006      	beq.n	801245a <do_memp_malloc_pool+0x3e>
 801244c:	4b09      	ldr	r3, [pc, #36]	; (8012474 <do_memp_malloc_pool+0x58>)
 801244e:	f240 1219 	movw	r2, #281	; 0x119
 8012452:	4909      	ldr	r1, [pc, #36]	; (8012478 <do_memp_malloc_pool+0x5c>)
 8012454:	4809      	ldr	r0, [pc, #36]	; (801247c <do_memp_malloc_pool+0x60>)
 8012456:	f008 fedb 	bl	801b210 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f001 fb04 	bl	8013a68 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	e003      	b.n	801246c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f001 faff 	bl	8013a68 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801246a:	2300      	movs	r3, #0
}
 801246c:	4618      	mov	r0, r3
 801246e:	3710      	adds	r7, #16
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	0801e1dc 	.word	0x0801e1dc
 8012478:	0801e22c 	.word	0x0801e22c
 801247c:	0801e250 	.word	0x0801e250

08012480 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d106      	bne.n	801249c <memp_malloc_pool+0x1c>
 801248e:	4b0a      	ldr	r3, [pc, #40]	; (80124b8 <memp_malloc_pool+0x38>)
 8012490:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012494:	4909      	ldr	r1, [pc, #36]	; (80124bc <memp_malloc_pool+0x3c>)
 8012496:	480a      	ldr	r0, [pc, #40]	; (80124c0 <memp_malloc_pool+0x40>)
 8012498:	f008 feba 	bl	801b210 <iprintf>
  if (desc == NULL) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d101      	bne.n	80124a6 <memp_malloc_pool+0x26>
    return NULL;
 80124a2:	2300      	movs	r3, #0
 80124a4:	e003      	b.n	80124ae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f7ff ffb8 	bl	801241c <do_memp_malloc_pool>
 80124ac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	0801e1dc 	.word	0x0801e1dc
 80124bc:	0801e278 	.word	0x0801e278
 80124c0:	0801e250 	.word	0x0801e250

080124c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	4603      	mov	r3, r0
 80124cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80124ce:	79fb      	ldrb	r3, [r7, #7]
 80124d0:	2b0c      	cmp	r3, #12
 80124d2:	d908      	bls.n	80124e6 <memp_malloc+0x22>
 80124d4:	4b0a      	ldr	r3, [pc, #40]	; (8012500 <memp_malloc+0x3c>)
 80124d6:	f240 1257 	movw	r2, #343	; 0x157
 80124da:	490a      	ldr	r1, [pc, #40]	; (8012504 <memp_malloc+0x40>)
 80124dc:	480a      	ldr	r0, [pc, #40]	; (8012508 <memp_malloc+0x44>)
 80124de:	f008 fe97 	bl	801b210 <iprintf>
 80124e2:	2300      	movs	r3, #0
 80124e4:	e008      	b.n	80124f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80124e6:	79fb      	ldrb	r3, [r7, #7]
 80124e8:	4a08      	ldr	r2, [pc, #32]	; (801250c <memp_malloc+0x48>)
 80124ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7ff ff94 	bl	801241c <do_memp_malloc_pool>
 80124f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80124f6:	68fb      	ldr	r3, [r7, #12]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	0801e1dc 	.word	0x0801e1dc
 8012504:	0801e28c 	.word	0x0801e28c
 8012508:	0801e250 	.word	0x0801e250
 801250c:	080205a8 	.word	0x080205a8

08012510 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	f003 0303 	and.w	r3, r3, #3
 8012520:	2b00      	cmp	r3, #0
 8012522:	d006      	beq.n	8012532 <do_memp_free_pool+0x22>
 8012524:	4b0d      	ldr	r3, [pc, #52]	; (801255c <do_memp_free_pool+0x4c>)
 8012526:	f240 126d 	movw	r2, #365	; 0x16d
 801252a:	490d      	ldr	r1, [pc, #52]	; (8012560 <do_memp_free_pool+0x50>)
 801252c:	480d      	ldr	r0, [pc, #52]	; (8012564 <do_memp_free_pool+0x54>)
 801252e:	f008 fe6f 	bl	801b210 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012536:	f001 fa89 	bl	8013a4c <sys_arch_protect>
 801253a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801254e:	68b8      	ldr	r0, [r7, #8]
 8012550:	f001 fa8a 	bl	8013a68 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012554:	bf00      	nop
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	0801e1dc 	.word	0x0801e1dc
 8012560:	0801e2ac 	.word	0x0801e2ac
 8012564:	0801e250 	.word	0x0801e250

08012568 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d106      	bne.n	8012586 <memp_free_pool+0x1e>
 8012578:	4b0a      	ldr	r3, [pc, #40]	; (80125a4 <memp_free_pool+0x3c>)
 801257a:	f240 1295 	movw	r2, #405	; 0x195
 801257e:	490a      	ldr	r1, [pc, #40]	; (80125a8 <memp_free_pool+0x40>)
 8012580:	480a      	ldr	r0, [pc, #40]	; (80125ac <memp_free_pool+0x44>)
 8012582:	f008 fe45 	bl	801b210 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d007      	beq.n	801259c <memp_free_pool+0x34>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d004      	beq.n	801259c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012592:	6839      	ldr	r1, [r7, #0]
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7ff ffbb 	bl	8012510 <do_memp_free_pool>
 801259a:	e000      	b.n	801259e <memp_free_pool+0x36>
    return;
 801259c:	bf00      	nop
}
 801259e:	3708      	adds	r7, #8
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	0801e1dc 	.word	0x0801e1dc
 80125a8:	0801e278 	.word	0x0801e278
 80125ac:	0801e250 	.word	0x0801e250

080125b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	4603      	mov	r3, r0
 80125b8:	6039      	str	r1, [r7, #0]
 80125ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	2b0c      	cmp	r3, #12
 80125c0:	d907      	bls.n	80125d2 <memp_free+0x22>
 80125c2:	4b0c      	ldr	r3, [pc, #48]	; (80125f4 <memp_free+0x44>)
 80125c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80125c8:	490b      	ldr	r1, [pc, #44]	; (80125f8 <memp_free+0x48>)
 80125ca:	480c      	ldr	r0, [pc, #48]	; (80125fc <memp_free+0x4c>)
 80125cc:	f008 fe20 	bl	801b210 <iprintf>
 80125d0:	e00c      	b.n	80125ec <memp_free+0x3c>

  if (mem == NULL) {
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d008      	beq.n	80125ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80125d8:	79fb      	ldrb	r3, [r7, #7]
 80125da:	4a09      	ldr	r2, [pc, #36]	; (8012600 <memp_free+0x50>)
 80125dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125e0:	6839      	ldr	r1, [r7, #0]
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7ff ff94 	bl	8012510 <do_memp_free_pool>
 80125e8:	e000      	b.n	80125ec <memp_free+0x3c>
    return;
 80125ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	0801e1dc 	.word	0x0801e1dc
 80125f8:	0801e2cc 	.word	0x0801e2cc
 80125fc:	0801e250 	.word	0x0801e250
 8012600:	080205a8 	.word	0x080205a8

08012604 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012608:	bf00      	nop
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
	...

08012614 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
 8012620:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d108      	bne.n	801263a <netif_add+0x26>
 8012628:	4b5b      	ldr	r3, [pc, #364]	; (8012798 <netif_add+0x184>)
 801262a:	f240 1227 	movw	r2, #295	; 0x127
 801262e:	495b      	ldr	r1, [pc, #364]	; (801279c <netif_add+0x188>)
 8012630:	485b      	ldr	r0, [pc, #364]	; (80127a0 <netif_add+0x18c>)
 8012632:	f008 fded 	bl	801b210 <iprintf>
 8012636:	2300      	movs	r3, #0
 8012638:	e0a9      	b.n	801278e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	2b00      	cmp	r3, #0
 801263e:	d108      	bne.n	8012652 <netif_add+0x3e>
 8012640:	4b55      	ldr	r3, [pc, #340]	; (8012798 <netif_add+0x184>)
 8012642:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012646:	4957      	ldr	r1, [pc, #348]	; (80127a4 <netif_add+0x190>)
 8012648:	4855      	ldr	r0, [pc, #340]	; (80127a0 <netif_add+0x18c>)
 801264a:	f008 fde1 	bl	801b210 <iprintf>
 801264e:	2300      	movs	r3, #0
 8012650:	e09d      	b.n	801278e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012658:	4b53      	ldr	r3, [pc, #332]	; (80127a8 <netif_add+0x194>)
 801265a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012662:	4b51      	ldr	r3, [pc, #324]	; (80127a8 <netif_add+0x194>)
 8012664:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d101      	bne.n	8012670 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801266c:	4b4e      	ldr	r3, [pc, #312]	; (80127a8 <netif_add+0x194>)
 801266e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2200      	movs	r2, #0
 8012674:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2200      	movs	r2, #0
 801267a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2200      	movs	r2, #0
 8012680:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	4a49      	ldr	r2, [pc, #292]	; (80127ac <netif_add+0x198>)
 8012686:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2200      	movs	r2, #0
 801268c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2200      	movs	r2, #0
 8012692:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	3324      	adds	r3, #36	; 0x24
 801269a:	2204      	movs	r2, #4
 801269c:	2100      	movs	r1, #0
 801269e:	4618      	mov	r0, r3
 80126a0:	f008 f975 	bl	801a98e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	6a3a      	ldr	r2, [r7, #32]
 80126ae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80126b0:	4b3f      	ldr	r3, [pc, #252]	; (80127b0 <netif_add+0x19c>)
 80126b2:	781a      	ldrb	r2, [r3, #0]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126be:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	68b9      	ldr	r1, [r7, #8]
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f000 f914 	bl	80128f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	4798      	blx	r3
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d001      	beq.n	80126dc <netif_add+0xc8>
    return NULL;
 80126d8:	2300      	movs	r3, #0
 80126da:	e058      	b.n	801278e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80126e2:	2bff      	cmp	r3, #255	; 0xff
 80126e4:	d103      	bne.n	80126ee <netif_add+0xda>
        netif->num = 0;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80126ee:	2300      	movs	r3, #0
 80126f0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80126f2:	4b30      	ldr	r3, [pc, #192]	; (80127b4 <netif_add+0x1a0>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	617b      	str	r3, [r7, #20]
 80126f8:	e02b      	b.n	8012752 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80126fa:	697a      	ldr	r2, [r7, #20]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d106      	bne.n	8012710 <netif_add+0xfc>
 8012702:	4b25      	ldr	r3, [pc, #148]	; (8012798 <netif_add+0x184>)
 8012704:	f240 128b 	movw	r2, #395	; 0x18b
 8012708:	492b      	ldr	r1, [pc, #172]	; (80127b8 <netif_add+0x1a4>)
 801270a:	4825      	ldr	r0, [pc, #148]	; (80127a0 <netif_add+0x18c>)
 801270c:	f008 fd80 	bl	801b210 <iprintf>
        num_netifs++;
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	3301      	adds	r3, #1
 8012714:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	2bff      	cmp	r3, #255	; 0xff
 801271a:	dd06      	ble.n	801272a <netif_add+0x116>
 801271c:	4b1e      	ldr	r3, [pc, #120]	; (8012798 <netif_add+0x184>)
 801271e:	f240 128d 	movw	r2, #397	; 0x18d
 8012722:	4926      	ldr	r1, [pc, #152]	; (80127bc <netif_add+0x1a8>)
 8012724:	481e      	ldr	r0, [pc, #120]	; (80127a0 <netif_add+0x18c>)
 8012726:	f008 fd73 	bl	801b210 <iprintf>
        if (netif2->num == netif->num) {
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012736:	429a      	cmp	r2, r3
 8012738:	d108      	bne.n	801274c <netif_add+0x138>
          netif->num++;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012740:	3301      	adds	r3, #1
 8012742:	b2da      	uxtb	r2, r3
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801274a:	e005      	b.n	8012758 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	617b      	str	r3, [r7, #20]
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1d0      	bne.n	80126fa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d1be      	bne.n	80126dc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012764:	2bfe      	cmp	r3, #254	; 0xfe
 8012766:	d103      	bne.n	8012770 <netif_add+0x15c>
    netif_num = 0;
 8012768:	4b11      	ldr	r3, [pc, #68]	; (80127b0 <netif_add+0x19c>)
 801276a:	2200      	movs	r2, #0
 801276c:	701a      	strb	r2, [r3, #0]
 801276e:	e006      	b.n	801277e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012776:	3301      	adds	r3, #1
 8012778:	b2da      	uxtb	r2, r3
 801277a:	4b0d      	ldr	r3, [pc, #52]	; (80127b0 <netif_add+0x19c>)
 801277c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801277e:	4b0d      	ldr	r3, [pc, #52]	; (80127b4 <netif_add+0x1a0>)
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012786:	4a0b      	ldr	r2, [pc, #44]	; (80127b4 <netif_add+0x1a0>)
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801278c:	68fb      	ldr	r3, [r7, #12]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	0801e2e8 	.word	0x0801e2e8
 801279c:	0801e398 	.word	0x0801e398
 80127a0:	0801e354 	.word	0x0801e354
 80127a4:	0801e3b4 	.word	0x0801e3b4
 80127a8:	08020504 	.word	0x08020504
 80127ac:	08012bd7 	.word	0x08012bd7
 80127b0:	24004920 	.word	0x24004920
 80127b4:	24008a30 	.word	0x24008a30
 80127b8:	0801e3d8 	.word	0x0801e3d8
 80127bc:	0801e3ec 	.word	0x0801e3ec

080127c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80127ca:	6839      	ldr	r1, [r7, #0]
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f002 fc97 	bl	8015100 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f007 fa55 	bl	8019c84 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80127da:	bf00      	nop
 80127dc:	3708      	adds	r7, #8
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
	...

080127e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b086      	sub	sp, #24
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d106      	bne.n	8012804 <netif_do_set_ipaddr+0x20>
 80127f6:	4b1d      	ldr	r3, [pc, #116]	; (801286c <netif_do_set_ipaddr+0x88>)
 80127f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80127fc:	491c      	ldr	r1, [pc, #112]	; (8012870 <netif_do_set_ipaddr+0x8c>)
 80127fe:	481d      	ldr	r0, [pc, #116]	; (8012874 <netif_do_set_ipaddr+0x90>)
 8012800:	f008 fd06 	bl	801b210 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d106      	bne.n	8012818 <netif_do_set_ipaddr+0x34>
 801280a:	4b18      	ldr	r3, [pc, #96]	; (801286c <netif_do_set_ipaddr+0x88>)
 801280c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012810:	4917      	ldr	r1, [pc, #92]	; (8012870 <netif_do_set_ipaddr+0x8c>)
 8012812:	4818      	ldr	r0, [pc, #96]	; (8012874 <netif_do_set_ipaddr+0x90>)
 8012814:	f008 fcfc 	bl	801b210 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	3304      	adds	r3, #4
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	429a      	cmp	r2, r3
 8012824:	d01c      	beq.n	8012860 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	3304      	adds	r3, #4
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012836:	f107 0314 	add.w	r3, r7, #20
 801283a:	4619      	mov	r1, r3
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f7ff ffbf 	bl	80127c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d002      	beq.n	801284e <netif_do_set_ipaddr+0x6a>
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	e000      	b.n	8012850 <netif_do_set_ipaddr+0x6c>
 801284e:	2300      	movs	r3, #0
 8012850:	68fa      	ldr	r2, [r7, #12]
 8012852:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012854:	2101      	movs	r1, #1
 8012856:	68f8      	ldr	r0, [r7, #12]
 8012858:	f000 f8d2 	bl	8012a00 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801285c:	2301      	movs	r3, #1
 801285e:	e000      	b.n	8012862 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012860:	2300      	movs	r3, #0
}
 8012862:	4618      	mov	r0, r3
 8012864:	3718      	adds	r7, #24
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	0801e2e8 	.word	0x0801e2e8
 8012870:	0801e41c 	.word	0x0801e41c
 8012874:	0801e354 	.word	0x0801e354

08012878 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	3308      	adds	r3, #8
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	429a      	cmp	r2, r3
 8012890:	d00a      	beq.n	80128a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <netif_do_set_netmask+0x26>
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	e000      	b.n	80128a0 <netif_do_set_netmask+0x28>
 801289e:	2300      	movs	r3, #0
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80128a4:	2301      	movs	r3, #1
 80128a6:	e000      	b.n	80128aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80128a8:	2300      	movs	r3, #0
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3714      	adds	r7, #20
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr

080128b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80128b6:	b480      	push	{r7}
 80128b8:	b085      	sub	sp, #20
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	60f8      	str	r0, [r7, #12]
 80128be:	60b9      	str	r1, [r7, #8]
 80128c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	330c      	adds	r3, #12
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d00a      	beq.n	80128e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d002      	beq.n	80128dc <netif_do_set_gw+0x26>
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	e000      	b.n	80128de <netif_do_set_gw+0x28>
 80128dc:	2300      	movs	r3, #0
 80128de:	68fa      	ldr	r2, [r7, #12]
 80128e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80128e2:	2301      	movs	r3, #1
 80128e4:	e000      	b.n	80128e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3714      	adds	r7, #20
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b088      	sub	sp, #32
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
 8012900:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012902:	2300      	movs	r3, #0
 8012904:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012906:	2300      	movs	r3, #0
 8012908:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d101      	bne.n	8012914 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012910:	4b1c      	ldr	r3, [pc, #112]	; (8012984 <netif_set_addr+0x90>)
 8012912:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d101      	bne.n	801291e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801291a:	4b1a      	ldr	r3, [pc, #104]	; (8012984 <netif_set_addr+0x90>)
 801291c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012924:	4b17      	ldr	r3, [pc, #92]	; (8012984 <netif_set_addr+0x90>)
 8012926:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d003      	beq.n	8012936 <netif_set_addr+0x42>
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d101      	bne.n	801293a <netif_set_addr+0x46>
 8012936:	2301      	movs	r3, #1
 8012938:	e000      	b.n	801293c <netif_set_addr+0x48>
 801293a:	2300      	movs	r3, #0
 801293c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d006      	beq.n	8012952 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012944:	f107 0310 	add.w	r3, r7, #16
 8012948:	461a      	mov	r2, r3
 801294a:	68b9      	ldr	r1, [r7, #8]
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f7ff ff49 	bl	80127e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012952:	69fa      	ldr	r2, [r7, #28]
 8012954:	6879      	ldr	r1, [r7, #4]
 8012956:	68f8      	ldr	r0, [r7, #12]
 8012958:	f7ff ff8e 	bl	8012878 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801295c:	69ba      	ldr	r2, [r7, #24]
 801295e:	6839      	ldr	r1, [r7, #0]
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f7ff ffa8 	bl	80128b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d106      	bne.n	801297a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801296c:	f107 0310 	add.w	r3, r7, #16
 8012970:	461a      	mov	r2, r3
 8012972:	68b9      	ldr	r1, [r7, #8]
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	f7ff ff35 	bl	80127e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801297a:	bf00      	nop
 801297c:	3720      	adds	r7, #32
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	08020504 	.word	0x08020504

08012988 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012988:	b480      	push	{r7}
 801298a:	b083      	sub	sp, #12
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012990:	4a04      	ldr	r2, [pc, #16]	; (80129a4 <netif_set_default+0x1c>)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012996:	bf00      	nop
 8012998:	370c      	adds	r7, #12
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	24008a34 	.word	0x24008a34

080129a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d107      	bne.n	80129c6 <netif_set_up+0x1e>
 80129b6:	4b0f      	ldr	r3, [pc, #60]	; (80129f4 <netif_set_up+0x4c>)
 80129b8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80129bc:	490e      	ldr	r1, [pc, #56]	; (80129f8 <netif_set_up+0x50>)
 80129be:	480f      	ldr	r0, [pc, #60]	; (80129fc <netif_set_up+0x54>)
 80129c0:	f008 fc26 	bl	801b210 <iprintf>
 80129c4:	e013      	b.n	80129ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d10c      	bne.n	80129ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80129da:	f043 0301 	orr.w	r3, r3, #1
 80129de:	b2da      	uxtb	r2, r3
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80129e6:	2103      	movs	r1, #3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f000 f809 	bl	8012a00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	0801e2e8 	.word	0x0801e2e8
 80129f8:	0801e48c 	.word	0x0801e48c
 80129fc:	0801e354 	.word	0x0801e354

08012a00 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	460b      	mov	r3, r1
 8012a0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d106      	bne.n	8012a20 <netif_issue_reports+0x20>
 8012a12:	4b18      	ldr	r3, [pc, #96]	; (8012a74 <netif_issue_reports+0x74>)
 8012a14:	f240 326d 	movw	r2, #877	; 0x36d
 8012a18:	4917      	ldr	r1, [pc, #92]	; (8012a78 <netif_issue_reports+0x78>)
 8012a1a:	4818      	ldr	r0, [pc, #96]	; (8012a7c <netif_issue_reports+0x7c>)
 8012a1c:	f008 fbf8 	bl	801b210 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a26:	f003 0304 	and.w	r3, r3, #4
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d01e      	beq.n	8012a6c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a34:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d017      	beq.n	8012a6c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012a3c:	78fb      	ldrb	r3, [r7, #3]
 8012a3e:	f003 0301 	and.w	r3, r3, #1
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d013      	beq.n	8012a6e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3304      	adds	r3, #4
 8012a4a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d00e      	beq.n	8012a6e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a56:	f003 0308 	and.w	r3, r3, #8
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d007      	beq.n	8012a6e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	3304      	adds	r3, #4
 8012a62:	4619      	mov	r1, r3
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7fd fbf7 	bl	8010258 <etharp_request>
 8012a6a:	e000      	b.n	8012a6e <netif_issue_reports+0x6e>
    return;
 8012a6c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	0801e2e8 	.word	0x0801e2e8
 8012a78:	0801e4a8 	.word	0x0801e4a8
 8012a7c:	0801e354 	.word	0x0801e354

08012a80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d107      	bne.n	8012a9e <netif_set_down+0x1e>
 8012a8e:	4b12      	ldr	r3, [pc, #72]	; (8012ad8 <netif_set_down+0x58>)
 8012a90:	f240 329b 	movw	r2, #923	; 0x39b
 8012a94:	4911      	ldr	r1, [pc, #68]	; (8012adc <netif_set_down+0x5c>)
 8012a96:	4812      	ldr	r0, [pc, #72]	; (8012ae0 <netif_set_down+0x60>)
 8012a98:	f008 fbba 	bl	801b210 <iprintf>
 8012a9c:	e019      	b.n	8012ad2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012aa4:	f003 0301 	and.w	r3, r3, #1
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d012      	beq.n	8012ad2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ab2:	f023 0301 	bic.w	r3, r3, #1
 8012ab6:	b2da      	uxtb	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ac4:	f003 0308 	and.w	r3, r3, #8
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d002      	beq.n	8012ad2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7fc ff7d 	bl	800f9cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	0801e2e8 	.word	0x0801e2e8
 8012adc:	0801e4cc 	.word	0x0801e4cc
 8012ae0:	0801e354 	.word	0x0801e354

08012ae4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d107      	bne.n	8012b02 <netif_set_link_up+0x1e>
 8012af2:	4b15      	ldr	r3, [pc, #84]	; (8012b48 <netif_set_link_up+0x64>)
 8012af4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012af8:	4914      	ldr	r1, [pc, #80]	; (8012b4c <netif_set_link_up+0x68>)
 8012afa:	4815      	ldr	r0, [pc, #84]	; (8012b50 <netif_set_link_up+0x6c>)
 8012afc:	f008 fb88 	bl	801b210 <iprintf>
 8012b00:	e01e      	b.n	8012b40 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b08:	f003 0304 	and.w	r3, r3, #4
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d117      	bne.n	8012b40 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b16:	f043 0304 	orr.w	r3, r3, #4
 8012b1a:	b2da      	uxtb	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f7fb f9b2 	bl	800de8c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012b28:	2103      	movs	r1, #3
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff ff68 	bl	8012a00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	69db      	ldr	r3, [r3, #28]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d003      	beq.n	8012b40 <netif_set_link_up+0x5c>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	69db      	ldr	r3, [r3, #28]
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	0801e2e8 	.word	0x0801e2e8
 8012b4c:	0801e4ec 	.word	0x0801e4ec
 8012b50:	0801e354 	.word	0x0801e354

08012b54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d107      	bne.n	8012b72 <netif_set_link_down+0x1e>
 8012b62:	4b11      	ldr	r3, [pc, #68]	; (8012ba8 <netif_set_link_down+0x54>)
 8012b64:	f240 4206 	movw	r2, #1030	; 0x406
 8012b68:	4910      	ldr	r1, [pc, #64]	; (8012bac <netif_set_link_down+0x58>)
 8012b6a:	4811      	ldr	r0, [pc, #68]	; (8012bb0 <netif_set_link_down+0x5c>)
 8012b6c:	f008 fb50 	bl	801b210 <iprintf>
 8012b70:	e017      	b.n	8012ba2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b78:	f003 0304 	and.w	r3, r3, #4
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d010      	beq.n	8012ba2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b86:	f023 0304 	bic.w	r3, r3, #4
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	69db      	ldr	r3, [r3, #28]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d003      	beq.n	8012ba2 <netif_set_link_down+0x4e>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	69db      	ldr	r3, [r3, #28]
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012ba2:	3708      	adds	r7, #8
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	0801e2e8 	.word	0x0801e2e8
 8012bac:	0801e510 	.word	0x0801e510
 8012bb0:	0801e354 	.word	0x0801e354

08012bb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b083      	sub	sp, #12
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d002      	beq.n	8012bca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	683a      	ldr	r2, [r7, #0]
 8012bc8:	61da      	str	r2, [r3, #28]
  }
}
 8012bca:	bf00      	nop
 8012bcc:	370c      	adds	r7, #12
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd4:	4770      	bx	lr

08012bd6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012bd6:	b480      	push	{r7}
 8012bd8:	b085      	sub	sp, #20
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	60f8      	str	r0, [r7, #12]
 8012bde:	60b9      	str	r1, [r7, #8]
 8012be0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012be2:	f06f 030b 	mvn.w	r3, #11
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3714      	adds	r7, #20
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr
	...

08012bf4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b085      	sub	sp, #20
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012bfe:	79fb      	ldrb	r3, [r7, #7]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d013      	beq.n	8012c2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012c04:	4b0d      	ldr	r3, [pc, #52]	; (8012c3c <netif_get_by_index+0x48>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	60fb      	str	r3, [r7, #12]
 8012c0a:	e00c      	b.n	8012c26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012c12:	3301      	adds	r3, #1
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	79fa      	ldrb	r2, [r7, #7]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d101      	bne.n	8012c20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	e006      	b.n	8012c2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	60fb      	str	r3, [r7, #12]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1ef      	bne.n	8012c0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3714      	adds	r7, #20
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop
 8012c3c:	24008a30 	.word	0x24008a30

08012c40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012c46:	f000 ff01 	bl	8013a4c <sys_arch_protect>
 8012c4a:	6038      	str	r0, [r7, #0]
 8012c4c:	4b0d      	ldr	r3, [pc, #52]	; (8012c84 <pbuf_free_ooseq+0x44>)
 8012c4e:	2200      	movs	r2, #0
 8012c50:	701a      	strb	r2, [r3, #0]
 8012c52:	6838      	ldr	r0, [r7, #0]
 8012c54:	f000 ff08 	bl	8013a68 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012c58:	4b0b      	ldr	r3, [pc, #44]	; (8012c88 <pbuf_free_ooseq+0x48>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	607b      	str	r3, [r7, #4]
 8012c5e:	e00a      	b.n	8012c76 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d003      	beq.n	8012c70 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f002 fa87 	bl	801517c <tcp_free_ooseq>
      return;
 8012c6e:	e005      	b.n	8012c7c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	607b      	str	r3, [r7, #4]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1f1      	bne.n	8012c60 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	24008a38 	.word	0x24008a38
 8012c88:	24008a48 	.word	0x24008a48

08012c8c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012c94:	f7ff ffd4 	bl	8012c40 <pbuf_free_ooseq>
}
 8012c98:	bf00      	nop
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012ca6:	f000 fed1 	bl	8013a4c <sys_arch_protect>
 8012caa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012cac:	4b0f      	ldr	r3, [pc, #60]	; (8012cec <pbuf_pool_is_empty+0x4c>)
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012cb2:	4b0e      	ldr	r3, [pc, #56]	; (8012cec <pbuf_pool_is_empty+0x4c>)
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f000 fed5 	bl	8013a68 <sys_arch_unprotect>

  if (!queued) {
 8012cbe:	78fb      	ldrb	r3, [r7, #3]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10f      	bne.n	8012ce4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	480a      	ldr	r0, [pc, #40]	; (8012cf0 <pbuf_pool_is_empty+0x50>)
 8012cc8:	f006 f92a 	bl	8018f20 <tcpip_try_callback>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d008      	beq.n	8012ce4 <pbuf_pool_is_empty+0x44>
 8012cd2:	f000 febb 	bl	8013a4c <sys_arch_protect>
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	4b04      	ldr	r3, [pc, #16]	; (8012cec <pbuf_pool_is_empty+0x4c>)
 8012cda:	2200      	movs	r2, #0
 8012cdc:	701a      	strb	r2, [r3, #0]
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 fec2 	bl	8013a68 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012ce4:	bf00      	nop
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	24008a38 	.word	0x24008a38
 8012cf0:	08012c8d 	.word	0x08012c8d

08012cf4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b085      	sub	sp, #20
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	4611      	mov	r1, r2
 8012d00:	461a      	mov	r2, r3
 8012d02:	460b      	mov	r3, r1
 8012d04:	80fb      	strh	r3, [r7, #6]
 8012d06:	4613      	mov	r3, r2
 8012d08:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	68ba      	ldr	r2, [r7, #8]
 8012d14:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	88fa      	ldrh	r2, [r7, #6]
 8012d1a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	88ba      	ldrh	r2, [r7, #4]
 8012d20:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012d22:	8b3b      	ldrh	r3, [r7, #24]
 8012d24:	b2da      	uxtb	r2, r3
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	7f3a      	ldrb	r2, [r7, #28]
 8012d2e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2201      	movs	r2, #1
 8012d34:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	73da      	strb	r2, [r3, #15]
}
 8012d3c:	bf00      	nop
 8012d3e:	3714      	adds	r7, #20
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b08c      	sub	sp, #48	; 0x30
 8012d4c:	af02      	add	r7, sp, #8
 8012d4e:	4603      	mov	r3, r0
 8012d50:	71fb      	strb	r3, [r7, #7]
 8012d52:	460b      	mov	r3, r1
 8012d54:	80bb      	strh	r3, [r7, #4]
 8012d56:	4613      	mov	r3, r2
 8012d58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012d5a:	79fb      	ldrb	r3, [r7, #7]
 8012d5c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012d5e:	887b      	ldrh	r3, [r7, #2]
 8012d60:	2b41      	cmp	r3, #65	; 0x41
 8012d62:	d00b      	beq.n	8012d7c <pbuf_alloc+0x34>
 8012d64:	2b41      	cmp	r3, #65	; 0x41
 8012d66:	dc02      	bgt.n	8012d6e <pbuf_alloc+0x26>
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d007      	beq.n	8012d7c <pbuf_alloc+0x34>
 8012d6c:	e0c2      	b.n	8012ef4 <pbuf_alloc+0x1ac>
 8012d6e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012d72:	d00b      	beq.n	8012d8c <pbuf_alloc+0x44>
 8012d74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012d78:	d070      	beq.n	8012e5c <pbuf_alloc+0x114>
 8012d7a:	e0bb      	b.n	8012ef4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012d7c:	887a      	ldrh	r2, [r7, #2]
 8012d7e:	88bb      	ldrh	r3, [r7, #4]
 8012d80:	4619      	mov	r1, r3
 8012d82:	2000      	movs	r0, #0
 8012d84:	f000 f8d2 	bl	8012f2c <pbuf_alloc_reference>
 8012d88:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012d8a:	e0bd      	b.n	8012f08 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012d90:	2300      	movs	r3, #0
 8012d92:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012d94:	88bb      	ldrh	r3, [r7, #4]
 8012d96:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012d98:	200c      	movs	r0, #12
 8012d9a:	f7ff fb93 	bl	80124c4 <memp_malloc>
 8012d9e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d109      	bne.n	8012dba <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8012da6:	f7ff ff7b 	bl	8012ca0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8012db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012db2:	f000 faa9 	bl	8013308 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012db6:	2300      	movs	r3, #0
 8012db8:	e0a7      	b.n	8012f0a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012dba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dbc:	3303      	adds	r3, #3
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	f023 0303 	bic.w	r3, r3, #3
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	8b7a      	ldrh	r2, [r7, #26]
 8012dce:	4293      	cmp	r3, r2
 8012dd0:	bf28      	it	cs
 8012dd2:	4613      	movcs	r3, r2
 8012dd4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012dd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dd8:	3310      	adds	r3, #16
 8012dda:	693a      	ldr	r2, [r7, #16]
 8012ddc:	4413      	add	r3, r2
 8012dde:	3303      	adds	r3, #3
 8012de0:	f023 0303 	bic.w	r3, r3, #3
 8012de4:	4618      	mov	r0, r3
 8012de6:	89f9      	ldrh	r1, [r7, #14]
 8012de8:	8b7a      	ldrh	r2, [r7, #26]
 8012dea:	2300      	movs	r3, #0
 8012dec:	9301      	str	r3, [sp, #4]
 8012dee:	887b      	ldrh	r3, [r7, #2]
 8012df0:	9300      	str	r3, [sp, #0]
 8012df2:	460b      	mov	r3, r1
 8012df4:	4601      	mov	r1, r0
 8012df6:	6938      	ldr	r0, [r7, #16]
 8012df8:	f7ff ff7c 	bl	8012cf4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	f003 0303 	and.w	r3, r3, #3
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d006      	beq.n	8012e16 <pbuf_alloc+0xce>
 8012e08:	4b42      	ldr	r3, [pc, #264]	; (8012f14 <pbuf_alloc+0x1cc>)
 8012e0a:	f240 1201 	movw	r2, #257	; 0x101
 8012e0e:	4942      	ldr	r1, [pc, #264]	; (8012f18 <pbuf_alloc+0x1d0>)
 8012e10:	4842      	ldr	r0, [pc, #264]	; (8012f1c <pbuf_alloc+0x1d4>)
 8012e12:	f008 f9fd 	bl	801b210 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e18:	3303      	adds	r3, #3
 8012e1a:	f023 0303 	bic.w	r3, r3, #3
 8012e1e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012e22:	d106      	bne.n	8012e32 <pbuf_alloc+0xea>
 8012e24:	4b3b      	ldr	r3, [pc, #236]	; (8012f14 <pbuf_alloc+0x1cc>)
 8012e26:	f240 1203 	movw	r2, #259	; 0x103
 8012e2a:	493d      	ldr	r1, [pc, #244]	; (8012f20 <pbuf_alloc+0x1d8>)
 8012e2c:	483b      	ldr	r0, [pc, #236]	; (8012f1c <pbuf_alloc+0x1d4>)
 8012e2e:	f008 f9ef 	bl	801b210 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d102      	bne.n	8012e3e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8012e3c:	e002      	b.n	8012e44 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	693a      	ldr	r2, [r7, #16]
 8012e42:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012e48:	8b7a      	ldrh	r2, [r7, #26]
 8012e4a:	89fb      	ldrh	r3, [r7, #14]
 8012e4c:	1ad3      	subs	r3, r2, r3
 8012e4e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012e50:	2300      	movs	r3, #0
 8012e52:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012e54:	8b7b      	ldrh	r3, [r7, #26]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d19e      	bne.n	8012d98 <pbuf_alloc+0x50>
      break;
 8012e5a:	e055      	b.n	8012f08 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012e5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e5e:	3303      	adds	r3, #3
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	f023 0303 	bic.w	r3, r3, #3
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	88bb      	ldrh	r3, [r7, #4]
 8012e6a:	3303      	adds	r3, #3
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	f023 0303 	bic.w	r3, r3, #3
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	4413      	add	r3, r2
 8012e76:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012e78:	8b3b      	ldrh	r3, [r7, #24]
 8012e7a:	3310      	adds	r3, #16
 8012e7c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012e7e:	8b3a      	ldrh	r2, [r7, #24]
 8012e80:	88bb      	ldrh	r3, [r7, #4]
 8012e82:	3303      	adds	r3, #3
 8012e84:	f023 0303 	bic.w	r3, r3, #3
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d306      	bcc.n	8012e9a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012e8c:	8afa      	ldrh	r2, [r7, #22]
 8012e8e:	88bb      	ldrh	r3, [r7, #4]
 8012e90:	3303      	adds	r3, #3
 8012e92:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d201      	bcs.n	8012e9e <pbuf_alloc+0x156>
        return NULL;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	e035      	b.n	8012f0a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012e9e:	8afb      	ldrh	r3, [r7, #22]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff f967 	bl	8012174 <mem_malloc>
 8012ea6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d101      	bne.n	8012eb2 <pbuf_alloc+0x16a>
        return NULL;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e02b      	b.n	8012f0a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012eb4:	3310      	adds	r3, #16
 8012eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eb8:	4413      	add	r3, r2
 8012eba:	3303      	adds	r3, #3
 8012ebc:	f023 0303 	bic.w	r3, r3, #3
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	88b9      	ldrh	r1, [r7, #4]
 8012ec4:	88ba      	ldrh	r2, [r7, #4]
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	9301      	str	r3, [sp, #4]
 8012eca:	887b      	ldrh	r3, [r7, #2]
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	460b      	mov	r3, r1
 8012ed0:	4601      	mov	r1, r0
 8012ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ed4:	f7ff ff0e 	bl	8012cf4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	f003 0303 	and.w	r3, r3, #3
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d010      	beq.n	8012f06 <pbuf_alloc+0x1be>
 8012ee4:	4b0b      	ldr	r3, [pc, #44]	; (8012f14 <pbuf_alloc+0x1cc>)
 8012ee6:	f240 1223 	movw	r2, #291	; 0x123
 8012eea:	490e      	ldr	r1, [pc, #56]	; (8012f24 <pbuf_alloc+0x1dc>)
 8012eec:	480b      	ldr	r0, [pc, #44]	; (8012f1c <pbuf_alloc+0x1d4>)
 8012eee:	f008 f98f 	bl	801b210 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012ef2:	e008      	b.n	8012f06 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012ef4:	4b07      	ldr	r3, [pc, #28]	; (8012f14 <pbuf_alloc+0x1cc>)
 8012ef6:	f240 1227 	movw	r2, #295	; 0x127
 8012efa:	490b      	ldr	r1, [pc, #44]	; (8012f28 <pbuf_alloc+0x1e0>)
 8012efc:	4807      	ldr	r0, [pc, #28]	; (8012f1c <pbuf_alloc+0x1d4>)
 8012efe:	f008 f987 	bl	801b210 <iprintf>
      return NULL;
 8012f02:	2300      	movs	r3, #0
 8012f04:	e001      	b.n	8012f0a <pbuf_alloc+0x1c2>
      break;
 8012f06:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3728      	adds	r7, #40	; 0x28
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	0801e534 	.word	0x0801e534
 8012f18:	0801e584 	.word	0x0801e584
 8012f1c:	0801e5b4 	.word	0x0801e5b4
 8012f20:	0801e5dc 	.word	0x0801e5dc
 8012f24:	0801e610 	.word	0x0801e610
 8012f28:	0801e63c 	.word	0x0801e63c

08012f2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b086      	sub	sp, #24
 8012f30:	af02      	add	r7, sp, #8
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	460b      	mov	r3, r1
 8012f36:	807b      	strh	r3, [r7, #2]
 8012f38:	4613      	mov	r3, r2
 8012f3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012f3c:	883b      	ldrh	r3, [r7, #0]
 8012f3e:	2b41      	cmp	r3, #65	; 0x41
 8012f40:	d009      	beq.n	8012f56 <pbuf_alloc_reference+0x2a>
 8012f42:	883b      	ldrh	r3, [r7, #0]
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d006      	beq.n	8012f56 <pbuf_alloc_reference+0x2a>
 8012f48:	4b0f      	ldr	r3, [pc, #60]	; (8012f88 <pbuf_alloc_reference+0x5c>)
 8012f4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012f4e:	490f      	ldr	r1, [pc, #60]	; (8012f8c <pbuf_alloc_reference+0x60>)
 8012f50:	480f      	ldr	r0, [pc, #60]	; (8012f90 <pbuf_alloc_reference+0x64>)
 8012f52:	f008 f95d 	bl	801b210 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012f56:	200b      	movs	r0, #11
 8012f58:	f7ff fab4 	bl	80124c4 <memp_malloc>
 8012f5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012f64:	2300      	movs	r3, #0
 8012f66:	e00b      	b.n	8012f80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012f68:	8879      	ldrh	r1, [r7, #2]
 8012f6a:	887a      	ldrh	r2, [r7, #2]
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	9301      	str	r3, [sp, #4]
 8012f70:	883b      	ldrh	r3, [r7, #0]
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	460b      	mov	r3, r1
 8012f76:	6879      	ldr	r1, [r7, #4]
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f7ff febb 	bl	8012cf4 <pbuf_init_alloced_pbuf>
  return p;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	0801e534 	.word	0x0801e534
 8012f8c:	0801e658 	.word	0x0801e658
 8012f90:	0801e5b4 	.word	0x0801e5b4

08012f94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b088      	sub	sp, #32
 8012f98:	af02      	add	r7, sp, #8
 8012f9a:	607b      	str	r3, [r7, #4]
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	73fb      	strb	r3, [r7, #15]
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	81bb      	strh	r3, [r7, #12]
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012fa8:	7bfb      	ldrb	r3, [r7, #15]
 8012faa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012fac:	8a7b      	ldrh	r3, [r7, #18]
 8012fae:	3303      	adds	r3, #3
 8012fb0:	f023 0203 	bic.w	r2, r3, #3
 8012fb4:	89bb      	ldrh	r3, [r7, #12]
 8012fb6:	441a      	add	r2, r3
 8012fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d901      	bls.n	8012fc2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e018      	b.n	8012ff4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012fc2:	6a3b      	ldr	r3, [r7, #32]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d007      	beq.n	8012fd8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012fc8:	8a7b      	ldrh	r3, [r7, #18]
 8012fca:	3303      	adds	r3, #3
 8012fcc:	f023 0303 	bic.w	r3, r3, #3
 8012fd0:	6a3a      	ldr	r2, [r7, #32]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	617b      	str	r3, [r7, #20]
 8012fd6:	e001      	b.n	8012fdc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	89b9      	ldrh	r1, [r7, #12]
 8012fe0:	89ba      	ldrh	r2, [r7, #12]
 8012fe2:	2302      	movs	r3, #2
 8012fe4:	9301      	str	r3, [sp, #4]
 8012fe6:	897b      	ldrh	r3, [r7, #10]
 8012fe8:	9300      	str	r3, [sp, #0]
 8012fea:	460b      	mov	r3, r1
 8012fec:	6979      	ldr	r1, [r7, #20]
 8012fee:	f7ff fe81 	bl	8012cf4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012ff2:	687b      	ldr	r3, [r7, #4]
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3718      	adds	r7, #24
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	460b      	mov	r3, r1
 8013006:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d106      	bne.n	801301c <pbuf_realloc+0x20>
 801300e:	4b3a      	ldr	r3, [pc, #232]	; (80130f8 <pbuf_realloc+0xfc>)
 8013010:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013014:	4939      	ldr	r1, [pc, #228]	; (80130fc <pbuf_realloc+0x100>)
 8013016:	483a      	ldr	r0, [pc, #232]	; (8013100 <pbuf_realloc+0x104>)
 8013018:	f008 f8fa 	bl	801b210 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	891b      	ldrh	r3, [r3, #8]
 8013020:	887a      	ldrh	r2, [r7, #2]
 8013022:	429a      	cmp	r2, r3
 8013024:	d264      	bcs.n	80130f0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	891a      	ldrh	r2, [r3, #8]
 801302a:	887b      	ldrh	r3, [r7, #2]
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013030:	887b      	ldrh	r3, [r7, #2]
 8013032:	817b      	strh	r3, [r7, #10]
  q = p;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013038:	e018      	b.n	801306c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	895b      	ldrh	r3, [r3, #10]
 801303e:	897a      	ldrh	r2, [r7, #10]
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	891a      	ldrh	r2, [r3, #8]
 8013048:	893b      	ldrh	r3, [r7, #8]
 801304a:	1ad3      	subs	r3, r2, r3
 801304c:	b29a      	uxth	r2, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <pbuf_realloc+0x70>
 801305e:	4b26      	ldr	r3, [pc, #152]	; (80130f8 <pbuf_realloc+0xfc>)
 8013060:	f240 12af 	movw	r2, #431	; 0x1af
 8013064:	4927      	ldr	r1, [pc, #156]	; (8013104 <pbuf_realloc+0x108>)
 8013066:	4826      	ldr	r0, [pc, #152]	; (8013100 <pbuf_realloc+0x104>)
 8013068:	f008 f8d2 	bl	801b210 <iprintf>
  while (rem_len > q->len) {
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	895b      	ldrh	r3, [r3, #10]
 8013070:	897a      	ldrh	r2, [r7, #10]
 8013072:	429a      	cmp	r2, r3
 8013074:	d8e1      	bhi.n	801303a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	7b1b      	ldrb	r3, [r3, #12]
 801307a:	f003 030f 	and.w	r3, r3, #15
 801307e:	2b00      	cmp	r3, #0
 8013080:	d122      	bne.n	80130c8 <pbuf_realloc+0xcc>
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	895b      	ldrh	r3, [r3, #10]
 8013086:	897a      	ldrh	r2, [r7, #10]
 8013088:	429a      	cmp	r2, r3
 801308a:	d01d      	beq.n	80130c8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	7b5b      	ldrb	r3, [r3, #13]
 8013090:	f003 0302 	and.w	r3, r3, #2
 8013094:	2b00      	cmp	r3, #0
 8013096:	d117      	bne.n	80130c8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	461a      	mov	r2, r3
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	1ad3      	subs	r3, r2, r3
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	897b      	ldrh	r3, [r7, #10]
 80130a6:	4413      	add	r3, r2
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	4619      	mov	r1, r3
 80130ac:	68f8      	ldr	r0, [r7, #12]
 80130ae:	f7fe ff51 	bl	8011f54 <mem_trim>
 80130b2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d106      	bne.n	80130c8 <pbuf_realloc+0xcc>
 80130ba:	4b0f      	ldr	r3, [pc, #60]	; (80130f8 <pbuf_realloc+0xfc>)
 80130bc:	f240 12bd 	movw	r2, #445	; 0x1bd
 80130c0:	4911      	ldr	r1, [pc, #68]	; (8013108 <pbuf_realloc+0x10c>)
 80130c2:	480f      	ldr	r0, [pc, #60]	; (8013100 <pbuf_realloc+0x104>)
 80130c4:	f008 f8a4 	bl	801b210 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	897a      	ldrh	r2, [r7, #10]
 80130cc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	895a      	ldrh	r2, [r3, #10]
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d004      	beq.n	80130e8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f000 f910 	bl	8013308 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2200      	movs	r2, #0
 80130ec:	601a      	str	r2, [r3, #0]
 80130ee:	e000      	b.n	80130f2 <pbuf_realloc+0xf6>
    return;
 80130f0:	bf00      	nop

}
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	0801e534 	.word	0x0801e534
 80130fc:	0801e66c 	.word	0x0801e66c
 8013100:	0801e5b4 	.word	0x0801e5b4
 8013104:	0801e684 	.word	0x0801e684
 8013108:	0801e69c 	.word	0x0801e69c

0801310c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	4613      	mov	r3, r2
 8013118:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d106      	bne.n	801312e <pbuf_add_header_impl+0x22>
 8013120:	4b2b      	ldr	r3, [pc, #172]	; (80131d0 <pbuf_add_header_impl+0xc4>)
 8013122:	f240 12df 	movw	r2, #479	; 0x1df
 8013126:	492b      	ldr	r1, [pc, #172]	; (80131d4 <pbuf_add_header_impl+0xc8>)
 8013128:	482b      	ldr	r0, [pc, #172]	; (80131d8 <pbuf_add_header_impl+0xcc>)
 801312a:	f008 f871 	bl	801b210 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d003      	beq.n	801313c <pbuf_add_header_impl+0x30>
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801313a:	d301      	bcc.n	8013140 <pbuf_add_header_impl+0x34>
    return 1;
 801313c:	2301      	movs	r3, #1
 801313e:	e043      	b.n	80131c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d101      	bne.n	801314a <pbuf_add_header_impl+0x3e>
    return 0;
 8013146:	2300      	movs	r3, #0
 8013148:	e03e      	b.n	80131c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	891a      	ldrh	r2, [r3, #8]
 8013152:	8a7b      	ldrh	r3, [r7, #18]
 8013154:	4413      	add	r3, r2
 8013156:	b29b      	uxth	r3, r3
 8013158:	8a7a      	ldrh	r2, [r7, #18]
 801315a:	429a      	cmp	r2, r3
 801315c:	d901      	bls.n	8013162 <pbuf_add_header_impl+0x56>
    return 1;
 801315e:	2301      	movs	r3, #1
 8013160:	e032      	b.n	80131c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	7b1b      	ldrb	r3, [r3, #12]
 8013166:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013168:	8a3b      	ldrh	r3, [r7, #16]
 801316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00c      	beq.n	801318c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	685a      	ldr	r2, [r3, #4]
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	425b      	negs	r3, r3
 801317a:	4413      	add	r3, r2
 801317c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	3310      	adds	r3, #16
 8013182:	697a      	ldr	r2, [r7, #20]
 8013184:	429a      	cmp	r2, r3
 8013186:	d20d      	bcs.n	80131a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013188:	2301      	movs	r3, #1
 801318a:	e01d      	b.n	80131c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801318c:	79fb      	ldrb	r3, [r7, #7]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d006      	beq.n	80131a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	685a      	ldr	r2, [r3, #4]
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	425b      	negs	r3, r3
 801319a:	4413      	add	r3, r2
 801319c:	617b      	str	r3, [r7, #20]
 801319e:	e001      	b.n	80131a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80131a0:	2301      	movs	r3, #1
 80131a2:	e011      	b.n	80131c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	697a      	ldr	r2, [r7, #20]
 80131a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	895a      	ldrh	r2, [r3, #10]
 80131ae:	8a7b      	ldrh	r3, [r7, #18]
 80131b0:	4413      	add	r3, r2
 80131b2:	b29a      	uxth	r2, r3
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	891a      	ldrh	r2, [r3, #8]
 80131bc:	8a7b      	ldrh	r3, [r7, #18]
 80131be:	4413      	add	r3, r2
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	811a      	strh	r2, [r3, #8]


  return 0;
 80131c6:	2300      	movs	r3, #0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3718      	adds	r7, #24
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	0801e534 	.word	0x0801e534
 80131d4:	0801e6b8 	.word	0x0801e6b8
 80131d8:	0801e5b4 	.word	0x0801e5b4

080131dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80131e6:	2200      	movs	r2, #0
 80131e8:	6839      	ldr	r1, [r7, #0]
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7ff ff8e 	bl	801310c <pbuf_add_header_impl>
 80131f0:	4603      	mov	r3, r0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
	...

080131fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d106      	bne.n	801321a <pbuf_remove_header+0x1e>
 801320c:	4b20      	ldr	r3, [pc, #128]	; (8013290 <pbuf_remove_header+0x94>)
 801320e:	f240 224b 	movw	r2, #587	; 0x24b
 8013212:	4920      	ldr	r1, [pc, #128]	; (8013294 <pbuf_remove_header+0x98>)
 8013214:	4820      	ldr	r0, [pc, #128]	; (8013298 <pbuf_remove_header+0x9c>)
 8013216:	f007 fffb 	bl	801b210 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d003      	beq.n	8013228 <pbuf_remove_header+0x2c>
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013226:	d301      	bcc.n	801322c <pbuf_remove_header+0x30>
    return 1;
 8013228:	2301      	movs	r3, #1
 801322a:	e02c      	b.n	8013286 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d101      	bne.n	8013236 <pbuf_remove_header+0x3a>
    return 0;
 8013232:	2300      	movs	r3, #0
 8013234:	e027      	b.n	8013286 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	895b      	ldrh	r3, [r3, #10]
 801323e:	89fa      	ldrh	r2, [r7, #14]
 8013240:	429a      	cmp	r2, r3
 8013242:	d908      	bls.n	8013256 <pbuf_remove_header+0x5a>
 8013244:	4b12      	ldr	r3, [pc, #72]	; (8013290 <pbuf_remove_header+0x94>)
 8013246:	f240 2255 	movw	r2, #597	; 0x255
 801324a:	4914      	ldr	r1, [pc, #80]	; (801329c <pbuf_remove_header+0xa0>)
 801324c:	4812      	ldr	r0, [pc, #72]	; (8013298 <pbuf_remove_header+0x9c>)
 801324e:	f007 ffdf 	bl	801b210 <iprintf>
 8013252:	2301      	movs	r3, #1
 8013254:	e017      	b.n	8013286 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	441a      	add	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	895a      	ldrh	r2, [r3, #10]
 801326c:	89fb      	ldrh	r3, [r7, #14]
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	b29a      	uxth	r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	891a      	ldrh	r2, [r3, #8]
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	1ad3      	subs	r3, r2, r3
 801327e:	b29a      	uxth	r2, r3
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013284:	2300      	movs	r3, #0
}
 8013286:	4618      	mov	r0, r3
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	0801e534 	.word	0x0801e534
 8013294:	0801e6b8 	.word	0x0801e6b8
 8013298:	0801e5b4 	.word	0x0801e5b4
 801329c:	0801e6c4 	.word	0x0801e6c4

080132a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	460b      	mov	r3, r1
 80132aa:	807b      	strh	r3, [r7, #2]
 80132ac:	4613      	mov	r3, r2
 80132ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80132b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	da08      	bge.n	80132ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80132b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80132bc:	425b      	negs	r3, r3
 80132be:	4619      	mov	r1, r3
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff ff9b 	bl	80131fc <pbuf_remove_header>
 80132c6:	4603      	mov	r3, r0
 80132c8:	e007      	b.n	80132da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80132ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80132ce:	787a      	ldrb	r2, [r7, #1]
 80132d0:	4619      	mov	r1, r3
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f7ff ff1a 	bl	801310c <pbuf_add_header_impl>
 80132d8:	4603      	mov	r3, r0
  }
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b082      	sub	sp, #8
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
 80132ea:	460b      	mov	r3, r1
 80132ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80132ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80132f2:	2201      	movs	r2, #1
 80132f4:	4619      	mov	r1, r3
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f7ff ffd2 	bl	80132a0 <pbuf_header_impl>
 80132fc:	4603      	mov	r3, r0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
	...

08013308 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b088      	sub	sp, #32
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d10b      	bne.n	801332e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d106      	bne.n	801332a <pbuf_free+0x22>
 801331c:	4b3b      	ldr	r3, [pc, #236]	; (801340c <pbuf_free+0x104>)
 801331e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8013322:	493b      	ldr	r1, [pc, #236]	; (8013410 <pbuf_free+0x108>)
 8013324:	483b      	ldr	r0, [pc, #236]	; (8013414 <pbuf_free+0x10c>)
 8013326:	f007 ff73 	bl	801b210 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801332a:	2300      	movs	r3, #0
 801332c:	e069      	b.n	8013402 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801332e:	2300      	movs	r3, #0
 8013330:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013332:	e062      	b.n	80133fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013334:	f000 fb8a 	bl	8013a4c <sys_arch_protect>
 8013338:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	7b9b      	ldrb	r3, [r3, #14]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <pbuf_free+0x48>
 8013342:	4b32      	ldr	r3, [pc, #200]	; (801340c <pbuf_free+0x104>)
 8013344:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013348:	4933      	ldr	r1, [pc, #204]	; (8013418 <pbuf_free+0x110>)
 801334a:	4832      	ldr	r0, [pc, #200]	; (8013414 <pbuf_free+0x10c>)
 801334c:	f007 ff60 	bl	801b210 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	7b9b      	ldrb	r3, [r3, #14]
 8013354:	3b01      	subs	r3, #1
 8013356:	b2da      	uxtb	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	739a      	strb	r2, [r3, #14]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	7b9b      	ldrb	r3, [r3, #14]
 8013360:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013362:	69b8      	ldr	r0, [r7, #24]
 8013364:	f000 fb80 	bl	8013a68 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013368:	7dfb      	ldrb	r3, [r7, #23]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d143      	bne.n	80133f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	7b1b      	ldrb	r3, [r3, #12]
 8013378:	f003 030f 	and.w	r3, r3, #15
 801337c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	7b5b      	ldrb	r3, [r3, #13]
 8013382:	f003 0302 	and.w	r3, r3, #2
 8013386:	2b00      	cmp	r3, #0
 8013388:	d011      	beq.n	80133ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	691b      	ldr	r3, [r3, #16]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d106      	bne.n	80133a4 <pbuf_free+0x9c>
 8013396:	4b1d      	ldr	r3, [pc, #116]	; (801340c <pbuf_free+0x104>)
 8013398:	f240 22ff 	movw	r2, #767	; 0x2ff
 801339c:	491f      	ldr	r1, [pc, #124]	; (801341c <pbuf_free+0x114>)
 801339e:	481d      	ldr	r0, [pc, #116]	; (8013414 <pbuf_free+0x10c>)
 80133a0:	f007 ff36 	bl	801b210 <iprintf>
        pc->custom_free_function(p);
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	691b      	ldr	r3, [r3, #16]
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	4798      	blx	r3
 80133ac:	e01d      	b.n	80133ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
 80133b0:	2b02      	cmp	r3, #2
 80133b2:	d104      	bne.n	80133be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80133b4:	6879      	ldr	r1, [r7, #4]
 80133b6:	200c      	movs	r0, #12
 80133b8:	f7ff f8fa 	bl	80125b0 <memp_free>
 80133bc:	e015      	b.n	80133ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80133be:	7bfb      	ldrb	r3, [r7, #15]
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	d104      	bne.n	80133ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	200b      	movs	r0, #11
 80133c8:	f7ff f8f2 	bl	80125b0 <memp_free>
 80133cc:	e00d      	b.n	80133ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80133ce:	7bfb      	ldrb	r3, [r7, #15]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d103      	bne.n	80133dc <pbuf_free+0xd4>
          mem_free(p);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7fe fd2d 	bl	8011e34 <mem_free>
 80133da:	e006      	b.n	80133ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80133dc:	4b0b      	ldr	r3, [pc, #44]	; (801340c <pbuf_free+0x104>)
 80133de:	f240 320f 	movw	r2, #783	; 0x30f
 80133e2:	490f      	ldr	r1, [pc, #60]	; (8013420 <pbuf_free+0x118>)
 80133e4:	480b      	ldr	r0, [pc, #44]	; (8013414 <pbuf_free+0x10c>)
 80133e6:	f007 ff13 	bl	801b210 <iprintf>
        }
      }
      count++;
 80133ea:	7ffb      	ldrb	r3, [r7, #31]
 80133ec:	3301      	adds	r3, #1
 80133ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	607b      	str	r3, [r7, #4]
 80133f4:	e001      	b.n	80133fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80133f6:	2300      	movs	r3, #0
 80133f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d199      	bne.n	8013334 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013400:	7ffb      	ldrb	r3, [r7, #31]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3720      	adds	r7, #32
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	0801e534 	.word	0x0801e534
 8013410:	0801e6b8 	.word	0x0801e6b8
 8013414:	0801e5b4 	.word	0x0801e5b4
 8013418:	0801e6e4 	.word	0x0801e6e4
 801341c:	0801e6fc 	.word	0x0801e6fc
 8013420:	0801e720 	.word	0x0801e720

08013424 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801342c:	2300      	movs	r3, #0
 801342e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013430:	e005      	b.n	801343e <pbuf_clen+0x1a>
    ++len;
 8013432:	89fb      	ldrh	r3, [r7, #14]
 8013434:	3301      	adds	r3, #1
 8013436:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d1f6      	bne.n	8013432 <pbuf_clen+0xe>
  }
  return len;
 8013444:	89fb      	ldrh	r3, [r7, #14]
}
 8013446:	4618      	mov	r0, r3
 8013448:	3714      	adds	r7, #20
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
	...

08013454 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d016      	beq.n	8013490 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013462:	f000 faf3 	bl	8013a4c <sys_arch_protect>
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	7b9b      	ldrb	r3, [r3, #14]
 801346c:	3301      	adds	r3, #1
 801346e:	b2da      	uxtb	r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	739a      	strb	r2, [r3, #14]
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f000 faf7 	bl	8013a68 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	7b9b      	ldrb	r3, [r3, #14]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d106      	bne.n	8013490 <pbuf_ref+0x3c>
 8013482:	4b05      	ldr	r3, [pc, #20]	; (8013498 <pbuf_ref+0x44>)
 8013484:	f240 3242 	movw	r2, #834	; 0x342
 8013488:	4904      	ldr	r1, [pc, #16]	; (801349c <pbuf_ref+0x48>)
 801348a:	4805      	ldr	r0, [pc, #20]	; (80134a0 <pbuf_ref+0x4c>)
 801348c:	f007 fec0 	bl	801b210 <iprintf>
  }
}
 8013490:	bf00      	nop
 8013492:	3710      	adds	r7, #16
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	0801e534 	.word	0x0801e534
 801349c:	0801e734 	.word	0x0801e734
 80134a0:	0801e5b4 	.word	0x0801e5b4

080134a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <pbuf_cat+0x16>
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d107      	bne.n	80134ca <pbuf_cat+0x26>
 80134ba:	4b20      	ldr	r3, [pc, #128]	; (801353c <pbuf_cat+0x98>)
 80134bc:	f240 325a 	movw	r2, #858	; 0x35a
 80134c0:	491f      	ldr	r1, [pc, #124]	; (8013540 <pbuf_cat+0x9c>)
 80134c2:	4820      	ldr	r0, [pc, #128]	; (8013544 <pbuf_cat+0xa0>)
 80134c4:	f007 fea4 	bl	801b210 <iprintf>
 80134c8:	e034      	b.n	8013534 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	60fb      	str	r3, [r7, #12]
 80134ce:	e00a      	b.n	80134e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	891a      	ldrh	r2, [r3, #8]
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	891b      	ldrh	r3, [r3, #8]
 80134d8:	4413      	add	r3, r2
 80134da:	b29a      	uxth	r2, r3
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	60fb      	str	r3, [r7, #12]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d1f0      	bne.n	80134d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	891a      	ldrh	r2, [r3, #8]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	895b      	ldrh	r3, [r3, #10]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d006      	beq.n	8013508 <pbuf_cat+0x64>
 80134fa:	4b10      	ldr	r3, [pc, #64]	; (801353c <pbuf_cat+0x98>)
 80134fc:	f240 3262 	movw	r2, #866	; 0x362
 8013500:	4911      	ldr	r1, [pc, #68]	; (8013548 <pbuf_cat+0xa4>)
 8013502:	4810      	ldr	r0, [pc, #64]	; (8013544 <pbuf_cat+0xa0>)
 8013504:	f007 fe84 	bl	801b210 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d006      	beq.n	801351e <pbuf_cat+0x7a>
 8013510:	4b0a      	ldr	r3, [pc, #40]	; (801353c <pbuf_cat+0x98>)
 8013512:	f240 3263 	movw	r2, #867	; 0x363
 8013516:	490d      	ldr	r1, [pc, #52]	; (801354c <pbuf_cat+0xa8>)
 8013518:	480a      	ldr	r0, [pc, #40]	; (8013544 <pbuf_cat+0xa0>)
 801351a:	f007 fe79 	bl	801b210 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	891a      	ldrh	r2, [r3, #8]
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	891b      	ldrh	r3, [r3, #8]
 8013526:	4413      	add	r3, r2
 8013528:	b29a      	uxth	r2, r3
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	683a      	ldr	r2, [r7, #0]
 8013532:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013534:	3710      	adds	r7, #16
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	0801e534 	.word	0x0801e534
 8013540:	0801e748 	.word	0x0801e748
 8013544:	0801e5b4 	.word	0x0801e5b4
 8013548:	0801e780 	.word	0x0801e780
 801354c:	0801e7b0 	.word	0x0801e7b0

08013550 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801355a:	6839      	ldr	r1, [r7, #0]
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7ff ffa1 	bl	80134a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013562:	6838      	ldr	r0, [r7, #0]
 8013564:	f7ff ff76 	bl	8013454 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013568:	bf00      	nop
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801357a:	2300      	movs	r3, #0
 801357c:	617b      	str	r3, [r7, #20]
 801357e:	2300      	movs	r3, #0
 8013580:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d008      	beq.n	801359a <pbuf_copy+0x2a>
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d005      	beq.n	801359a <pbuf_copy+0x2a>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	891a      	ldrh	r2, [r3, #8]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	891b      	ldrh	r3, [r3, #8]
 8013596:	429a      	cmp	r2, r3
 8013598:	d209      	bcs.n	80135ae <pbuf_copy+0x3e>
 801359a:	4b57      	ldr	r3, [pc, #348]	; (80136f8 <pbuf_copy+0x188>)
 801359c:	f240 32ca 	movw	r2, #970	; 0x3ca
 80135a0:	4956      	ldr	r1, [pc, #344]	; (80136fc <pbuf_copy+0x18c>)
 80135a2:	4857      	ldr	r0, [pc, #348]	; (8013700 <pbuf_copy+0x190>)
 80135a4:	f007 fe34 	bl	801b210 <iprintf>
 80135a8:	f06f 030f 	mvn.w	r3, #15
 80135ac:	e09f      	b.n	80136ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	895b      	ldrh	r3, [r3, #10]
 80135b2:	461a      	mov	r2, r3
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	1ad2      	subs	r2, r2, r3
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	895b      	ldrh	r3, [r3, #10]
 80135bc:	4619      	mov	r1, r3
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	1acb      	subs	r3, r1, r3
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d306      	bcc.n	80135d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	895b      	ldrh	r3, [r3, #10]
 80135ca:	461a      	mov	r2, r3
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	60fb      	str	r3, [r7, #12]
 80135d2:	e005      	b.n	80135e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	895b      	ldrh	r3, [r3, #10]
 80135d8:	461a      	mov	r2, r3
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	18d0      	adds	r0, r2, r3
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	685a      	ldr	r2, [r3, #4]
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	4413      	add	r3, r2
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	4619      	mov	r1, r3
 80135f4:	f007 f9a7 	bl	801a946 <memcpy>
    offset_to += len;
 80135f8:	697a      	ldr	r2, [r7, #20]
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	4413      	add	r3, r2
 80135fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013600:	693a      	ldr	r2, [r7, #16]
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	4413      	add	r3, r2
 8013606:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	895b      	ldrh	r3, [r3, #10]
 801360c:	461a      	mov	r2, r3
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	4293      	cmp	r3, r2
 8013612:	d906      	bls.n	8013622 <pbuf_copy+0xb2>
 8013614:	4b38      	ldr	r3, [pc, #224]	; (80136f8 <pbuf_copy+0x188>)
 8013616:	f240 32d9 	movw	r2, #985	; 0x3d9
 801361a:	493a      	ldr	r1, [pc, #232]	; (8013704 <pbuf_copy+0x194>)
 801361c:	4838      	ldr	r0, [pc, #224]	; (8013700 <pbuf_copy+0x190>)
 801361e:	f007 fdf7 	bl	801b210 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	895b      	ldrh	r3, [r3, #10]
 8013626:	461a      	mov	r2, r3
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	4293      	cmp	r3, r2
 801362c:	d906      	bls.n	801363c <pbuf_copy+0xcc>
 801362e:	4b32      	ldr	r3, [pc, #200]	; (80136f8 <pbuf_copy+0x188>)
 8013630:	f240 32da 	movw	r2, #986	; 0x3da
 8013634:	4934      	ldr	r1, [pc, #208]	; (8013708 <pbuf_copy+0x198>)
 8013636:	4832      	ldr	r0, [pc, #200]	; (8013700 <pbuf_copy+0x190>)
 8013638:	f007 fdea 	bl	801b210 <iprintf>
    if (offset_from >= p_from->len) {
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	895b      	ldrh	r3, [r3, #10]
 8013640:	461a      	mov	r2, r3
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	4293      	cmp	r3, r2
 8013646:	d304      	bcc.n	8013652 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013648:	2300      	movs	r3, #0
 801364a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	895b      	ldrh	r3, [r3, #10]
 8013656:	461a      	mov	r2, r3
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	4293      	cmp	r3, r2
 801365c:	d114      	bne.n	8013688 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801365e:	2300      	movs	r3, #0
 8013660:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10c      	bne.n	8013688 <pbuf_copy+0x118>
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d009      	beq.n	8013688 <pbuf_copy+0x118>
 8013674:	4b20      	ldr	r3, [pc, #128]	; (80136f8 <pbuf_copy+0x188>)
 8013676:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801367a:	4924      	ldr	r1, [pc, #144]	; (801370c <pbuf_copy+0x19c>)
 801367c:	4820      	ldr	r0, [pc, #128]	; (8013700 <pbuf_copy+0x190>)
 801367e:	f007 fdc7 	bl	801b210 <iprintf>
 8013682:	f06f 030f 	mvn.w	r3, #15
 8013686:	e032      	b.n	80136ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d013      	beq.n	80136b6 <pbuf_copy+0x146>
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	895a      	ldrh	r2, [r3, #10]
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	891b      	ldrh	r3, [r3, #8]
 8013696:	429a      	cmp	r2, r3
 8013698:	d10d      	bne.n	80136b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d009      	beq.n	80136b6 <pbuf_copy+0x146>
 80136a2:	4b15      	ldr	r3, [pc, #84]	; (80136f8 <pbuf_copy+0x188>)
 80136a4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80136a8:	4919      	ldr	r1, [pc, #100]	; (8013710 <pbuf_copy+0x1a0>)
 80136aa:	4815      	ldr	r0, [pc, #84]	; (8013700 <pbuf_copy+0x190>)
 80136ac:	f007 fdb0 	bl	801b210 <iprintf>
 80136b0:	f06f 0305 	mvn.w	r3, #5
 80136b4:	e01b      	b.n	80136ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d013      	beq.n	80136e4 <pbuf_copy+0x174>
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	895a      	ldrh	r2, [r3, #10]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	891b      	ldrh	r3, [r3, #8]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d10d      	bne.n	80136e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d009      	beq.n	80136e4 <pbuf_copy+0x174>
 80136d0:	4b09      	ldr	r3, [pc, #36]	; (80136f8 <pbuf_copy+0x188>)
 80136d2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80136d6:	490e      	ldr	r1, [pc, #56]	; (8013710 <pbuf_copy+0x1a0>)
 80136d8:	4809      	ldr	r0, [pc, #36]	; (8013700 <pbuf_copy+0x190>)
 80136da:	f007 fd99 	bl	801b210 <iprintf>
 80136de:	f06f 0305 	mvn.w	r3, #5
 80136e2:	e004      	b.n	80136ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f47f af61 	bne.w	80135ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3718      	adds	r7, #24
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	0801e534 	.word	0x0801e534
 80136fc:	0801e7fc 	.word	0x0801e7fc
 8013700:	0801e5b4 	.word	0x0801e5b4
 8013704:	0801e82c 	.word	0x0801e82c
 8013708:	0801e844 	.word	0x0801e844
 801370c:	0801e860 	.word	0x0801e860
 8013710:	0801e870 	.word	0x0801e870

08013714 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	4611      	mov	r1, r2
 8013720:	461a      	mov	r2, r3
 8013722:	460b      	mov	r3, r1
 8013724:	80fb      	strh	r3, [r7, #6]
 8013726:	4613      	mov	r3, r2
 8013728:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801372a:	2300      	movs	r3, #0
 801372c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801372e:	2300      	movs	r3, #0
 8013730:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d108      	bne.n	801374a <pbuf_copy_partial+0x36>
 8013738:	4b2b      	ldr	r3, [pc, #172]	; (80137e8 <pbuf_copy_partial+0xd4>)
 801373a:	f240 420a 	movw	r2, #1034	; 0x40a
 801373e:	492b      	ldr	r1, [pc, #172]	; (80137ec <pbuf_copy_partial+0xd8>)
 8013740:	482b      	ldr	r0, [pc, #172]	; (80137f0 <pbuf_copy_partial+0xdc>)
 8013742:	f007 fd65 	bl	801b210 <iprintf>
 8013746:	2300      	movs	r3, #0
 8013748:	e04a      	b.n	80137e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d108      	bne.n	8013762 <pbuf_copy_partial+0x4e>
 8013750:	4b25      	ldr	r3, [pc, #148]	; (80137e8 <pbuf_copy_partial+0xd4>)
 8013752:	f240 420b 	movw	r2, #1035	; 0x40b
 8013756:	4927      	ldr	r1, [pc, #156]	; (80137f4 <pbuf_copy_partial+0xe0>)
 8013758:	4825      	ldr	r0, [pc, #148]	; (80137f0 <pbuf_copy_partial+0xdc>)
 801375a:	f007 fd59 	bl	801b210 <iprintf>
 801375e:	2300      	movs	r3, #0
 8013760:	e03e      	b.n	80137e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	61fb      	str	r3, [r7, #28]
 8013766:	e034      	b.n	80137d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013768:	88bb      	ldrh	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d00a      	beq.n	8013784 <pbuf_copy_partial+0x70>
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	895b      	ldrh	r3, [r3, #10]
 8013772:	88ba      	ldrh	r2, [r7, #4]
 8013774:	429a      	cmp	r2, r3
 8013776:	d305      	bcc.n	8013784 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	895b      	ldrh	r3, [r3, #10]
 801377c:	88ba      	ldrh	r2, [r7, #4]
 801377e:	1ad3      	subs	r3, r2, r3
 8013780:	80bb      	strh	r3, [r7, #4]
 8013782:	e023      	b.n	80137cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	895a      	ldrh	r2, [r3, #10]
 8013788:	88bb      	ldrh	r3, [r7, #4]
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801378e:	8b3a      	ldrh	r2, [r7, #24]
 8013790:	88fb      	ldrh	r3, [r7, #6]
 8013792:	429a      	cmp	r2, r3
 8013794:	d901      	bls.n	801379a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013796:	88fb      	ldrh	r3, [r7, #6]
 8013798:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801379a:	8b7b      	ldrh	r3, [r7, #26]
 801379c:	68ba      	ldr	r2, [r7, #8]
 801379e:	18d0      	adds	r0, r2, r3
 80137a0:	69fb      	ldr	r3, [r7, #28]
 80137a2:	685a      	ldr	r2, [r3, #4]
 80137a4:	88bb      	ldrh	r3, [r7, #4]
 80137a6:	4413      	add	r3, r2
 80137a8:	8b3a      	ldrh	r2, [r7, #24]
 80137aa:	4619      	mov	r1, r3
 80137ac:	f007 f8cb 	bl	801a946 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80137b0:	8afa      	ldrh	r2, [r7, #22]
 80137b2:	8b3b      	ldrh	r3, [r7, #24]
 80137b4:	4413      	add	r3, r2
 80137b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80137b8:	8b7a      	ldrh	r2, [r7, #26]
 80137ba:	8b3b      	ldrh	r3, [r7, #24]
 80137bc:	4413      	add	r3, r2
 80137be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80137c0:	88fa      	ldrh	r2, [r7, #6]
 80137c2:	8b3b      	ldrh	r3, [r7, #24]
 80137c4:	1ad3      	subs	r3, r2, r3
 80137c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80137c8:	2300      	movs	r3, #0
 80137ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	61fb      	str	r3, [r7, #28]
 80137d2:	88fb      	ldrh	r3, [r7, #6]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d002      	beq.n	80137de <pbuf_copy_partial+0xca>
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d1c4      	bne.n	8013768 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80137de:	8afb      	ldrh	r3, [r7, #22]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3720      	adds	r7, #32
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	0801e534 	.word	0x0801e534
 80137ec:	0801e89c 	.word	0x0801e89c
 80137f0:	0801e5b4 	.word	0x0801e5b4
 80137f4:	0801e8bc 	.word	0x0801e8bc

080137f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b084      	sub	sp, #16
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	4603      	mov	r3, r0
 8013800:	603a      	str	r2, [r7, #0]
 8013802:	71fb      	strb	r3, [r7, #7]
 8013804:	460b      	mov	r3, r1
 8013806:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	8919      	ldrh	r1, [r3, #8]
 801380c:	88ba      	ldrh	r2, [r7, #4]
 801380e:	79fb      	ldrb	r3, [r7, #7]
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff fa99 	bl	8012d48 <pbuf_alloc>
 8013816:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <pbuf_clone+0x2a>
    return NULL;
 801381e:	2300      	movs	r3, #0
 8013820:	e011      	b.n	8013846 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013822:	6839      	ldr	r1, [r7, #0]
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	f7ff fea3 	bl	8013570 <pbuf_copy>
 801382a:	4603      	mov	r3, r0
 801382c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801382e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d006      	beq.n	8013844 <pbuf_clone+0x4c>
 8013836:	4b06      	ldr	r3, [pc, #24]	; (8013850 <pbuf_clone+0x58>)
 8013838:	f240 5224 	movw	r2, #1316	; 0x524
 801383c:	4905      	ldr	r1, [pc, #20]	; (8013854 <pbuf_clone+0x5c>)
 801383e:	4806      	ldr	r0, [pc, #24]	; (8013858 <pbuf_clone+0x60>)
 8013840:	f007 fce6 	bl	801b210 <iprintf>
  return q;
 8013844:	68fb      	ldr	r3, [r7, #12]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3710      	adds	r7, #16
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	0801e534 	.word	0x0801e534
 8013854:	0801e9c8 	.word	0x0801e9c8
 8013858:	0801e5b4 	.word	0x0801e5b4

0801385c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b086      	sub	sp, #24
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	60bb      	str	r3, [r7, #8]
 801386a:	2304      	movs	r3, #4
 801386c:	60fb      	str	r3, [r7, #12]
 801386e:	2300      	movs	r3, #0
 8013870:	613b      	str	r3, [r7, #16]
 8013872:	2300      	movs	r3, #0
 8013874:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013876:	f107 0308 	add.w	r3, r7, #8
 801387a:	2100      	movs	r1, #0
 801387c:	4618      	mov	r0, r3
 801387e:	f7f7 f9ff 	bl	800ac80 <osMessageCreate>
 8013882:	4602      	mov	r2, r0
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d102      	bne.n	8013896 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013894:	e000      	b.n	8013898 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013896:	2300      	movs	r3, #0
}
 8013898:	4618      	mov	r0, r3
 801389a:	3718      	adds	r7, #24
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	6839      	ldr	r1, [r7, #0]
 80138b0:	2200      	movs	r2, #0
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7f7 fa0e 	bl	800acd4 <osMessagePut>
 80138b8:	4603      	mov	r3, r0
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d102      	bne.n	80138c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80138be:	2300      	movs	r3, #0
 80138c0:	73fb      	strb	r3, [r7, #15]
 80138c2:	e001      	b.n	80138c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80138c4:	23ff      	movs	r3, #255	; 0xff
 80138c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80138c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b08c      	sub	sp, #48	; 0x30
 80138d8:	af00      	add	r7, sp, #0
 80138da:	61f8      	str	r0, [r7, #28]
 80138dc:	61b9      	str	r1, [r7, #24]
 80138de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80138e0:	f7f7 f809 	bl	800a8f6 <osKernelSysTick>
 80138e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d017      	beq.n	801391c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	6819      	ldr	r1, [r3, #0]
 80138f0:	f107 0320 	add.w	r3, r7, #32
 80138f4:	697a      	ldr	r2, [r7, #20]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7f7 fa2c 	bl	800ad54 <osMessageGet>

    if(event.status == osEventMessage)
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	2b10      	cmp	r3, #16
 8013900:	d109      	bne.n	8013916 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013904:	461a      	mov	r2, r3
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801390a:	f7f6 fff4 	bl	800a8f6 <osKernelSysTick>
 801390e:	4602      	mov	r2, r0
 8013910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013912:	1ad3      	subs	r3, r2, r3
 8013914:	e019      	b.n	801394a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801391a:	e016      	b.n	801394a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	6819      	ldr	r1, [r3, #0]
 8013920:	463b      	mov	r3, r7
 8013922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013926:	4618      	mov	r0, r3
 8013928:	f7f7 fa14 	bl	800ad54 <osMessageGet>
 801392c:	f107 0320 	add.w	r3, r7, #32
 8013930:	463a      	mov	r2, r7
 8013932:	ca07      	ldmia	r2, {r0, r1, r2}
 8013934:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393a:	461a      	mov	r2, r3
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013940:	f7f6 ffd9 	bl	800a8f6 <osKernelSysTick>
 8013944:	4602      	mov	r2, r0
 8013946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013948:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801394a:	4618      	mov	r0, r3
 801394c:	3730      	adds	r7, #48	; 0x30
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013952:	b480      	push	{r7}
 8013954:	b083      	sub	sp, #12
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d101      	bne.n	8013966 <sys_mbox_valid+0x14>
    return 0;
 8013962:	2300      	movs	r3, #0
 8013964:	e000      	b.n	8013968 <sys_mbox_valid+0x16>
  else
    return 1;
 8013966:	2301      	movs	r3, #1
}
 8013968:	4618      	mov	r0, r3
 801396a:	370c      	adds	r7, #12
 801396c:	46bd      	mov	sp, r7
 801396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013972:	4770      	bx	lr

08013974 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013978:	4803      	ldr	r0, [pc, #12]	; (8013988 <sys_init+0x14>)
 801397a:	f7f7 f82c 	bl	800a9d6 <osMutexCreate>
 801397e:	4602      	mov	r2, r0
 8013980:	4b02      	ldr	r3, [pc, #8]	; (801398c <sys_init+0x18>)
 8013982:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013984:	bf00      	nop
 8013986:	bd80      	pop	{r7, pc}
 8013988:	080205dc 	.word	0x080205dc
 801398c:	24008a40 	.word	0x24008a40

08013990 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013998:	2300      	movs	r3, #0
 801399a:	60bb      	str	r3, [r7, #8]
 801399c:	2300      	movs	r3, #0
 801399e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80139a0:	f107 0308 	add.w	r3, r7, #8
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7f7 f816 	bl	800a9d6 <osMutexCreate>
 80139aa:	4602      	mov	r2, r0
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d102      	bne.n	80139be <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80139b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139bc:	e000      	b.n	80139c0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80139be:	2300      	movs	r3, #0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80139d8:	4618      	mov	r0, r3
 80139da:	f7f7 f815 	bl	800aa08 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80139de:	bf00      	nop
 80139e0:	3708      	adds	r7, #8
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80139e6:	b580      	push	{r7, lr}
 80139e8:	b082      	sub	sp, #8
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7f7 f856 	bl	800aaa4 <osMutexRelease>
}
 80139f8:	bf00      	nop
 80139fa:	3708      	adds	r7, #8
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b08c      	sub	sp, #48	; 0x30
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
 8013a0c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013a0e:	f107 0314 	add.w	r3, r7, #20
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]
 8013a16:	605a      	str	r2, [r3, #4]
 8013a18:	609a      	str	r2, [r3, #8]
 8013a1a:	60da      	str	r2, [r3, #12]
 8013a1c:	611a      	str	r2, [r3, #16]
 8013a1e:	615a      	str	r2, [r3, #20]
 8013a20:	619a      	str	r2, [r3, #24]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	617b      	str	r3, [r7, #20]
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	61bb      	str	r3, [r7, #24]
 8013a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2c:	b21b      	sxth	r3, r3
 8013a2e:	83bb      	strh	r3, [r7, #28]
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013a34:	f107 0314 	add.w	r3, r7, #20
 8013a38:	6879      	ldr	r1, [r7, #4]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7f6 ff6b 	bl	800a916 <osThreadCreate>
 8013a40:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3730      	adds	r7, #48	; 0x30
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
	...

08013a4c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013a50:	4b04      	ldr	r3, [pc, #16]	; (8013a64 <sys_arch_protect+0x18>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f6 ffd5 	bl	800aa08 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013a5e:	2301      	movs	r3, #1
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	24008a40 	.word	0x24008a40

08013a68 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013a70:	4b04      	ldr	r3, [pc, #16]	; (8013a84 <sys_arch_unprotect+0x1c>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7f7 f815 	bl	800aaa4 <osMutexRelease>
}
 8013a7a:	bf00      	nop
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	24008a40 	.word	0x24008a40

08013a88 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013a8c:	f007 fbd8 	bl	801b240 <rand>
 8013a90:	4603      	mov	r3, r0
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013a9e:	b29a      	uxth	r2, r3
 8013aa0:	4b01      	ldr	r3, [pc, #4]	; (8013aa8 <tcp_init+0x20>)
 8013aa2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013aa4:	bf00      	nop
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	2400002c 	.word	0x2400002c

08013aac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	7d1b      	ldrb	r3, [r3, #20]
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d105      	bne.n	8013ac8 <tcp_free+0x1c>
 8013abc:	4b06      	ldr	r3, [pc, #24]	; (8013ad8 <tcp_free+0x2c>)
 8013abe:	22d4      	movs	r2, #212	; 0xd4
 8013ac0:	4906      	ldr	r1, [pc, #24]	; (8013adc <tcp_free+0x30>)
 8013ac2:	4807      	ldr	r0, [pc, #28]	; (8013ae0 <tcp_free+0x34>)
 8013ac4:	f007 fba4 	bl	801b210 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013ac8:	6879      	ldr	r1, [r7, #4]
 8013aca:	2001      	movs	r0, #1
 8013acc:	f7fe fd70 	bl	80125b0 <memp_free>
}
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	0801ea54 	.word	0x0801ea54
 8013adc:	0801eaa0 	.word	0x0801eaa0
 8013ae0:	0801eab4 	.word	0x0801eab4

08013ae4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	7d1b      	ldrb	r3, [r3, #20]
 8013af0:	2b01      	cmp	r3, #1
 8013af2:	d105      	bne.n	8013b00 <tcp_free_listen+0x1c>
 8013af4:	4b06      	ldr	r3, [pc, #24]	; (8013b10 <tcp_free_listen+0x2c>)
 8013af6:	22df      	movs	r2, #223	; 0xdf
 8013af8:	4906      	ldr	r1, [pc, #24]	; (8013b14 <tcp_free_listen+0x30>)
 8013afa:	4807      	ldr	r0, [pc, #28]	; (8013b18 <tcp_free_listen+0x34>)
 8013afc:	f007 fb88 	bl	801b210 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013b00:	6879      	ldr	r1, [r7, #4]
 8013b02:	2002      	movs	r0, #2
 8013b04:	f7fe fd54 	bl	80125b0 <memp_free>
}
 8013b08:	bf00      	nop
 8013b0a:	3708      	adds	r7, #8
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	0801ea54 	.word	0x0801ea54
 8013b14:	0801eadc 	.word	0x0801eadc
 8013b18:	0801eab4 	.word	0x0801eab4

08013b1c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013b20:	f000 fe98 	bl	8014854 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013b24:	4b07      	ldr	r3, [pc, #28]	; (8013b44 <tcp_tmr+0x28>)
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	4b05      	ldr	r3, [pc, #20]	; (8013b44 <tcp_tmr+0x28>)
 8013b2e:	701a      	strb	r2, [r3, #0]
 8013b30:	4b04      	ldr	r3, [pc, #16]	; (8013b44 <tcp_tmr+0x28>)
 8013b32:	781b      	ldrb	r3, [r3, #0]
 8013b34:	f003 0301 	and.w	r3, r3, #1
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d001      	beq.n	8013b40 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013b3c:	f000 fb4c 	bl	80141d8 <tcp_slowtmr>
  }
}
 8013b40:	bf00      	nop
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	24004921 	.word	0x24004921

08013b48 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d105      	bne.n	8013b64 <tcp_remove_listener+0x1c>
 8013b58:	4b0d      	ldr	r3, [pc, #52]	; (8013b90 <tcp_remove_listener+0x48>)
 8013b5a:	22ff      	movs	r2, #255	; 0xff
 8013b5c:	490d      	ldr	r1, [pc, #52]	; (8013b94 <tcp_remove_listener+0x4c>)
 8013b5e:	480e      	ldr	r0, [pc, #56]	; (8013b98 <tcp_remove_listener+0x50>)
 8013b60:	f007 fb56 	bl	801b210 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	60fb      	str	r3, [r7, #12]
 8013b68:	e00a      	b.n	8013b80 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b6e:	683a      	ldr	r2, [r7, #0]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d102      	bne.n	8013b7a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2200      	movs	r2, #0
 8013b78:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	68db      	ldr	r3, [r3, #12]
 8013b7e:	60fb      	str	r3, [r7, #12]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1f1      	bne.n	8013b6a <tcp_remove_listener+0x22>
    }
  }
}
 8013b86:	bf00      	nop
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	0801ea54 	.word	0x0801ea54
 8013b94:	0801eaf8 	.word	0x0801eaf8
 8013b98:	0801eab4 	.word	0x0801eab4

08013b9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d106      	bne.n	8013bb8 <tcp_listen_closed+0x1c>
 8013baa:	4b14      	ldr	r3, [pc, #80]	; (8013bfc <tcp_listen_closed+0x60>)
 8013bac:	f240 1211 	movw	r2, #273	; 0x111
 8013bb0:	4913      	ldr	r1, [pc, #76]	; (8013c00 <tcp_listen_closed+0x64>)
 8013bb2:	4814      	ldr	r0, [pc, #80]	; (8013c04 <tcp_listen_closed+0x68>)
 8013bb4:	f007 fb2c 	bl	801b210 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	7d1b      	ldrb	r3, [r3, #20]
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	d006      	beq.n	8013bce <tcp_listen_closed+0x32>
 8013bc0:	4b0e      	ldr	r3, [pc, #56]	; (8013bfc <tcp_listen_closed+0x60>)
 8013bc2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013bc6:	4910      	ldr	r1, [pc, #64]	; (8013c08 <tcp_listen_closed+0x6c>)
 8013bc8:	480e      	ldr	r0, [pc, #56]	; (8013c04 <tcp_listen_closed+0x68>)
 8013bca:	f007 fb21 	bl	801b210 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013bce:	2301      	movs	r3, #1
 8013bd0:	60fb      	str	r3, [r7, #12]
 8013bd2:	e00b      	b.n	8013bec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013bd4:	4a0d      	ldr	r2, [pc, #52]	; (8013c0c <tcp_listen_closed+0x70>)
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	6879      	ldr	r1, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7ff ffb1 	bl	8013b48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	3301      	adds	r3, #1
 8013bea:	60fb      	str	r3, [r7, #12]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2b03      	cmp	r3, #3
 8013bf0:	d9f0      	bls.n	8013bd4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013bf2:	bf00      	nop
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	0801ea54 	.word	0x0801ea54
 8013c00:	0801eb20 	.word	0x0801eb20
 8013c04:	0801eab4 	.word	0x0801eab4
 8013c08:	0801eb2c 	.word	0x0801eb2c
 8013c0c:	080205fc 	.word	0x080205fc

08013c10 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013c10:	b5b0      	push	{r4, r5, r7, lr}
 8013c12:	b088      	sub	sp, #32
 8013c14:	af04      	add	r7, sp, #16
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d106      	bne.n	8013c30 <tcp_close_shutdown+0x20>
 8013c22:	4b61      	ldr	r3, [pc, #388]	; (8013da8 <tcp_close_shutdown+0x198>)
 8013c24:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013c28:	4960      	ldr	r1, [pc, #384]	; (8013dac <tcp_close_shutdown+0x19c>)
 8013c2a:	4861      	ldr	r0, [pc, #388]	; (8013db0 <tcp_close_shutdown+0x1a0>)
 8013c2c:	f007 faf0 	bl	801b210 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013c30:	78fb      	ldrb	r3, [r7, #3]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d066      	beq.n	8013d04 <tcp_close_shutdown+0xf4>
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	7d1b      	ldrb	r3, [r3, #20]
 8013c3a:	2b04      	cmp	r3, #4
 8013c3c:	d003      	beq.n	8013c46 <tcp_close_shutdown+0x36>
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	7d1b      	ldrb	r3, [r3, #20]
 8013c42:	2b07      	cmp	r3, #7
 8013c44:	d15e      	bne.n	8013d04 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d104      	bne.n	8013c58 <tcp_close_shutdown+0x48>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013c56:	d055      	beq.n	8013d04 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	8b5b      	ldrh	r3, [r3, #26]
 8013c5c:	f003 0310 	and.w	r3, r3, #16
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d106      	bne.n	8013c72 <tcp_close_shutdown+0x62>
 8013c64:	4b50      	ldr	r3, [pc, #320]	; (8013da8 <tcp_close_shutdown+0x198>)
 8013c66:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013c6a:	4952      	ldr	r1, [pc, #328]	; (8013db4 <tcp_close_shutdown+0x1a4>)
 8013c6c:	4850      	ldr	r0, [pc, #320]	; (8013db0 <tcp_close_shutdown+0x1a0>)
 8013c6e:	f007 facf 	bl	801b210 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013c7a:	687d      	ldr	r5, [r7, #4]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	3304      	adds	r3, #4
 8013c80:	687a      	ldr	r2, [r7, #4]
 8013c82:	8ad2      	ldrh	r2, [r2, #22]
 8013c84:	6879      	ldr	r1, [r7, #4]
 8013c86:	8b09      	ldrh	r1, [r1, #24]
 8013c88:	9102      	str	r1, [sp, #8]
 8013c8a:	9201      	str	r2, [sp, #4]
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	462b      	mov	r3, r5
 8013c90:	4622      	mov	r2, r4
 8013c92:	4601      	mov	r1, r0
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f004 fe91 	bl	80189bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f001 f8ba 	bl	8014e14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013ca0:	4b45      	ldr	r3, [pc, #276]	; (8013db8 <tcp_close_shutdown+0x1a8>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d105      	bne.n	8013cb6 <tcp_close_shutdown+0xa6>
 8013caa:	4b43      	ldr	r3, [pc, #268]	; (8013db8 <tcp_close_shutdown+0x1a8>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	4a41      	ldr	r2, [pc, #260]	; (8013db8 <tcp_close_shutdown+0x1a8>)
 8013cb2:	6013      	str	r3, [r2, #0]
 8013cb4:	e013      	b.n	8013cde <tcp_close_shutdown+0xce>
 8013cb6:	4b40      	ldr	r3, [pc, #256]	; (8013db8 <tcp_close_shutdown+0x1a8>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	60fb      	str	r3, [r7, #12]
 8013cbc:	e00c      	b.n	8013cd8 <tcp_close_shutdown+0xc8>
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	68db      	ldr	r3, [r3, #12]
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d104      	bne.n	8013cd2 <tcp_close_shutdown+0xc2>
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	68da      	ldr	r2, [r3, #12]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	60da      	str	r2, [r3, #12]
 8013cd0:	e005      	b.n	8013cde <tcp_close_shutdown+0xce>
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	60fb      	str	r3, [r7, #12]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d1ef      	bne.n	8013cbe <tcp_close_shutdown+0xae>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	60da      	str	r2, [r3, #12]
 8013ce4:	4b35      	ldr	r3, [pc, #212]	; (8013dbc <tcp_close_shutdown+0x1ac>)
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013cea:	4b35      	ldr	r3, [pc, #212]	; (8013dc0 <tcp_close_shutdown+0x1b0>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d102      	bne.n	8013cfa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013cf4:	f003 fd4c 	bl	8017790 <tcp_trigger_input_pcb_close>
 8013cf8:	e002      	b.n	8013d00 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7ff fed6 	bl	8013aac <tcp_free>
      }
      return ERR_OK;
 8013d00:	2300      	movs	r3, #0
 8013d02:	e04d      	b.n	8013da0 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	7d1b      	ldrb	r3, [r3, #20]
 8013d08:	2b01      	cmp	r3, #1
 8013d0a:	d02d      	beq.n	8013d68 <tcp_close_shutdown+0x158>
 8013d0c:	2b02      	cmp	r3, #2
 8013d0e:	d036      	beq.n	8013d7e <tcp_close_shutdown+0x16e>
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d13f      	bne.n	8013d94 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	8adb      	ldrh	r3, [r3, #22]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d021      	beq.n	8013d60 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013d1c:	4b29      	ldr	r3, [pc, #164]	; (8013dc4 <tcp_close_shutdown+0x1b4>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	687a      	ldr	r2, [r7, #4]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d105      	bne.n	8013d32 <tcp_close_shutdown+0x122>
 8013d26:	4b27      	ldr	r3, [pc, #156]	; (8013dc4 <tcp_close_shutdown+0x1b4>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	4a25      	ldr	r2, [pc, #148]	; (8013dc4 <tcp_close_shutdown+0x1b4>)
 8013d2e:	6013      	str	r3, [r2, #0]
 8013d30:	e013      	b.n	8013d5a <tcp_close_shutdown+0x14a>
 8013d32:	4b24      	ldr	r3, [pc, #144]	; (8013dc4 <tcp_close_shutdown+0x1b4>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	60bb      	str	r3, [r7, #8]
 8013d38:	e00c      	b.n	8013d54 <tcp_close_shutdown+0x144>
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	687a      	ldr	r2, [r7, #4]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d104      	bne.n	8013d4e <tcp_close_shutdown+0x13e>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	68da      	ldr	r2, [r3, #12]
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	60da      	str	r2, [r3, #12]
 8013d4c:	e005      	b.n	8013d5a <tcp_close_shutdown+0x14a>
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	68db      	ldr	r3, [r3, #12]
 8013d52:	60bb      	str	r3, [r7, #8]
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d1ef      	bne.n	8013d3a <tcp_close_shutdown+0x12a>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff fea3 	bl	8013aac <tcp_free>
      break;
 8013d66:	e01a      	b.n	8013d9e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff ff17 	bl	8013b9c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013d6e:	6879      	ldr	r1, [r7, #4]
 8013d70:	4815      	ldr	r0, [pc, #84]	; (8013dc8 <tcp_close_shutdown+0x1b8>)
 8013d72:	f001 f89f 	bl	8014eb4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7ff feb4 	bl	8013ae4 <tcp_free_listen>
      break;
 8013d7c:	e00f      	b.n	8013d9e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013d7e:	6879      	ldr	r1, [r7, #4]
 8013d80:	480d      	ldr	r0, [pc, #52]	; (8013db8 <tcp_close_shutdown+0x1a8>)
 8013d82:	f001 f897 	bl	8014eb4 <tcp_pcb_remove>
 8013d86:	4b0d      	ldr	r3, [pc, #52]	; (8013dbc <tcp_close_shutdown+0x1ac>)
 8013d88:	2201      	movs	r2, #1
 8013d8a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f7ff fe8d 	bl	8013aac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013d92:	e004      	b.n	8013d9e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f000 f819 	bl	8013dcc <tcp_close_shutdown_fin>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	e000      	b.n	8013da0 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8013d9e:	2300      	movs	r3, #0
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3710      	adds	r7, #16
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bdb0      	pop	{r4, r5, r7, pc}
 8013da8:	0801ea54 	.word	0x0801ea54
 8013dac:	0801eb44 	.word	0x0801eb44
 8013db0:	0801eab4 	.word	0x0801eab4
 8013db4:	0801eb64 	.word	0x0801eb64
 8013db8:	24008a48 	.word	0x24008a48
 8013dbc:	24008a44 	.word	0x24008a44
 8013dc0:	24008a5c 	.word	0x24008a5c
 8013dc4:	24008a54 	.word	0x24008a54
 8013dc8:	24008a50 	.word	0x24008a50

08013dcc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d106      	bne.n	8013de8 <tcp_close_shutdown_fin+0x1c>
 8013dda:	4b2c      	ldr	r3, [pc, #176]	; (8013e8c <tcp_close_shutdown_fin+0xc0>)
 8013ddc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013de0:	492b      	ldr	r1, [pc, #172]	; (8013e90 <tcp_close_shutdown_fin+0xc4>)
 8013de2:	482c      	ldr	r0, [pc, #176]	; (8013e94 <tcp_close_shutdown_fin+0xc8>)
 8013de4:	f007 fa14 	bl	801b210 <iprintf>

  switch (pcb->state) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	7d1b      	ldrb	r3, [r3, #20]
 8013dec:	2b04      	cmp	r3, #4
 8013dee:	d010      	beq.n	8013e12 <tcp_close_shutdown_fin+0x46>
 8013df0:	2b07      	cmp	r3, #7
 8013df2:	d01b      	beq.n	8013e2c <tcp_close_shutdown_fin+0x60>
 8013df4:	2b03      	cmp	r3, #3
 8013df6:	d126      	bne.n	8013e46 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f003 fedb 	bl	8017bb4 <tcp_send_fin>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d11f      	bne.n	8013e4a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2205      	movs	r2, #5
 8013e0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013e10:	e01b      	b.n	8013e4a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f003 fece 	bl	8017bb4 <tcp_send_fin>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d114      	bne.n	8013e4e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2205      	movs	r2, #5
 8013e28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013e2a:	e010      	b.n	8013e4e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f003 fec1 	bl	8017bb4 <tcp_send_fin>
 8013e32:	4603      	mov	r3, r0
 8013e34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d109      	bne.n	8013e52 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2209      	movs	r2, #9
 8013e42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013e44:	e005      	b.n	8013e52 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013e46:	2300      	movs	r3, #0
 8013e48:	e01c      	b.n	8013e84 <tcp_close_shutdown_fin+0xb8>
      break;
 8013e4a:	bf00      	nop
 8013e4c:	e002      	b.n	8013e54 <tcp_close_shutdown_fin+0x88>
      break;
 8013e4e:	bf00      	nop
 8013e50:	e000      	b.n	8013e54 <tcp_close_shutdown_fin+0x88>
      break;
 8013e52:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d103      	bne.n	8013e64 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f003 ffe7 	bl	8017e30 <tcp_output>
 8013e62:	e00d      	b.n	8013e80 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8013e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e6c:	d108      	bne.n	8013e80 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	8b5b      	ldrh	r3, [r3, #26]
 8013e72:	f043 0308 	orr.w	r3, r3, #8
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	e001      	b.n	8013e84 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8013e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3710      	adds	r7, #16
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	0801ea54 	.word	0x0801ea54
 8013e90:	0801eb20 	.word	0x0801eb20
 8013e94:	0801eab4 	.word	0x0801eab4

08013e98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d109      	bne.n	8013eba <tcp_close+0x22>
 8013ea6:	4b0f      	ldr	r3, [pc, #60]	; (8013ee4 <tcp_close+0x4c>)
 8013ea8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013eac:	490e      	ldr	r1, [pc, #56]	; (8013ee8 <tcp_close+0x50>)
 8013eae:	480f      	ldr	r0, [pc, #60]	; (8013eec <tcp_close+0x54>)
 8013eb0:	f007 f9ae 	bl	801b210 <iprintf>
 8013eb4:	f06f 030f 	mvn.w	r3, #15
 8013eb8:	e00f      	b.n	8013eda <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	7d1b      	ldrb	r3, [r3, #20]
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	d006      	beq.n	8013ed0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	8b5b      	ldrh	r3, [r3, #26]
 8013ec6:	f043 0310 	orr.w	r3, r3, #16
 8013eca:	b29a      	uxth	r2, r3
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013ed0:	2101      	movs	r1, #1
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f7ff fe9c 	bl	8013c10 <tcp_close_shutdown>
 8013ed8:	4603      	mov	r3, r0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	0801ea54 	.word	0x0801ea54
 8013ee8:	0801eb80 	.word	0x0801eb80
 8013eec:	0801eab4 	.word	0x0801eab4

08013ef0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b08e      	sub	sp, #56	; 0x38
 8013ef4:	af04      	add	r7, sp, #16
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d107      	bne.n	8013f10 <tcp_abandon+0x20>
 8013f00:	4b52      	ldr	r3, [pc, #328]	; (801404c <tcp_abandon+0x15c>)
 8013f02:	f240 223d 	movw	r2, #573	; 0x23d
 8013f06:	4952      	ldr	r1, [pc, #328]	; (8014050 <tcp_abandon+0x160>)
 8013f08:	4852      	ldr	r0, [pc, #328]	; (8014054 <tcp_abandon+0x164>)
 8013f0a:	f007 f981 	bl	801b210 <iprintf>
 8013f0e:	e099      	b.n	8014044 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	7d1b      	ldrb	r3, [r3, #20]
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d106      	bne.n	8013f26 <tcp_abandon+0x36>
 8013f18:	4b4c      	ldr	r3, [pc, #304]	; (801404c <tcp_abandon+0x15c>)
 8013f1a:	f240 2241 	movw	r2, #577	; 0x241
 8013f1e:	494e      	ldr	r1, [pc, #312]	; (8014058 <tcp_abandon+0x168>)
 8013f20:	484c      	ldr	r0, [pc, #304]	; (8014054 <tcp_abandon+0x164>)
 8013f22:	f007 f975 	bl	801b210 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	7d1b      	ldrb	r3, [r3, #20]
 8013f2a:	2b0a      	cmp	r3, #10
 8013f2c:	d107      	bne.n	8013f3e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013f2e:	6879      	ldr	r1, [r7, #4]
 8013f30:	484a      	ldr	r0, [pc, #296]	; (801405c <tcp_abandon+0x16c>)
 8013f32:	f000 ffbf 	bl	8014eb4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff fdb8 	bl	8013aac <tcp_free>
 8013f3c:	e082      	b.n	8014044 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f4a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f50:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f58:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	7d1b      	ldrb	r3, [r3, #20]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d126      	bne.n	8013fb6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	8adb      	ldrh	r3, [r3, #22]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d02e      	beq.n	8013fce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013f70:	4b3b      	ldr	r3, [pc, #236]	; (8014060 <tcp_abandon+0x170>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d105      	bne.n	8013f86 <tcp_abandon+0x96>
 8013f7a:	4b39      	ldr	r3, [pc, #228]	; (8014060 <tcp_abandon+0x170>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	4a37      	ldr	r2, [pc, #220]	; (8014060 <tcp_abandon+0x170>)
 8013f82:	6013      	str	r3, [r2, #0]
 8013f84:	e013      	b.n	8013fae <tcp_abandon+0xbe>
 8013f86:	4b36      	ldr	r3, [pc, #216]	; (8014060 <tcp_abandon+0x170>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	61fb      	str	r3, [r7, #28]
 8013f8c:	e00c      	b.n	8013fa8 <tcp_abandon+0xb8>
 8013f8e:	69fb      	ldr	r3, [r7, #28]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d104      	bne.n	8013fa2 <tcp_abandon+0xb2>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	69fb      	ldr	r3, [r7, #28]
 8013f9e:	60da      	str	r2, [r3, #12]
 8013fa0:	e005      	b.n	8013fae <tcp_abandon+0xbe>
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	61fb      	str	r3, [r7, #28]
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1ef      	bne.n	8013f8e <tcp_abandon+0x9e>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	60da      	str	r2, [r3, #12]
 8013fb4:	e00b      	b.n	8013fce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	8adb      	ldrh	r3, [r3, #22]
 8013fbe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013fc0:	6879      	ldr	r1, [r7, #4]
 8013fc2:	4828      	ldr	r0, [pc, #160]	; (8014064 <tcp_abandon+0x174>)
 8013fc4:	f000 ff76 	bl	8014eb4 <tcp_pcb_remove>
 8013fc8:	4b27      	ldr	r3, [pc, #156]	; (8014068 <tcp_abandon+0x178>)
 8013fca:	2201      	movs	r2, #1
 8013fcc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d004      	beq.n	8013fe0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f000 fd1a 	bl	8014a14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d004      	beq.n	8013ff2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fec:	4618      	mov	r0, r3
 8013fee:	f000 fd11 	bl	8014a14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d004      	beq.n	8014004 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ffe:	4618      	mov	r0, r3
 8014000:	f000 fd08 	bl	8014a14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	2b00      	cmp	r3, #0
 8014008:	d00e      	beq.n	8014028 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801400a:	6879      	ldr	r1, [r7, #4]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	3304      	adds	r3, #4
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	8b12      	ldrh	r2, [r2, #24]
 8014014:	9202      	str	r2, [sp, #8]
 8014016:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014018:	9201      	str	r2, [sp, #4]
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	460b      	mov	r3, r1
 801401e:	697a      	ldr	r2, [r7, #20]
 8014020:	69b9      	ldr	r1, [r7, #24]
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f004 fcca 	bl	80189bc <tcp_rst>
    }
    last_state = pcb->state;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	7d1b      	ldrb	r3, [r3, #20]
 801402c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7ff fd3c 	bl	8013aac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d004      	beq.n	8014044 <tcp_abandon+0x154>
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	f06f 010c 	mvn.w	r1, #12
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	4798      	blx	r3
  }
}
 8014044:	3728      	adds	r7, #40	; 0x28
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	0801ea54 	.word	0x0801ea54
 8014050:	0801ebb4 	.word	0x0801ebb4
 8014054:	0801eab4 	.word	0x0801eab4
 8014058:	0801ebd0 	.word	0x0801ebd0
 801405c:	24008a58 	.word	0x24008a58
 8014060:	24008a54 	.word	0x24008a54
 8014064:	24008a48 	.word	0x24008a48
 8014068:	24008a44 	.word	0x24008a44

0801406c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014074:	2101      	movs	r1, #1
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7ff ff3a 	bl	8013ef0 <tcp_abandon>
}
 801407c:	bf00      	nop
 801407e:	3708      	adds	r7, #8
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}

08014084 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b084      	sub	sp, #16
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d106      	bne.n	80140a0 <tcp_update_rcv_ann_wnd+0x1c>
 8014092:	4b25      	ldr	r3, [pc, #148]	; (8014128 <tcp_update_rcv_ann_wnd+0xa4>)
 8014094:	f240 32a6 	movw	r2, #934	; 0x3a6
 8014098:	4924      	ldr	r1, [pc, #144]	; (801412c <tcp_update_rcv_ann_wnd+0xa8>)
 801409a:	4825      	ldr	r0, [pc, #148]	; (8014130 <tcp_update_rcv_ann_wnd+0xac>)
 801409c:	f007 f8b8 	bl	801b210 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80140a8:	4413      	add	r3, r2
 80140aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b0:	687a      	ldr	r2, [r7, #4]
 80140b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80140b4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80140b8:	bf28      	it	cs
 80140ba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80140be:	b292      	uxth	r2, r2
 80140c0:	4413      	add	r3, r2
 80140c2:	68fa      	ldr	r2, [r7, #12]
 80140c4:	1ad3      	subs	r3, r2, r3
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	db08      	blt.n	80140dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d6:	68fa      	ldr	r2, [r7, #12]
 80140d8:	1ad3      	subs	r3, r2, r3
 80140da:	e020      	b.n	801411e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e4:	1ad3      	subs	r3, r2, r3
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	dd03      	ble.n	80140f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2200      	movs	r2, #0
 80140ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80140f0:	e014      	b.n	801411c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fa:	1ad3      	subs	r3, r2, r3
 80140fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014104:	d306      	bcc.n	8014114 <tcp_update_rcv_ann_wnd+0x90>
 8014106:	4b08      	ldr	r3, [pc, #32]	; (8014128 <tcp_update_rcv_ann_wnd+0xa4>)
 8014108:	f240 32b6 	movw	r2, #950	; 0x3b6
 801410c:	4909      	ldr	r1, [pc, #36]	; (8014134 <tcp_update_rcv_ann_wnd+0xb0>)
 801410e:	4808      	ldr	r0, [pc, #32]	; (8014130 <tcp_update_rcv_ann_wnd+0xac>)
 8014110:	f007 f87e 	bl	801b210 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	b29a      	uxth	r2, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801411c:	2300      	movs	r3, #0
  }
}
 801411e:	4618      	mov	r0, r3
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	0801ea54 	.word	0x0801ea54
 801412c:	0801eccc 	.word	0x0801eccc
 8014130:	0801eab4 	.word	0x0801eab4
 8014134:	0801ecf0 	.word	0x0801ecf0

08014138 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	460b      	mov	r3, r1
 8014142:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d107      	bne.n	801415a <tcp_recved+0x22>
 801414a:	4b1f      	ldr	r3, [pc, #124]	; (80141c8 <tcp_recved+0x90>)
 801414c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014150:	491e      	ldr	r1, [pc, #120]	; (80141cc <tcp_recved+0x94>)
 8014152:	481f      	ldr	r0, [pc, #124]	; (80141d0 <tcp_recved+0x98>)
 8014154:	f007 f85c 	bl	801b210 <iprintf>
 8014158:	e032      	b.n	80141c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	7d1b      	ldrb	r3, [r3, #20]
 801415e:	2b01      	cmp	r3, #1
 8014160:	d106      	bne.n	8014170 <tcp_recved+0x38>
 8014162:	4b19      	ldr	r3, [pc, #100]	; (80141c8 <tcp_recved+0x90>)
 8014164:	f240 32d3 	movw	r2, #979	; 0x3d3
 8014168:	491a      	ldr	r1, [pc, #104]	; (80141d4 <tcp_recved+0x9c>)
 801416a:	4819      	ldr	r0, [pc, #100]	; (80141d0 <tcp_recved+0x98>)
 801416c:	f007 f850 	bl	801b210 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014174:	887b      	ldrh	r3, [r7, #2]
 8014176:	4413      	add	r3, r2
 8014178:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801417a:	89fb      	ldrh	r3, [r7, #14]
 801417c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014180:	d804      	bhi.n	801418c <tcp_recved+0x54>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014186:	89fa      	ldrh	r2, [r7, #14]
 8014188:	429a      	cmp	r2, r3
 801418a:	d204      	bcs.n	8014196 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014192:	851a      	strh	r2, [r3, #40]	; 0x28
 8014194:	e002      	b.n	801419c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	89fa      	ldrh	r2, [r7, #14]
 801419a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7ff ff71 	bl	8014084 <tcp_update_rcv_ann_wnd>
 80141a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80141aa:	d309      	bcc.n	80141c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	8b5b      	ldrh	r3, [r3, #26]
 80141b0:	f043 0302 	orr.w	r3, r3, #2
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f003 fe38 	bl	8017e30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80141c0:	3710      	adds	r7, #16
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	0801ea54 	.word	0x0801ea54
 80141cc:	0801ed0c 	.word	0x0801ed0c
 80141d0:	0801eab4 	.word	0x0801eab4
 80141d4:	0801ed24 	.word	0x0801ed24

080141d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80141d8:	b5b0      	push	{r4, r5, r7, lr}
 80141da:	b090      	sub	sp, #64	; 0x40
 80141dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80141de:	2300      	movs	r3, #0
 80141e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80141e4:	4b94      	ldr	r3, [pc, #592]	; (8014438 <tcp_slowtmr+0x260>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	3301      	adds	r3, #1
 80141ea:	4a93      	ldr	r2, [pc, #588]	; (8014438 <tcp_slowtmr+0x260>)
 80141ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80141ee:	4b93      	ldr	r3, [pc, #588]	; (801443c <tcp_slowtmr+0x264>)
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	3301      	adds	r3, #1
 80141f4:	b2da      	uxtb	r2, r3
 80141f6:	4b91      	ldr	r3, [pc, #580]	; (801443c <tcp_slowtmr+0x264>)
 80141f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80141fa:	2300      	movs	r3, #0
 80141fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80141fe:	4b90      	ldr	r3, [pc, #576]	; (8014440 <tcp_slowtmr+0x268>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8014204:	e29d      	b.n	8014742 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014208:	7d1b      	ldrb	r3, [r3, #20]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d106      	bne.n	801421c <tcp_slowtmr+0x44>
 801420e:	4b8d      	ldr	r3, [pc, #564]	; (8014444 <tcp_slowtmr+0x26c>)
 8014210:	f240 42be 	movw	r2, #1214	; 0x4be
 8014214:	498c      	ldr	r1, [pc, #560]	; (8014448 <tcp_slowtmr+0x270>)
 8014216:	488d      	ldr	r0, [pc, #564]	; (801444c <tcp_slowtmr+0x274>)
 8014218:	f006 fffa 	bl	801b210 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421e:	7d1b      	ldrb	r3, [r3, #20]
 8014220:	2b01      	cmp	r3, #1
 8014222:	d106      	bne.n	8014232 <tcp_slowtmr+0x5a>
 8014224:	4b87      	ldr	r3, [pc, #540]	; (8014444 <tcp_slowtmr+0x26c>)
 8014226:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801422a:	4989      	ldr	r1, [pc, #548]	; (8014450 <tcp_slowtmr+0x278>)
 801422c:	4887      	ldr	r0, [pc, #540]	; (801444c <tcp_slowtmr+0x274>)
 801422e:	f006 ffef 	bl	801b210 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014234:	7d1b      	ldrb	r3, [r3, #20]
 8014236:	2b0a      	cmp	r3, #10
 8014238:	d106      	bne.n	8014248 <tcp_slowtmr+0x70>
 801423a:	4b82      	ldr	r3, [pc, #520]	; (8014444 <tcp_slowtmr+0x26c>)
 801423c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8014240:	4984      	ldr	r1, [pc, #528]	; (8014454 <tcp_slowtmr+0x27c>)
 8014242:	4882      	ldr	r0, [pc, #520]	; (801444c <tcp_slowtmr+0x274>)
 8014244:	f006 ffe4 	bl	801b210 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424a:	7f9a      	ldrb	r2, [r3, #30]
 801424c:	4b7b      	ldr	r3, [pc, #492]	; (801443c <tcp_slowtmr+0x264>)
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	429a      	cmp	r2, r3
 8014252:	d105      	bne.n	8014260 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8014254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014256:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801425e:	e270      	b.n	8014742 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014260:	4b76      	ldr	r3, [pc, #472]	; (801443c <tcp_slowtmr+0x264>)
 8014262:	781a      	ldrb	r2, [r3, #0]
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014268:	2300      	movs	r3, #0
 801426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801426e:	2300      	movs	r3, #0
 8014270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014276:	7d1b      	ldrb	r3, [r3, #20]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d10a      	bne.n	8014292 <tcp_slowtmr+0xba>
 801427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014282:	2b05      	cmp	r3, #5
 8014284:	d905      	bls.n	8014292 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801428a:	3301      	adds	r3, #1
 801428c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014290:	e11e      	b.n	80144d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014294:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014298:	2b0b      	cmp	r3, #11
 801429a:	d905      	bls.n	80142a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801429c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142a0:	3301      	adds	r3, #1
 80142a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142a6:	e113      	b.n	80144d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80142a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d075      	beq.n	801439e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d006      	beq.n	80142c8 <tcp_slowtmr+0xf0>
 80142ba:	4b62      	ldr	r3, [pc, #392]	; (8014444 <tcp_slowtmr+0x26c>)
 80142bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80142c0:	4965      	ldr	r1, [pc, #404]	; (8014458 <tcp_slowtmr+0x280>)
 80142c2:	4862      	ldr	r0, [pc, #392]	; (801444c <tcp_slowtmr+0x274>)
 80142c4:	f006 ffa4 	bl	801b210 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80142c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d106      	bne.n	80142de <tcp_slowtmr+0x106>
 80142d0:	4b5c      	ldr	r3, [pc, #368]	; (8014444 <tcp_slowtmr+0x26c>)
 80142d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80142d6:	4961      	ldr	r1, [pc, #388]	; (801445c <tcp_slowtmr+0x284>)
 80142d8:	485c      	ldr	r0, [pc, #368]	; (801444c <tcp_slowtmr+0x274>)
 80142da:	f006 ff99 	bl	801b210 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80142de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142e4:	2b0b      	cmp	r3, #11
 80142e6:	d905      	bls.n	80142f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80142e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142ec:	3301      	adds	r3, #1
 80142ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142f2:	e0ed      	b.n	80144d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80142f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142fa:	3b01      	subs	r3, #1
 80142fc:	4a58      	ldr	r2, [pc, #352]	; (8014460 <tcp_slowtmr+0x288>)
 80142fe:	5cd3      	ldrb	r3, [r2, r3]
 8014300:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014304:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014308:	7c7a      	ldrb	r2, [r7, #17]
 801430a:	429a      	cmp	r2, r3
 801430c:	d907      	bls.n	801431e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014310:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014314:	3301      	adds	r3, #1
 8014316:	b2da      	uxtb	r2, r3
 8014318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014320:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014324:	7c7a      	ldrb	r2, [r7, #17]
 8014326:	429a      	cmp	r2, r3
 8014328:	f200 80d2 	bhi.w	80144d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801432c:	2301      	movs	r3, #1
 801432e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8014330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014336:	2b00      	cmp	r3, #0
 8014338:	d108      	bne.n	801434c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801433a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801433c:	f004 fc32 	bl	8018ba4 <tcp_zero_window_probe>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d014      	beq.n	8014370 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8014346:	2300      	movs	r3, #0
 8014348:	623b      	str	r3, [r7, #32]
 801434a:	e011      	b.n	8014370 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014352:	4619      	mov	r1, r3
 8014354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014356:	f003 fae5 	bl	8017924 <tcp_split_unsent_seg>
 801435a:	4603      	mov	r3, r0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d107      	bne.n	8014370 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014362:	f003 fd65 	bl	8017e30 <tcp_output>
 8014366:	4603      	mov	r3, r0
 8014368:	2b00      	cmp	r3, #0
 801436a:	d101      	bne.n	8014370 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801436c:	2300      	movs	r3, #0
 801436e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014370:	6a3b      	ldr	r3, [r7, #32]
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 80ac 	beq.w	80144d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437a:	2200      	movs	r2, #0
 801437c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014382:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014386:	2b06      	cmp	r3, #6
 8014388:	f200 80a2 	bhi.w	80144d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014392:	3301      	adds	r3, #1
 8014394:	b2da      	uxtb	r2, r3
 8014396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014398:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801439c:	e098      	b.n	80144d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	db0f      	blt.n	80143c8 <tcp_slowtmr+0x1f0>
 80143a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d008      	beq.n	80143c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80143b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143bc:	b29b      	uxth	r3, r3
 80143be:	3301      	adds	r3, #1
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	b21a      	sxth	r2, r3
 80143c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80143c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80143ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80143d4:	429a      	cmp	r2, r3
 80143d6:	db7b      	blt.n	80144d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80143d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80143da:	f004 f821 	bl	8018420 <tcp_rexmit_rto_prepare>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d007      	beq.n	80143f4 <tcp_slowtmr+0x21c>
 80143e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d171      	bne.n	80144d0 <tcp_slowtmr+0x2f8>
 80143ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d06d      	beq.n	80144d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80143f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f6:	7d1b      	ldrb	r3, [r3, #20]
 80143f8:	2b02      	cmp	r3, #2
 80143fa:	d03a      	beq.n	8014472 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80143fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014402:	2b0c      	cmp	r3, #12
 8014404:	bf28      	it	cs
 8014406:	230c      	movcs	r3, #12
 8014408:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014410:	10db      	asrs	r3, r3, #3
 8014412:	b21b      	sxth	r3, r3
 8014414:	461a      	mov	r2, r3
 8014416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014418:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801441c:	4413      	add	r3, r2
 801441e:	7efa      	ldrb	r2, [r7, #27]
 8014420:	4910      	ldr	r1, [pc, #64]	; (8014464 <tcp_slowtmr+0x28c>)
 8014422:	5c8a      	ldrb	r2, [r1, r2]
 8014424:	4093      	lsls	r3, r2
 8014426:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801442e:	4293      	cmp	r3, r2
 8014430:	dc1a      	bgt.n	8014468 <tcp_slowtmr+0x290>
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	b21a      	sxth	r2, r3
 8014436:	e019      	b.n	801446c <tcp_slowtmr+0x294>
 8014438:	24008a4c 	.word	0x24008a4c
 801443c:	24004922 	.word	0x24004922
 8014440:	24008a48 	.word	0x24008a48
 8014444:	0801ea54 	.word	0x0801ea54
 8014448:	0801edb4 	.word	0x0801edb4
 801444c:	0801eab4 	.word	0x0801eab4
 8014450:	0801ede0 	.word	0x0801ede0
 8014454:	0801ee0c 	.word	0x0801ee0c
 8014458:	0801ee3c 	.word	0x0801ee3c
 801445c:	0801ee70 	.word	0x0801ee70
 8014460:	080205f4 	.word	0x080205f4
 8014464:	080205e4 	.word	0x080205e4
 8014468:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8014472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014474:	2200      	movs	r2, #0
 8014476:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014480:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014484:	4293      	cmp	r3, r2
 8014486:	bf28      	it	cs
 8014488:	4613      	movcs	r3, r2
 801448a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801448c:	8a7b      	ldrh	r3, [r7, #18]
 801448e:	085b      	lsrs	r3, r3, #1
 8014490:	b29a      	uxth	r2, r3
 8014492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014494:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d206      	bcs.n	80144b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80144aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	b29a      	uxth	r2, r3
 80144b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80144b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80144bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80144c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c4:	2200      	movs	r2, #0
 80144c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80144ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144cc:	f004 f818 	bl	8018500 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80144d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d2:	7d1b      	ldrb	r3, [r3, #20]
 80144d4:	2b06      	cmp	r3, #6
 80144d6:	d111      	bne.n	80144fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80144d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144da:	8b5b      	ldrh	r3, [r3, #26]
 80144dc:	f003 0310 	and.w	r3, r3, #16
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d00b      	beq.n	80144fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144e4:	4b9c      	ldr	r3, [pc, #624]	; (8014758 <tcp_slowtmr+0x580>)
 80144e6:	681a      	ldr	r2, [r3, #0]
 80144e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ea:	6a1b      	ldr	r3, [r3, #32]
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	2b28      	cmp	r3, #40	; 0x28
 80144f0:	d904      	bls.n	80144fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80144f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144f6:	3301      	adds	r3, #1
 80144f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fe:	7a5b      	ldrb	r3, [r3, #9]
 8014500:	f003 0308 	and.w	r3, r3, #8
 8014504:	2b00      	cmp	r3, #0
 8014506:	d04a      	beq.n	801459e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8014508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801450a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801450c:	2b04      	cmp	r3, #4
 801450e:	d003      	beq.n	8014518 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8014510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014512:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014514:	2b07      	cmp	r3, #7
 8014516:	d142      	bne.n	801459e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014518:	4b8f      	ldr	r3, [pc, #572]	; (8014758 <tcp_slowtmr+0x580>)
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451e:	6a1b      	ldr	r3, [r3, #32]
 8014520:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014524:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014528:	4b8c      	ldr	r3, [pc, #560]	; (801475c <tcp_slowtmr+0x584>)
 801452a:	440b      	add	r3, r1
 801452c:	498c      	ldr	r1, [pc, #560]	; (8014760 <tcp_slowtmr+0x588>)
 801452e:	fba1 1303 	umull	r1, r3, r1, r3
 8014532:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014534:	429a      	cmp	r2, r3
 8014536:	d90a      	bls.n	801454e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801453c:	3301      	adds	r3, #1
 801453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8014542:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014546:	3301      	adds	r3, #1
 8014548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801454c:	e027      	b.n	801459e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801454e:	4b82      	ldr	r3, [pc, #520]	; (8014758 <tcp_slowtmr+0x580>)
 8014550:	681a      	ldr	r2, [r3, #0]
 8014552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014554:	6a1b      	ldr	r3, [r3, #32]
 8014556:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014560:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014564:	4618      	mov	r0, r3
 8014566:	4b7f      	ldr	r3, [pc, #508]	; (8014764 <tcp_slowtmr+0x58c>)
 8014568:	fb03 f300 	mul.w	r3, r3, r0
 801456c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801456e:	497c      	ldr	r1, [pc, #496]	; (8014760 <tcp_slowtmr+0x588>)
 8014570:	fba1 1303 	umull	r1, r3, r1, r3
 8014574:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014576:	429a      	cmp	r2, r3
 8014578:	d911      	bls.n	801459e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801457a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801457c:	f004 fad2 	bl	8018b24 <tcp_keepalive>
 8014580:	4603      	mov	r3, r0
 8014582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014586:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801458a:	2b00      	cmp	r3, #0
 801458c:	d107      	bne.n	801459e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014590:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014594:	3301      	adds	r3, #1
 8014596:	b2da      	uxtb	r2, r3
 8014598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801459a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d011      	beq.n	80145ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80145a6:	4b6c      	ldr	r3, [pc, #432]	; (8014758 <tcp_slowtmr+0x580>)
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ac:	6a1b      	ldr	r3, [r3, #32]
 80145ae:	1ad2      	subs	r2, r2, r3
 80145b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80145b6:	4619      	mov	r1, r3
 80145b8:	460b      	mov	r3, r1
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	440b      	add	r3, r1
 80145be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d302      	bcc.n	80145ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80145c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145c6:	f000 fdd9 	bl	801517c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80145ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145cc:	7d1b      	ldrb	r3, [r3, #20]
 80145ce:	2b03      	cmp	r3, #3
 80145d0:	d10b      	bne.n	80145ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80145d2:	4b61      	ldr	r3, [pc, #388]	; (8014758 <tcp_slowtmr+0x580>)
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d8:	6a1b      	ldr	r3, [r3, #32]
 80145da:	1ad3      	subs	r3, r2, r3
 80145dc:	2b28      	cmp	r3, #40	; 0x28
 80145de:	d904      	bls.n	80145ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80145e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145e4:	3301      	adds	r3, #1
 80145e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80145ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ec:	7d1b      	ldrb	r3, [r3, #20]
 80145ee:	2b09      	cmp	r3, #9
 80145f0:	d10b      	bne.n	801460a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80145f2:	4b59      	ldr	r3, [pc, #356]	; (8014758 <tcp_slowtmr+0x580>)
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f8:	6a1b      	ldr	r3, [r3, #32]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	2bf0      	cmp	r3, #240	; 0xf0
 80145fe:	d904      	bls.n	801460a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8014600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014604:	3301      	adds	r3, #1
 8014606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801460a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801460e:	2b00      	cmp	r3, #0
 8014610:	d060      	beq.n	80146d4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8014612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014618:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801461a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801461c:	f000 fbfa 	bl	8014e14 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014622:	2b00      	cmp	r3, #0
 8014624:	d010      	beq.n	8014648 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014626:	4b50      	ldr	r3, [pc, #320]	; (8014768 <tcp_slowtmr+0x590>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801462c:	429a      	cmp	r2, r3
 801462e:	d106      	bne.n	801463e <tcp_slowtmr+0x466>
 8014630:	4b4e      	ldr	r3, [pc, #312]	; (801476c <tcp_slowtmr+0x594>)
 8014632:	f240 526d 	movw	r2, #1389	; 0x56d
 8014636:	494e      	ldr	r1, [pc, #312]	; (8014770 <tcp_slowtmr+0x598>)
 8014638:	484e      	ldr	r0, [pc, #312]	; (8014774 <tcp_slowtmr+0x59c>)
 801463a:	f006 fde9 	bl	801b210 <iprintf>
        prev->next = pcb->next;
 801463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014640:	68da      	ldr	r2, [r3, #12]
 8014642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014644:	60da      	str	r2, [r3, #12]
 8014646:	e00f      	b.n	8014668 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014648:	4b47      	ldr	r3, [pc, #284]	; (8014768 <tcp_slowtmr+0x590>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801464e:	429a      	cmp	r2, r3
 8014650:	d006      	beq.n	8014660 <tcp_slowtmr+0x488>
 8014652:	4b46      	ldr	r3, [pc, #280]	; (801476c <tcp_slowtmr+0x594>)
 8014654:	f240 5271 	movw	r2, #1393	; 0x571
 8014658:	4947      	ldr	r1, [pc, #284]	; (8014778 <tcp_slowtmr+0x5a0>)
 801465a:	4846      	ldr	r0, [pc, #280]	; (8014774 <tcp_slowtmr+0x59c>)
 801465c:	f006 fdd8 	bl	801b210 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	4a40      	ldr	r2, [pc, #256]	; (8014768 <tcp_slowtmr+0x590>)
 8014666:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801466c:	2b00      	cmp	r3, #0
 801466e:	d013      	beq.n	8014698 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014672:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014676:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014678:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467c:	3304      	adds	r3, #4
 801467e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014680:	8ad2      	ldrh	r2, [r2, #22]
 8014682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014684:	8b09      	ldrh	r1, [r1, #24]
 8014686:	9102      	str	r1, [sp, #8]
 8014688:	9201      	str	r2, [sp, #4]
 801468a:	9300      	str	r3, [sp, #0]
 801468c:	462b      	mov	r3, r5
 801468e:	4622      	mov	r2, r4
 8014690:	4601      	mov	r1, r0
 8014692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014694:	f004 f992 	bl	80189bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801469a:	691b      	ldr	r3, [r3, #16]
 801469c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a0:	7d1b      	ldrb	r3, [r3, #20]
 80146a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80146a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80146a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80146ae:	6838      	ldr	r0, [r7, #0]
 80146b0:	f7ff f9fc 	bl	8013aac <tcp_free>

      tcp_active_pcbs_changed = 0;
 80146b4:	4b31      	ldr	r3, [pc, #196]	; (801477c <tcp_slowtmr+0x5a4>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d004      	beq.n	80146ca <tcp_slowtmr+0x4f2>
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	f06f 010c 	mvn.w	r1, #12
 80146c6:	68b8      	ldr	r0, [r7, #8]
 80146c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80146ca:	4b2c      	ldr	r3, [pc, #176]	; (801477c <tcp_slowtmr+0x5a4>)
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d037      	beq.n	8014742 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80146d2:	e592      	b.n	80141fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80146d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80146d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80146de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e0:	7f1b      	ldrb	r3, [r3, #28]
 80146e2:	3301      	adds	r3, #1
 80146e4:	b2da      	uxtb	r2, r3
 80146e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80146ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ec:	7f1a      	ldrb	r2, [r3, #28]
 80146ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f0:	7f5b      	ldrb	r3, [r3, #29]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d325      	bcc.n	8014742 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80146f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f8:	2200      	movs	r2, #0
 80146fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80146fc:	4b1f      	ldr	r3, [pc, #124]	; (801477c <tcp_slowtmr+0x5a4>)
 80146fe:	2200      	movs	r2, #0
 8014700:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014708:	2b00      	cmp	r3, #0
 801470a:	d00b      	beq.n	8014724 <tcp_slowtmr+0x54c>
 801470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014714:	6912      	ldr	r2, [r2, #16]
 8014716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014718:	4610      	mov	r0, r2
 801471a:	4798      	blx	r3
 801471c:	4603      	mov	r3, r0
 801471e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014722:	e002      	b.n	801472a <tcp_slowtmr+0x552>
 8014724:	2300      	movs	r3, #0
 8014726:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801472a:	4b14      	ldr	r3, [pc, #80]	; (801477c <tcp_slowtmr+0x5a4>)
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d000      	beq.n	8014734 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8014732:	e562      	b.n	80141fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014734:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014738:	2b00      	cmp	r3, #0
 801473a:	d102      	bne.n	8014742 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801473c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801473e:	f003 fb77 	bl	8017e30 <tcp_output>
  while (pcb != NULL) {
 8014742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014744:	2b00      	cmp	r3, #0
 8014746:	f47f ad5e 	bne.w	8014206 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801474a:	2300      	movs	r3, #0
 801474c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801474e:	4b0c      	ldr	r3, [pc, #48]	; (8014780 <tcp_slowtmr+0x5a8>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014754:	e069      	b.n	801482a <tcp_slowtmr+0x652>
 8014756:	bf00      	nop
 8014758:	24008a4c 	.word	0x24008a4c
 801475c:	000a4cb8 	.word	0x000a4cb8
 8014760:	10624dd3 	.word	0x10624dd3
 8014764:	000124f8 	.word	0x000124f8
 8014768:	24008a48 	.word	0x24008a48
 801476c:	0801ea54 	.word	0x0801ea54
 8014770:	0801eea8 	.word	0x0801eea8
 8014774:	0801eab4 	.word	0x0801eab4
 8014778:	0801eed4 	.word	0x0801eed4
 801477c:	24008a44 	.word	0x24008a44
 8014780:	24008a58 	.word	0x24008a58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014786:	7d1b      	ldrb	r3, [r3, #20]
 8014788:	2b0a      	cmp	r3, #10
 801478a:	d006      	beq.n	801479a <tcp_slowtmr+0x5c2>
 801478c:	4b2a      	ldr	r3, [pc, #168]	; (8014838 <tcp_slowtmr+0x660>)
 801478e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014792:	492a      	ldr	r1, [pc, #168]	; (801483c <tcp_slowtmr+0x664>)
 8014794:	482a      	ldr	r0, [pc, #168]	; (8014840 <tcp_slowtmr+0x668>)
 8014796:	f006 fd3b 	bl	801b210 <iprintf>
    pcb_remove = 0;
 801479a:	2300      	movs	r3, #0
 801479c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80147a0:	4b28      	ldr	r3, [pc, #160]	; (8014844 <tcp_slowtmr+0x66c>)
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a6:	6a1b      	ldr	r3, [r3, #32]
 80147a8:	1ad3      	subs	r3, r2, r3
 80147aa:	2bf0      	cmp	r3, #240	; 0xf0
 80147ac:	d904      	bls.n	80147b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80147ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147b2:	3301      	adds	r3, #1
 80147b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80147b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d02f      	beq.n	8014820 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80147c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80147c2:	f000 fb27 	bl	8014e14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80147c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d010      	beq.n	80147ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80147cc:	4b1e      	ldr	r3, [pc, #120]	; (8014848 <tcp_slowtmr+0x670>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d106      	bne.n	80147e4 <tcp_slowtmr+0x60c>
 80147d6:	4b18      	ldr	r3, [pc, #96]	; (8014838 <tcp_slowtmr+0x660>)
 80147d8:	f240 52af 	movw	r2, #1455	; 0x5af
 80147dc:	491b      	ldr	r1, [pc, #108]	; (801484c <tcp_slowtmr+0x674>)
 80147de:	4818      	ldr	r0, [pc, #96]	; (8014840 <tcp_slowtmr+0x668>)
 80147e0:	f006 fd16 	bl	801b210 <iprintf>
        prev->next = pcb->next;
 80147e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e6:	68da      	ldr	r2, [r3, #12]
 80147e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ea:	60da      	str	r2, [r3, #12]
 80147ec:	e00f      	b.n	801480e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80147ee:	4b16      	ldr	r3, [pc, #88]	; (8014848 <tcp_slowtmr+0x670>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d006      	beq.n	8014806 <tcp_slowtmr+0x62e>
 80147f8:	4b0f      	ldr	r3, [pc, #60]	; (8014838 <tcp_slowtmr+0x660>)
 80147fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80147fe:	4914      	ldr	r1, [pc, #80]	; (8014850 <tcp_slowtmr+0x678>)
 8014800:	480f      	ldr	r0, [pc, #60]	; (8014840 <tcp_slowtmr+0x668>)
 8014802:	f006 fd05 	bl	801b210 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	4a0f      	ldr	r2, [pc, #60]	; (8014848 <tcp_slowtmr+0x670>)
 801480c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014810:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014818:	69f8      	ldr	r0, [r7, #28]
 801481a:	f7ff f947 	bl	8013aac <tcp_free>
 801481e:	e004      	b.n	801482a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014822:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482c:	2b00      	cmp	r3, #0
 801482e:	d1a9      	bne.n	8014784 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014830:	bf00      	nop
 8014832:	3730      	adds	r7, #48	; 0x30
 8014834:	46bd      	mov	sp, r7
 8014836:	bdb0      	pop	{r4, r5, r7, pc}
 8014838:	0801ea54 	.word	0x0801ea54
 801483c:	0801ef00 	.word	0x0801ef00
 8014840:	0801eab4 	.word	0x0801eab4
 8014844:	24008a4c 	.word	0x24008a4c
 8014848:	24008a58 	.word	0x24008a58
 801484c:	0801ef30 	.word	0x0801ef30
 8014850:	0801ef58 	.word	0x0801ef58

08014854 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801485a:	4b2d      	ldr	r3, [pc, #180]	; (8014910 <tcp_fasttmr+0xbc>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	3301      	adds	r3, #1
 8014860:	b2da      	uxtb	r2, r3
 8014862:	4b2b      	ldr	r3, [pc, #172]	; (8014910 <tcp_fasttmr+0xbc>)
 8014864:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014866:	4b2b      	ldr	r3, [pc, #172]	; (8014914 <tcp_fasttmr+0xc0>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801486c:	e048      	b.n	8014900 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	7f9a      	ldrb	r2, [r3, #30]
 8014872:	4b27      	ldr	r3, [pc, #156]	; (8014910 <tcp_fasttmr+0xbc>)
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	429a      	cmp	r2, r3
 8014878:	d03f      	beq.n	80148fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801487a:	4b25      	ldr	r3, [pc, #148]	; (8014910 <tcp_fasttmr+0xbc>)
 801487c:	781a      	ldrb	r2, [r3, #0]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	8b5b      	ldrh	r3, [r3, #26]
 8014886:	f003 0301 	and.w	r3, r3, #1
 801488a:	2b00      	cmp	r3, #0
 801488c:	d010      	beq.n	80148b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	8b5b      	ldrh	r3, [r3, #26]
 8014892:	f043 0302 	orr.w	r3, r3, #2
 8014896:	b29a      	uxth	r2, r3
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f003 fac7 	bl	8017e30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	8b5b      	ldrh	r3, [r3, #26]
 80148a6:	f023 0303 	bic.w	r3, r3, #3
 80148aa:	b29a      	uxth	r2, r3
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	8b5b      	ldrh	r3, [r3, #26]
 80148b4:	f003 0308 	and.w	r3, r3, #8
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d009      	beq.n	80148d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	8b5b      	ldrh	r3, [r3, #26]
 80148c0:	f023 0308 	bic.w	r3, r3, #8
 80148c4:	b29a      	uxth	r2, r3
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7ff fa7e 	bl	8013dcc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d00a      	beq.n	80148f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80148de:	4b0e      	ldr	r3, [pc, #56]	; (8014918 <tcp_fasttmr+0xc4>)
 80148e0:	2200      	movs	r2, #0
 80148e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 f819 	bl	801491c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80148ea:	4b0b      	ldr	r3, [pc, #44]	; (8014918 <tcp_fasttmr+0xc4>)
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d000      	beq.n	80148f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80148f2:	e7b8      	b.n	8014866 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	607b      	str	r3, [r7, #4]
 80148f8:	e002      	b.n	8014900 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	68db      	ldr	r3, [r3, #12]
 80148fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d1b3      	bne.n	801486e <tcp_fasttmr+0x1a>
    }
  }
}
 8014906:	bf00      	nop
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	24004922 	.word	0x24004922
 8014914:	24008a48 	.word	0x24008a48
 8014918:	24008a44 	.word	0x24008a44

0801491c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801491c:	b590      	push	{r4, r7, lr}
 801491e:	b085      	sub	sp, #20
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d109      	bne.n	801493e <tcp_process_refused_data+0x22>
 801492a:	4b37      	ldr	r3, [pc, #220]	; (8014a08 <tcp_process_refused_data+0xec>)
 801492c:	f240 6209 	movw	r2, #1545	; 0x609
 8014930:	4936      	ldr	r1, [pc, #216]	; (8014a0c <tcp_process_refused_data+0xf0>)
 8014932:	4837      	ldr	r0, [pc, #220]	; (8014a10 <tcp_process_refused_data+0xf4>)
 8014934:	f006 fc6c 	bl	801b210 <iprintf>
 8014938:	f06f 030f 	mvn.w	r3, #15
 801493c:	e060      	b.n	8014a00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014942:	7b5b      	ldrb	r3, [r3, #13]
 8014944:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801494a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2200      	movs	r2, #0
 8014950:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00b      	beq.n	8014974 <tcp_process_refused_data+0x58>
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	6918      	ldr	r0, [r3, #16]
 8014966:	2300      	movs	r3, #0
 8014968:	68ba      	ldr	r2, [r7, #8]
 801496a:	6879      	ldr	r1, [r7, #4]
 801496c:	47a0      	blx	r4
 801496e:	4603      	mov	r3, r0
 8014970:	73fb      	strb	r3, [r7, #15]
 8014972:	e007      	b.n	8014984 <tcp_process_refused_data+0x68>
 8014974:	2300      	movs	r3, #0
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	6879      	ldr	r1, [r7, #4]
 801497a:	2000      	movs	r0, #0
 801497c:	f000 f8a2 	bl	8014ac4 <tcp_recv_null>
 8014980:	4603      	mov	r3, r0
 8014982:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d12a      	bne.n	80149e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801498c:	7bbb      	ldrb	r3, [r7, #14]
 801498e:	f003 0320 	and.w	r3, r3, #32
 8014992:	2b00      	cmp	r3, #0
 8014994:	d033      	beq.n	80149fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801499a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801499e:	d005      	beq.n	80149ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149a4:	3301      	adds	r3, #1
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00b      	beq.n	80149ce <tcp_process_refused_data+0xb2>
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6918      	ldr	r0, [r3, #16]
 80149c0:	2300      	movs	r3, #0
 80149c2:	2200      	movs	r2, #0
 80149c4:	6879      	ldr	r1, [r7, #4]
 80149c6:	47a0      	blx	r4
 80149c8:	4603      	mov	r3, r0
 80149ca:	73fb      	strb	r3, [r7, #15]
 80149cc:	e001      	b.n	80149d2 <tcp_process_refused_data+0xb6>
 80149ce:	2300      	movs	r3, #0
 80149d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80149d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149d6:	f113 0f0d 	cmn.w	r3, #13
 80149da:	d110      	bne.n	80149fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80149dc:	f06f 030c 	mvn.w	r3, #12
 80149e0:	e00e      	b.n	8014a00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80149e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149e6:	f113 0f0d 	cmn.w	r3, #13
 80149ea:	d102      	bne.n	80149f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80149ec:	f06f 030c 	mvn.w	r3, #12
 80149f0:	e006      	b.n	8014a00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	68ba      	ldr	r2, [r7, #8]
 80149f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80149f8:	f06f 0304 	mvn.w	r3, #4
 80149fc:	e000      	b.n	8014a00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80149fe:	2300      	movs	r3, #0
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3714      	adds	r7, #20
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd90      	pop	{r4, r7, pc}
 8014a08:	0801ea54 	.word	0x0801ea54
 8014a0c:	0801ef80 	.word	0x0801ef80
 8014a10:	0801eab4 	.word	0x0801eab4

08014a14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014a1c:	e007      	b.n	8014a2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f000 f809 	bl	8014a3c <tcp_seg_free>
    seg = next;
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d1f4      	bne.n	8014a1e <tcp_segs_free+0xa>
  }
}
 8014a34:	bf00      	nop
 8014a36:	3710      	adds	r7, #16
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d00c      	beq.n	8014a64 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d004      	beq.n	8014a5c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fe fc56 	bl	8013308 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	2003      	movs	r0, #3
 8014a60:	f7fd fda6 	bl	80125b0 <memp_free>
  }
}
 8014a64:	bf00      	nop
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d106      	bne.n	8014a88 <tcp_seg_copy+0x1c>
 8014a7a:	4b0f      	ldr	r3, [pc, #60]	; (8014ab8 <tcp_seg_copy+0x4c>)
 8014a7c:	f240 6282 	movw	r2, #1666	; 0x682
 8014a80:	490e      	ldr	r1, [pc, #56]	; (8014abc <tcp_seg_copy+0x50>)
 8014a82:	480f      	ldr	r0, [pc, #60]	; (8014ac0 <tcp_seg_copy+0x54>)
 8014a84:	f006 fbc4 	bl	801b210 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014a88:	2003      	movs	r0, #3
 8014a8a:	f7fd fd1b 	bl	80124c4 <memp_malloc>
 8014a8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d101      	bne.n	8014a9a <tcp_seg_copy+0x2e>
    return NULL;
 8014a96:	2300      	movs	r3, #0
 8014a98:	e00a      	b.n	8014ab0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014a9a:	2210      	movs	r2, #16
 8014a9c:	6879      	ldr	r1, [r7, #4]
 8014a9e:	68f8      	ldr	r0, [r7, #12]
 8014aa0:	f005 ff51 	bl	801a946 <memcpy>
  pbuf_ref(cseg->p);
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fe fcd3 	bl	8013454 <pbuf_ref>
  return cseg;
 8014aae:	68fb      	ldr	r3, [r7, #12]
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3710      	adds	r7, #16
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	0801ea54 	.word	0x0801ea54
 8014abc:	0801efc4 	.word	0x0801efc4
 8014ac0:	0801eab4 	.word	0x0801eab4

08014ac4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	607a      	str	r2, [r7, #4]
 8014ad0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d109      	bne.n	8014aec <tcp_recv_null+0x28>
 8014ad8:	4b12      	ldr	r3, [pc, #72]	; (8014b24 <tcp_recv_null+0x60>)
 8014ada:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014ade:	4912      	ldr	r1, [pc, #72]	; (8014b28 <tcp_recv_null+0x64>)
 8014ae0:	4812      	ldr	r0, [pc, #72]	; (8014b2c <tcp_recv_null+0x68>)
 8014ae2:	f006 fb95 	bl	801b210 <iprintf>
 8014ae6:	f06f 030f 	mvn.w	r3, #15
 8014aea:	e016      	b.n	8014b1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d009      	beq.n	8014b06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	891b      	ldrh	r3, [r3, #8]
 8014af6:	4619      	mov	r1, r3
 8014af8:	68b8      	ldr	r0, [r7, #8]
 8014afa:	f7ff fb1d 	bl	8014138 <tcp_recved>
    pbuf_free(p);
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f7fe fc02 	bl	8013308 <pbuf_free>
 8014b04:	e008      	b.n	8014b18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d104      	bne.n	8014b18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014b0e:	68b8      	ldr	r0, [r7, #8]
 8014b10:	f7ff f9c2 	bl	8013e98 <tcp_close>
 8014b14:	4603      	mov	r3, r0
 8014b16:	e000      	b.n	8014b1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014b18:	2300      	movs	r3, #0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3710      	adds	r7, #16
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	0801ea54 	.word	0x0801ea54
 8014b28:	0801efe0 	.word	0x0801efe0
 8014b2c:	0801eab4 	.word	0x0801eab4

08014b30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b086      	sub	sp, #24
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	4603      	mov	r3, r0
 8014b38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	db01      	blt.n	8014b46 <tcp_kill_prio+0x16>
 8014b42:	79fb      	ldrb	r3, [r7, #7]
 8014b44:	e000      	b.n	8014b48 <tcp_kill_prio+0x18>
 8014b46:	237f      	movs	r3, #127	; 0x7f
 8014b48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014b4a:	7afb      	ldrb	r3, [r7, #11]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d034      	beq.n	8014bba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014b50:	7afb      	ldrb	r3, [r7, #11]
 8014b52:	3b01      	subs	r3, #1
 8014b54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014b56:	2300      	movs	r3, #0
 8014b58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b5e:	4b19      	ldr	r3, [pc, #100]	; (8014bc4 <tcp_kill_prio+0x94>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	617b      	str	r3, [r7, #20]
 8014b64:	e01f      	b.n	8014ba6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	7d5b      	ldrb	r3, [r3, #21]
 8014b6a:	7afa      	ldrb	r2, [r7, #11]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d80c      	bhi.n	8014b8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014b74:	7afa      	ldrb	r2, [r7, #11]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d112      	bne.n	8014ba0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b7a:	4b13      	ldr	r3, [pc, #76]	; (8014bc8 <tcp_kill_prio+0x98>)
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	6a1b      	ldr	r3, [r3, #32]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d80a      	bhi.n	8014ba0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014b8a:	4b0f      	ldr	r3, [pc, #60]	; (8014bc8 <tcp_kill_prio+0x98>)
 8014b8c:	681a      	ldr	r2, [r3, #0]
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	6a1b      	ldr	r3, [r3, #32]
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	7d5b      	ldrb	r3, [r3, #21]
 8014b9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	617b      	str	r3, [r7, #20]
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d1dc      	bne.n	8014b66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d004      	beq.n	8014bbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014bb2:	6938      	ldr	r0, [r7, #16]
 8014bb4:	f7ff fa5a 	bl	801406c <tcp_abort>
 8014bb8:	e000      	b.n	8014bbc <tcp_kill_prio+0x8c>
    return;
 8014bba:	bf00      	nop
  }
}
 8014bbc:	3718      	adds	r7, #24
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	24008a48 	.word	0x24008a48
 8014bc8:	24008a4c 	.word	0x24008a4c

08014bcc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b086      	sub	sp, #24
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014bd6:	79fb      	ldrb	r3, [r7, #7]
 8014bd8:	2b08      	cmp	r3, #8
 8014bda:	d009      	beq.n	8014bf0 <tcp_kill_state+0x24>
 8014bdc:	79fb      	ldrb	r3, [r7, #7]
 8014bde:	2b09      	cmp	r3, #9
 8014be0:	d006      	beq.n	8014bf0 <tcp_kill_state+0x24>
 8014be2:	4b1a      	ldr	r3, [pc, #104]	; (8014c4c <tcp_kill_state+0x80>)
 8014be4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014be8:	4919      	ldr	r1, [pc, #100]	; (8014c50 <tcp_kill_state+0x84>)
 8014bea:	481a      	ldr	r0, [pc, #104]	; (8014c54 <tcp_kill_state+0x88>)
 8014bec:	f006 fb10 	bl	801b210 <iprintf>

  inactivity = 0;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bf8:	4b17      	ldr	r3, [pc, #92]	; (8014c58 <tcp_kill_state+0x8c>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	617b      	str	r3, [r7, #20]
 8014bfe:	e017      	b.n	8014c30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	7d1b      	ldrb	r3, [r3, #20]
 8014c04:	79fa      	ldrb	r2, [r7, #7]
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d10f      	bne.n	8014c2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c0a:	4b14      	ldr	r3, [pc, #80]	; (8014c5c <tcp_kill_state+0x90>)
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	6a1b      	ldr	r3, [r3, #32]
 8014c12:	1ad3      	subs	r3, r2, r3
 8014c14:	68fa      	ldr	r2, [r7, #12]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d807      	bhi.n	8014c2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014c1a:	4b10      	ldr	r3, [pc, #64]	; (8014c5c <tcp_kill_state+0x90>)
 8014c1c:	681a      	ldr	r2, [r3, #0]
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	6a1b      	ldr	r3, [r3, #32]
 8014c22:	1ad3      	subs	r3, r2, r3
 8014c24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	617b      	str	r3, [r7, #20]
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1e4      	bne.n	8014c00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d003      	beq.n	8014c44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014c3c:	2100      	movs	r1, #0
 8014c3e:	6938      	ldr	r0, [r7, #16]
 8014c40:	f7ff f956 	bl	8013ef0 <tcp_abandon>
  }
}
 8014c44:	bf00      	nop
 8014c46:	3718      	adds	r7, #24
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	0801ea54 	.word	0x0801ea54
 8014c50:	0801effc 	.word	0x0801effc
 8014c54:	0801eab4 	.word	0x0801eab4
 8014c58:	24008a48 	.word	0x24008a48
 8014c5c:	24008a4c 	.word	0x24008a4c

08014c60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b084      	sub	sp, #16
 8014c64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014c66:	2300      	movs	r3, #0
 8014c68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c6e:	4b12      	ldr	r3, [pc, #72]	; (8014cb8 <tcp_kill_timewait+0x58>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	60fb      	str	r3, [r7, #12]
 8014c74:	e012      	b.n	8014c9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c76:	4b11      	ldr	r3, [pc, #68]	; (8014cbc <tcp_kill_timewait+0x5c>)
 8014c78:	681a      	ldr	r2, [r3, #0]
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	6a1b      	ldr	r3, [r3, #32]
 8014c7e:	1ad3      	subs	r3, r2, r3
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d807      	bhi.n	8014c96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014c86:	4b0d      	ldr	r3, [pc, #52]	; (8014cbc <tcp_kill_timewait+0x5c>)
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	6a1b      	ldr	r3, [r3, #32]
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	60fb      	str	r3, [r7, #12]
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d1e9      	bne.n	8014c76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d002      	beq.n	8014cae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014ca8:	68b8      	ldr	r0, [r7, #8]
 8014caa:	f7ff f9df 	bl	801406c <tcp_abort>
  }
}
 8014cae:	bf00      	nop
 8014cb0:	3710      	adds	r7, #16
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	24008a58 	.word	0x24008a58
 8014cbc:	24008a4c 	.word	0x24008a4c

08014cc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014cc6:	4b10      	ldr	r3, [pc, #64]	; (8014d08 <tcp_handle_closepend+0x48>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014ccc:	e014      	b.n	8014cf8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	68db      	ldr	r3, [r3, #12]
 8014cd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	8b5b      	ldrh	r3, [r3, #26]
 8014cd8:	f003 0308 	and.w	r3, r3, #8
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d009      	beq.n	8014cf4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	8b5b      	ldrh	r3, [r3, #26]
 8014ce4:	f023 0308 	bic.w	r3, r3, #8
 8014ce8:	b29a      	uxth	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f7ff f86c 	bl	8013dcc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d1e7      	bne.n	8014cce <tcp_handle_closepend+0xe>
  }
}
 8014cfe:	bf00      	nop
 8014d00:	3708      	adds	r7, #8
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	24008a48 	.word	0x24008a48

08014d0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	4603      	mov	r3, r0
 8014d14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d16:	2001      	movs	r0, #1
 8014d18:	f7fd fbd4 	bl	80124c4 <memp_malloc>
 8014d1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d126      	bne.n	8014d72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014d24:	f7ff ffcc 	bl	8014cc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014d28:	f7ff ff9a 	bl	8014c60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d2c:	2001      	movs	r0, #1
 8014d2e:	f7fd fbc9 	bl	80124c4 <memp_malloc>
 8014d32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d11b      	bne.n	8014d72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014d3a:	2009      	movs	r0, #9
 8014d3c:	f7ff ff46 	bl	8014bcc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d40:	2001      	movs	r0, #1
 8014d42:	f7fd fbbf 	bl	80124c4 <memp_malloc>
 8014d46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d111      	bne.n	8014d72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014d4e:	2008      	movs	r0, #8
 8014d50:	f7ff ff3c 	bl	8014bcc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d54:	2001      	movs	r0, #1
 8014d56:	f7fd fbb5 	bl	80124c4 <memp_malloc>
 8014d5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d107      	bne.n	8014d72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014d62:	79fb      	ldrb	r3, [r7, #7]
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7ff fee3 	bl	8014b30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d6a:	2001      	movs	r0, #1
 8014d6c:	f7fd fbaa 	bl	80124c4 <memp_malloc>
 8014d70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d03f      	beq.n	8014df8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014d78:	229c      	movs	r2, #156	; 0x9c
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f005 fe06 	bl	801a98e <memset>
    pcb->prio = prio;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	79fa      	ldrb	r2, [r7, #7]
 8014d86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014d8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014d98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	22ff      	movs	r2, #255	; 0xff
 8014da6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014dae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2206      	movs	r2, #6
 8014db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2206      	movs	r2, #6
 8014dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dc4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014dce:	4b0d      	ldr	r3, [pc, #52]	; (8014e04 <tcp_alloc+0xf8>)
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014dd6:	4b0c      	ldr	r3, [pc, #48]	; (8014e08 <tcp_alloc+0xfc>)
 8014dd8:	781a      	ldrb	r2, [r3, #0]
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014de4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	4a08      	ldr	r2, [pc, #32]	; (8014e0c <tcp_alloc+0x100>)
 8014dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	4a07      	ldr	r2, [pc, #28]	; (8014e10 <tcp_alloc+0x104>)
 8014df4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014df8:	68fb      	ldr	r3, [r7, #12]
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3710      	adds	r7, #16
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	24008a4c 	.word	0x24008a4c
 8014e08:	24004922 	.word	0x24004922
 8014e0c:	08014ac5 	.word	0x08014ac5
 8014e10:	006ddd00 	.word	0x006ddd00

08014e14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d107      	bne.n	8014e32 <tcp_pcb_purge+0x1e>
 8014e22:	4b21      	ldr	r3, [pc, #132]	; (8014ea8 <tcp_pcb_purge+0x94>)
 8014e24:	f640 0251 	movw	r2, #2129	; 0x851
 8014e28:	4920      	ldr	r1, [pc, #128]	; (8014eac <tcp_pcb_purge+0x98>)
 8014e2a:	4821      	ldr	r0, [pc, #132]	; (8014eb0 <tcp_pcb_purge+0x9c>)
 8014e2c:	f006 f9f0 	bl	801b210 <iprintf>
 8014e30:	e037      	b.n	8014ea2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	7d1b      	ldrb	r3, [r3, #20]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d033      	beq.n	8014ea2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014e3e:	2b0a      	cmp	r3, #10
 8014e40:	d02f      	beq.n	8014ea2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014e46:	2b01      	cmp	r3, #1
 8014e48:	d02b      	beq.n	8014ea2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d007      	beq.n	8014e62 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fe fa56 	bl	8013308 <pbuf_free>
      pcb->refused_data = NULL;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d002      	beq.n	8014e70 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 f986 	bl	801517c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e76:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7ff fdc9 	bl	8014a14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7ff fdc4 	bl	8014a14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	66da      	str	r2, [r3, #108]	; 0x6c
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	0801ea54 	.word	0x0801ea54
 8014eac:	0801f0bc 	.word	0x0801f0bc
 8014eb0:	0801eab4 	.word	0x0801eab4

08014eb4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d106      	bne.n	8014ed2 <tcp_pcb_remove+0x1e>
 8014ec4:	4b3e      	ldr	r3, [pc, #248]	; (8014fc0 <tcp_pcb_remove+0x10c>)
 8014ec6:	f640 0283 	movw	r2, #2179	; 0x883
 8014eca:	493e      	ldr	r1, [pc, #248]	; (8014fc4 <tcp_pcb_remove+0x110>)
 8014ecc:	483e      	ldr	r0, [pc, #248]	; (8014fc8 <tcp_pcb_remove+0x114>)
 8014ece:	f006 f99f 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d106      	bne.n	8014ee6 <tcp_pcb_remove+0x32>
 8014ed8:	4b39      	ldr	r3, [pc, #228]	; (8014fc0 <tcp_pcb_remove+0x10c>)
 8014eda:	f640 0284 	movw	r2, #2180	; 0x884
 8014ede:	493b      	ldr	r1, [pc, #236]	; (8014fcc <tcp_pcb_remove+0x118>)
 8014ee0:	4839      	ldr	r0, [pc, #228]	; (8014fc8 <tcp_pcb_remove+0x114>)
 8014ee2:	f006 f995 	bl	801b210 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	683a      	ldr	r2, [r7, #0]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d105      	bne.n	8014efc <tcp_pcb_remove+0x48>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	68da      	ldr	r2, [r3, #12]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	601a      	str	r2, [r3, #0]
 8014efa:	e013      	b.n	8014f24 <tcp_pcb_remove+0x70>
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	60fb      	str	r3, [r7, #12]
 8014f02:	e00c      	b.n	8014f1e <tcp_pcb_remove+0x6a>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	68db      	ldr	r3, [r3, #12]
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d104      	bne.n	8014f18 <tcp_pcb_remove+0x64>
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	68da      	ldr	r2, [r3, #12]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	60da      	str	r2, [r3, #12]
 8014f16:	e005      	b.n	8014f24 <tcp_pcb_remove+0x70>
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	60fb      	str	r3, [r7, #12]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d1ef      	bne.n	8014f04 <tcp_pcb_remove+0x50>
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	2200      	movs	r2, #0
 8014f28:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014f2a:	6838      	ldr	r0, [r7, #0]
 8014f2c:	f7ff ff72 	bl	8014e14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	7d1b      	ldrb	r3, [r3, #20]
 8014f34:	2b0a      	cmp	r3, #10
 8014f36:	d013      	beq.n	8014f60 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014f3c:	2b01      	cmp	r3, #1
 8014f3e:	d00f      	beq.n	8014f60 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	8b5b      	ldrh	r3, [r3, #26]
 8014f44:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d009      	beq.n	8014f60 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	8b5b      	ldrh	r3, [r3, #26]
 8014f50:	f043 0302 	orr.w	r3, r3, #2
 8014f54:	b29a      	uxth	r2, r3
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f5a:	6838      	ldr	r0, [r7, #0]
 8014f5c:	f002 ff68 	bl	8017e30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	7d1b      	ldrb	r3, [r3, #20]
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d020      	beq.n	8014faa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d006      	beq.n	8014f7e <tcp_pcb_remove+0xca>
 8014f70:	4b13      	ldr	r3, [pc, #76]	; (8014fc0 <tcp_pcb_remove+0x10c>)
 8014f72:	f640 0293 	movw	r2, #2195	; 0x893
 8014f76:	4916      	ldr	r1, [pc, #88]	; (8014fd0 <tcp_pcb_remove+0x11c>)
 8014f78:	4813      	ldr	r0, [pc, #76]	; (8014fc8 <tcp_pcb_remove+0x114>)
 8014f7a:	f006 f949 	bl	801b210 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d006      	beq.n	8014f94 <tcp_pcb_remove+0xe0>
 8014f86:	4b0e      	ldr	r3, [pc, #56]	; (8014fc0 <tcp_pcb_remove+0x10c>)
 8014f88:	f640 0294 	movw	r2, #2196	; 0x894
 8014f8c:	4911      	ldr	r1, [pc, #68]	; (8014fd4 <tcp_pcb_remove+0x120>)
 8014f8e:	480e      	ldr	r0, [pc, #56]	; (8014fc8 <tcp_pcb_remove+0x114>)
 8014f90:	f006 f93e 	bl	801b210 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d006      	beq.n	8014faa <tcp_pcb_remove+0xf6>
 8014f9c:	4b08      	ldr	r3, [pc, #32]	; (8014fc0 <tcp_pcb_remove+0x10c>)
 8014f9e:	f640 0296 	movw	r2, #2198	; 0x896
 8014fa2:	490d      	ldr	r1, [pc, #52]	; (8014fd8 <tcp_pcb_remove+0x124>)
 8014fa4:	4808      	ldr	r0, [pc, #32]	; (8014fc8 <tcp_pcb_remove+0x114>)
 8014fa6:	f006 f933 	bl	801b210 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	2200      	movs	r2, #0
 8014fae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014fb6:	bf00      	nop
 8014fb8:	3710      	adds	r7, #16
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	0801ea54 	.word	0x0801ea54
 8014fc4:	0801f0d8 	.word	0x0801f0d8
 8014fc8:	0801eab4 	.word	0x0801eab4
 8014fcc:	0801f0f4 	.word	0x0801f0f4
 8014fd0:	0801f114 	.word	0x0801f114
 8014fd4:	0801f12c 	.word	0x0801f12c
 8014fd8:	0801f148 	.word	0x0801f148

08014fdc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d106      	bne.n	8014ff8 <tcp_next_iss+0x1c>
 8014fea:	4b0a      	ldr	r3, [pc, #40]	; (8015014 <tcp_next_iss+0x38>)
 8014fec:	f640 02af 	movw	r2, #2223	; 0x8af
 8014ff0:	4909      	ldr	r1, [pc, #36]	; (8015018 <tcp_next_iss+0x3c>)
 8014ff2:	480a      	ldr	r0, [pc, #40]	; (801501c <tcp_next_iss+0x40>)
 8014ff4:	f006 f90c 	bl	801b210 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014ff8:	4b09      	ldr	r3, [pc, #36]	; (8015020 <tcp_next_iss+0x44>)
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	4b09      	ldr	r3, [pc, #36]	; (8015024 <tcp_next_iss+0x48>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	4413      	add	r3, r2
 8015002:	4a07      	ldr	r2, [pc, #28]	; (8015020 <tcp_next_iss+0x44>)
 8015004:	6013      	str	r3, [r2, #0]
  return iss;
 8015006:	4b06      	ldr	r3, [pc, #24]	; (8015020 <tcp_next_iss+0x44>)
 8015008:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801500a:	4618      	mov	r0, r3
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	0801ea54 	.word	0x0801ea54
 8015018:	0801f160 	.word	0x0801f160
 801501c:	0801eab4 	.word	0x0801eab4
 8015020:	24000030 	.word	0x24000030
 8015024:	24008a4c 	.word	0x24008a4c

08015028 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b086      	sub	sp, #24
 801502c:	af00      	add	r7, sp, #0
 801502e:	4603      	mov	r3, r0
 8015030:	60b9      	str	r1, [r7, #8]
 8015032:	607a      	str	r2, [r7, #4]
 8015034:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d106      	bne.n	801504a <tcp_eff_send_mss_netif+0x22>
 801503c:	4b14      	ldr	r3, [pc, #80]	; (8015090 <tcp_eff_send_mss_netif+0x68>)
 801503e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8015042:	4914      	ldr	r1, [pc, #80]	; (8015094 <tcp_eff_send_mss_netif+0x6c>)
 8015044:	4814      	ldr	r0, [pc, #80]	; (8015098 <tcp_eff_send_mss_netif+0x70>)
 8015046:	f006 f8e3 	bl	801b210 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d101      	bne.n	8015054 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015050:	89fb      	ldrh	r3, [r7, #14]
 8015052:	e019      	b.n	8015088 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015058:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801505a:	8afb      	ldrh	r3, [r7, #22]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d012      	beq.n	8015086 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015060:	2328      	movs	r3, #40	; 0x28
 8015062:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015064:	8afa      	ldrh	r2, [r7, #22]
 8015066:	8abb      	ldrh	r3, [r7, #20]
 8015068:	429a      	cmp	r2, r3
 801506a:	d904      	bls.n	8015076 <tcp_eff_send_mss_netif+0x4e>
 801506c:	8afa      	ldrh	r2, [r7, #22]
 801506e:	8abb      	ldrh	r3, [r7, #20]
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	b29b      	uxth	r3, r3
 8015074:	e000      	b.n	8015078 <tcp_eff_send_mss_netif+0x50>
 8015076:	2300      	movs	r3, #0
 8015078:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801507a:	8a7a      	ldrh	r2, [r7, #18]
 801507c:	89fb      	ldrh	r3, [r7, #14]
 801507e:	4293      	cmp	r3, r2
 8015080:	bf28      	it	cs
 8015082:	4613      	movcs	r3, r2
 8015084:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015086:	89fb      	ldrh	r3, [r7, #14]
}
 8015088:	4618      	mov	r0, r3
 801508a:	3718      	adds	r7, #24
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	0801ea54 	.word	0x0801ea54
 8015094:	0801f17c 	.word	0x0801f17c
 8015098:	0801eab4 	.word	0x0801eab4

0801509c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d119      	bne.n	80150e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80150b0:	4b10      	ldr	r3, [pc, #64]	; (80150f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80150b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80150b6:	4910      	ldr	r1, [pc, #64]	; (80150f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80150b8:	4810      	ldr	r0, [pc, #64]	; (80150fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80150ba:	f006 f8a9 	bl	801b210 <iprintf>

  while (pcb != NULL) {
 80150be:	e011      	b.n	80150e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d108      	bne.n	80150de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80150d2:	68f8      	ldr	r0, [r7, #12]
 80150d4:	f7fe ffca 	bl	801406c <tcp_abort>
      pcb = next;
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	60fb      	str	r3, [r7, #12]
 80150dc:	e002      	b.n	80150e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d1ea      	bne.n	80150c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80150ea:	bf00      	nop
 80150ec:	3710      	adds	r7, #16
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	0801ea54 	.word	0x0801ea54
 80150f8:	0801f1a4 	.word	0x0801f1a4
 80150fc:	0801eab4 	.word	0x0801eab4

08015100 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b084      	sub	sp, #16
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d02a      	beq.n	8015166 <tcp_netif_ip_addr_changed+0x66>
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d026      	beq.n	8015166 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015118:	4b15      	ldr	r3, [pc, #84]	; (8015170 <tcp_netif_ip_addr_changed+0x70>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4619      	mov	r1, r3
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7ff ffbc 	bl	801509c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015124:	4b13      	ldr	r3, [pc, #76]	; (8015174 <tcp_netif_ip_addr_changed+0x74>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4619      	mov	r1, r3
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f7ff ffb6 	bl	801509c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d017      	beq.n	8015166 <tcp_netif_ip_addr_changed+0x66>
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d013      	beq.n	8015166 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801513e:	4b0e      	ldr	r3, [pc, #56]	; (8015178 <tcp_netif_ip_addr_changed+0x78>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	60fb      	str	r3, [r7, #12]
 8015144:	e00c      	b.n	8015160 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	429a      	cmp	r2, r3
 8015150:	d103      	bne.n	801515a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	60fb      	str	r3, [r7, #12]
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d1ef      	bne.n	8015146 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015166:	bf00      	nop
 8015168:	3710      	adds	r7, #16
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	24008a48 	.word	0x24008a48
 8015174:	24008a54 	.word	0x24008a54
 8015178:	24008a50 	.word	0x24008a50

0801517c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015188:	2b00      	cmp	r3, #0
 801518a:	d007      	beq.n	801519c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015190:	4618      	mov	r0, r3
 8015192:	f7ff fc3f 	bl	8014a14 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2200      	movs	r2, #0
 801519a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801519c:	bf00      	nop
 801519e:	3708      	adds	r7, #8
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80151a4:	b590      	push	{r4, r7, lr}
 80151a6:	b08d      	sub	sp, #52	; 0x34
 80151a8:	af04      	add	r7, sp, #16
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d105      	bne.n	80151c0 <tcp_input+0x1c>
 80151b4:	4b9b      	ldr	r3, [pc, #620]	; (8015424 <tcp_input+0x280>)
 80151b6:	2283      	movs	r2, #131	; 0x83
 80151b8:	499b      	ldr	r1, [pc, #620]	; (8015428 <tcp_input+0x284>)
 80151ba:	489c      	ldr	r0, [pc, #624]	; (801542c <tcp_input+0x288>)
 80151bc:	f006 f828 	bl	801b210 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	4a9a      	ldr	r2, [pc, #616]	; (8015430 <tcp_input+0x28c>)
 80151c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	895b      	ldrh	r3, [r3, #10]
 80151cc:	2b13      	cmp	r3, #19
 80151ce:	f240 83c4 	bls.w	801595a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80151d2:	4b98      	ldr	r3, [pc, #608]	; (8015434 <tcp_input+0x290>)
 80151d4:	695a      	ldr	r2, [r3, #20]
 80151d6:	4b97      	ldr	r3, [pc, #604]	; (8015434 <tcp_input+0x290>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	4619      	mov	r1, r3
 80151dc:	4610      	mov	r0, r2
 80151de:	f7fb fe5d 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 80151e2:	4603      	mov	r3, r0
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f040 83ba 	bne.w	801595e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80151ea:	4b92      	ldr	r3, [pc, #584]	; (8015434 <tcp_input+0x290>)
 80151ec:	695b      	ldr	r3, [r3, #20]
 80151ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80151f2:	2be0      	cmp	r3, #224	; 0xe0
 80151f4:	f000 83b3 	beq.w	801595e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80151f8:	4b8d      	ldr	r3, [pc, #564]	; (8015430 <tcp_input+0x28c>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	899b      	ldrh	r3, [r3, #12]
 80151fe:	b29b      	uxth	r3, r3
 8015200:	4618      	mov	r0, r3
 8015202:	f7f8 fa19 	bl	800d638 <lwip_htons>
 8015206:	4603      	mov	r3, r0
 8015208:	0b1b      	lsrs	r3, r3, #12
 801520a:	b29b      	uxth	r3, r3
 801520c:	b2db      	uxtb	r3, r3
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015212:	7cbb      	ldrb	r3, [r7, #18]
 8015214:	2b13      	cmp	r3, #19
 8015216:	f240 83a2 	bls.w	801595e <tcp_input+0x7ba>
 801521a:	7cbb      	ldrb	r3, [r7, #18]
 801521c:	b29a      	uxth	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	891b      	ldrh	r3, [r3, #8]
 8015222:	429a      	cmp	r2, r3
 8015224:	f200 839b 	bhi.w	801595e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015228:	7cbb      	ldrb	r3, [r7, #18]
 801522a:	b29b      	uxth	r3, r3
 801522c:	3b14      	subs	r3, #20
 801522e:	b29a      	uxth	r2, r3
 8015230:	4b81      	ldr	r3, [pc, #516]	; (8015438 <tcp_input+0x294>)
 8015232:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015234:	4b81      	ldr	r3, [pc, #516]	; (801543c <tcp_input+0x298>)
 8015236:	2200      	movs	r2, #0
 8015238:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	895a      	ldrh	r2, [r3, #10]
 801523e:	7cbb      	ldrb	r3, [r7, #18]
 8015240:	b29b      	uxth	r3, r3
 8015242:	429a      	cmp	r2, r3
 8015244:	d309      	bcc.n	801525a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015246:	4b7c      	ldr	r3, [pc, #496]	; (8015438 <tcp_input+0x294>)
 8015248:	881a      	ldrh	r2, [r3, #0]
 801524a:	4b7d      	ldr	r3, [pc, #500]	; (8015440 <tcp_input+0x29c>)
 801524c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801524e:	7cbb      	ldrb	r3, [r7, #18]
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7fd ffd2 	bl	80131fc <pbuf_remove_header>
 8015258:	e04e      	b.n	80152f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d105      	bne.n	801526e <tcp_input+0xca>
 8015262:	4b70      	ldr	r3, [pc, #448]	; (8015424 <tcp_input+0x280>)
 8015264:	22c2      	movs	r2, #194	; 0xc2
 8015266:	4977      	ldr	r1, [pc, #476]	; (8015444 <tcp_input+0x2a0>)
 8015268:	4870      	ldr	r0, [pc, #448]	; (801542c <tcp_input+0x288>)
 801526a:	f005 ffd1 	bl	801b210 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801526e:	2114      	movs	r1, #20
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f7fd ffc3 	bl	80131fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	895a      	ldrh	r2, [r3, #10]
 801527a:	4b71      	ldr	r3, [pc, #452]	; (8015440 <tcp_input+0x29c>)
 801527c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801527e:	4b6e      	ldr	r3, [pc, #440]	; (8015438 <tcp_input+0x294>)
 8015280:	881a      	ldrh	r2, [r3, #0]
 8015282:	4b6f      	ldr	r3, [pc, #444]	; (8015440 <tcp_input+0x29c>)
 8015284:	881b      	ldrh	r3, [r3, #0]
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801528a:	4b6d      	ldr	r3, [pc, #436]	; (8015440 <tcp_input+0x29c>)
 801528c:	881b      	ldrh	r3, [r3, #0]
 801528e:	4619      	mov	r1, r3
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7fd ffb3 	bl	80131fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	895b      	ldrh	r3, [r3, #10]
 801529c:	8a3a      	ldrh	r2, [r7, #16]
 801529e:	429a      	cmp	r2, r3
 80152a0:	f200 835f 	bhi.w	8015962 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	685b      	ldr	r3, [r3, #4]
 80152aa:	4a64      	ldr	r2, [pc, #400]	; (801543c <tcp_input+0x298>)
 80152ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	8a3a      	ldrh	r2, [r7, #16]
 80152b4:	4611      	mov	r1, r2
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7fd ffa0 	bl	80131fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	891a      	ldrh	r2, [r3, #8]
 80152c0:	8a3b      	ldrh	r3, [r7, #16]
 80152c2:	1ad3      	subs	r3, r2, r3
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	895b      	ldrh	r3, [r3, #10]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d005      	beq.n	80152de <tcp_input+0x13a>
 80152d2:	4b54      	ldr	r3, [pc, #336]	; (8015424 <tcp_input+0x280>)
 80152d4:	22df      	movs	r2, #223	; 0xdf
 80152d6:	495c      	ldr	r1, [pc, #368]	; (8015448 <tcp_input+0x2a4>)
 80152d8:	4854      	ldr	r0, [pc, #336]	; (801542c <tcp_input+0x288>)
 80152da:	f005 ff99 	bl	801b210 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	891a      	ldrh	r2, [r3, #8]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	891b      	ldrh	r3, [r3, #8]
 80152e8:	429a      	cmp	r2, r3
 80152ea:	d005      	beq.n	80152f8 <tcp_input+0x154>
 80152ec:	4b4d      	ldr	r3, [pc, #308]	; (8015424 <tcp_input+0x280>)
 80152ee:	22e0      	movs	r2, #224	; 0xe0
 80152f0:	4956      	ldr	r1, [pc, #344]	; (801544c <tcp_input+0x2a8>)
 80152f2:	484e      	ldr	r0, [pc, #312]	; (801542c <tcp_input+0x288>)
 80152f4:	f005 ff8c 	bl	801b210 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80152f8:	4b4d      	ldr	r3, [pc, #308]	; (8015430 <tcp_input+0x28c>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	b29a      	uxth	r2, r3
 8015300:	4b4b      	ldr	r3, [pc, #300]	; (8015430 <tcp_input+0x28c>)
 8015302:	681c      	ldr	r4, [r3, #0]
 8015304:	4610      	mov	r0, r2
 8015306:	f7f8 f997 	bl	800d638 <lwip_htons>
 801530a:	4603      	mov	r3, r0
 801530c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801530e:	4b48      	ldr	r3, [pc, #288]	; (8015430 <tcp_input+0x28c>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	885b      	ldrh	r3, [r3, #2]
 8015314:	b29a      	uxth	r2, r3
 8015316:	4b46      	ldr	r3, [pc, #280]	; (8015430 <tcp_input+0x28c>)
 8015318:	681c      	ldr	r4, [r3, #0]
 801531a:	4610      	mov	r0, r2
 801531c:	f7f8 f98c 	bl	800d638 <lwip_htons>
 8015320:	4603      	mov	r3, r0
 8015322:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015324:	4b42      	ldr	r3, [pc, #264]	; (8015430 <tcp_input+0x28c>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	685a      	ldr	r2, [r3, #4]
 801532a:	4b41      	ldr	r3, [pc, #260]	; (8015430 <tcp_input+0x28c>)
 801532c:	681c      	ldr	r4, [r3, #0]
 801532e:	4610      	mov	r0, r2
 8015330:	f7f8 f997 	bl	800d662 <lwip_htonl>
 8015334:	4603      	mov	r3, r0
 8015336:	6063      	str	r3, [r4, #4]
 8015338:	6863      	ldr	r3, [r4, #4]
 801533a:	4a45      	ldr	r2, [pc, #276]	; (8015450 <tcp_input+0x2ac>)
 801533c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801533e:	4b3c      	ldr	r3, [pc, #240]	; (8015430 <tcp_input+0x28c>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	689a      	ldr	r2, [r3, #8]
 8015344:	4b3a      	ldr	r3, [pc, #232]	; (8015430 <tcp_input+0x28c>)
 8015346:	681c      	ldr	r4, [r3, #0]
 8015348:	4610      	mov	r0, r2
 801534a:	f7f8 f98a 	bl	800d662 <lwip_htonl>
 801534e:	4603      	mov	r3, r0
 8015350:	60a3      	str	r3, [r4, #8]
 8015352:	68a3      	ldr	r3, [r4, #8]
 8015354:	4a3f      	ldr	r2, [pc, #252]	; (8015454 <tcp_input+0x2b0>)
 8015356:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015358:	4b35      	ldr	r3, [pc, #212]	; (8015430 <tcp_input+0x28c>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	89db      	ldrh	r3, [r3, #14]
 801535e:	b29a      	uxth	r2, r3
 8015360:	4b33      	ldr	r3, [pc, #204]	; (8015430 <tcp_input+0x28c>)
 8015362:	681c      	ldr	r4, [r3, #0]
 8015364:	4610      	mov	r0, r2
 8015366:	f7f8 f967 	bl	800d638 <lwip_htons>
 801536a:	4603      	mov	r3, r0
 801536c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801536e:	4b30      	ldr	r3, [pc, #192]	; (8015430 <tcp_input+0x28c>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	899b      	ldrh	r3, [r3, #12]
 8015374:	b29b      	uxth	r3, r3
 8015376:	4618      	mov	r0, r3
 8015378:	f7f8 f95e 	bl	800d638 <lwip_htons>
 801537c:	4603      	mov	r3, r0
 801537e:	b2db      	uxtb	r3, r3
 8015380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015384:	b2da      	uxtb	r2, r3
 8015386:	4b34      	ldr	r3, [pc, #208]	; (8015458 <tcp_input+0x2b4>)
 8015388:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	891a      	ldrh	r2, [r3, #8]
 801538e:	4b33      	ldr	r3, [pc, #204]	; (801545c <tcp_input+0x2b8>)
 8015390:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015392:	4b31      	ldr	r3, [pc, #196]	; (8015458 <tcp_input+0x2b4>)
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	f003 0303 	and.w	r3, r3, #3
 801539a:	2b00      	cmp	r3, #0
 801539c:	d00c      	beq.n	80153b8 <tcp_input+0x214>
    tcplen++;
 801539e:	4b2f      	ldr	r3, [pc, #188]	; (801545c <tcp_input+0x2b8>)
 80153a0:	881b      	ldrh	r3, [r3, #0]
 80153a2:	3301      	adds	r3, #1
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	4b2d      	ldr	r3, [pc, #180]	; (801545c <tcp_input+0x2b8>)
 80153a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	891a      	ldrh	r2, [r3, #8]
 80153ae:	4b2b      	ldr	r3, [pc, #172]	; (801545c <tcp_input+0x2b8>)
 80153b0:	881b      	ldrh	r3, [r3, #0]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	f200 82d7 	bhi.w	8015966 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80153b8:	2300      	movs	r3, #0
 80153ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80153bc:	4b28      	ldr	r3, [pc, #160]	; (8015460 <tcp_input+0x2bc>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	61fb      	str	r3, [r7, #28]
 80153c2:	e09d      	b.n	8015500 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	7d1b      	ldrb	r3, [r3, #20]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d105      	bne.n	80153d8 <tcp_input+0x234>
 80153cc:	4b15      	ldr	r3, [pc, #84]	; (8015424 <tcp_input+0x280>)
 80153ce:	22fb      	movs	r2, #251	; 0xfb
 80153d0:	4924      	ldr	r1, [pc, #144]	; (8015464 <tcp_input+0x2c0>)
 80153d2:	4816      	ldr	r0, [pc, #88]	; (801542c <tcp_input+0x288>)
 80153d4:	f005 ff1c 	bl	801b210 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	7d1b      	ldrb	r3, [r3, #20]
 80153dc:	2b0a      	cmp	r3, #10
 80153de:	d105      	bne.n	80153ec <tcp_input+0x248>
 80153e0:	4b10      	ldr	r3, [pc, #64]	; (8015424 <tcp_input+0x280>)
 80153e2:	22fc      	movs	r2, #252	; 0xfc
 80153e4:	4920      	ldr	r1, [pc, #128]	; (8015468 <tcp_input+0x2c4>)
 80153e6:	4811      	ldr	r0, [pc, #68]	; (801542c <tcp_input+0x288>)
 80153e8:	f005 ff12 	bl	801b210 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	7d1b      	ldrb	r3, [r3, #20]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d105      	bne.n	8015400 <tcp_input+0x25c>
 80153f4:	4b0b      	ldr	r3, [pc, #44]	; (8015424 <tcp_input+0x280>)
 80153f6:	22fd      	movs	r2, #253	; 0xfd
 80153f8:	491c      	ldr	r1, [pc, #112]	; (801546c <tcp_input+0x2c8>)
 80153fa:	480c      	ldr	r0, [pc, #48]	; (801542c <tcp_input+0x288>)
 80153fc:	f005 ff08 	bl	801b210 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	7a1b      	ldrb	r3, [r3, #8]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d033      	beq.n	8015470 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	7a1a      	ldrb	r2, [r3, #8]
 801540c:	4b09      	ldr	r3, [pc, #36]	; (8015434 <tcp_input+0x290>)
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015414:	3301      	adds	r3, #1
 8015416:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015418:	429a      	cmp	r2, r3
 801541a:	d029      	beq.n	8015470 <tcp_input+0x2cc>
      prev = pcb;
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	61bb      	str	r3, [r7, #24]
      continue;
 8015420:	e06b      	b.n	80154fa <tcp_input+0x356>
 8015422:	bf00      	nop
 8015424:	0801f1d8 	.word	0x0801f1d8
 8015428:	0801f228 	.word	0x0801f228
 801542c:	0801f240 	.word	0x0801f240
 8015430:	24004934 	.word	0x24004934
 8015434:	24005960 	.word	0x24005960
 8015438:	24004938 	.word	0x24004938
 801543c:	2400493c 	.word	0x2400493c
 8015440:	2400493a 	.word	0x2400493a
 8015444:	0801f268 	.word	0x0801f268
 8015448:	0801f278 	.word	0x0801f278
 801544c:	0801f284 	.word	0x0801f284
 8015450:	24004944 	.word	0x24004944
 8015454:	24004948 	.word	0x24004948
 8015458:	24004950 	.word	0x24004950
 801545c:	2400494e 	.word	0x2400494e
 8015460:	24008a48 	.word	0x24008a48
 8015464:	0801f2a4 	.word	0x0801f2a4
 8015468:	0801f2cc 	.word	0x0801f2cc
 801546c:	0801f2f8 	.word	0x0801f2f8
    }

    if (pcb->remote_port == tcphdr->src &&
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	8b1a      	ldrh	r2, [r3, #24]
 8015474:	4b94      	ldr	r3, [pc, #592]	; (80156c8 <tcp_input+0x524>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	881b      	ldrh	r3, [r3, #0]
 801547a:	b29b      	uxth	r3, r3
 801547c:	429a      	cmp	r2, r3
 801547e:	d13a      	bne.n	80154f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015480:	69fb      	ldr	r3, [r7, #28]
 8015482:	8ada      	ldrh	r2, [r3, #22]
 8015484:	4b90      	ldr	r3, [pc, #576]	; (80156c8 <tcp_input+0x524>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	885b      	ldrh	r3, [r3, #2]
 801548a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801548c:	429a      	cmp	r2, r3
 801548e:	d132      	bne.n	80154f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	685a      	ldr	r2, [r3, #4]
 8015494:	4b8d      	ldr	r3, [pc, #564]	; (80156cc <tcp_input+0x528>)
 8015496:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015498:	429a      	cmp	r2, r3
 801549a:	d12c      	bne.n	80154f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801549c:	69fb      	ldr	r3, [r7, #28]
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	4b8a      	ldr	r3, [pc, #552]	; (80156cc <tcp_input+0x528>)
 80154a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d126      	bne.n	80154f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	68db      	ldr	r3, [r3, #12]
 80154ac:	69fa      	ldr	r2, [r7, #28]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d106      	bne.n	80154c0 <tcp_input+0x31c>
 80154b2:	4b87      	ldr	r3, [pc, #540]	; (80156d0 <tcp_input+0x52c>)
 80154b4:	f240 120d 	movw	r2, #269	; 0x10d
 80154b8:	4986      	ldr	r1, [pc, #536]	; (80156d4 <tcp_input+0x530>)
 80154ba:	4887      	ldr	r0, [pc, #540]	; (80156d8 <tcp_input+0x534>)
 80154bc:	f005 fea8 	bl	801b210 <iprintf>
      if (prev != NULL) {
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d00a      	beq.n	80154dc <tcp_input+0x338>
        prev->next = pcb->next;
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	68da      	ldr	r2, [r3, #12]
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80154ce:	4b83      	ldr	r3, [pc, #524]	; (80156dc <tcp_input+0x538>)
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80154d6:	4a81      	ldr	r2, [pc, #516]	; (80156dc <tcp_input+0x538>)
 80154d8:	69fb      	ldr	r3, [r7, #28]
 80154da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80154dc:	69fb      	ldr	r3, [r7, #28]
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	69fa      	ldr	r2, [r7, #28]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d111      	bne.n	801550a <tcp_input+0x366>
 80154e6:	4b7a      	ldr	r3, [pc, #488]	; (80156d0 <tcp_input+0x52c>)
 80154e8:	f240 1215 	movw	r2, #277	; 0x115
 80154ec:	497c      	ldr	r1, [pc, #496]	; (80156e0 <tcp_input+0x53c>)
 80154ee:	487a      	ldr	r0, [pc, #488]	; (80156d8 <tcp_input+0x534>)
 80154f0:	f005 fe8e 	bl	801b210 <iprintf>
      break;
 80154f4:	e009      	b.n	801550a <tcp_input+0x366>
    }
    prev = pcb;
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	68db      	ldr	r3, [r3, #12]
 80154fe:	61fb      	str	r3, [r7, #28]
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	2b00      	cmp	r3, #0
 8015504:	f47f af5e 	bne.w	80153c4 <tcp_input+0x220>
 8015508:	e000      	b.n	801550c <tcp_input+0x368>
      break;
 801550a:	bf00      	nop
  }

  if (pcb == NULL) {
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	2b00      	cmp	r3, #0
 8015510:	f040 8095 	bne.w	801563e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015514:	4b73      	ldr	r3, [pc, #460]	; (80156e4 <tcp_input+0x540>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	61fb      	str	r3, [r7, #28]
 801551a:	e03f      	b.n	801559c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	7d1b      	ldrb	r3, [r3, #20]
 8015520:	2b0a      	cmp	r3, #10
 8015522:	d006      	beq.n	8015532 <tcp_input+0x38e>
 8015524:	4b6a      	ldr	r3, [pc, #424]	; (80156d0 <tcp_input+0x52c>)
 8015526:	f240 121f 	movw	r2, #287	; 0x11f
 801552a:	496f      	ldr	r1, [pc, #444]	; (80156e8 <tcp_input+0x544>)
 801552c:	486a      	ldr	r0, [pc, #424]	; (80156d8 <tcp_input+0x534>)
 801552e:	f005 fe6f 	bl	801b210 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015532:	69fb      	ldr	r3, [r7, #28]
 8015534:	7a1b      	ldrb	r3, [r3, #8]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d009      	beq.n	801554e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	7a1a      	ldrb	r2, [r3, #8]
 801553e:	4b63      	ldr	r3, [pc, #396]	; (80156cc <tcp_input+0x528>)
 8015540:	685b      	ldr	r3, [r3, #4]
 8015542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015546:	3301      	adds	r3, #1
 8015548:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801554a:	429a      	cmp	r2, r3
 801554c:	d122      	bne.n	8015594 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	8b1a      	ldrh	r2, [r3, #24]
 8015552:	4b5d      	ldr	r3, [pc, #372]	; (80156c8 <tcp_input+0x524>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	881b      	ldrh	r3, [r3, #0]
 8015558:	b29b      	uxth	r3, r3
 801555a:	429a      	cmp	r2, r3
 801555c:	d11b      	bne.n	8015596 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801555e:	69fb      	ldr	r3, [r7, #28]
 8015560:	8ada      	ldrh	r2, [r3, #22]
 8015562:	4b59      	ldr	r3, [pc, #356]	; (80156c8 <tcp_input+0x524>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	885b      	ldrh	r3, [r3, #2]
 8015568:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801556a:	429a      	cmp	r2, r3
 801556c:	d113      	bne.n	8015596 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801556e:	69fb      	ldr	r3, [r7, #28]
 8015570:	685a      	ldr	r2, [r3, #4]
 8015572:	4b56      	ldr	r3, [pc, #344]	; (80156cc <tcp_input+0x528>)
 8015574:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015576:	429a      	cmp	r2, r3
 8015578:	d10d      	bne.n	8015596 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	4b53      	ldr	r3, [pc, #332]	; (80156cc <tcp_input+0x528>)
 8015580:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015582:	429a      	cmp	r2, r3
 8015584:	d107      	bne.n	8015596 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015586:	69f8      	ldr	r0, [r7, #28]
 8015588:	f000 fb52 	bl	8015c30 <tcp_timewait_input>
        }
        pbuf_free(p);
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f7fd febb 	bl	8013308 <pbuf_free>
        return;
 8015592:	e1ee      	b.n	8015972 <tcp_input+0x7ce>
        continue;
 8015594:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	61fb      	str	r3, [r7, #28]
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d1bc      	bne.n	801551c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80155a2:	2300      	movs	r3, #0
 80155a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80155a6:	4b51      	ldr	r3, [pc, #324]	; (80156ec <tcp_input+0x548>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	617b      	str	r3, [r7, #20]
 80155ac:	e02a      	b.n	8015604 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	7a1b      	ldrb	r3, [r3, #8]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d00c      	beq.n	80155d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	7a1a      	ldrb	r2, [r3, #8]
 80155ba:	4b44      	ldr	r3, [pc, #272]	; (80156cc <tcp_input+0x528>)
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80155c2:	3301      	adds	r3, #1
 80155c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d002      	beq.n	80155d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	61bb      	str	r3, [r7, #24]
        continue;
 80155ce:	e016      	b.n	80155fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	8ada      	ldrh	r2, [r3, #22]
 80155d4:	4b3c      	ldr	r3, [pc, #240]	; (80156c8 <tcp_input+0x524>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	885b      	ldrh	r3, [r3, #2]
 80155da:	b29b      	uxth	r3, r3
 80155dc:	429a      	cmp	r2, r3
 80155de:	d10c      	bne.n	80155fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	681a      	ldr	r2, [r3, #0]
 80155e4:	4b39      	ldr	r3, [pc, #228]	; (80156cc <tcp_input+0x528>)
 80155e6:	695b      	ldr	r3, [r3, #20]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d00f      	beq.n	801560c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d00d      	beq.n	801560e <tcp_input+0x46a>
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d009      	beq.n	801560e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	617b      	str	r3, [r7, #20]
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d1d1      	bne.n	80155ae <tcp_input+0x40a>
 801560a:	e000      	b.n	801560e <tcp_input+0x46a>
            break;
 801560c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d014      	beq.n	801563e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015614:	69bb      	ldr	r3, [r7, #24]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d00a      	beq.n	8015630 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	68da      	ldr	r2, [r3, #12]
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015622:	4b32      	ldr	r3, [pc, #200]	; (80156ec <tcp_input+0x548>)
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801562a:	4a30      	ldr	r2, [pc, #192]	; (80156ec <tcp_input+0x548>)
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015630:	6978      	ldr	r0, [r7, #20]
 8015632:	f000 f9ff 	bl	8015a34 <tcp_listen_input>
      }
      pbuf_free(p);
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f7fd fe66 	bl	8013308 <pbuf_free>
      return;
 801563c:	e199      	b.n	8015972 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801563e:	69fb      	ldr	r3, [r7, #28]
 8015640:	2b00      	cmp	r3, #0
 8015642:	f000 8160 	beq.w	8015906 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015646:	4b2a      	ldr	r3, [pc, #168]	; (80156f0 <tcp_input+0x54c>)
 8015648:	2200      	movs	r2, #0
 801564a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	891a      	ldrh	r2, [r3, #8]
 8015650:	4b27      	ldr	r3, [pc, #156]	; (80156f0 <tcp_input+0x54c>)
 8015652:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015654:	4a26      	ldr	r2, [pc, #152]	; (80156f0 <tcp_input+0x54c>)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801565a:	4b1b      	ldr	r3, [pc, #108]	; (80156c8 <tcp_input+0x524>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	4a24      	ldr	r2, [pc, #144]	; (80156f0 <tcp_input+0x54c>)
 8015660:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015662:	4b24      	ldr	r3, [pc, #144]	; (80156f4 <tcp_input+0x550>)
 8015664:	2200      	movs	r2, #0
 8015666:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015668:	4b23      	ldr	r3, [pc, #140]	; (80156f8 <tcp_input+0x554>)
 801566a:	2200      	movs	r2, #0
 801566c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801566e:	4b23      	ldr	r3, [pc, #140]	; (80156fc <tcp_input+0x558>)
 8015670:	2200      	movs	r2, #0
 8015672:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015674:	4b22      	ldr	r3, [pc, #136]	; (8015700 <tcp_input+0x55c>)
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	f003 0308 	and.w	r3, r3, #8
 801567c:	2b00      	cmp	r3, #0
 801567e:	d006      	beq.n	801568e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	7b5b      	ldrb	r3, [r3, #13]
 8015684:	f043 0301 	orr.w	r3, r3, #1
 8015688:	b2da      	uxtb	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015692:	2b00      	cmp	r3, #0
 8015694:	d038      	beq.n	8015708 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015696:	69f8      	ldr	r0, [r7, #28]
 8015698:	f7ff f940 	bl	801491c <tcp_process_refused_data>
 801569c:	4603      	mov	r3, r0
 801569e:	f113 0f0d 	cmn.w	r3, #13
 80156a2:	d007      	beq.n	80156b4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80156a4:	69fb      	ldr	r3, [r7, #28]
 80156a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d02d      	beq.n	8015708 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80156ac:	4b15      	ldr	r3, [pc, #84]	; (8015704 <tcp_input+0x560>)
 80156ae:	881b      	ldrh	r3, [r3, #0]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d029      	beq.n	8015708 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f040 8104 	bne.w	80158c6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80156be:	69f8      	ldr	r0, [r7, #28]
 80156c0:	f003 f9ce 	bl	8018a60 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80156c4:	e0ff      	b.n	80158c6 <tcp_input+0x722>
 80156c6:	bf00      	nop
 80156c8:	24004934 	.word	0x24004934
 80156cc:	24005960 	.word	0x24005960
 80156d0:	0801f1d8 	.word	0x0801f1d8
 80156d4:	0801f320 	.word	0x0801f320
 80156d8:	0801f240 	.word	0x0801f240
 80156dc:	24008a48 	.word	0x24008a48
 80156e0:	0801f34c 	.word	0x0801f34c
 80156e4:	24008a58 	.word	0x24008a58
 80156e8:	0801f378 	.word	0x0801f378
 80156ec:	24008a50 	.word	0x24008a50
 80156f0:	24004924 	.word	0x24004924
 80156f4:	24004954 	.word	0x24004954
 80156f8:	24004951 	.word	0x24004951
 80156fc:	2400494c 	.word	0x2400494c
 8015700:	24004950 	.word	0x24004950
 8015704:	2400494e 	.word	0x2400494e
      }
    }
    tcp_input_pcb = pcb;
 8015708:	4a9b      	ldr	r2, [pc, #620]	; (8015978 <tcp_input+0x7d4>)
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801570e:	69f8      	ldr	r0, [r7, #28]
 8015710:	f000 fb0a 	bl	8015d28 <tcp_process>
 8015714:	4603      	mov	r3, r0
 8015716:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801571c:	f113 0f0d 	cmn.w	r3, #13
 8015720:	f000 80d3 	beq.w	80158ca <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8015724:	4b95      	ldr	r3, [pc, #596]	; (801597c <tcp_input+0x7d8>)
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	f003 0308 	and.w	r3, r3, #8
 801572c:	2b00      	cmp	r3, #0
 801572e:	d015      	beq.n	801575c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015736:	2b00      	cmp	r3, #0
 8015738:	d008      	beq.n	801574c <tcp_input+0x5a8>
 801573a:	69fb      	ldr	r3, [r7, #28]
 801573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015740:	69fa      	ldr	r2, [r7, #28]
 8015742:	6912      	ldr	r2, [r2, #16]
 8015744:	f06f 010d 	mvn.w	r1, #13
 8015748:	4610      	mov	r0, r2
 801574a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801574c:	69f9      	ldr	r1, [r7, #28]
 801574e:	488c      	ldr	r0, [pc, #560]	; (8015980 <tcp_input+0x7dc>)
 8015750:	f7ff fbb0 	bl	8014eb4 <tcp_pcb_remove>
        tcp_free(pcb);
 8015754:	69f8      	ldr	r0, [r7, #28]
 8015756:	f7fe f9a9 	bl	8013aac <tcp_free>
 801575a:	e0c1      	b.n	80158e0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801575c:	2300      	movs	r3, #0
 801575e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015760:	4b88      	ldr	r3, [pc, #544]	; (8015984 <tcp_input+0x7e0>)
 8015762:	881b      	ldrh	r3, [r3, #0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d01d      	beq.n	80157a4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015768:	4b86      	ldr	r3, [pc, #536]	; (8015984 <tcp_input+0x7e0>)
 801576a:	881b      	ldrh	r3, [r3, #0]
 801576c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015774:	2b00      	cmp	r3, #0
 8015776:	d00a      	beq.n	801578e <tcp_input+0x5ea>
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801577e:	69fa      	ldr	r2, [r7, #28]
 8015780:	6910      	ldr	r0, [r2, #16]
 8015782:	89fa      	ldrh	r2, [r7, #14]
 8015784:	69f9      	ldr	r1, [r7, #28]
 8015786:	4798      	blx	r3
 8015788:	4603      	mov	r3, r0
 801578a:	74fb      	strb	r3, [r7, #19]
 801578c:	e001      	b.n	8015792 <tcp_input+0x5ee>
 801578e:	2300      	movs	r3, #0
 8015790:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015792:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015796:	f113 0f0d 	cmn.w	r3, #13
 801579a:	f000 8098 	beq.w	80158ce <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801579e:	4b79      	ldr	r3, [pc, #484]	; (8015984 <tcp_input+0x7e0>)
 80157a0:	2200      	movs	r2, #0
 80157a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80157a4:	69f8      	ldr	r0, [r7, #28]
 80157a6:	f000 f905 	bl	80159b4 <tcp_input_delayed_close>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f040 8090 	bne.w	80158d2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80157b2:	4b75      	ldr	r3, [pc, #468]	; (8015988 <tcp_input+0x7e4>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d041      	beq.n	801583e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80157ba:	69fb      	ldr	r3, [r7, #28]
 80157bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d006      	beq.n	80157d0 <tcp_input+0x62c>
 80157c2:	4b72      	ldr	r3, [pc, #456]	; (801598c <tcp_input+0x7e8>)
 80157c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80157c8:	4971      	ldr	r1, [pc, #452]	; (8015990 <tcp_input+0x7ec>)
 80157ca:	4872      	ldr	r0, [pc, #456]	; (8015994 <tcp_input+0x7f0>)
 80157cc:	f005 fd20 	bl	801b210 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	8b5b      	ldrh	r3, [r3, #26]
 80157d4:	f003 0310 	and.w	r3, r3, #16
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d008      	beq.n	80157ee <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80157dc:	4b6a      	ldr	r3, [pc, #424]	; (8015988 <tcp_input+0x7e4>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7fd fd91 	bl	8013308 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80157e6:	69f8      	ldr	r0, [r7, #28]
 80157e8:	f7fe fc40 	bl	801406c <tcp_abort>
            goto aborted;
 80157ec:	e078      	b.n	80158e0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d00c      	beq.n	8015812 <tcp_input+0x66e>
 80157f8:	69fb      	ldr	r3, [r7, #28]
 80157fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	6918      	ldr	r0, [r3, #16]
 8015802:	4b61      	ldr	r3, [pc, #388]	; (8015988 <tcp_input+0x7e4>)
 8015804:	681a      	ldr	r2, [r3, #0]
 8015806:	2300      	movs	r3, #0
 8015808:	69f9      	ldr	r1, [r7, #28]
 801580a:	47a0      	blx	r4
 801580c:	4603      	mov	r3, r0
 801580e:	74fb      	strb	r3, [r7, #19]
 8015810:	e008      	b.n	8015824 <tcp_input+0x680>
 8015812:	4b5d      	ldr	r3, [pc, #372]	; (8015988 <tcp_input+0x7e4>)
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	2300      	movs	r3, #0
 8015818:	69f9      	ldr	r1, [r7, #28]
 801581a:	2000      	movs	r0, #0
 801581c:	f7ff f952 	bl	8014ac4 <tcp_recv_null>
 8015820:	4603      	mov	r3, r0
 8015822:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015828:	f113 0f0d 	cmn.w	r3, #13
 801582c:	d053      	beq.n	80158d6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801582e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d003      	beq.n	801583e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015836:	4b54      	ldr	r3, [pc, #336]	; (8015988 <tcp_input+0x7e4>)
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801583e:	4b4f      	ldr	r3, [pc, #316]	; (801597c <tcp_input+0x7d8>)
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	f003 0320 	and.w	r3, r3, #32
 8015846:	2b00      	cmp	r3, #0
 8015848:	d030      	beq.n	80158ac <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801584e:	2b00      	cmp	r3, #0
 8015850:	d009      	beq.n	8015866 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015852:	69fb      	ldr	r3, [r7, #28]
 8015854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015856:	7b5a      	ldrb	r2, [r3, #13]
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801585c:	f042 0220 	orr.w	r2, r2, #32
 8015860:	b2d2      	uxtb	r2, r2
 8015862:	735a      	strb	r2, [r3, #13]
 8015864:	e022      	b.n	80158ac <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015866:	69fb      	ldr	r3, [r7, #28]
 8015868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801586a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801586e:	d005      	beq.n	801587c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8015870:	69fb      	ldr	r3, [r7, #28]
 8015872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015874:	3301      	adds	r3, #1
 8015876:	b29a      	uxth	r2, r3
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015882:	2b00      	cmp	r3, #0
 8015884:	d00b      	beq.n	801589e <tcp_input+0x6fa>
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	6918      	ldr	r0, [r3, #16]
 8015890:	2300      	movs	r3, #0
 8015892:	2200      	movs	r2, #0
 8015894:	69f9      	ldr	r1, [r7, #28]
 8015896:	47a0      	blx	r4
 8015898:	4603      	mov	r3, r0
 801589a:	74fb      	strb	r3, [r7, #19]
 801589c:	e001      	b.n	80158a2 <tcp_input+0x6fe>
 801589e:	2300      	movs	r3, #0
 80158a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80158a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158a6:	f113 0f0d 	cmn.w	r3, #13
 80158aa:	d016      	beq.n	80158da <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80158ac:	4b32      	ldr	r3, [pc, #200]	; (8015978 <tcp_input+0x7d4>)
 80158ae:	2200      	movs	r2, #0
 80158b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80158b2:	69f8      	ldr	r0, [r7, #28]
 80158b4:	f000 f87e 	bl	80159b4 <tcp_input_delayed_close>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d10f      	bne.n	80158de <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80158be:	69f8      	ldr	r0, [r7, #28]
 80158c0:	f002 fab6 	bl	8017e30 <tcp_output>
 80158c4:	e00c      	b.n	80158e0 <tcp_input+0x73c>
        goto aborted;
 80158c6:	bf00      	nop
 80158c8:	e00a      	b.n	80158e0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80158ca:	bf00      	nop
 80158cc:	e008      	b.n	80158e0 <tcp_input+0x73c>
              goto aborted;
 80158ce:	bf00      	nop
 80158d0:	e006      	b.n	80158e0 <tcp_input+0x73c>
          goto aborted;
 80158d2:	bf00      	nop
 80158d4:	e004      	b.n	80158e0 <tcp_input+0x73c>
            goto aborted;
 80158d6:	bf00      	nop
 80158d8:	e002      	b.n	80158e0 <tcp_input+0x73c>
              goto aborted;
 80158da:	bf00      	nop
 80158dc:	e000      	b.n	80158e0 <tcp_input+0x73c>
          goto aborted;
 80158de:	bf00      	nop
    tcp_input_pcb = NULL;
 80158e0:	4b25      	ldr	r3, [pc, #148]	; (8015978 <tcp_input+0x7d4>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80158e6:	4b28      	ldr	r3, [pc, #160]	; (8015988 <tcp_input+0x7e4>)
 80158e8:	2200      	movs	r2, #0
 80158ea:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80158ec:	4b2a      	ldr	r3, [pc, #168]	; (8015998 <tcp_input+0x7f4>)
 80158ee:	685b      	ldr	r3, [r3, #4]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d03d      	beq.n	8015970 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80158f4:	4b28      	ldr	r3, [pc, #160]	; (8015998 <tcp_input+0x7f4>)
 80158f6:	685b      	ldr	r3, [r3, #4]
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7fd fd05 	bl	8013308 <pbuf_free>
      inseg.p = NULL;
 80158fe:	4b26      	ldr	r3, [pc, #152]	; (8015998 <tcp_input+0x7f4>)
 8015900:	2200      	movs	r2, #0
 8015902:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015904:	e034      	b.n	8015970 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015906:	4b25      	ldr	r3, [pc, #148]	; (801599c <tcp_input+0x7f8>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	899b      	ldrh	r3, [r3, #12]
 801590c:	b29b      	uxth	r3, r3
 801590e:	4618      	mov	r0, r3
 8015910:	f7f7 fe92 	bl	800d638 <lwip_htons>
 8015914:	4603      	mov	r3, r0
 8015916:	b2db      	uxtb	r3, r3
 8015918:	f003 0304 	and.w	r3, r3, #4
 801591c:	2b00      	cmp	r3, #0
 801591e:	d118      	bne.n	8015952 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015920:	4b1f      	ldr	r3, [pc, #124]	; (80159a0 <tcp_input+0x7fc>)
 8015922:	6819      	ldr	r1, [r3, #0]
 8015924:	4b1f      	ldr	r3, [pc, #124]	; (80159a4 <tcp_input+0x800>)
 8015926:	881b      	ldrh	r3, [r3, #0]
 8015928:	461a      	mov	r2, r3
 801592a:	4b1f      	ldr	r3, [pc, #124]	; (80159a8 <tcp_input+0x804>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015930:	4b1a      	ldr	r3, [pc, #104]	; (801599c <tcp_input+0x7f8>)
 8015932:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015934:	885b      	ldrh	r3, [r3, #2]
 8015936:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015938:	4a18      	ldr	r2, [pc, #96]	; (801599c <tcp_input+0x7f8>)
 801593a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801593c:	8812      	ldrh	r2, [r2, #0]
 801593e:	b292      	uxth	r2, r2
 8015940:	9202      	str	r2, [sp, #8]
 8015942:	9301      	str	r3, [sp, #4]
 8015944:	4b19      	ldr	r3, [pc, #100]	; (80159ac <tcp_input+0x808>)
 8015946:	9300      	str	r3, [sp, #0]
 8015948:	4b19      	ldr	r3, [pc, #100]	; (80159b0 <tcp_input+0x80c>)
 801594a:	4602      	mov	r2, r0
 801594c:	2000      	movs	r0, #0
 801594e:	f003 f835 	bl	80189bc <tcp_rst>
    pbuf_free(p);
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7fd fcd8 	bl	8013308 <pbuf_free>
  return;
 8015958:	e00a      	b.n	8015970 <tcp_input+0x7cc>
    goto dropped;
 801595a:	bf00      	nop
 801595c:	e004      	b.n	8015968 <tcp_input+0x7c4>
dropped:
 801595e:	bf00      	nop
 8015960:	e002      	b.n	8015968 <tcp_input+0x7c4>
      goto dropped;
 8015962:	bf00      	nop
 8015964:	e000      	b.n	8015968 <tcp_input+0x7c4>
      goto dropped;
 8015966:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f7fd fccd 	bl	8013308 <pbuf_free>
 801596e:	e000      	b.n	8015972 <tcp_input+0x7ce>
  return;
 8015970:	bf00      	nop
}
 8015972:	3724      	adds	r7, #36	; 0x24
 8015974:	46bd      	mov	sp, r7
 8015976:	bd90      	pop	{r4, r7, pc}
 8015978:	24008a5c 	.word	0x24008a5c
 801597c:	24004951 	.word	0x24004951
 8015980:	24008a48 	.word	0x24008a48
 8015984:	2400494c 	.word	0x2400494c
 8015988:	24004954 	.word	0x24004954
 801598c:	0801f1d8 	.word	0x0801f1d8
 8015990:	0801f3a8 	.word	0x0801f3a8
 8015994:	0801f240 	.word	0x0801f240
 8015998:	24004924 	.word	0x24004924
 801599c:	24004934 	.word	0x24004934
 80159a0:	24004948 	.word	0x24004948
 80159a4:	2400494e 	.word	0x2400494e
 80159a8:	24004944 	.word	0x24004944
 80159ac:	24005970 	.word	0x24005970
 80159b0:	24005974 	.word	0x24005974

080159b4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d106      	bne.n	80159d0 <tcp_input_delayed_close+0x1c>
 80159c2:	4b17      	ldr	r3, [pc, #92]	; (8015a20 <tcp_input_delayed_close+0x6c>)
 80159c4:	f240 225a 	movw	r2, #602	; 0x25a
 80159c8:	4916      	ldr	r1, [pc, #88]	; (8015a24 <tcp_input_delayed_close+0x70>)
 80159ca:	4817      	ldr	r0, [pc, #92]	; (8015a28 <tcp_input_delayed_close+0x74>)
 80159cc:	f005 fc20 	bl	801b210 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80159d0:	4b16      	ldr	r3, [pc, #88]	; (8015a2c <tcp_input_delayed_close+0x78>)
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	f003 0310 	and.w	r3, r3, #16
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d01c      	beq.n	8015a16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	8b5b      	ldrh	r3, [r3, #26]
 80159e0:	f003 0310 	and.w	r3, r3, #16
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10d      	bne.n	8015a04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d008      	beq.n	8015a04 <tcp_input_delayed_close+0x50>
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	6912      	ldr	r2, [r2, #16]
 80159fc:	f06f 010e 	mvn.w	r1, #14
 8015a00:	4610      	mov	r0, r2
 8015a02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015a04:	6879      	ldr	r1, [r7, #4]
 8015a06:	480a      	ldr	r0, [pc, #40]	; (8015a30 <tcp_input_delayed_close+0x7c>)
 8015a08:	f7ff fa54 	bl	8014eb4 <tcp_pcb_remove>
    tcp_free(pcb);
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f7fe f84d 	bl	8013aac <tcp_free>
    return 1;
 8015a12:	2301      	movs	r3, #1
 8015a14:	e000      	b.n	8015a18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015a16:	2300      	movs	r3, #0
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	0801f1d8 	.word	0x0801f1d8
 8015a24:	0801f3c4 	.word	0x0801f3c4
 8015a28:	0801f240 	.word	0x0801f240
 8015a2c:	24004951 	.word	0x24004951
 8015a30:	24008a48 	.word	0x24008a48

08015a34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015a34:	b590      	push	{r4, r7, lr}
 8015a36:	b08b      	sub	sp, #44	; 0x2c
 8015a38:	af04      	add	r7, sp, #16
 8015a3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015a3c:	4b6f      	ldr	r3, [pc, #444]	; (8015bfc <tcp_listen_input+0x1c8>)
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	f003 0304 	and.w	r3, r3, #4
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	f040 80d3 	bne.w	8015bf0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d106      	bne.n	8015a5e <tcp_listen_input+0x2a>
 8015a50:	4b6b      	ldr	r3, [pc, #428]	; (8015c00 <tcp_listen_input+0x1cc>)
 8015a52:	f240 2281 	movw	r2, #641	; 0x281
 8015a56:	496b      	ldr	r1, [pc, #428]	; (8015c04 <tcp_listen_input+0x1d0>)
 8015a58:	486b      	ldr	r0, [pc, #428]	; (8015c08 <tcp_listen_input+0x1d4>)
 8015a5a:	f005 fbd9 	bl	801b210 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015a5e:	4b67      	ldr	r3, [pc, #412]	; (8015bfc <tcp_listen_input+0x1c8>)
 8015a60:	781b      	ldrb	r3, [r3, #0]
 8015a62:	f003 0310 	and.w	r3, r3, #16
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d019      	beq.n	8015a9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a6a:	4b68      	ldr	r3, [pc, #416]	; (8015c0c <tcp_listen_input+0x1d8>)
 8015a6c:	6819      	ldr	r1, [r3, #0]
 8015a6e:	4b68      	ldr	r3, [pc, #416]	; (8015c10 <tcp_listen_input+0x1dc>)
 8015a70:	881b      	ldrh	r3, [r3, #0]
 8015a72:	461a      	mov	r2, r3
 8015a74:	4b67      	ldr	r3, [pc, #412]	; (8015c14 <tcp_listen_input+0x1e0>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a7a:	4b67      	ldr	r3, [pc, #412]	; (8015c18 <tcp_listen_input+0x1e4>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a7e:	885b      	ldrh	r3, [r3, #2]
 8015a80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a82:	4a65      	ldr	r2, [pc, #404]	; (8015c18 <tcp_listen_input+0x1e4>)
 8015a84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a86:	8812      	ldrh	r2, [r2, #0]
 8015a88:	b292      	uxth	r2, r2
 8015a8a:	9202      	str	r2, [sp, #8]
 8015a8c:	9301      	str	r3, [sp, #4]
 8015a8e:	4b63      	ldr	r3, [pc, #396]	; (8015c1c <tcp_listen_input+0x1e8>)
 8015a90:	9300      	str	r3, [sp, #0]
 8015a92:	4b63      	ldr	r3, [pc, #396]	; (8015c20 <tcp_listen_input+0x1ec>)
 8015a94:	4602      	mov	r2, r0
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f002 ff90 	bl	80189bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015a9c:	e0aa      	b.n	8015bf4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8015a9e:	4b57      	ldr	r3, [pc, #348]	; (8015bfc <tcp_listen_input+0x1c8>)
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	f003 0302 	and.w	r3, r3, #2
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f000 80a4 	beq.w	8015bf4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	7d5b      	ldrb	r3, [r3, #21]
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7ff f92b 	bl	8014d0c <tcp_alloc>
 8015ab6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d111      	bne.n	8015ae2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	699b      	ldr	r3, [r3, #24]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d00a      	beq.n	8015adc <tcp_listen_input+0xa8>
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	699b      	ldr	r3, [r3, #24]
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	6910      	ldr	r0, [r2, #16]
 8015ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ad2:	2100      	movs	r1, #0
 8015ad4:	4798      	blx	r3
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	73bb      	strb	r3, [r7, #14]
      return;
 8015ada:	e08c      	b.n	8015bf6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015adc:	23f0      	movs	r3, #240	; 0xf0
 8015ade:	73bb      	strb	r3, [r7, #14]
      return;
 8015ae0:	e089      	b.n	8015bf6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015ae2:	4b50      	ldr	r3, [pc, #320]	; (8015c24 <tcp_listen_input+0x1f0>)
 8015ae4:	695a      	ldr	r2, [r3, #20]
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015aea:	4b4e      	ldr	r3, [pc, #312]	; (8015c24 <tcp_listen_input+0x1f0>)
 8015aec:	691a      	ldr	r2, [r3, #16]
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	8ada      	ldrh	r2, [r3, #22]
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015afa:	4b47      	ldr	r3, [pc, #284]	; (8015c18 <tcp_listen_input+0x1e4>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	b29a      	uxth	r2, r3
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	2203      	movs	r2, #3
 8015b0a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015b0c:	4b41      	ldr	r3, [pc, #260]	; (8015c14 <tcp_listen_input+0x1e0>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	1c5a      	adds	r2, r3, #1
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015b1e:	6978      	ldr	r0, [r7, #20]
 8015b20:	f7ff fa5c 	bl	8014fdc <tcp_next_iss>
 8015b24:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	693a      	ldr	r2, [r7, #16]
 8015b2a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	693a      	ldr	r2, [r7, #16]
 8015b30:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	693a      	ldr	r2, [r7, #16]
 8015b36:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	693a      	ldr	r2, [r7, #16]
 8015b3c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015b3e:	4b35      	ldr	r3, [pc, #212]	; (8015c14 <tcp_listen_input+0x1e0>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	1e5a      	subs	r2, r3, #1
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	691a      	ldr	r2, [r3, #16]
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	7a5b      	ldrb	r3, [r3, #9]
 8015b5a:	f003 030c 	and.w	r3, r3, #12
 8015b5e:	b2da      	uxtb	r2, r3
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	7a1a      	ldrb	r2, [r3, #8]
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015b6c:	4b2e      	ldr	r3, [pc, #184]	; (8015c28 <tcp_listen_input+0x1f4>)
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	60da      	str	r2, [r3, #12]
 8015b74:	4a2c      	ldr	r2, [pc, #176]	; (8015c28 <tcp_listen_input+0x1f4>)
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	6013      	str	r3, [r2, #0]
 8015b7a:	f003 fa7f 	bl	801907c <tcp_timer_needed>
 8015b7e:	4b2b      	ldr	r3, [pc, #172]	; (8015c2c <tcp_listen_input+0x1f8>)
 8015b80:	2201      	movs	r2, #1
 8015b82:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015b84:	6978      	ldr	r0, [r7, #20]
 8015b86:	f001 fd8f 	bl	80176a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015b8a:	4b23      	ldr	r3, [pc, #140]	; (8015c18 <tcp_listen_input+0x1e4>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	89db      	ldrh	r3, [r3, #14]
 8015b90:	b29a      	uxth	r2, r3
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	3304      	adds	r3, #4
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7fa fec3 	bl	8010938 <ip4_route>
 8015bb2:	4601      	mov	r1, r0
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	3304      	adds	r3, #4
 8015bb8:	461a      	mov	r2, r3
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f7ff fa34 	bl	8015028 <tcp_eff_send_mss_netif>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015bc8:	2112      	movs	r1, #18
 8015bca:	6978      	ldr	r0, [r7, #20]
 8015bcc:	f002 f842 	bl	8017c54 <tcp_enqueue_flags>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d004      	beq.n	8015be6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015bdc:	2100      	movs	r1, #0
 8015bde:	6978      	ldr	r0, [r7, #20]
 8015be0:	f7fe f986 	bl	8013ef0 <tcp_abandon>
      return;
 8015be4:	e007      	b.n	8015bf6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8015be6:	6978      	ldr	r0, [r7, #20]
 8015be8:	f002 f922 	bl	8017e30 <tcp_output>
  return;
 8015bec:	bf00      	nop
 8015bee:	e001      	b.n	8015bf4 <tcp_listen_input+0x1c0>
    return;
 8015bf0:	bf00      	nop
 8015bf2:	e000      	b.n	8015bf6 <tcp_listen_input+0x1c2>
  return;
 8015bf4:	bf00      	nop
}
 8015bf6:	371c      	adds	r7, #28
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd90      	pop	{r4, r7, pc}
 8015bfc:	24004950 	.word	0x24004950
 8015c00:	0801f1d8 	.word	0x0801f1d8
 8015c04:	0801f3ec 	.word	0x0801f3ec
 8015c08:	0801f240 	.word	0x0801f240
 8015c0c:	24004948 	.word	0x24004948
 8015c10:	2400494e 	.word	0x2400494e
 8015c14:	24004944 	.word	0x24004944
 8015c18:	24004934 	.word	0x24004934
 8015c1c:	24005970 	.word	0x24005970
 8015c20:	24005974 	.word	0x24005974
 8015c24:	24005960 	.word	0x24005960
 8015c28:	24008a48 	.word	0x24008a48
 8015c2c:	24008a44 	.word	0x24008a44

08015c30 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b086      	sub	sp, #24
 8015c34:	af04      	add	r7, sp, #16
 8015c36:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015c38:	4b30      	ldr	r3, [pc, #192]	; (8015cfc <tcp_timewait_input+0xcc>)
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	f003 0304 	and.w	r3, r3, #4
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d154      	bne.n	8015cee <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d106      	bne.n	8015c58 <tcp_timewait_input+0x28>
 8015c4a:	4b2d      	ldr	r3, [pc, #180]	; (8015d00 <tcp_timewait_input+0xd0>)
 8015c4c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015c50:	492c      	ldr	r1, [pc, #176]	; (8015d04 <tcp_timewait_input+0xd4>)
 8015c52:	482d      	ldr	r0, [pc, #180]	; (8015d08 <tcp_timewait_input+0xd8>)
 8015c54:	f005 fadc 	bl	801b210 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015c58:	4b28      	ldr	r3, [pc, #160]	; (8015cfc <tcp_timewait_input+0xcc>)
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	f003 0302 	and.w	r3, r3, #2
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d02a      	beq.n	8015cba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015c64:	4b29      	ldr	r3, [pc, #164]	; (8015d0c <tcp_timewait_input+0xdc>)
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6c:	1ad3      	subs	r3, r2, r3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	db2d      	blt.n	8015cce <tcp_timewait_input+0x9e>
 8015c72:	4b26      	ldr	r3, [pc, #152]	; (8015d0c <tcp_timewait_input+0xdc>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c7a:	6879      	ldr	r1, [r7, #4]
 8015c7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c7e:	440b      	add	r3, r1
 8015c80:	1ad3      	subs	r3, r2, r3
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	dc23      	bgt.n	8015cce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c86:	4b22      	ldr	r3, [pc, #136]	; (8015d10 <tcp_timewait_input+0xe0>)
 8015c88:	6819      	ldr	r1, [r3, #0]
 8015c8a:	4b22      	ldr	r3, [pc, #136]	; (8015d14 <tcp_timewait_input+0xe4>)
 8015c8c:	881b      	ldrh	r3, [r3, #0]
 8015c8e:	461a      	mov	r2, r3
 8015c90:	4b1e      	ldr	r3, [pc, #120]	; (8015d0c <tcp_timewait_input+0xdc>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c96:	4b20      	ldr	r3, [pc, #128]	; (8015d18 <tcp_timewait_input+0xe8>)
 8015c98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c9a:	885b      	ldrh	r3, [r3, #2]
 8015c9c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c9e:	4a1e      	ldr	r2, [pc, #120]	; (8015d18 <tcp_timewait_input+0xe8>)
 8015ca0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ca2:	8812      	ldrh	r2, [r2, #0]
 8015ca4:	b292      	uxth	r2, r2
 8015ca6:	9202      	str	r2, [sp, #8]
 8015ca8:	9301      	str	r3, [sp, #4]
 8015caa:	4b1c      	ldr	r3, [pc, #112]	; (8015d1c <tcp_timewait_input+0xec>)
 8015cac:	9300      	str	r3, [sp, #0]
 8015cae:	4b1c      	ldr	r3, [pc, #112]	; (8015d20 <tcp_timewait_input+0xf0>)
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f002 fe82 	bl	80189bc <tcp_rst>
      return;
 8015cb8:	e01c      	b.n	8015cf4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8015cba:	4b10      	ldr	r3, [pc, #64]	; (8015cfc <tcp_timewait_input+0xcc>)
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	f003 0301 	and.w	r3, r3, #1
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d003      	beq.n	8015cce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015cc6:	4b17      	ldr	r3, [pc, #92]	; (8015d24 <tcp_timewait_input+0xf4>)
 8015cc8:	681a      	ldr	r2, [r3, #0]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015cce:	4b11      	ldr	r3, [pc, #68]	; (8015d14 <tcp_timewait_input+0xe4>)
 8015cd0:	881b      	ldrh	r3, [r3, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d00d      	beq.n	8015cf2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	8b5b      	ldrh	r3, [r3, #26]
 8015cda:	f043 0302 	orr.w	r3, r3, #2
 8015cde:	b29a      	uxth	r2, r3
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f002 f8a3 	bl	8017e30 <tcp_output>
  }
  return;
 8015cea:	bf00      	nop
 8015cec:	e001      	b.n	8015cf2 <tcp_timewait_input+0xc2>
    return;
 8015cee:	bf00      	nop
 8015cf0:	e000      	b.n	8015cf4 <tcp_timewait_input+0xc4>
  return;
 8015cf2:	bf00      	nop
}
 8015cf4:	3708      	adds	r7, #8
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	24004950 	.word	0x24004950
 8015d00:	0801f1d8 	.word	0x0801f1d8
 8015d04:	0801f40c 	.word	0x0801f40c
 8015d08:	0801f240 	.word	0x0801f240
 8015d0c:	24004944 	.word	0x24004944
 8015d10:	24004948 	.word	0x24004948
 8015d14:	2400494e 	.word	0x2400494e
 8015d18:	24004934 	.word	0x24004934
 8015d1c:	24005970 	.word	0x24005970
 8015d20:	24005974 	.word	0x24005974
 8015d24:	24008a4c 	.word	0x24008a4c

08015d28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015d28:	b590      	push	{r4, r7, lr}
 8015d2a:	b08d      	sub	sp, #52	; 0x34
 8015d2c:	af04      	add	r7, sp, #16
 8015d2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015d30:	2300      	movs	r3, #0
 8015d32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015d34:	2300      	movs	r3, #0
 8015d36:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d106      	bne.n	8015d4c <tcp_process+0x24>
 8015d3e:	4ba5      	ldr	r3, [pc, #660]	; (8015fd4 <tcp_process+0x2ac>)
 8015d40:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015d44:	49a4      	ldr	r1, [pc, #656]	; (8015fd8 <tcp_process+0x2b0>)
 8015d46:	48a5      	ldr	r0, [pc, #660]	; (8015fdc <tcp_process+0x2b4>)
 8015d48:	f005 fa62 	bl	801b210 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015d4c:	4ba4      	ldr	r3, [pc, #656]	; (8015fe0 <tcp_process+0x2b8>)
 8015d4e:	781b      	ldrb	r3, [r3, #0]
 8015d50:	f003 0304 	and.w	r3, r3, #4
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d04e      	beq.n	8015df6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	7d1b      	ldrb	r3, [r3, #20]
 8015d5c:	2b02      	cmp	r3, #2
 8015d5e:	d108      	bne.n	8015d72 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015d64:	4b9f      	ldr	r3, [pc, #636]	; (8015fe4 <tcp_process+0x2bc>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d123      	bne.n	8015db4 <tcp_process+0x8c>
        acceptable = 1;
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	76fb      	strb	r3, [r7, #27]
 8015d70:	e020      	b.n	8015db4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d76:	4b9c      	ldr	r3, [pc, #624]	; (8015fe8 <tcp_process+0x2c0>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d102      	bne.n	8015d84 <tcp_process+0x5c>
        acceptable = 1;
 8015d7e:	2301      	movs	r3, #1
 8015d80:	76fb      	strb	r3, [r7, #27]
 8015d82:	e017      	b.n	8015db4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015d84:	4b98      	ldr	r3, [pc, #608]	; (8015fe8 <tcp_process+0x2c0>)
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d8c:	1ad3      	subs	r3, r2, r3
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	db10      	blt.n	8015db4 <tcp_process+0x8c>
 8015d92:	4b95      	ldr	r3, [pc, #596]	; (8015fe8 <tcp_process+0x2c0>)
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d9a:	6879      	ldr	r1, [r7, #4]
 8015d9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d9e:	440b      	add	r3, r1
 8015da0:	1ad3      	subs	r3, r2, r3
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	dc06      	bgt.n	8015db4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	8b5b      	ldrh	r3, [r3, #26]
 8015daa:	f043 0302 	orr.w	r3, r3, #2
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015db4:	7efb      	ldrb	r3, [r7, #27]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d01b      	beq.n	8015df2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7d1b      	ldrb	r3, [r3, #20]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d106      	bne.n	8015dd0 <tcp_process+0xa8>
 8015dc2:	4b84      	ldr	r3, [pc, #528]	; (8015fd4 <tcp_process+0x2ac>)
 8015dc4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015dc8:	4988      	ldr	r1, [pc, #544]	; (8015fec <tcp_process+0x2c4>)
 8015dca:	4884      	ldr	r0, [pc, #528]	; (8015fdc <tcp_process+0x2b4>)
 8015dcc:	f005 fa20 	bl	801b210 <iprintf>
      recv_flags |= TF_RESET;
 8015dd0:	4b87      	ldr	r3, [pc, #540]	; (8015ff0 <tcp_process+0x2c8>)
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	f043 0308 	orr.w	r3, r3, #8
 8015dd8:	b2da      	uxtb	r2, r3
 8015dda:	4b85      	ldr	r3, [pc, #532]	; (8015ff0 <tcp_process+0x2c8>)
 8015ddc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	8b5b      	ldrh	r3, [r3, #26]
 8015de2:	f023 0301 	bic.w	r3, r3, #1
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015dec:	f06f 030d 	mvn.w	r3, #13
 8015df0:	e37a      	b.n	80164e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015df2:	2300      	movs	r3, #0
 8015df4:	e378      	b.n	80164e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015df6:	4b7a      	ldr	r3, [pc, #488]	; (8015fe0 <tcp_process+0x2b8>)
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	f003 0302 	and.w	r3, r3, #2
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d010      	beq.n	8015e24 <tcp_process+0xfc>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	7d1b      	ldrb	r3, [r3, #20]
 8015e06:	2b02      	cmp	r3, #2
 8015e08:	d00c      	beq.n	8015e24 <tcp_process+0xfc>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	7d1b      	ldrb	r3, [r3, #20]
 8015e0e:	2b03      	cmp	r3, #3
 8015e10:	d008      	beq.n	8015e24 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	8b5b      	ldrh	r3, [r3, #26]
 8015e16:	f043 0302 	orr.w	r3, r3, #2
 8015e1a:	b29a      	uxth	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	e361      	b.n	80164e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	8b5b      	ldrh	r3, [r3, #26]
 8015e28:	f003 0310 	and.w	r3, r3, #16
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d103      	bne.n	8015e38 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015e30:	4b70      	ldr	r3, [pc, #448]	; (8015ff4 <tcp_process+0x2cc>)
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2200      	movs	r2, #0
 8015e44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f001 fc2d 	bl	80176a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	7d1b      	ldrb	r3, [r3, #20]
 8015e52:	3b02      	subs	r3, #2
 8015e54:	2b07      	cmp	r3, #7
 8015e56:	f200 8337 	bhi.w	80164c8 <tcp_process+0x7a0>
 8015e5a:	a201      	add	r2, pc, #4	; (adr r2, 8015e60 <tcp_process+0x138>)
 8015e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e60:	08015e81 	.word	0x08015e81
 8015e64:	080160b1 	.word	0x080160b1
 8015e68:	08016229 	.word	0x08016229
 8015e6c:	08016253 	.word	0x08016253
 8015e70:	08016377 	.word	0x08016377
 8015e74:	08016229 	.word	0x08016229
 8015e78:	08016403 	.word	0x08016403
 8015e7c:	08016493 	.word	0x08016493
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015e80:	4b57      	ldr	r3, [pc, #348]	; (8015fe0 <tcp_process+0x2b8>)
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	f003 0310 	and.w	r3, r3, #16
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	f000 80e4 	beq.w	8016056 <tcp_process+0x32e>
 8015e8e:	4b54      	ldr	r3, [pc, #336]	; (8015fe0 <tcp_process+0x2b8>)
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	f003 0302 	and.w	r3, r3, #2
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f000 80dd 	beq.w	8016056 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ea0:	1c5a      	adds	r2, r3, #1
 8015ea2:	4b50      	ldr	r3, [pc, #320]	; (8015fe4 <tcp_process+0x2bc>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	f040 80d5 	bne.w	8016056 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015eac:	4b4e      	ldr	r3, [pc, #312]	; (8015fe8 <tcp_process+0x2c0>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	1c5a      	adds	r2, r3, #1
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015ebe:	4b49      	ldr	r3, [pc, #292]	; (8015fe4 <tcp_process+0x2bc>)
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015ec6:	4b4c      	ldr	r3, [pc, #304]	; (8015ff8 <tcp_process+0x2d0>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	89db      	ldrh	r3, [r3, #14]
 8015ecc:	b29a      	uxth	r2, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015ee0:	4b41      	ldr	r3, [pc, #260]	; (8015fe8 <tcp_process+0x2c0>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	1e5a      	subs	r2, r3, #1
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2204      	movs	r2, #4
 8015eee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3304      	adds	r3, #4
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7fa fd1d 	bl	8010938 <ip4_route>
 8015efe:	4601      	mov	r1, r0
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	3304      	adds	r3, #4
 8015f04:	461a      	mov	r2, r3
 8015f06:	4620      	mov	r0, r4
 8015f08:	f7ff f88e 	bl	8015028 <tcp_eff_send_mss_netif>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	461a      	mov	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f18:	009a      	lsls	r2, r3, #2
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f1e:	005b      	lsls	r3, r3, #1
 8015f20:	f241 111c 	movw	r1, #4380	; 0x111c
 8015f24:	428b      	cmp	r3, r1
 8015f26:	bf38      	it	cc
 8015f28:	460b      	movcc	r3, r1
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d204      	bcs.n	8015f38 <tcp_process+0x210>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f32:	009b      	lsls	r3, r3, #2
 8015f34:	b29b      	uxth	r3, r3
 8015f36:	e00d      	b.n	8015f54 <tcp_process+0x22c>
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f3c:	005b      	lsls	r3, r3, #1
 8015f3e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015f42:	4293      	cmp	r3, r2
 8015f44:	d904      	bls.n	8015f50 <tcp_process+0x228>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f4a:	005b      	lsls	r3, r3, #1
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	e001      	b.n	8015f54 <tcp_process+0x22c>
 8015f50:	f241 131c 	movw	r3, #4380	; 0x111c
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d106      	bne.n	8015f72 <tcp_process+0x24a>
 8015f64:	4b1b      	ldr	r3, [pc, #108]	; (8015fd4 <tcp_process+0x2ac>)
 8015f66:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015f6a:	4924      	ldr	r1, [pc, #144]	; (8015ffc <tcp_process+0x2d4>)
 8015f6c:	481b      	ldr	r0, [pc, #108]	; (8015fdc <tcp_process+0x2b4>)
 8015f6e:	f005 f94f 	bl	801b210 <iprintf>
        --pcb->snd_queuelen;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f78:	3b01      	subs	r3, #1
 8015f7a:	b29a      	uxth	r2, r3
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f86:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d111      	bne.n	8015fb2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f92:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015f94:	69fb      	ldr	r3, [r7, #28]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d106      	bne.n	8015fa8 <tcp_process+0x280>
 8015f9a:	4b0e      	ldr	r3, [pc, #56]	; (8015fd4 <tcp_process+0x2ac>)
 8015f9c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015fa0:	4917      	ldr	r1, [pc, #92]	; (8016000 <tcp_process+0x2d8>)
 8015fa2:	480e      	ldr	r0, [pc, #56]	; (8015fdc <tcp_process+0x2b4>)
 8015fa4:	f005 f934 	bl	801b210 <iprintf>
          pcb->unsent = rseg->next;
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	681a      	ldr	r2, [r3, #0]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	66da      	str	r2, [r3, #108]	; 0x6c
 8015fb0:	e003      	b.n	8015fba <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8015fb2:	69fb      	ldr	r3, [r7, #28]
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015fba:	69f8      	ldr	r0, [r7, #28]
 8015fbc:	f7fe fd3e 	bl	8014a3c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d11d      	bne.n	8016004 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fce:	861a      	strh	r2, [r3, #48]	; 0x30
 8015fd0:	e01f      	b.n	8016012 <tcp_process+0x2ea>
 8015fd2:	bf00      	nop
 8015fd4:	0801f1d8 	.word	0x0801f1d8
 8015fd8:	0801f42c 	.word	0x0801f42c
 8015fdc:	0801f240 	.word	0x0801f240
 8015fe0:	24004950 	.word	0x24004950
 8015fe4:	24004948 	.word	0x24004948
 8015fe8:	24004944 	.word	0x24004944
 8015fec:	0801f448 	.word	0x0801f448
 8015ff0:	24004951 	.word	0x24004951
 8015ff4:	24008a4c 	.word	0x24008a4c
 8015ff8:	24004934 	.word	0x24004934
 8015ffc:	0801f468 	.word	0x0801f468
 8016000:	0801f480 	.word	0x0801f480
        } else {
          pcb->rtime = 0;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2200      	movs	r2, #0
 8016008:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2200      	movs	r2, #0
 801600e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016018:	2b00      	cmp	r3, #0
 801601a:	d00a      	beq.n	8016032 <tcp_process+0x30a>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	6910      	ldr	r0, [r2, #16]
 8016026:	2200      	movs	r2, #0
 8016028:	6879      	ldr	r1, [r7, #4]
 801602a:	4798      	blx	r3
 801602c:	4603      	mov	r3, r0
 801602e:	76bb      	strb	r3, [r7, #26]
 8016030:	e001      	b.n	8016036 <tcp_process+0x30e>
 8016032:	2300      	movs	r3, #0
 8016034:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016036:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801603a:	f113 0f0d 	cmn.w	r3, #13
 801603e:	d102      	bne.n	8016046 <tcp_process+0x31e>
          return ERR_ABRT;
 8016040:	f06f 030c 	mvn.w	r3, #12
 8016044:	e250      	b.n	80164e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	8b5b      	ldrh	r3, [r3, #26]
 801604a:	f043 0302 	orr.w	r3, r3, #2
 801604e:	b29a      	uxth	r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016054:	e23a      	b.n	80164cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016056:	4b9d      	ldr	r3, [pc, #628]	; (80162cc <tcp_process+0x5a4>)
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	f003 0310 	and.w	r3, r3, #16
 801605e:	2b00      	cmp	r3, #0
 8016060:	f000 8234 	beq.w	80164cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016064:	4b9a      	ldr	r3, [pc, #616]	; (80162d0 <tcp_process+0x5a8>)
 8016066:	6819      	ldr	r1, [r3, #0]
 8016068:	4b9a      	ldr	r3, [pc, #616]	; (80162d4 <tcp_process+0x5ac>)
 801606a:	881b      	ldrh	r3, [r3, #0]
 801606c:	461a      	mov	r2, r3
 801606e:	4b9a      	ldr	r3, [pc, #616]	; (80162d8 <tcp_process+0x5b0>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016074:	4b99      	ldr	r3, [pc, #612]	; (80162dc <tcp_process+0x5b4>)
 8016076:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016078:	885b      	ldrh	r3, [r3, #2]
 801607a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801607c:	4a97      	ldr	r2, [pc, #604]	; (80162dc <tcp_process+0x5b4>)
 801607e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016080:	8812      	ldrh	r2, [r2, #0]
 8016082:	b292      	uxth	r2, r2
 8016084:	9202      	str	r2, [sp, #8]
 8016086:	9301      	str	r3, [sp, #4]
 8016088:	4b95      	ldr	r3, [pc, #596]	; (80162e0 <tcp_process+0x5b8>)
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	4b95      	ldr	r3, [pc, #596]	; (80162e4 <tcp_process+0x5bc>)
 801608e:	4602      	mov	r2, r0
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f002 fc93 	bl	80189bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801609c:	2b05      	cmp	r3, #5
 801609e:	f200 8215 	bhi.w	80164cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2200      	movs	r2, #0
 80160a6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f002 fa51 	bl	8018550 <tcp_rexmit_rto>
      break;
 80160ae:	e20d      	b.n	80164cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80160b0:	4b86      	ldr	r3, [pc, #536]	; (80162cc <tcp_process+0x5a4>)
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	f003 0310 	and.w	r3, r3, #16
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	f000 80a1 	beq.w	8016200 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80160be:	4b84      	ldr	r3, [pc, #528]	; (80162d0 <tcp_process+0x5a8>)
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160c6:	1ad3      	subs	r3, r2, r3
 80160c8:	3b01      	subs	r3, #1
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	db7e      	blt.n	80161cc <tcp_process+0x4a4>
 80160ce:	4b80      	ldr	r3, [pc, #512]	; (80162d0 <tcp_process+0x5a8>)
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	2b00      	cmp	r3, #0
 80160da:	dc77      	bgt.n	80161cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2204      	movs	r2, #4
 80160e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d102      	bne.n	80160f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80160ea:	23fa      	movs	r3, #250	; 0xfa
 80160ec:	76bb      	strb	r3, [r7, #26]
 80160ee:	e01d      	b.n	801612c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160f4:	699b      	ldr	r3, [r3, #24]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d106      	bne.n	8016108 <tcp_process+0x3e0>
 80160fa:	4b7b      	ldr	r3, [pc, #492]	; (80162e8 <tcp_process+0x5c0>)
 80160fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8016100:	497a      	ldr	r1, [pc, #488]	; (80162ec <tcp_process+0x5c4>)
 8016102:	487b      	ldr	r0, [pc, #492]	; (80162f0 <tcp_process+0x5c8>)
 8016104:	f005 f884 	bl	801b210 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801610c:	699b      	ldr	r3, [r3, #24]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00a      	beq.n	8016128 <tcp_process+0x400>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016116:	699b      	ldr	r3, [r3, #24]
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	6910      	ldr	r0, [r2, #16]
 801611c:	2200      	movs	r2, #0
 801611e:	6879      	ldr	r1, [r7, #4]
 8016120:	4798      	blx	r3
 8016122:	4603      	mov	r3, r0
 8016124:	76bb      	strb	r3, [r7, #26]
 8016126:	e001      	b.n	801612c <tcp_process+0x404>
 8016128:	23f0      	movs	r3, #240	; 0xf0
 801612a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801612c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d00a      	beq.n	801614a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016134:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016138:	f113 0f0d 	cmn.w	r3, #13
 801613c:	d002      	beq.n	8016144 <tcp_process+0x41c>
              tcp_abort(pcb);
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f7fd ff94 	bl	801406c <tcp_abort>
            }
            return ERR_ABRT;
 8016144:	f06f 030c 	mvn.w	r3, #12
 8016148:	e1ce      	b.n	80164e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 fae0 	bl	8016710 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016150:	4b68      	ldr	r3, [pc, #416]	; (80162f4 <tcp_process+0x5cc>)
 8016152:	881b      	ldrh	r3, [r3, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d005      	beq.n	8016164 <tcp_process+0x43c>
            recv_acked--;
 8016158:	4b66      	ldr	r3, [pc, #408]	; (80162f4 <tcp_process+0x5cc>)
 801615a:	881b      	ldrh	r3, [r3, #0]
 801615c:	3b01      	subs	r3, #1
 801615e:	b29a      	uxth	r2, r3
 8016160:	4b64      	ldr	r3, [pc, #400]	; (80162f4 <tcp_process+0x5cc>)
 8016162:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016168:	009a      	lsls	r2, r3, #2
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	f241 111c 	movw	r1, #4380	; 0x111c
 8016174:	428b      	cmp	r3, r1
 8016176:	bf38      	it	cc
 8016178:	460b      	movcc	r3, r1
 801617a:	429a      	cmp	r2, r3
 801617c:	d204      	bcs.n	8016188 <tcp_process+0x460>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016182:	009b      	lsls	r3, r3, #2
 8016184:	b29b      	uxth	r3, r3
 8016186:	e00d      	b.n	80161a4 <tcp_process+0x47c>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801618c:	005b      	lsls	r3, r3, #1
 801618e:	f241 121c 	movw	r2, #4380	; 0x111c
 8016192:	4293      	cmp	r3, r2
 8016194:	d904      	bls.n	80161a0 <tcp_process+0x478>
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	b29b      	uxth	r3, r3
 801619e:	e001      	b.n	80161a4 <tcp_process+0x47c>
 80161a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80161aa:	4b53      	ldr	r3, [pc, #332]	; (80162f8 <tcp_process+0x5d0>)
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	f003 0320 	and.w	r3, r3, #32
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d037      	beq.n	8016226 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	8b5b      	ldrh	r3, [r3, #26]
 80161ba:	f043 0302 	orr.w	r3, r3, #2
 80161be:	b29a      	uxth	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2207      	movs	r2, #7
 80161c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80161ca:	e02c      	b.n	8016226 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161cc:	4b40      	ldr	r3, [pc, #256]	; (80162d0 <tcp_process+0x5a8>)
 80161ce:	6819      	ldr	r1, [r3, #0]
 80161d0:	4b40      	ldr	r3, [pc, #256]	; (80162d4 <tcp_process+0x5ac>)
 80161d2:	881b      	ldrh	r3, [r3, #0]
 80161d4:	461a      	mov	r2, r3
 80161d6:	4b40      	ldr	r3, [pc, #256]	; (80162d8 <tcp_process+0x5b0>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80161dc:	4b3f      	ldr	r3, [pc, #252]	; (80162dc <tcp_process+0x5b4>)
 80161de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161e0:	885b      	ldrh	r3, [r3, #2]
 80161e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80161e4:	4a3d      	ldr	r2, [pc, #244]	; (80162dc <tcp_process+0x5b4>)
 80161e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161e8:	8812      	ldrh	r2, [r2, #0]
 80161ea:	b292      	uxth	r2, r2
 80161ec:	9202      	str	r2, [sp, #8]
 80161ee:	9301      	str	r3, [sp, #4]
 80161f0:	4b3b      	ldr	r3, [pc, #236]	; (80162e0 <tcp_process+0x5b8>)
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	4b3b      	ldr	r3, [pc, #236]	; (80162e4 <tcp_process+0x5bc>)
 80161f6:	4602      	mov	r2, r0
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f002 fbdf 	bl	80189bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80161fe:	e167      	b.n	80164d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016200:	4b32      	ldr	r3, [pc, #200]	; (80162cc <tcp_process+0x5a4>)
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	f003 0302 	and.w	r3, r3, #2
 8016208:	2b00      	cmp	r3, #0
 801620a:	f000 8161 	beq.w	80164d0 <tcp_process+0x7a8>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016212:	1e5a      	subs	r2, r3, #1
 8016214:	4b30      	ldr	r3, [pc, #192]	; (80162d8 <tcp_process+0x5b0>)
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	429a      	cmp	r2, r3
 801621a:	f040 8159 	bne.w	80164d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f002 f9b8 	bl	8018594 <tcp_rexmit>
      break;
 8016224:	e154      	b.n	80164d0 <tcp_process+0x7a8>
 8016226:	e153      	b.n	80164d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 fa71 	bl	8016710 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801622e:	4b32      	ldr	r3, [pc, #200]	; (80162f8 <tcp_process+0x5d0>)
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	f003 0320 	and.w	r3, r3, #32
 8016236:	2b00      	cmp	r3, #0
 8016238:	f000 814c 	beq.w	80164d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	8b5b      	ldrh	r3, [r3, #26]
 8016240:	f043 0302 	orr.w	r3, r3, #2
 8016244:	b29a      	uxth	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2207      	movs	r2, #7
 801624e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016250:	e140      	b.n	80164d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f000 fa5c 	bl	8016710 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016258:	4b27      	ldr	r3, [pc, #156]	; (80162f8 <tcp_process+0x5d0>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	f003 0320 	and.w	r3, r3, #32
 8016260:	2b00      	cmp	r3, #0
 8016262:	d071      	beq.n	8016348 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016264:	4b19      	ldr	r3, [pc, #100]	; (80162cc <tcp_process+0x5a4>)
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	f003 0310 	and.w	r3, r3, #16
 801626c:	2b00      	cmp	r3, #0
 801626e:	d060      	beq.n	8016332 <tcp_process+0x60a>
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016274:	4b16      	ldr	r3, [pc, #88]	; (80162d0 <tcp_process+0x5a8>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	429a      	cmp	r2, r3
 801627a:	d15a      	bne.n	8016332 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016280:	2b00      	cmp	r3, #0
 8016282:	d156      	bne.n	8016332 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	8b5b      	ldrh	r3, [r3, #26]
 8016288:	f043 0302 	orr.w	r3, r3, #2
 801628c:	b29a      	uxth	r2, r3
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f7fe fdbe 	bl	8014e14 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016298:	4b18      	ldr	r3, [pc, #96]	; (80162fc <tcp_process+0x5d4>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	687a      	ldr	r2, [r7, #4]
 801629e:	429a      	cmp	r2, r3
 80162a0:	d105      	bne.n	80162ae <tcp_process+0x586>
 80162a2:	4b16      	ldr	r3, [pc, #88]	; (80162fc <tcp_process+0x5d4>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	68db      	ldr	r3, [r3, #12]
 80162a8:	4a14      	ldr	r2, [pc, #80]	; (80162fc <tcp_process+0x5d4>)
 80162aa:	6013      	str	r3, [r2, #0]
 80162ac:	e02e      	b.n	801630c <tcp_process+0x5e4>
 80162ae:	4b13      	ldr	r3, [pc, #76]	; (80162fc <tcp_process+0x5d4>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	617b      	str	r3, [r7, #20]
 80162b4:	e027      	b.n	8016306 <tcp_process+0x5de>
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	68db      	ldr	r3, [r3, #12]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d11f      	bne.n	8016300 <tcp_process+0x5d8>
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	68da      	ldr	r2, [r3, #12]
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	60da      	str	r2, [r3, #12]
 80162c8:	e020      	b.n	801630c <tcp_process+0x5e4>
 80162ca:	bf00      	nop
 80162cc:	24004950 	.word	0x24004950
 80162d0:	24004948 	.word	0x24004948
 80162d4:	2400494e 	.word	0x2400494e
 80162d8:	24004944 	.word	0x24004944
 80162dc:	24004934 	.word	0x24004934
 80162e0:	24005970 	.word	0x24005970
 80162e4:	24005974 	.word	0x24005974
 80162e8:	0801f1d8 	.word	0x0801f1d8
 80162ec:	0801f494 	.word	0x0801f494
 80162f0:	0801f240 	.word	0x0801f240
 80162f4:	2400494c 	.word	0x2400494c
 80162f8:	24004951 	.word	0x24004951
 80162fc:	24008a48 	.word	0x24008a48
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	617b      	str	r3, [r7, #20]
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d1d4      	bne.n	80162b6 <tcp_process+0x58e>
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2200      	movs	r2, #0
 8016310:	60da      	str	r2, [r3, #12]
 8016312:	4b77      	ldr	r3, [pc, #476]	; (80164f0 <tcp_process+0x7c8>)
 8016314:	2201      	movs	r2, #1
 8016316:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	220a      	movs	r2, #10
 801631c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801631e:	4b75      	ldr	r3, [pc, #468]	; (80164f4 <tcp_process+0x7cc>)
 8016320:	681a      	ldr	r2, [r3, #0]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	60da      	str	r2, [r3, #12]
 8016326:	4a73      	ldr	r2, [pc, #460]	; (80164f4 <tcp_process+0x7cc>)
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6013      	str	r3, [r2, #0]
 801632c:	f002 fea6 	bl	801907c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016330:	e0d2      	b.n	80164d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	8b5b      	ldrh	r3, [r3, #26]
 8016336:	f043 0302 	orr.w	r3, r3, #2
 801633a:	b29a      	uxth	r2, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2208      	movs	r2, #8
 8016344:	751a      	strb	r2, [r3, #20]
      break;
 8016346:	e0c7      	b.n	80164d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016348:	4b6b      	ldr	r3, [pc, #428]	; (80164f8 <tcp_process+0x7d0>)
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	f003 0310 	and.w	r3, r3, #16
 8016350:	2b00      	cmp	r3, #0
 8016352:	f000 80c1 	beq.w	80164d8 <tcp_process+0x7b0>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801635a:	4b68      	ldr	r3, [pc, #416]	; (80164fc <tcp_process+0x7d4>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	429a      	cmp	r2, r3
 8016360:	f040 80ba 	bne.w	80164d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016368:	2b00      	cmp	r3, #0
 801636a:	f040 80b5 	bne.w	80164d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2206      	movs	r2, #6
 8016372:	751a      	strb	r2, [r3, #20]
      break;
 8016374:	e0b0      	b.n	80164d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f000 f9ca 	bl	8016710 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801637c:	4b60      	ldr	r3, [pc, #384]	; (8016500 <tcp_process+0x7d8>)
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	f003 0320 	and.w	r3, r3, #32
 8016384:	2b00      	cmp	r3, #0
 8016386:	f000 80a9 	beq.w	80164dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	8b5b      	ldrh	r3, [r3, #26]
 801638e:	f043 0302 	orr.w	r3, r3, #2
 8016392:	b29a      	uxth	r2, r3
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f7fe fd3b 	bl	8014e14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801639e:	4b59      	ldr	r3, [pc, #356]	; (8016504 <tcp_process+0x7dc>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	687a      	ldr	r2, [r7, #4]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d105      	bne.n	80163b4 <tcp_process+0x68c>
 80163a8:	4b56      	ldr	r3, [pc, #344]	; (8016504 <tcp_process+0x7dc>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	4a55      	ldr	r2, [pc, #340]	; (8016504 <tcp_process+0x7dc>)
 80163b0:	6013      	str	r3, [r2, #0]
 80163b2:	e013      	b.n	80163dc <tcp_process+0x6b4>
 80163b4:	4b53      	ldr	r3, [pc, #332]	; (8016504 <tcp_process+0x7dc>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	613b      	str	r3, [r7, #16]
 80163ba:	e00c      	b.n	80163d6 <tcp_process+0x6ae>
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	687a      	ldr	r2, [r7, #4]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d104      	bne.n	80163d0 <tcp_process+0x6a8>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	68da      	ldr	r2, [r3, #12]
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	60da      	str	r2, [r3, #12]
 80163ce:	e005      	b.n	80163dc <tcp_process+0x6b4>
 80163d0:	693b      	ldr	r3, [r7, #16]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	613b      	str	r3, [r7, #16]
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d1ef      	bne.n	80163bc <tcp_process+0x694>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2200      	movs	r2, #0
 80163e0:	60da      	str	r2, [r3, #12]
 80163e2:	4b43      	ldr	r3, [pc, #268]	; (80164f0 <tcp_process+0x7c8>)
 80163e4:	2201      	movs	r2, #1
 80163e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	220a      	movs	r2, #10
 80163ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80163ee:	4b41      	ldr	r3, [pc, #260]	; (80164f4 <tcp_process+0x7cc>)
 80163f0:	681a      	ldr	r2, [r3, #0]
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	60da      	str	r2, [r3, #12]
 80163f6:	4a3f      	ldr	r2, [pc, #252]	; (80164f4 <tcp_process+0x7cc>)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	6013      	str	r3, [r2, #0]
 80163fc:	f002 fe3e 	bl	801907c <tcp_timer_needed>
      }
      break;
 8016400:	e06c      	b.n	80164dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f000 f984 	bl	8016710 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016408:	4b3b      	ldr	r3, [pc, #236]	; (80164f8 <tcp_process+0x7d0>)
 801640a:	781b      	ldrb	r3, [r3, #0]
 801640c:	f003 0310 	and.w	r3, r3, #16
 8016410:	2b00      	cmp	r3, #0
 8016412:	d065      	beq.n	80164e0 <tcp_process+0x7b8>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016418:	4b38      	ldr	r3, [pc, #224]	; (80164fc <tcp_process+0x7d4>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	429a      	cmp	r2, r3
 801641e:	d15f      	bne.n	80164e0 <tcp_process+0x7b8>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016424:	2b00      	cmp	r3, #0
 8016426:	d15b      	bne.n	80164e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	f7fe fcf3 	bl	8014e14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801642e:	4b35      	ldr	r3, [pc, #212]	; (8016504 <tcp_process+0x7dc>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	687a      	ldr	r2, [r7, #4]
 8016434:	429a      	cmp	r2, r3
 8016436:	d105      	bne.n	8016444 <tcp_process+0x71c>
 8016438:	4b32      	ldr	r3, [pc, #200]	; (8016504 <tcp_process+0x7dc>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	68db      	ldr	r3, [r3, #12]
 801643e:	4a31      	ldr	r2, [pc, #196]	; (8016504 <tcp_process+0x7dc>)
 8016440:	6013      	str	r3, [r2, #0]
 8016442:	e013      	b.n	801646c <tcp_process+0x744>
 8016444:	4b2f      	ldr	r3, [pc, #188]	; (8016504 <tcp_process+0x7dc>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	60fb      	str	r3, [r7, #12]
 801644a:	e00c      	b.n	8016466 <tcp_process+0x73e>
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	429a      	cmp	r2, r3
 8016454:	d104      	bne.n	8016460 <tcp_process+0x738>
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	68da      	ldr	r2, [r3, #12]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	60da      	str	r2, [r3, #12]
 801645e:	e005      	b.n	801646c <tcp_process+0x744>
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	60fb      	str	r3, [r7, #12]
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d1ef      	bne.n	801644c <tcp_process+0x724>
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2200      	movs	r2, #0
 8016470:	60da      	str	r2, [r3, #12]
 8016472:	4b1f      	ldr	r3, [pc, #124]	; (80164f0 <tcp_process+0x7c8>)
 8016474:	2201      	movs	r2, #1
 8016476:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	220a      	movs	r2, #10
 801647c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801647e:	4b1d      	ldr	r3, [pc, #116]	; (80164f4 <tcp_process+0x7cc>)
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	60da      	str	r2, [r3, #12]
 8016486:	4a1b      	ldr	r2, [pc, #108]	; (80164f4 <tcp_process+0x7cc>)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6013      	str	r3, [r2, #0]
 801648c:	f002 fdf6 	bl	801907c <tcp_timer_needed>
      }
      break;
 8016490:	e026      	b.n	80164e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f000 f93c 	bl	8016710 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016498:	4b17      	ldr	r3, [pc, #92]	; (80164f8 <tcp_process+0x7d0>)
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	f003 0310 	and.w	r3, r3, #16
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d01f      	beq.n	80164e4 <tcp_process+0x7bc>
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80164a8:	4b14      	ldr	r3, [pc, #80]	; (80164fc <tcp_process+0x7d4>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d119      	bne.n	80164e4 <tcp_process+0x7bc>
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d115      	bne.n	80164e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80164b8:	4b11      	ldr	r3, [pc, #68]	; (8016500 <tcp_process+0x7d8>)
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	f043 0310 	orr.w	r3, r3, #16
 80164c0:	b2da      	uxtb	r2, r3
 80164c2:	4b0f      	ldr	r3, [pc, #60]	; (8016500 <tcp_process+0x7d8>)
 80164c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80164c6:	e00d      	b.n	80164e4 <tcp_process+0x7bc>
    default:
      break;
 80164c8:	bf00      	nop
 80164ca:	e00c      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164cc:	bf00      	nop
 80164ce:	e00a      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164d0:	bf00      	nop
 80164d2:	e008      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164d4:	bf00      	nop
 80164d6:	e006      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164d8:	bf00      	nop
 80164da:	e004      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164dc:	bf00      	nop
 80164de:	e002      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164e0:	bf00      	nop
 80164e2:	e000      	b.n	80164e6 <tcp_process+0x7be>
      break;
 80164e4:	bf00      	nop
  }
  return ERR_OK;
 80164e6:	2300      	movs	r3, #0
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3724      	adds	r7, #36	; 0x24
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd90      	pop	{r4, r7, pc}
 80164f0:	24008a44 	.word	0x24008a44
 80164f4:	24008a58 	.word	0x24008a58
 80164f8:	24004950 	.word	0x24004950
 80164fc:	24004948 	.word	0x24004948
 8016500:	24004951 	.word	0x24004951
 8016504:	24008a48 	.word	0x24008a48

08016508 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016508:	b590      	push	{r4, r7, lr}
 801650a:	b085      	sub	sp, #20
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d106      	bne.n	8016526 <tcp_oos_insert_segment+0x1e>
 8016518:	4b3b      	ldr	r3, [pc, #236]	; (8016608 <tcp_oos_insert_segment+0x100>)
 801651a:	f240 421f 	movw	r2, #1055	; 0x41f
 801651e:	493b      	ldr	r1, [pc, #236]	; (801660c <tcp_oos_insert_segment+0x104>)
 8016520:	483b      	ldr	r0, [pc, #236]	; (8016610 <tcp_oos_insert_segment+0x108>)
 8016522:	f004 fe75 	bl	801b210 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	68db      	ldr	r3, [r3, #12]
 801652a:	899b      	ldrh	r3, [r3, #12]
 801652c:	b29b      	uxth	r3, r3
 801652e:	4618      	mov	r0, r3
 8016530:	f7f7 f882 	bl	800d638 <lwip_htons>
 8016534:	4603      	mov	r3, r0
 8016536:	b2db      	uxtb	r3, r3
 8016538:	f003 0301 	and.w	r3, r3, #1
 801653c:	2b00      	cmp	r3, #0
 801653e:	d028      	beq.n	8016592 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016540:	6838      	ldr	r0, [r7, #0]
 8016542:	f7fe fa67 	bl	8014a14 <tcp_segs_free>
    next = NULL;
 8016546:	2300      	movs	r3, #0
 8016548:	603b      	str	r3, [r7, #0]
 801654a:	e056      	b.n	80165fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	68db      	ldr	r3, [r3, #12]
 8016550:	899b      	ldrh	r3, [r3, #12]
 8016552:	b29b      	uxth	r3, r3
 8016554:	4618      	mov	r0, r3
 8016556:	f7f7 f86f 	bl	800d638 <lwip_htons>
 801655a:	4603      	mov	r3, r0
 801655c:	b2db      	uxtb	r3, r3
 801655e:	f003 0301 	and.w	r3, r3, #1
 8016562:	2b00      	cmp	r3, #0
 8016564:	d00d      	beq.n	8016582 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	68db      	ldr	r3, [r3, #12]
 801656a:	899b      	ldrh	r3, [r3, #12]
 801656c:	b29c      	uxth	r4, r3
 801656e:	2001      	movs	r0, #1
 8016570:	f7f7 f862 	bl	800d638 <lwip_htons>
 8016574:	4603      	mov	r3, r0
 8016576:	461a      	mov	r2, r3
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	4322      	orrs	r2, r4
 801657e:	b292      	uxth	r2, r2
 8016580:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	f7fe fa55 	bl	8014a3c <tcp_seg_free>
    while (next &&
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d00e      	beq.n	80165b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	891b      	ldrh	r3, [r3, #8]
 801659c:	461a      	mov	r2, r3
 801659e:	4b1d      	ldr	r3, [pc, #116]	; (8016614 <tcp_oos_insert_segment+0x10c>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	441a      	add	r2, r3
 80165a4:	683b      	ldr	r3, [r7, #0]
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	685b      	ldr	r3, [r3, #4]
 80165aa:	6839      	ldr	r1, [r7, #0]
 80165ac:	8909      	ldrh	r1, [r1, #8]
 80165ae:	440b      	add	r3, r1
 80165b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	daca      	bge.n	801654c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d01e      	beq.n	80165fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	891b      	ldrh	r3, [r3, #8]
 80165c0:	461a      	mov	r2, r3
 80165c2:	4b14      	ldr	r3, [pc, #80]	; (8016614 <tcp_oos_insert_segment+0x10c>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	441a      	add	r2, r3
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	68db      	ldr	r3, [r3, #12]
 80165cc:	685b      	ldr	r3, [r3, #4]
 80165ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	dd12      	ble.n	80165fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	b29a      	uxth	r2, r3
 80165dc:	4b0d      	ldr	r3, [pc, #52]	; (8016614 <tcp_oos_insert_segment+0x10c>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	1ad3      	subs	r3, r2, r3
 80165e4:	b29a      	uxth	r2, r3
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	685a      	ldr	r2, [r3, #4]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	891b      	ldrh	r3, [r3, #8]
 80165f2:	4619      	mov	r1, r3
 80165f4:	4610      	mov	r0, r2
 80165f6:	f7fc fd01 	bl	8012ffc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	683a      	ldr	r2, [r7, #0]
 80165fe:	601a      	str	r2, [r3, #0]
}
 8016600:	bf00      	nop
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	bd90      	pop	{r4, r7, pc}
 8016608:	0801f1d8 	.word	0x0801f1d8
 801660c:	0801f4b4 	.word	0x0801f4b4
 8016610:	0801f240 	.word	0x0801f240
 8016614:	24004944 	.word	0x24004944

08016618 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016618:	b5b0      	push	{r4, r5, r7, lr}
 801661a:	b086      	sub	sp, #24
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	60b9      	str	r1, [r7, #8]
 8016622:	607a      	str	r2, [r7, #4]
 8016624:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016626:	e03e      	b.n	80166a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	4618      	mov	r0, r3
 8016638:	f7fc fef4 	bl	8013424 <pbuf_clen>
 801663c:	4603      	mov	r3, r0
 801663e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016646:	8a7a      	ldrh	r2, [r7, #18]
 8016648:	429a      	cmp	r2, r3
 801664a:	d906      	bls.n	801665a <tcp_free_acked_segments+0x42>
 801664c:	4b2a      	ldr	r3, [pc, #168]	; (80166f8 <tcp_free_acked_segments+0xe0>)
 801664e:	f240 4257 	movw	r2, #1111	; 0x457
 8016652:	492a      	ldr	r1, [pc, #168]	; (80166fc <tcp_free_acked_segments+0xe4>)
 8016654:	482a      	ldr	r0, [pc, #168]	; (8016700 <tcp_free_acked_segments+0xe8>)
 8016656:	f004 fddb 	bl	801b210 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016660:	8a7b      	ldrh	r3, [r7, #18]
 8016662:	1ad3      	subs	r3, r2, r3
 8016664:	b29a      	uxth	r2, r3
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	891a      	ldrh	r2, [r3, #8]
 8016670:	4b24      	ldr	r3, [pc, #144]	; (8016704 <tcp_free_acked_segments+0xec>)
 8016672:	881b      	ldrh	r3, [r3, #0]
 8016674:	4413      	add	r3, r2
 8016676:	b29a      	uxth	r2, r3
 8016678:	4b22      	ldr	r3, [pc, #136]	; (8016704 <tcp_free_acked_segments+0xec>)
 801667a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801667c:	6978      	ldr	r0, [r7, #20]
 801667e:	f7fe f9dd 	bl	8014a3c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016688:	2b00      	cmp	r3, #0
 801668a:	d00c      	beq.n	80166a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d109      	bne.n	80166a6 <tcp_free_acked_segments+0x8e>
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d106      	bne.n	80166a6 <tcp_free_acked_segments+0x8e>
 8016698:	4b17      	ldr	r3, [pc, #92]	; (80166f8 <tcp_free_acked_segments+0xe0>)
 801669a:	f240 4262 	movw	r2, #1122	; 0x462
 801669e:	491a      	ldr	r1, [pc, #104]	; (8016708 <tcp_free_acked_segments+0xf0>)
 80166a0:	4817      	ldr	r0, [pc, #92]	; (8016700 <tcp_free_acked_segments+0xe8>)
 80166a2:	f004 fdb5 	bl	801b210 <iprintf>
  while (seg_list != NULL &&
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d020      	beq.n	80166ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	68db      	ldr	r3, [r3, #12]
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7f6 ffd5 	bl	800d662 <lwip_htonl>
 80166b8:	4604      	mov	r4, r0
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	891b      	ldrh	r3, [r3, #8]
 80166be:	461d      	mov	r5, r3
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	899b      	ldrh	r3, [r3, #12]
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7f6 ffb5 	bl	800d638 <lwip_htons>
 80166ce:	4603      	mov	r3, r0
 80166d0:	b2db      	uxtb	r3, r3
 80166d2:	f003 0303 	and.w	r3, r3, #3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d001      	beq.n	80166de <tcp_free_acked_segments+0xc6>
 80166da:	2301      	movs	r3, #1
 80166dc:	e000      	b.n	80166e0 <tcp_free_acked_segments+0xc8>
 80166de:	2300      	movs	r3, #0
 80166e0:	442b      	add	r3, r5
 80166e2:	18e2      	adds	r2, r4, r3
 80166e4:	4b09      	ldr	r3, [pc, #36]	; (801670c <tcp_free_acked_segments+0xf4>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	dd9c      	ble.n	8016628 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80166ee:	68bb      	ldr	r3, [r7, #8]
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3718      	adds	r7, #24
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bdb0      	pop	{r4, r5, r7, pc}
 80166f8:	0801f1d8 	.word	0x0801f1d8
 80166fc:	0801f4dc 	.word	0x0801f4dc
 8016700:	0801f240 	.word	0x0801f240
 8016704:	2400494c 	.word	0x2400494c
 8016708:	0801f504 	.word	0x0801f504
 801670c:	24004948 	.word	0x24004948

08016710 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016710:	b5b0      	push	{r4, r5, r7, lr}
 8016712:	b094      	sub	sp, #80	; 0x50
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016718:	2300      	movs	r3, #0
 801671a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d106      	bne.n	8016730 <tcp_receive+0x20>
 8016722:	4ba6      	ldr	r3, [pc, #664]	; (80169bc <tcp_receive+0x2ac>)
 8016724:	f240 427b 	movw	r2, #1147	; 0x47b
 8016728:	49a5      	ldr	r1, [pc, #660]	; (80169c0 <tcp_receive+0x2b0>)
 801672a:	48a6      	ldr	r0, [pc, #664]	; (80169c4 <tcp_receive+0x2b4>)
 801672c:	f004 fd70 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	7d1b      	ldrb	r3, [r3, #20]
 8016734:	2b03      	cmp	r3, #3
 8016736:	d806      	bhi.n	8016746 <tcp_receive+0x36>
 8016738:	4ba0      	ldr	r3, [pc, #640]	; (80169bc <tcp_receive+0x2ac>)
 801673a:	f240 427c 	movw	r2, #1148	; 0x47c
 801673e:	49a2      	ldr	r1, [pc, #648]	; (80169c8 <tcp_receive+0x2b8>)
 8016740:	48a0      	ldr	r0, [pc, #640]	; (80169c4 <tcp_receive+0x2b4>)
 8016742:	f004 fd65 	bl	801b210 <iprintf>

  if (flags & TCP_ACK) {
 8016746:	4ba1      	ldr	r3, [pc, #644]	; (80169cc <tcp_receive+0x2bc>)
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	f003 0310 	and.w	r3, r3, #16
 801674e:	2b00      	cmp	r3, #0
 8016750:	f000 8263 	beq.w	8016c1a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801675a:	461a      	mov	r2, r3
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016760:	4413      	add	r3, r2
 8016762:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016768:	4b99      	ldr	r3, [pc, #612]	; (80169d0 <tcp_receive+0x2c0>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	1ad3      	subs	r3, r2, r3
 801676e:	2b00      	cmp	r3, #0
 8016770:	db1b      	blt.n	80167aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016776:	4b96      	ldr	r3, [pc, #600]	; (80169d0 <tcp_receive+0x2c0>)
 8016778:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801677a:	429a      	cmp	r2, r3
 801677c:	d106      	bne.n	801678c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016782:	4b94      	ldr	r3, [pc, #592]	; (80169d4 <tcp_receive+0x2c4>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	1ad3      	subs	r3, r2, r3
 8016788:	2b00      	cmp	r3, #0
 801678a:	db0e      	blt.n	80167aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016790:	4b90      	ldr	r3, [pc, #576]	; (80169d4 <tcp_receive+0x2c4>)
 8016792:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016794:	429a      	cmp	r2, r3
 8016796:	d125      	bne.n	80167e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016798:	4b8f      	ldr	r3, [pc, #572]	; (80169d8 <tcp_receive+0x2c8>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	89db      	ldrh	r3, [r3, #14]
 801679e:	b29a      	uxth	r2, r3
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d91c      	bls.n	80167e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80167aa:	4b8b      	ldr	r3, [pc, #556]	; (80169d8 <tcp_receive+0x2c8>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	89db      	ldrh	r3, [r3, #14]
 80167b0:	b29a      	uxth	r2, r3
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d205      	bcs.n	80167d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80167d4:	4b7e      	ldr	r3, [pc, #504]	; (80169d0 <tcp_receive+0x2c0>)
 80167d6:	681a      	ldr	r2, [r3, #0]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80167dc:	4b7d      	ldr	r3, [pc, #500]	; (80169d4 <tcp_receive+0x2c4>)
 80167de:	681a      	ldr	r2, [r3, #0]
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80167e4:	4b7b      	ldr	r3, [pc, #492]	; (80169d4 <tcp_receive+0x2c4>)
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ec:	1ad3      	subs	r3, r2, r3
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	dc58      	bgt.n	80168a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80167f2:	4b7a      	ldr	r3, [pc, #488]	; (80169dc <tcp_receive+0x2cc>)
 80167f4:	881b      	ldrh	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d14b      	bne.n	8016892 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016804:	4413      	add	r3, r2
 8016806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016808:	429a      	cmp	r2, r3
 801680a:	d142      	bne.n	8016892 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016812:	2b00      	cmp	r3, #0
 8016814:	db3d      	blt.n	8016892 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801681a:	4b6e      	ldr	r3, [pc, #440]	; (80169d4 <tcp_receive+0x2c4>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	429a      	cmp	r2, r3
 8016820:	d137      	bne.n	8016892 <tcp_receive+0x182>
              found_dupack = 1;
 8016822:	2301      	movs	r3, #1
 8016824:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801682c:	2bff      	cmp	r3, #255	; 0xff
 801682e:	d007      	beq.n	8016840 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016836:	3301      	adds	r3, #1
 8016838:	b2da      	uxtb	r2, r3
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016846:	2b03      	cmp	r3, #3
 8016848:	d91b      	bls.n	8016882 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016854:	4413      	add	r3, r2
 8016856:	b29a      	uxth	r2, r3
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801685e:	429a      	cmp	r2, r3
 8016860:	d30a      	bcc.n	8016878 <tcp_receive+0x168>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801686c:	4413      	add	r3, r2
 801686e:	b29a      	uxth	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016876:	e004      	b.n	8016882 <tcp_receive+0x172>
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801687e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016888:	2b02      	cmp	r3, #2
 801688a:	d902      	bls.n	8016892 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f001 feed 	bl	801866c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016894:	2b00      	cmp	r3, #0
 8016896:	f040 8160 	bne.w	8016b5a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2200      	movs	r2, #0
 801689e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80168a2:	e15a      	b.n	8016b5a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80168a4:	4b4b      	ldr	r3, [pc, #300]	; (80169d4 <tcp_receive+0x2c4>)
 80168a6:	681a      	ldr	r2, [r3, #0]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168ac:	1ad3      	subs	r3, r2, r3
 80168ae:	3b01      	subs	r3, #1
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f2c0 814d 	blt.w	8016b50 <tcp_receive+0x440>
 80168b6:	4b47      	ldr	r3, [pc, #284]	; (80169d4 <tcp_receive+0x2c4>)
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168be:	1ad3      	subs	r3, r2, r3
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	f300 8145 	bgt.w	8016b50 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	8b5b      	ldrh	r3, [r3, #26]
 80168ca:	f003 0304 	and.w	r3, r3, #4
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d010      	beq.n	80168f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	8b5b      	ldrh	r3, [r3, #26]
 80168d6:	f023 0304 	bic.w	r3, r3, #4
 80168da:	b29a      	uxth	r2, r3
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2200      	movs	r2, #0
 80168f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2200      	movs	r2, #0
 80168f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016902:	10db      	asrs	r3, r3, #3
 8016904:	b21b      	sxth	r3, r3
 8016906:	b29a      	uxth	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801690e:	b29b      	uxth	r3, r3
 8016910:	4413      	add	r3, r2
 8016912:	b29b      	uxth	r3, r3
 8016914:	b21a      	sxth	r2, r3
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801691c:	4b2d      	ldr	r3, [pc, #180]	; (80169d4 <tcp_receive+0x2c4>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	b29a      	uxth	r2, r3
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016926:	b29b      	uxth	r3, r3
 8016928:	1ad3      	subs	r3, r2, r3
 801692a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2200      	movs	r2, #0
 8016930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016934:	4b27      	ldr	r3, [pc, #156]	; (80169d4 <tcp_receive+0x2c4>)
 8016936:	681a      	ldr	r2, [r3, #0]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	7d1b      	ldrb	r3, [r3, #20]
 8016940:	2b03      	cmp	r3, #3
 8016942:	f240 8096 	bls.w	8016a72 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016952:	429a      	cmp	r2, r3
 8016954:	d244      	bcs.n	80169e0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	8b5b      	ldrh	r3, [r3, #26]
 801695a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801695e:	2b00      	cmp	r3, #0
 8016960:	d001      	beq.n	8016966 <tcp_receive+0x256>
 8016962:	2301      	movs	r3, #1
 8016964:	e000      	b.n	8016968 <tcp_receive+0x258>
 8016966:	2302      	movs	r3, #2
 8016968:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801696c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016970:	b29a      	uxth	r2, r3
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016976:	fb12 f303 	smulbb	r3, r2, r3
 801697a:	b29b      	uxth	r3, r3
 801697c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801697e:	4293      	cmp	r3, r2
 8016980:	bf28      	it	cs
 8016982:	4613      	movcs	r3, r2
 8016984:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801698c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801698e:	4413      	add	r3, r2
 8016990:	b29a      	uxth	r2, r3
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016998:	429a      	cmp	r2, r3
 801699a:	d309      	bcc.n	80169b0 <tcp_receive+0x2a0>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80169a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169a4:	4413      	add	r3, r2
 80169a6:	b29a      	uxth	r2, r3
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80169ae:	e060      	b.n	8016a72 <tcp_receive+0x362>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80169ba:	e05a      	b.n	8016a72 <tcp_receive+0x362>
 80169bc:	0801f1d8 	.word	0x0801f1d8
 80169c0:	0801f524 	.word	0x0801f524
 80169c4:	0801f240 	.word	0x0801f240
 80169c8:	0801f540 	.word	0x0801f540
 80169cc:	24004950 	.word	0x24004950
 80169d0:	24004944 	.word	0x24004944
 80169d4:	24004948 	.word	0x24004948
 80169d8:	24004934 	.word	0x24004934
 80169dc:	2400494e 	.word	0x2400494e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80169e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80169e8:	4413      	add	r3, r2
 80169ea:	b29a      	uxth	r2, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d309      	bcc.n	8016a0a <tcp_receive+0x2fa>
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80169fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80169fe:	4413      	add	r3, r2
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016a08:	e004      	b.n	8016a14 <tcp_receive+0x304>
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d326      	bcc.n	8016a72 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a30:	1ad3      	subs	r3, r2, r3
 8016a32:	b29a      	uxth	r2, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a44:	4413      	add	r3, r2
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d30a      	bcc.n	8016a68 <tcp_receive+0x358>
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a5c:	4413      	add	r3, r2
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016a66:	e004      	b.n	8016a72 <tcp_receive+0x362>
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a7a:	4a98      	ldr	r2, [pc, #608]	; (8016cdc <tcp_receive+0x5cc>)
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f7ff fdcb 	bl	8016618 <tcp_free_acked_segments>
 8016a82:	4602      	mov	r2, r0
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a90:	4a93      	ldr	r2, [pc, #588]	; (8016ce0 <tcp_receive+0x5d0>)
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f7ff fdc0 	bl	8016618 <tcp_free_acked_segments>
 8016a98:	4602      	mov	r2, r0
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d104      	bne.n	8016ab0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016aac:	861a      	strh	r2, [r3, #48]	; 0x30
 8016aae:	e002      	b.n	8016ab6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2200      	movs	r2, #0
 8016aba:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d103      	bne.n	8016acc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016ad2:	4b84      	ldr	r3, [pc, #528]	; (8016ce4 <tcp_receive+0x5d4>)
 8016ad4:	881b      	ldrh	r3, [r3, #0]
 8016ad6:	4413      	add	r3, r2
 8016ad8:	b29a      	uxth	r2, r3
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	8b5b      	ldrh	r3, [r3, #26]
 8016ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d035      	beq.n	8016b58 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d118      	bne.n	8016b26 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d00c      	beq.n	8016b16 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b04:	68db      	ldr	r3, [r3, #12]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7f6 fdaa 	bl	800d662 <lwip_htonl>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	dc20      	bgt.n	8016b58 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	8b5b      	ldrh	r3, [r3, #26]
 8016b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b24:	e018      	b.n	8016b58 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b2e:	68db      	ldr	r3, [r3, #12]
 8016b30:	685b      	ldr	r3, [r3, #4]
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7f6 fd95 	bl	800d662 <lwip_htonl>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	1ae3      	subs	r3, r4, r3
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	dc0b      	bgt.n	8016b58 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	8b5b      	ldrh	r3, [r3, #26]
 8016b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016b48:	b29a      	uxth	r2, r3
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b4e:	e003      	b.n	8016b58 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f001 ff85 	bl	8018a60 <tcp_send_empty_ack>
 8016b56:	e000      	b.n	8016b5a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b58:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d05b      	beq.n	8016c1a <tcp_receive+0x50a>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b66:	4b60      	ldr	r3, [pc, #384]	; (8016ce8 <tcp_receive+0x5d8>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	1ad3      	subs	r3, r2, r3
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	da54      	bge.n	8016c1a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016b70:	4b5e      	ldr	r3, [pc, #376]	; (8016cec <tcp_receive+0x5dc>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	b29a      	uxth	r2, r3
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	1ad3      	subs	r3, r2, r3
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016b84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016b8e:	10db      	asrs	r3, r3, #3
 8016b90:	b21b      	sxth	r3, r3
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	1ad3      	subs	r3, r2, r3
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016ba2:	b29a      	uxth	r2, r3
 8016ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016ba8:	4413      	add	r3, r2
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	b21a      	sxth	r2, r3
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016bb2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	da05      	bge.n	8016bc6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8016bba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016bbe:	425b      	negs	r3, r3
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016bc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016bd0:	109b      	asrs	r3, r3, #2
 8016bd2:	b21b      	sxth	r3, r3
 8016bd4:	b29b      	uxth	r3, r3
 8016bd6:	1ad3      	subs	r3, r2, r3
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016be4:	b29a      	uxth	r2, r3
 8016be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016bea:	4413      	add	r3, r2
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	b21a      	sxth	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016bfa:	10db      	asrs	r3, r3, #3
 8016bfc:	b21b      	sxth	r3, r3
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	4413      	add	r3, r2
 8016c0a:	b29b      	uxth	r3, r3
 8016c0c:	b21a      	sxth	r2, r3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2200      	movs	r2, #0
 8016c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016c1a:	4b35      	ldr	r3, [pc, #212]	; (8016cf0 <tcp_receive+0x5e0>)
 8016c1c:	881b      	ldrh	r3, [r3, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	f000 84e1 	beq.w	80175e6 <tcp_receive+0xed6>
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	7d1b      	ldrb	r3, [r3, #20]
 8016c28:	2b06      	cmp	r3, #6
 8016c2a:	f200 84dc 	bhi.w	80175e6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c32:	4b30      	ldr	r3, [pc, #192]	; (8016cf4 <tcp_receive+0x5e4>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	1ad3      	subs	r3, r2, r3
 8016c38:	3b01      	subs	r3, #1
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	f2c0 808e 	blt.w	8016d5c <tcp_receive+0x64c>
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c44:	4b2a      	ldr	r3, [pc, #168]	; (8016cf0 <tcp_receive+0x5e0>)
 8016c46:	881b      	ldrh	r3, [r3, #0]
 8016c48:	4619      	mov	r1, r3
 8016c4a:	4b2a      	ldr	r3, [pc, #168]	; (8016cf4 <tcp_receive+0x5e4>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	440b      	add	r3, r1
 8016c50:	1ad3      	subs	r3, r2, r3
 8016c52:	3301      	adds	r3, #1
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f300 8081 	bgt.w	8016d5c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016c5a:	4b27      	ldr	r3, [pc, #156]	; (8016cf8 <tcp_receive+0x5e8>)
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c64:	4b23      	ldr	r3, [pc, #140]	; (8016cf4 <tcp_receive+0x5e4>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	1ad3      	subs	r3, r2, r3
 8016c6a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016c6c:	4b22      	ldr	r3, [pc, #136]	; (8016cf8 <tcp_receive+0x5e8>)
 8016c6e:	685b      	ldr	r3, [r3, #4]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d106      	bne.n	8016c82 <tcp_receive+0x572>
 8016c74:	4b21      	ldr	r3, [pc, #132]	; (8016cfc <tcp_receive+0x5ec>)
 8016c76:	f240 5294 	movw	r2, #1428	; 0x594
 8016c7a:	4921      	ldr	r1, [pc, #132]	; (8016d00 <tcp_receive+0x5f0>)
 8016c7c:	4821      	ldr	r0, [pc, #132]	; (8016d04 <tcp_receive+0x5f4>)
 8016c7e:	f004 fac7 	bl	801b210 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d906      	bls.n	8016c9a <tcp_receive+0x58a>
 8016c8c:	4b1b      	ldr	r3, [pc, #108]	; (8016cfc <tcp_receive+0x5ec>)
 8016c8e:	f240 5295 	movw	r2, #1429	; 0x595
 8016c92:	491d      	ldr	r1, [pc, #116]	; (8016d08 <tcp_receive+0x5f8>)
 8016c94:	481b      	ldr	r0, [pc, #108]	; (8016d04 <tcp_receive+0x5f4>)
 8016c96:	f004 fabb 	bl	801b210 <iprintf>
      off = (u16_t)off32;
 8016c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016ca0:	4b15      	ldr	r3, [pc, #84]	; (8016cf8 <tcp_receive+0x5e8>)
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	891b      	ldrh	r3, [r3, #8]
 8016ca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d906      	bls.n	8016cbc <tcp_receive+0x5ac>
 8016cae:	4b13      	ldr	r3, [pc, #76]	; (8016cfc <tcp_receive+0x5ec>)
 8016cb0:	f240 5297 	movw	r2, #1431	; 0x597
 8016cb4:	4915      	ldr	r1, [pc, #84]	; (8016d0c <tcp_receive+0x5fc>)
 8016cb6:	4813      	ldr	r0, [pc, #76]	; (8016d04 <tcp_receive+0x5f4>)
 8016cb8:	f004 faaa 	bl	801b210 <iprintf>
      inseg.len -= off;
 8016cbc:	4b0e      	ldr	r3, [pc, #56]	; (8016cf8 <tcp_receive+0x5e8>)
 8016cbe:	891a      	ldrh	r2, [r3, #8]
 8016cc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cc4:	1ad3      	subs	r3, r2, r3
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	4b0b      	ldr	r3, [pc, #44]	; (8016cf8 <tcp_receive+0x5e8>)
 8016cca:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016ccc:	4b0a      	ldr	r3, [pc, #40]	; (8016cf8 <tcp_receive+0x5e8>)
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	891a      	ldrh	r2, [r3, #8]
 8016cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016cda:	e029      	b.n	8016d30 <tcp_receive+0x620>
 8016cdc:	0801f55c 	.word	0x0801f55c
 8016ce0:	0801f564 	.word	0x0801f564
 8016ce4:	2400494c 	.word	0x2400494c
 8016ce8:	24004948 	.word	0x24004948
 8016cec:	24008a4c 	.word	0x24008a4c
 8016cf0:	2400494e 	.word	0x2400494e
 8016cf4:	24004944 	.word	0x24004944
 8016cf8:	24004924 	.word	0x24004924
 8016cfc:	0801f1d8 	.word	0x0801f1d8
 8016d00:	0801f56c 	.word	0x0801f56c
 8016d04:	0801f240 	.word	0x0801f240
 8016d08:	0801f57c 	.word	0x0801f57c
 8016d0c:	0801f58c 	.word	0x0801f58c
        off -= p->len;
 8016d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d12:	895b      	ldrh	r3, [r3, #10]
 8016d14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d18:	1ad3      	subs	r3, r2, r3
 8016d1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016d22:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d26:	2200      	movs	r2, #0
 8016d28:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d32:	895b      	ldrh	r3, [r3, #10]
 8016d34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d8e9      	bhi.n	8016d10 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016d3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d40:	4619      	mov	r1, r3
 8016d42:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016d44:	f7fc fa5a 	bl	80131fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d4c:	4a91      	ldr	r2, [pc, #580]	; (8016f94 <tcp_receive+0x884>)
 8016d4e:	6013      	str	r3, [r2, #0]
 8016d50:	4b91      	ldr	r3, [pc, #580]	; (8016f98 <tcp_receive+0x888>)
 8016d52:	68db      	ldr	r3, [r3, #12]
 8016d54:	4a8f      	ldr	r2, [pc, #572]	; (8016f94 <tcp_receive+0x884>)
 8016d56:	6812      	ldr	r2, [r2, #0]
 8016d58:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016d5a:	e00d      	b.n	8016d78 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016d5c:	4b8d      	ldr	r3, [pc, #564]	; (8016f94 <tcp_receive+0x884>)
 8016d5e:	681a      	ldr	r2, [r3, #0]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d64:	1ad3      	subs	r3, r2, r3
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	da06      	bge.n	8016d78 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	8b5b      	ldrh	r3, [r3, #26]
 8016d6e:	f043 0302 	orr.w	r3, r3, #2
 8016d72:	b29a      	uxth	r2, r3
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d78:	4b86      	ldr	r3, [pc, #536]	; (8016f94 <tcp_receive+0x884>)
 8016d7a:	681a      	ldr	r2, [r3, #0]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d80:	1ad3      	subs	r3, r2, r3
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	f2c0 842a 	blt.w	80175dc <tcp_receive+0xecc>
 8016d88:	4b82      	ldr	r3, [pc, #520]	; (8016f94 <tcp_receive+0x884>)
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d90:	6879      	ldr	r1, [r7, #4]
 8016d92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016d94:	440b      	add	r3, r1
 8016d96:	1ad3      	subs	r3, r2, r3
 8016d98:	3301      	adds	r3, #1
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f300 841e 	bgt.w	80175dc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016da4:	4b7b      	ldr	r3, [pc, #492]	; (8016f94 <tcp_receive+0x884>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	f040 829a 	bne.w	80172e2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016dae:	4b7a      	ldr	r3, [pc, #488]	; (8016f98 <tcp_receive+0x888>)
 8016db0:	891c      	ldrh	r4, [r3, #8]
 8016db2:	4b79      	ldr	r3, [pc, #484]	; (8016f98 <tcp_receive+0x888>)
 8016db4:	68db      	ldr	r3, [r3, #12]
 8016db6:	899b      	ldrh	r3, [r3, #12]
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7f6 fc3c 	bl	800d638 <lwip_htons>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	b2db      	uxtb	r3, r3
 8016dc4:	f003 0303 	and.w	r3, r3, #3
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d001      	beq.n	8016dd0 <tcp_receive+0x6c0>
 8016dcc:	2301      	movs	r3, #1
 8016dce:	e000      	b.n	8016dd2 <tcp_receive+0x6c2>
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	4423      	add	r3, r4
 8016dd4:	b29a      	uxth	r2, r3
 8016dd6:	4b71      	ldr	r3, [pc, #452]	; (8016f9c <tcp_receive+0x88c>)
 8016dd8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016dde:	4b6f      	ldr	r3, [pc, #444]	; (8016f9c <tcp_receive+0x88c>)
 8016de0:	881b      	ldrh	r3, [r3, #0]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d275      	bcs.n	8016ed2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016de6:	4b6c      	ldr	r3, [pc, #432]	; (8016f98 <tcp_receive+0x888>)
 8016de8:	68db      	ldr	r3, [r3, #12]
 8016dea:	899b      	ldrh	r3, [r3, #12]
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7f6 fc22 	bl	800d638 <lwip_htons>
 8016df4:	4603      	mov	r3, r0
 8016df6:	b2db      	uxtb	r3, r3
 8016df8:	f003 0301 	and.w	r3, r3, #1
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d01f      	beq.n	8016e40 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016e00:	4b65      	ldr	r3, [pc, #404]	; (8016f98 <tcp_receive+0x888>)
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	899b      	ldrh	r3, [r3, #12]
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	b21b      	sxth	r3, r3
 8016e0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016e0e:	b21c      	sxth	r4, r3
 8016e10:	4b61      	ldr	r3, [pc, #388]	; (8016f98 <tcp_receive+0x888>)
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	899b      	ldrh	r3, [r3, #12]
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7f6 fc0d 	bl	800d638 <lwip_htons>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	b2db      	uxtb	r3, r3
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7f6 fc04 	bl	800d638 <lwip_htons>
 8016e30:	4603      	mov	r3, r0
 8016e32:	b21b      	sxth	r3, r3
 8016e34:	4323      	orrs	r3, r4
 8016e36:	b21a      	sxth	r2, r3
 8016e38:	4b57      	ldr	r3, [pc, #348]	; (8016f98 <tcp_receive+0x888>)
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	b292      	uxth	r2, r2
 8016e3e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e44:	4b54      	ldr	r3, [pc, #336]	; (8016f98 <tcp_receive+0x888>)
 8016e46:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e48:	4b53      	ldr	r3, [pc, #332]	; (8016f98 <tcp_receive+0x888>)
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	899b      	ldrh	r3, [r3, #12]
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7f6 fbf1 	bl	800d638 <lwip_htons>
 8016e56:	4603      	mov	r3, r0
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	f003 0302 	and.w	r3, r3, #2
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d005      	beq.n	8016e6e <tcp_receive+0x75e>
            inseg.len -= 1;
 8016e62:	4b4d      	ldr	r3, [pc, #308]	; (8016f98 <tcp_receive+0x888>)
 8016e64:	891b      	ldrh	r3, [r3, #8]
 8016e66:	3b01      	subs	r3, #1
 8016e68:	b29a      	uxth	r2, r3
 8016e6a:	4b4b      	ldr	r3, [pc, #300]	; (8016f98 <tcp_receive+0x888>)
 8016e6c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016e6e:	4b4a      	ldr	r3, [pc, #296]	; (8016f98 <tcp_receive+0x888>)
 8016e70:	685a      	ldr	r2, [r3, #4]
 8016e72:	4b49      	ldr	r3, [pc, #292]	; (8016f98 <tcp_receive+0x888>)
 8016e74:	891b      	ldrh	r3, [r3, #8]
 8016e76:	4619      	mov	r1, r3
 8016e78:	4610      	mov	r0, r2
 8016e7a:	f7fc f8bf 	bl	8012ffc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016e7e:	4b46      	ldr	r3, [pc, #280]	; (8016f98 <tcp_receive+0x888>)
 8016e80:	891c      	ldrh	r4, [r3, #8]
 8016e82:	4b45      	ldr	r3, [pc, #276]	; (8016f98 <tcp_receive+0x888>)
 8016e84:	68db      	ldr	r3, [r3, #12]
 8016e86:	899b      	ldrh	r3, [r3, #12]
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7f6 fbd4 	bl	800d638 <lwip_htons>
 8016e90:	4603      	mov	r3, r0
 8016e92:	b2db      	uxtb	r3, r3
 8016e94:	f003 0303 	and.w	r3, r3, #3
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d001      	beq.n	8016ea0 <tcp_receive+0x790>
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	e000      	b.n	8016ea2 <tcp_receive+0x792>
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	4423      	add	r3, r4
 8016ea4:	b29a      	uxth	r2, r3
 8016ea6:	4b3d      	ldr	r3, [pc, #244]	; (8016f9c <tcp_receive+0x88c>)
 8016ea8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016eaa:	4b3c      	ldr	r3, [pc, #240]	; (8016f9c <tcp_receive+0x88c>)
 8016eac:	881b      	ldrh	r3, [r3, #0]
 8016eae:	461a      	mov	r2, r3
 8016eb0:	4b38      	ldr	r3, [pc, #224]	; (8016f94 <tcp_receive+0x884>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	441a      	add	r2, r3
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eba:	6879      	ldr	r1, [r7, #4]
 8016ebc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016ebe:	440b      	add	r3, r1
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d006      	beq.n	8016ed2 <tcp_receive+0x7c2>
 8016ec4:	4b36      	ldr	r3, [pc, #216]	; (8016fa0 <tcp_receive+0x890>)
 8016ec6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8016eca:	4936      	ldr	r1, [pc, #216]	; (8016fa4 <tcp_receive+0x894>)
 8016ecc:	4836      	ldr	r0, [pc, #216]	; (8016fa8 <tcp_receive+0x898>)
 8016ece:	f004 f99f 	bl	801b210 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f000 80e7 	beq.w	80170aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016edc:	4b2e      	ldr	r3, [pc, #184]	; (8016f98 <tcp_receive+0x888>)
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	899b      	ldrh	r3, [r3, #12]
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7f6 fba7 	bl	800d638 <lwip_htons>
 8016eea:	4603      	mov	r3, r0
 8016eec:	b2db      	uxtb	r3, r3
 8016eee:	f003 0301 	and.w	r3, r3, #1
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d010      	beq.n	8016f18 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016ef6:	e00a      	b.n	8016f0e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016efc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f02:	681a      	ldr	r2, [r3, #0]
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f7fd fd97 	bl	8014a3c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d1f0      	bne.n	8016ef8 <tcp_receive+0x7e8>
 8016f16:	e0c8      	b.n	80170aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016f1e:	e052      	b.n	8016fc6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	899b      	ldrh	r3, [r3, #12]
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f6 fb85 	bl	800d638 <lwip_htons>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	b2db      	uxtb	r3, r3
 8016f32:	f003 0301 	and.w	r3, r3, #1
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d03d      	beq.n	8016fb6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016f3a:	4b17      	ldr	r3, [pc, #92]	; (8016f98 <tcp_receive+0x888>)
 8016f3c:	68db      	ldr	r3, [r3, #12]
 8016f3e:	899b      	ldrh	r3, [r3, #12]
 8016f40:	b29b      	uxth	r3, r3
 8016f42:	4618      	mov	r0, r3
 8016f44:	f7f6 fb78 	bl	800d638 <lwip_htons>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	b2db      	uxtb	r3, r3
 8016f4c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d130      	bne.n	8016fb6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016f54:	4b10      	ldr	r3, [pc, #64]	; (8016f98 <tcp_receive+0x888>)
 8016f56:	68db      	ldr	r3, [r3, #12]
 8016f58:	899b      	ldrh	r3, [r3, #12]
 8016f5a:	b29c      	uxth	r4, r3
 8016f5c:	2001      	movs	r0, #1
 8016f5e:	f7f6 fb6b 	bl	800d638 <lwip_htons>
 8016f62:	4603      	mov	r3, r0
 8016f64:	461a      	mov	r2, r3
 8016f66:	4b0c      	ldr	r3, [pc, #48]	; (8016f98 <tcp_receive+0x888>)
 8016f68:	68db      	ldr	r3, [r3, #12]
 8016f6a:	4322      	orrs	r2, r4
 8016f6c:	b292      	uxth	r2, r2
 8016f6e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016f70:	4b09      	ldr	r3, [pc, #36]	; (8016f98 <tcp_receive+0x888>)
 8016f72:	891c      	ldrh	r4, [r3, #8]
 8016f74:	4b08      	ldr	r3, [pc, #32]	; (8016f98 <tcp_receive+0x888>)
 8016f76:	68db      	ldr	r3, [r3, #12]
 8016f78:	899b      	ldrh	r3, [r3, #12]
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7f6 fb5b 	bl	800d638 <lwip_htons>
 8016f82:	4603      	mov	r3, r0
 8016f84:	b2db      	uxtb	r3, r3
 8016f86:	f003 0303 	and.w	r3, r3, #3
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00e      	beq.n	8016fac <tcp_receive+0x89c>
 8016f8e:	2301      	movs	r3, #1
 8016f90:	e00d      	b.n	8016fae <tcp_receive+0x89e>
 8016f92:	bf00      	nop
 8016f94:	24004944 	.word	0x24004944
 8016f98:	24004924 	.word	0x24004924
 8016f9c:	2400494e 	.word	0x2400494e
 8016fa0:	0801f1d8 	.word	0x0801f1d8
 8016fa4:	0801f59c 	.word	0x0801f59c
 8016fa8:	0801f240 	.word	0x0801f240
 8016fac:	2300      	movs	r3, #0
 8016fae:	4423      	add	r3, r4
 8016fb0:	b29a      	uxth	r2, r3
 8016fb2:	4b98      	ldr	r3, [pc, #608]	; (8017214 <tcp_receive+0xb04>)
 8016fb4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fb8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016fc0:	6938      	ldr	r0, [r7, #16]
 8016fc2:	f7fd fd3b 	bl	8014a3c <tcp_seg_free>
            while (next &&
 8016fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d00e      	beq.n	8016fea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016fcc:	4b91      	ldr	r3, [pc, #580]	; (8017214 <tcp_receive+0xb04>)
 8016fce:	881b      	ldrh	r3, [r3, #0]
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	4b91      	ldr	r3, [pc, #580]	; (8017218 <tcp_receive+0xb08>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	441a      	add	r2, r3
 8016fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fda:	68db      	ldr	r3, [r3, #12]
 8016fdc:	685b      	ldr	r3, [r3, #4]
 8016fde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016fe0:	8909      	ldrh	r1, [r1, #8]
 8016fe2:	440b      	add	r3, r1
 8016fe4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	da9a      	bge.n	8016f20 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d059      	beq.n	80170a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016ff0:	4b88      	ldr	r3, [pc, #544]	; (8017214 <tcp_receive+0xb04>)
 8016ff2:	881b      	ldrh	r3, [r3, #0]
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	4b88      	ldr	r3, [pc, #544]	; (8017218 <tcp_receive+0xb08>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	441a      	add	r2, r3
 8016ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017004:	2b00      	cmp	r3, #0
 8017006:	dd4d      	ble.n	80170a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801700a:	68db      	ldr	r3, [r3, #12]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	b29a      	uxth	r2, r3
 8017010:	4b81      	ldr	r3, [pc, #516]	; (8017218 <tcp_receive+0xb08>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	b29b      	uxth	r3, r3
 8017016:	1ad3      	subs	r3, r2, r3
 8017018:	b29a      	uxth	r2, r3
 801701a:	4b80      	ldr	r3, [pc, #512]	; (801721c <tcp_receive+0xb0c>)
 801701c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801701e:	4b7f      	ldr	r3, [pc, #508]	; (801721c <tcp_receive+0xb0c>)
 8017020:	68db      	ldr	r3, [r3, #12]
 8017022:	899b      	ldrh	r3, [r3, #12]
 8017024:	b29b      	uxth	r3, r3
 8017026:	4618      	mov	r0, r3
 8017028:	f7f6 fb06 	bl	800d638 <lwip_htons>
 801702c:	4603      	mov	r3, r0
 801702e:	b2db      	uxtb	r3, r3
 8017030:	f003 0302 	and.w	r3, r3, #2
 8017034:	2b00      	cmp	r3, #0
 8017036:	d005      	beq.n	8017044 <tcp_receive+0x934>
                inseg.len -= 1;
 8017038:	4b78      	ldr	r3, [pc, #480]	; (801721c <tcp_receive+0xb0c>)
 801703a:	891b      	ldrh	r3, [r3, #8]
 801703c:	3b01      	subs	r3, #1
 801703e:	b29a      	uxth	r2, r3
 8017040:	4b76      	ldr	r3, [pc, #472]	; (801721c <tcp_receive+0xb0c>)
 8017042:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017044:	4b75      	ldr	r3, [pc, #468]	; (801721c <tcp_receive+0xb0c>)
 8017046:	685a      	ldr	r2, [r3, #4]
 8017048:	4b74      	ldr	r3, [pc, #464]	; (801721c <tcp_receive+0xb0c>)
 801704a:	891b      	ldrh	r3, [r3, #8]
 801704c:	4619      	mov	r1, r3
 801704e:	4610      	mov	r0, r2
 8017050:	f7fb ffd4 	bl	8012ffc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017054:	4b71      	ldr	r3, [pc, #452]	; (801721c <tcp_receive+0xb0c>)
 8017056:	891c      	ldrh	r4, [r3, #8]
 8017058:	4b70      	ldr	r3, [pc, #448]	; (801721c <tcp_receive+0xb0c>)
 801705a:	68db      	ldr	r3, [r3, #12]
 801705c:	899b      	ldrh	r3, [r3, #12]
 801705e:	b29b      	uxth	r3, r3
 8017060:	4618      	mov	r0, r3
 8017062:	f7f6 fae9 	bl	800d638 <lwip_htons>
 8017066:	4603      	mov	r3, r0
 8017068:	b2db      	uxtb	r3, r3
 801706a:	f003 0303 	and.w	r3, r3, #3
 801706e:	2b00      	cmp	r3, #0
 8017070:	d001      	beq.n	8017076 <tcp_receive+0x966>
 8017072:	2301      	movs	r3, #1
 8017074:	e000      	b.n	8017078 <tcp_receive+0x968>
 8017076:	2300      	movs	r3, #0
 8017078:	4423      	add	r3, r4
 801707a:	b29a      	uxth	r2, r3
 801707c:	4b65      	ldr	r3, [pc, #404]	; (8017214 <tcp_receive+0xb04>)
 801707e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017080:	4b64      	ldr	r3, [pc, #400]	; (8017214 <tcp_receive+0xb04>)
 8017082:	881b      	ldrh	r3, [r3, #0]
 8017084:	461a      	mov	r2, r3
 8017086:	4b64      	ldr	r3, [pc, #400]	; (8017218 <tcp_receive+0xb08>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	441a      	add	r2, r3
 801708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801708e:	68db      	ldr	r3, [r3, #12]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	429a      	cmp	r2, r3
 8017094:	d006      	beq.n	80170a4 <tcp_receive+0x994>
 8017096:	4b62      	ldr	r3, [pc, #392]	; (8017220 <tcp_receive+0xb10>)
 8017098:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801709c:	4961      	ldr	r1, [pc, #388]	; (8017224 <tcp_receive+0xb14>)
 801709e:	4862      	ldr	r0, [pc, #392]	; (8017228 <tcp_receive+0xb18>)
 80170a0:	f004 f8b6 	bl	801b210 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170a8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80170aa:	4b5a      	ldr	r3, [pc, #360]	; (8017214 <tcp_receive+0xb04>)
 80170ac:	881b      	ldrh	r3, [r3, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	4b59      	ldr	r3, [pc, #356]	; (8017218 <tcp_receive+0xb08>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	441a      	add	r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80170be:	4b55      	ldr	r3, [pc, #340]	; (8017214 <tcp_receive+0xb04>)
 80170c0:	881b      	ldrh	r3, [r3, #0]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d206      	bcs.n	80170d4 <tcp_receive+0x9c4>
 80170c6:	4b56      	ldr	r3, [pc, #344]	; (8017220 <tcp_receive+0xb10>)
 80170c8:	f240 6207 	movw	r2, #1543	; 0x607
 80170cc:	4957      	ldr	r1, [pc, #348]	; (801722c <tcp_receive+0xb1c>)
 80170ce:	4856      	ldr	r0, [pc, #344]	; (8017228 <tcp_receive+0xb18>)
 80170d0:	f004 f89e 	bl	801b210 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80170d8:	4b4e      	ldr	r3, [pc, #312]	; (8017214 <tcp_receive+0xb04>)
 80170da:	881b      	ldrh	r3, [r3, #0]
 80170dc:	1ad3      	subs	r3, r2, r3
 80170de:	b29a      	uxth	r2, r3
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f7fc ffcd 	bl	8014084 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80170ea:	4b4c      	ldr	r3, [pc, #304]	; (801721c <tcp_receive+0xb0c>)
 80170ec:	685b      	ldr	r3, [r3, #4]
 80170ee:	891b      	ldrh	r3, [r3, #8]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d006      	beq.n	8017102 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80170f4:	4b49      	ldr	r3, [pc, #292]	; (801721c <tcp_receive+0xb0c>)
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	4a4d      	ldr	r2, [pc, #308]	; (8017230 <tcp_receive+0xb20>)
 80170fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80170fc:	4b47      	ldr	r3, [pc, #284]	; (801721c <tcp_receive+0xb0c>)
 80170fe:	2200      	movs	r2, #0
 8017100:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017102:	4b46      	ldr	r3, [pc, #280]	; (801721c <tcp_receive+0xb0c>)
 8017104:	68db      	ldr	r3, [r3, #12]
 8017106:	899b      	ldrh	r3, [r3, #12]
 8017108:	b29b      	uxth	r3, r3
 801710a:	4618      	mov	r0, r3
 801710c:	f7f6 fa94 	bl	800d638 <lwip_htons>
 8017110:	4603      	mov	r3, r0
 8017112:	b2db      	uxtb	r3, r3
 8017114:	f003 0301 	and.w	r3, r3, #1
 8017118:	2b00      	cmp	r3, #0
 801711a:	f000 80b8 	beq.w	801728e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801711e:	4b45      	ldr	r3, [pc, #276]	; (8017234 <tcp_receive+0xb24>)
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	f043 0320 	orr.w	r3, r3, #32
 8017126:	b2da      	uxtb	r2, r3
 8017128:	4b42      	ldr	r3, [pc, #264]	; (8017234 <tcp_receive+0xb24>)
 801712a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801712c:	e0af      	b.n	801728e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017132:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	685b      	ldr	r3, [r3, #4]
 801713c:	4a36      	ldr	r2, [pc, #216]	; (8017218 <tcp_receive+0xb08>)
 801713e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017140:	68bb      	ldr	r3, [r7, #8]
 8017142:	891b      	ldrh	r3, [r3, #8]
 8017144:	461c      	mov	r4, r3
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	68db      	ldr	r3, [r3, #12]
 801714a:	899b      	ldrh	r3, [r3, #12]
 801714c:	b29b      	uxth	r3, r3
 801714e:	4618      	mov	r0, r3
 8017150:	f7f6 fa72 	bl	800d638 <lwip_htons>
 8017154:	4603      	mov	r3, r0
 8017156:	b2db      	uxtb	r3, r3
 8017158:	f003 0303 	and.w	r3, r3, #3
 801715c:	2b00      	cmp	r3, #0
 801715e:	d001      	beq.n	8017164 <tcp_receive+0xa54>
 8017160:	2301      	movs	r3, #1
 8017162:	e000      	b.n	8017166 <tcp_receive+0xa56>
 8017164:	2300      	movs	r3, #0
 8017166:	191a      	adds	r2, r3, r4
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801716c:	441a      	add	r2, r3
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017176:	461c      	mov	r4, r3
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	891b      	ldrh	r3, [r3, #8]
 801717c:	461d      	mov	r5, r3
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	68db      	ldr	r3, [r3, #12]
 8017182:	899b      	ldrh	r3, [r3, #12]
 8017184:	b29b      	uxth	r3, r3
 8017186:	4618      	mov	r0, r3
 8017188:	f7f6 fa56 	bl	800d638 <lwip_htons>
 801718c:	4603      	mov	r3, r0
 801718e:	b2db      	uxtb	r3, r3
 8017190:	f003 0303 	and.w	r3, r3, #3
 8017194:	2b00      	cmp	r3, #0
 8017196:	d001      	beq.n	801719c <tcp_receive+0xa8c>
 8017198:	2301      	movs	r3, #1
 801719a:	e000      	b.n	801719e <tcp_receive+0xa8e>
 801719c:	2300      	movs	r3, #0
 801719e:	442b      	add	r3, r5
 80171a0:	429c      	cmp	r4, r3
 80171a2:	d206      	bcs.n	80171b2 <tcp_receive+0xaa2>
 80171a4:	4b1e      	ldr	r3, [pc, #120]	; (8017220 <tcp_receive+0xb10>)
 80171a6:	f240 622c 	movw	r2, #1580	; 0x62c
 80171aa:	4923      	ldr	r1, [pc, #140]	; (8017238 <tcp_receive+0xb28>)
 80171ac:	481e      	ldr	r0, [pc, #120]	; (8017228 <tcp_receive+0xb18>)
 80171ae:	f004 f82f 	bl	801b210 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	891b      	ldrh	r3, [r3, #8]
 80171b6:	461c      	mov	r4, r3
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	68db      	ldr	r3, [r3, #12]
 80171bc:	899b      	ldrh	r3, [r3, #12]
 80171be:	b29b      	uxth	r3, r3
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7f6 fa39 	bl	800d638 <lwip_htons>
 80171c6:	4603      	mov	r3, r0
 80171c8:	b2db      	uxtb	r3, r3
 80171ca:	f003 0303 	and.w	r3, r3, #3
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d001      	beq.n	80171d6 <tcp_receive+0xac6>
 80171d2:	2301      	movs	r3, #1
 80171d4:	e000      	b.n	80171d8 <tcp_receive+0xac8>
 80171d6:	2300      	movs	r3, #0
 80171d8:	1919      	adds	r1, r3, r4
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80171de:	b28b      	uxth	r3, r1
 80171e0:	1ad3      	subs	r3, r2, r3
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f7fc ff4b 	bl	8014084 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	891b      	ldrh	r3, [r3, #8]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d028      	beq.n	801724a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80171f8:	4b0d      	ldr	r3, [pc, #52]	; (8017230 <tcp_receive+0xb20>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d01d      	beq.n	801723c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017200:	4b0b      	ldr	r3, [pc, #44]	; (8017230 <tcp_receive+0xb20>)
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	685b      	ldr	r3, [r3, #4]
 8017208:	4619      	mov	r1, r3
 801720a:	4610      	mov	r0, r2
 801720c:	f7fc f94a 	bl	80134a4 <pbuf_cat>
 8017210:	e018      	b.n	8017244 <tcp_receive+0xb34>
 8017212:	bf00      	nop
 8017214:	2400494e 	.word	0x2400494e
 8017218:	24004944 	.word	0x24004944
 801721c:	24004924 	.word	0x24004924
 8017220:	0801f1d8 	.word	0x0801f1d8
 8017224:	0801f5d4 	.word	0x0801f5d4
 8017228:	0801f240 	.word	0x0801f240
 801722c:	0801f610 	.word	0x0801f610
 8017230:	24004954 	.word	0x24004954
 8017234:	24004951 	.word	0x24004951
 8017238:	0801f630 	.word	0x0801f630
            } else {
              recv_data = cseg->p;
 801723c:	68bb      	ldr	r3, [r7, #8]
 801723e:	685b      	ldr	r3, [r3, #4]
 8017240:	4a70      	ldr	r2, [pc, #448]	; (8017404 <tcp_receive+0xcf4>)
 8017242:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	2200      	movs	r2, #0
 8017248:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	68db      	ldr	r3, [r3, #12]
 801724e:	899b      	ldrh	r3, [r3, #12]
 8017250:	b29b      	uxth	r3, r3
 8017252:	4618      	mov	r0, r3
 8017254:	f7f6 f9f0 	bl	800d638 <lwip_htons>
 8017258:	4603      	mov	r3, r0
 801725a:	b2db      	uxtb	r3, r3
 801725c:	f003 0301 	and.w	r3, r3, #1
 8017260:	2b00      	cmp	r3, #0
 8017262:	d00d      	beq.n	8017280 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017264:	4b68      	ldr	r3, [pc, #416]	; (8017408 <tcp_receive+0xcf8>)
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	f043 0320 	orr.w	r3, r3, #32
 801726c:	b2da      	uxtb	r2, r3
 801726e:	4b66      	ldr	r3, [pc, #408]	; (8017408 <tcp_receive+0xcf8>)
 8017270:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	7d1b      	ldrb	r3, [r3, #20]
 8017276:	2b04      	cmp	r3, #4
 8017278:	d102      	bne.n	8017280 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	2207      	movs	r2, #7
 801727e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017288:	68b8      	ldr	r0, [r7, #8]
 801728a:	f7fd fbd7 	bl	8014a3c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017292:	2b00      	cmp	r3, #0
 8017294:	d008      	beq.n	80172a8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801729a:	68db      	ldr	r3, [r3, #12]
 801729c:	685a      	ldr	r2, [r3, #4]
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80172a2:	429a      	cmp	r2, r3
 80172a4:	f43f af43 	beq.w	801712e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	8b5b      	ldrh	r3, [r3, #26]
 80172ac:	f003 0301 	and.w	r3, r3, #1
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d00e      	beq.n	80172d2 <tcp_receive+0xbc2>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	8b5b      	ldrh	r3, [r3, #26]
 80172b8:	f023 0301 	bic.w	r3, r3, #1
 80172bc:	b29a      	uxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	835a      	strh	r2, [r3, #26]
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	8b5b      	ldrh	r3, [r3, #26]
 80172c6:	f043 0302 	orr.w	r3, r3, #2
 80172ca:	b29a      	uxth	r2, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80172d0:	e188      	b.n	80175e4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	8b5b      	ldrh	r3, [r3, #26]
 80172d6:	f043 0301 	orr.w	r3, r3, #1
 80172da:	b29a      	uxth	r2, r3
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80172e0:	e180      	b.n	80175e4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d106      	bne.n	80172f8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80172ea:	4848      	ldr	r0, [pc, #288]	; (801740c <tcp_receive+0xcfc>)
 80172ec:	f7fd fbbe 	bl	8014a6c <tcp_seg_copy>
 80172f0:	4602      	mov	r2, r0
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	675a      	str	r2, [r3, #116]	; 0x74
 80172f6:	e16d      	b.n	80175d4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80172f8:	2300      	movs	r3, #0
 80172fa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017300:	63bb      	str	r3, [r7, #56]	; 0x38
 8017302:	e157      	b.n	80175b4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8017304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017306:	68db      	ldr	r3, [r3, #12]
 8017308:	685a      	ldr	r2, [r3, #4]
 801730a:	4b41      	ldr	r3, [pc, #260]	; (8017410 <tcp_receive+0xd00>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	429a      	cmp	r2, r3
 8017310:	d11d      	bne.n	801734e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017312:	4b3e      	ldr	r3, [pc, #248]	; (801740c <tcp_receive+0xcfc>)
 8017314:	891a      	ldrh	r2, [r3, #8]
 8017316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017318:	891b      	ldrh	r3, [r3, #8]
 801731a:	429a      	cmp	r2, r3
 801731c:	f240 814f 	bls.w	80175be <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017320:	483a      	ldr	r0, [pc, #232]	; (801740c <tcp_receive+0xcfc>)
 8017322:	f7fd fba3 	bl	8014a6c <tcp_seg_copy>
 8017326:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	2b00      	cmp	r3, #0
 801732c:	f000 8149 	beq.w	80175c2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8017330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017332:	2b00      	cmp	r3, #0
 8017334:	d003      	beq.n	801733e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017338:	697a      	ldr	r2, [r7, #20]
 801733a:	601a      	str	r2, [r3, #0]
 801733c:	e002      	b.n	8017344 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	697a      	ldr	r2, [r7, #20]
 8017342:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017346:	6978      	ldr	r0, [r7, #20]
 8017348:	f7ff f8de 	bl	8016508 <tcp_oos_insert_segment>
                }
                break;
 801734c:	e139      	b.n	80175c2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017350:	2b00      	cmp	r3, #0
 8017352:	d117      	bne.n	8017384 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017354:	4b2e      	ldr	r3, [pc, #184]	; (8017410 <tcp_receive+0xd00>)
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	685b      	ldr	r3, [r3, #4]
 801735e:	1ad3      	subs	r3, r2, r3
 8017360:	2b00      	cmp	r3, #0
 8017362:	da57      	bge.n	8017414 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017364:	4829      	ldr	r0, [pc, #164]	; (801740c <tcp_receive+0xcfc>)
 8017366:	f7fd fb81 	bl	8014a6c <tcp_seg_copy>
 801736a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801736c:	69bb      	ldr	r3, [r7, #24]
 801736e:	2b00      	cmp	r3, #0
 8017370:	f000 8129 	beq.w	80175c6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	69ba      	ldr	r2, [r7, #24]
 8017378:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801737a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801737c:	69b8      	ldr	r0, [r7, #24]
 801737e:	f7ff f8c3 	bl	8016508 <tcp_oos_insert_segment>
                  }
                  break;
 8017382:	e120      	b.n	80175c6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017384:	4b22      	ldr	r3, [pc, #136]	; (8017410 <tcp_receive+0xd00>)
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801738a:	68db      	ldr	r3, [r3, #12]
 801738c:	685b      	ldr	r3, [r3, #4]
 801738e:	1ad3      	subs	r3, r2, r3
 8017390:	3b01      	subs	r3, #1
 8017392:	2b00      	cmp	r3, #0
 8017394:	db3e      	blt.n	8017414 <tcp_receive+0xd04>
 8017396:	4b1e      	ldr	r3, [pc, #120]	; (8017410 <tcp_receive+0xd00>)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801739c:	68db      	ldr	r3, [r3, #12]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	1ad3      	subs	r3, r2, r3
 80173a2:	3301      	adds	r3, #1
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	dc35      	bgt.n	8017414 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80173a8:	4818      	ldr	r0, [pc, #96]	; (801740c <tcp_receive+0xcfc>)
 80173aa:	f7fd fb5f 	bl	8014a6c <tcp_seg_copy>
 80173ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80173b0:	69fb      	ldr	r3, [r7, #28]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	f000 8109 	beq.w	80175ca <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80173b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173ba:	68db      	ldr	r3, [r3, #12]
 80173bc:	685b      	ldr	r3, [r3, #4]
 80173be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173c0:	8912      	ldrh	r2, [r2, #8]
 80173c2:	441a      	add	r2, r3
 80173c4:	4b12      	ldr	r3, [pc, #72]	; (8017410 <tcp_receive+0xd00>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	1ad3      	subs	r3, r2, r3
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	dd12      	ble.n	80173f4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80173ce:	4b10      	ldr	r3, [pc, #64]	; (8017410 <tcp_receive+0xd00>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	b29a      	uxth	r2, r3
 80173d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173d6:	68db      	ldr	r3, [r3, #12]
 80173d8:	685b      	ldr	r3, [r3, #4]
 80173da:	b29b      	uxth	r3, r3
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	b29a      	uxth	r2, r3
 80173e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80173e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173e6:	685a      	ldr	r2, [r3, #4]
 80173e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173ea:	891b      	ldrh	r3, [r3, #8]
 80173ec:	4619      	mov	r1, r3
 80173ee:	4610      	mov	r0, r2
 80173f0:	f7fb fe04 	bl	8012ffc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80173f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f6:	69fa      	ldr	r2, [r7, #28]
 80173f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80173fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80173fc:	69f8      	ldr	r0, [r7, #28]
 80173fe:	f7ff f883 	bl	8016508 <tcp_oos_insert_segment>
                  }
                  break;
 8017402:	e0e2      	b.n	80175ca <tcp_receive+0xeba>
 8017404:	24004954 	.word	0x24004954
 8017408:	24004951 	.word	0x24004951
 801740c:	24004924 	.word	0x24004924
 8017410:	24004944 	.word	0x24004944
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017416:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	f040 80c6 	bne.w	80175ae <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017422:	4b80      	ldr	r3, [pc, #512]	; (8017624 <tcp_receive+0xf14>)
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017428:	68db      	ldr	r3, [r3, #12]
 801742a:	685b      	ldr	r3, [r3, #4]
 801742c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801742e:	2b00      	cmp	r3, #0
 8017430:	f340 80bd 	ble.w	80175ae <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017436:	68db      	ldr	r3, [r3, #12]
 8017438:	899b      	ldrh	r3, [r3, #12]
 801743a:	b29b      	uxth	r3, r3
 801743c:	4618      	mov	r0, r3
 801743e:	f7f6 f8fb 	bl	800d638 <lwip_htons>
 8017442:	4603      	mov	r3, r0
 8017444:	b2db      	uxtb	r3, r3
 8017446:	f003 0301 	and.w	r3, r3, #1
 801744a:	2b00      	cmp	r3, #0
 801744c:	f040 80bf 	bne.w	80175ce <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017450:	4875      	ldr	r0, [pc, #468]	; (8017628 <tcp_receive+0xf18>)
 8017452:	f7fd fb0b 	bl	8014a6c <tcp_seg_copy>
 8017456:	4602      	mov	r2, r0
 8017458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801745a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	2b00      	cmp	r3, #0
 8017462:	f000 80b6 	beq.w	80175d2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017468:	68db      	ldr	r3, [r3, #12]
 801746a:	685b      	ldr	r3, [r3, #4]
 801746c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801746e:	8912      	ldrh	r2, [r2, #8]
 8017470:	441a      	add	r2, r3
 8017472:	4b6c      	ldr	r3, [pc, #432]	; (8017624 <tcp_receive+0xf14>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	1ad3      	subs	r3, r2, r3
 8017478:	2b00      	cmp	r3, #0
 801747a:	dd12      	ble.n	80174a2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801747c:	4b69      	ldr	r3, [pc, #420]	; (8017624 <tcp_receive+0xf14>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	b29a      	uxth	r2, r3
 8017482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017484:	68db      	ldr	r3, [r3, #12]
 8017486:	685b      	ldr	r3, [r3, #4]
 8017488:	b29b      	uxth	r3, r3
 801748a:	1ad3      	subs	r3, r2, r3
 801748c:	b29a      	uxth	r2, r3
 801748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017490:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017494:	685a      	ldr	r2, [r3, #4]
 8017496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017498:	891b      	ldrh	r3, [r3, #8]
 801749a:	4619      	mov	r1, r3
 801749c:	4610      	mov	r0, r2
 801749e:	f7fb fdad 	bl	8012ffc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80174a2:	4b62      	ldr	r3, [pc, #392]	; (801762c <tcp_receive+0xf1c>)
 80174a4:	881b      	ldrh	r3, [r3, #0]
 80174a6:	461a      	mov	r2, r3
 80174a8:	4b5e      	ldr	r3, [pc, #376]	; (8017624 <tcp_receive+0xf14>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	441a      	add	r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174b2:	6879      	ldr	r1, [r7, #4]
 80174b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80174b6:	440b      	add	r3, r1
 80174b8:	1ad3      	subs	r3, r2, r3
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	f340 8089 	ble.w	80175d2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80174c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	899b      	ldrh	r3, [r3, #12]
 80174c8:	b29b      	uxth	r3, r3
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7f6 f8b4 	bl	800d638 <lwip_htons>
 80174d0:	4603      	mov	r3, r0
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	f003 0301 	and.w	r3, r3, #1
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d022      	beq.n	8017522 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80174dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	68db      	ldr	r3, [r3, #12]
 80174e2:	899b      	ldrh	r3, [r3, #12]
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	b21b      	sxth	r3, r3
 80174e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80174ec:	b21c      	sxth	r4, r3
 80174ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	68db      	ldr	r3, [r3, #12]
 80174f4:	899b      	ldrh	r3, [r3, #12]
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f6 f89d 	bl	800d638 <lwip_htons>
 80174fe:	4603      	mov	r3, r0
 8017500:	b2db      	uxtb	r3, r3
 8017502:	b29b      	uxth	r3, r3
 8017504:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017508:	b29b      	uxth	r3, r3
 801750a:	4618      	mov	r0, r3
 801750c:	f7f6 f894 	bl	800d638 <lwip_htons>
 8017510:	4603      	mov	r3, r0
 8017512:	b21b      	sxth	r3, r3
 8017514:	4323      	orrs	r3, r4
 8017516:	b21a      	sxth	r2, r3
 8017518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	68db      	ldr	r3, [r3, #12]
 801751e:	b292      	uxth	r2, r2
 8017520:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017526:	b29a      	uxth	r2, r3
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801752c:	4413      	add	r3, r2
 801752e:	b299      	uxth	r1, r3
 8017530:	4b3c      	ldr	r3, [pc, #240]	; (8017624 <tcp_receive+0xf14>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	b29a      	uxth	r2, r3
 8017536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	1a8a      	subs	r2, r1, r2
 801753c:	b292      	uxth	r2, r2
 801753e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	685a      	ldr	r2, [r3, #4]
 8017546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	891b      	ldrh	r3, [r3, #8]
 801754c:	4619      	mov	r1, r3
 801754e:	4610      	mov	r0, r2
 8017550:	f7fb fd54 	bl	8012ffc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	891c      	ldrh	r4, [r3, #8]
 801755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	68db      	ldr	r3, [r3, #12]
 8017560:	899b      	ldrh	r3, [r3, #12]
 8017562:	b29b      	uxth	r3, r3
 8017564:	4618      	mov	r0, r3
 8017566:	f7f6 f867 	bl	800d638 <lwip_htons>
 801756a:	4603      	mov	r3, r0
 801756c:	b2db      	uxtb	r3, r3
 801756e:	f003 0303 	and.w	r3, r3, #3
 8017572:	2b00      	cmp	r3, #0
 8017574:	d001      	beq.n	801757a <tcp_receive+0xe6a>
 8017576:	2301      	movs	r3, #1
 8017578:	e000      	b.n	801757c <tcp_receive+0xe6c>
 801757a:	2300      	movs	r3, #0
 801757c:	4423      	add	r3, r4
 801757e:	b29a      	uxth	r2, r3
 8017580:	4b2a      	ldr	r3, [pc, #168]	; (801762c <tcp_receive+0xf1c>)
 8017582:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017584:	4b29      	ldr	r3, [pc, #164]	; (801762c <tcp_receive+0xf1c>)
 8017586:	881b      	ldrh	r3, [r3, #0]
 8017588:	461a      	mov	r2, r3
 801758a:	4b26      	ldr	r3, [pc, #152]	; (8017624 <tcp_receive+0xf14>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	441a      	add	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017594:	6879      	ldr	r1, [r7, #4]
 8017596:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017598:	440b      	add	r3, r1
 801759a:	429a      	cmp	r2, r3
 801759c:	d019      	beq.n	80175d2 <tcp_receive+0xec2>
 801759e:	4b24      	ldr	r3, [pc, #144]	; (8017630 <tcp_receive+0xf20>)
 80175a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80175a4:	4923      	ldr	r1, [pc, #140]	; (8017634 <tcp_receive+0xf24>)
 80175a6:	4824      	ldr	r0, [pc, #144]	; (8017638 <tcp_receive+0xf28>)
 80175a8:	f003 fe32 	bl	801b210 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80175ac:	e011      	b.n	80175d2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80175ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80175b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f47f aea4 	bne.w	8017304 <tcp_receive+0xbf4>
 80175bc:	e00a      	b.n	80175d4 <tcp_receive+0xec4>
                break;
 80175be:	bf00      	nop
 80175c0:	e008      	b.n	80175d4 <tcp_receive+0xec4>
                break;
 80175c2:	bf00      	nop
 80175c4:	e006      	b.n	80175d4 <tcp_receive+0xec4>
                  break;
 80175c6:	bf00      	nop
 80175c8:	e004      	b.n	80175d4 <tcp_receive+0xec4>
                  break;
 80175ca:	bf00      	nop
 80175cc:	e002      	b.n	80175d4 <tcp_receive+0xec4>
                  break;
 80175ce:	bf00      	nop
 80175d0:	e000      	b.n	80175d4 <tcp_receive+0xec4>
                break;
 80175d2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f001 fa43 	bl	8018a60 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80175da:	e003      	b.n	80175e4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f001 fa3f 	bl	8018a60 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80175e2:	e01a      	b.n	801761a <tcp_receive+0xf0a>
 80175e4:	e019      	b.n	801761a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80175e6:	4b0f      	ldr	r3, [pc, #60]	; (8017624 <tcp_receive+0xf14>)
 80175e8:	681a      	ldr	r2, [r3, #0]
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ee:	1ad3      	subs	r3, r2, r3
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	db0a      	blt.n	801760a <tcp_receive+0xefa>
 80175f4:	4b0b      	ldr	r3, [pc, #44]	; (8017624 <tcp_receive+0xf14>)
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fc:	6879      	ldr	r1, [r7, #4]
 80175fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017600:	440b      	add	r3, r1
 8017602:	1ad3      	subs	r3, r2, r3
 8017604:	3301      	adds	r3, #1
 8017606:	2b00      	cmp	r3, #0
 8017608:	dd07      	ble.n	801761a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	8b5b      	ldrh	r3, [r3, #26]
 801760e:	f043 0302 	orr.w	r3, r3, #2
 8017612:	b29a      	uxth	r2, r3
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017618:	e7ff      	b.n	801761a <tcp_receive+0xf0a>
 801761a:	bf00      	nop
 801761c:	3750      	adds	r7, #80	; 0x50
 801761e:	46bd      	mov	sp, r7
 8017620:	bdb0      	pop	{r4, r5, r7, pc}
 8017622:	bf00      	nop
 8017624:	24004944 	.word	0x24004944
 8017628:	24004924 	.word	0x24004924
 801762c:	2400494e 	.word	0x2400494e
 8017630:	0801f1d8 	.word	0x0801f1d8
 8017634:	0801f59c 	.word	0x0801f59c
 8017638:	0801f240 	.word	0x0801f240

0801763c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017642:	4b15      	ldr	r3, [pc, #84]	; (8017698 <tcp_get_next_optbyte+0x5c>)
 8017644:	881b      	ldrh	r3, [r3, #0]
 8017646:	1c5a      	adds	r2, r3, #1
 8017648:	b291      	uxth	r1, r2
 801764a:	4a13      	ldr	r2, [pc, #76]	; (8017698 <tcp_get_next_optbyte+0x5c>)
 801764c:	8011      	strh	r1, [r2, #0]
 801764e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017650:	4b12      	ldr	r3, [pc, #72]	; (801769c <tcp_get_next_optbyte+0x60>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d004      	beq.n	8017662 <tcp_get_next_optbyte+0x26>
 8017658:	4b11      	ldr	r3, [pc, #68]	; (80176a0 <tcp_get_next_optbyte+0x64>)
 801765a:	881b      	ldrh	r3, [r3, #0]
 801765c:	88fa      	ldrh	r2, [r7, #6]
 801765e:	429a      	cmp	r2, r3
 8017660:	d208      	bcs.n	8017674 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017662:	4b10      	ldr	r3, [pc, #64]	; (80176a4 <tcp_get_next_optbyte+0x68>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	3314      	adds	r3, #20
 8017668:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801766a:	88fb      	ldrh	r3, [r7, #6]
 801766c:	683a      	ldr	r2, [r7, #0]
 801766e:	4413      	add	r3, r2
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	e00b      	b.n	801768c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017674:	88fb      	ldrh	r3, [r7, #6]
 8017676:	b2da      	uxtb	r2, r3
 8017678:	4b09      	ldr	r3, [pc, #36]	; (80176a0 <tcp_get_next_optbyte+0x64>)
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	b2db      	uxtb	r3, r3
 801767e:	1ad3      	subs	r3, r2, r3
 8017680:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017682:	4b06      	ldr	r3, [pc, #24]	; (801769c <tcp_get_next_optbyte+0x60>)
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	797b      	ldrb	r3, [r7, #5]
 8017688:	4413      	add	r3, r2
 801768a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801768c:	4618      	mov	r0, r3
 801768e:	370c      	adds	r7, #12
 8017690:	46bd      	mov	sp, r7
 8017692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017696:	4770      	bx	lr
 8017698:	24004940 	.word	0x24004940
 801769c:	2400493c 	.word	0x2400493c
 80176a0:	2400493a 	.word	0x2400493a
 80176a4:	24004934 	.word	0x24004934

080176a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b084      	sub	sp, #16
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d106      	bne.n	80176c4 <tcp_parseopt+0x1c>
 80176b6:	4b31      	ldr	r3, [pc, #196]	; (801777c <tcp_parseopt+0xd4>)
 80176b8:	f240 727d 	movw	r2, #1917	; 0x77d
 80176bc:	4930      	ldr	r1, [pc, #192]	; (8017780 <tcp_parseopt+0xd8>)
 80176be:	4831      	ldr	r0, [pc, #196]	; (8017784 <tcp_parseopt+0xdc>)
 80176c0:	f003 fda6 	bl	801b210 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80176c4:	4b30      	ldr	r3, [pc, #192]	; (8017788 <tcp_parseopt+0xe0>)
 80176c6:	881b      	ldrh	r3, [r3, #0]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d053      	beq.n	8017774 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80176cc:	4b2f      	ldr	r3, [pc, #188]	; (801778c <tcp_parseopt+0xe4>)
 80176ce:	2200      	movs	r2, #0
 80176d0:	801a      	strh	r2, [r3, #0]
 80176d2:	e043      	b.n	801775c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80176d4:	f7ff ffb2 	bl	801763c <tcp_get_next_optbyte>
 80176d8:	4603      	mov	r3, r0
 80176da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80176dc:	7bfb      	ldrb	r3, [r7, #15]
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d03c      	beq.n	801775c <tcp_parseopt+0xb4>
 80176e2:	2b02      	cmp	r3, #2
 80176e4:	d002      	beq.n	80176ec <tcp_parseopt+0x44>
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d03f      	beq.n	801776a <tcp_parseopt+0xc2>
 80176ea:	e026      	b.n	801773a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80176ec:	f7ff ffa6 	bl	801763c <tcp_get_next_optbyte>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b04      	cmp	r3, #4
 80176f4:	d13b      	bne.n	801776e <tcp_parseopt+0xc6>
 80176f6:	4b25      	ldr	r3, [pc, #148]	; (801778c <tcp_parseopt+0xe4>)
 80176f8:	881b      	ldrh	r3, [r3, #0]
 80176fa:	3302      	adds	r3, #2
 80176fc:	4a22      	ldr	r2, [pc, #136]	; (8017788 <tcp_parseopt+0xe0>)
 80176fe:	8812      	ldrh	r2, [r2, #0]
 8017700:	4293      	cmp	r3, r2
 8017702:	dc34      	bgt.n	801776e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017704:	f7ff ff9a 	bl	801763c <tcp_get_next_optbyte>
 8017708:	4603      	mov	r3, r0
 801770a:	b29b      	uxth	r3, r3
 801770c:	021b      	lsls	r3, r3, #8
 801770e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017710:	f7ff ff94 	bl	801763c <tcp_get_next_optbyte>
 8017714:	4603      	mov	r3, r0
 8017716:	b29a      	uxth	r2, r3
 8017718:	89bb      	ldrh	r3, [r7, #12]
 801771a:	4313      	orrs	r3, r2
 801771c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801771e:	89bb      	ldrh	r3, [r7, #12]
 8017720:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017724:	d804      	bhi.n	8017730 <tcp_parseopt+0x88>
 8017726:	89bb      	ldrh	r3, [r7, #12]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d001      	beq.n	8017730 <tcp_parseopt+0x88>
 801772c:	89ba      	ldrh	r2, [r7, #12]
 801772e:	e001      	b.n	8017734 <tcp_parseopt+0x8c>
 8017730:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017738:	e010      	b.n	801775c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801773a:	f7ff ff7f 	bl	801763c <tcp_get_next_optbyte>
 801773e:	4603      	mov	r3, r0
 8017740:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017742:	7afb      	ldrb	r3, [r7, #11]
 8017744:	2b01      	cmp	r3, #1
 8017746:	d914      	bls.n	8017772 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017748:	7afb      	ldrb	r3, [r7, #11]
 801774a:	b29a      	uxth	r2, r3
 801774c:	4b0f      	ldr	r3, [pc, #60]	; (801778c <tcp_parseopt+0xe4>)
 801774e:	881b      	ldrh	r3, [r3, #0]
 8017750:	4413      	add	r3, r2
 8017752:	b29b      	uxth	r3, r3
 8017754:	3b02      	subs	r3, #2
 8017756:	b29a      	uxth	r2, r3
 8017758:	4b0c      	ldr	r3, [pc, #48]	; (801778c <tcp_parseopt+0xe4>)
 801775a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801775c:	4b0b      	ldr	r3, [pc, #44]	; (801778c <tcp_parseopt+0xe4>)
 801775e:	881a      	ldrh	r2, [r3, #0]
 8017760:	4b09      	ldr	r3, [pc, #36]	; (8017788 <tcp_parseopt+0xe0>)
 8017762:	881b      	ldrh	r3, [r3, #0]
 8017764:	429a      	cmp	r2, r3
 8017766:	d3b5      	bcc.n	80176d4 <tcp_parseopt+0x2c>
 8017768:	e004      	b.n	8017774 <tcp_parseopt+0xcc>
          return;
 801776a:	bf00      	nop
 801776c:	e002      	b.n	8017774 <tcp_parseopt+0xcc>
            return;
 801776e:	bf00      	nop
 8017770:	e000      	b.n	8017774 <tcp_parseopt+0xcc>
            return;
 8017772:	bf00      	nop
      }
    }
  }
}
 8017774:	3710      	adds	r7, #16
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	0801f1d8 	.word	0x0801f1d8
 8017780:	0801f658 	.word	0x0801f658
 8017784:	0801f240 	.word	0x0801f240
 8017788:	24004938 	.word	0x24004938
 801778c:	24004940 	.word	0x24004940

08017790 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017790:	b480      	push	{r7}
 8017792:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017794:	4b05      	ldr	r3, [pc, #20]	; (80177ac <tcp_trigger_input_pcb_close+0x1c>)
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	f043 0310 	orr.w	r3, r3, #16
 801779c:	b2da      	uxtb	r2, r3
 801779e:	4b03      	ldr	r3, [pc, #12]	; (80177ac <tcp_trigger_input_pcb_close+0x1c>)
 80177a0:	701a      	strb	r2, [r3, #0]
}
 80177a2:	bf00      	nop
 80177a4:	46bd      	mov	sp, r7
 80177a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177aa:	4770      	bx	lr
 80177ac:	24004951 	.word	0x24004951

080177b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b084      	sub	sp, #16
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d00a      	beq.n	80177d8 <tcp_route+0x28>
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	7a1b      	ldrb	r3, [r3, #8]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d006      	beq.n	80177d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	7a1b      	ldrb	r3, [r3, #8]
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7fb fa10 	bl	8012bf4 <netif_get_by_index>
 80177d4:	4603      	mov	r3, r0
 80177d6:	e003      	b.n	80177e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7f9 f8ad 	bl	8010938 <ip4_route>
 80177de:	4603      	mov	r3, r0
  }
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3710      	adds	r7, #16
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}

080177e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80177e8:	b590      	push	{r4, r7, lr}
 80177ea:	b087      	sub	sp, #28
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	60f8      	str	r0, [r7, #12]
 80177f0:	60b9      	str	r1, [r7, #8]
 80177f2:	603b      	str	r3, [r7, #0]
 80177f4:	4613      	mov	r3, r2
 80177f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d105      	bne.n	801780a <tcp_create_segment+0x22>
 80177fe:	4b44      	ldr	r3, [pc, #272]	; (8017910 <tcp_create_segment+0x128>)
 8017800:	22a3      	movs	r2, #163	; 0xa3
 8017802:	4944      	ldr	r1, [pc, #272]	; (8017914 <tcp_create_segment+0x12c>)
 8017804:	4844      	ldr	r0, [pc, #272]	; (8017918 <tcp_create_segment+0x130>)
 8017806:	f003 fd03 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801780a:	68bb      	ldr	r3, [r7, #8]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d105      	bne.n	801781c <tcp_create_segment+0x34>
 8017810:	4b3f      	ldr	r3, [pc, #252]	; (8017910 <tcp_create_segment+0x128>)
 8017812:	22a4      	movs	r2, #164	; 0xa4
 8017814:	4941      	ldr	r1, [pc, #260]	; (801791c <tcp_create_segment+0x134>)
 8017816:	4840      	ldr	r0, [pc, #256]	; (8017918 <tcp_create_segment+0x130>)
 8017818:	f003 fcfa 	bl	801b210 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801781c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017820:	009b      	lsls	r3, r3, #2
 8017822:	b2db      	uxtb	r3, r3
 8017824:	f003 0304 	and.w	r3, r3, #4
 8017828:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801782a:	2003      	movs	r0, #3
 801782c:	f7fa fe4a 	bl	80124c4 <memp_malloc>
 8017830:	6138      	str	r0, [r7, #16]
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d104      	bne.n	8017842 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017838:	68b8      	ldr	r0, [r7, #8]
 801783a:	f7fb fd65 	bl	8013308 <pbuf_free>
    return NULL;
 801783e:	2300      	movs	r3, #0
 8017840:	e061      	b.n	8017906 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017848:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801784a:	693b      	ldr	r3, [r7, #16]
 801784c:	2200      	movs	r2, #0
 801784e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017850:	693b      	ldr	r3, [r7, #16]
 8017852:	68ba      	ldr	r2, [r7, #8]
 8017854:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	891a      	ldrh	r2, [r3, #8]
 801785a:	7dfb      	ldrb	r3, [r7, #23]
 801785c:	b29b      	uxth	r3, r3
 801785e:	429a      	cmp	r2, r3
 8017860:	d205      	bcs.n	801786e <tcp_create_segment+0x86>
 8017862:	4b2b      	ldr	r3, [pc, #172]	; (8017910 <tcp_create_segment+0x128>)
 8017864:	22b0      	movs	r2, #176	; 0xb0
 8017866:	492e      	ldr	r1, [pc, #184]	; (8017920 <tcp_create_segment+0x138>)
 8017868:	482b      	ldr	r0, [pc, #172]	; (8017918 <tcp_create_segment+0x130>)
 801786a:	f003 fcd1 	bl	801b210 <iprintf>
  seg->len = p->tot_len - optlen;
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	891a      	ldrh	r2, [r3, #8]
 8017872:	7dfb      	ldrb	r3, [r7, #23]
 8017874:	b29b      	uxth	r3, r3
 8017876:	1ad3      	subs	r3, r2, r3
 8017878:	b29a      	uxth	r2, r3
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801787e:	2114      	movs	r1, #20
 8017880:	68b8      	ldr	r0, [r7, #8]
 8017882:	f7fb fcab 	bl	80131dc <pbuf_add_header>
 8017886:	4603      	mov	r3, r0
 8017888:	2b00      	cmp	r3, #0
 801788a:	d004      	beq.n	8017896 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801788c:	6938      	ldr	r0, [r7, #16]
 801788e:	f7fd f8d5 	bl	8014a3c <tcp_seg_free>
    return NULL;
 8017892:	2300      	movs	r3, #0
 8017894:	e037      	b.n	8017906 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017896:	693b      	ldr	r3, [r7, #16]
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	685a      	ldr	r2, [r3, #4]
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	8ada      	ldrh	r2, [r3, #22]
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	68dc      	ldr	r4, [r3, #12]
 80178a8:	4610      	mov	r0, r2
 80178aa:	f7f5 fec5 	bl	800d638 <lwip_htons>
 80178ae:	4603      	mov	r3, r0
 80178b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	8b1a      	ldrh	r2, [r3, #24]
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	68dc      	ldr	r4, [r3, #12]
 80178ba:	4610      	mov	r0, r2
 80178bc:	f7f5 febc 	bl	800d638 <lwip_htons>
 80178c0:	4603      	mov	r3, r0
 80178c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	68dc      	ldr	r4, [r3, #12]
 80178c8:	6838      	ldr	r0, [r7, #0]
 80178ca:	f7f5 feca 	bl	800d662 <lwip_htonl>
 80178ce:	4603      	mov	r3, r0
 80178d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80178d2:	7dfb      	ldrb	r3, [r7, #23]
 80178d4:	089b      	lsrs	r3, r3, #2
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	b29b      	uxth	r3, r3
 80178da:	3305      	adds	r3, #5
 80178dc:	b29b      	uxth	r3, r3
 80178de:	031b      	lsls	r3, r3, #12
 80178e0:	b29a      	uxth	r2, r3
 80178e2:	79fb      	ldrb	r3, [r7, #7]
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	4313      	orrs	r3, r2
 80178e8:	b29a      	uxth	r2, r3
 80178ea:	693b      	ldr	r3, [r7, #16]
 80178ec:	68dc      	ldr	r4, [r3, #12]
 80178ee:	4610      	mov	r0, r2
 80178f0:	f7f5 fea2 	bl	800d638 <lwip_htons>
 80178f4:	4603      	mov	r3, r0
 80178f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	68db      	ldr	r3, [r3, #12]
 80178fc:	2200      	movs	r2, #0
 80178fe:	749a      	strb	r2, [r3, #18]
 8017900:	2200      	movs	r2, #0
 8017902:	74da      	strb	r2, [r3, #19]
  return seg;
 8017904:	693b      	ldr	r3, [r7, #16]
}
 8017906:	4618      	mov	r0, r3
 8017908:	371c      	adds	r7, #28
 801790a:	46bd      	mov	sp, r7
 801790c:	bd90      	pop	{r4, r7, pc}
 801790e:	bf00      	nop
 8017910:	0801f674 	.word	0x0801f674
 8017914:	0801f6c4 	.word	0x0801f6c4
 8017918:	0801f6e4 	.word	0x0801f6e4
 801791c:	0801f70c 	.word	0x0801f70c
 8017920:	0801f730 	.word	0x0801f730

08017924 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017924:	b590      	push	{r4, r7, lr}
 8017926:	b08b      	sub	sp, #44	; 0x2c
 8017928:	af02      	add	r7, sp, #8
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	460b      	mov	r3, r1
 801792e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017930:	2300      	movs	r3, #0
 8017932:	61fb      	str	r3, [r7, #28]
 8017934:	2300      	movs	r3, #0
 8017936:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017938:	2300      	movs	r3, #0
 801793a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d106      	bne.n	8017950 <tcp_split_unsent_seg+0x2c>
 8017942:	4b95      	ldr	r3, [pc, #596]	; (8017b98 <tcp_split_unsent_seg+0x274>)
 8017944:	f240 324b 	movw	r2, #843	; 0x34b
 8017948:	4994      	ldr	r1, [pc, #592]	; (8017b9c <tcp_split_unsent_seg+0x278>)
 801794a:	4895      	ldr	r0, [pc, #596]	; (8017ba0 <tcp_split_unsent_seg+0x27c>)
 801794c:	f003 fc60 	bl	801b210 <iprintf>

  useg = pcb->unsent;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017954:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d102      	bne.n	8017962 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801795c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017960:	e116      	b.n	8017b90 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017962:	887b      	ldrh	r3, [r7, #2]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d109      	bne.n	801797c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017968:	4b8b      	ldr	r3, [pc, #556]	; (8017b98 <tcp_split_unsent_seg+0x274>)
 801796a:	f240 3253 	movw	r2, #851	; 0x353
 801796e:	498d      	ldr	r1, [pc, #564]	; (8017ba4 <tcp_split_unsent_seg+0x280>)
 8017970:	488b      	ldr	r0, [pc, #556]	; (8017ba0 <tcp_split_unsent_seg+0x27c>)
 8017972:	f003 fc4d 	bl	801b210 <iprintf>
    return ERR_VAL;
 8017976:	f06f 0305 	mvn.w	r3, #5
 801797a:	e109      	b.n	8017b90 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801797c:	697b      	ldr	r3, [r7, #20]
 801797e:	891b      	ldrh	r3, [r3, #8]
 8017980:	887a      	ldrh	r2, [r7, #2]
 8017982:	429a      	cmp	r2, r3
 8017984:	d301      	bcc.n	801798a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017986:	2300      	movs	r3, #0
 8017988:	e102      	b.n	8017b90 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801798e:	887a      	ldrh	r2, [r7, #2]
 8017990:	429a      	cmp	r2, r3
 8017992:	d906      	bls.n	80179a2 <tcp_split_unsent_seg+0x7e>
 8017994:	4b80      	ldr	r3, [pc, #512]	; (8017b98 <tcp_split_unsent_seg+0x274>)
 8017996:	f240 325b 	movw	r2, #859	; 0x35b
 801799a:	4983      	ldr	r1, [pc, #524]	; (8017ba8 <tcp_split_unsent_seg+0x284>)
 801799c:	4880      	ldr	r0, [pc, #512]	; (8017ba0 <tcp_split_unsent_seg+0x27c>)
 801799e:	f003 fc37 	bl	801b210 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	891b      	ldrh	r3, [r3, #8]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d106      	bne.n	80179b8 <tcp_split_unsent_seg+0x94>
 80179aa:	4b7b      	ldr	r3, [pc, #492]	; (8017b98 <tcp_split_unsent_seg+0x274>)
 80179ac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80179b0:	497e      	ldr	r1, [pc, #504]	; (8017bac <tcp_split_unsent_seg+0x288>)
 80179b2:	487b      	ldr	r0, [pc, #492]	; (8017ba0 <tcp_split_unsent_seg+0x27c>)
 80179b4:	f003 fc2c 	bl	801b210 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	7a9b      	ldrb	r3, [r3, #10]
 80179bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80179be:	7bfb      	ldrb	r3, [r7, #15]
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	f003 0304 	and.w	r3, r3, #4
 80179c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	891a      	ldrh	r2, [r3, #8]
 80179ce:	887b      	ldrh	r3, [r7, #2]
 80179d0:	1ad3      	subs	r3, r2, r3
 80179d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80179d4:	7bbb      	ldrb	r3, [r7, #14]
 80179d6:	b29a      	uxth	r2, r3
 80179d8:	89bb      	ldrh	r3, [r7, #12]
 80179da:	4413      	add	r3, r2
 80179dc:	b29b      	uxth	r3, r3
 80179de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179e2:	4619      	mov	r1, r3
 80179e4:	2036      	movs	r0, #54	; 0x36
 80179e6:	f7fb f9af 	bl	8012d48 <pbuf_alloc>
 80179ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f000 80b7 	beq.w	8017b62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	891a      	ldrh	r2, [r3, #8]
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	891b      	ldrh	r3, [r3, #8]
 80179fe:	1ad3      	subs	r3, r2, r3
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	887b      	ldrh	r3, [r7, #2]
 8017a04:	4413      	add	r3, r2
 8017a06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	6858      	ldr	r0, [r3, #4]
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	685a      	ldr	r2, [r3, #4]
 8017a10:	7bbb      	ldrb	r3, [r7, #14]
 8017a12:	18d1      	adds	r1, r2, r3
 8017a14:	897b      	ldrh	r3, [r7, #10]
 8017a16:	89ba      	ldrh	r2, [r7, #12]
 8017a18:	f7fb fe7c 	bl	8013714 <pbuf_copy_partial>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	461a      	mov	r2, r3
 8017a20:	89bb      	ldrh	r3, [r7, #12]
 8017a22:	4293      	cmp	r3, r2
 8017a24:	f040 809f 	bne.w	8017b66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	68db      	ldr	r3, [r3, #12]
 8017a2c:	899b      	ldrh	r3, [r3, #12]
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7f5 fe01 	bl	800d638 <lwip_htons>
 8017a36:	4603      	mov	r3, r0
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017a40:	2300      	movs	r3, #0
 8017a42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017a44:	7efb      	ldrb	r3, [r7, #27]
 8017a46:	f003 0308 	and.w	r3, r3, #8
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d007      	beq.n	8017a5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017a4e:	7efb      	ldrb	r3, [r7, #27]
 8017a50:	f023 0308 	bic.w	r3, r3, #8
 8017a54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017a56:	7ebb      	ldrb	r3, [r7, #26]
 8017a58:	f043 0308 	orr.w	r3, r3, #8
 8017a5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017a5e:	7efb      	ldrb	r3, [r7, #27]
 8017a60:	f003 0301 	and.w	r3, r3, #1
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d007      	beq.n	8017a78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017a68:	7efb      	ldrb	r3, [r7, #27]
 8017a6a:	f023 0301 	bic.w	r3, r3, #1
 8017a6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017a70:	7ebb      	ldrb	r3, [r7, #26]
 8017a72:	f043 0301 	orr.w	r3, r3, #1
 8017a76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	68db      	ldr	r3, [r3, #12]
 8017a7c:	685b      	ldr	r3, [r3, #4]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7f5 fdef 	bl	800d662 <lwip_htonl>
 8017a84:	4602      	mov	r2, r0
 8017a86:	887b      	ldrh	r3, [r7, #2]
 8017a88:	18d1      	adds	r1, r2, r3
 8017a8a:	7eba      	ldrb	r2, [r7, #26]
 8017a8c:	7bfb      	ldrb	r3, [r7, #15]
 8017a8e:	9300      	str	r3, [sp, #0]
 8017a90:	460b      	mov	r3, r1
 8017a92:	6939      	ldr	r1, [r7, #16]
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f7ff fea7 	bl	80177e8 <tcp_create_segment>
 8017a9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017a9c:	69fb      	ldr	r3, [r7, #28]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d063      	beq.n	8017b6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	685b      	ldr	r3, [r3, #4]
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f7fb fcbc 	bl	8013424 <pbuf_clen>
 8017aac:	4603      	mov	r3, r0
 8017aae:	461a      	mov	r2, r3
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ab6:	1a9b      	subs	r3, r3, r2
 8017ab8:	b29a      	uxth	r2, r3
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017ac0:	697b      	ldr	r3, [r7, #20]
 8017ac2:	6858      	ldr	r0, [r3, #4]
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	685b      	ldr	r3, [r3, #4]
 8017ac8:	891a      	ldrh	r2, [r3, #8]
 8017aca:	89bb      	ldrh	r3, [r7, #12]
 8017acc:	1ad3      	subs	r3, r2, r3
 8017ace:	b29b      	uxth	r3, r3
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	f7fb fa93 	bl	8012ffc <pbuf_realloc>
  useg->len -= remainder;
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	891a      	ldrh	r2, [r3, #8]
 8017ada:	89bb      	ldrh	r3, [r7, #12]
 8017adc:	1ad3      	subs	r3, r2, r3
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	697b      	ldr	r3, [r7, #20]
 8017ae2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	68db      	ldr	r3, [r3, #12]
 8017ae8:	899b      	ldrh	r3, [r3, #12]
 8017aea:	b29c      	uxth	r4, r3
 8017aec:	7efb      	ldrb	r3, [r7, #27]
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7f5 fda1 	bl	800d638 <lwip_htons>
 8017af6:	4603      	mov	r3, r0
 8017af8:	461a      	mov	r2, r3
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	4322      	orrs	r2, r4
 8017b00:	b292      	uxth	r2, r2
 8017b02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017b04:	697b      	ldr	r3, [r7, #20]
 8017b06:	685b      	ldr	r3, [r3, #4]
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f7fb fc8b 	bl	8013424 <pbuf_clen>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	461a      	mov	r2, r3
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b18:	4413      	add	r3, r2
 8017b1a:	b29a      	uxth	r2, r3
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	685b      	ldr	r3, [r3, #4]
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7fb fc7c 	bl	8013424 <pbuf_clen>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	461a      	mov	r2, r3
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b36:	4413      	add	r3, r2
 8017b38:	b29a      	uxth	r2, r3
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	681a      	ldr	r2, [r3, #0]
 8017b44:	69fb      	ldr	r3, [r7, #28]
 8017b46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	69fa      	ldr	r2, [r7, #28]
 8017b4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017b4e:	69fb      	ldr	r3, [r7, #28]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d103      	bne.n	8017b5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	e016      	b.n	8017b90 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017b62:	bf00      	nop
 8017b64:	e002      	b.n	8017b6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017b66:	bf00      	nop
 8017b68:	e000      	b.n	8017b6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017b6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d006      	beq.n	8017b80 <tcp_split_unsent_seg+0x25c>
 8017b72:	4b09      	ldr	r3, [pc, #36]	; (8017b98 <tcp_split_unsent_seg+0x274>)
 8017b74:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017b78:	490d      	ldr	r1, [pc, #52]	; (8017bb0 <tcp_split_unsent_seg+0x28c>)
 8017b7a:	4809      	ldr	r0, [pc, #36]	; (8017ba0 <tcp_split_unsent_seg+0x27c>)
 8017b7c:	f003 fb48 	bl	801b210 <iprintf>
  if (p != NULL) {
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d002      	beq.n	8017b8c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017b86:	6938      	ldr	r0, [r7, #16]
 8017b88:	f7fb fbbe 	bl	8013308 <pbuf_free>
  }

  return ERR_MEM;
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	3724      	adds	r7, #36	; 0x24
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd90      	pop	{r4, r7, pc}
 8017b98:	0801f674 	.word	0x0801f674
 8017b9c:	0801fa24 	.word	0x0801fa24
 8017ba0:	0801f6e4 	.word	0x0801f6e4
 8017ba4:	0801fa48 	.word	0x0801fa48
 8017ba8:	0801fa6c 	.word	0x0801fa6c
 8017bac:	0801fa7c 	.word	0x0801fa7c
 8017bb0:	0801fa8c 	.word	0x0801fa8c

08017bb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017bb4:	b590      	push	{r4, r7, lr}
 8017bb6:	b085      	sub	sp, #20
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d106      	bne.n	8017bd0 <tcp_send_fin+0x1c>
 8017bc2:	4b21      	ldr	r3, [pc, #132]	; (8017c48 <tcp_send_fin+0x94>)
 8017bc4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017bc8:	4920      	ldr	r1, [pc, #128]	; (8017c4c <tcp_send_fin+0x98>)
 8017bca:	4821      	ldr	r0, [pc, #132]	; (8017c50 <tcp_send_fin+0x9c>)
 8017bcc:	f003 fb20 	bl	801b210 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d02e      	beq.n	8017c36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bdc:	60fb      	str	r3, [r7, #12]
 8017bde:	e002      	b.n	8017be6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d1f8      	bne.n	8017be0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	899b      	ldrh	r3, [r3, #12]
 8017bf4:	b29b      	uxth	r3, r3
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7f5 fd1e 	bl	800d638 <lwip_htons>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	b2db      	uxtb	r3, r3
 8017c00:	f003 0307 	and.w	r3, r3, #7
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d116      	bne.n	8017c36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	899b      	ldrh	r3, [r3, #12]
 8017c0e:	b29c      	uxth	r4, r3
 8017c10:	2001      	movs	r0, #1
 8017c12:	f7f5 fd11 	bl	800d638 <lwip_htons>
 8017c16:	4603      	mov	r3, r0
 8017c18:	461a      	mov	r2, r3
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	68db      	ldr	r3, [r3, #12]
 8017c1e:	4322      	orrs	r2, r4
 8017c20:	b292      	uxth	r2, r2
 8017c22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	8b5b      	ldrh	r3, [r3, #26]
 8017c28:	f043 0320 	orr.w	r3, r3, #32
 8017c2c:	b29a      	uxth	r2, r3
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017c32:	2300      	movs	r3, #0
 8017c34:	e004      	b.n	8017c40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017c36:	2101      	movs	r1, #1
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f000 f80b 	bl	8017c54 <tcp_enqueue_flags>
 8017c3e:	4603      	mov	r3, r0
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3714      	adds	r7, #20
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd90      	pop	{r4, r7, pc}
 8017c48:	0801f674 	.word	0x0801f674
 8017c4c:	0801fa98 	.word	0x0801fa98
 8017c50:	0801f6e4 	.word	0x0801f6e4

08017c54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b08a      	sub	sp, #40	; 0x28
 8017c58:	af02      	add	r7, sp, #8
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	460b      	mov	r3, r1
 8017c5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017c60:	2300      	movs	r3, #0
 8017c62:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017c64:	2300      	movs	r3, #0
 8017c66:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017c68:	78fb      	ldrb	r3, [r7, #3]
 8017c6a:	f003 0303 	and.w	r3, r3, #3
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d106      	bne.n	8017c80 <tcp_enqueue_flags+0x2c>
 8017c72:	4b67      	ldr	r3, [pc, #412]	; (8017e10 <tcp_enqueue_flags+0x1bc>)
 8017c74:	f240 4212 	movw	r2, #1042	; 0x412
 8017c78:	4966      	ldr	r1, [pc, #408]	; (8017e14 <tcp_enqueue_flags+0x1c0>)
 8017c7a:	4867      	ldr	r0, [pc, #412]	; (8017e18 <tcp_enqueue_flags+0x1c4>)
 8017c7c:	f003 fac8 	bl	801b210 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d106      	bne.n	8017c94 <tcp_enqueue_flags+0x40>
 8017c86:	4b62      	ldr	r3, [pc, #392]	; (8017e10 <tcp_enqueue_flags+0x1bc>)
 8017c88:	f240 4213 	movw	r2, #1043	; 0x413
 8017c8c:	4963      	ldr	r1, [pc, #396]	; (8017e1c <tcp_enqueue_flags+0x1c8>)
 8017c8e:	4862      	ldr	r0, [pc, #392]	; (8017e18 <tcp_enqueue_flags+0x1c4>)
 8017c90:	f003 fabe 	bl	801b210 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017c94:	78fb      	ldrb	r3, [r7, #3]
 8017c96:	f003 0302 	and.w	r3, r3, #2
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d001      	beq.n	8017ca2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017ca2:	7ffb      	ldrb	r3, [r7, #31]
 8017ca4:	009b      	lsls	r3, r3, #2
 8017ca6:	b2db      	uxtb	r3, r3
 8017ca8:	f003 0304 	and.w	r3, r3, #4
 8017cac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017cae:	7dfb      	ldrb	r3, [r7, #23]
 8017cb0:	b29b      	uxth	r3, r3
 8017cb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017cb6:	4619      	mov	r1, r3
 8017cb8:	2036      	movs	r0, #54	; 0x36
 8017cba:	f7fb f845 	bl	8012d48 <pbuf_alloc>
 8017cbe:	6138      	str	r0, [r7, #16]
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d109      	bne.n	8017cda <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	8b5b      	ldrh	r3, [r3, #26]
 8017cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cd8:	e095      	b.n	8017e06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	895a      	ldrh	r2, [r3, #10]
 8017cde:	7dfb      	ldrb	r3, [r7, #23]
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d206      	bcs.n	8017cf4 <tcp_enqueue_flags+0xa0>
 8017ce6:	4b4a      	ldr	r3, [pc, #296]	; (8017e10 <tcp_enqueue_flags+0x1bc>)
 8017ce8:	f240 423a 	movw	r2, #1082	; 0x43a
 8017cec:	494c      	ldr	r1, [pc, #304]	; (8017e20 <tcp_enqueue_flags+0x1cc>)
 8017cee:	484a      	ldr	r0, [pc, #296]	; (8017e18 <tcp_enqueue_flags+0x1c4>)
 8017cf0:	f003 fa8e 	bl	801b210 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017cf8:	78fa      	ldrb	r2, [r7, #3]
 8017cfa:	7ffb      	ldrb	r3, [r7, #31]
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	460b      	mov	r3, r1
 8017d00:	6939      	ldr	r1, [r7, #16]
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	f7ff fd70 	bl	80177e8 <tcp_create_segment>
 8017d08:	60f8      	str	r0, [r7, #12]
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d109      	bne.n	8017d24 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	8b5b      	ldrh	r3, [r3, #26]
 8017d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d18:	b29a      	uxth	r2, r3
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d22:	e070      	b.n	8017e06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	f003 0303 	and.w	r3, r3, #3
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d006      	beq.n	8017d3e <tcp_enqueue_flags+0xea>
 8017d30:	4b37      	ldr	r3, [pc, #220]	; (8017e10 <tcp_enqueue_flags+0x1bc>)
 8017d32:	f240 4242 	movw	r2, #1090	; 0x442
 8017d36:	493b      	ldr	r1, [pc, #236]	; (8017e24 <tcp_enqueue_flags+0x1d0>)
 8017d38:	4837      	ldr	r0, [pc, #220]	; (8017e18 <tcp_enqueue_flags+0x1c4>)
 8017d3a:	f003 fa69 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	891b      	ldrh	r3, [r3, #8]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d006      	beq.n	8017d54 <tcp_enqueue_flags+0x100>
 8017d46:	4b32      	ldr	r3, [pc, #200]	; (8017e10 <tcp_enqueue_flags+0x1bc>)
 8017d48:	f240 4243 	movw	r2, #1091	; 0x443
 8017d4c:	4936      	ldr	r1, [pc, #216]	; (8017e28 <tcp_enqueue_flags+0x1d4>)
 8017d4e:	4832      	ldr	r0, [pc, #200]	; (8017e18 <tcp_enqueue_flags+0x1c4>)
 8017d50:	f003 fa5e 	bl	801b210 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d103      	bne.n	8017d64 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	68fa      	ldr	r2, [r7, #12]
 8017d60:	66da      	str	r2, [r3, #108]	; 0x6c
 8017d62:	e00d      	b.n	8017d80 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d68:	61bb      	str	r3, [r7, #24]
 8017d6a:	e002      	b.n	8017d72 <tcp_enqueue_flags+0x11e>
 8017d6c:	69bb      	ldr	r3, [r7, #24]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	61bb      	str	r3, [r7, #24]
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d1f8      	bne.n	8017d6c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017d7a:	69bb      	ldr	r3, [r7, #24]
 8017d7c:	68fa      	ldr	r2, [r7, #12]
 8017d7e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2200      	movs	r2, #0
 8017d84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017d88:	78fb      	ldrb	r3, [r7, #3]
 8017d8a:	f003 0302 	and.w	r3, r3, #2
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d104      	bne.n	8017d9c <tcp_enqueue_flags+0x148>
 8017d92:	78fb      	ldrb	r3, [r7, #3]
 8017d94:	f003 0301 	and.w	r3, r3, #1
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d004      	beq.n	8017da6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017da0:	1c5a      	adds	r2, r3, #1
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017da6:	78fb      	ldrb	r3, [r7, #3]
 8017da8:	f003 0301 	and.w	r3, r3, #1
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d006      	beq.n	8017dbe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	8b5b      	ldrh	r3, [r3, #26]
 8017db4:	f043 0320 	orr.w	r3, r3, #32
 8017db8:	b29a      	uxth	r2, r3
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f7fb fb2e 	bl	8013424 <pbuf_clen>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	461a      	mov	r2, r3
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017dd2:	4413      	add	r3, r2
 8017dd4:	b29a      	uxth	r2, r3
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d00e      	beq.n	8017e04 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d10a      	bne.n	8017e04 <tcp_enqueue_flags+0x1b0>
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d106      	bne.n	8017e04 <tcp_enqueue_flags+0x1b0>
 8017df6:	4b06      	ldr	r3, [pc, #24]	; (8017e10 <tcp_enqueue_flags+0x1bc>)
 8017df8:	f240 4266 	movw	r2, #1126	; 0x466
 8017dfc:	490b      	ldr	r1, [pc, #44]	; (8017e2c <tcp_enqueue_flags+0x1d8>)
 8017dfe:	4806      	ldr	r0, [pc, #24]	; (8017e18 <tcp_enqueue_flags+0x1c4>)
 8017e00:	f003 fa06 	bl	801b210 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017e04:	2300      	movs	r3, #0
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3720      	adds	r7, #32
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	0801f674 	.word	0x0801f674
 8017e14:	0801fab4 	.word	0x0801fab4
 8017e18:	0801f6e4 	.word	0x0801f6e4
 8017e1c:	0801fb0c 	.word	0x0801fb0c
 8017e20:	0801fb2c 	.word	0x0801fb2c
 8017e24:	0801fb68 	.word	0x0801fb68
 8017e28:	0801fb80 	.word	0x0801fb80
 8017e2c:	0801fbac 	.word	0x0801fbac

08017e30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017e30:	b5b0      	push	{r4, r5, r7, lr}
 8017e32:	b08a      	sub	sp, #40	; 0x28
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d106      	bne.n	8017e4c <tcp_output+0x1c>
 8017e3e:	4ba0      	ldr	r3, [pc, #640]	; (80180c0 <tcp_output+0x290>)
 8017e40:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017e44:	499f      	ldr	r1, [pc, #636]	; (80180c4 <tcp_output+0x294>)
 8017e46:	48a0      	ldr	r0, [pc, #640]	; (80180c8 <tcp_output+0x298>)
 8017e48:	f003 f9e2 	bl	801b210 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	7d1b      	ldrb	r3, [r3, #20]
 8017e50:	2b01      	cmp	r3, #1
 8017e52:	d106      	bne.n	8017e62 <tcp_output+0x32>
 8017e54:	4b9a      	ldr	r3, [pc, #616]	; (80180c0 <tcp_output+0x290>)
 8017e56:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8017e5a:	499c      	ldr	r1, [pc, #624]	; (80180cc <tcp_output+0x29c>)
 8017e5c:	489a      	ldr	r0, [pc, #616]	; (80180c8 <tcp_output+0x298>)
 8017e5e:	f003 f9d7 	bl	801b210 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017e62:	4b9b      	ldr	r3, [pc, #620]	; (80180d0 <tcp_output+0x2a0>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	687a      	ldr	r2, [r7, #4]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d101      	bne.n	8017e70 <tcp_output+0x40>
    return ERR_OK;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	e1d2      	b.n	8018216 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	d203      	bcs.n	8017e88 <tcp_output+0x58>
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e86:	e002      	b.n	8017e8e <tcp_output+0x5e>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e8e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e94:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d10b      	bne.n	8017eb4 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	8b5b      	ldrh	r3, [r3, #26]
 8017ea0:	f003 0302 	and.w	r3, r3, #2
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	f000 81a9 	beq.w	80181fc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f000 fdd8 	bl	8018a60 <tcp_send_empty_ack>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	e1b0      	b.n	8018216 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017eb4:	6879      	ldr	r1, [r7, #4]
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	3304      	adds	r3, #4
 8017eba:	461a      	mov	r2, r3
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f7ff fc77 	bl	80177b0 <tcp_route>
 8017ec2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017ec4:	697b      	ldr	r3, [r7, #20]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d102      	bne.n	8017ed0 <tcp_output+0xa0>
    return ERR_RTE;
 8017eca:	f06f 0303 	mvn.w	r3, #3
 8017ece:	e1a2      	b.n	8018216 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d003      	beq.n	8017ede <tcp_output+0xae>
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d111      	bne.n	8017f02 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017ede:	697b      	ldr	r3, [r7, #20]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d002      	beq.n	8017eea <tcp_output+0xba>
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	3304      	adds	r3, #4
 8017ee8:	e000      	b.n	8017eec <tcp_output+0xbc>
 8017eea:	2300      	movs	r3, #0
 8017eec:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017eee:	693b      	ldr	r3, [r7, #16]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d102      	bne.n	8017efa <tcp_output+0xca>
      return ERR_RTE;
 8017ef4:	f06f 0303 	mvn.w	r3, #3
 8017ef8:	e18d      	b.n	8018216 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f04:	68db      	ldr	r3, [r3, #12]
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7f5 fbaa 	bl	800d662 <lwip_htonl>
 8017f0e:	4602      	mov	r2, r0
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f14:	1ad3      	subs	r3, r2, r3
 8017f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f18:	8912      	ldrh	r2, [r2, #8]
 8017f1a:	4413      	add	r3, r2
 8017f1c:	69ba      	ldr	r2, [r7, #24]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d227      	bcs.n	8017f72 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017f28:	461a      	mov	r2, r3
 8017f2a:	69bb      	ldr	r3, [r7, #24]
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d114      	bne.n	8017f5a <tcp_output+0x12a>
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d110      	bne.n	8017f5a <tcp_output+0x12a>
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d10b      	bne.n	8017f5a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	2200      	movs	r2, #0
 8017f46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2200      	movs	r2, #0
 8017f56:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	8b5b      	ldrh	r3, [r3, #26]
 8017f5e:	f003 0302 	and.w	r3, r3, #2
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	f000 814c 	beq.w	8018200 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8017f68:	6878      	ldr	r0, [r7, #4]
 8017f6a:	f000 fd79 	bl	8018a60 <tcp_send_empty_ack>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	e151      	b.n	8018216 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	2200      	movs	r2, #0
 8017f76:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f7e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017f80:	6a3b      	ldr	r3, [r7, #32]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	f000 811b 	beq.w	80181be <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8017f88:	e002      	b.n	8017f90 <tcp_output+0x160>
 8017f8a:	6a3b      	ldr	r3, [r7, #32]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	623b      	str	r3, [r7, #32]
 8017f90:	6a3b      	ldr	r3, [r7, #32]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d1f8      	bne.n	8017f8a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017f98:	e111      	b.n	80181be <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	899b      	ldrh	r3, [r3, #12]
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7f5 fb48 	bl	800d638 <lwip_htons>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	b2db      	uxtb	r3, r3
 8017fac:	f003 0304 	and.w	r3, r3, #4
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d006      	beq.n	8017fc2 <tcp_output+0x192>
 8017fb4:	4b42      	ldr	r3, [pc, #264]	; (80180c0 <tcp_output+0x290>)
 8017fb6:	f240 5237 	movw	r2, #1335	; 0x537
 8017fba:	4946      	ldr	r1, [pc, #280]	; (80180d4 <tcp_output+0x2a4>)
 8017fbc:	4842      	ldr	r0, [pc, #264]	; (80180c8 <tcp_output+0x298>)
 8017fbe:	f003 f927 	bl	801b210 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d01f      	beq.n	801800a <tcp_output+0x1da>
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	8b5b      	ldrh	r3, [r3, #26]
 8017fce:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d119      	bne.n	801800a <tcp_output+0x1da>
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d00b      	beq.n	8017ff6 <tcp_output+0x1c6>
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d110      	bne.n	801800a <tcp_output+0x1da>
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fec:	891a      	ldrh	r2, [r3, #8]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	d209      	bcs.n	801800a <tcp_output+0x1da>
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d004      	beq.n	801800a <tcp_output+0x1da>
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018006:	2b08      	cmp	r3, #8
 8018008:	d901      	bls.n	801800e <tcp_output+0x1de>
 801800a:	2301      	movs	r3, #1
 801800c:	e000      	b.n	8018010 <tcp_output+0x1e0>
 801800e:	2300      	movs	r3, #0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d106      	bne.n	8018022 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	8b5b      	ldrh	r3, [r3, #26]
 8018018:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801801c:	2b00      	cmp	r3, #0
 801801e:	f000 80e3 	beq.w	80181e8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	7d1b      	ldrb	r3, [r3, #20]
 8018026:	2b02      	cmp	r3, #2
 8018028:	d00d      	beq.n	8018046 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801802c:	68db      	ldr	r3, [r3, #12]
 801802e:	899b      	ldrh	r3, [r3, #12]
 8018030:	b29c      	uxth	r4, r3
 8018032:	2010      	movs	r0, #16
 8018034:	f7f5 fb00 	bl	800d638 <lwip_htons>
 8018038:	4603      	mov	r3, r0
 801803a:	461a      	mov	r2, r3
 801803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803e:	68db      	ldr	r3, [r3, #12]
 8018040:	4322      	orrs	r2, r4
 8018042:	b292      	uxth	r2, r2
 8018044:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018046:	697a      	ldr	r2, [r7, #20]
 8018048:	6879      	ldr	r1, [r7, #4]
 801804a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801804c:	f000 f908 	bl	8018260 <tcp_output_segment>
 8018050:	4603      	mov	r3, r0
 8018052:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d009      	beq.n	8018070 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	8b5b      	ldrh	r3, [r3, #26]
 8018060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018064:	b29a      	uxth	r2, r3
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	835a      	strh	r2, [r3, #26]
      return err;
 801806a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801806e:	e0d2      	b.n	8018216 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018072:	681a      	ldr	r2, [r3, #0]
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	7d1b      	ldrb	r3, [r3, #20]
 801807c:	2b02      	cmp	r3, #2
 801807e:	d006      	beq.n	801808e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	8b5b      	ldrh	r3, [r3, #26]
 8018084:	f023 0303 	bic.w	r3, r3, #3
 8018088:	b29a      	uxth	r2, r3
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	685b      	ldr	r3, [r3, #4]
 8018094:	4618      	mov	r0, r3
 8018096:	f7f5 fae4 	bl	800d662 <lwip_htonl>
 801809a:	4604      	mov	r4, r0
 801809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801809e:	891b      	ldrh	r3, [r3, #8]
 80180a0:	461d      	mov	r5, r3
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	68db      	ldr	r3, [r3, #12]
 80180a6:	899b      	ldrh	r3, [r3, #12]
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7f5 fac4 	bl	800d638 <lwip_htons>
 80180b0:	4603      	mov	r3, r0
 80180b2:	b2db      	uxtb	r3, r3
 80180b4:	f003 0303 	and.w	r3, r3, #3
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d00d      	beq.n	80180d8 <tcp_output+0x2a8>
 80180bc:	2301      	movs	r3, #1
 80180be:	e00c      	b.n	80180da <tcp_output+0x2aa>
 80180c0:	0801f674 	.word	0x0801f674
 80180c4:	0801fbd4 	.word	0x0801fbd4
 80180c8:	0801f6e4 	.word	0x0801f6e4
 80180cc:	0801fbec 	.word	0x0801fbec
 80180d0:	24008a5c 	.word	0x24008a5c
 80180d4:	0801fc14 	.word	0x0801fc14
 80180d8:	2300      	movs	r3, #0
 80180da:	442b      	add	r3, r5
 80180dc:	4423      	add	r3, r4
 80180de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	1ad3      	subs	r3, r2, r3
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	da02      	bge.n	80180f2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	68ba      	ldr	r2, [r7, #8]
 80180f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80180f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f4:	891b      	ldrh	r3, [r3, #8]
 80180f6:	461c      	mov	r4, r3
 80180f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	899b      	ldrh	r3, [r3, #12]
 80180fe:	b29b      	uxth	r3, r3
 8018100:	4618      	mov	r0, r3
 8018102:	f7f5 fa99 	bl	800d638 <lwip_htons>
 8018106:	4603      	mov	r3, r0
 8018108:	b2db      	uxtb	r3, r3
 801810a:	f003 0303 	and.w	r3, r3, #3
 801810e:	2b00      	cmp	r3, #0
 8018110:	d001      	beq.n	8018116 <tcp_output+0x2e6>
 8018112:	2301      	movs	r3, #1
 8018114:	e000      	b.n	8018118 <tcp_output+0x2e8>
 8018116:	2300      	movs	r3, #0
 8018118:	4423      	add	r3, r4
 801811a:	2b00      	cmp	r3, #0
 801811c:	d049      	beq.n	80181b2 <tcp_output+0x382>
      seg->next = NULL;
 801811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018120:	2200      	movs	r2, #0
 8018122:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018128:	2b00      	cmp	r3, #0
 801812a:	d105      	bne.n	8018138 <tcp_output+0x308>
        pcb->unacked = seg;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018130:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018134:	623b      	str	r3, [r7, #32]
 8018136:	e03f      	b.n	80181b8 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801813a:	68db      	ldr	r3, [r3, #12]
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	4618      	mov	r0, r3
 8018140:	f7f5 fa8f 	bl	800d662 <lwip_htonl>
 8018144:	4604      	mov	r4, r0
 8018146:	6a3b      	ldr	r3, [r7, #32]
 8018148:	68db      	ldr	r3, [r3, #12]
 801814a:	685b      	ldr	r3, [r3, #4]
 801814c:	4618      	mov	r0, r3
 801814e:	f7f5 fa88 	bl	800d662 <lwip_htonl>
 8018152:	4603      	mov	r3, r0
 8018154:	1ae3      	subs	r3, r4, r3
 8018156:	2b00      	cmp	r3, #0
 8018158:	da24      	bge.n	80181a4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	3370      	adds	r3, #112	; 0x70
 801815e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018160:	e002      	b.n	8018168 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018162:	69fb      	ldr	r3, [r7, #28]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018168:	69fb      	ldr	r3, [r7, #28]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d011      	beq.n	8018194 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	4618      	mov	r0, r3
 801817a:	f7f5 fa72 	bl	800d662 <lwip_htonl>
 801817e:	4604      	mov	r4, r0
 8018180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018182:	68db      	ldr	r3, [r3, #12]
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	4618      	mov	r0, r3
 8018188:	f7f5 fa6b 	bl	800d662 <lwip_htonl>
 801818c:	4603      	mov	r3, r0
 801818e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018190:	2b00      	cmp	r3, #0
 8018192:	dbe6      	blt.n	8018162 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	681a      	ldr	r2, [r3, #0]
 8018198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801819a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801819c:	69fb      	ldr	r3, [r7, #28]
 801819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181a0:	601a      	str	r2, [r3, #0]
 80181a2:	e009      	b.n	80181b8 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80181a4:	6a3b      	ldr	r3, [r7, #32]
 80181a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181a8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80181aa:	6a3b      	ldr	r3, [r7, #32]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	623b      	str	r3, [r7, #32]
 80181b0:	e002      	b.n	80181b8 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80181b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181b4:	f7fc fc42 	bl	8014a3c <tcp_seg_free>
    }
    seg = pcb->unsent;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d012      	beq.n	80181ea <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80181c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c6:	68db      	ldr	r3, [r3, #12]
 80181c8:	685b      	ldr	r3, [r3, #4]
 80181ca:	4618      	mov	r0, r3
 80181cc:	f7f5 fa49 	bl	800d662 <lwip_htonl>
 80181d0:	4602      	mov	r2, r0
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181d6:	1ad3      	subs	r3, r2, r3
 80181d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181da:	8912      	ldrh	r2, [r2, #8]
 80181dc:	4413      	add	r3, r2
  while (seg != NULL &&
 80181de:	69ba      	ldr	r2, [r7, #24]
 80181e0:	429a      	cmp	r2, r3
 80181e2:	f4bf aeda 	bcs.w	8017f9a <tcp_output+0x16a>
 80181e6:	e000      	b.n	80181ea <tcp_output+0x3ba>
      break;
 80181e8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d108      	bne.n	8018204 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2200      	movs	r2, #0
 80181f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80181fa:	e004      	b.n	8018206 <tcp_output+0x3d6>
    goto output_done;
 80181fc:	bf00      	nop
 80181fe:	e002      	b.n	8018206 <tcp_output+0x3d6>
    goto output_done;
 8018200:	bf00      	nop
 8018202:	e000      	b.n	8018206 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018204:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	8b5b      	ldrh	r3, [r3, #26]
 801820a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801820e:	b29a      	uxth	r2, r3
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018214:	2300      	movs	r3, #0
}
 8018216:	4618      	mov	r0, r3
 8018218:	3728      	adds	r7, #40	; 0x28
 801821a:	46bd      	mov	sp, r7
 801821c:	bdb0      	pop	{r4, r5, r7, pc}
 801821e:	bf00      	nop

08018220 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d106      	bne.n	801823c <tcp_output_segment_busy+0x1c>
 801822e:	4b09      	ldr	r3, [pc, #36]	; (8018254 <tcp_output_segment_busy+0x34>)
 8018230:	f240 529a 	movw	r2, #1434	; 0x59a
 8018234:	4908      	ldr	r1, [pc, #32]	; (8018258 <tcp_output_segment_busy+0x38>)
 8018236:	4809      	ldr	r0, [pc, #36]	; (801825c <tcp_output_segment_busy+0x3c>)
 8018238:	f002 ffea 	bl	801b210 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	685b      	ldr	r3, [r3, #4]
 8018240:	7b9b      	ldrb	r3, [r3, #14]
 8018242:	2b01      	cmp	r3, #1
 8018244:	d001      	beq.n	801824a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018246:	2301      	movs	r3, #1
 8018248:	e000      	b.n	801824c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801824a:	2300      	movs	r3, #0
}
 801824c:	4618      	mov	r0, r3
 801824e:	3708      	adds	r7, #8
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}
 8018254:	0801f674 	.word	0x0801f674
 8018258:	0801fc2c 	.word	0x0801fc2c
 801825c:	0801f6e4 	.word	0x0801f6e4

08018260 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018260:	b5b0      	push	{r4, r5, r7, lr}
 8018262:	b08c      	sub	sp, #48	; 0x30
 8018264:	af04      	add	r7, sp, #16
 8018266:	60f8      	str	r0, [r7, #12]
 8018268:	60b9      	str	r1, [r7, #8]
 801826a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d106      	bne.n	8018280 <tcp_output_segment+0x20>
 8018272:	4b64      	ldr	r3, [pc, #400]	; (8018404 <tcp_output_segment+0x1a4>)
 8018274:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018278:	4963      	ldr	r1, [pc, #396]	; (8018408 <tcp_output_segment+0x1a8>)
 801827a:	4864      	ldr	r0, [pc, #400]	; (801840c <tcp_output_segment+0x1ac>)
 801827c:	f002 ffc8 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d106      	bne.n	8018294 <tcp_output_segment+0x34>
 8018286:	4b5f      	ldr	r3, [pc, #380]	; (8018404 <tcp_output_segment+0x1a4>)
 8018288:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801828c:	4960      	ldr	r1, [pc, #384]	; (8018410 <tcp_output_segment+0x1b0>)
 801828e:	485f      	ldr	r0, [pc, #380]	; (801840c <tcp_output_segment+0x1ac>)
 8018290:	f002 ffbe 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d106      	bne.n	80182a8 <tcp_output_segment+0x48>
 801829a:	4b5a      	ldr	r3, [pc, #360]	; (8018404 <tcp_output_segment+0x1a4>)
 801829c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80182a0:	495c      	ldr	r1, [pc, #368]	; (8018414 <tcp_output_segment+0x1b4>)
 80182a2:	485a      	ldr	r0, [pc, #360]	; (801840c <tcp_output_segment+0x1ac>)
 80182a4:	f002 ffb4 	bl	801b210 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80182a8:	68f8      	ldr	r0, [r7, #12]
 80182aa:	f7ff ffb9 	bl	8018220 <tcp_output_segment_busy>
 80182ae:	4603      	mov	r3, r0
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d001      	beq.n	80182b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80182b4:	2300      	movs	r3, #0
 80182b6:	e0a0      	b.n	80183fa <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80182b8:	68bb      	ldr	r3, [r7, #8]
 80182ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	68dc      	ldr	r4, [r3, #12]
 80182c0:	4610      	mov	r0, r2
 80182c2:	f7f5 f9ce 	bl	800d662 <lwip_htonl>
 80182c6:	4603      	mov	r3, r0
 80182c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	68dc      	ldr	r4, [r3, #12]
 80182d2:	4610      	mov	r0, r2
 80182d4:	f7f5 f9b0 	bl	800d638 <lwip_htons>
 80182d8:	4603      	mov	r3, r0
 80182da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182e0:	68ba      	ldr	r2, [r7, #8]
 80182e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80182e4:	441a      	add	r2, r3
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	68db      	ldr	r3, [r3, #12]
 80182ee:	3314      	adds	r3, #20
 80182f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	7a9b      	ldrb	r3, [r3, #10]
 80182f6:	f003 0301 	and.w	r3, r3, #1
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d015      	beq.n	801832a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	3304      	adds	r3, #4
 8018302:	461a      	mov	r2, r3
 8018304:	6879      	ldr	r1, [r7, #4]
 8018306:	f44f 7006 	mov.w	r0, #536	; 0x218
 801830a:	f7fc fe8d 	bl	8015028 <tcp_eff_send_mss_netif>
 801830e:	4603      	mov	r3, r0
 8018310:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018312:	8b7b      	ldrh	r3, [r7, #26]
 8018314:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018318:	4618      	mov	r0, r3
 801831a:	f7f5 f9a2 	bl	800d662 <lwip_htonl>
 801831e:	4602      	mov	r2, r0
 8018320:	69fb      	ldr	r3, [r7, #28]
 8018322:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018324:	69fb      	ldr	r3, [r7, #28]
 8018326:	3304      	adds	r3, #4
 8018328:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018330:	2b00      	cmp	r3, #0
 8018332:	da02      	bge.n	801833a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	2200      	movs	r2, #0
 8018338:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801833a:	68bb      	ldr	r3, [r7, #8]
 801833c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801833e:	2b00      	cmp	r3, #0
 8018340:	d10c      	bne.n	801835c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018342:	4b35      	ldr	r3, [pc, #212]	; (8018418 <tcp_output_segment+0x1b8>)
 8018344:	681a      	ldr	r2, [r3, #0]
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	68db      	ldr	r3, [r3, #12]
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	4618      	mov	r0, r3
 8018352:	f7f5 f986 	bl	800d662 <lwip_htonl>
 8018356:	4602      	mov	r2, r0
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	68db      	ldr	r3, [r3, #12]
 8018360:	461a      	mov	r2, r3
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	685b      	ldr	r3, [r3, #4]
 8018368:	1ad3      	subs	r3, r2, r3
 801836a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	685b      	ldr	r3, [r3, #4]
 8018370:	8959      	ldrh	r1, [r3, #10]
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	685b      	ldr	r3, [r3, #4]
 8018376:	8b3a      	ldrh	r2, [r7, #24]
 8018378:	1a8a      	subs	r2, r1, r2
 801837a:	b292      	uxth	r2, r2
 801837c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	8919      	ldrh	r1, [r3, #8]
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	685b      	ldr	r3, [r3, #4]
 8018388:	8b3a      	ldrh	r2, [r7, #24]
 801838a:	1a8a      	subs	r2, r1, r2
 801838c:	b292      	uxth	r2, r2
 801838e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	68fa      	ldr	r2, [r7, #12]
 8018396:	68d2      	ldr	r2, [r2, #12]
 8018398:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	2200      	movs	r2, #0
 80183a0:	741a      	strb	r2, [r3, #16]
 80183a2:	2200      	movs	r2, #0
 80183a4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	68db      	ldr	r3, [r3, #12]
 80183aa:	f103 0214 	add.w	r2, r3, #20
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	7a9b      	ldrb	r3, [r3, #10]
 80183b2:	009b      	lsls	r3, r3, #2
 80183b4:	f003 0304 	and.w	r3, r3, #4
 80183b8:	4413      	add	r3, r2
 80183ba:	69fa      	ldr	r2, [r7, #28]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d006      	beq.n	80183ce <tcp_output_segment+0x16e>
 80183c0:	4b10      	ldr	r3, [pc, #64]	; (8018404 <tcp_output_segment+0x1a4>)
 80183c2:	f240 621c 	movw	r2, #1564	; 0x61c
 80183c6:	4915      	ldr	r1, [pc, #84]	; (801841c <tcp_output_segment+0x1bc>)
 80183c8:	4810      	ldr	r0, [pc, #64]	; (801840c <tcp_output_segment+0x1ac>)
 80183ca:	f002 ff21 	bl	801b210 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	6858      	ldr	r0, [r3, #4]
 80183d2:	68b9      	ldr	r1, [r7, #8]
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	1d1c      	adds	r4, r3, #4
 80183d8:	68bb      	ldr	r3, [r7, #8]
 80183da:	7add      	ldrb	r5, [r3, #11]
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	7a9b      	ldrb	r3, [r3, #10]
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	9202      	str	r2, [sp, #8]
 80183e4:	2206      	movs	r2, #6
 80183e6:	9201      	str	r2, [sp, #4]
 80183e8:	9300      	str	r3, [sp, #0]
 80183ea:	462b      	mov	r3, r5
 80183ec:	4622      	mov	r2, r4
 80183ee:	f7f8 fc7d 	bl	8010cec <ip4_output_if>
 80183f2:	4603      	mov	r3, r0
 80183f4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80183f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80183fa:	4618      	mov	r0, r3
 80183fc:	3720      	adds	r7, #32
 80183fe:	46bd      	mov	sp, r7
 8018400:	bdb0      	pop	{r4, r5, r7, pc}
 8018402:	bf00      	nop
 8018404:	0801f674 	.word	0x0801f674
 8018408:	0801fc54 	.word	0x0801fc54
 801840c:	0801f6e4 	.word	0x0801f6e4
 8018410:	0801fc74 	.word	0x0801fc74
 8018414:	0801fc94 	.word	0x0801fc94
 8018418:	24008a4c 	.word	0x24008a4c
 801841c:	0801fcb8 	.word	0x0801fcb8

08018420 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018420:	b5b0      	push	{r4, r5, r7, lr}
 8018422:	b084      	sub	sp, #16
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d106      	bne.n	801843c <tcp_rexmit_rto_prepare+0x1c>
 801842e:	4b31      	ldr	r3, [pc, #196]	; (80184f4 <tcp_rexmit_rto_prepare+0xd4>)
 8018430:	f240 6263 	movw	r2, #1635	; 0x663
 8018434:	4930      	ldr	r1, [pc, #192]	; (80184f8 <tcp_rexmit_rto_prepare+0xd8>)
 8018436:	4831      	ldr	r0, [pc, #196]	; (80184fc <tcp_rexmit_rto_prepare+0xdc>)
 8018438:	f002 feea 	bl	801b210 <iprintf>

  if (pcb->unacked == NULL) {
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018440:	2b00      	cmp	r3, #0
 8018442:	d102      	bne.n	801844a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018444:	f06f 0305 	mvn.w	r3, #5
 8018448:	e050      	b.n	80184ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801844e:	60fb      	str	r3, [r7, #12]
 8018450:	e00b      	b.n	801846a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018452:	68f8      	ldr	r0, [r7, #12]
 8018454:	f7ff fee4 	bl	8018220 <tcp_output_segment_busy>
 8018458:	4603      	mov	r3, r0
 801845a:	2b00      	cmp	r3, #0
 801845c:	d002      	beq.n	8018464 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801845e:	f06f 0305 	mvn.w	r3, #5
 8018462:	e043      	b.n	80184ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	60fb      	str	r3, [r7, #12]
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d1ef      	bne.n	8018452 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f7ff fed4 	bl	8018220 <tcp_output_segment_busy>
 8018478:	4603      	mov	r3, r0
 801847a:	2b00      	cmp	r3, #0
 801847c:	d002      	beq.n	8018484 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801847e:	f06f 0305 	mvn.w	r3, #5
 8018482:	e033      	b.n	80184ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2200      	movs	r2, #0
 8018498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	8b5b      	ldrh	r3, [r3, #26]
 801849e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80184a2:	b29a      	uxth	r2, r3
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	68db      	ldr	r3, [r3, #12]
 80184ac:	685b      	ldr	r3, [r3, #4]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7f5 f8d7 	bl	800d662 <lwip_htonl>
 80184b4:	4604      	mov	r4, r0
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	891b      	ldrh	r3, [r3, #8]
 80184ba:	461d      	mov	r5, r3
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	68db      	ldr	r3, [r3, #12]
 80184c0:	899b      	ldrh	r3, [r3, #12]
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7f5 f8b7 	bl	800d638 <lwip_htons>
 80184ca:	4603      	mov	r3, r0
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	f003 0303 	and.w	r3, r3, #3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d001      	beq.n	80184da <tcp_rexmit_rto_prepare+0xba>
 80184d6:	2301      	movs	r3, #1
 80184d8:	e000      	b.n	80184dc <tcp_rexmit_rto_prepare+0xbc>
 80184da:	2300      	movs	r3, #0
 80184dc:	442b      	add	r3, r5
 80184de:	18e2      	adds	r2, r4, r3
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2200      	movs	r2, #0
 80184e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80184ea:	2300      	movs	r3, #0
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	3710      	adds	r7, #16
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bdb0      	pop	{r4, r5, r7, pc}
 80184f4:	0801f674 	.word	0x0801f674
 80184f8:	0801fccc 	.word	0x0801fccc
 80184fc:	0801f6e4 	.word	0x0801f6e4

08018500 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d106      	bne.n	801851c <tcp_rexmit_rto_commit+0x1c>
 801850e:	4b0d      	ldr	r3, [pc, #52]	; (8018544 <tcp_rexmit_rto_commit+0x44>)
 8018510:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018514:	490c      	ldr	r1, [pc, #48]	; (8018548 <tcp_rexmit_rto_commit+0x48>)
 8018516:	480d      	ldr	r0, [pc, #52]	; (801854c <tcp_rexmit_rto_commit+0x4c>)
 8018518:	f002 fe7a 	bl	801b210 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018522:	2bff      	cmp	r3, #255	; 0xff
 8018524:	d007      	beq.n	8018536 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801852c:	3301      	adds	r3, #1
 801852e:	b2da      	uxtb	r2, r3
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018536:	6878      	ldr	r0, [r7, #4]
 8018538:	f7ff fc7a 	bl	8017e30 <tcp_output>
}
 801853c:	bf00      	nop
 801853e:	3708      	adds	r7, #8
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}
 8018544:	0801f674 	.word	0x0801f674
 8018548:	0801fcf0 	.word	0x0801fcf0
 801854c:	0801f6e4 	.word	0x0801f6e4

08018550 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b082      	sub	sp, #8
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d106      	bne.n	801856c <tcp_rexmit_rto+0x1c>
 801855e:	4b0a      	ldr	r3, [pc, #40]	; (8018588 <tcp_rexmit_rto+0x38>)
 8018560:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018564:	4909      	ldr	r1, [pc, #36]	; (801858c <tcp_rexmit_rto+0x3c>)
 8018566:	480a      	ldr	r0, [pc, #40]	; (8018590 <tcp_rexmit_rto+0x40>)
 8018568:	f002 fe52 	bl	801b210 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f7ff ff57 	bl	8018420 <tcp_rexmit_rto_prepare>
 8018572:	4603      	mov	r3, r0
 8018574:	2b00      	cmp	r3, #0
 8018576:	d102      	bne.n	801857e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	f7ff ffc1 	bl	8018500 <tcp_rexmit_rto_commit>
  }
}
 801857e:	bf00      	nop
 8018580:	3708      	adds	r7, #8
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}
 8018586:	bf00      	nop
 8018588:	0801f674 	.word	0x0801f674
 801858c:	0801fd14 	.word	0x0801fd14
 8018590:	0801f6e4 	.word	0x0801f6e4

08018594 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018594:	b590      	push	{r4, r7, lr}
 8018596:	b085      	sub	sp, #20
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d106      	bne.n	80185b0 <tcp_rexmit+0x1c>
 80185a2:	4b2f      	ldr	r3, [pc, #188]	; (8018660 <tcp_rexmit+0xcc>)
 80185a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80185a8:	492e      	ldr	r1, [pc, #184]	; (8018664 <tcp_rexmit+0xd0>)
 80185aa:	482f      	ldr	r0, [pc, #188]	; (8018668 <tcp_rexmit+0xd4>)
 80185ac:	f002 fe30 	bl	801b210 <iprintf>

  if (pcb->unacked == NULL) {
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d102      	bne.n	80185be <tcp_rexmit+0x2a>
    return ERR_VAL;
 80185b8:	f06f 0305 	mvn.w	r3, #5
 80185bc:	e04c      	b.n	8018658 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80185c4:	68b8      	ldr	r0, [r7, #8]
 80185c6:	f7ff fe2b 	bl	8018220 <tcp_output_segment_busy>
 80185ca:	4603      	mov	r3, r0
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d002      	beq.n	80185d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80185d0:	f06f 0305 	mvn.w	r3, #5
 80185d4:	e040      	b.n	8018658 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	681a      	ldr	r2, [r3, #0]
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	336c      	adds	r3, #108	; 0x6c
 80185e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80185e4:	e002      	b.n	80185ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d011      	beq.n	8018618 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	685b      	ldr	r3, [r3, #4]
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7f5 f830 	bl	800d662 <lwip_htonl>
 8018602:	4604      	mov	r4, r0
 8018604:	68bb      	ldr	r3, [r7, #8]
 8018606:	68db      	ldr	r3, [r3, #12]
 8018608:	685b      	ldr	r3, [r3, #4]
 801860a:	4618      	mov	r0, r3
 801860c:	f7f5 f829 	bl	800d662 <lwip_htonl>
 8018610:	4603      	mov	r3, r0
 8018612:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018614:	2b00      	cmp	r3, #0
 8018616:	dbe6      	blt.n	80185e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	681a      	ldr	r2, [r3, #0]
 801861c:	68bb      	ldr	r3, [r7, #8]
 801861e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	68ba      	ldr	r2, [r7, #8]
 8018624:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d103      	bne.n	8018636 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2200      	movs	r2, #0
 8018632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801863c:	2bff      	cmp	r3, #255	; 0xff
 801863e:	d007      	beq.n	8018650 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018646:	3301      	adds	r3, #1
 8018648:	b2da      	uxtb	r2, r3
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2200      	movs	r2, #0
 8018654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018656:	2300      	movs	r3, #0
}
 8018658:	4618      	mov	r0, r3
 801865a:	3714      	adds	r7, #20
 801865c:	46bd      	mov	sp, r7
 801865e:	bd90      	pop	{r4, r7, pc}
 8018660:	0801f674 	.word	0x0801f674
 8018664:	0801fd30 	.word	0x0801fd30
 8018668:	0801f6e4 	.word	0x0801f6e4

0801866c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b082      	sub	sp, #8
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d106      	bne.n	8018688 <tcp_rexmit_fast+0x1c>
 801867a:	4b2f      	ldr	r3, [pc, #188]	; (8018738 <tcp_rexmit_fast+0xcc>)
 801867c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018680:	492e      	ldr	r1, [pc, #184]	; (801873c <tcp_rexmit_fast+0xd0>)
 8018682:	482f      	ldr	r0, [pc, #188]	; (8018740 <tcp_rexmit_fast+0xd4>)
 8018684:	f002 fdc4 	bl	801b210 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801868c:	2b00      	cmp	r3, #0
 801868e:	d04f      	beq.n	8018730 <tcp_rexmit_fast+0xc4>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	8b5b      	ldrh	r3, [r3, #26]
 8018694:	f003 0304 	and.w	r3, r3, #4
 8018698:	2b00      	cmp	r3, #0
 801869a:	d149      	bne.n	8018730 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801869c:	6878      	ldr	r0, [r7, #4]
 801869e:	f7ff ff79 	bl	8018594 <tcp_rexmit>
 80186a2:	4603      	mov	r3, r0
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d143      	bne.n	8018730 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80186b4:	429a      	cmp	r2, r3
 80186b6:	d208      	bcs.n	80186ca <tcp_rexmit_fast+0x5e>
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80186be:	2b00      	cmp	r3, #0
 80186c0:	da00      	bge.n	80186c4 <tcp_rexmit_fast+0x58>
 80186c2:	3301      	adds	r3, #1
 80186c4:	105b      	asrs	r3, r3, #1
 80186c6:	b29b      	uxth	r3, r3
 80186c8:	e007      	b.n	80186da <tcp_rexmit_fast+0x6e>
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	da00      	bge.n	80186d6 <tcp_rexmit_fast+0x6a>
 80186d4:	3301      	adds	r3, #1
 80186d6:	105b      	asrs	r3, r3, #1
 80186d8:	b29b      	uxth	r3, r3
 80186da:	687a      	ldr	r2, [r7, #4]
 80186dc:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80186e6:	461a      	mov	r2, r3
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186ec:	005b      	lsls	r3, r3, #1
 80186ee:	429a      	cmp	r2, r3
 80186f0:	d206      	bcs.n	8018700 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186f6:	005b      	lsls	r3, r3, #1
 80186f8:	b29a      	uxth	r2, r3
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801870a:	4619      	mov	r1, r3
 801870c:	0049      	lsls	r1, r1, #1
 801870e:	440b      	add	r3, r1
 8018710:	b29b      	uxth	r3, r3
 8018712:	4413      	add	r3, r2
 8018714:	b29a      	uxth	r2, r3
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	8b5b      	ldrh	r3, [r3, #26]
 8018720:	f043 0304 	orr.w	r3, r3, #4
 8018724:	b29a      	uxth	r2, r3
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	0801f674 	.word	0x0801f674
 801873c:	0801fd48 	.word	0x0801fd48
 8018740:	0801f6e4 	.word	0x0801f6e4

08018744 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b086      	sub	sp, #24
 8018748:	af00      	add	r7, sp, #0
 801874a:	60f8      	str	r0, [r7, #12]
 801874c:	607b      	str	r3, [r7, #4]
 801874e:	460b      	mov	r3, r1
 8018750:	817b      	strh	r3, [r7, #10]
 8018752:	4613      	mov	r3, r2
 8018754:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018756:	897a      	ldrh	r2, [r7, #10]
 8018758:	893b      	ldrh	r3, [r7, #8]
 801875a:	4413      	add	r3, r2
 801875c:	b29b      	uxth	r3, r3
 801875e:	3314      	adds	r3, #20
 8018760:	b29b      	uxth	r3, r3
 8018762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018766:	4619      	mov	r1, r3
 8018768:	2022      	movs	r0, #34	; 0x22
 801876a:	f7fa faed 	bl	8012d48 <pbuf_alloc>
 801876e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d04e      	beq.n	8018814 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	895b      	ldrh	r3, [r3, #10]
 801877a:	461a      	mov	r2, r3
 801877c:	897b      	ldrh	r3, [r7, #10]
 801877e:	3314      	adds	r3, #20
 8018780:	429a      	cmp	r2, r3
 8018782:	da06      	bge.n	8018792 <tcp_output_alloc_header_common+0x4e>
 8018784:	4b26      	ldr	r3, [pc, #152]	; (8018820 <tcp_output_alloc_header_common+0xdc>)
 8018786:	f240 7224 	movw	r2, #1828	; 0x724
 801878a:	4926      	ldr	r1, [pc, #152]	; (8018824 <tcp_output_alloc_header_common+0xe0>)
 801878c:	4826      	ldr	r0, [pc, #152]	; (8018828 <tcp_output_alloc_header_common+0xe4>)
 801878e:	f002 fd3f 	bl	801b210 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018792:	697b      	ldr	r3, [r7, #20]
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018798:	8c3b      	ldrh	r3, [r7, #32]
 801879a:	4618      	mov	r0, r3
 801879c:	f7f4 ff4c 	bl	800d638 <lwip_htons>
 80187a0:	4603      	mov	r3, r0
 80187a2:	461a      	mov	r2, r3
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80187a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187aa:	4618      	mov	r0, r3
 80187ac:	f7f4 ff44 	bl	800d638 <lwip_htons>
 80187b0:	4603      	mov	r3, r0
 80187b2:	461a      	mov	r2, r3
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80187b8:	693b      	ldr	r3, [r7, #16]
 80187ba:	687a      	ldr	r2, [r7, #4]
 80187bc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80187be:	68f8      	ldr	r0, [r7, #12]
 80187c0:	f7f4 ff4f 	bl	800d662 <lwip_htonl>
 80187c4:	4602      	mov	r2, r0
 80187c6:	693b      	ldr	r3, [r7, #16]
 80187c8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80187ca:	897b      	ldrh	r3, [r7, #10]
 80187cc:	089b      	lsrs	r3, r3, #2
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	3305      	adds	r3, #5
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	031b      	lsls	r3, r3, #12
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80187dc:	b29b      	uxth	r3, r3
 80187de:	4313      	orrs	r3, r2
 80187e0:	b29b      	uxth	r3, r3
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f4 ff28 	bl	800d638 <lwip_htons>
 80187e8:	4603      	mov	r3, r0
 80187ea:	461a      	mov	r2, r3
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80187f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7f4 ff20 	bl	800d638 <lwip_htons>
 80187f8:	4603      	mov	r3, r0
 80187fa:	461a      	mov	r2, r3
 80187fc:	693b      	ldr	r3, [r7, #16]
 80187fe:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	2200      	movs	r2, #0
 8018804:	741a      	strb	r2, [r3, #16]
 8018806:	2200      	movs	r2, #0
 8018808:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801880a:	693b      	ldr	r3, [r7, #16]
 801880c:	2200      	movs	r2, #0
 801880e:	749a      	strb	r2, [r3, #18]
 8018810:	2200      	movs	r2, #0
 8018812:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018814:	697b      	ldr	r3, [r7, #20]
}
 8018816:	4618      	mov	r0, r3
 8018818:	3718      	adds	r7, #24
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	0801f674 	.word	0x0801f674
 8018824:	0801fd68 	.word	0x0801fd68
 8018828:	0801f6e4 	.word	0x0801f6e4

0801882c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801882c:	b5b0      	push	{r4, r5, r7, lr}
 801882e:	b08a      	sub	sp, #40	; 0x28
 8018830:	af04      	add	r7, sp, #16
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	607b      	str	r3, [r7, #4]
 8018836:	460b      	mov	r3, r1
 8018838:	817b      	strh	r3, [r7, #10]
 801883a:	4613      	mov	r3, r2
 801883c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d106      	bne.n	8018852 <tcp_output_alloc_header+0x26>
 8018844:	4b15      	ldr	r3, [pc, #84]	; (801889c <tcp_output_alloc_header+0x70>)
 8018846:	f240 7242 	movw	r2, #1858	; 0x742
 801884a:	4915      	ldr	r1, [pc, #84]	; (80188a0 <tcp_output_alloc_header+0x74>)
 801884c:	4815      	ldr	r0, [pc, #84]	; (80188a4 <tcp_output_alloc_header+0x78>)
 801884e:	f002 fcdf 	bl	801b210 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	8adb      	ldrh	r3, [r3, #22]
 801885a:	68fa      	ldr	r2, [r7, #12]
 801885c:	8b12      	ldrh	r2, [r2, #24]
 801885e:	68f9      	ldr	r1, [r7, #12]
 8018860:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018862:	893d      	ldrh	r5, [r7, #8]
 8018864:	897c      	ldrh	r4, [r7, #10]
 8018866:	9103      	str	r1, [sp, #12]
 8018868:	2110      	movs	r1, #16
 801886a:	9102      	str	r1, [sp, #8]
 801886c:	9201      	str	r2, [sp, #4]
 801886e:	9300      	str	r3, [sp, #0]
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	462a      	mov	r2, r5
 8018874:	4621      	mov	r1, r4
 8018876:	f7ff ff65 	bl	8018744 <tcp_output_alloc_header_common>
 801887a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801887c:	697b      	ldr	r3, [r7, #20]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d006      	beq.n	8018890 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018886:	68fa      	ldr	r2, [r7, #12]
 8018888:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801888a:	441a      	add	r2, r3
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018890:	697b      	ldr	r3, [r7, #20]
}
 8018892:	4618      	mov	r0, r3
 8018894:	3718      	adds	r7, #24
 8018896:	46bd      	mov	sp, r7
 8018898:	bdb0      	pop	{r4, r5, r7, pc}
 801889a:	bf00      	nop
 801889c:	0801f674 	.word	0x0801f674
 80188a0:	0801fd98 	.word	0x0801fd98
 80188a4:	0801f6e4 	.word	0x0801f6e4

080188a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b088      	sub	sp, #32
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	60f8      	str	r0, [r7, #12]
 80188b0:	60b9      	str	r1, [r7, #8]
 80188b2:	4611      	mov	r1, r2
 80188b4:	461a      	mov	r2, r3
 80188b6:	460b      	mov	r3, r1
 80188b8:	71fb      	strb	r3, [r7, #7]
 80188ba:	4613      	mov	r3, r2
 80188bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80188be:	2300      	movs	r3, #0
 80188c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80188c2:	68bb      	ldr	r3, [r7, #8]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d106      	bne.n	80188d6 <tcp_output_fill_options+0x2e>
 80188c8:	4b13      	ldr	r3, [pc, #76]	; (8018918 <tcp_output_fill_options+0x70>)
 80188ca:	f240 7256 	movw	r2, #1878	; 0x756
 80188ce:	4913      	ldr	r1, [pc, #76]	; (801891c <tcp_output_fill_options+0x74>)
 80188d0:	4813      	ldr	r0, [pc, #76]	; (8018920 <tcp_output_fill_options+0x78>)
 80188d2:	f002 fc9d 	bl	801b210 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	685b      	ldr	r3, [r3, #4]
 80188da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80188dc:	69bb      	ldr	r3, [r7, #24]
 80188de:	3314      	adds	r3, #20
 80188e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80188e2:	69bb      	ldr	r3, [r7, #24]
 80188e4:	f103 0214 	add.w	r2, r3, #20
 80188e8:	8bfb      	ldrh	r3, [r7, #30]
 80188ea:	009b      	lsls	r3, r3, #2
 80188ec:	4619      	mov	r1, r3
 80188ee:	79fb      	ldrb	r3, [r7, #7]
 80188f0:	009b      	lsls	r3, r3, #2
 80188f2:	f003 0304 	and.w	r3, r3, #4
 80188f6:	440b      	add	r3, r1
 80188f8:	4413      	add	r3, r2
 80188fa:	697a      	ldr	r2, [r7, #20]
 80188fc:	429a      	cmp	r2, r3
 80188fe:	d006      	beq.n	801890e <tcp_output_fill_options+0x66>
 8018900:	4b05      	ldr	r3, [pc, #20]	; (8018918 <tcp_output_fill_options+0x70>)
 8018902:	f240 7275 	movw	r2, #1909	; 0x775
 8018906:	4907      	ldr	r1, [pc, #28]	; (8018924 <tcp_output_fill_options+0x7c>)
 8018908:	4805      	ldr	r0, [pc, #20]	; (8018920 <tcp_output_fill_options+0x78>)
 801890a:	f002 fc81 	bl	801b210 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801890e:	bf00      	nop
 8018910:	3720      	adds	r7, #32
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	0801f674 	.word	0x0801f674
 801891c:	0801fdc0 	.word	0x0801fdc0
 8018920:	0801f6e4 	.word	0x0801f6e4
 8018924:	0801fcb8 	.word	0x0801fcb8

08018928 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b08a      	sub	sp, #40	; 0x28
 801892c:	af04      	add	r7, sp, #16
 801892e:	60f8      	str	r0, [r7, #12]
 8018930:	60b9      	str	r1, [r7, #8]
 8018932:	607a      	str	r2, [r7, #4]
 8018934:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d106      	bne.n	801894a <tcp_output_control_segment+0x22>
 801893c:	4b1c      	ldr	r3, [pc, #112]	; (80189b0 <tcp_output_control_segment+0x88>)
 801893e:	f240 7287 	movw	r2, #1927	; 0x787
 8018942:	491c      	ldr	r1, [pc, #112]	; (80189b4 <tcp_output_control_segment+0x8c>)
 8018944:	481c      	ldr	r0, [pc, #112]	; (80189b8 <tcp_output_control_segment+0x90>)
 8018946:	f002 fc63 	bl	801b210 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801894a:	683a      	ldr	r2, [r7, #0]
 801894c:	6879      	ldr	r1, [r7, #4]
 801894e:	68f8      	ldr	r0, [r7, #12]
 8018950:	f7fe ff2e 	bl	80177b0 <tcp_route>
 8018954:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018956:	693b      	ldr	r3, [r7, #16]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d102      	bne.n	8018962 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801895c:	23fc      	movs	r3, #252	; 0xfc
 801895e:	75fb      	strb	r3, [r7, #23]
 8018960:	e01c      	b.n	801899c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d006      	beq.n	8018976 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	7adb      	ldrb	r3, [r3, #11]
 801896c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	7a9b      	ldrb	r3, [r3, #10]
 8018972:	757b      	strb	r3, [r7, #21]
 8018974:	e003      	b.n	801897e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018976:	23ff      	movs	r3, #255	; 0xff
 8018978:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801897a:	2300      	movs	r3, #0
 801897c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801897e:	7dba      	ldrb	r2, [r7, #22]
 8018980:	693b      	ldr	r3, [r7, #16]
 8018982:	9302      	str	r3, [sp, #8]
 8018984:	2306      	movs	r3, #6
 8018986:	9301      	str	r3, [sp, #4]
 8018988:	7d7b      	ldrb	r3, [r7, #21]
 801898a:	9300      	str	r3, [sp, #0]
 801898c:	4613      	mov	r3, r2
 801898e:	683a      	ldr	r2, [r7, #0]
 8018990:	6879      	ldr	r1, [r7, #4]
 8018992:	68b8      	ldr	r0, [r7, #8]
 8018994:	f7f8 f9aa 	bl	8010cec <ip4_output_if>
 8018998:	4603      	mov	r3, r0
 801899a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801899c:	68b8      	ldr	r0, [r7, #8]
 801899e:	f7fa fcb3 	bl	8013308 <pbuf_free>
  return err;
 80189a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189a6:	4618      	mov	r0, r3
 80189a8:	3718      	adds	r7, #24
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}
 80189ae:	bf00      	nop
 80189b0:	0801f674 	.word	0x0801f674
 80189b4:	0801fde8 	.word	0x0801fde8
 80189b8:	0801f6e4 	.word	0x0801f6e4

080189bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80189bc:	b590      	push	{r4, r7, lr}
 80189be:	b08b      	sub	sp, #44	; 0x2c
 80189c0:	af04      	add	r7, sp, #16
 80189c2:	60f8      	str	r0, [r7, #12]
 80189c4:	60b9      	str	r1, [r7, #8]
 80189c6:	607a      	str	r2, [r7, #4]
 80189c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d106      	bne.n	80189de <tcp_rst+0x22>
 80189d0:	4b1f      	ldr	r3, [pc, #124]	; (8018a50 <tcp_rst+0x94>)
 80189d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80189d6:	491f      	ldr	r1, [pc, #124]	; (8018a54 <tcp_rst+0x98>)
 80189d8:	481f      	ldr	r0, [pc, #124]	; (8018a58 <tcp_rst+0x9c>)
 80189da:	f002 fc19 	bl	801b210 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80189de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d106      	bne.n	80189f2 <tcp_rst+0x36>
 80189e4:	4b1a      	ldr	r3, [pc, #104]	; (8018a50 <tcp_rst+0x94>)
 80189e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80189ea:	491c      	ldr	r1, [pc, #112]	; (8018a5c <tcp_rst+0xa0>)
 80189ec:	481a      	ldr	r0, [pc, #104]	; (8018a58 <tcp_rst+0x9c>)
 80189ee:	f002 fc0f 	bl	801b210 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80189f2:	2300      	movs	r3, #0
 80189f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80189f6:	f246 0308 	movw	r3, #24584	; 0x6008
 80189fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80189fc:	7dfb      	ldrb	r3, [r7, #23]
 80189fe:	b29c      	uxth	r4, r3
 8018a00:	68b8      	ldr	r0, [r7, #8]
 8018a02:	f7f4 fe2e 	bl	800d662 <lwip_htonl>
 8018a06:	4602      	mov	r2, r0
 8018a08:	8abb      	ldrh	r3, [r7, #20]
 8018a0a:	9303      	str	r3, [sp, #12]
 8018a0c:	2314      	movs	r3, #20
 8018a0e:	9302      	str	r3, [sp, #8]
 8018a10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018a12:	9301      	str	r3, [sp, #4]
 8018a14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018a16:	9300      	str	r3, [sp, #0]
 8018a18:	4613      	mov	r3, r2
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	4621      	mov	r1, r4
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f7ff fe90 	bl	8018744 <tcp_output_alloc_header_common>
 8018a24:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d00c      	beq.n	8018a46 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018a2c:	7dfb      	ldrb	r3, [r7, #23]
 8018a2e:	2200      	movs	r2, #0
 8018a30:	6939      	ldr	r1, [r7, #16]
 8018a32:	68f8      	ldr	r0, [r7, #12]
 8018a34:	f7ff ff38 	bl	80188a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a3a:	683a      	ldr	r2, [r7, #0]
 8018a3c:	6939      	ldr	r1, [r7, #16]
 8018a3e:	68f8      	ldr	r0, [r7, #12]
 8018a40:	f7ff ff72 	bl	8018928 <tcp_output_control_segment>
 8018a44:	e000      	b.n	8018a48 <tcp_rst+0x8c>
    return;
 8018a46:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018a48:	371c      	adds	r7, #28
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	bd90      	pop	{r4, r7, pc}
 8018a4e:	bf00      	nop
 8018a50:	0801f674 	.word	0x0801f674
 8018a54:	0801fe14 	.word	0x0801fe14
 8018a58:	0801f6e4 	.word	0x0801f6e4
 8018a5c:	0801fe30 	.word	0x0801fe30

08018a60 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018a60:	b590      	push	{r4, r7, lr}
 8018a62:	b087      	sub	sp, #28
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d106      	bne.n	8018a84 <tcp_send_empty_ack+0x24>
 8018a76:	4b28      	ldr	r3, [pc, #160]	; (8018b18 <tcp_send_empty_ack+0xb8>)
 8018a78:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018a7c:	4927      	ldr	r1, [pc, #156]	; (8018b1c <tcp_send_empty_ack+0xbc>)
 8018a7e:	4828      	ldr	r0, [pc, #160]	; (8018b20 <tcp_send_empty_ack+0xc0>)
 8018a80:	f002 fbc6 	bl	801b210 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a84:	7dfb      	ldrb	r3, [r7, #23]
 8018a86:	009b      	lsls	r3, r3, #2
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	f003 0304 	and.w	r3, r3, #4
 8018a8e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018a90:	7d7b      	ldrb	r3, [r7, #21]
 8018a92:	b29c      	uxth	r4, r3
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7f4 fde2 	bl	800d662 <lwip_htonl>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	4621      	mov	r1, r4
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f7ff fec1 	bl	801882c <tcp_output_alloc_header>
 8018aaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018aac:	693b      	ldr	r3, [r7, #16]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d109      	bne.n	8018ac6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	8b5b      	ldrh	r3, [r3, #26]
 8018ab6:	f043 0303 	orr.w	r3, r3, #3
 8018aba:	b29a      	uxth	r2, r3
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018ac0:	f06f 0301 	mvn.w	r3, #1
 8018ac4:	e023      	b.n	8018b0e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018ac6:	7dbb      	ldrb	r3, [r7, #22]
 8018ac8:	7dfa      	ldrb	r2, [r7, #23]
 8018aca:	6939      	ldr	r1, [r7, #16]
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f7ff feeb 	bl	80188a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	3304      	adds	r3, #4
 8018ad8:	6939      	ldr	r1, [r7, #16]
 8018ada:	6878      	ldr	r0, [r7, #4]
 8018adc:	f7ff ff24 	bl	8018928 <tcp_output_control_segment>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d007      	beq.n	8018afc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	8b5b      	ldrh	r3, [r3, #26]
 8018af0:	f043 0303 	orr.w	r3, r3, #3
 8018af4:	b29a      	uxth	r2, r3
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	835a      	strh	r2, [r3, #26]
 8018afa:	e006      	b.n	8018b0a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	8b5b      	ldrh	r3, [r3, #26]
 8018b00:	f023 0303 	bic.w	r3, r3, #3
 8018b04:	b29a      	uxth	r2, r3
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	371c      	adds	r7, #28
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd90      	pop	{r4, r7, pc}
 8018b16:	bf00      	nop
 8018b18:	0801f674 	.word	0x0801f674
 8018b1c:	0801fe4c 	.word	0x0801fe4c
 8018b20:	0801f6e4 	.word	0x0801f6e4

08018b24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018b24:	b590      	push	{r4, r7, lr}
 8018b26:	b087      	sub	sp, #28
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d106      	bne.n	8018b44 <tcp_keepalive+0x20>
 8018b36:	4b18      	ldr	r3, [pc, #96]	; (8018b98 <tcp_keepalive+0x74>)
 8018b38:	f640 0224 	movw	r2, #2084	; 0x824
 8018b3c:	4917      	ldr	r1, [pc, #92]	; (8018b9c <tcp_keepalive+0x78>)
 8018b3e:	4818      	ldr	r0, [pc, #96]	; (8018ba0 <tcp_keepalive+0x7c>)
 8018b40:	f002 fb66 	bl	801b210 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018b44:	7dfb      	ldrb	r3, [r7, #23]
 8018b46:	b29c      	uxth	r4, r3
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b4c:	3b01      	subs	r3, #1
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7f4 fd87 	bl	800d662 <lwip_htonl>
 8018b54:	4603      	mov	r3, r0
 8018b56:	2200      	movs	r2, #0
 8018b58:	4621      	mov	r1, r4
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	f7ff fe66 	bl	801882c <tcp_output_alloc_header>
 8018b60:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d102      	bne.n	8018b6e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b6c:	e010      	b.n	8018b90 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018b6e:	7dfb      	ldrb	r3, [r7, #23]
 8018b70:	2200      	movs	r2, #0
 8018b72:	6939      	ldr	r1, [r7, #16]
 8018b74:	6878      	ldr	r0, [r7, #4]
 8018b76:	f7ff fe97 	bl	80188a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018b7a:	687a      	ldr	r2, [r7, #4]
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	3304      	adds	r3, #4
 8018b80:	6939      	ldr	r1, [r7, #16]
 8018b82:	6878      	ldr	r0, [r7, #4]
 8018b84:	f7ff fed0 	bl	8018928 <tcp_output_control_segment>
 8018b88:	4603      	mov	r3, r0
 8018b8a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	371c      	adds	r7, #28
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd90      	pop	{r4, r7, pc}
 8018b98:	0801f674 	.word	0x0801f674
 8018b9c:	0801fe6c 	.word	0x0801fe6c
 8018ba0:	0801f6e4 	.word	0x0801f6e4

08018ba4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018ba4:	b590      	push	{r4, r7, lr}
 8018ba6:	b08b      	sub	sp, #44	; 0x2c
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018bac:	2300      	movs	r3, #0
 8018bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d106      	bne.n	8018bc6 <tcp_zero_window_probe+0x22>
 8018bb8:	4b4c      	ldr	r3, [pc, #304]	; (8018cec <tcp_zero_window_probe+0x148>)
 8018bba:	f640 024f 	movw	r2, #2127	; 0x84f
 8018bbe:	494c      	ldr	r1, [pc, #304]	; (8018cf0 <tcp_zero_window_probe+0x14c>)
 8018bc0:	484c      	ldr	r0, [pc, #304]	; (8018cf4 <tcp_zero_window_probe+0x150>)
 8018bc2:	f002 fb25 	bl	801b210 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018bcc:	6a3b      	ldr	r3, [r7, #32]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d101      	bne.n	8018bd6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	e086      	b.n	8018ce4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018bdc:	2bff      	cmp	r3, #255	; 0xff
 8018bde:	d007      	beq.n	8018bf0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018be6:	3301      	adds	r3, #1
 8018be8:	b2da      	uxtb	r2, r3
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018bf0:	6a3b      	ldr	r3, [r7, #32]
 8018bf2:	68db      	ldr	r3, [r3, #12]
 8018bf4:	899b      	ldrh	r3, [r3, #12]
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f7f4 fd1d 	bl	800d638 <lwip_htons>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	f003 0301 	and.w	r3, r3, #1
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d005      	beq.n	8018c16 <tcp_zero_window_probe+0x72>
 8018c0a:	6a3b      	ldr	r3, [r7, #32]
 8018c0c:	891b      	ldrh	r3, [r3, #8]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d101      	bne.n	8018c16 <tcp_zero_window_probe+0x72>
 8018c12:	2301      	movs	r3, #1
 8018c14:	e000      	b.n	8018c18 <tcp_zero_window_probe+0x74>
 8018c16:	2300      	movs	r3, #0
 8018c18:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018c1a:	7ffb      	ldrb	r3, [r7, #31]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	bf0c      	ite	eq
 8018c20:	2301      	moveq	r3, #1
 8018c22:	2300      	movne	r3, #0
 8018c24:	b2db      	uxtb	r3, r3
 8018c26:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c2c:	b299      	uxth	r1, r3
 8018c2e:	6a3b      	ldr	r3, [r7, #32]
 8018c30:	68db      	ldr	r3, [r3, #12]
 8018c32:	685b      	ldr	r3, [r3, #4]
 8018c34:	8bba      	ldrh	r2, [r7, #28]
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	f7ff fdf8 	bl	801882c <tcp_output_alloc_header>
 8018c3c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018c3e:	69bb      	ldr	r3, [r7, #24]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d102      	bne.n	8018c4a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c48:	e04c      	b.n	8018ce4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018c4a:	69bb      	ldr	r3, [r7, #24]
 8018c4c:	685b      	ldr	r3, [r3, #4]
 8018c4e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018c50:	7ffb      	ldrb	r3, [r7, #31]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d011      	beq.n	8018c7a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018c56:	697b      	ldr	r3, [r7, #20]
 8018c58:	899b      	ldrh	r3, [r3, #12]
 8018c5a:	b29b      	uxth	r3, r3
 8018c5c:	b21b      	sxth	r3, r3
 8018c5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018c62:	b21c      	sxth	r4, r3
 8018c64:	2011      	movs	r0, #17
 8018c66:	f7f4 fce7 	bl	800d638 <lwip_htons>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	b21b      	sxth	r3, r3
 8018c6e:	4323      	orrs	r3, r4
 8018c70:	b21b      	sxth	r3, r3
 8018c72:	b29a      	uxth	r2, r3
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	819a      	strh	r2, [r3, #12]
 8018c78:	e010      	b.n	8018c9c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018c7a:	69bb      	ldr	r3, [r7, #24]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	3314      	adds	r3, #20
 8018c80:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018c82:	6a3b      	ldr	r3, [r7, #32]
 8018c84:	6858      	ldr	r0, [r3, #4]
 8018c86:	6a3b      	ldr	r3, [r7, #32]
 8018c88:	685b      	ldr	r3, [r3, #4]
 8018c8a:	891a      	ldrh	r2, [r3, #8]
 8018c8c:	6a3b      	ldr	r3, [r7, #32]
 8018c8e:	891b      	ldrh	r3, [r3, #8]
 8018c90:	1ad3      	subs	r3, r2, r3
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	2201      	movs	r2, #1
 8018c96:	6939      	ldr	r1, [r7, #16]
 8018c98:	f7fa fd3c 	bl	8013714 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018c9c:	6a3b      	ldr	r3, [r7, #32]
 8018c9e:	68db      	ldr	r3, [r3, #12]
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7f4 fcdd 	bl	800d662 <lwip_htonl>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	3301      	adds	r3, #1
 8018cac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	1ad3      	subs	r3, r2, r3
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	da02      	bge.n	8018cc0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	68fa      	ldr	r2, [r7, #12]
 8018cbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	69b9      	ldr	r1, [r7, #24]
 8018cc8:	6878      	ldr	r0, [r7, #4]
 8018cca:	f7ff fded 	bl	80188a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018cce:	687a      	ldr	r2, [r7, #4]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	3304      	adds	r3, #4
 8018cd4:	69b9      	ldr	r1, [r7, #24]
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f7ff fe26 	bl	8018928 <tcp_output_control_segment>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018ce0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	372c      	adds	r7, #44	; 0x2c
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd90      	pop	{r4, r7, pc}
 8018cec:	0801f674 	.word	0x0801f674
 8018cf0:	0801fe88 	.word	0x0801fe88
 8018cf4:	0801f6e4 	.word	0x0801f6e4

08018cf8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b084      	sub	sp, #16
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
 8018d00:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8018d02:	f000 fafb 	bl	80192fc <sys_timeouts_sleeptime>
 8018d06:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d0e:	d10b      	bne.n	8018d28 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8018d10:	4813      	ldr	r0, [pc, #76]	; (8018d60 <tcpip_timeouts_mbox_fetch+0x68>)
 8018d12:	f7fa fe68 	bl	80139e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018d16:	2200      	movs	r2, #0
 8018d18:	6839      	ldr	r1, [r7, #0]
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	f7fa fdda 	bl	80138d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018d20:	480f      	ldr	r0, [pc, #60]	; (8018d60 <tcpip_timeouts_mbox_fetch+0x68>)
 8018d22:	f7fa fe51 	bl	80139c8 <sys_mutex_lock>
    return;
 8018d26:	e018      	b.n	8018d5a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d102      	bne.n	8018d34 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8018d2e:	f000 faab 	bl	8019288 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018d32:	e7e6      	b.n	8018d02 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8018d34:	480a      	ldr	r0, [pc, #40]	; (8018d60 <tcpip_timeouts_mbox_fetch+0x68>)
 8018d36:	f7fa fe56 	bl	80139e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018d3a:	68fa      	ldr	r2, [r7, #12]
 8018d3c:	6839      	ldr	r1, [r7, #0]
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f7fa fdc8 	bl	80138d4 <sys_arch_mbox_fetch>
 8018d44:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8018d46:	4806      	ldr	r0, [pc, #24]	; (8018d60 <tcpip_timeouts_mbox_fetch+0x68>)
 8018d48:	f7fa fe3e 	bl	80139c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d52:	d102      	bne.n	8018d5a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8018d54:	f000 fa98 	bl	8019288 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018d58:	e7d3      	b.n	8018d02 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	24008a60 	.word	0x24008a60

08018d64 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8018d6c:	4810      	ldr	r0, [pc, #64]	; (8018db0 <tcpip_thread+0x4c>)
 8018d6e:	f7fa fe2b 	bl	80139c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8018d72:	4b10      	ldr	r3, [pc, #64]	; (8018db4 <tcpip_thread+0x50>)
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d005      	beq.n	8018d86 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8018d7a:	4b0e      	ldr	r3, [pc, #56]	; (8018db4 <tcpip_thread+0x50>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	4a0e      	ldr	r2, [pc, #56]	; (8018db8 <tcpip_thread+0x54>)
 8018d80:	6812      	ldr	r2, [r2, #0]
 8018d82:	4610      	mov	r0, r2
 8018d84:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8018d86:	f107 030c 	add.w	r3, r7, #12
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	480b      	ldr	r0, [pc, #44]	; (8018dbc <tcpip_thread+0x58>)
 8018d8e:	f7ff ffb3 	bl	8018cf8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d106      	bne.n	8018da6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018d98:	4b09      	ldr	r3, [pc, #36]	; (8018dc0 <tcpip_thread+0x5c>)
 8018d9a:	2291      	movs	r2, #145	; 0x91
 8018d9c:	4909      	ldr	r1, [pc, #36]	; (8018dc4 <tcpip_thread+0x60>)
 8018d9e:	480a      	ldr	r0, [pc, #40]	; (8018dc8 <tcpip_thread+0x64>)
 8018da0:	f002 fa36 	bl	801b210 <iprintf>
      continue;
 8018da4:	e003      	b.n	8018dae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	4618      	mov	r0, r3
 8018daa:	f000 f80f 	bl	8018dcc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8018dae:	e7ea      	b.n	8018d86 <tcpip_thread+0x22>
 8018db0:	24008a60 	.word	0x24008a60
 8018db4:	24004958 	.word	0x24004958
 8018db8:	2400495c 	.word	0x2400495c
 8018dbc:	24004960 	.word	0x24004960
 8018dc0:	0801feac 	.word	0x0801feac
 8018dc4:	0801fefc 	.word	0x0801fefc
 8018dc8:	0801ff1c 	.word	0x0801ff1c

08018dcc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d018      	beq.n	8018e0e <tcpip_thread_handle_msg+0x42>
 8018ddc:	2b02      	cmp	r3, #2
 8018dde:	d021      	beq.n	8018e24 <tcpip_thread_handle_msg+0x58>
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d126      	bne.n	8018e32 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	68db      	ldr	r3, [r3, #12]
 8018de8:	687a      	ldr	r2, [r7, #4]
 8018dea:	6850      	ldr	r0, [r2, #4]
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	6892      	ldr	r2, [r2, #8]
 8018df0:	4611      	mov	r1, r2
 8018df2:	4798      	blx	r3
 8018df4:	4603      	mov	r3, r0
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d004      	beq.n	8018e04 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f7fa fa82 	bl	8013308 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018e04:	6879      	ldr	r1, [r7, #4]
 8018e06:	2009      	movs	r0, #9
 8018e08:	f7f9 fbd2 	bl	80125b0 <memp_free>
      break;
 8018e0c:	e018      	b.n	8018e40 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	685b      	ldr	r3, [r3, #4]
 8018e12:	687a      	ldr	r2, [r7, #4]
 8018e14:	6892      	ldr	r2, [r2, #8]
 8018e16:	4610      	mov	r0, r2
 8018e18:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018e1a:	6879      	ldr	r1, [r7, #4]
 8018e1c:	2008      	movs	r0, #8
 8018e1e:	f7f9 fbc7 	bl	80125b0 <memp_free>
      break;
 8018e22:	e00d      	b.n	8018e40 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	685b      	ldr	r3, [r3, #4]
 8018e28:	687a      	ldr	r2, [r7, #4]
 8018e2a:	6892      	ldr	r2, [r2, #8]
 8018e2c:	4610      	mov	r0, r2
 8018e2e:	4798      	blx	r3
      break;
 8018e30:	e006      	b.n	8018e40 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018e32:	4b05      	ldr	r3, [pc, #20]	; (8018e48 <tcpip_thread_handle_msg+0x7c>)
 8018e34:	22cf      	movs	r2, #207	; 0xcf
 8018e36:	4905      	ldr	r1, [pc, #20]	; (8018e4c <tcpip_thread_handle_msg+0x80>)
 8018e38:	4805      	ldr	r0, [pc, #20]	; (8018e50 <tcpip_thread_handle_msg+0x84>)
 8018e3a:	f002 f9e9 	bl	801b210 <iprintf>
      break;
 8018e3e:	bf00      	nop
  }
}
 8018e40:	bf00      	nop
 8018e42:	3708      	adds	r7, #8
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	0801feac 	.word	0x0801feac
 8018e4c:	0801fefc 	.word	0x0801fefc
 8018e50:	0801ff1c 	.word	0x0801ff1c

08018e54 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b086      	sub	sp, #24
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	60f8      	str	r0, [r7, #12]
 8018e5c:	60b9      	str	r1, [r7, #8]
 8018e5e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018e60:	481a      	ldr	r0, [pc, #104]	; (8018ecc <tcpip_inpkt+0x78>)
 8018e62:	f7fa fd76 	bl	8013952 <sys_mbox_valid>
 8018e66:	4603      	mov	r3, r0
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d105      	bne.n	8018e78 <tcpip_inpkt+0x24>
 8018e6c:	4b18      	ldr	r3, [pc, #96]	; (8018ed0 <tcpip_inpkt+0x7c>)
 8018e6e:	22fc      	movs	r2, #252	; 0xfc
 8018e70:	4918      	ldr	r1, [pc, #96]	; (8018ed4 <tcpip_inpkt+0x80>)
 8018e72:	4819      	ldr	r0, [pc, #100]	; (8018ed8 <tcpip_inpkt+0x84>)
 8018e74:	f002 f9cc 	bl	801b210 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018e78:	2009      	movs	r0, #9
 8018e7a:	f7f9 fb23 	bl	80124c4 <memp_malloc>
 8018e7e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8018e80:	697b      	ldr	r3, [r7, #20]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d102      	bne.n	8018e8c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8018e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e8a:	e01a      	b.n	8018ec2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	68fa      	ldr	r2, [r7, #12]
 8018e96:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8018e98:	697b      	ldr	r3, [r7, #20]
 8018e9a:	68ba      	ldr	r2, [r7, #8]
 8018e9c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	687a      	ldr	r2, [r7, #4]
 8018ea2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018ea4:	6979      	ldr	r1, [r7, #20]
 8018ea6:	4809      	ldr	r0, [pc, #36]	; (8018ecc <tcpip_inpkt+0x78>)
 8018ea8:	f7fa fcfa 	bl	80138a0 <sys_mbox_trypost>
 8018eac:	4603      	mov	r3, r0
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d006      	beq.n	8018ec0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018eb2:	6979      	ldr	r1, [r7, #20]
 8018eb4:	2009      	movs	r0, #9
 8018eb6:	f7f9 fb7b 	bl	80125b0 <memp_free>
    return ERR_MEM;
 8018eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ebe:	e000      	b.n	8018ec2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8018ec0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	3718      	adds	r7, #24
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}
 8018eca:	bf00      	nop
 8018ecc:	24004960 	.word	0x24004960
 8018ed0:	0801feac 	.word	0x0801feac
 8018ed4:	0801ff44 	.word	0x0801ff44
 8018ed8:	0801ff1c 	.word	0x0801ff1c

08018edc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b082      	sub	sp, #8
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018eec:	f003 0318 	and.w	r3, r3, #24
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d006      	beq.n	8018f02 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8018ef4:	4a08      	ldr	r2, [pc, #32]	; (8018f18 <tcpip_input+0x3c>)
 8018ef6:	6839      	ldr	r1, [r7, #0]
 8018ef8:	6878      	ldr	r0, [r7, #4]
 8018efa:	f7ff ffab 	bl	8018e54 <tcpip_inpkt>
 8018efe:	4603      	mov	r3, r0
 8018f00:	e005      	b.n	8018f0e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8018f02:	4a06      	ldr	r2, [pc, #24]	; (8018f1c <tcpip_input+0x40>)
 8018f04:	6839      	ldr	r1, [r7, #0]
 8018f06:	6878      	ldr	r0, [r7, #4]
 8018f08:	f7ff ffa4 	bl	8018e54 <tcpip_inpkt>
 8018f0c:	4603      	mov	r3, r0
}
 8018f0e:	4618      	mov	r0, r3
 8018f10:	3708      	adds	r7, #8
 8018f12:	46bd      	mov	sp, r7
 8018f14:	bd80      	pop	{r7, pc}
 8018f16:	bf00      	nop
 8018f18:	0801027d 	.word	0x0801027d
 8018f1c:	08010a6d 	.word	0x08010a6d

08018f20 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018f2a:	4819      	ldr	r0, [pc, #100]	; (8018f90 <tcpip_try_callback+0x70>)
 8018f2c:	f7fa fd11 	bl	8013952 <sys_mbox_valid>
 8018f30:	4603      	mov	r3, r0
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d106      	bne.n	8018f44 <tcpip_try_callback+0x24>
 8018f36:	4b17      	ldr	r3, [pc, #92]	; (8018f94 <tcpip_try_callback+0x74>)
 8018f38:	f240 125d 	movw	r2, #349	; 0x15d
 8018f3c:	4916      	ldr	r1, [pc, #88]	; (8018f98 <tcpip_try_callback+0x78>)
 8018f3e:	4817      	ldr	r0, [pc, #92]	; (8018f9c <tcpip_try_callback+0x7c>)
 8018f40:	f002 f966 	bl	801b210 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8018f44:	2008      	movs	r0, #8
 8018f46:	f7f9 fabd 	bl	80124c4 <memp_malloc>
 8018f4a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d102      	bne.n	8018f58 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8018f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f56:	e017      	b.n	8018f88 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	687a      	ldr	r2, [r7, #4]
 8018f62:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	683a      	ldr	r2, [r7, #0]
 8018f68:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018f6a:	68f9      	ldr	r1, [r7, #12]
 8018f6c:	4808      	ldr	r0, [pc, #32]	; (8018f90 <tcpip_try_callback+0x70>)
 8018f6e:	f7fa fc97 	bl	80138a0 <sys_mbox_trypost>
 8018f72:	4603      	mov	r3, r0
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d006      	beq.n	8018f86 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8018f78:	68f9      	ldr	r1, [r7, #12]
 8018f7a:	2008      	movs	r0, #8
 8018f7c:	f7f9 fb18 	bl	80125b0 <memp_free>
    return ERR_MEM;
 8018f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f84:	e000      	b.n	8018f88 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8018f86:	2300      	movs	r3, #0
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3710      	adds	r7, #16
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	24004960 	.word	0x24004960
 8018f94:	0801feac 	.word	0x0801feac
 8018f98:	0801ff44 	.word	0x0801ff44
 8018f9c:	0801ff1c 	.word	0x0801ff1c

08018fa0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b084      	sub	sp, #16
 8018fa4:	af02      	add	r7, sp, #8
 8018fa6:	6078      	str	r0, [r7, #4]
 8018fa8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8018faa:	f7f7 fcad 	bl	8010908 <lwip_init>

  tcpip_init_done = initfunc;
 8018fae:	4a17      	ldr	r2, [pc, #92]	; (801900c <tcpip_init+0x6c>)
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8018fb4:	4a16      	ldr	r2, [pc, #88]	; (8019010 <tcpip_init+0x70>)
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018fba:	2106      	movs	r1, #6
 8018fbc:	4815      	ldr	r0, [pc, #84]	; (8019014 <tcpip_init+0x74>)
 8018fbe:	f7fa fc4d 	bl	801385c <sys_mbox_new>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d006      	beq.n	8018fd6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8018fc8:	4b13      	ldr	r3, [pc, #76]	; (8019018 <tcpip_init+0x78>)
 8018fca:	f240 2261 	movw	r2, #609	; 0x261
 8018fce:	4913      	ldr	r1, [pc, #76]	; (801901c <tcpip_init+0x7c>)
 8018fd0:	4813      	ldr	r0, [pc, #76]	; (8019020 <tcpip_init+0x80>)
 8018fd2:	f002 f91d 	bl	801b210 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018fd6:	4813      	ldr	r0, [pc, #76]	; (8019024 <tcpip_init+0x84>)
 8018fd8:	f7fa fcda 	bl	8013990 <sys_mutex_new>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d006      	beq.n	8018ff0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8018fe2:	4b0d      	ldr	r3, [pc, #52]	; (8019018 <tcpip_init+0x78>)
 8018fe4:	f240 2265 	movw	r2, #613	; 0x265
 8018fe8:	490f      	ldr	r1, [pc, #60]	; (8019028 <tcpip_init+0x88>)
 8018fea:	480d      	ldr	r0, [pc, #52]	; (8019020 <tcpip_init+0x80>)
 8018fec:	f002 f910 	bl	801b210 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	9300      	str	r3, [sp, #0]
 8018ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	490c      	ldr	r1, [pc, #48]	; (801902c <tcpip_init+0x8c>)
 8018ffc:	480c      	ldr	r0, [pc, #48]	; (8019030 <tcpip_init+0x90>)
 8018ffe:	f7fa fcff 	bl	8013a00 <sys_thread_new>
}
 8019002:	bf00      	nop
 8019004:	3708      	adds	r7, #8
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}
 801900a:	bf00      	nop
 801900c:	24004958 	.word	0x24004958
 8019010:	2400495c 	.word	0x2400495c
 8019014:	24004960 	.word	0x24004960
 8019018:	0801feac 	.word	0x0801feac
 801901c:	0801ff54 	.word	0x0801ff54
 8019020:	0801ff1c 	.word	0x0801ff1c
 8019024:	24008a60 	.word	0x24008a60
 8019028:	0801ff78 	.word	0x0801ff78
 801902c:	08018d65 	.word	0x08018d65
 8019030:	0801ff9c 	.word	0x0801ff9c

08019034 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801903c:	f7fa fd6e 	bl	8013b1c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019040:	4b0a      	ldr	r3, [pc, #40]	; (801906c <tcpip_tcp_timer+0x38>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d103      	bne.n	8019050 <tcpip_tcp_timer+0x1c>
 8019048:	4b09      	ldr	r3, [pc, #36]	; (8019070 <tcpip_tcp_timer+0x3c>)
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d005      	beq.n	801905c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019050:	2200      	movs	r2, #0
 8019052:	4908      	ldr	r1, [pc, #32]	; (8019074 <tcpip_tcp_timer+0x40>)
 8019054:	20fa      	movs	r0, #250	; 0xfa
 8019056:	f000 f8f1 	bl	801923c <sys_timeout>
 801905a:	e002      	b.n	8019062 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801905c:	4b06      	ldr	r3, [pc, #24]	; (8019078 <tcpip_tcp_timer+0x44>)
 801905e:	2200      	movs	r2, #0
 8019060:	601a      	str	r2, [r3, #0]
  }
}
 8019062:	bf00      	nop
 8019064:	3708      	adds	r7, #8
 8019066:	46bd      	mov	sp, r7
 8019068:	bd80      	pop	{r7, pc}
 801906a:	bf00      	nop
 801906c:	24008a48 	.word	0x24008a48
 8019070:	24008a58 	.word	0x24008a58
 8019074:	08019035 	.word	0x08019035
 8019078:	2400496c 	.word	0x2400496c

0801907c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019080:	4b0a      	ldr	r3, [pc, #40]	; (80190ac <tcp_timer_needed+0x30>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d10f      	bne.n	80190a8 <tcp_timer_needed+0x2c>
 8019088:	4b09      	ldr	r3, [pc, #36]	; (80190b0 <tcp_timer_needed+0x34>)
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d103      	bne.n	8019098 <tcp_timer_needed+0x1c>
 8019090:	4b08      	ldr	r3, [pc, #32]	; (80190b4 <tcp_timer_needed+0x38>)
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d007      	beq.n	80190a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019098:	4b04      	ldr	r3, [pc, #16]	; (80190ac <tcp_timer_needed+0x30>)
 801909a:	2201      	movs	r2, #1
 801909c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801909e:	2200      	movs	r2, #0
 80190a0:	4905      	ldr	r1, [pc, #20]	; (80190b8 <tcp_timer_needed+0x3c>)
 80190a2:	20fa      	movs	r0, #250	; 0xfa
 80190a4:	f000 f8ca 	bl	801923c <sys_timeout>
  }
}
 80190a8:	bf00      	nop
 80190aa:	bd80      	pop	{r7, pc}
 80190ac:	2400496c 	.word	0x2400496c
 80190b0:	24008a48 	.word	0x24008a48
 80190b4:	24008a58 	.word	0x24008a58
 80190b8:	08019035 	.word	0x08019035

080190bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b086      	sub	sp, #24
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80190c8:	200a      	movs	r0, #10
 80190ca:	f7f9 f9fb 	bl	80124c4 <memp_malloc>
 80190ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d109      	bne.n	80190ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d151      	bne.n	8019180 <sys_timeout_abs+0xc4>
 80190dc:	4b2a      	ldr	r3, [pc, #168]	; (8019188 <sys_timeout_abs+0xcc>)
 80190de:	22be      	movs	r2, #190	; 0xbe
 80190e0:	492a      	ldr	r1, [pc, #168]	; (801918c <sys_timeout_abs+0xd0>)
 80190e2:	482b      	ldr	r0, [pc, #172]	; (8019190 <sys_timeout_abs+0xd4>)
 80190e4:	f002 f894 	bl	801b210 <iprintf>
    return;
 80190e8:	e04a      	b.n	8019180 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	2200      	movs	r2, #0
 80190ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80190f0:	693b      	ldr	r3, [r7, #16]
 80190f2:	68ba      	ldr	r2, [r7, #8]
 80190f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80190f6:	693b      	ldr	r3, [r7, #16]
 80190f8:	687a      	ldr	r2, [r7, #4]
 80190fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80190fc:	693b      	ldr	r3, [r7, #16]
 80190fe:	68fa      	ldr	r2, [r7, #12]
 8019100:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019102:	4b24      	ldr	r3, [pc, #144]	; (8019194 <sys_timeout_abs+0xd8>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d103      	bne.n	8019112 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801910a:	4a22      	ldr	r2, [pc, #136]	; (8019194 <sys_timeout_abs+0xd8>)
 801910c:	693b      	ldr	r3, [r7, #16]
 801910e:	6013      	str	r3, [r2, #0]
    return;
 8019110:	e037      	b.n	8019182 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	685a      	ldr	r2, [r3, #4]
 8019116:	4b1f      	ldr	r3, [pc, #124]	; (8019194 <sys_timeout_abs+0xd8>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	1ad3      	subs	r3, r2, r3
 801911e:	0fdb      	lsrs	r3, r3, #31
 8019120:	f003 0301 	and.w	r3, r3, #1
 8019124:	b2db      	uxtb	r3, r3
 8019126:	2b00      	cmp	r3, #0
 8019128:	d007      	beq.n	801913a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801912a:	4b1a      	ldr	r3, [pc, #104]	; (8019194 <sys_timeout_abs+0xd8>)
 801912c:	681a      	ldr	r2, [r3, #0]
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019132:	4a18      	ldr	r2, [pc, #96]	; (8019194 <sys_timeout_abs+0xd8>)
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	6013      	str	r3, [r2, #0]
 8019138:	e023      	b.n	8019182 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801913a:	4b16      	ldr	r3, [pc, #88]	; (8019194 <sys_timeout_abs+0xd8>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	617b      	str	r3, [r7, #20]
 8019140:	e01a      	b.n	8019178 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019142:	697b      	ldr	r3, [r7, #20]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d00b      	beq.n	8019162 <sys_timeout_abs+0xa6>
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	685a      	ldr	r2, [r3, #4]
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	685b      	ldr	r3, [r3, #4]
 8019154:	1ad3      	subs	r3, r2, r3
 8019156:	0fdb      	lsrs	r3, r3, #31
 8019158:	f003 0301 	and.w	r3, r3, #1
 801915c:	b2db      	uxtb	r3, r3
 801915e:	2b00      	cmp	r3, #0
 8019160:	d007      	beq.n	8019172 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019162:	697b      	ldr	r3, [r7, #20]
 8019164:	681a      	ldr	r2, [r3, #0]
 8019166:	693b      	ldr	r3, [r7, #16]
 8019168:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801916a:	697b      	ldr	r3, [r7, #20]
 801916c:	693a      	ldr	r2, [r7, #16]
 801916e:	601a      	str	r2, [r3, #0]
        break;
 8019170:	e007      	b.n	8019182 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019172:	697b      	ldr	r3, [r7, #20]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	617b      	str	r3, [r7, #20]
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d1e1      	bne.n	8019142 <sys_timeout_abs+0x86>
 801917e:	e000      	b.n	8019182 <sys_timeout_abs+0xc6>
    return;
 8019180:	bf00      	nop
      }
    }
  }
}
 8019182:	3718      	adds	r7, #24
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	0801ffac 	.word	0x0801ffac
 801918c:	08020000 	.word	0x08020000
 8019190:	08020040 	.word	0x08020040
 8019194:	24004964 	.word	0x24004964

08019198 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b086      	sub	sp, #24
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	685b      	ldr	r3, [r3, #4]
 80191a8:	4798      	blx	r3

  now = sys_now();
 80191aa:	f7f1 fa97 	bl	800a6dc <sys_now>
 80191ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80191b0:	697b      	ldr	r3, [r7, #20]
 80191b2:	681a      	ldr	r2, [r3, #0]
 80191b4:	4b0f      	ldr	r3, [pc, #60]	; (80191f4 <lwip_cyclic_timer+0x5c>)
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	4413      	add	r3, r2
 80191ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80191bc:	68fa      	ldr	r2, [r7, #12]
 80191be:	693b      	ldr	r3, [r7, #16]
 80191c0:	1ad3      	subs	r3, r2, r3
 80191c2:	0fdb      	lsrs	r3, r3, #31
 80191c4:	f003 0301 	and.w	r3, r3, #1
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d009      	beq.n	80191e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80191ce:	697b      	ldr	r3, [r7, #20]
 80191d0:	681a      	ldr	r2, [r3, #0]
 80191d2:	693b      	ldr	r3, [r7, #16]
 80191d4:	4413      	add	r3, r2
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	4907      	ldr	r1, [pc, #28]	; (80191f8 <lwip_cyclic_timer+0x60>)
 80191da:	4618      	mov	r0, r3
 80191dc:	f7ff ff6e 	bl	80190bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80191e0:	e004      	b.n	80191ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80191e2:	687a      	ldr	r2, [r7, #4]
 80191e4:	4904      	ldr	r1, [pc, #16]	; (80191f8 <lwip_cyclic_timer+0x60>)
 80191e6:	68f8      	ldr	r0, [r7, #12]
 80191e8:	f7ff ff68 	bl	80190bc <sys_timeout_abs>
}
 80191ec:	bf00      	nop
 80191ee:	3718      	adds	r7, #24
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	24004968 	.word	0x24004968
 80191f8:	08019199 	.word	0x08019199

080191fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b082      	sub	sp, #8
 8019200:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019202:	2301      	movs	r3, #1
 8019204:	607b      	str	r3, [r7, #4]
 8019206:	e00e      	b.n	8019226 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019208:	4a0a      	ldr	r2, [pc, #40]	; (8019234 <sys_timeouts_init+0x38>)
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	00db      	lsls	r3, r3, #3
 8019214:	4a07      	ldr	r2, [pc, #28]	; (8019234 <sys_timeouts_init+0x38>)
 8019216:	4413      	add	r3, r2
 8019218:	461a      	mov	r2, r3
 801921a:	4907      	ldr	r1, [pc, #28]	; (8019238 <sys_timeouts_init+0x3c>)
 801921c:	f000 f80e 	bl	801923c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	3301      	adds	r3, #1
 8019224:	607b      	str	r3, [r7, #4]
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	2b04      	cmp	r3, #4
 801922a:	d9ed      	bls.n	8019208 <sys_timeouts_init+0xc>
  }
}
 801922c:	bf00      	nop
 801922e:	3708      	adds	r7, #8
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}
 8019234:	0802060c 	.word	0x0802060c
 8019238:	08019199 	.word	0x08019199

0801923c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b086      	sub	sp, #24
 8019240:	af00      	add	r7, sp, #0
 8019242:	60f8      	str	r0, [r7, #12]
 8019244:	60b9      	str	r1, [r7, #8]
 8019246:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801924e:	d306      	bcc.n	801925e <sys_timeout+0x22>
 8019250:	4b0a      	ldr	r3, [pc, #40]	; (801927c <sys_timeout+0x40>)
 8019252:	f240 1229 	movw	r2, #297	; 0x129
 8019256:	490a      	ldr	r1, [pc, #40]	; (8019280 <sys_timeout+0x44>)
 8019258:	480a      	ldr	r0, [pc, #40]	; (8019284 <sys_timeout+0x48>)
 801925a:	f001 ffd9 	bl	801b210 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801925e:	f7f1 fa3d 	bl	800a6dc <sys_now>
 8019262:	4602      	mov	r2, r0
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	4413      	add	r3, r2
 8019268:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801926a:	687a      	ldr	r2, [r7, #4]
 801926c:	68b9      	ldr	r1, [r7, #8]
 801926e:	6978      	ldr	r0, [r7, #20]
 8019270:	f7ff ff24 	bl	80190bc <sys_timeout_abs>
#endif
}
 8019274:	bf00      	nop
 8019276:	3718      	adds	r7, #24
 8019278:	46bd      	mov	sp, r7
 801927a:	bd80      	pop	{r7, pc}
 801927c:	0801ffac 	.word	0x0801ffac
 8019280:	08020068 	.word	0x08020068
 8019284:	08020040 	.word	0x08020040

08019288 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b084      	sub	sp, #16
 801928c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801928e:	f7f1 fa25 	bl	800a6dc <sys_now>
 8019292:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019294:	4b17      	ldr	r3, [pc, #92]	; (80192f4 <sys_check_timeouts+0x6c>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d022      	beq.n	80192e6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80192a0:	68bb      	ldr	r3, [r7, #8]
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	68fa      	ldr	r2, [r7, #12]
 80192a6:	1ad3      	subs	r3, r2, r3
 80192a8:	0fdb      	lsrs	r3, r3, #31
 80192aa:	f003 0301 	and.w	r3, r3, #1
 80192ae:	b2db      	uxtb	r3, r3
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d11a      	bne.n	80192ea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	4a0e      	ldr	r2, [pc, #56]	; (80192f4 <sys_check_timeouts+0x6c>)
 80192ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	689b      	ldr	r3, [r3, #8]
 80192c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80192c2:	68bb      	ldr	r3, [r7, #8]
 80192c4:	68db      	ldr	r3, [r3, #12]
 80192c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80192c8:	68bb      	ldr	r3, [r7, #8]
 80192ca:	685b      	ldr	r3, [r3, #4]
 80192cc:	4a0a      	ldr	r2, [pc, #40]	; (80192f8 <sys_check_timeouts+0x70>)
 80192ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80192d0:	68b9      	ldr	r1, [r7, #8]
 80192d2:	200a      	movs	r0, #10
 80192d4:	f7f9 f96c 	bl	80125b0 <memp_free>
    if (handler != NULL) {
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d0da      	beq.n	8019294 <sys_check_timeouts+0xc>
      handler(arg);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	6838      	ldr	r0, [r7, #0]
 80192e2:	4798      	blx	r3
  do {
 80192e4:	e7d6      	b.n	8019294 <sys_check_timeouts+0xc>
      return;
 80192e6:	bf00      	nop
 80192e8:	e000      	b.n	80192ec <sys_check_timeouts+0x64>
      return;
 80192ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80192ec:	3710      	adds	r7, #16
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	24004964 	.word	0x24004964
 80192f8:	24004968 	.word	0x24004968

080192fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b082      	sub	sp, #8
 8019300:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019302:	4b16      	ldr	r3, [pc, #88]	; (801935c <sys_timeouts_sleeptime+0x60>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d102      	bne.n	8019310 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801930a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801930e:	e020      	b.n	8019352 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019310:	f7f1 f9e4 	bl	800a6dc <sys_now>
 8019314:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019316:	4b11      	ldr	r3, [pc, #68]	; (801935c <sys_timeouts_sleeptime+0x60>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	685a      	ldr	r2, [r3, #4]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	1ad3      	subs	r3, r2, r3
 8019320:	0fdb      	lsrs	r3, r3, #31
 8019322:	f003 0301 	and.w	r3, r3, #1
 8019326:	b2db      	uxtb	r3, r3
 8019328:	2b00      	cmp	r3, #0
 801932a:	d001      	beq.n	8019330 <sys_timeouts_sleeptime+0x34>
    return 0;
 801932c:	2300      	movs	r3, #0
 801932e:	e010      	b.n	8019352 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019330:	4b0a      	ldr	r3, [pc, #40]	; (801935c <sys_timeouts_sleeptime+0x60>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	685a      	ldr	r2, [r3, #4]
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	1ad3      	subs	r3, r2, r3
 801933a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801933c:	683b      	ldr	r3, [r7, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	da06      	bge.n	8019350 <sys_timeouts_sleeptime+0x54>
 8019342:	4b07      	ldr	r3, [pc, #28]	; (8019360 <sys_timeouts_sleeptime+0x64>)
 8019344:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019348:	4906      	ldr	r1, [pc, #24]	; (8019364 <sys_timeouts_sleeptime+0x68>)
 801934a:	4807      	ldr	r0, [pc, #28]	; (8019368 <sys_timeouts_sleeptime+0x6c>)
 801934c:	f001 ff60 	bl	801b210 <iprintf>
    return ret;
 8019350:	683b      	ldr	r3, [r7, #0]
  }
}
 8019352:	4618      	mov	r0, r3
 8019354:	3708      	adds	r7, #8
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	24004964 	.word	0x24004964
 8019360:	0801ffac 	.word	0x0801ffac
 8019364:	080200a0 	.word	0x080200a0
 8019368:	08020040 	.word	0x08020040

0801936c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801936c:	b580      	push	{r7, lr}
 801936e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019370:	f001 ff66 	bl	801b240 <rand>
 8019374:	4603      	mov	r3, r0
 8019376:	b29b      	uxth	r3, r3
 8019378:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801937c:	b29b      	uxth	r3, r3
 801937e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019382:	b29a      	uxth	r2, r3
 8019384:	4b01      	ldr	r3, [pc, #4]	; (801938c <udp_init+0x20>)
 8019386:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019388:	bf00      	nop
 801938a:	bd80      	pop	{r7, pc}
 801938c:	24000034 	.word	0x24000034

08019390 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801939a:	4b17      	ldr	r3, [pc, #92]	; (80193f8 <udp_new_port+0x68>)
 801939c:	881b      	ldrh	r3, [r3, #0]
 801939e:	1c5a      	adds	r2, r3, #1
 80193a0:	b291      	uxth	r1, r2
 80193a2:	4a15      	ldr	r2, [pc, #84]	; (80193f8 <udp_new_port+0x68>)
 80193a4:	8011      	strh	r1, [r2, #0]
 80193a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d103      	bne.n	80193b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80193ae:	4b12      	ldr	r3, [pc, #72]	; (80193f8 <udp_new_port+0x68>)
 80193b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80193b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80193b6:	4b11      	ldr	r3, [pc, #68]	; (80193fc <udp_new_port+0x6c>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	603b      	str	r3, [r7, #0]
 80193bc:	e011      	b.n	80193e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	8a5a      	ldrh	r2, [r3, #18]
 80193c2:	4b0d      	ldr	r3, [pc, #52]	; (80193f8 <udp_new_port+0x68>)
 80193c4:	881b      	ldrh	r3, [r3, #0]
 80193c6:	429a      	cmp	r2, r3
 80193c8:	d108      	bne.n	80193dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80193ca:	88fb      	ldrh	r3, [r7, #6]
 80193cc:	3301      	adds	r3, #1
 80193ce:	80fb      	strh	r3, [r7, #6]
 80193d0:	88fb      	ldrh	r3, [r7, #6]
 80193d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80193d6:	d3e0      	bcc.n	801939a <udp_new_port+0xa>
        return 0;
 80193d8:	2300      	movs	r3, #0
 80193da:	e007      	b.n	80193ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	68db      	ldr	r3, [r3, #12]
 80193e0:	603b      	str	r3, [r7, #0]
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1ea      	bne.n	80193be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80193e8:	4b03      	ldr	r3, [pc, #12]	; (80193f8 <udp_new_port+0x68>)
 80193ea:	881b      	ldrh	r3, [r3, #0]
}
 80193ec:	4618      	mov	r0, r3
 80193ee:	370c      	adds	r7, #12
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr
 80193f8:	24000034 	.word	0x24000034
 80193fc:	24008a64 	.word	0x24008a64

08019400 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b084      	sub	sp, #16
 8019404:	af00      	add	r7, sp, #0
 8019406:	60f8      	str	r0, [r7, #12]
 8019408:	60b9      	str	r1, [r7, #8]
 801940a:	4613      	mov	r3, r2
 801940c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d105      	bne.n	8019420 <udp_input_local_match+0x20>
 8019414:	4b27      	ldr	r3, [pc, #156]	; (80194b4 <udp_input_local_match+0xb4>)
 8019416:	2287      	movs	r2, #135	; 0x87
 8019418:	4927      	ldr	r1, [pc, #156]	; (80194b8 <udp_input_local_match+0xb8>)
 801941a:	4828      	ldr	r0, [pc, #160]	; (80194bc <udp_input_local_match+0xbc>)
 801941c:	f001 fef8 	bl	801b210 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d105      	bne.n	8019432 <udp_input_local_match+0x32>
 8019426:	4b23      	ldr	r3, [pc, #140]	; (80194b4 <udp_input_local_match+0xb4>)
 8019428:	2288      	movs	r2, #136	; 0x88
 801942a:	4925      	ldr	r1, [pc, #148]	; (80194c0 <udp_input_local_match+0xc0>)
 801942c:	4823      	ldr	r0, [pc, #140]	; (80194bc <udp_input_local_match+0xbc>)
 801942e:	f001 feef 	bl	801b210 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	7a1b      	ldrb	r3, [r3, #8]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d00b      	beq.n	8019452 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	7a1a      	ldrb	r2, [r3, #8]
 801943e:	4b21      	ldr	r3, [pc, #132]	; (80194c4 <udp_input_local_match+0xc4>)
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019446:	3301      	adds	r3, #1
 8019448:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801944a:	429a      	cmp	r2, r3
 801944c:	d001      	beq.n	8019452 <udp_input_local_match+0x52>
    return 0;
 801944e:	2300      	movs	r3, #0
 8019450:	e02b      	b.n	80194aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019452:	79fb      	ldrb	r3, [r7, #7]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d018      	beq.n	801948a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d013      	beq.n	8019486 <udp_input_local_match+0x86>
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d00f      	beq.n	8019486 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019466:	4b17      	ldr	r3, [pc, #92]	; (80194c4 <udp_input_local_match+0xc4>)
 8019468:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801946a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801946e:	d00a      	beq.n	8019486 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	681a      	ldr	r2, [r3, #0]
 8019474:	4b13      	ldr	r3, [pc, #76]	; (80194c4 <udp_input_local_match+0xc4>)
 8019476:	695b      	ldr	r3, [r3, #20]
 8019478:	405a      	eors	r2, r3
 801947a:	68bb      	ldr	r3, [r7, #8]
 801947c:	3308      	adds	r3, #8
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019482:	2b00      	cmp	r3, #0
 8019484:	d110      	bne.n	80194a8 <udp_input_local_match+0xa8>
          return 1;
 8019486:	2301      	movs	r3, #1
 8019488:	e00f      	b.n	80194aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d009      	beq.n	80194a4 <udp_input_local_match+0xa4>
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d005      	beq.n	80194a4 <udp_input_local_match+0xa4>
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	4b09      	ldr	r3, [pc, #36]	; (80194c4 <udp_input_local_match+0xc4>)
 801949e:	695b      	ldr	r3, [r3, #20]
 80194a0:	429a      	cmp	r2, r3
 80194a2:	d101      	bne.n	80194a8 <udp_input_local_match+0xa8>
        return 1;
 80194a4:	2301      	movs	r3, #1
 80194a6:	e000      	b.n	80194aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80194a8:	2300      	movs	r3, #0
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3710      	adds	r7, #16
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	080200b4 	.word	0x080200b4
 80194b8:	08020100 	.word	0x08020100
 80194bc:	08020124 	.word	0x08020124
 80194c0:	0802014c 	.word	0x0802014c
 80194c4:	24005960 	.word	0x24005960

080194c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80194c8:	b590      	push	{r4, r7, lr}
 80194ca:	b08d      	sub	sp, #52	; 0x34
 80194cc:	af02      	add	r7, sp, #8
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80194d2:	2300      	movs	r3, #0
 80194d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d105      	bne.n	80194e8 <udp_input+0x20>
 80194dc:	4b7c      	ldr	r3, [pc, #496]	; (80196d0 <udp_input+0x208>)
 80194de:	22cf      	movs	r2, #207	; 0xcf
 80194e0:	497c      	ldr	r1, [pc, #496]	; (80196d4 <udp_input+0x20c>)
 80194e2:	487d      	ldr	r0, [pc, #500]	; (80196d8 <udp_input+0x210>)
 80194e4:	f001 fe94 	bl	801b210 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d105      	bne.n	80194fa <udp_input+0x32>
 80194ee:	4b78      	ldr	r3, [pc, #480]	; (80196d0 <udp_input+0x208>)
 80194f0:	22d0      	movs	r2, #208	; 0xd0
 80194f2:	497a      	ldr	r1, [pc, #488]	; (80196dc <udp_input+0x214>)
 80194f4:	4878      	ldr	r0, [pc, #480]	; (80196d8 <udp_input+0x210>)
 80194f6:	f001 fe8b 	bl	801b210 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	895b      	ldrh	r3, [r3, #10]
 80194fe:	2b07      	cmp	r3, #7
 8019500:	d803      	bhi.n	801950a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019502:	6878      	ldr	r0, [r7, #4]
 8019504:	f7f9 ff00 	bl	8013308 <pbuf_free>
    goto end;
 8019508:	e0de      	b.n	80196c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019510:	4b73      	ldr	r3, [pc, #460]	; (80196e0 <udp_input+0x218>)
 8019512:	695a      	ldr	r2, [r3, #20]
 8019514:	4b72      	ldr	r3, [pc, #456]	; (80196e0 <udp_input+0x218>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	4619      	mov	r1, r3
 801951a:	4610      	mov	r0, r2
 801951c:	f7f7 fcbe 	bl	8010e9c <ip4_addr_isbroadcast_u32>
 8019520:	4603      	mov	r3, r0
 8019522:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	881b      	ldrh	r3, [r3, #0]
 8019528:	b29b      	uxth	r3, r3
 801952a:	4618      	mov	r0, r3
 801952c:	f7f4 f884 	bl	800d638 <lwip_htons>
 8019530:	4603      	mov	r3, r0
 8019532:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019534:	697b      	ldr	r3, [r7, #20]
 8019536:	885b      	ldrh	r3, [r3, #2]
 8019538:	b29b      	uxth	r3, r3
 801953a:	4618      	mov	r0, r3
 801953c:	f7f4 f87c 	bl	800d638 <lwip_htons>
 8019540:	4603      	mov	r3, r0
 8019542:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019544:	2300      	movs	r3, #0
 8019546:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019548:	2300      	movs	r3, #0
 801954a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801954c:	2300      	movs	r3, #0
 801954e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019550:	4b64      	ldr	r3, [pc, #400]	; (80196e4 <udp_input+0x21c>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	627b      	str	r3, [r7, #36]	; 0x24
 8019556:	e054      	b.n	8019602 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955a:	8a5b      	ldrh	r3, [r3, #18]
 801955c:	89fa      	ldrh	r2, [r7, #14]
 801955e:	429a      	cmp	r2, r3
 8019560:	d14a      	bne.n	80195f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019562:	7cfb      	ldrb	r3, [r7, #19]
 8019564:	461a      	mov	r2, r3
 8019566:	6839      	ldr	r1, [r7, #0]
 8019568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801956a:	f7ff ff49 	bl	8019400 <udp_input_local_match>
 801956e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019570:	2b00      	cmp	r3, #0
 8019572:	d041      	beq.n	80195f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019576:	7c1b      	ldrb	r3, [r3, #16]
 8019578:	f003 0304 	and.w	r3, r3, #4
 801957c:	2b00      	cmp	r3, #0
 801957e:	d11d      	bne.n	80195bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019580:	69fb      	ldr	r3, [r7, #28]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d102      	bne.n	801958c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019588:	61fb      	str	r3, [r7, #28]
 801958a:	e017      	b.n	80195bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801958c:	7cfb      	ldrb	r3, [r7, #19]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d014      	beq.n	80195bc <udp_input+0xf4>
 8019592:	4b53      	ldr	r3, [pc, #332]	; (80196e0 <udp_input+0x218>)
 8019594:	695b      	ldr	r3, [r3, #20]
 8019596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801959a:	d10f      	bne.n	80195bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801959c:	69fb      	ldr	r3, [r7, #28]
 801959e:	681a      	ldr	r2, [r3, #0]
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	3304      	adds	r3, #4
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	429a      	cmp	r2, r3
 80195a8:	d008      	beq.n	80195bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80195aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ac:	681a      	ldr	r2, [r3, #0]
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	3304      	adds	r3, #4
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	d101      	bne.n	80195bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80195b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80195bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195be:	8a9b      	ldrh	r3, [r3, #20]
 80195c0:	8a3a      	ldrh	r2, [r7, #16]
 80195c2:	429a      	cmp	r2, r3
 80195c4:	d118      	bne.n	80195f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80195c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d005      	beq.n	80195da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80195ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d0:	685a      	ldr	r2, [r3, #4]
 80195d2:	4b43      	ldr	r3, [pc, #268]	; (80196e0 <udp_input+0x218>)
 80195d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d10e      	bne.n	80195f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80195da:	6a3b      	ldr	r3, [r7, #32]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d014      	beq.n	801960a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80195e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e2:	68da      	ldr	r2, [r3, #12]
 80195e4:	6a3b      	ldr	r3, [r7, #32]
 80195e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80195e8:	4b3e      	ldr	r3, [pc, #248]	; (80196e4 <udp_input+0x21c>)
 80195ea:	681a      	ldr	r2, [r3, #0]
 80195ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80195f0:	4a3c      	ldr	r2, [pc, #240]	; (80196e4 <udp_input+0x21c>)
 80195f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80195f6:	e008      	b.n	801960a <udp_input+0x142>
      }
    }

    prev = pcb;
 80195f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80195fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195fe:	68db      	ldr	r3, [r3, #12]
 8019600:	627b      	str	r3, [r7, #36]	; 0x24
 8019602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019604:	2b00      	cmp	r3, #0
 8019606:	d1a7      	bne.n	8019558 <udp_input+0x90>
 8019608:	e000      	b.n	801960c <udp_input+0x144>
        break;
 801960a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960e:	2b00      	cmp	r3, #0
 8019610:	d101      	bne.n	8019616 <udp_input+0x14e>
    pcb = uncon_pcb;
 8019612:	69fb      	ldr	r3, [r7, #28]
 8019614:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019618:	2b00      	cmp	r3, #0
 801961a:	d002      	beq.n	8019622 <udp_input+0x15a>
    for_us = 1;
 801961c:	2301      	movs	r3, #1
 801961e:	76fb      	strb	r3, [r7, #27]
 8019620:	e00a      	b.n	8019638 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	3304      	adds	r3, #4
 8019626:	681a      	ldr	r2, [r3, #0]
 8019628:	4b2d      	ldr	r3, [pc, #180]	; (80196e0 <udp_input+0x218>)
 801962a:	695b      	ldr	r3, [r3, #20]
 801962c:	429a      	cmp	r2, r3
 801962e:	bf0c      	ite	eq
 8019630:	2301      	moveq	r3, #1
 8019632:	2300      	movne	r3, #0
 8019634:	b2db      	uxtb	r3, r3
 8019636:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019638:	7efb      	ldrb	r3, [r7, #27]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d041      	beq.n	80196c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801963e:	2108      	movs	r1, #8
 8019640:	6878      	ldr	r0, [r7, #4]
 8019642:	f7f9 fddb 	bl	80131fc <pbuf_remove_header>
 8019646:	4603      	mov	r3, r0
 8019648:	2b00      	cmp	r3, #0
 801964a:	d00a      	beq.n	8019662 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801964c:	4b20      	ldr	r3, [pc, #128]	; (80196d0 <udp_input+0x208>)
 801964e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019652:	4925      	ldr	r1, [pc, #148]	; (80196e8 <udp_input+0x220>)
 8019654:	4820      	ldr	r0, [pc, #128]	; (80196d8 <udp_input+0x210>)
 8019656:	f001 fddb 	bl	801b210 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7f9 fe54 	bl	8013308 <pbuf_free>
      goto end;
 8019660:	e032      	b.n	80196c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019664:	2b00      	cmp	r3, #0
 8019666:	d012      	beq.n	801968e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966a:	699b      	ldr	r3, [r3, #24]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d00a      	beq.n	8019686 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019672:	699c      	ldr	r4, [r3, #24]
 8019674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019676:	69d8      	ldr	r0, [r3, #28]
 8019678:	8a3b      	ldrh	r3, [r7, #16]
 801967a:	9300      	str	r3, [sp, #0]
 801967c:	4b1b      	ldr	r3, [pc, #108]	; (80196ec <udp_input+0x224>)
 801967e:	687a      	ldr	r2, [r7, #4]
 8019680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019682:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019684:	e021      	b.n	80196ca <udp_input+0x202>
        pbuf_free(p);
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	f7f9 fe3e 	bl	8013308 <pbuf_free>
        goto end;
 801968c:	e01c      	b.n	80196c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801968e:	7cfb      	ldrb	r3, [r7, #19]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d112      	bne.n	80196ba <udp_input+0x1f2>
 8019694:	4b12      	ldr	r3, [pc, #72]	; (80196e0 <udp_input+0x218>)
 8019696:	695b      	ldr	r3, [r3, #20]
 8019698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801969c:	2be0      	cmp	r3, #224	; 0xe0
 801969e:	d00c      	beq.n	80196ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80196a0:	4b0f      	ldr	r3, [pc, #60]	; (80196e0 <udp_input+0x218>)
 80196a2:	899b      	ldrh	r3, [r3, #12]
 80196a4:	3308      	adds	r3, #8
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	b21b      	sxth	r3, r3
 80196aa:	4619      	mov	r1, r3
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f7f9 fe18 	bl	80132e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80196b2:	2103      	movs	r1, #3
 80196b4:	6878      	ldr	r0, [r7, #4]
 80196b6:	f7f6 ffd7 	bl	8010668 <icmp_dest_unreach>
      pbuf_free(p);
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	f7f9 fe24 	bl	8013308 <pbuf_free>
  return;
 80196c0:	e003      	b.n	80196ca <udp_input+0x202>
    pbuf_free(p);
 80196c2:	6878      	ldr	r0, [r7, #4]
 80196c4:	f7f9 fe20 	bl	8013308 <pbuf_free>
  return;
 80196c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80196ca:	372c      	adds	r7, #44	; 0x2c
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bd90      	pop	{r4, r7, pc}
 80196d0:	080200b4 	.word	0x080200b4
 80196d4:	08020174 	.word	0x08020174
 80196d8:	08020124 	.word	0x08020124
 80196dc:	0802018c 	.word	0x0802018c
 80196e0:	24005960 	.word	0x24005960
 80196e4:	24008a64 	.word	0x24008a64
 80196e8:	080201a8 	.word	0x080201a8
 80196ec:	24005970 	.word	0x24005970

080196f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b088      	sub	sp, #32
 80196f4:	af02      	add	r7, sp, #8
 80196f6:	60f8      	str	r0, [r7, #12]
 80196f8:	60b9      	str	r1, [r7, #8]
 80196fa:	607a      	str	r2, [r7, #4]
 80196fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d109      	bne.n	8019718 <udp_sendto_if+0x28>
 8019704:	4b2e      	ldr	r3, [pc, #184]	; (80197c0 <udp_sendto_if+0xd0>)
 8019706:	f44f 7220 	mov.w	r2, #640	; 0x280
 801970a:	492e      	ldr	r1, [pc, #184]	; (80197c4 <udp_sendto_if+0xd4>)
 801970c:	482e      	ldr	r0, [pc, #184]	; (80197c8 <udp_sendto_if+0xd8>)
 801970e:	f001 fd7f 	bl	801b210 <iprintf>
 8019712:	f06f 030f 	mvn.w	r3, #15
 8019716:	e04f      	b.n	80197b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019718:	68bb      	ldr	r3, [r7, #8]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d109      	bne.n	8019732 <udp_sendto_if+0x42>
 801971e:	4b28      	ldr	r3, [pc, #160]	; (80197c0 <udp_sendto_if+0xd0>)
 8019720:	f240 2281 	movw	r2, #641	; 0x281
 8019724:	4929      	ldr	r1, [pc, #164]	; (80197cc <udp_sendto_if+0xdc>)
 8019726:	4828      	ldr	r0, [pc, #160]	; (80197c8 <udp_sendto_if+0xd8>)
 8019728:	f001 fd72 	bl	801b210 <iprintf>
 801972c:	f06f 030f 	mvn.w	r3, #15
 8019730:	e042      	b.n	80197b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d109      	bne.n	801974c <udp_sendto_if+0x5c>
 8019738:	4b21      	ldr	r3, [pc, #132]	; (80197c0 <udp_sendto_if+0xd0>)
 801973a:	f240 2282 	movw	r2, #642	; 0x282
 801973e:	4924      	ldr	r1, [pc, #144]	; (80197d0 <udp_sendto_if+0xe0>)
 8019740:	4821      	ldr	r0, [pc, #132]	; (80197c8 <udp_sendto_if+0xd8>)
 8019742:	f001 fd65 	bl	801b210 <iprintf>
 8019746:	f06f 030f 	mvn.w	r3, #15
 801974a:	e035      	b.n	80197b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801974c:	6a3b      	ldr	r3, [r7, #32]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d109      	bne.n	8019766 <udp_sendto_if+0x76>
 8019752:	4b1b      	ldr	r3, [pc, #108]	; (80197c0 <udp_sendto_if+0xd0>)
 8019754:	f240 2283 	movw	r2, #643	; 0x283
 8019758:	491e      	ldr	r1, [pc, #120]	; (80197d4 <udp_sendto_if+0xe4>)
 801975a:	481b      	ldr	r0, [pc, #108]	; (80197c8 <udp_sendto_if+0xd8>)
 801975c:	f001 fd58 	bl	801b210 <iprintf>
 8019760:	f06f 030f 	mvn.w	r3, #15
 8019764:	e028      	b.n	80197b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d009      	beq.n	8019780 <udp_sendto_if+0x90>
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d005      	beq.n	8019780 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801977c:	2be0      	cmp	r3, #224	; 0xe0
 801977e:	d103      	bne.n	8019788 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019780:	6a3b      	ldr	r3, [r7, #32]
 8019782:	3304      	adds	r3, #4
 8019784:	617b      	str	r3, [r7, #20]
 8019786:	e00b      	b.n	80197a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	681a      	ldr	r2, [r3, #0]
 801978c:	6a3b      	ldr	r3, [r7, #32]
 801978e:	3304      	adds	r3, #4
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	429a      	cmp	r2, r3
 8019794:	d002      	beq.n	801979c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019796:	f06f 0303 	mvn.w	r3, #3
 801979a:	e00d      	b.n	80197b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80197a0:	887a      	ldrh	r2, [r7, #2]
 80197a2:	697b      	ldr	r3, [r7, #20]
 80197a4:	9301      	str	r3, [sp, #4]
 80197a6:	6a3b      	ldr	r3, [r7, #32]
 80197a8:	9300      	str	r3, [sp, #0]
 80197aa:	4613      	mov	r3, r2
 80197ac:	687a      	ldr	r2, [r7, #4]
 80197ae:	68b9      	ldr	r1, [r7, #8]
 80197b0:	68f8      	ldr	r0, [r7, #12]
 80197b2:	f000 f811 	bl	80197d8 <udp_sendto_if_src>
 80197b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80197b8:	4618      	mov	r0, r3
 80197ba:	3718      	adds	r7, #24
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd80      	pop	{r7, pc}
 80197c0:	080200b4 	.word	0x080200b4
 80197c4:	08020244 	.word	0x08020244
 80197c8:	08020124 	.word	0x08020124
 80197cc:	08020260 	.word	0x08020260
 80197d0:	0802027c 	.word	0x0802027c
 80197d4:	0802029c 	.word	0x0802029c

080197d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b08c      	sub	sp, #48	; 0x30
 80197dc:	af04      	add	r7, sp, #16
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	607a      	str	r2, [r7, #4]
 80197e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d109      	bne.n	8019800 <udp_sendto_if_src+0x28>
 80197ec:	4b65      	ldr	r3, [pc, #404]	; (8019984 <udp_sendto_if_src+0x1ac>)
 80197ee:	f240 22d1 	movw	r2, #721	; 0x2d1
 80197f2:	4965      	ldr	r1, [pc, #404]	; (8019988 <udp_sendto_if_src+0x1b0>)
 80197f4:	4865      	ldr	r0, [pc, #404]	; (801998c <udp_sendto_if_src+0x1b4>)
 80197f6:	f001 fd0b 	bl	801b210 <iprintf>
 80197fa:	f06f 030f 	mvn.w	r3, #15
 80197fe:	e0bc      	b.n	801997a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019800:	68bb      	ldr	r3, [r7, #8]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d109      	bne.n	801981a <udp_sendto_if_src+0x42>
 8019806:	4b5f      	ldr	r3, [pc, #380]	; (8019984 <udp_sendto_if_src+0x1ac>)
 8019808:	f240 22d2 	movw	r2, #722	; 0x2d2
 801980c:	4960      	ldr	r1, [pc, #384]	; (8019990 <udp_sendto_if_src+0x1b8>)
 801980e:	485f      	ldr	r0, [pc, #380]	; (801998c <udp_sendto_if_src+0x1b4>)
 8019810:	f001 fcfe 	bl	801b210 <iprintf>
 8019814:	f06f 030f 	mvn.w	r3, #15
 8019818:	e0af      	b.n	801997a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d109      	bne.n	8019834 <udp_sendto_if_src+0x5c>
 8019820:	4b58      	ldr	r3, [pc, #352]	; (8019984 <udp_sendto_if_src+0x1ac>)
 8019822:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019826:	495b      	ldr	r1, [pc, #364]	; (8019994 <udp_sendto_if_src+0x1bc>)
 8019828:	4858      	ldr	r0, [pc, #352]	; (801998c <udp_sendto_if_src+0x1b4>)
 801982a:	f001 fcf1 	bl	801b210 <iprintf>
 801982e:	f06f 030f 	mvn.w	r3, #15
 8019832:	e0a2      	b.n	801997a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019836:	2b00      	cmp	r3, #0
 8019838:	d109      	bne.n	801984e <udp_sendto_if_src+0x76>
 801983a:	4b52      	ldr	r3, [pc, #328]	; (8019984 <udp_sendto_if_src+0x1ac>)
 801983c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019840:	4955      	ldr	r1, [pc, #340]	; (8019998 <udp_sendto_if_src+0x1c0>)
 8019842:	4852      	ldr	r0, [pc, #328]	; (801998c <udp_sendto_if_src+0x1b4>)
 8019844:	f001 fce4 	bl	801b210 <iprintf>
 8019848:	f06f 030f 	mvn.w	r3, #15
 801984c:	e095      	b.n	801997a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019850:	2b00      	cmp	r3, #0
 8019852:	d109      	bne.n	8019868 <udp_sendto_if_src+0x90>
 8019854:	4b4b      	ldr	r3, [pc, #300]	; (8019984 <udp_sendto_if_src+0x1ac>)
 8019856:	f240 22d5 	movw	r2, #725	; 0x2d5
 801985a:	4950      	ldr	r1, [pc, #320]	; (801999c <udp_sendto_if_src+0x1c4>)
 801985c:	484b      	ldr	r0, [pc, #300]	; (801998c <udp_sendto_if_src+0x1b4>)
 801985e:	f001 fcd7 	bl	801b210 <iprintf>
 8019862:	f06f 030f 	mvn.w	r3, #15
 8019866:	e088      	b.n	801997a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	8a5b      	ldrh	r3, [r3, #18]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d10f      	bne.n	8019890 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019870:	68f9      	ldr	r1, [r7, #12]
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	8a5b      	ldrh	r3, [r3, #18]
 8019876:	461a      	mov	r2, r3
 8019878:	68f8      	ldr	r0, [r7, #12]
 801987a:	f000 f893 	bl	80199a4 <udp_bind>
 801987e:	4603      	mov	r3, r0
 8019880:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019882:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d002      	beq.n	8019890 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801988a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801988e:	e074      	b.n	801997a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019890:	68bb      	ldr	r3, [r7, #8]
 8019892:	891b      	ldrh	r3, [r3, #8]
 8019894:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019898:	4293      	cmp	r3, r2
 801989a:	d902      	bls.n	80198a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801989c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80198a0:	e06b      	b.n	801997a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80198a2:	2108      	movs	r1, #8
 80198a4:	68b8      	ldr	r0, [r7, #8]
 80198a6:	f7f9 fc99 	bl	80131dc <pbuf_add_header>
 80198aa:	4603      	mov	r3, r0
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d015      	beq.n	80198dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80198b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80198b4:	2108      	movs	r1, #8
 80198b6:	2022      	movs	r0, #34	; 0x22
 80198b8:	f7f9 fa46 	bl	8012d48 <pbuf_alloc>
 80198bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80198be:	69fb      	ldr	r3, [r7, #28]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d102      	bne.n	80198ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80198c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80198c8:	e057      	b.n	801997a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	891b      	ldrh	r3, [r3, #8]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d006      	beq.n	80198e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80198d2:	68b9      	ldr	r1, [r7, #8]
 80198d4:	69f8      	ldr	r0, [r7, #28]
 80198d6:	f7f9 fe3b 	bl	8013550 <pbuf_chain>
 80198da:	e001      	b.n	80198e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80198dc:	68bb      	ldr	r3, [r7, #8]
 80198de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	895b      	ldrh	r3, [r3, #10]
 80198e4:	2b07      	cmp	r3, #7
 80198e6:	d806      	bhi.n	80198f6 <udp_sendto_if_src+0x11e>
 80198e8:	4b26      	ldr	r3, [pc, #152]	; (8019984 <udp_sendto_if_src+0x1ac>)
 80198ea:	f240 320e 	movw	r2, #782	; 0x30e
 80198ee:	492c      	ldr	r1, [pc, #176]	; (80199a0 <udp_sendto_if_src+0x1c8>)
 80198f0:	4826      	ldr	r0, [pc, #152]	; (801998c <udp_sendto_if_src+0x1b4>)
 80198f2:	f001 fc8d 	bl	801b210 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	685b      	ldr	r3, [r3, #4]
 80198fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	8a5b      	ldrh	r3, [r3, #18]
 8019900:	4618      	mov	r0, r3
 8019902:	f7f3 fe99 	bl	800d638 <lwip_htons>
 8019906:	4603      	mov	r3, r0
 8019908:	461a      	mov	r2, r3
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801990e:	887b      	ldrh	r3, [r7, #2]
 8019910:	4618      	mov	r0, r3
 8019912:	f7f3 fe91 	bl	800d638 <lwip_htons>
 8019916:	4603      	mov	r3, r0
 8019918:	461a      	mov	r2, r3
 801991a:	697b      	ldr	r3, [r7, #20]
 801991c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	2200      	movs	r2, #0
 8019922:	719a      	strb	r2, [r3, #6]
 8019924:	2200      	movs	r2, #0
 8019926:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	891b      	ldrh	r3, [r3, #8]
 801992c:	4618      	mov	r0, r3
 801992e:	f7f3 fe83 	bl	800d638 <lwip_htons>
 8019932:	4603      	mov	r3, r0
 8019934:	461a      	mov	r2, r3
 8019936:	697b      	ldr	r3, [r7, #20]
 8019938:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801993a:	2311      	movs	r3, #17
 801993c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	7adb      	ldrb	r3, [r3, #11]
 8019942:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	7a9b      	ldrb	r3, [r3, #10]
 8019948:	7cb9      	ldrb	r1, [r7, #18]
 801994a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801994c:	9202      	str	r2, [sp, #8]
 801994e:	7cfa      	ldrb	r2, [r7, #19]
 8019950:	9201      	str	r2, [sp, #4]
 8019952:	9300      	str	r3, [sp, #0]
 8019954:	460b      	mov	r3, r1
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801995a:	69f8      	ldr	r0, [r7, #28]
 801995c:	f7f7 f9f0 	bl	8010d40 <ip4_output_if_src>
 8019960:	4603      	mov	r3, r0
 8019962:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019964:	69fa      	ldr	r2, [r7, #28]
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	429a      	cmp	r2, r3
 801996a:	d004      	beq.n	8019976 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801996c:	69f8      	ldr	r0, [r7, #28]
 801996e:	f7f9 fccb 	bl	8013308 <pbuf_free>
    q = NULL;
 8019972:	2300      	movs	r3, #0
 8019974:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019976:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801997a:	4618      	mov	r0, r3
 801997c:	3720      	adds	r7, #32
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}
 8019982:	bf00      	nop
 8019984:	080200b4 	.word	0x080200b4
 8019988:	080202bc 	.word	0x080202bc
 801998c:	08020124 	.word	0x08020124
 8019990:	080202dc 	.word	0x080202dc
 8019994:	080202fc 	.word	0x080202fc
 8019998:	08020320 	.word	0x08020320
 801999c:	08020344 	.word	0x08020344
 80199a0:	08020368 	.word	0x08020368

080199a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b086      	sub	sp, #24
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	60f8      	str	r0, [r7, #12]
 80199ac:	60b9      	str	r1, [r7, #8]
 80199ae:	4613      	mov	r3, r2
 80199b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80199b2:	68bb      	ldr	r3, [r7, #8]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d101      	bne.n	80199bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80199b8:	4b39      	ldr	r3, [pc, #228]	; (8019aa0 <udp_bind+0xfc>)
 80199ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d109      	bne.n	80199d6 <udp_bind+0x32>
 80199c2:	4b38      	ldr	r3, [pc, #224]	; (8019aa4 <udp_bind+0x100>)
 80199c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80199c8:	4937      	ldr	r1, [pc, #220]	; (8019aa8 <udp_bind+0x104>)
 80199ca:	4838      	ldr	r0, [pc, #224]	; (8019aac <udp_bind+0x108>)
 80199cc:	f001 fc20 	bl	801b210 <iprintf>
 80199d0:	f06f 030f 	mvn.w	r3, #15
 80199d4:	e060      	b.n	8019a98 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80199d6:	2300      	movs	r3, #0
 80199d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80199da:	4b35      	ldr	r3, [pc, #212]	; (8019ab0 <udp_bind+0x10c>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	617b      	str	r3, [r7, #20]
 80199e0:	e009      	b.n	80199f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80199e2:	68fa      	ldr	r2, [r7, #12]
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	429a      	cmp	r2, r3
 80199e8:	d102      	bne.n	80199f0 <udp_bind+0x4c>
      rebind = 1;
 80199ea:	2301      	movs	r3, #1
 80199ec:	74fb      	strb	r3, [r7, #19]
      break;
 80199ee:	e005      	b.n	80199fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	68db      	ldr	r3, [r3, #12]
 80199f4:	617b      	str	r3, [r7, #20]
 80199f6:	697b      	ldr	r3, [r7, #20]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d1f2      	bne.n	80199e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80199fc:	88fb      	ldrh	r3, [r7, #6]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d109      	bne.n	8019a16 <udp_bind+0x72>
    port = udp_new_port();
 8019a02:	f7ff fcc5 	bl	8019390 <udp_new_port>
 8019a06:	4603      	mov	r3, r0
 8019a08:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019a0a:	88fb      	ldrh	r3, [r7, #6]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d12c      	bne.n	8019a6a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019a10:	f06f 0307 	mvn.w	r3, #7
 8019a14:	e040      	b.n	8019a98 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a16:	4b26      	ldr	r3, [pc, #152]	; (8019ab0 <udp_bind+0x10c>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	617b      	str	r3, [r7, #20]
 8019a1c:	e022      	b.n	8019a64 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019a1e:	68fa      	ldr	r2, [r7, #12]
 8019a20:	697b      	ldr	r3, [r7, #20]
 8019a22:	429a      	cmp	r2, r3
 8019a24:	d01b      	beq.n	8019a5e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	8a5b      	ldrh	r3, [r3, #18]
 8019a2a:	88fa      	ldrh	r2, [r7, #6]
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	d116      	bne.n	8019a5e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a30:	697b      	ldr	r3, [r7, #20]
 8019a32:	681a      	ldr	r2, [r3, #0]
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019a38:	429a      	cmp	r2, r3
 8019a3a:	d00d      	beq.n	8019a58 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d00a      	beq.n	8019a58 <udp_bind+0xb4>
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d006      	beq.n	8019a58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019a4a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d003      	beq.n	8019a58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d102      	bne.n	8019a5e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019a58:	f06f 0307 	mvn.w	r3, #7
 8019a5c:	e01c      	b.n	8019a98 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	68db      	ldr	r3, [r3, #12]
 8019a62:	617b      	str	r3, [r7, #20]
 8019a64:	697b      	ldr	r3, [r7, #20]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d1d9      	bne.n	8019a1e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d002      	beq.n	8019a76 <udp_bind+0xd2>
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	e000      	b.n	8019a78 <udp_bind+0xd4>
 8019a76:	2300      	movs	r3, #0
 8019a78:	68fa      	ldr	r2, [r7, #12]
 8019a7a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	88fa      	ldrh	r2, [r7, #6]
 8019a80:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019a82:	7cfb      	ldrb	r3, [r7, #19]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d106      	bne.n	8019a96 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019a88:	4b09      	ldr	r3, [pc, #36]	; (8019ab0 <udp_bind+0x10c>)
 8019a8a:	681a      	ldr	r2, [r3, #0]
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019a90:	4a07      	ldr	r2, [pc, #28]	; (8019ab0 <udp_bind+0x10c>)
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019a96:	2300      	movs	r3, #0
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	3718      	adds	r7, #24
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}
 8019aa0:	08020504 	.word	0x08020504
 8019aa4:	080200b4 	.word	0x080200b4
 8019aa8:	08020398 	.word	0x08020398
 8019aac:	08020124 	.word	0x08020124
 8019ab0:	24008a64 	.word	0x24008a64

08019ab4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b086      	sub	sp, #24
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	60f8      	str	r0, [r7, #12]
 8019abc:	60b9      	str	r1, [r7, #8]
 8019abe:	4613      	mov	r3, r2
 8019ac0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d109      	bne.n	8019adc <udp_connect+0x28>
 8019ac8:	4b2c      	ldr	r3, [pc, #176]	; (8019b7c <udp_connect+0xc8>)
 8019aca:	f240 4235 	movw	r2, #1077	; 0x435
 8019ace:	492c      	ldr	r1, [pc, #176]	; (8019b80 <udp_connect+0xcc>)
 8019ad0:	482c      	ldr	r0, [pc, #176]	; (8019b84 <udp_connect+0xd0>)
 8019ad2:	f001 fb9d 	bl	801b210 <iprintf>
 8019ad6:	f06f 030f 	mvn.w	r3, #15
 8019ada:	e04b      	b.n	8019b74 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019adc:	68bb      	ldr	r3, [r7, #8]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d109      	bne.n	8019af6 <udp_connect+0x42>
 8019ae2:	4b26      	ldr	r3, [pc, #152]	; (8019b7c <udp_connect+0xc8>)
 8019ae4:	f240 4236 	movw	r2, #1078	; 0x436
 8019ae8:	4927      	ldr	r1, [pc, #156]	; (8019b88 <udp_connect+0xd4>)
 8019aea:	4826      	ldr	r0, [pc, #152]	; (8019b84 <udp_connect+0xd0>)
 8019aec:	f001 fb90 	bl	801b210 <iprintf>
 8019af0:	f06f 030f 	mvn.w	r3, #15
 8019af4:	e03e      	b.n	8019b74 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	8a5b      	ldrh	r3, [r3, #18]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d10f      	bne.n	8019b1e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019afe:	68f9      	ldr	r1, [r7, #12]
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	8a5b      	ldrh	r3, [r3, #18]
 8019b04:	461a      	mov	r2, r3
 8019b06:	68f8      	ldr	r0, [r7, #12]
 8019b08:	f7ff ff4c 	bl	80199a4 <udp_bind>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019b10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d002      	beq.n	8019b1e <udp_connect+0x6a>
      return err;
 8019b18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b1c:	e02a      	b.n	8019b74 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d002      	beq.n	8019b2a <udp_connect+0x76>
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	e000      	b.n	8019b2c <udp_connect+0x78>
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	68fa      	ldr	r2, [r7, #12]
 8019b2e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	88fa      	ldrh	r2, [r7, #6]
 8019b34:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	7c1b      	ldrb	r3, [r3, #16]
 8019b3a:	f043 0304 	orr.w	r3, r3, #4
 8019b3e:	b2da      	uxtb	r2, r3
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b44:	4b11      	ldr	r3, [pc, #68]	; (8019b8c <udp_connect+0xd8>)
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	617b      	str	r3, [r7, #20]
 8019b4a:	e008      	b.n	8019b5e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019b4c:	68fa      	ldr	r2, [r7, #12]
 8019b4e:	697b      	ldr	r3, [r7, #20]
 8019b50:	429a      	cmp	r2, r3
 8019b52:	d101      	bne.n	8019b58 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019b54:	2300      	movs	r3, #0
 8019b56:	e00d      	b.n	8019b74 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	68db      	ldr	r3, [r3, #12]
 8019b5c:	617b      	str	r3, [r7, #20]
 8019b5e:	697b      	ldr	r3, [r7, #20]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d1f3      	bne.n	8019b4c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019b64:	4b09      	ldr	r3, [pc, #36]	; (8019b8c <udp_connect+0xd8>)
 8019b66:	681a      	ldr	r2, [r3, #0]
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019b6c:	4a07      	ldr	r2, [pc, #28]	; (8019b8c <udp_connect+0xd8>)
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8019b72:	2300      	movs	r3, #0
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	3718      	adds	r7, #24
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	080200b4 	.word	0x080200b4
 8019b80:	080203b0 	.word	0x080203b0
 8019b84:	08020124 	.word	0x08020124
 8019b88:	080203cc 	.word	0x080203cc
 8019b8c:	24008a64 	.word	0x24008a64

08019b90 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b084      	sub	sp, #16
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	60f8      	str	r0, [r7, #12]
 8019b98:	60b9      	str	r1, [r7, #8]
 8019b9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d107      	bne.n	8019bb2 <udp_recv+0x22>
 8019ba2:	4b08      	ldr	r3, [pc, #32]	; (8019bc4 <udp_recv+0x34>)
 8019ba4:	f240 428a 	movw	r2, #1162	; 0x48a
 8019ba8:	4907      	ldr	r1, [pc, #28]	; (8019bc8 <udp_recv+0x38>)
 8019baa:	4808      	ldr	r0, [pc, #32]	; (8019bcc <udp_recv+0x3c>)
 8019bac:	f001 fb30 	bl	801b210 <iprintf>
 8019bb0:	e005      	b.n	8019bbe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	68ba      	ldr	r2, [r7, #8]
 8019bb6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	687a      	ldr	r2, [r7, #4]
 8019bbc:	61da      	str	r2, [r3, #28]
}
 8019bbe:	3710      	adds	r7, #16
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}
 8019bc4:	080200b4 	.word	0x080200b4
 8019bc8:	08020404 	.word	0x08020404
 8019bcc:	08020124 	.word	0x08020124

08019bd0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b084      	sub	sp, #16
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d107      	bne.n	8019bee <udp_remove+0x1e>
 8019bde:	4b19      	ldr	r3, [pc, #100]	; (8019c44 <udp_remove+0x74>)
 8019be0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019be4:	4918      	ldr	r1, [pc, #96]	; (8019c48 <udp_remove+0x78>)
 8019be6:	4819      	ldr	r0, [pc, #100]	; (8019c4c <udp_remove+0x7c>)
 8019be8:	f001 fb12 	bl	801b210 <iprintf>
 8019bec:	e026      	b.n	8019c3c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019bee:	4b18      	ldr	r3, [pc, #96]	; (8019c50 <udp_remove+0x80>)
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	687a      	ldr	r2, [r7, #4]
 8019bf4:	429a      	cmp	r2, r3
 8019bf6:	d105      	bne.n	8019c04 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019bf8:	4b15      	ldr	r3, [pc, #84]	; (8019c50 <udp_remove+0x80>)
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	68db      	ldr	r3, [r3, #12]
 8019bfe:	4a14      	ldr	r2, [pc, #80]	; (8019c50 <udp_remove+0x80>)
 8019c00:	6013      	str	r3, [r2, #0]
 8019c02:	e017      	b.n	8019c34 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c04:	4b12      	ldr	r3, [pc, #72]	; (8019c50 <udp_remove+0x80>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	60fb      	str	r3, [r7, #12]
 8019c0a:	e010      	b.n	8019c2e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	68db      	ldr	r3, [r3, #12]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d009      	beq.n	8019c28 <udp_remove+0x58>
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	68db      	ldr	r3, [r3, #12]
 8019c18:	687a      	ldr	r2, [r7, #4]
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d104      	bne.n	8019c28 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	68da      	ldr	r2, [r3, #12]
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	60da      	str	r2, [r3, #12]
        break;
 8019c26:	e005      	b.n	8019c34 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	68db      	ldr	r3, [r3, #12]
 8019c2c:	60fb      	str	r3, [r7, #12]
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d1eb      	bne.n	8019c0c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019c34:	6879      	ldr	r1, [r7, #4]
 8019c36:	2000      	movs	r0, #0
 8019c38:	f7f8 fcba 	bl	80125b0 <memp_free>
}
 8019c3c:	3710      	adds	r7, #16
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	bd80      	pop	{r7, pc}
 8019c42:	bf00      	nop
 8019c44:	080200b4 	.word	0x080200b4
 8019c48:	0802041c 	.word	0x0802041c
 8019c4c:	08020124 	.word	0x08020124
 8019c50:	24008a64 	.word	0x24008a64

08019c54 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b082      	sub	sp, #8
 8019c58:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019c5a:	2000      	movs	r0, #0
 8019c5c:	f7f8 fc32 	bl	80124c4 <memp_malloc>
 8019c60:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d007      	beq.n	8019c78 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019c68:	2220      	movs	r2, #32
 8019c6a:	2100      	movs	r1, #0
 8019c6c:	6878      	ldr	r0, [r7, #4]
 8019c6e:	f000 fe8e 	bl	801a98e <memset>
    pcb->ttl = UDP_TTL;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	22ff      	movs	r2, #255	; 0xff
 8019c76:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019c78:	687b      	ldr	r3, [r7, #4]
}
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	3708      	adds	r7, #8
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	bd80      	pop	{r7, pc}
	...

08019c84 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019c84:	b480      	push	{r7}
 8019c86:	b085      	sub	sp, #20
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
 8019c8c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d01e      	beq.n	8019cd2 <udp_netif_ip_addr_changed+0x4e>
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d01a      	beq.n	8019cd2 <udp_netif_ip_addr_changed+0x4e>
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d017      	beq.n	8019cd2 <udp_netif_ip_addr_changed+0x4e>
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d013      	beq.n	8019cd2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019caa:	4b0d      	ldr	r3, [pc, #52]	; (8019ce0 <udp_netif_ip_addr_changed+0x5c>)
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	60fb      	str	r3, [r7, #12]
 8019cb0:	e00c      	b.n	8019ccc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	681a      	ldr	r2, [r3, #0]
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	429a      	cmp	r2, r3
 8019cbc:	d103      	bne.n	8019cc6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	681a      	ldr	r2, [r3, #0]
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	68db      	ldr	r3, [r3, #12]
 8019cca:	60fb      	str	r3, [r7, #12]
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d1ef      	bne.n	8019cb2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019cd2:	bf00      	nop
 8019cd4:	3714      	adds	r7, #20
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop
 8019ce0:	24008a64 	.word	0x24008a64

08019ce4 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b082      	sub	sp, #8
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
 8019cec:	6039      	str	r1, [r7, #0]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	683a      	ldr	r2, [r7, #0]
 8019cf2:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	683a      	ldr	r2, [r7, #0]
 8019cf8:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 8019cfa:	2103      	movs	r1, #3
 8019cfc:	4805      	ldr	r0, [pc, #20]	; (8019d14 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 8019cfe:	f7f0 ff07 	bl	800ab10 <osSemaphoreCreate>
 8019d02:	4602      	mov	r2, r0
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	605a      	str	r2, [r3, #4]
}
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	3708      	adds	r7, #8
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	bd80      	pop	{r7, pc}
 8019d12:	bf00      	nop
 8019d14:	08020634 	.word	0x08020634

08019d18 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b084      	sub	sp, #16
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	60f8      	str	r0, [r7, #12]
 8019d20:	60b9      	str	r1, [r7, #8]
 8019d22:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 8019d24:	2002      	movs	r0, #2
 8019d26:	f7eb ff47 	bl	8005bb8 <HAL_HSEM_IsSemTaken>
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	bf14      	ite	ne
 8019d30:	2301      	movne	r3, #1
 8019d32:	2300      	moveq	r3, #0
 8019d34:	b2db      	uxtb	r3, r3
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d000      	beq.n	8019d3c <_ZN7Console8transmitEPhm+0x24>
 8019d3a:	e7f3      	b.n	8019d24 <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 8019d3c:	2102      	movs	r1, #2
 8019d3e:	2002      	movs	r0, #2
 8019d40:	f7eb fefe 	bl	8005b40 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	6818      	ldr	r0, [r3, #0]
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	b29a      	uxth	r2, r3
 8019d4c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019d50:	68b9      	ldr	r1, [r7, #8]
 8019d52:	f7ef f847 	bl	8008de4 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 8019d56:	2102      	movs	r1, #2
 8019d58:	2002      	movs	r0, #2
 8019d5a:	f7eb ff43 	bl	8005be4 <HAL_HSEM_Release>
}
 8019d5e:	bf00      	nop
 8019d60:	3710      	adds	r7, #16
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}

08019d66 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 8019d66:	b40e      	push	{r1, r2, r3}
 8019d68:	b590      	push	{r4, r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 8019d70:	f107 0320 	add.w	r3, r7, #32
 8019d74:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	3308      	adds	r3, #8
 8019d7a:	68fa      	ldr	r2, [r7, #12]
 8019d7c:	69f9      	ldr	r1, [r7, #28]
 8019d7e:	4618      	mov	r0, r3
 8019d80:	f001 faec 	bl	801b35c <vsiprintf>
 8019d84:	4603      	mov	r3, r0
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	bfcc      	ite	gt
 8019d8a:	2301      	movgt	r3, #1
 8019d8c:	2300      	movle	r3, #0
 8019d8e:	b2db      	uxtb	r3, r3
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d00d      	beq.n	8019db0 <_ZN7Console6printfEPKcz+0x4a>
		transmit((uint8_t*) buffer, strlen(buffer));
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f103 0408 	add.w	r4, r3, #8
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	3308      	adds	r3, #8
 8019d9e:	4618      	mov	r0, r3
 8019da0:	f7e6 faa8 	bl	80002f4 <strlen>
 8019da4:	4603      	mov	r3, r0
 8019da6:	461a      	mov	r2, r3
 8019da8:	4621      	mov	r1, r4
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f7ff ffb4 	bl	8019d18 <_ZN7Console8transmitEPhm>
	}

	va_end(args);
}
 8019db0:	bf00      	nop
 8019db2:	3710      	adds	r7, #16
 8019db4:	46bd      	mov	sp, r7
 8019db6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8019dba:	b003      	add	sp, #12
 8019dbc:	4770      	bx	lr
	...

08019dc0 <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
 8019dc8:	6039      	str	r1, [r7, #0]
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	2b01      	cmp	r3, #1
 8019dce:	d108      	bne.n	8019de2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	d103      	bne.n	8019de2 <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 8019dda:	4904      	ldr	r1, [pc, #16]	; (8019dec <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8019ddc:	4804      	ldr	r0, [pc, #16]	; (8019df0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8019dde:	f7ff ff81 	bl	8019ce4 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 8019de2:	bf00      	nop
 8019de4:	3708      	adds	r7, #8
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	2400531c 	.word	0x2400531c
 8019df0:	24004970 	.word	0x24004970

08019df4 <_GLOBAL__sub_I_console>:
 8019df4:	b580      	push	{r7, lr}
 8019df6:	af00      	add	r7, sp, #0
 8019df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019dfc:	2001      	movs	r0, #1
 8019dfe:	f7ff ffdf 	bl	8019dc0 <_Z41__static_initialization_and_destruction_0ii>
 8019e02:	bd80      	pop	{r7, pc}

08019e04 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 8019e04:	b480      	push	{r7}
 8019e06:	b083      	sub	sp, #12
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]

}
 8019e0c:	bf00      	nop
 8019e0e:	370c      	adds	r7, #12
 8019e10:	46bd      	mov	sp, r7
 8019e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e16:	4770      	bx	lr

08019e18 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	b082      	sub	sp, #8
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	689b      	ldr	r3, [r3, #8]
 8019e24:	4618      	mov	r0, r3
 8019e26:	f7eb fef1 	bl	8005c0c <HAL_IWDG_Refresh>
	osDelay(100);
 8019e2a:	2064      	movs	r0, #100	; 0x64
 8019e2c:	f7f0 fdbf 	bl	800a9ae <osDelay>
}
 8019e30:	bf00      	nop
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 8019e38:	b480      	push	{r7}
 8019e3a:	b083      	sub	sp, #12
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
 8019e40:	4a04      	ldr	r2, [pc, #16]	; (8019e54 <_ZN6ThreadD1Ev+0x1c>)
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	601a      	str	r2, [r3, #0]
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	4618      	mov	r0, r3
 8019e4a:	370c      	adds	r7, #12
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e52:	4770      	bx	lr
 8019e54:	08020690 	.word	0x08020690

08019e58 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b082      	sub	sp, #8
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 8019e60:	6878      	ldr	r0, [r7, #4]
 8019e62:	f7f1 f8ad 	bl	800afc0 <vPortFree>
}
 8019e66:	bf00      	nop
 8019e68:	3708      	adds	r7, #8
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}
	...

08019e70 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
 8019e78:	6039      	str	r1, [r7, #0]
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	4907      	ldr	r1, [pc, #28]	; (8019e9c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f000 f8b2 	bl	8019fe8 <_ZN6ThreadC1EPKc>
 8019e84:	4a06      	ldr	r2, [pc, #24]	; (8019ea0 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	601a      	str	r2, [r3, #0]
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	683a      	ldr	r2, [r7, #0]
 8019e8e:	609a      	str	r2, [r3, #8]
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	4618      	mov	r0, r3
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	08020434 	.word	0x08020434
 8019ea0:	08020654 	.word	0x08020654

08019ea4 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	b082      	sub	sp, #8
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	6078      	str	r0, [r7, #4]
 8019eac:	4a05      	ldr	r2, [pc, #20]	; (8019ec4 <_ZN14WatchdogThreadD1Ev+0x20>)
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	601a      	str	r2, [r3, #0]
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7ff ffbf 	bl	8019e38 <_ZN6ThreadD1Ev>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3708      	adds	r7, #8
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	08020654 	.word	0x08020654

08019ec8 <__tcf_0>:
}
#endif

#ifdef CORE_CM7
void initCortexM7() {
	static WatchdogThread watchdog(&hiwdg1);
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	af00      	add	r7, sp, #0
 8019ecc:	4801      	ldr	r0, [pc, #4]	; (8019ed4 <__tcf_0+0xc>)
 8019ece:	f7ff ffe9 	bl	8019ea4 <_ZN14WatchdogThreadD1Ev>
 8019ed2:	bd80      	pop	{r7, pc}
 8019ed4:	24004a78 	.word	0x24004a78

08019ed8 <_ZN10LWIPThreadD1Ev>:

#include "Thread.h"

#include <stdint.h>

class LWIPThread : public Thread {
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b082      	sub	sp, #8
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	4a05      	ldr	r2, [pc, #20]	; (8019ef8 <_ZN10LWIPThreadD1Ev+0x20>)
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	601a      	str	r2, [r3, #0]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7ff ffa5 	bl	8019e38 <_ZN6ThreadD1Ev>
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	3708      	adds	r7, #8
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bd80      	pop	{r7, pc}
 8019ef8:	080206a0 	.word	0x080206a0

08019efc <__tcf_1>:
	static LWIPThread lwip("localhost", 42666);
 8019efc:	b580      	push	{r7, lr}
 8019efe:	af00      	add	r7, sp, #0
 8019f00:	4801      	ldr	r0, [pc, #4]	; (8019f08 <__tcf_1+0xc>)
 8019f02:	f7ff ffe9 	bl	8019ed8 <_ZN10LWIPThreadD1Ev>
 8019f06:	bd80      	pop	{r7, pc}
 8019f08:	24004a88 	.word	0x24004a88

08019f0c <initCortexM7>:
void initCortexM7() {
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg1);
 8019f10:	4b24      	ldr	r3, [pc, #144]	; (8019fa4 <initCortexM7+0x98>)
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	f3bf 8f5b 	dmb	ish
 8019f18:	b2db      	uxtb	r3, r3
 8019f1a:	f003 0301 	and.w	r3, r3, #1
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	bf0c      	ite	eq
 8019f22:	2301      	moveq	r3, #1
 8019f24:	2300      	movne	r3, #0
 8019f26:	b2db      	uxtb	r3, r3
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d014      	beq.n	8019f56 <initCortexM7+0x4a>
 8019f2c:	481d      	ldr	r0, [pc, #116]	; (8019fa4 <initCortexM7+0x98>)
 8019f2e:	f000 f9cf 	bl	801a2d0 <__cxa_guard_acquire>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	bf14      	ite	ne
 8019f38:	2301      	movne	r3, #1
 8019f3a:	2300      	moveq	r3, #0
 8019f3c:	b2db      	uxtb	r3, r3
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d009      	beq.n	8019f56 <initCortexM7+0x4a>
 8019f42:	4919      	ldr	r1, [pc, #100]	; (8019fa8 <initCortexM7+0x9c>)
 8019f44:	4819      	ldr	r0, [pc, #100]	; (8019fac <initCortexM7+0xa0>)
 8019f46:	f7ff ff93 	bl	8019e70 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 8019f4a:	4816      	ldr	r0, [pc, #88]	; (8019fa4 <initCortexM7+0x98>)
 8019f4c:	f000 f9cc 	bl	801a2e8 <__cxa_guard_release>
 8019f50:	4817      	ldr	r0, [pc, #92]	; (8019fb0 <initCortexM7+0xa4>)
 8019f52:	f000 fcad 	bl	801a8b0 <atexit>
	static LWIPThread lwip("localhost", 42666);
 8019f56:	4b17      	ldr	r3, [pc, #92]	; (8019fb4 <initCortexM7+0xa8>)
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	f3bf 8f5b 	dmb	ish
 8019f5e:	b2db      	uxtb	r3, r3
 8019f60:	f003 0301 	and.w	r3, r3, #1
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	bf0c      	ite	eq
 8019f68:	2301      	moveq	r3, #1
 8019f6a:	2300      	movne	r3, #0
 8019f6c:	b2db      	uxtb	r3, r3
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d016      	beq.n	8019fa0 <initCortexM7+0x94>
 8019f72:	4810      	ldr	r0, [pc, #64]	; (8019fb4 <initCortexM7+0xa8>)
 8019f74:	f000 f9ac 	bl	801a2d0 <__cxa_guard_acquire>
 8019f78:	4603      	mov	r3, r0
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	bf14      	ite	ne
 8019f7e:	2301      	movne	r3, #1
 8019f80:	2300      	moveq	r3, #0
 8019f82:	b2db      	uxtb	r3, r3
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d00b      	beq.n	8019fa0 <initCortexM7+0x94>
 8019f88:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 8019f8c:	490a      	ldr	r1, [pc, #40]	; (8019fb8 <initCortexM7+0xac>)
 8019f8e:	480b      	ldr	r0, [pc, #44]	; (8019fbc <initCortexM7+0xb0>)
 8019f90:	f000 f880 	bl	801a094 <_ZN10LWIPThreadC1EPKct>
 8019f94:	4807      	ldr	r0, [pc, #28]	; (8019fb4 <initCortexM7+0xa8>)
 8019f96:	f000 f9a7 	bl	801a2e8 <__cxa_guard_release>
 8019f9a:	4809      	ldr	r0, [pc, #36]	; (8019fc0 <initCortexM7+0xb4>)
 8019f9c:	f000 fc88 	bl	801a8b0 <atexit>
}
 8019fa0:	bf00      	nop
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	24004a84 	.word	0x24004a84
 8019fa8:	24004b78 	.word	0x24004b78
 8019fac:	24004a78 	.word	0x24004a78
 8019fb0:	08019ec9 	.word	0x08019ec9
 8019fb4:	24004aa4 	.word	0x24004aa4
 8019fb8:	08020440 	.word	0x08020440
 8019fbc:	24004a88 	.word	0x24004a88
 8019fc0:	08019efd 	.word	0x08019efd

08019fc4 <_Z10__task_runPKv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(const void* arg) {
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b084      	sub	sp, #16
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	60fb      	str	r3, [r7, #12]

	thread->init();
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	68f8      	ldr	r0, [r7, #12]
 8019fd8:	4798      	blx	r3

	while(true) {
		thread->loop();
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	3304      	adds	r3, #4
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	68f8      	ldr	r0, [r7, #12]
 8019fe4:	4798      	blx	r3
 8019fe6:	e7f8      	b.n	8019fda <_Z10__task_runPKv+0x16>

08019fe8 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	b082      	sub	sp, #8
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
 8019ff0:	6039      	str	r1, [r7, #0]
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	6839      	ldr	r1, [r7, #0]
 8019ff6:	6878      	ldr	r0, [r7, #4]
 8019ff8:	f000 f805 	bl	801a006 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	4618      	mov	r0, r3
 801a000:	3708      	adds	r7, #8
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}

0801a006 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 801a006:	b580      	push	{r7, lr}
 801a008:	b084      	sub	sp, #16
 801a00a:	af00      	add	r7, sp, #0
 801a00c:	60f8      	str	r0, [r7, #12]
 801a00e:	60b9      	str	r1, [r7, #8]
 801a010:	4613      	mov	r3, r2
 801a012:	80fb      	strh	r3, [r7, #6]
 801a014:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801a018:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a01c:	68b9      	ldr	r1, [r7, #8]
 801a01e:	68f8      	ldr	r0, [r7, #12]
 801a020:	f000 f806 	bl	801a030 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	4618      	mov	r0, r3
 801a028:	3710      	adds	r7, #16
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}
	...

0801a030 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 801a030:	b580      	push	{r7, lr}
 801a032:	b08c      	sub	sp, #48	; 0x30
 801a034:	af00      	add	r7, sp, #0
 801a036:	60f8      	str	r0, [r7, #12]
 801a038:	60b9      	str	r1, [r7, #8]
 801a03a:	603b      	str	r3, [r7, #0]
 801a03c:	4613      	mov	r3, r2
 801a03e:	80fb      	strh	r3, [r7, #6]
 801a040:	4a11      	ldr	r2, [pc, #68]	; (801a088 <_ZN6ThreadC1EPKc10osPrioritym+0x58>)
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	601a      	str	r2, [r3, #0]
	osThreadDef(T, __task_run, priority, 0, stackSize);
 801a046:	f107 0314 	add.w	r3, r7, #20
 801a04a:	2200      	movs	r2, #0
 801a04c:	601a      	str	r2, [r3, #0]
 801a04e:	605a      	str	r2, [r3, #4]
 801a050:	609a      	str	r2, [r3, #8]
 801a052:	60da      	str	r2, [r3, #12]
 801a054:	611a      	str	r2, [r3, #16]
 801a056:	615a      	str	r2, [r3, #20]
 801a058:	619a      	str	r2, [r3, #24]
 801a05a:	4b0c      	ldr	r3, [pc, #48]	; (801a08c <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 801a05c:	617b      	str	r3, [r7, #20]
 801a05e:	4b0c      	ldr	r3, [pc, #48]	; (801a090 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 801a060:	61bb      	str	r3, [r7, #24]
 801a062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a066:	83bb      	strh	r3, [r7, #28]
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(osThread(T), this);
 801a06c:	f107 0314 	add.w	r3, r7, #20
 801a070:	68f9      	ldr	r1, [r7, #12]
 801a072:	4618      	mov	r0, r3
 801a074:	f7f0 fc4f 	bl	800a916 <osThreadCreate>
 801a078:	4602      	mov	r2, r0
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	605a      	str	r2, [r3, #4]
}
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	4618      	mov	r0, r3
 801a082:	3730      	adds	r7, #48	; 0x30
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}
 801a088:	08020690 	.word	0x08020690
 801a08c:	0802044c 	.word	0x0802044c
 801a090:	08019fc5 	.word	0x08019fc5

0801a094 <_ZN10LWIPThreadC1EPKct>:


static struct netif gnetif; // global network interface
static void onStatusUpdate(struct netif *netif);

LWIPThread::LWIPThread(const char* ip, const uint16_t port) : Thread("Client thread"), ip(ip), port(port) {
 801a094:	b580      	push	{r7, lr}
 801a096:	b084      	sub	sp, #16
 801a098:	af00      	add	r7, sp, #0
 801a09a:	60f8      	str	r0, [r7, #12]
 801a09c:	60b9      	str	r1, [r7, #8]
 801a09e:	4613      	mov	r3, r2
 801a0a0:	80fb      	strh	r3, [r7, #6]
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	4908      	ldr	r1, [pc, #32]	; (801a0c8 <_ZN10LWIPThreadC1EPKct+0x34>)
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7ff ff9e 	bl	8019fe8 <_ZN6ThreadC1EPKc>
 801a0ac:	4a07      	ldr	r2, [pc, #28]	; (801a0cc <_ZN10LWIPThreadC1EPKct+0x38>)
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	601a      	str	r2, [r3, #0]
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	68ba      	ldr	r2, [r7, #8]
 801a0b6:	609a      	str	r2, [r3, #8]
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	88fa      	ldrh	r2, [r7, #6]
 801a0bc:	819a      	strh	r2, [r3, #12]

}
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	3710      	adds	r7, #16
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}
 801a0c8:	08020450 	.word	0x08020450
 801a0cc:	080206a0 	.word	0x080206a0

0801a0d0 <_ZN10LWIPThread4initEv>:

void LWIPThread::init() {
 801a0d0:	b5b0      	push	{r4, r5, r7, lr}
 801a0d2:	b08e      	sub	sp, #56	; 0x38
 801a0d4:	af04      	add	r7, sp, #16
 801a0d6:	6078      	str	r0, [r7, #4]
	osDelay(50); // Time to get the shell loaded by Cortex M4
 801a0d8:	2032      	movs	r0, #50	; 0x32
 801a0da:	f7f0 fc68 	bl	800a9ae <osDelay>

	console.printf("Initializing LWIP...\n");
 801a0de:	4922      	ldr	r1, [pc, #136]	; (801a168 <_ZN10LWIPThread4initEv+0x98>)
 801a0e0:	4822      	ldr	r0, [pc, #136]	; (801a16c <_ZN10LWIPThread4initEv+0x9c>)
 801a0e2:	f7ff fe40 	bl	8019d66 <_ZN7Console6printfEPKcz>

	tcpip_init( NULL, NULL );
 801a0e6:	2100      	movs	r1, #0
 801a0e8:	2000      	movs	r0, #0
 801a0ea:	f7fe ff59 	bl	8018fa0 <tcpip_init>

	/* IP addresses initialization with DHCP (IPv4) */
	local_ip = 0;
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	2200      	movs	r2, #0
 801a0f2:	611a      	str	r2, [r3, #16]
	netmask = 0;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	615a      	str	r2, [r3, #20]
	gateway = 0;
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	619a      	str	r2, [r3, #24]

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, (ip4_addr*) &local_ip, (ip4_addr*) &netmask, (ip4_addr*) &gateway, NULL, &ethernetif_init, &tcpip_input);
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	f103 0110 	add.w	r1, r3, #16
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	f103 0214 	add.w	r2, r3, #20
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f103 0018 	add.w	r0, r3, #24
 801a112:	4b17      	ldr	r3, [pc, #92]	; (801a170 <_ZN10LWIPThread4initEv+0xa0>)
 801a114:	9302      	str	r3, [sp, #8]
 801a116:	4b17      	ldr	r3, [pc, #92]	; (801a174 <_ZN10LWIPThread4initEv+0xa4>)
 801a118:	9301      	str	r3, [sp, #4]
 801a11a:	2300      	movs	r3, #0
 801a11c:	9300      	str	r3, [sp, #0]
 801a11e:	4603      	mov	r3, r0
 801a120:	4815      	ldr	r0, [pc, #84]	; (801a178 <_ZN10LWIPThread4initEv+0xa8>)
 801a122:	f7f8 fa77 	bl	8012614 <netif_add>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 801a126:	4814      	ldr	r0, [pc, #80]	; (801a178 <_ZN10LWIPThread4initEv+0xa8>)
 801a128:	f7f8 fc2e 	bl	8012988 <netif_set_default>

	onStatusUpdate(&gnetif);
 801a12c:	4812      	ldr	r0, [pc, #72]	; (801a178 <_ZN10LWIPThread4initEv+0xa8>)
 801a12e:	f000 f829 	bl	801a184 <_ZL14onStatusUpdateP5netif>

	netif_set_link_callback(&gnetif, onStatusUpdate);
 801a132:	4912      	ldr	r1, [pc, #72]	; (801a17c <_ZN10LWIPThread4initEv+0xac>)
 801a134:	4810      	ldr	r0, [pc, #64]	; (801a178 <_ZN10LWIPThread4initEv+0xa8>)
 801a136:	f7f8 fd3d 	bl	8012bb4 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, 1024);
 801a13a:	4b11      	ldr	r3, [pc, #68]	; (801a180 <_ZN10LWIPThread4initEv+0xb0>)
 801a13c:	f107 040c 	add.w	r4, r7, #12
 801a140:	461d      	mov	r5, r3
 801a142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a146:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a14a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate (osThread(EthLink), &gnetif);
 801a14e:	f107 030c 	add.w	r3, r7, #12
 801a152:	4909      	ldr	r1, [pc, #36]	; (801a178 <_ZN10LWIPThread4initEv+0xa8>)
 801a154:	4618      	mov	r0, r3
 801a156:	f7f0 fbde 	bl	800a916 <osThreadCreate>

	dhcp_start(&gnetif);
 801a15a:	4807      	ldr	r0, [pc, #28]	; (801a178 <_ZN10LWIPThread4initEv+0xa8>)
 801a15c:	f7f3 fe18 	bl	800dd90 <dhcp_start>

}
 801a160:	bf00      	nop
 801a162:	3728      	adds	r7, #40	; 0x28
 801a164:	46bd      	mov	sp, r7
 801a166:	bdb0      	pop	{r4, r5, r7, pc}
 801a168:	08020460 	.word	0x08020460
 801a16c:	24004970 	.word	0x24004970
 801a170:	08018edd 	.word	0x08018edd
 801a174:	0800a661 	.word	0x0800a661
 801a178:	24004aa8 	.word	0x24004aa8
 801a17c:	0801a185 	.word	0x0801a185
 801a180:	08020480 	.word	0x08020480

0801a184 <_ZL14onStatusUpdateP5netif>:

void onStatusUpdate(struct netif *netif) {
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
	if (netif_is_link_up(netif)) {
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a192:	109b      	asrs	r3, r3, #2
 801a194:	b2db      	uxtb	r3, r3
 801a196:	f003 0301 	and.w	r3, r3, #1
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d008      	beq.n	801a1b0 <_ZL14onStatusUpdateP5netif+0x2c>
		/* When the netif is fully configured this function must be called */
		netif_set_up(netif);
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f7f8 fc01 	bl	80129a8 <netif_set_up>
		console.printf("Link is up\n");
 801a1a6:	4908      	ldr	r1, [pc, #32]	; (801a1c8 <_ZL14onStatusUpdateP5netif+0x44>)
 801a1a8:	4808      	ldr	r0, [pc, #32]	; (801a1cc <_ZL14onStatusUpdateP5netif+0x48>)
 801a1aa:	f7ff fddc 	bl	8019d66 <_ZN7Console6printfEPKcz>
	} else {
		/* When the netif link is down this function must be called */
		netif_set_down(netif);
		console.printf("Link is down\n");
	}
}
 801a1ae:	e007      	b.n	801a1c0 <_ZL14onStatusUpdateP5netif+0x3c>
		netif_set_down(netif);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f7f8 fc64 	bl	8012a80 <netif_set_down>
		console.printf("Link is down\n");
 801a1b8:	4905      	ldr	r1, [pc, #20]	; (801a1d0 <_ZL14onStatusUpdateP5netif+0x4c>)
 801a1ba:	4804      	ldr	r0, [pc, #16]	; (801a1cc <_ZL14onStatusUpdateP5netif+0x48>)
 801a1bc:	f7ff fdd3 	bl	8019d66 <_ZN7Console6printfEPKcz>
}
 801a1c0:	bf00      	nop
 801a1c2:	3708      	adds	r7, #8
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	bd80      	pop	{r7, pc}
 801a1c8:	0802049c 	.word	0x0802049c
 801a1cc:	24004970 	.word	0x24004970
 801a1d0:	080204a8 	.word	0x080204a8

0801a1d4 <_ZN10LWIPThread4loopEv>:

void LWIPThread::loop() {
 801a1d4:	b480      	push	{r7}
 801a1d6:	b083      	sub	sp, #12
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]

}
 801a1dc:	bf00      	nop
 801a1de:	370c      	adds	r7, #12
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e6:	4770      	bx	lr

0801a1e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801a1e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a1ea:	2400      	movs	r4, #0
 801a1ec:	2310      	movs	r3, #16
 801a1ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a1f2:	6803      	ldr	r3, [r0, #0]
 801a1f4:	9400      	str	r4, [sp, #0]
 801a1f6:	4615      	mov	r5, r2
 801a1f8:	699e      	ldr	r6, [r3, #24]
 801a1fa:	f88d 4004 	strb.w	r4, [sp, #4]
 801a1fe:	466b      	mov	r3, sp
 801a200:	6812      	ldr	r2, [r2, #0]
 801a202:	47b0      	blx	r6
 801a204:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801a208:	f003 0306 	and.w	r3, r3, #6
 801a20c:	2b06      	cmp	r3, #6
 801a20e:	bf03      	ittte	eq
 801a210:	9b00      	ldreq	r3, [sp, #0]
 801a212:	602b      	streq	r3, [r5, #0]
 801a214:	2001      	moveq	r0, #1
 801a216:	4620      	movne	r0, r4
 801a218:	b004      	add	sp, #16
 801a21a:	bd70      	pop	{r4, r5, r6, pc}

0801a21c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801a21c:	9800      	ldr	r0, [sp, #0]
 801a21e:	4290      	cmp	r0, r2
 801a220:	bf0c      	ite	eq
 801a222:	2006      	moveq	r0, #6
 801a224:	2001      	movne	r0, #1
 801a226:	4770      	bx	lr

0801a228 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801a228:	b510      	push	{r4, lr}
 801a22a:	4b03      	ldr	r3, [pc, #12]	; (801a238 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801a22c:	6003      	str	r3, [r0, #0]
 801a22e:	4604      	mov	r4, r0
 801a230:	f000 f8df 	bl	801a3f2 <_ZNSt9type_infoD1Ev>
 801a234:	4620      	mov	r0, r4
 801a236:	bd10      	pop	{r4, pc}
 801a238:	080206fc 	.word	0x080206fc

0801a23c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801a23c:	b510      	push	{r4, lr}
 801a23e:	4604      	mov	r4, r0
 801a240:	f7ff fff2 	bl	801a228 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a244:	4620      	mov	r0, r4
 801a246:	2108      	movs	r1, #8
 801a248:	f000 f840 	bl	801a2cc <_ZdlPvj>
 801a24c:	4620      	mov	r0, r4
 801a24e:	bd10      	pop	{r4, pc}

0801a250 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a254:	4698      	mov	r8, r3
 801a256:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801a25a:	9e06      	ldr	r6, [sp, #24]
 801a25c:	429e      	cmp	r6, r3
 801a25e:	4607      	mov	r7, r0
 801a260:	4615      	mov	r5, r2
 801a262:	d107      	bne.n	801a274 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 801a264:	9907      	ldr	r1, [sp, #28]
 801a266:	f000 f8c7 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a26a:	b118      	cbz	r0, 801a274 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 801a26c:	7165      	strb	r5, [r4, #5]
 801a26e:	2000      	movs	r0, #0
 801a270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a274:	4641      	mov	r1, r8
 801a276:	4638      	mov	r0, r7
 801a278:	f000 f8be 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a27c:	2800      	cmp	r0, #0
 801a27e:	d0f6      	beq.n	801a26e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 801a280:	2301      	movs	r3, #1
 801a282:	6026      	str	r6, [r4, #0]
 801a284:	7125      	strb	r5, [r4, #4]
 801a286:	71a3      	strb	r3, [r4, #6]
 801a288:	e7f1      	b.n	801a26e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0801a28a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801a28a:	b538      	push	{r3, r4, r5, lr}
 801a28c:	4615      	mov	r5, r2
 801a28e:	461c      	mov	r4, r3
 801a290:	f000 f8b2 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a294:	b120      	cbz	r0, 801a2a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801a296:	2308      	movs	r3, #8
 801a298:	60e3      	str	r3, [r4, #12]
 801a29a:	2306      	movs	r3, #6
 801a29c:	6025      	str	r5, [r4, #0]
 801a29e:	7123      	strb	r3, [r4, #4]
 801a2a0:	bd38      	pop	{r3, r4, r5, pc}

0801a2a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a6:	4605      	mov	r5, r0
 801a2a8:	460c      	mov	r4, r1
 801a2aa:	4616      	mov	r6, r2
 801a2ac:	461f      	mov	r7, r3
 801a2ae:	f000 f8a3 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a2b2:	b948      	cbnz	r0, 801a2c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801a2b4:	2f03      	cmp	r7, #3
 801a2b6:	d807      	bhi.n	801a2c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801a2b8:	6823      	ldr	r3, [r4, #0]
 801a2ba:	4632      	mov	r2, r6
 801a2bc:	4629      	mov	r1, r5
 801a2be:	4620      	mov	r0, r4
 801a2c0:	695b      	ldr	r3, [r3, #20]
 801a2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c6:	4718      	bx	r3
 801a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a2cc <_ZdlPvj>:
 801a2cc:	f7ff bdc4 	b.w	8019e58 <_ZdlPv>

0801a2d0 <__cxa_guard_acquire>:
 801a2d0:	6803      	ldr	r3, [r0, #0]
 801a2d2:	07db      	lsls	r3, r3, #31
 801a2d4:	d406      	bmi.n	801a2e4 <__cxa_guard_acquire+0x14>
 801a2d6:	7843      	ldrb	r3, [r0, #1]
 801a2d8:	b103      	cbz	r3, 801a2dc <__cxa_guard_acquire+0xc>
 801a2da:	deff      	udf	#255	; 0xff
 801a2dc:	2301      	movs	r3, #1
 801a2de:	7043      	strb	r3, [r0, #1]
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	4770      	bx	lr
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	4770      	bx	lr

0801a2e8 <__cxa_guard_release>:
 801a2e8:	2301      	movs	r3, #1
 801a2ea:	6003      	str	r3, [r0, #0]
 801a2ec:	4770      	bx	lr

0801a2ee <__cxa_pure_virtual>:
 801a2ee:	b508      	push	{r3, lr}
 801a2f0:	f000 fad2 	bl	801a898 <_ZSt9terminatev>

0801a2f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801a2f4:	b510      	push	{r4, lr}
 801a2f6:	4b03      	ldr	r3, [pc, #12]	; (801a304 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801a2f8:	6003      	str	r3, [r0, #0]
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	f7ff ff94 	bl	801a228 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a300:	4620      	mov	r0, r4
 801a302:	bd10      	pop	{r4, pc}
 801a304:	0802075c 	.word	0x0802075c

0801a308 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801a308:	b510      	push	{r4, lr}
 801a30a:	4604      	mov	r4, r0
 801a30c:	f7ff fff2 	bl	801a2f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801a310:	4620      	mov	r0, r4
 801a312:	210c      	movs	r1, #12
 801a314:	f7ff ffda 	bl	801a2cc <_ZdlPvj>
 801a318:	4620      	mov	r0, r4
 801a31a:	bd10      	pop	{r4, pc}

0801a31c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a320:	9e06      	ldr	r6, [sp, #24]
 801a322:	4296      	cmp	r6, r2
 801a324:	4607      	mov	r7, r0
 801a326:	4688      	mov	r8, r1
 801a328:	4615      	mov	r5, r2
 801a32a:	461c      	mov	r4, r3
 801a32c:	d00a      	beq.n	801a344 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 801a32e:	68b8      	ldr	r0, [r7, #8]
 801a330:	6803      	ldr	r3, [r0, #0]
 801a332:	9606      	str	r6, [sp, #24]
 801a334:	6a1e      	ldr	r6, [r3, #32]
 801a336:	462a      	mov	r2, r5
 801a338:	4623      	mov	r3, r4
 801a33a:	4641      	mov	r1, r8
 801a33c:	46b4      	mov	ip, r6
 801a33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a342:	4760      	bx	ip
 801a344:	4619      	mov	r1, r3
 801a346:	f000 f857 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a34a:	2800      	cmp	r0, #0
 801a34c:	d0ef      	beq.n	801a32e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 801a34e:	2006      	movs	r0, #6
 801a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801a354:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a358:	460e      	mov	r6, r1
 801a35a:	4619      	mov	r1, r3
 801a35c:	4683      	mov	fp, r0
 801a35e:	4617      	mov	r7, r2
 801a360:	4699      	mov	r9, r3
 801a362:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 801a366:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 801a36a:	f000 f845 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a36e:	b190      	cbz	r0, 801a396 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801a370:	2e00      	cmp	r6, #0
 801a372:	602c      	str	r4, [r5, #0]
 801a374:	712f      	strb	r7, [r5, #4]
 801a376:	db09      	blt.n	801a38c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801a378:	4434      	add	r4, r6
 801a37a:	45a0      	cmp	r8, r4
 801a37c:	bf0c      	ite	eq
 801a37e:	2406      	moveq	r4, #6
 801a380:	2401      	movne	r4, #1
 801a382:	71ac      	strb	r4, [r5, #6]
 801a384:	2000      	movs	r0, #0
 801a386:	b001      	add	sp, #4
 801a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a38c:	3602      	adds	r6, #2
 801a38e:	d1f9      	bne.n	801a384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a390:	2301      	movs	r3, #1
 801a392:	71ab      	strb	r3, [r5, #6]
 801a394:	e7f6      	b.n	801a384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a396:	4544      	cmp	r4, r8
 801a398:	d106      	bne.n	801a3a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801a39a:	4651      	mov	r1, sl
 801a39c:	4658      	mov	r0, fp
 801a39e:	f000 f82b 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a3a2:	b108      	cbz	r0, 801a3a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801a3a4:	716f      	strb	r7, [r5, #5]
 801a3a6:	e7ed      	b.n	801a384 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801a3a8:	f8db 0008 	ldr.w	r0, [fp, #8]
 801a3ac:	6803      	ldr	r3, [r0, #0]
 801a3ae:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 801a3b2:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 801a3b6:	69dc      	ldr	r4, [r3, #28]
 801a3b8:	463a      	mov	r2, r7
 801a3ba:	464b      	mov	r3, r9
 801a3bc:	4631      	mov	r1, r6
 801a3be:	46a4      	mov	ip, r4
 801a3c0:	b001      	add	sp, #4
 801a3c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c6:	4760      	bx	ip

0801a3c8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801a3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	460d      	mov	r5, r1
 801a3d0:	4616      	mov	r6, r2
 801a3d2:	461f      	mov	r7, r3
 801a3d4:	f7ff ff59 	bl	801a28a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801a3d8:	b948      	cbnz	r0, 801a3ee <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801a3da:	68a0      	ldr	r0, [r4, #8]
 801a3dc:	6803      	ldr	r3, [r0, #0]
 801a3de:	699c      	ldr	r4, [r3, #24]
 801a3e0:	4632      	mov	r2, r6
 801a3e2:	463b      	mov	r3, r7
 801a3e4:	4629      	mov	r1, r5
 801a3e6:	46a4      	mov	ip, r4
 801a3e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ec:	4760      	bx	ip
 801a3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a3f2 <_ZNSt9type_infoD1Ev>:
 801a3f2:	4770      	bx	lr

0801a3f4 <_ZNKSt9type_info14__is_pointer_pEv>:
 801a3f4:	2000      	movs	r0, #0
 801a3f6:	4770      	bx	lr

0801a3f8 <_ZNKSt9type_infoeqERKS_>:
 801a3f8:	4281      	cmp	r1, r0
 801a3fa:	b508      	push	{r3, lr}
 801a3fc:	d00e      	beq.n	801a41c <_ZNKSt9type_infoeqERKS_+0x24>
 801a3fe:	6840      	ldr	r0, [r0, #4]
 801a400:	7803      	ldrb	r3, [r0, #0]
 801a402:	2b2a      	cmp	r3, #42	; 0x2a
 801a404:	d00c      	beq.n	801a420 <_ZNKSt9type_infoeqERKS_+0x28>
 801a406:	6849      	ldr	r1, [r1, #4]
 801a408:	780b      	ldrb	r3, [r1, #0]
 801a40a:	2b2a      	cmp	r3, #42	; 0x2a
 801a40c:	bf08      	it	eq
 801a40e:	3101      	addeq	r1, #1
 801a410:	f7e5 ff66 	bl	80002e0 <strcmp>
 801a414:	fab0 f080 	clz	r0, r0
 801a418:	0940      	lsrs	r0, r0, #5
 801a41a:	bd08      	pop	{r3, pc}
 801a41c:	2001      	movs	r0, #1
 801a41e:	e7fc      	b.n	801a41a <_ZNKSt9type_infoeqERKS_+0x22>
 801a420:	2000      	movs	r0, #0
 801a422:	e7fa      	b.n	801a41a <_ZNKSt9type_infoeqERKS_+0x22>

0801a424 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 801a424:	b510      	push	{r4, lr}
 801a426:	4b03      	ldr	r3, [pc, #12]	; (801a434 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 801a428:	6003      	str	r3, [r0, #0]
 801a42a:	4604      	mov	r4, r0
 801a42c:	f7ff fefc 	bl	801a228 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801a430:	4620      	mov	r0, r4
 801a432:	bd10      	pop	{r4, pc}
 801a434:	080207d4 	.word	0x080207d4

0801a438 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 801a438:	b510      	push	{r4, lr}
 801a43a:	4604      	mov	r4, r0
 801a43c:	f7ff fff2 	bl	801a424 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 801a440:	4620      	mov	r0, r4
 801a442:	2118      	movs	r1, #24
 801a444:	f7ff ff42 	bl	801a2cc <_ZdlPvj>
 801a448:	4620      	mov	r0, r4
 801a44a:	bd10      	pop	{r4, pc}

0801a44c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801a44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a450:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801a454:	454a      	cmp	r2, r9
 801a456:	4604      	mov	r4, r0
 801a458:	460f      	mov	r7, r1
 801a45a:	4616      	mov	r6, r2
 801a45c:	4698      	mov	r8, r3
 801a45e:	d024      	beq.n	801a4aa <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 801a460:	68e5      	ldr	r5, [r4, #12]
 801a462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a466:	b355      	cbz	r5, 801a4be <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x72>
 801a468:	68e3      	ldr	r3, [r4, #12]
 801a46a:	079a      	lsls	r2, r3, #30
 801a46c:	d524      	bpl.n	801a4b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801a46e:	f013 0a01 	ands.w	sl, r3, #1
 801a472:	ea4f 2223 	mov.w	r2, r3, asr #8
 801a476:	d003      	beq.n	801a480 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x34>
 801a478:	1cfb      	adds	r3, r7, #3
 801a47a:	d01d      	beq.n	801a4b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801a47c:	6833      	ldr	r3, [r6, #0]
 801a47e:	589a      	ldr	r2, [r3, r2]
 801a480:	68a0      	ldr	r0, [r4, #8]
 801a482:	6803      	ldr	r3, [r0, #0]
 801a484:	f8cd 9000 	str.w	r9, [sp]
 801a488:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801a48c:	4432      	add	r2, r6
 801a48e:	4643      	mov	r3, r8
 801a490:	4639      	mov	r1, r7
 801a492:	47d8      	blx	fp
 801a494:	2803      	cmp	r0, #3
 801a496:	d90f      	bls.n	801a4b8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 801a498:	f1ba 0f00 	cmp.w	sl, #0
 801a49c:	d002      	beq.n	801a4a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801a49e:	f040 0001 	orr.w	r0, r0, #1
 801a4a2:	b2c0      	uxtb	r0, r0
 801a4a4:	b003      	add	sp, #12
 801a4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4aa:	4619      	mov	r1, r3
 801a4ac:	f7ff ffa4 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a4b0:	2800      	cmp	r0, #0
 801a4b2:	d0d5      	beq.n	801a460 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801a4b4:	2006      	movs	r0, #6
 801a4b6:	e7f5      	b.n	801a4a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801a4b8:	3d01      	subs	r5, #1
 801a4ba:	3c08      	subs	r4, #8
 801a4bc:	e7d3      	b.n	801a466 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 801a4be:	2001      	movs	r0, #1
 801a4c0:	e7f0      	b.n	801a4a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0801a4c2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 801a4c2:	b4f0      	push	{r4, r5, r6, r7}
 801a4c4:	1e0e      	subs	r6, r1, #0
 801a4c6:	9c04      	ldr	r4, [sp, #16]
 801a4c8:	db06      	blt.n	801a4d8 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 801a4ca:	1990      	adds	r0, r2, r6
 801a4cc:	4284      	cmp	r4, r0
 801a4ce:	bf14      	ite	ne
 801a4d0:	2001      	movne	r0, #1
 801a4d2:	2006      	moveq	r0, #6
 801a4d4:	bcf0      	pop	{r4, r5, r6, r7}
 801a4d6:	4770      	bx	lr
 801a4d8:	3602      	adds	r6, #2
 801a4da:	d004      	beq.n	801a4e6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 801a4dc:	6804      	ldr	r4, [r0, #0]
 801a4de:	6a24      	ldr	r4, [r4, #32]
 801a4e0:	46a4      	mov	ip, r4
 801a4e2:	bcf0      	pop	{r4, r5, r6, r7}
 801a4e4:	4760      	bx	ip
 801a4e6:	2001      	movs	r0, #1
 801a4e8:	e7f4      	b.n	801a4d4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0801a4ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801a4ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ee:	b091      	sub	sp, #68	; 0x44
 801a4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4f4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801a4f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a4f8:	68a3      	ldr	r3, [r4, #8]
 801a4fa:	06dd      	lsls	r5, r3, #27
 801a4fc:	bf44      	itt	mi
 801a4fe:	6883      	ldrmi	r3, [r0, #8]
 801a500:	60a3      	strmi	r3, [r4, #8]
 801a502:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a504:	4293      	cmp	r3, r2
 801a506:	4681      	mov	r9, r0
 801a508:	4688      	mov	r8, r1
 801a50a:	d107      	bne.n	801a51c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 801a50c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a50e:	f7ff ff73 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a512:	b118      	cbz	r0, 801a51c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 801a514:	9b05      	ldr	r3, [sp, #20]
 801a516:	7163      	strb	r3, [r4, #5]
 801a518:	2600      	movs	r6, #0
 801a51a:	e0fa      	b.n	801a712 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801a51c:	9906      	ldr	r1, [sp, #24]
 801a51e:	4648      	mov	r0, r9
 801a520:	f7ff ff6a 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a524:	4682      	mov	sl, r0
 801a526:	b1c0      	cbz	r0, 801a55a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 801a528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a52a:	6023      	str	r3, [r4, #0]
 801a52c:	f1b8 0f00 	cmp.w	r8, #0
 801a530:	9b05      	ldr	r3, [sp, #20]
 801a532:	7123      	strb	r3, [r4, #4]
 801a534:	db0b      	blt.n	801a54e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 801a536:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a538:	4498      	add	r8, r3
 801a53a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a53c:	4543      	cmp	r3, r8
 801a53e:	bf14      	ite	ne
 801a540:	f04f 0801 	movne.w	r8, #1
 801a544:	f04f 0806 	moveq.w	r8, #6
 801a548:	f884 8006 	strb.w	r8, [r4, #6]
 801a54c:	e7e4      	b.n	801a518 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801a54e:	f118 0f02 	cmn.w	r8, #2
 801a552:	d1e1      	bne.n	801a518 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801a554:	2301      	movs	r3, #1
 801a556:	71a3      	strb	r3, [r4, #6]
 801a558:	e7de      	b.n	801a518 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801a55a:	f1b8 0f00 	cmp.w	r8, #0
 801a55e:	bfaa      	itet	ge
 801a560:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 801a562:	f8cd a01c 	strlt.w	sl, [sp, #28]
 801a566:	eba3 0308 	subge.w	r3, r3, r8
 801a56a:	f04f 0600 	mov.w	r6, #0
 801a56e:	bfa8      	it	ge
 801a570:	9307      	strge	r3, [sp, #28]
 801a572:	2302      	movs	r3, #2
 801a574:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 801a578:	2301      	movs	r3, #1
 801a57a:	9308      	str	r3, [sp, #32]
 801a57c:	9b05      	ldr	r3, [sp, #20]
 801a57e:	f043 0301 	orr.w	r3, r3, #1
 801a582:	46b3      	mov	fp, r6
 801a584:	930b      	str	r3, [sp, #44]	; 0x2c
 801a586:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a58a:	9304      	str	r3, [sp, #16]
 801a58c:	9b04      	ldr	r3, [sp, #16]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	f000 80d9 	beq.w	801a746 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 801a594:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
 801a598:	68a7      	ldr	r7, [r4, #8]
 801a59a:	68e9      	ldr	r1, [r5, #12]
 801a59c:	970f      	str	r7, [sp, #60]	; 0x3c
 801a59e:	07c8      	lsls	r0, r1, #31
 801a5a0:	bf48      	it	mi
 801a5a2:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 801a5a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801a5a8:	ea4f 2321 	mov.w	r3, r1, asr #8
 801a5ac:	bf48      	it	mi
 801a5ae:	6800      	ldrmi	r0, [r0, #0]
 801a5b0:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
 801a5b4:	bf48      	it	mi
 801a5b6:	58c3      	ldrmi	r3, [r0, r3]
 801a5b8:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a5ba:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
 801a5be:	4403      	add	r3, r0
 801a5c0:	9807      	ldr	r0, [sp, #28]
 801a5c2:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
 801a5c6:	bf4c      	ite	mi
 801a5c8:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 801a5ca:	9a05      	ldrpl	r2, [sp, #20]
 801a5cc:	b148      	cbz	r0, 801a5e2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 801a5ce:	4298      	cmp	r0, r3
 801a5d0:	9808      	ldr	r0, [sp, #32]
 801a5d2:	bf2c      	ite	cs
 801a5d4:	f04f 0c00 	movcs.w	ip, #0
 801a5d8:	f04f 0c01 	movcc.w	ip, #1
 801a5dc:	4584      	cmp	ip, r0
 801a5de:	f000 80ae 	beq.w	801a73e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 801a5e2:	0789      	lsls	r1, r1, #30
 801a5e4:	d407      	bmi.n	801a5f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
 801a5e6:	f118 0f02 	cmn.w	r8, #2
 801a5ea:	d102      	bne.n	801a5f2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x108>
 801a5ec:	07bf      	lsls	r7, r7, #30
 801a5ee:	f000 80a8 	beq.w	801a742 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 801a5f2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 801a5f6:	68a8      	ldr	r0, [r5, #8]
 801a5f8:	ad0d      	add	r5, sp, #52	; 0x34
 801a5fa:	6801      	ldr	r1, [r0, #0]
 801a5fc:	9503      	str	r5, [sp, #12]
 801a5fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801a600:	9502      	str	r5, [sp, #8]
 801a602:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801a604:	e9cd 3500 	strd	r3, r5, [sp]
 801a608:	9b06      	ldr	r3, [sp, #24]
 801a60a:	69cd      	ldr	r5, [r1, #28]
 801a60c:	4641      	mov	r1, r8
 801a60e:	47a8      	blx	r5
 801a610:	7963      	ldrb	r3, [r4, #5]
 801a612:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 801a616:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 801a61a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a61c:	4313      	orrs	r3, r2
 801a61e:	2d06      	cmp	r5, #6
 801a620:	7163      	strb	r3, [r4, #5]
 801a622:	d001      	beq.n	801a628 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 801a624:	2d02      	cmp	r5, #2
 801a626:	d106      	bne.n	801a636 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 801a628:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801a62c:	6021      	str	r1, [r4, #0]
 801a62e:	7123      	strb	r3, [r4, #4]
 801a630:	71a5      	strb	r5, [r4, #6]
 801a632:	4682      	mov	sl, r0
 801a634:	e06c      	b.n	801a710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801a636:	6822      	ldr	r2, [r4, #0]
 801a638:	b996      	cbnz	r6, 801a660 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 801a63a:	b99a      	cbnz	r2, 801a664 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 801a63c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801a640:	6021      	str	r1, [r4, #0]
 801a642:	7122      	strb	r2, [r4, #4]
 801a644:	b121      	cbz	r1, 801a650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a646:	b11b      	cbz	r3, 801a650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a648:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a64c:	07dd      	lsls	r5, r3, #31
 801a64e:	d5f0      	bpl.n	801a632 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 801a650:	7963      	ldrb	r3, [r4, #5]
 801a652:	2b04      	cmp	r3, #4
 801a654:	d0ed      	beq.n	801a632 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 801a656:	9b04      	ldr	r3, [sp, #16]
 801a658:	3b01      	subs	r3, #1
 801a65a:	9304      	str	r3, [sp, #16]
 801a65c:	4606      	mov	r6, r0
 801a65e:	e795      	b.n	801a58c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa2>
 801a660:	2a00      	cmp	r2, #0
 801a662:	d037      	beq.n	801a6d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 801a664:	4291      	cmp	r1, r2
 801a666:	d106      	bne.n	801a676 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 801a668:	7923      	ldrb	r3, [r4, #4]
 801a66a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801a66e:	4313      	orrs	r3, r2
 801a670:	7123      	strb	r3, [r4, #4]
 801a672:	4630      	mov	r0, r6
 801a674:	e7ec      	b.n	801a650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a676:	b909      	cbnz	r1, 801a67c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 801a678:	2800      	cmp	r0, #0
 801a67a:	d0fa      	beq.n	801a672 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 801a67c:	2b03      	cmp	r3, #3
 801a67e:	79a7      	ldrb	r7, [r4, #6]
 801a680:	d904      	bls.n	801a68c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 801a682:	07d8      	lsls	r0, r3, #31
 801a684:	d529      	bpl.n	801a6da <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 801a686:	68a3      	ldr	r3, [r4, #8]
 801a688:	0799      	lsls	r1, r3, #30
 801a68a:	d526      	bpl.n	801a6da <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 801a68c:	b97f      	cbnz	r7, 801a6ae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 801a68e:	2d03      	cmp	r5, #3
 801a690:	d905      	bls.n	801a69e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 801a692:	07eb      	lsls	r3, r5, #31
 801a694:	d541      	bpl.n	801a71a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 801a696:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a69a:	079f      	lsls	r7, r3, #30
 801a69c:	d53d      	bpl.n	801a71a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 801a69e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a6a0:	9300      	str	r3, [sp, #0]
 801a6a2:	4641      	mov	r1, r8
 801a6a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a6a6:	9806      	ldr	r0, [sp, #24]
 801a6a8:	f7ff ff0b 	bl	801a4c2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 801a6ac:	4607      	mov	r7, r0
 801a6ae:	b9d5      	cbnz	r5, 801a6e6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a6b0:	2f03      	cmp	r7, #3
 801a6b2:	d905      	bls.n	801a6c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 801a6b4:	07f8      	lsls	r0, r7, #31
 801a6b6:	d532      	bpl.n	801a71e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 801a6b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a6bc:	0799      	lsls	r1, r3, #30
 801a6be:	d52e      	bpl.n	801a71e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 801a6c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a6c2:	9300      	str	r3, [sp, #0]
 801a6c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a6c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a6c8:	9806      	ldr	r0, [sp, #24]
 801a6ca:	4641      	mov	r1, r8
 801a6cc:	f7ff fef9 	bl	801a4c2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 801a6d0:	4605      	mov	r5, r0
 801a6d2:	e008      	b.n	801a6e6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a6d4:	2900      	cmp	r1, #0
 801a6d6:	d1d1      	bne.n	801a67c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 801a6d8:	e7cb      	b.n	801a672 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 801a6da:	2f00      	cmp	r7, #0
 801a6dc:	bf08      	it	eq
 801a6de:	2701      	moveq	r7, #1
 801a6e0:	2d00      	cmp	r5, #0
 801a6e2:	bf08      	it	eq
 801a6e4:	2501      	moveq	r5, #1
 801a6e6:	ea85 0307 	eor.w	r3, r5, r7
 801a6ea:	b2db      	uxtb	r3, r3
 801a6ec:	2b03      	cmp	r3, #3
 801a6ee:	d918      	bls.n	801a722 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 801a6f0:	2d03      	cmp	r5, #3
 801a6f2:	bf81      	itttt	hi
 801a6f4:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 801a6f6:	6023      	strhi	r3, [r4, #0]
 801a6f8:	462f      	movhi	r7, r5
 801a6fa:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 801a6fe:	bf86      	itte	hi
 801a700:	7123      	strbhi	r3, [r4, #4]
 801a702:	2000      	movhi	r0, #0
 801a704:	4630      	movls	r0, r6
 801a706:	07ba      	lsls	r2, r7, #30
 801a708:	71a7      	strb	r7, [r4, #6]
 801a70a:	d401      	bmi.n	801a710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801a70c:	07fb      	lsls	r3, r7, #31
 801a70e:	d49f      	bmi.n	801a650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a710:	4656      	mov	r6, sl
 801a712:	4630      	mov	r0, r6
 801a714:	b011      	add	sp, #68	; 0x44
 801a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a71a:	2701      	movs	r7, #1
 801a71c:	e7e3      	b.n	801a6e6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a71e:	2501      	movs	r5, #1
 801a720:	e7e1      	b.n	801a6e6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 801a722:	403d      	ands	r5, r7
 801a724:	b2ed      	uxtb	r5, r5
 801a726:	2d03      	cmp	r5, #3
 801a728:	f8c4 b000 	str.w	fp, [r4]
 801a72c:	d904      	bls.n	801a738 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 801a72e:	2302      	movs	r3, #2
 801a730:	71a3      	strb	r3, [r4, #6]
 801a732:	f04f 0a01 	mov.w	sl, #1
 801a736:	e7eb      	b.n	801a710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 801a738:	2001      	movs	r0, #1
 801a73a:	71a0      	strb	r0, [r4, #6]
 801a73c:	e788      	b.n	801a650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
 801a73e:	2301      	movs	r3, #1
 801a740:	9309      	str	r3, [sp, #36]	; 0x24
 801a742:	4630      	mov	r0, r6
 801a744:	e787      	b.n	801a656 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 801a746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d0e2      	beq.n	801a712 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801a74c:	9b04      	ldr	r3, [sp, #16]
 801a74e:	9308      	str	r3, [sp, #32]
 801a750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a752:	2b01      	cmp	r3, #1
 801a754:	d0dd      	beq.n	801a712 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 801a756:	2301      	movs	r3, #1
 801a758:	930a      	str	r3, [sp, #40]	; 0x28
 801a75a:	e714      	b.n	801a586 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

0801a75c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a760:	b089      	sub	sp, #36	; 0x24
 801a762:	4607      	mov	r7, r0
 801a764:	9102      	str	r1, [sp, #8]
 801a766:	4692      	mov	sl, r2
 801a768:	461c      	mov	r4, r3
 801a76a:	f7ff fd8e 	bl	801a28a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801a76e:	4605      	mov	r5, r0
 801a770:	2800      	cmp	r0, #0
 801a772:	d159      	bne.n	801a828 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a774:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801a778:	f8d7 900c 	ldr.w	r9, [r7, #12]
 801a77c:	f018 0f10 	tst.w	r8, #16
 801a780:	bf18      	it	ne
 801a782:	f8d7 8008 	ldrne.w	r8, [r7, #8]
 801a786:	f008 0301 	and.w	r3, r8, #1
 801a78a:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
 801a78e:	f04f 0b00 	mov.w	fp, #0
 801a792:	9303      	str	r3, [sp, #12]
 801a794:	f1b9 0f00 	cmp.w	r9, #0
 801a798:	d06c      	beq.n	801a874 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 801a79a:	68f2      	ldr	r2, [r6, #12]
 801a79c:	f8cd b010 	str.w	fp, [sp, #16]
 801a7a0:	f002 0301 	and.w	r3, r2, #1
 801a7a4:	9300      	str	r3, [sp, #0]
 801a7a6:	f012 0302 	ands.w	r3, r2, #2
 801a7aa:	f88d b014 	strb.w	fp, [sp, #20]
 801a7ae:	e9cd 8b06 	strd	r8, fp, [sp, #24]
 801a7b2:	9301      	str	r3, [sp, #4]
 801a7b4:	d105      	bne.n	801a7c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 801a7b6:	9b03      	ldr	r3, [sp, #12]
 801a7b8:	b91b      	cbnz	r3, 801a7c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x66>
 801a7ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801a7be:	3e08      	subs	r6, #8
 801a7c0:	e7e8      	b.n	801a794 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 801a7c2:	f1ba 0f00 	cmp.w	sl, #0
 801a7c6:	d033      	beq.n	801a830 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd4>
 801a7c8:	9b00      	ldr	r3, [sp, #0]
 801a7ca:	1212      	asrs	r2, r2, #8
 801a7cc:	b113      	cbz	r3, 801a7d4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
 801a7ce:	f8da 3000 	ldr.w	r3, [sl]
 801a7d2:	589a      	ldr	r2, [r3, r2]
 801a7d4:	4452      	add	r2, sl
 801a7d6:	68b0      	ldr	r0, [r6, #8]
 801a7d8:	9902      	ldr	r1, [sp, #8]
 801a7da:	6803      	ldr	r3, [r0, #0]
 801a7dc:	699d      	ldr	r5, [r3, #24]
 801a7de:	ab04      	add	r3, sp, #16
 801a7e0:	47a8      	blx	r5
 801a7e2:	4605      	mov	r5, r0
 801a7e4:	2800      	cmp	r0, #0
 801a7e6:	d0e8      	beq.n	801a7ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 801a7e8:	9b07      	ldr	r3, [sp, #28]
 801a7ea:	2b08      	cmp	r3, #8
 801a7ec:	d103      	bne.n	801a7f6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 801a7ee:	9b00      	ldr	r3, [sp, #0]
 801a7f0:	b10b      	cbz	r3, 801a7f6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9a>
 801a7f2:	68b3      	ldr	r3, [r6, #8]
 801a7f4:	9307      	str	r3, [sp, #28]
 801a7f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a7fa:	2b03      	cmp	r3, #3
 801a7fc:	d905      	bls.n	801a80a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 801a7fe:	9a01      	ldr	r2, [sp, #4]
 801a800:	b91a      	cbnz	r2, 801a80a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xae>
 801a802:	f023 0302 	bic.w	r3, r3, #2
 801a806:	f88d 3014 	strb.w	r3, [sp, #20]
 801a80a:	68e1      	ldr	r1, [r4, #12]
 801a80c:	b9c1      	cbnz	r1, 801a840 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 801a80e:	ab04      	add	r3, sp, #16
 801a810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a816:	7923      	ldrb	r3, [r4, #4]
 801a818:	2b03      	cmp	r3, #3
 801a81a:	d905      	bls.n	801a828 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a81c:	079a      	lsls	r2, r3, #30
 801a81e:	d509      	bpl.n	801a834 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 801a820:	68bb      	ldr	r3, [r7, #8]
 801a822:	f013 0f01 	tst.w	r3, #1
 801a826:	d1c8      	bne.n	801a7ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 801a828:	4628      	mov	r0, r5
 801a82a:	b009      	add	sp, #36	; 0x24
 801a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a830:	4652      	mov	r2, sl
 801a832:	e7d0      	b.n	801a7d6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7a>
 801a834:	07db      	lsls	r3, r3, #31
 801a836:	d5f7      	bpl.n	801a828 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	f013 0f02 	tst.w	r3, #2
 801a83e:	e7f2      	b.n	801a826 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xca>
 801a840:	6823      	ldr	r3, [r4, #0]
 801a842:	9a04      	ldr	r2, [sp, #16]
 801a844:	4293      	cmp	r3, r2
 801a846:	d004      	beq.n	801a852 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf6>
 801a848:	2300      	movs	r3, #0
 801a84a:	6023      	str	r3, [r4, #0]
 801a84c:	2302      	movs	r3, #2
 801a84e:	7123      	strb	r3, [r4, #4]
 801a850:	e7ea      	b.n	801a828 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 801a852:	b12b      	cbz	r3, 801a860 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 801a854:	7923      	ldrb	r3, [r4, #4]
 801a856:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801a85a:	4313      	orrs	r3, r2
 801a85c:	7123      	strb	r3, [r4, #4]
 801a85e:	e7ac      	b.n	801a7ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5e>
 801a860:	9807      	ldr	r0, [sp, #28]
 801a862:	2808      	cmp	r0, #8
 801a864:	d0f2      	beq.n	801a84c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 801a866:	2908      	cmp	r1, #8
 801a868:	d0f0      	beq.n	801a84c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 801a86a:	f7ff fdc5 	bl	801a3f8 <_ZNKSt9type_infoeqERKS_>
 801a86e:	2800      	cmp	r0, #0
 801a870:	d1f0      	bne.n	801a854 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf8>
 801a872:	e7eb      	b.n	801a84c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 801a874:	7925      	ldrb	r5, [r4, #4]
 801a876:	3500      	adds	r5, #0
 801a878:	bf18      	it	ne
 801a87a:	2501      	movne	r5, #1
 801a87c:	e7d4      	b.n	801a828 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>

0801a87e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801a87e:	b508      	push	{r3, lr}
 801a880:	4780      	blx	r0
 801a882:	f000 f80e 	bl	801a8a2 <abort>
	...

0801a888 <_ZSt13get_terminatev>:
 801a888:	4b02      	ldr	r3, [pc, #8]	; (801a894 <_ZSt13get_terminatev+0xc>)
 801a88a:	6818      	ldr	r0, [r3, #0]
 801a88c:	f3bf 8f5b 	dmb	ish
 801a890:	4770      	bx	lr
 801a892:	bf00      	nop
 801a894:	24000038 	.word	0x24000038

0801a898 <_ZSt9terminatev>:
 801a898:	b508      	push	{r3, lr}
 801a89a:	f7ff fff5 	bl	801a888 <_ZSt13get_terminatev>
 801a89e:	f7ff ffee 	bl	801a87e <_ZN10__cxxabiv111__terminateEPFvvE>

0801a8a2 <abort>:
 801a8a2:	b508      	push	{r3, lr}
 801a8a4:	2006      	movs	r0, #6
 801a8a6:	f000 fd27 	bl	801b2f8 <raise>
 801a8aa:	2001      	movs	r0, #1
 801a8ac:	f7e6 fb2c 	bl	8000f08 <_exit>

0801a8b0 <atexit>:
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	4601      	mov	r1, r0
 801a8b4:	461a      	mov	r2, r3
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f000 be28 	b.w	801b50c <__register_exitproc>

0801a8bc <__libc_init_array>:
 801a8bc:	b570      	push	{r4, r5, r6, lr}
 801a8be:	4e0d      	ldr	r6, [pc, #52]	; (801a8f4 <__libc_init_array+0x38>)
 801a8c0:	4c0d      	ldr	r4, [pc, #52]	; (801a8f8 <__libc_init_array+0x3c>)
 801a8c2:	1ba4      	subs	r4, r4, r6
 801a8c4:	10a4      	asrs	r4, r4, #2
 801a8c6:	2500      	movs	r5, #0
 801a8c8:	42a5      	cmp	r5, r4
 801a8ca:	d109      	bne.n	801a8e0 <__libc_init_array+0x24>
 801a8cc:	4e0b      	ldr	r6, [pc, #44]	; (801a8fc <__libc_init_array+0x40>)
 801a8ce:	4c0c      	ldr	r4, [pc, #48]	; (801a900 <__libc_init_array+0x44>)
 801a8d0:	f002 fd5e 	bl	801d390 <_init>
 801a8d4:	1ba4      	subs	r4, r4, r6
 801a8d6:	10a4      	asrs	r4, r4, #2
 801a8d8:	2500      	movs	r5, #0
 801a8da:	42a5      	cmp	r5, r4
 801a8dc:	d105      	bne.n	801a8ea <__libc_init_array+0x2e>
 801a8de:	bd70      	pop	{r4, r5, r6, pc}
 801a8e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8e4:	4798      	blx	r3
 801a8e6:	3501      	adds	r5, #1
 801a8e8:	e7ee      	b.n	801a8c8 <__libc_init_array+0xc>
 801a8ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8ee:	4798      	blx	r3
 801a8f0:	3501      	adds	r5, #1
 801a8f2:	e7f2      	b.n	801a8da <__libc_init_array+0x1e>
 801a8f4:	08020ac0 	.word	0x08020ac0
 801a8f8:	08020ac0 	.word	0x08020ac0
 801a8fc:	08020ac0 	.word	0x08020ac0
 801a900:	08020ac8 	.word	0x08020ac8

0801a904 <__ascii_mbtowc>:
 801a904:	b082      	sub	sp, #8
 801a906:	b901      	cbnz	r1, 801a90a <__ascii_mbtowc+0x6>
 801a908:	a901      	add	r1, sp, #4
 801a90a:	b142      	cbz	r2, 801a91e <__ascii_mbtowc+0x1a>
 801a90c:	b14b      	cbz	r3, 801a922 <__ascii_mbtowc+0x1e>
 801a90e:	7813      	ldrb	r3, [r2, #0]
 801a910:	600b      	str	r3, [r1, #0]
 801a912:	7812      	ldrb	r2, [r2, #0]
 801a914:	1c10      	adds	r0, r2, #0
 801a916:	bf18      	it	ne
 801a918:	2001      	movne	r0, #1
 801a91a:	b002      	add	sp, #8
 801a91c:	4770      	bx	lr
 801a91e:	4610      	mov	r0, r2
 801a920:	e7fb      	b.n	801a91a <__ascii_mbtowc+0x16>
 801a922:	f06f 0001 	mvn.w	r0, #1
 801a926:	e7f8      	b.n	801a91a <__ascii_mbtowc+0x16>

0801a928 <memcmp>:
 801a928:	b530      	push	{r4, r5, lr}
 801a92a:	2400      	movs	r4, #0
 801a92c:	42a2      	cmp	r2, r4
 801a92e:	d101      	bne.n	801a934 <memcmp+0xc>
 801a930:	2000      	movs	r0, #0
 801a932:	e007      	b.n	801a944 <memcmp+0x1c>
 801a934:	5d03      	ldrb	r3, [r0, r4]
 801a936:	3401      	adds	r4, #1
 801a938:	190d      	adds	r5, r1, r4
 801a93a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a93e:	42ab      	cmp	r3, r5
 801a940:	d0f4      	beq.n	801a92c <memcmp+0x4>
 801a942:	1b58      	subs	r0, r3, r5
 801a944:	bd30      	pop	{r4, r5, pc}

0801a946 <memcpy>:
 801a946:	b510      	push	{r4, lr}
 801a948:	1e43      	subs	r3, r0, #1
 801a94a:	440a      	add	r2, r1
 801a94c:	4291      	cmp	r1, r2
 801a94e:	d100      	bne.n	801a952 <memcpy+0xc>
 801a950:	bd10      	pop	{r4, pc}
 801a952:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a956:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a95a:	e7f7      	b.n	801a94c <memcpy+0x6>

0801a95c <memmove>:
 801a95c:	4288      	cmp	r0, r1
 801a95e:	b510      	push	{r4, lr}
 801a960:	eb01 0302 	add.w	r3, r1, r2
 801a964:	d807      	bhi.n	801a976 <memmove+0x1a>
 801a966:	1e42      	subs	r2, r0, #1
 801a968:	4299      	cmp	r1, r3
 801a96a:	d00a      	beq.n	801a982 <memmove+0x26>
 801a96c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a970:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a974:	e7f8      	b.n	801a968 <memmove+0xc>
 801a976:	4283      	cmp	r3, r0
 801a978:	d9f5      	bls.n	801a966 <memmove+0xa>
 801a97a:	1881      	adds	r1, r0, r2
 801a97c:	1ad2      	subs	r2, r2, r3
 801a97e:	42d3      	cmn	r3, r2
 801a980:	d100      	bne.n	801a984 <memmove+0x28>
 801a982:	bd10      	pop	{r4, pc}
 801a984:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a988:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a98c:	e7f7      	b.n	801a97e <memmove+0x22>

0801a98e <memset>:
 801a98e:	4402      	add	r2, r0
 801a990:	4603      	mov	r3, r0
 801a992:	4293      	cmp	r3, r2
 801a994:	d100      	bne.n	801a998 <memset+0xa>
 801a996:	4770      	bx	lr
 801a998:	f803 1b01 	strb.w	r1, [r3], #1
 801a99c:	e7f9      	b.n	801a992 <memset+0x4>

0801a99e <__cvt>:
 801a99e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9a0:	ed2d 8b02 	vpush	{d8}
 801a9a4:	eeb0 8b40 	vmov.f64	d8, d0
 801a9a8:	b085      	sub	sp, #20
 801a9aa:	4617      	mov	r7, r2
 801a9ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a9ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a9b0:	ee18 2a90 	vmov	r2, s17
 801a9b4:	f025 0520 	bic.w	r5, r5, #32
 801a9b8:	2a00      	cmp	r2, #0
 801a9ba:	bfb6      	itet	lt
 801a9bc:	222d      	movlt	r2, #45	; 0x2d
 801a9be:	2200      	movge	r2, #0
 801a9c0:	eeb1 8b40 	vneglt.f64	d8, d0
 801a9c4:	2d46      	cmp	r5, #70	; 0x46
 801a9c6:	460c      	mov	r4, r1
 801a9c8:	701a      	strb	r2, [r3, #0]
 801a9ca:	d004      	beq.n	801a9d6 <__cvt+0x38>
 801a9cc:	2d45      	cmp	r5, #69	; 0x45
 801a9ce:	d100      	bne.n	801a9d2 <__cvt+0x34>
 801a9d0:	3401      	adds	r4, #1
 801a9d2:	2102      	movs	r1, #2
 801a9d4:	e000      	b.n	801a9d8 <__cvt+0x3a>
 801a9d6:	2103      	movs	r1, #3
 801a9d8:	ab03      	add	r3, sp, #12
 801a9da:	9301      	str	r3, [sp, #4]
 801a9dc:	ab02      	add	r3, sp, #8
 801a9de:	9300      	str	r3, [sp, #0]
 801a9e0:	4622      	mov	r2, r4
 801a9e2:	4633      	mov	r3, r6
 801a9e4:	eeb0 0b48 	vmov.f64	d0, d8
 801a9e8:	f000 fe82 	bl	801b6f0 <_dtoa_r>
 801a9ec:	2d47      	cmp	r5, #71	; 0x47
 801a9ee:	d101      	bne.n	801a9f4 <__cvt+0x56>
 801a9f0:	07fb      	lsls	r3, r7, #31
 801a9f2:	d51e      	bpl.n	801aa32 <__cvt+0x94>
 801a9f4:	2d46      	cmp	r5, #70	; 0x46
 801a9f6:	eb00 0304 	add.w	r3, r0, r4
 801a9fa:	d10c      	bne.n	801aa16 <__cvt+0x78>
 801a9fc:	7802      	ldrb	r2, [r0, #0]
 801a9fe:	2a30      	cmp	r2, #48	; 0x30
 801aa00:	d107      	bne.n	801aa12 <__cvt+0x74>
 801aa02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa0a:	bf1c      	itt	ne
 801aa0c:	f1c4 0401 	rsbne	r4, r4, #1
 801aa10:	6034      	strne	r4, [r6, #0]
 801aa12:	6832      	ldr	r2, [r6, #0]
 801aa14:	4413      	add	r3, r2
 801aa16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aa1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa1e:	d007      	beq.n	801aa30 <__cvt+0x92>
 801aa20:	2130      	movs	r1, #48	; 0x30
 801aa22:	9a03      	ldr	r2, [sp, #12]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d204      	bcs.n	801aa32 <__cvt+0x94>
 801aa28:	1c54      	adds	r4, r2, #1
 801aa2a:	9403      	str	r4, [sp, #12]
 801aa2c:	7011      	strb	r1, [r2, #0]
 801aa2e:	e7f8      	b.n	801aa22 <__cvt+0x84>
 801aa30:	9303      	str	r3, [sp, #12]
 801aa32:	9b03      	ldr	r3, [sp, #12]
 801aa34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa36:	1a1b      	subs	r3, r3, r0
 801aa38:	6013      	str	r3, [r2, #0]
 801aa3a:	b005      	add	sp, #20
 801aa3c:	ecbd 8b02 	vpop	{d8}
 801aa40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801aa42 <__exponent>:
 801aa42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa44:	2900      	cmp	r1, #0
 801aa46:	4604      	mov	r4, r0
 801aa48:	bfba      	itte	lt
 801aa4a:	4249      	neglt	r1, r1
 801aa4c:	232d      	movlt	r3, #45	; 0x2d
 801aa4e:	232b      	movge	r3, #43	; 0x2b
 801aa50:	2909      	cmp	r1, #9
 801aa52:	f804 2b02 	strb.w	r2, [r4], #2
 801aa56:	7043      	strb	r3, [r0, #1]
 801aa58:	dd20      	ble.n	801aa9c <__exponent+0x5a>
 801aa5a:	f10d 0307 	add.w	r3, sp, #7
 801aa5e:	461f      	mov	r7, r3
 801aa60:	260a      	movs	r6, #10
 801aa62:	fb91 f5f6 	sdiv	r5, r1, r6
 801aa66:	fb06 1115 	mls	r1, r6, r5, r1
 801aa6a:	3130      	adds	r1, #48	; 0x30
 801aa6c:	2d09      	cmp	r5, #9
 801aa6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801aa72:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 801aa76:	4629      	mov	r1, r5
 801aa78:	dc09      	bgt.n	801aa8e <__exponent+0x4c>
 801aa7a:	3130      	adds	r1, #48	; 0x30
 801aa7c:	3b02      	subs	r3, #2
 801aa7e:	f802 1c01 	strb.w	r1, [r2, #-1]
 801aa82:	42bb      	cmp	r3, r7
 801aa84:	4622      	mov	r2, r4
 801aa86:	d304      	bcc.n	801aa92 <__exponent+0x50>
 801aa88:	1a10      	subs	r0, r2, r0
 801aa8a:	b003      	add	sp, #12
 801aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa8e:	4613      	mov	r3, r2
 801aa90:	e7e7      	b.n	801aa62 <__exponent+0x20>
 801aa92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa96:	f804 2b01 	strb.w	r2, [r4], #1
 801aa9a:	e7f2      	b.n	801aa82 <__exponent+0x40>
 801aa9c:	2330      	movs	r3, #48	; 0x30
 801aa9e:	4419      	add	r1, r3
 801aaa0:	7083      	strb	r3, [r0, #2]
 801aaa2:	1d02      	adds	r2, r0, #4
 801aaa4:	70c1      	strb	r1, [r0, #3]
 801aaa6:	e7ef      	b.n	801aa88 <__exponent+0x46>

0801aaa8 <_printf_float>:
 801aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaac:	b08d      	sub	sp, #52	; 0x34
 801aaae:	460c      	mov	r4, r1
 801aab0:	4616      	mov	r6, r2
 801aab2:	461f      	mov	r7, r3
 801aab4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801aab8:	4605      	mov	r5, r0
 801aaba:	f001 fcdf 	bl	801c47c <_localeconv_r>
 801aabe:	f8d0 b000 	ldr.w	fp, [r0]
 801aac2:	4658      	mov	r0, fp
 801aac4:	f7e5 fc16 	bl	80002f4 <strlen>
 801aac8:	2300      	movs	r3, #0
 801aaca:	930a      	str	r3, [sp, #40]	; 0x28
 801aacc:	f8d8 3000 	ldr.w	r3, [r8]
 801aad0:	9005      	str	r0, [sp, #20]
 801aad2:	3307      	adds	r3, #7
 801aad4:	f023 0307 	bic.w	r3, r3, #7
 801aad8:	f103 0108 	add.w	r1, r3, #8
 801aadc:	f894 9018 	ldrb.w	r9, [r4, #24]
 801aae0:	6822      	ldr	r2, [r4, #0]
 801aae2:	f8c8 1000 	str.w	r1, [r8]
 801aae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aaea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801aaee:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801ad78 <_printf_float+0x2d0>
 801aaf2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801aaf6:	eeb0 6bc0 	vabs.f64	d6, d0
 801aafa:	eeb4 6b47 	vcmp.f64	d6, d7
 801aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab02:	dd24      	ble.n	801ab4e <_printf_float+0xa6>
 801ab04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ab08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab0c:	d502      	bpl.n	801ab14 <_printf_float+0x6c>
 801ab0e:	232d      	movs	r3, #45	; 0x2d
 801ab10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab14:	499a      	ldr	r1, [pc, #616]	; (801ad80 <_printf_float+0x2d8>)
 801ab16:	4b9b      	ldr	r3, [pc, #620]	; (801ad84 <_printf_float+0x2dc>)
 801ab18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801ab1c:	bf8c      	ite	hi
 801ab1e:	4688      	movhi	r8, r1
 801ab20:	4698      	movls	r8, r3
 801ab22:	f022 0204 	bic.w	r2, r2, #4
 801ab26:	2303      	movs	r3, #3
 801ab28:	6123      	str	r3, [r4, #16]
 801ab2a:	6022      	str	r2, [r4, #0]
 801ab2c:	f04f 0a00 	mov.w	sl, #0
 801ab30:	9700      	str	r7, [sp, #0]
 801ab32:	4633      	mov	r3, r6
 801ab34:	aa0b      	add	r2, sp, #44	; 0x2c
 801ab36:	4621      	mov	r1, r4
 801ab38:	4628      	mov	r0, r5
 801ab3a:	f000 f9e1 	bl	801af00 <_printf_common>
 801ab3e:	3001      	adds	r0, #1
 801ab40:	f040 8089 	bne.w	801ac56 <_printf_float+0x1ae>
 801ab44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab48:	b00d      	add	sp, #52	; 0x34
 801ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab4e:	eeb4 0b40 	vcmp.f64	d0, d0
 801ab52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab56:	d702      	bvc.n	801ab5e <_printf_float+0xb6>
 801ab58:	498b      	ldr	r1, [pc, #556]	; (801ad88 <_printf_float+0x2e0>)
 801ab5a:	4b8c      	ldr	r3, [pc, #560]	; (801ad8c <_printf_float+0x2e4>)
 801ab5c:	e7dc      	b.n	801ab18 <_printf_float+0x70>
 801ab5e:	6861      	ldr	r1, [r4, #4]
 801ab60:	1c4b      	adds	r3, r1, #1
 801ab62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ab66:	ab0a      	add	r3, sp, #40	; 0x28
 801ab68:	a809      	add	r0, sp, #36	; 0x24
 801ab6a:	d13b      	bne.n	801abe4 <_printf_float+0x13c>
 801ab6c:	2106      	movs	r1, #6
 801ab6e:	6061      	str	r1, [r4, #4]
 801ab70:	f04f 0c00 	mov.w	ip, #0
 801ab74:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ab78:	e9cd 0900 	strd	r0, r9, [sp]
 801ab7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ab80:	6022      	str	r2, [r4, #0]
 801ab82:	6861      	ldr	r1, [r4, #4]
 801ab84:	4628      	mov	r0, r5
 801ab86:	f7ff ff0a 	bl	801a99e <__cvt>
 801ab8a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801ab8e:	2b47      	cmp	r3, #71	; 0x47
 801ab90:	4680      	mov	r8, r0
 801ab92:	d109      	bne.n	801aba8 <_printf_float+0x100>
 801ab94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab96:	1cd8      	adds	r0, r3, #3
 801ab98:	db02      	blt.n	801aba0 <_printf_float+0xf8>
 801ab9a:	6862      	ldr	r2, [r4, #4]
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	dd47      	ble.n	801ac30 <_printf_float+0x188>
 801aba0:	f1a9 0902 	sub.w	r9, r9, #2
 801aba4:	fa5f f989 	uxtb.w	r9, r9
 801aba8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801abac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801abae:	d824      	bhi.n	801abfa <_printf_float+0x152>
 801abb0:	3901      	subs	r1, #1
 801abb2:	464a      	mov	r2, r9
 801abb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801abb8:	9109      	str	r1, [sp, #36]	; 0x24
 801abba:	f7ff ff42 	bl	801aa42 <__exponent>
 801abbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abc0:	1813      	adds	r3, r2, r0
 801abc2:	2a01      	cmp	r2, #1
 801abc4:	4682      	mov	sl, r0
 801abc6:	6123      	str	r3, [r4, #16]
 801abc8:	dc02      	bgt.n	801abd0 <_printf_float+0x128>
 801abca:	6822      	ldr	r2, [r4, #0]
 801abcc:	07d1      	lsls	r1, r2, #31
 801abce:	d501      	bpl.n	801abd4 <_printf_float+0x12c>
 801abd0:	3301      	adds	r3, #1
 801abd2:	6123      	str	r3, [r4, #16]
 801abd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d0a9      	beq.n	801ab30 <_printf_float+0x88>
 801abdc:	232d      	movs	r3, #45	; 0x2d
 801abde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abe2:	e7a5      	b.n	801ab30 <_printf_float+0x88>
 801abe4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801abe8:	f000 8178 	beq.w	801aedc <_printf_float+0x434>
 801abec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801abf0:	d1be      	bne.n	801ab70 <_printf_float+0xc8>
 801abf2:	2900      	cmp	r1, #0
 801abf4:	d1bc      	bne.n	801ab70 <_printf_float+0xc8>
 801abf6:	2101      	movs	r1, #1
 801abf8:	e7b9      	b.n	801ab6e <_printf_float+0xc6>
 801abfa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801abfe:	d119      	bne.n	801ac34 <_printf_float+0x18c>
 801ac00:	2900      	cmp	r1, #0
 801ac02:	6863      	ldr	r3, [r4, #4]
 801ac04:	dd0c      	ble.n	801ac20 <_printf_float+0x178>
 801ac06:	6121      	str	r1, [r4, #16]
 801ac08:	b913      	cbnz	r3, 801ac10 <_printf_float+0x168>
 801ac0a:	6822      	ldr	r2, [r4, #0]
 801ac0c:	07d2      	lsls	r2, r2, #31
 801ac0e:	d502      	bpl.n	801ac16 <_printf_float+0x16e>
 801ac10:	3301      	adds	r3, #1
 801ac12:	440b      	add	r3, r1
 801ac14:	6123      	str	r3, [r4, #16]
 801ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac18:	65a3      	str	r3, [r4, #88]	; 0x58
 801ac1a:	f04f 0a00 	mov.w	sl, #0
 801ac1e:	e7d9      	b.n	801abd4 <_printf_float+0x12c>
 801ac20:	b913      	cbnz	r3, 801ac28 <_printf_float+0x180>
 801ac22:	6822      	ldr	r2, [r4, #0]
 801ac24:	07d0      	lsls	r0, r2, #31
 801ac26:	d501      	bpl.n	801ac2c <_printf_float+0x184>
 801ac28:	3302      	adds	r3, #2
 801ac2a:	e7f3      	b.n	801ac14 <_printf_float+0x16c>
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	e7f1      	b.n	801ac14 <_printf_float+0x16c>
 801ac30:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ac34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	db05      	blt.n	801ac48 <_printf_float+0x1a0>
 801ac3c:	6822      	ldr	r2, [r4, #0]
 801ac3e:	6123      	str	r3, [r4, #16]
 801ac40:	07d1      	lsls	r1, r2, #31
 801ac42:	d5e8      	bpl.n	801ac16 <_printf_float+0x16e>
 801ac44:	3301      	adds	r3, #1
 801ac46:	e7e5      	b.n	801ac14 <_printf_float+0x16c>
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	bfd4      	ite	le
 801ac4c:	f1c3 0302 	rsble	r3, r3, #2
 801ac50:	2301      	movgt	r3, #1
 801ac52:	4413      	add	r3, r2
 801ac54:	e7de      	b.n	801ac14 <_printf_float+0x16c>
 801ac56:	6823      	ldr	r3, [r4, #0]
 801ac58:	055a      	lsls	r2, r3, #21
 801ac5a:	d407      	bmi.n	801ac6c <_printf_float+0x1c4>
 801ac5c:	6923      	ldr	r3, [r4, #16]
 801ac5e:	4642      	mov	r2, r8
 801ac60:	4631      	mov	r1, r6
 801ac62:	4628      	mov	r0, r5
 801ac64:	47b8      	blx	r7
 801ac66:	3001      	adds	r0, #1
 801ac68:	d12a      	bne.n	801acc0 <_printf_float+0x218>
 801ac6a:	e76b      	b.n	801ab44 <_printf_float+0x9c>
 801ac6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ac70:	f240 80de 	bls.w	801ae30 <_printf_float+0x388>
 801ac74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ac78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac80:	d133      	bne.n	801acea <_printf_float+0x242>
 801ac82:	2301      	movs	r3, #1
 801ac84:	4a42      	ldr	r2, [pc, #264]	; (801ad90 <_printf_float+0x2e8>)
 801ac86:	4631      	mov	r1, r6
 801ac88:	4628      	mov	r0, r5
 801ac8a:	47b8      	blx	r7
 801ac8c:	3001      	adds	r0, #1
 801ac8e:	f43f af59 	beq.w	801ab44 <_printf_float+0x9c>
 801ac92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac96:	429a      	cmp	r2, r3
 801ac98:	db02      	blt.n	801aca0 <_printf_float+0x1f8>
 801ac9a:	6823      	ldr	r3, [r4, #0]
 801ac9c:	07d8      	lsls	r0, r3, #31
 801ac9e:	d50f      	bpl.n	801acc0 <_printf_float+0x218>
 801aca0:	9b05      	ldr	r3, [sp, #20]
 801aca2:	465a      	mov	r2, fp
 801aca4:	4631      	mov	r1, r6
 801aca6:	4628      	mov	r0, r5
 801aca8:	47b8      	blx	r7
 801acaa:	3001      	adds	r0, #1
 801acac:	f43f af4a 	beq.w	801ab44 <_printf_float+0x9c>
 801acb0:	f04f 0800 	mov.w	r8, #0
 801acb4:	f104 091a 	add.w	r9, r4, #26
 801acb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801acba:	3b01      	subs	r3, #1
 801acbc:	4543      	cmp	r3, r8
 801acbe:	dc09      	bgt.n	801acd4 <_printf_float+0x22c>
 801acc0:	6823      	ldr	r3, [r4, #0]
 801acc2:	079b      	lsls	r3, r3, #30
 801acc4:	f100 8105 	bmi.w	801aed2 <_printf_float+0x42a>
 801acc8:	68e0      	ldr	r0, [r4, #12]
 801acca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801accc:	4298      	cmp	r0, r3
 801acce:	bfb8      	it	lt
 801acd0:	4618      	movlt	r0, r3
 801acd2:	e739      	b.n	801ab48 <_printf_float+0xa0>
 801acd4:	2301      	movs	r3, #1
 801acd6:	464a      	mov	r2, r9
 801acd8:	4631      	mov	r1, r6
 801acda:	4628      	mov	r0, r5
 801acdc:	47b8      	blx	r7
 801acde:	3001      	adds	r0, #1
 801ace0:	f43f af30 	beq.w	801ab44 <_printf_float+0x9c>
 801ace4:	f108 0801 	add.w	r8, r8, #1
 801ace8:	e7e6      	b.n	801acb8 <_printf_float+0x210>
 801acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acec:	2b00      	cmp	r3, #0
 801acee:	dc2b      	bgt.n	801ad48 <_printf_float+0x2a0>
 801acf0:	2301      	movs	r3, #1
 801acf2:	4a27      	ldr	r2, [pc, #156]	; (801ad90 <_printf_float+0x2e8>)
 801acf4:	4631      	mov	r1, r6
 801acf6:	4628      	mov	r0, r5
 801acf8:	47b8      	blx	r7
 801acfa:	3001      	adds	r0, #1
 801acfc:	f43f af22 	beq.w	801ab44 <_printf_float+0x9c>
 801ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad02:	b923      	cbnz	r3, 801ad0e <_printf_float+0x266>
 801ad04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad06:	b913      	cbnz	r3, 801ad0e <_printf_float+0x266>
 801ad08:	6823      	ldr	r3, [r4, #0]
 801ad0a:	07d9      	lsls	r1, r3, #31
 801ad0c:	d5d8      	bpl.n	801acc0 <_printf_float+0x218>
 801ad0e:	9b05      	ldr	r3, [sp, #20]
 801ad10:	465a      	mov	r2, fp
 801ad12:	4631      	mov	r1, r6
 801ad14:	4628      	mov	r0, r5
 801ad16:	47b8      	blx	r7
 801ad18:	3001      	adds	r0, #1
 801ad1a:	f43f af13 	beq.w	801ab44 <_printf_float+0x9c>
 801ad1e:	f04f 0900 	mov.w	r9, #0
 801ad22:	f104 0a1a 	add.w	sl, r4, #26
 801ad26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad28:	425b      	negs	r3, r3
 801ad2a:	454b      	cmp	r3, r9
 801ad2c:	dc01      	bgt.n	801ad32 <_printf_float+0x28a>
 801ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad30:	e795      	b.n	801ac5e <_printf_float+0x1b6>
 801ad32:	2301      	movs	r3, #1
 801ad34:	4652      	mov	r2, sl
 801ad36:	4631      	mov	r1, r6
 801ad38:	4628      	mov	r0, r5
 801ad3a:	47b8      	blx	r7
 801ad3c:	3001      	adds	r0, #1
 801ad3e:	f43f af01 	beq.w	801ab44 <_printf_float+0x9c>
 801ad42:	f109 0901 	add.w	r9, r9, #1
 801ad46:	e7ee      	b.n	801ad26 <_printf_float+0x27e>
 801ad48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	bfa8      	it	ge
 801ad50:	461a      	movge	r2, r3
 801ad52:	2a00      	cmp	r2, #0
 801ad54:	4691      	mov	r9, r2
 801ad56:	dd07      	ble.n	801ad68 <_printf_float+0x2c0>
 801ad58:	4613      	mov	r3, r2
 801ad5a:	4631      	mov	r1, r6
 801ad5c:	4642      	mov	r2, r8
 801ad5e:	4628      	mov	r0, r5
 801ad60:	47b8      	blx	r7
 801ad62:	3001      	adds	r0, #1
 801ad64:	f43f aeee 	beq.w	801ab44 <_printf_float+0x9c>
 801ad68:	f104 031a 	add.w	r3, r4, #26
 801ad6c:	f04f 0a00 	mov.w	sl, #0
 801ad70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad74:	9307      	str	r3, [sp, #28]
 801ad76:	e017      	b.n	801ada8 <_printf_float+0x300>
 801ad78:	ffffffff 	.word	0xffffffff
 801ad7c:	7fefffff 	.word	0x7fefffff
 801ad80:	0802080a 	.word	0x0802080a
 801ad84:	08020806 	.word	0x08020806
 801ad88:	08020812 	.word	0x08020812
 801ad8c:	0802080e 	.word	0x0802080e
 801ad90:	08020816 	.word	0x08020816
 801ad94:	2301      	movs	r3, #1
 801ad96:	9a07      	ldr	r2, [sp, #28]
 801ad98:	4631      	mov	r1, r6
 801ad9a:	4628      	mov	r0, r5
 801ad9c:	47b8      	blx	r7
 801ad9e:	3001      	adds	r0, #1
 801ada0:	f43f aed0 	beq.w	801ab44 <_printf_float+0x9c>
 801ada4:	f10a 0a01 	add.w	sl, sl, #1
 801ada8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801adaa:	9306      	str	r3, [sp, #24]
 801adac:	eba3 0309 	sub.w	r3, r3, r9
 801adb0:	4553      	cmp	r3, sl
 801adb2:	dcef      	bgt.n	801ad94 <_printf_float+0x2ec>
 801adb4:	9b06      	ldr	r3, [sp, #24]
 801adb6:	4498      	add	r8, r3
 801adb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801adbc:	429a      	cmp	r2, r3
 801adbe:	db15      	blt.n	801adec <_printf_float+0x344>
 801adc0:	6823      	ldr	r3, [r4, #0]
 801adc2:	07da      	lsls	r2, r3, #31
 801adc4:	d412      	bmi.n	801adec <_printf_float+0x344>
 801adc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adc8:	9a06      	ldr	r2, [sp, #24]
 801adca:	9909      	ldr	r1, [sp, #36]	; 0x24
 801adcc:	1a9a      	subs	r2, r3, r2
 801adce:	eba3 0a01 	sub.w	sl, r3, r1
 801add2:	4592      	cmp	sl, r2
 801add4:	bfa8      	it	ge
 801add6:	4692      	movge	sl, r2
 801add8:	f1ba 0f00 	cmp.w	sl, #0
 801addc:	dc0e      	bgt.n	801adfc <_printf_float+0x354>
 801adde:	f04f 0800 	mov.w	r8, #0
 801ade2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ade6:	f104 091a 	add.w	r9, r4, #26
 801adea:	e019      	b.n	801ae20 <_printf_float+0x378>
 801adec:	9b05      	ldr	r3, [sp, #20]
 801adee:	465a      	mov	r2, fp
 801adf0:	4631      	mov	r1, r6
 801adf2:	4628      	mov	r0, r5
 801adf4:	47b8      	blx	r7
 801adf6:	3001      	adds	r0, #1
 801adf8:	d1e5      	bne.n	801adc6 <_printf_float+0x31e>
 801adfa:	e6a3      	b.n	801ab44 <_printf_float+0x9c>
 801adfc:	4653      	mov	r3, sl
 801adfe:	4642      	mov	r2, r8
 801ae00:	4631      	mov	r1, r6
 801ae02:	4628      	mov	r0, r5
 801ae04:	47b8      	blx	r7
 801ae06:	3001      	adds	r0, #1
 801ae08:	d1e9      	bne.n	801adde <_printf_float+0x336>
 801ae0a:	e69b      	b.n	801ab44 <_printf_float+0x9c>
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	464a      	mov	r2, r9
 801ae10:	4631      	mov	r1, r6
 801ae12:	4628      	mov	r0, r5
 801ae14:	47b8      	blx	r7
 801ae16:	3001      	adds	r0, #1
 801ae18:	f43f ae94 	beq.w	801ab44 <_printf_float+0x9c>
 801ae1c:	f108 0801 	add.w	r8, r8, #1
 801ae20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae24:	1a9b      	subs	r3, r3, r2
 801ae26:	eba3 030a 	sub.w	r3, r3, sl
 801ae2a:	4543      	cmp	r3, r8
 801ae2c:	dcee      	bgt.n	801ae0c <_printf_float+0x364>
 801ae2e:	e747      	b.n	801acc0 <_printf_float+0x218>
 801ae30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae32:	2a01      	cmp	r2, #1
 801ae34:	dc01      	bgt.n	801ae3a <_printf_float+0x392>
 801ae36:	07db      	lsls	r3, r3, #31
 801ae38:	d539      	bpl.n	801aeae <_printf_float+0x406>
 801ae3a:	2301      	movs	r3, #1
 801ae3c:	4642      	mov	r2, r8
 801ae3e:	4631      	mov	r1, r6
 801ae40:	4628      	mov	r0, r5
 801ae42:	47b8      	blx	r7
 801ae44:	3001      	adds	r0, #1
 801ae46:	f43f ae7d 	beq.w	801ab44 <_printf_float+0x9c>
 801ae4a:	9b05      	ldr	r3, [sp, #20]
 801ae4c:	465a      	mov	r2, fp
 801ae4e:	4631      	mov	r1, r6
 801ae50:	4628      	mov	r0, r5
 801ae52:	47b8      	blx	r7
 801ae54:	3001      	adds	r0, #1
 801ae56:	f108 0801 	add.w	r8, r8, #1
 801ae5a:	f43f ae73 	beq.w	801ab44 <_printf_float+0x9c>
 801ae5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ae62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ae68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ae70:	d018      	beq.n	801aea4 <_printf_float+0x3fc>
 801ae72:	4642      	mov	r2, r8
 801ae74:	4631      	mov	r1, r6
 801ae76:	4628      	mov	r0, r5
 801ae78:	47b8      	blx	r7
 801ae7a:	3001      	adds	r0, #1
 801ae7c:	d10e      	bne.n	801ae9c <_printf_float+0x3f4>
 801ae7e:	e661      	b.n	801ab44 <_printf_float+0x9c>
 801ae80:	2301      	movs	r3, #1
 801ae82:	464a      	mov	r2, r9
 801ae84:	4631      	mov	r1, r6
 801ae86:	4628      	mov	r0, r5
 801ae88:	47b8      	blx	r7
 801ae8a:	3001      	adds	r0, #1
 801ae8c:	f43f ae5a 	beq.w	801ab44 <_printf_float+0x9c>
 801ae90:	f108 0801 	add.w	r8, r8, #1
 801ae94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae96:	3b01      	subs	r3, #1
 801ae98:	4543      	cmp	r3, r8
 801ae9a:	dcf1      	bgt.n	801ae80 <_printf_float+0x3d8>
 801ae9c:	4653      	mov	r3, sl
 801ae9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801aea2:	e6dd      	b.n	801ac60 <_printf_float+0x1b8>
 801aea4:	f04f 0800 	mov.w	r8, #0
 801aea8:	f104 091a 	add.w	r9, r4, #26
 801aeac:	e7f2      	b.n	801ae94 <_printf_float+0x3ec>
 801aeae:	2301      	movs	r3, #1
 801aeb0:	e7df      	b.n	801ae72 <_printf_float+0x3ca>
 801aeb2:	2301      	movs	r3, #1
 801aeb4:	464a      	mov	r2, r9
 801aeb6:	4631      	mov	r1, r6
 801aeb8:	4628      	mov	r0, r5
 801aeba:	47b8      	blx	r7
 801aebc:	3001      	adds	r0, #1
 801aebe:	f43f ae41 	beq.w	801ab44 <_printf_float+0x9c>
 801aec2:	f108 0801 	add.w	r8, r8, #1
 801aec6:	68e3      	ldr	r3, [r4, #12]
 801aec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aeca:	1a9b      	subs	r3, r3, r2
 801aecc:	4543      	cmp	r3, r8
 801aece:	dcf0      	bgt.n	801aeb2 <_printf_float+0x40a>
 801aed0:	e6fa      	b.n	801acc8 <_printf_float+0x220>
 801aed2:	f04f 0800 	mov.w	r8, #0
 801aed6:	f104 0919 	add.w	r9, r4, #25
 801aeda:	e7f4      	b.n	801aec6 <_printf_float+0x41e>
 801aedc:	2900      	cmp	r1, #0
 801aede:	f43f ae8a 	beq.w	801abf6 <_printf_float+0x14e>
 801aee2:	f04f 0c00 	mov.w	ip, #0
 801aee6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801aeea:	e9cd 0900 	strd	r0, r9, [sp]
 801aeee:	6022      	str	r2, [r4, #0]
 801aef0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aef4:	4628      	mov	r0, r5
 801aef6:	f7ff fd52 	bl	801a99e <__cvt>
 801aefa:	4680      	mov	r8, r0
 801aefc:	e64a      	b.n	801ab94 <_printf_float+0xec>
 801aefe:	bf00      	nop

0801af00 <_printf_common>:
 801af00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af04:	4691      	mov	r9, r2
 801af06:	461f      	mov	r7, r3
 801af08:	688a      	ldr	r2, [r1, #8]
 801af0a:	690b      	ldr	r3, [r1, #16]
 801af0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af10:	4293      	cmp	r3, r2
 801af12:	bfb8      	it	lt
 801af14:	4613      	movlt	r3, r2
 801af16:	f8c9 3000 	str.w	r3, [r9]
 801af1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801af1e:	4606      	mov	r6, r0
 801af20:	460c      	mov	r4, r1
 801af22:	b112      	cbz	r2, 801af2a <_printf_common+0x2a>
 801af24:	3301      	adds	r3, #1
 801af26:	f8c9 3000 	str.w	r3, [r9]
 801af2a:	6823      	ldr	r3, [r4, #0]
 801af2c:	0699      	lsls	r1, r3, #26
 801af2e:	bf42      	ittt	mi
 801af30:	f8d9 3000 	ldrmi.w	r3, [r9]
 801af34:	3302      	addmi	r3, #2
 801af36:	f8c9 3000 	strmi.w	r3, [r9]
 801af3a:	6825      	ldr	r5, [r4, #0]
 801af3c:	f015 0506 	ands.w	r5, r5, #6
 801af40:	d107      	bne.n	801af52 <_printf_common+0x52>
 801af42:	f104 0a19 	add.w	sl, r4, #25
 801af46:	68e3      	ldr	r3, [r4, #12]
 801af48:	f8d9 2000 	ldr.w	r2, [r9]
 801af4c:	1a9b      	subs	r3, r3, r2
 801af4e:	42ab      	cmp	r3, r5
 801af50:	dc28      	bgt.n	801afa4 <_printf_common+0xa4>
 801af52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801af56:	6822      	ldr	r2, [r4, #0]
 801af58:	3300      	adds	r3, #0
 801af5a:	bf18      	it	ne
 801af5c:	2301      	movne	r3, #1
 801af5e:	0692      	lsls	r2, r2, #26
 801af60:	d42d      	bmi.n	801afbe <_printf_common+0xbe>
 801af62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af66:	4639      	mov	r1, r7
 801af68:	4630      	mov	r0, r6
 801af6a:	47c0      	blx	r8
 801af6c:	3001      	adds	r0, #1
 801af6e:	d020      	beq.n	801afb2 <_printf_common+0xb2>
 801af70:	6823      	ldr	r3, [r4, #0]
 801af72:	68e5      	ldr	r5, [r4, #12]
 801af74:	f8d9 2000 	ldr.w	r2, [r9]
 801af78:	f003 0306 	and.w	r3, r3, #6
 801af7c:	2b04      	cmp	r3, #4
 801af7e:	bf08      	it	eq
 801af80:	1aad      	subeq	r5, r5, r2
 801af82:	68a3      	ldr	r3, [r4, #8]
 801af84:	6922      	ldr	r2, [r4, #16]
 801af86:	bf0c      	ite	eq
 801af88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af8c:	2500      	movne	r5, #0
 801af8e:	4293      	cmp	r3, r2
 801af90:	bfc4      	itt	gt
 801af92:	1a9b      	subgt	r3, r3, r2
 801af94:	18ed      	addgt	r5, r5, r3
 801af96:	f04f 0900 	mov.w	r9, #0
 801af9a:	341a      	adds	r4, #26
 801af9c:	454d      	cmp	r5, r9
 801af9e:	d11a      	bne.n	801afd6 <_printf_common+0xd6>
 801afa0:	2000      	movs	r0, #0
 801afa2:	e008      	b.n	801afb6 <_printf_common+0xb6>
 801afa4:	2301      	movs	r3, #1
 801afa6:	4652      	mov	r2, sl
 801afa8:	4639      	mov	r1, r7
 801afaa:	4630      	mov	r0, r6
 801afac:	47c0      	blx	r8
 801afae:	3001      	adds	r0, #1
 801afb0:	d103      	bne.n	801afba <_printf_common+0xba>
 801afb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afba:	3501      	adds	r5, #1
 801afbc:	e7c3      	b.n	801af46 <_printf_common+0x46>
 801afbe:	18e1      	adds	r1, r4, r3
 801afc0:	1c5a      	adds	r2, r3, #1
 801afc2:	2030      	movs	r0, #48	; 0x30
 801afc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801afc8:	4422      	add	r2, r4
 801afca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801afce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801afd2:	3302      	adds	r3, #2
 801afd4:	e7c5      	b.n	801af62 <_printf_common+0x62>
 801afd6:	2301      	movs	r3, #1
 801afd8:	4622      	mov	r2, r4
 801afda:	4639      	mov	r1, r7
 801afdc:	4630      	mov	r0, r6
 801afde:	47c0      	blx	r8
 801afe0:	3001      	adds	r0, #1
 801afe2:	d0e6      	beq.n	801afb2 <_printf_common+0xb2>
 801afe4:	f109 0901 	add.w	r9, r9, #1
 801afe8:	e7d8      	b.n	801af9c <_printf_common+0x9c>
	...

0801afec <_printf_i>:
 801afec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aff0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801aff4:	460c      	mov	r4, r1
 801aff6:	7e09      	ldrb	r1, [r1, #24]
 801aff8:	b085      	sub	sp, #20
 801affa:	296e      	cmp	r1, #110	; 0x6e
 801affc:	4617      	mov	r7, r2
 801affe:	4606      	mov	r6, r0
 801b000:	4698      	mov	r8, r3
 801b002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b004:	f000 80b3 	beq.w	801b16e <_printf_i+0x182>
 801b008:	d822      	bhi.n	801b050 <_printf_i+0x64>
 801b00a:	2963      	cmp	r1, #99	; 0x63
 801b00c:	d036      	beq.n	801b07c <_printf_i+0x90>
 801b00e:	d80a      	bhi.n	801b026 <_printf_i+0x3a>
 801b010:	2900      	cmp	r1, #0
 801b012:	f000 80b9 	beq.w	801b188 <_printf_i+0x19c>
 801b016:	2958      	cmp	r1, #88	; 0x58
 801b018:	f000 8083 	beq.w	801b122 <_printf_i+0x136>
 801b01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b020:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b024:	e032      	b.n	801b08c <_printf_i+0xa0>
 801b026:	2964      	cmp	r1, #100	; 0x64
 801b028:	d001      	beq.n	801b02e <_printf_i+0x42>
 801b02a:	2969      	cmp	r1, #105	; 0x69
 801b02c:	d1f6      	bne.n	801b01c <_printf_i+0x30>
 801b02e:	6820      	ldr	r0, [r4, #0]
 801b030:	6813      	ldr	r3, [r2, #0]
 801b032:	0605      	lsls	r5, r0, #24
 801b034:	f103 0104 	add.w	r1, r3, #4
 801b038:	d52a      	bpl.n	801b090 <_printf_i+0xa4>
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	6011      	str	r1, [r2, #0]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	da03      	bge.n	801b04a <_printf_i+0x5e>
 801b042:	222d      	movs	r2, #45	; 0x2d
 801b044:	425b      	negs	r3, r3
 801b046:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b04a:	486f      	ldr	r0, [pc, #444]	; (801b208 <_printf_i+0x21c>)
 801b04c:	220a      	movs	r2, #10
 801b04e:	e039      	b.n	801b0c4 <_printf_i+0xd8>
 801b050:	2973      	cmp	r1, #115	; 0x73
 801b052:	f000 809d 	beq.w	801b190 <_printf_i+0x1a4>
 801b056:	d808      	bhi.n	801b06a <_printf_i+0x7e>
 801b058:	296f      	cmp	r1, #111	; 0x6f
 801b05a:	d020      	beq.n	801b09e <_printf_i+0xb2>
 801b05c:	2970      	cmp	r1, #112	; 0x70
 801b05e:	d1dd      	bne.n	801b01c <_printf_i+0x30>
 801b060:	6823      	ldr	r3, [r4, #0]
 801b062:	f043 0320 	orr.w	r3, r3, #32
 801b066:	6023      	str	r3, [r4, #0]
 801b068:	e003      	b.n	801b072 <_printf_i+0x86>
 801b06a:	2975      	cmp	r1, #117	; 0x75
 801b06c:	d017      	beq.n	801b09e <_printf_i+0xb2>
 801b06e:	2978      	cmp	r1, #120	; 0x78
 801b070:	d1d4      	bne.n	801b01c <_printf_i+0x30>
 801b072:	2378      	movs	r3, #120	; 0x78
 801b074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b078:	4864      	ldr	r0, [pc, #400]	; (801b20c <_printf_i+0x220>)
 801b07a:	e055      	b.n	801b128 <_printf_i+0x13c>
 801b07c:	6813      	ldr	r3, [r2, #0]
 801b07e:	1d19      	adds	r1, r3, #4
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	6011      	str	r1, [r2, #0]
 801b084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b08c:	2301      	movs	r3, #1
 801b08e:	e08c      	b.n	801b1aa <_printf_i+0x1be>
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	6011      	str	r1, [r2, #0]
 801b094:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b098:	bf18      	it	ne
 801b09a:	b21b      	sxthne	r3, r3
 801b09c:	e7cf      	b.n	801b03e <_printf_i+0x52>
 801b09e:	6813      	ldr	r3, [r2, #0]
 801b0a0:	6825      	ldr	r5, [r4, #0]
 801b0a2:	1d18      	adds	r0, r3, #4
 801b0a4:	6010      	str	r0, [r2, #0]
 801b0a6:	0628      	lsls	r0, r5, #24
 801b0a8:	d501      	bpl.n	801b0ae <_printf_i+0xc2>
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	e002      	b.n	801b0b4 <_printf_i+0xc8>
 801b0ae:	0668      	lsls	r0, r5, #25
 801b0b0:	d5fb      	bpl.n	801b0aa <_printf_i+0xbe>
 801b0b2:	881b      	ldrh	r3, [r3, #0]
 801b0b4:	4854      	ldr	r0, [pc, #336]	; (801b208 <_printf_i+0x21c>)
 801b0b6:	296f      	cmp	r1, #111	; 0x6f
 801b0b8:	bf14      	ite	ne
 801b0ba:	220a      	movne	r2, #10
 801b0bc:	2208      	moveq	r2, #8
 801b0be:	2100      	movs	r1, #0
 801b0c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b0c4:	6865      	ldr	r5, [r4, #4]
 801b0c6:	60a5      	str	r5, [r4, #8]
 801b0c8:	2d00      	cmp	r5, #0
 801b0ca:	f2c0 8095 	blt.w	801b1f8 <_printf_i+0x20c>
 801b0ce:	6821      	ldr	r1, [r4, #0]
 801b0d0:	f021 0104 	bic.w	r1, r1, #4
 801b0d4:	6021      	str	r1, [r4, #0]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d13d      	bne.n	801b156 <_printf_i+0x16a>
 801b0da:	2d00      	cmp	r5, #0
 801b0dc:	f040 808e 	bne.w	801b1fc <_printf_i+0x210>
 801b0e0:	4665      	mov	r5, ip
 801b0e2:	2a08      	cmp	r2, #8
 801b0e4:	d10b      	bne.n	801b0fe <_printf_i+0x112>
 801b0e6:	6823      	ldr	r3, [r4, #0]
 801b0e8:	07db      	lsls	r3, r3, #31
 801b0ea:	d508      	bpl.n	801b0fe <_printf_i+0x112>
 801b0ec:	6923      	ldr	r3, [r4, #16]
 801b0ee:	6862      	ldr	r2, [r4, #4]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	bfde      	ittt	le
 801b0f4:	2330      	movle	r3, #48	; 0x30
 801b0f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b0fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b0fe:	ebac 0305 	sub.w	r3, ip, r5
 801b102:	6123      	str	r3, [r4, #16]
 801b104:	f8cd 8000 	str.w	r8, [sp]
 801b108:	463b      	mov	r3, r7
 801b10a:	aa03      	add	r2, sp, #12
 801b10c:	4621      	mov	r1, r4
 801b10e:	4630      	mov	r0, r6
 801b110:	f7ff fef6 	bl	801af00 <_printf_common>
 801b114:	3001      	adds	r0, #1
 801b116:	d14d      	bne.n	801b1b4 <_printf_i+0x1c8>
 801b118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b11c:	b005      	add	sp, #20
 801b11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b122:	4839      	ldr	r0, [pc, #228]	; (801b208 <_printf_i+0x21c>)
 801b124:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b128:	6813      	ldr	r3, [r2, #0]
 801b12a:	6821      	ldr	r1, [r4, #0]
 801b12c:	1d1d      	adds	r5, r3, #4
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	6015      	str	r5, [r2, #0]
 801b132:	060a      	lsls	r2, r1, #24
 801b134:	d50b      	bpl.n	801b14e <_printf_i+0x162>
 801b136:	07ca      	lsls	r2, r1, #31
 801b138:	bf44      	itt	mi
 801b13a:	f041 0120 	orrmi.w	r1, r1, #32
 801b13e:	6021      	strmi	r1, [r4, #0]
 801b140:	b91b      	cbnz	r3, 801b14a <_printf_i+0x15e>
 801b142:	6822      	ldr	r2, [r4, #0]
 801b144:	f022 0220 	bic.w	r2, r2, #32
 801b148:	6022      	str	r2, [r4, #0]
 801b14a:	2210      	movs	r2, #16
 801b14c:	e7b7      	b.n	801b0be <_printf_i+0xd2>
 801b14e:	064d      	lsls	r5, r1, #25
 801b150:	bf48      	it	mi
 801b152:	b29b      	uxthmi	r3, r3
 801b154:	e7ef      	b.n	801b136 <_printf_i+0x14a>
 801b156:	4665      	mov	r5, ip
 801b158:	fbb3 f1f2 	udiv	r1, r3, r2
 801b15c:	fb02 3311 	mls	r3, r2, r1, r3
 801b160:	5cc3      	ldrb	r3, [r0, r3]
 801b162:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b166:	460b      	mov	r3, r1
 801b168:	2900      	cmp	r1, #0
 801b16a:	d1f5      	bne.n	801b158 <_printf_i+0x16c>
 801b16c:	e7b9      	b.n	801b0e2 <_printf_i+0xf6>
 801b16e:	6813      	ldr	r3, [r2, #0]
 801b170:	6825      	ldr	r5, [r4, #0]
 801b172:	6961      	ldr	r1, [r4, #20]
 801b174:	1d18      	adds	r0, r3, #4
 801b176:	6010      	str	r0, [r2, #0]
 801b178:	0628      	lsls	r0, r5, #24
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	d501      	bpl.n	801b182 <_printf_i+0x196>
 801b17e:	6019      	str	r1, [r3, #0]
 801b180:	e002      	b.n	801b188 <_printf_i+0x19c>
 801b182:	066a      	lsls	r2, r5, #25
 801b184:	d5fb      	bpl.n	801b17e <_printf_i+0x192>
 801b186:	8019      	strh	r1, [r3, #0]
 801b188:	2300      	movs	r3, #0
 801b18a:	6123      	str	r3, [r4, #16]
 801b18c:	4665      	mov	r5, ip
 801b18e:	e7b9      	b.n	801b104 <_printf_i+0x118>
 801b190:	6813      	ldr	r3, [r2, #0]
 801b192:	1d19      	adds	r1, r3, #4
 801b194:	6011      	str	r1, [r2, #0]
 801b196:	681d      	ldr	r5, [r3, #0]
 801b198:	6862      	ldr	r2, [r4, #4]
 801b19a:	2100      	movs	r1, #0
 801b19c:	4628      	mov	r0, r5
 801b19e:	f7e5 f8b7 	bl	8000310 <memchr>
 801b1a2:	b108      	cbz	r0, 801b1a8 <_printf_i+0x1bc>
 801b1a4:	1b40      	subs	r0, r0, r5
 801b1a6:	6060      	str	r0, [r4, #4]
 801b1a8:	6863      	ldr	r3, [r4, #4]
 801b1aa:	6123      	str	r3, [r4, #16]
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1b2:	e7a7      	b.n	801b104 <_printf_i+0x118>
 801b1b4:	6923      	ldr	r3, [r4, #16]
 801b1b6:	462a      	mov	r2, r5
 801b1b8:	4639      	mov	r1, r7
 801b1ba:	4630      	mov	r0, r6
 801b1bc:	47c0      	blx	r8
 801b1be:	3001      	adds	r0, #1
 801b1c0:	d0aa      	beq.n	801b118 <_printf_i+0x12c>
 801b1c2:	6823      	ldr	r3, [r4, #0]
 801b1c4:	079b      	lsls	r3, r3, #30
 801b1c6:	d413      	bmi.n	801b1f0 <_printf_i+0x204>
 801b1c8:	68e0      	ldr	r0, [r4, #12]
 801b1ca:	9b03      	ldr	r3, [sp, #12]
 801b1cc:	4298      	cmp	r0, r3
 801b1ce:	bfb8      	it	lt
 801b1d0:	4618      	movlt	r0, r3
 801b1d2:	e7a3      	b.n	801b11c <_printf_i+0x130>
 801b1d4:	2301      	movs	r3, #1
 801b1d6:	464a      	mov	r2, r9
 801b1d8:	4639      	mov	r1, r7
 801b1da:	4630      	mov	r0, r6
 801b1dc:	47c0      	blx	r8
 801b1de:	3001      	adds	r0, #1
 801b1e0:	d09a      	beq.n	801b118 <_printf_i+0x12c>
 801b1e2:	3501      	adds	r5, #1
 801b1e4:	68e3      	ldr	r3, [r4, #12]
 801b1e6:	9a03      	ldr	r2, [sp, #12]
 801b1e8:	1a9b      	subs	r3, r3, r2
 801b1ea:	42ab      	cmp	r3, r5
 801b1ec:	dcf2      	bgt.n	801b1d4 <_printf_i+0x1e8>
 801b1ee:	e7eb      	b.n	801b1c8 <_printf_i+0x1dc>
 801b1f0:	2500      	movs	r5, #0
 801b1f2:	f104 0919 	add.w	r9, r4, #25
 801b1f6:	e7f5      	b.n	801b1e4 <_printf_i+0x1f8>
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d1ac      	bne.n	801b156 <_printf_i+0x16a>
 801b1fc:	7803      	ldrb	r3, [r0, #0]
 801b1fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b206:	e76c      	b.n	801b0e2 <_printf_i+0xf6>
 801b208:	08020818 	.word	0x08020818
 801b20c:	08020829 	.word	0x08020829

0801b210 <iprintf>:
 801b210:	b40f      	push	{r0, r1, r2, r3}
 801b212:	4b0a      	ldr	r3, [pc, #40]	; (801b23c <iprintf+0x2c>)
 801b214:	b513      	push	{r0, r1, r4, lr}
 801b216:	681c      	ldr	r4, [r3, #0]
 801b218:	b124      	cbz	r4, 801b224 <iprintf+0x14>
 801b21a:	69a3      	ldr	r3, [r4, #24]
 801b21c:	b913      	cbnz	r3, 801b224 <iprintf+0x14>
 801b21e:	4620      	mov	r0, r4
 801b220:	f001 f8a2 	bl	801c368 <__sinit>
 801b224:	ab05      	add	r3, sp, #20
 801b226:	9a04      	ldr	r2, [sp, #16]
 801b228:	68a1      	ldr	r1, [r4, #8]
 801b22a:	9301      	str	r3, [sp, #4]
 801b22c:	4620      	mov	r0, r4
 801b22e:	f001 fead 	bl	801cf8c <_vfiprintf_r>
 801b232:	b002      	add	sp, #8
 801b234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b238:	b004      	add	sp, #16
 801b23a:	4770      	bx	lr
 801b23c:	2400003c 	.word	0x2400003c

0801b240 <rand>:
 801b240:	b538      	push	{r3, r4, r5, lr}
 801b242:	4b13      	ldr	r3, [pc, #76]	; (801b290 <rand+0x50>)
 801b244:	681c      	ldr	r4, [r3, #0]
 801b246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b248:	b97b      	cbnz	r3, 801b26a <rand+0x2a>
 801b24a:	2018      	movs	r0, #24
 801b24c:	f001 f988 	bl	801c560 <malloc>
 801b250:	4a10      	ldr	r2, [pc, #64]	; (801b294 <rand+0x54>)
 801b252:	4b11      	ldr	r3, [pc, #68]	; (801b298 <rand+0x58>)
 801b254:	63a0      	str	r0, [r4, #56]	; 0x38
 801b256:	e9c0 2300 	strd	r2, r3, [r0]
 801b25a:	4b10      	ldr	r3, [pc, #64]	; (801b29c <rand+0x5c>)
 801b25c:	6083      	str	r3, [r0, #8]
 801b25e:	230b      	movs	r3, #11
 801b260:	8183      	strh	r3, [r0, #12]
 801b262:	2201      	movs	r2, #1
 801b264:	2300      	movs	r3, #0
 801b266:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b26a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b26c:	480c      	ldr	r0, [pc, #48]	; (801b2a0 <rand+0x60>)
 801b26e:	690a      	ldr	r2, [r1, #16]
 801b270:	694b      	ldr	r3, [r1, #20]
 801b272:	4c0c      	ldr	r4, [pc, #48]	; (801b2a4 <rand+0x64>)
 801b274:	4350      	muls	r0, r2
 801b276:	fb04 0003 	mla	r0, r4, r3, r0
 801b27a:	fba2 2304 	umull	r2, r3, r2, r4
 801b27e:	4403      	add	r3, r0
 801b280:	1c54      	adds	r4, r2, #1
 801b282:	f143 0500 	adc.w	r5, r3, #0
 801b286:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801b28a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801b28e:	bd38      	pop	{r3, r4, r5, pc}
 801b290:	2400003c 	.word	0x2400003c
 801b294:	abcd330e 	.word	0xabcd330e
 801b298:	e66d1234 	.word	0xe66d1234
 801b29c:	0005deec 	.word	0x0005deec
 801b2a0:	5851f42d 	.word	0x5851f42d
 801b2a4:	4c957f2d 	.word	0x4c957f2d

0801b2a8 <_raise_r>:
 801b2a8:	291f      	cmp	r1, #31
 801b2aa:	b538      	push	{r3, r4, r5, lr}
 801b2ac:	4604      	mov	r4, r0
 801b2ae:	460d      	mov	r5, r1
 801b2b0:	d904      	bls.n	801b2bc <_raise_r+0x14>
 801b2b2:	2316      	movs	r3, #22
 801b2b4:	6003      	str	r3, [r0, #0]
 801b2b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2ba:	bd38      	pop	{r3, r4, r5, pc}
 801b2bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b2be:	b112      	cbz	r2, 801b2c6 <_raise_r+0x1e>
 801b2c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2c4:	b94b      	cbnz	r3, 801b2da <_raise_r+0x32>
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	f000 f830 	bl	801b32c <_getpid_r>
 801b2cc:	462a      	mov	r2, r5
 801b2ce:	4601      	mov	r1, r0
 801b2d0:	4620      	mov	r0, r4
 801b2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2d6:	f000 b817 	b.w	801b308 <_kill_r>
 801b2da:	2b01      	cmp	r3, #1
 801b2dc:	d00a      	beq.n	801b2f4 <_raise_r+0x4c>
 801b2de:	1c59      	adds	r1, r3, #1
 801b2e0:	d103      	bne.n	801b2ea <_raise_r+0x42>
 801b2e2:	2316      	movs	r3, #22
 801b2e4:	6003      	str	r3, [r0, #0]
 801b2e6:	2001      	movs	r0, #1
 801b2e8:	e7e7      	b.n	801b2ba <_raise_r+0x12>
 801b2ea:	2400      	movs	r4, #0
 801b2ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2f0:	4628      	mov	r0, r5
 801b2f2:	4798      	blx	r3
 801b2f4:	2000      	movs	r0, #0
 801b2f6:	e7e0      	b.n	801b2ba <_raise_r+0x12>

0801b2f8 <raise>:
 801b2f8:	4b02      	ldr	r3, [pc, #8]	; (801b304 <raise+0xc>)
 801b2fa:	4601      	mov	r1, r0
 801b2fc:	6818      	ldr	r0, [r3, #0]
 801b2fe:	f7ff bfd3 	b.w	801b2a8 <_raise_r>
 801b302:	bf00      	nop
 801b304:	2400003c 	.word	0x2400003c

0801b308 <_kill_r>:
 801b308:	b538      	push	{r3, r4, r5, lr}
 801b30a:	4c07      	ldr	r4, [pc, #28]	; (801b328 <_kill_r+0x20>)
 801b30c:	2300      	movs	r3, #0
 801b30e:	4605      	mov	r5, r0
 801b310:	4608      	mov	r0, r1
 801b312:	4611      	mov	r1, r2
 801b314:	6023      	str	r3, [r4, #0]
 801b316:	f7e5 fde5 	bl	8000ee4 <_kill>
 801b31a:	1c43      	adds	r3, r0, #1
 801b31c:	d102      	bne.n	801b324 <_kill_r+0x1c>
 801b31e:	6823      	ldr	r3, [r4, #0]
 801b320:	b103      	cbz	r3, 801b324 <_kill_r+0x1c>
 801b322:	602b      	str	r3, [r5, #0]
 801b324:	bd38      	pop	{r3, r4, r5, pc}
 801b326:	bf00      	nop
 801b328:	24008a3c 	.word	0x24008a3c

0801b32c <_getpid_r>:
 801b32c:	f7e5 bdd2 	b.w	8000ed4 <_getpid>

0801b330 <_vsiprintf_r>:
 801b330:	b500      	push	{lr}
 801b332:	b09b      	sub	sp, #108	; 0x6c
 801b334:	9100      	str	r1, [sp, #0]
 801b336:	9104      	str	r1, [sp, #16]
 801b338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b33c:	9105      	str	r1, [sp, #20]
 801b33e:	9102      	str	r1, [sp, #8]
 801b340:	4905      	ldr	r1, [pc, #20]	; (801b358 <_vsiprintf_r+0x28>)
 801b342:	9103      	str	r1, [sp, #12]
 801b344:	4669      	mov	r1, sp
 801b346:	f001 fcff 	bl	801cd48 <_svfiprintf_r>
 801b34a:	9b00      	ldr	r3, [sp, #0]
 801b34c:	2200      	movs	r2, #0
 801b34e:	701a      	strb	r2, [r3, #0]
 801b350:	b01b      	add	sp, #108	; 0x6c
 801b352:	f85d fb04 	ldr.w	pc, [sp], #4
 801b356:	bf00      	nop
 801b358:	ffff0208 	.word	0xffff0208

0801b35c <vsiprintf>:
 801b35c:	4613      	mov	r3, r2
 801b35e:	460a      	mov	r2, r1
 801b360:	4601      	mov	r1, r0
 801b362:	4802      	ldr	r0, [pc, #8]	; (801b36c <vsiprintf+0x10>)
 801b364:	6800      	ldr	r0, [r0, #0]
 801b366:	f7ff bfe3 	b.w	801b330 <_vsiprintf_r>
 801b36a:	bf00      	nop
 801b36c:	2400003c 	.word	0x2400003c

0801b370 <__swbuf_r>:
 801b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b372:	460e      	mov	r6, r1
 801b374:	4614      	mov	r4, r2
 801b376:	4605      	mov	r5, r0
 801b378:	b118      	cbz	r0, 801b382 <__swbuf_r+0x12>
 801b37a:	6983      	ldr	r3, [r0, #24]
 801b37c:	b90b      	cbnz	r3, 801b382 <__swbuf_r+0x12>
 801b37e:	f000 fff3 	bl	801c368 <__sinit>
 801b382:	4b21      	ldr	r3, [pc, #132]	; (801b408 <__swbuf_r+0x98>)
 801b384:	429c      	cmp	r4, r3
 801b386:	d12a      	bne.n	801b3de <__swbuf_r+0x6e>
 801b388:	686c      	ldr	r4, [r5, #4]
 801b38a:	69a3      	ldr	r3, [r4, #24]
 801b38c:	60a3      	str	r3, [r4, #8]
 801b38e:	89a3      	ldrh	r3, [r4, #12]
 801b390:	071a      	lsls	r2, r3, #28
 801b392:	d52e      	bpl.n	801b3f2 <__swbuf_r+0x82>
 801b394:	6923      	ldr	r3, [r4, #16]
 801b396:	b363      	cbz	r3, 801b3f2 <__swbuf_r+0x82>
 801b398:	6923      	ldr	r3, [r4, #16]
 801b39a:	6820      	ldr	r0, [r4, #0]
 801b39c:	1ac0      	subs	r0, r0, r3
 801b39e:	6963      	ldr	r3, [r4, #20]
 801b3a0:	b2f6      	uxtb	r6, r6
 801b3a2:	4283      	cmp	r3, r0
 801b3a4:	4637      	mov	r7, r6
 801b3a6:	dc04      	bgt.n	801b3b2 <__swbuf_r+0x42>
 801b3a8:	4621      	mov	r1, r4
 801b3aa:	4628      	mov	r0, r5
 801b3ac:	f000 ff72 	bl	801c294 <_fflush_r>
 801b3b0:	bb28      	cbnz	r0, 801b3fe <__swbuf_r+0x8e>
 801b3b2:	68a3      	ldr	r3, [r4, #8]
 801b3b4:	3b01      	subs	r3, #1
 801b3b6:	60a3      	str	r3, [r4, #8]
 801b3b8:	6823      	ldr	r3, [r4, #0]
 801b3ba:	1c5a      	adds	r2, r3, #1
 801b3bc:	6022      	str	r2, [r4, #0]
 801b3be:	701e      	strb	r6, [r3, #0]
 801b3c0:	6963      	ldr	r3, [r4, #20]
 801b3c2:	3001      	adds	r0, #1
 801b3c4:	4283      	cmp	r3, r0
 801b3c6:	d004      	beq.n	801b3d2 <__swbuf_r+0x62>
 801b3c8:	89a3      	ldrh	r3, [r4, #12]
 801b3ca:	07db      	lsls	r3, r3, #31
 801b3cc:	d519      	bpl.n	801b402 <__swbuf_r+0x92>
 801b3ce:	2e0a      	cmp	r6, #10
 801b3d0:	d117      	bne.n	801b402 <__swbuf_r+0x92>
 801b3d2:	4621      	mov	r1, r4
 801b3d4:	4628      	mov	r0, r5
 801b3d6:	f000 ff5d 	bl	801c294 <_fflush_r>
 801b3da:	b190      	cbz	r0, 801b402 <__swbuf_r+0x92>
 801b3dc:	e00f      	b.n	801b3fe <__swbuf_r+0x8e>
 801b3de:	4b0b      	ldr	r3, [pc, #44]	; (801b40c <__swbuf_r+0x9c>)
 801b3e0:	429c      	cmp	r4, r3
 801b3e2:	d101      	bne.n	801b3e8 <__swbuf_r+0x78>
 801b3e4:	68ac      	ldr	r4, [r5, #8]
 801b3e6:	e7d0      	b.n	801b38a <__swbuf_r+0x1a>
 801b3e8:	4b09      	ldr	r3, [pc, #36]	; (801b410 <__swbuf_r+0xa0>)
 801b3ea:	429c      	cmp	r4, r3
 801b3ec:	bf08      	it	eq
 801b3ee:	68ec      	ldreq	r4, [r5, #12]
 801b3f0:	e7cb      	b.n	801b38a <__swbuf_r+0x1a>
 801b3f2:	4621      	mov	r1, r4
 801b3f4:	4628      	mov	r0, r5
 801b3f6:	f000 f81b 	bl	801b430 <__swsetup_r>
 801b3fa:	2800      	cmp	r0, #0
 801b3fc:	d0cc      	beq.n	801b398 <__swbuf_r+0x28>
 801b3fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b402:	4638      	mov	r0, r7
 801b404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b406:	bf00      	nop
 801b408:	08020968 	.word	0x08020968
 801b40c:	08020988 	.word	0x08020988
 801b410:	08020948 	.word	0x08020948

0801b414 <__ascii_wctomb>:
 801b414:	b149      	cbz	r1, 801b42a <__ascii_wctomb+0x16>
 801b416:	2aff      	cmp	r2, #255	; 0xff
 801b418:	bf85      	ittet	hi
 801b41a:	238a      	movhi	r3, #138	; 0x8a
 801b41c:	6003      	strhi	r3, [r0, #0]
 801b41e:	700a      	strbls	r2, [r1, #0]
 801b420:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b424:	bf98      	it	ls
 801b426:	2001      	movls	r0, #1
 801b428:	4770      	bx	lr
 801b42a:	4608      	mov	r0, r1
 801b42c:	4770      	bx	lr
	...

0801b430 <__swsetup_r>:
 801b430:	4b32      	ldr	r3, [pc, #200]	; (801b4fc <__swsetup_r+0xcc>)
 801b432:	b570      	push	{r4, r5, r6, lr}
 801b434:	681d      	ldr	r5, [r3, #0]
 801b436:	4606      	mov	r6, r0
 801b438:	460c      	mov	r4, r1
 801b43a:	b125      	cbz	r5, 801b446 <__swsetup_r+0x16>
 801b43c:	69ab      	ldr	r3, [r5, #24]
 801b43e:	b913      	cbnz	r3, 801b446 <__swsetup_r+0x16>
 801b440:	4628      	mov	r0, r5
 801b442:	f000 ff91 	bl	801c368 <__sinit>
 801b446:	4b2e      	ldr	r3, [pc, #184]	; (801b500 <__swsetup_r+0xd0>)
 801b448:	429c      	cmp	r4, r3
 801b44a:	d10f      	bne.n	801b46c <__swsetup_r+0x3c>
 801b44c:	686c      	ldr	r4, [r5, #4]
 801b44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b452:	b29a      	uxth	r2, r3
 801b454:	0715      	lsls	r5, r2, #28
 801b456:	d42c      	bmi.n	801b4b2 <__swsetup_r+0x82>
 801b458:	06d0      	lsls	r0, r2, #27
 801b45a:	d411      	bmi.n	801b480 <__swsetup_r+0x50>
 801b45c:	2209      	movs	r2, #9
 801b45e:	6032      	str	r2, [r6, #0]
 801b460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b464:	81a3      	strh	r3, [r4, #12]
 801b466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b46a:	e03e      	b.n	801b4ea <__swsetup_r+0xba>
 801b46c:	4b25      	ldr	r3, [pc, #148]	; (801b504 <__swsetup_r+0xd4>)
 801b46e:	429c      	cmp	r4, r3
 801b470:	d101      	bne.n	801b476 <__swsetup_r+0x46>
 801b472:	68ac      	ldr	r4, [r5, #8]
 801b474:	e7eb      	b.n	801b44e <__swsetup_r+0x1e>
 801b476:	4b24      	ldr	r3, [pc, #144]	; (801b508 <__swsetup_r+0xd8>)
 801b478:	429c      	cmp	r4, r3
 801b47a:	bf08      	it	eq
 801b47c:	68ec      	ldreq	r4, [r5, #12]
 801b47e:	e7e6      	b.n	801b44e <__swsetup_r+0x1e>
 801b480:	0751      	lsls	r1, r2, #29
 801b482:	d512      	bpl.n	801b4aa <__swsetup_r+0x7a>
 801b484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b486:	b141      	cbz	r1, 801b49a <__swsetup_r+0x6a>
 801b488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b48c:	4299      	cmp	r1, r3
 801b48e:	d002      	beq.n	801b496 <__swsetup_r+0x66>
 801b490:	4630      	mov	r0, r6
 801b492:	f001 fb57 	bl	801cb44 <_free_r>
 801b496:	2300      	movs	r3, #0
 801b498:	6363      	str	r3, [r4, #52]	; 0x34
 801b49a:	89a3      	ldrh	r3, [r4, #12]
 801b49c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b4a0:	81a3      	strh	r3, [r4, #12]
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	6063      	str	r3, [r4, #4]
 801b4a6:	6923      	ldr	r3, [r4, #16]
 801b4a8:	6023      	str	r3, [r4, #0]
 801b4aa:	89a3      	ldrh	r3, [r4, #12]
 801b4ac:	f043 0308 	orr.w	r3, r3, #8
 801b4b0:	81a3      	strh	r3, [r4, #12]
 801b4b2:	6923      	ldr	r3, [r4, #16]
 801b4b4:	b94b      	cbnz	r3, 801b4ca <__swsetup_r+0x9a>
 801b4b6:	89a3      	ldrh	r3, [r4, #12]
 801b4b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4c0:	d003      	beq.n	801b4ca <__swsetup_r+0x9a>
 801b4c2:	4621      	mov	r1, r4
 801b4c4:	4630      	mov	r0, r6
 801b4c6:	f001 f80b 	bl	801c4e0 <__smakebuf_r>
 801b4ca:	89a2      	ldrh	r2, [r4, #12]
 801b4cc:	f012 0301 	ands.w	r3, r2, #1
 801b4d0:	d00c      	beq.n	801b4ec <__swsetup_r+0xbc>
 801b4d2:	2300      	movs	r3, #0
 801b4d4:	60a3      	str	r3, [r4, #8]
 801b4d6:	6963      	ldr	r3, [r4, #20]
 801b4d8:	425b      	negs	r3, r3
 801b4da:	61a3      	str	r3, [r4, #24]
 801b4dc:	6923      	ldr	r3, [r4, #16]
 801b4de:	b953      	cbnz	r3, 801b4f6 <__swsetup_r+0xc6>
 801b4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b4e8:	d1ba      	bne.n	801b460 <__swsetup_r+0x30>
 801b4ea:	bd70      	pop	{r4, r5, r6, pc}
 801b4ec:	0792      	lsls	r2, r2, #30
 801b4ee:	bf58      	it	pl
 801b4f0:	6963      	ldrpl	r3, [r4, #20]
 801b4f2:	60a3      	str	r3, [r4, #8]
 801b4f4:	e7f2      	b.n	801b4dc <__swsetup_r+0xac>
 801b4f6:	2000      	movs	r0, #0
 801b4f8:	e7f7      	b.n	801b4ea <__swsetup_r+0xba>
 801b4fa:	bf00      	nop
 801b4fc:	2400003c 	.word	0x2400003c
 801b500:	08020968 	.word	0x08020968
 801b504:	08020988 	.word	0x08020988
 801b508:	08020948 	.word	0x08020948

0801b50c <__register_exitproc>:
 801b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b510:	4d2c      	ldr	r5, [pc, #176]	; (801b5c4 <__register_exitproc+0xb8>)
 801b512:	682c      	ldr	r4, [r5, #0]
 801b514:	4607      	mov	r7, r0
 801b516:	460e      	mov	r6, r1
 801b518:	4691      	mov	r9, r2
 801b51a:	4698      	mov	r8, r3
 801b51c:	b934      	cbnz	r4, 801b52c <__register_exitproc+0x20>
 801b51e:	4b2a      	ldr	r3, [pc, #168]	; (801b5c8 <__register_exitproc+0xbc>)
 801b520:	4c2a      	ldr	r4, [pc, #168]	; (801b5cc <__register_exitproc+0xc0>)
 801b522:	602c      	str	r4, [r5, #0]
 801b524:	b113      	cbz	r3, 801b52c <__register_exitproc+0x20>
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801b52c:	6863      	ldr	r3, [r4, #4]
 801b52e:	2b1f      	cmp	r3, #31
 801b530:	dd3d      	ble.n	801b5ae <__register_exitproc+0xa2>
 801b532:	4b27      	ldr	r3, [pc, #156]	; (801b5d0 <__register_exitproc+0xc4>)
 801b534:	b91b      	cbnz	r3, 801b53e <__register_exitproc+0x32>
 801b536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b53e:	208c      	movs	r0, #140	; 0x8c
 801b540:	f001 f80e 	bl	801c560 <malloc>
 801b544:	4604      	mov	r4, r0
 801b546:	2800      	cmp	r0, #0
 801b548:	d0f5      	beq.n	801b536 <__register_exitproc+0x2a>
 801b54a:	2300      	movs	r3, #0
 801b54c:	682a      	ldr	r2, [r5, #0]
 801b54e:	6002      	str	r2, [r0, #0]
 801b550:	6043      	str	r3, [r0, #4]
 801b552:	6028      	str	r0, [r5, #0]
 801b554:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801b558:	b30f      	cbz	r7, 801b59e <__register_exitproc+0x92>
 801b55a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801b55e:	f000 ffff 	bl	801c560 <malloc>
 801b562:	2800      	cmp	r0, #0
 801b564:	d0e7      	beq.n	801b536 <__register_exitproc+0x2a>
 801b566:	2300      	movs	r3, #0
 801b568:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801b56c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801b570:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801b574:	6862      	ldr	r2, [r4, #4]
 801b576:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801b57a:	2301      	movs	r3, #1
 801b57c:	4093      	lsls	r3, r2
 801b57e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801b582:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801b586:	431a      	orrs	r2, r3
 801b588:	2f02      	cmp	r7, #2
 801b58a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801b58e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801b592:	bf02      	ittt	eq
 801b594:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801b598:	4313      	orreq	r3, r2
 801b59a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801b59e:	6863      	ldr	r3, [r4, #4]
 801b5a0:	1c5a      	adds	r2, r3, #1
 801b5a2:	3302      	adds	r3, #2
 801b5a4:	6062      	str	r2, [r4, #4]
 801b5a6:	2000      	movs	r0, #0
 801b5a8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801b5ac:	e7c5      	b.n	801b53a <__register_exitproc+0x2e>
 801b5ae:	2f00      	cmp	r7, #0
 801b5b0:	d0f5      	beq.n	801b59e <__register_exitproc+0x92>
 801b5b2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801b5b6:	2800      	cmp	r0, #0
 801b5b8:	d1dc      	bne.n	801b574 <__register_exitproc+0x68>
 801b5ba:	4b05      	ldr	r3, [pc, #20]	; (801b5d0 <__register_exitproc+0xc4>)
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d0ba      	beq.n	801b536 <__register_exitproc+0x2a>
 801b5c0:	e7cb      	b.n	801b55a <__register_exitproc+0x4e>
 801b5c2:	bf00      	nop
 801b5c4:	24004b6c 	.word	0x24004b6c
 801b5c8:	00000000 	.word	0x00000000
 801b5cc:	24004ae0 	.word	0x24004ae0
 801b5d0:	0801c561 	.word	0x0801c561

0801b5d4 <quorem>:
 801b5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d8:	6903      	ldr	r3, [r0, #16]
 801b5da:	690c      	ldr	r4, [r1, #16]
 801b5dc:	42a3      	cmp	r3, r4
 801b5de:	4680      	mov	r8, r0
 801b5e0:	f2c0 8082 	blt.w	801b6e8 <quorem+0x114>
 801b5e4:	3c01      	subs	r4, #1
 801b5e6:	f101 0714 	add.w	r7, r1, #20
 801b5ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801b5ee:	f100 0614 	add.w	r6, r0, #20
 801b5f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801b5f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801b5fa:	eb06 030c 	add.w	r3, r6, ip
 801b5fe:	3501      	adds	r5, #1
 801b600:	eb07 090c 	add.w	r9, r7, ip
 801b604:	9301      	str	r3, [sp, #4]
 801b606:	fbb0 f5f5 	udiv	r5, r0, r5
 801b60a:	b395      	cbz	r5, 801b672 <quorem+0x9e>
 801b60c:	f04f 0a00 	mov.w	sl, #0
 801b610:	4638      	mov	r0, r7
 801b612:	46b6      	mov	lr, r6
 801b614:	46d3      	mov	fp, sl
 801b616:	f850 2b04 	ldr.w	r2, [r0], #4
 801b61a:	b293      	uxth	r3, r2
 801b61c:	fb05 a303 	mla	r3, r5, r3, sl
 801b620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b624:	b29b      	uxth	r3, r3
 801b626:	ebab 0303 	sub.w	r3, fp, r3
 801b62a:	0c12      	lsrs	r2, r2, #16
 801b62c:	f8de b000 	ldr.w	fp, [lr]
 801b630:	fb05 a202 	mla	r2, r5, r2, sl
 801b634:	fa13 f38b 	uxtah	r3, r3, fp
 801b638:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801b63c:	fa1f fb82 	uxth.w	fp, r2
 801b640:	f8de 2000 	ldr.w	r2, [lr]
 801b644:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801b648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b64c:	b29b      	uxth	r3, r3
 801b64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b652:	4581      	cmp	r9, r0
 801b654:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801b658:	f84e 3b04 	str.w	r3, [lr], #4
 801b65c:	d2db      	bcs.n	801b616 <quorem+0x42>
 801b65e:	f856 300c 	ldr.w	r3, [r6, ip]
 801b662:	b933      	cbnz	r3, 801b672 <quorem+0x9e>
 801b664:	9b01      	ldr	r3, [sp, #4]
 801b666:	3b04      	subs	r3, #4
 801b668:	429e      	cmp	r6, r3
 801b66a:	461a      	mov	r2, r3
 801b66c:	d330      	bcc.n	801b6d0 <quorem+0xfc>
 801b66e:	f8c8 4010 	str.w	r4, [r8, #16]
 801b672:	4640      	mov	r0, r8
 801b674:	f001 f992 	bl	801c99c <__mcmp>
 801b678:	2800      	cmp	r0, #0
 801b67a:	db25      	blt.n	801b6c8 <quorem+0xf4>
 801b67c:	3501      	adds	r5, #1
 801b67e:	4630      	mov	r0, r6
 801b680:	f04f 0c00 	mov.w	ip, #0
 801b684:	f857 2b04 	ldr.w	r2, [r7], #4
 801b688:	f8d0 e000 	ldr.w	lr, [r0]
 801b68c:	b293      	uxth	r3, r2
 801b68e:	ebac 0303 	sub.w	r3, ip, r3
 801b692:	0c12      	lsrs	r2, r2, #16
 801b694:	fa13 f38e 	uxtah	r3, r3, lr
 801b698:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b6a0:	b29b      	uxth	r3, r3
 801b6a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b6a6:	45b9      	cmp	r9, r7
 801b6a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b6ac:	f840 3b04 	str.w	r3, [r0], #4
 801b6b0:	d2e8      	bcs.n	801b684 <quorem+0xb0>
 801b6b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801b6b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b6ba:	b92a      	cbnz	r2, 801b6c8 <quorem+0xf4>
 801b6bc:	3b04      	subs	r3, #4
 801b6be:	429e      	cmp	r6, r3
 801b6c0:	461a      	mov	r2, r3
 801b6c2:	d30b      	bcc.n	801b6dc <quorem+0x108>
 801b6c4:	f8c8 4010 	str.w	r4, [r8, #16]
 801b6c8:	4628      	mov	r0, r5
 801b6ca:	b003      	add	sp, #12
 801b6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6d0:	6812      	ldr	r2, [r2, #0]
 801b6d2:	3b04      	subs	r3, #4
 801b6d4:	2a00      	cmp	r2, #0
 801b6d6:	d1ca      	bne.n	801b66e <quorem+0x9a>
 801b6d8:	3c01      	subs	r4, #1
 801b6da:	e7c5      	b.n	801b668 <quorem+0x94>
 801b6dc:	6812      	ldr	r2, [r2, #0]
 801b6de:	3b04      	subs	r3, #4
 801b6e0:	2a00      	cmp	r2, #0
 801b6e2:	d1ef      	bne.n	801b6c4 <quorem+0xf0>
 801b6e4:	3c01      	subs	r4, #1
 801b6e6:	e7ea      	b.n	801b6be <quorem+0xea>
 801b6e8:	2000      	movs	r0, #0
 801b6ea:	e7ee      	b.n	801b6ca <quorem+0xf6>
 801b6ec:	0000      	movs	r0, r0
	...

0801b6f0 <_dtoa_r>:
 801b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f4:	ec57 6b10 	vmov	r6, r7, d0
 801b6f8:	b095      	sub	sp, #84	; 0x54
 801b6fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b6fc:	9108      	str	r1, [sp, #32]
 801b6fe:	4604      	mov	r4, r0
 801b700:	920a      	str	r2, [sp, #40]	; 0x28
 801b702:	9311      	str	r3, [sp, #68]	; 0x44
 801b704:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801b708:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b70c:	b93d      	cbnz	r5, 801b71e <_dtoa_r+0x2e>
 801b70e:	2010      	movs	r0, #16
 801b710:	f000 ff26 	bl	801c560 <malloc>
 801b714:	6260      	str	r0, [r4, #36]	; 0x24
 801b716:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b71a:	6005      	str	r5, [r0, #0]
 801b71c:	60c5      	str	r5, [r0, #12]
 801b71e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b720:	6819      	ldr	r1, [r3, #0]
 801b722:	b151      	cbz	r1, 801b73a <_dtoa_r+0x4a>
 801b724:	685a      	ldr	r2, [r3, #4]
 801b726:	604a      	str	r2, [r1, #4]
 801b728:	2301      	movs	r3, #1
 801b72a:	4093      	lsls	r3, r2
 801b72c:	608b      	str	r3, [r1, #8]
 801b72e:	4620      	mov	r0, r4
 801b730:	f000 ff52 	bl	801c5d8 <_Bfree>
 801b734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b736:	2200      	movs	r2, #0
 801b738:	601a      	str	r2, [r3, #0]
 801b73a:	1e3b      	subs	r3, r7, #0
 801b73c:	bfb9      	ittee	lt
 801b73e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b742:	9303      	strlt	r3, [sp, #12]
 801b744:	2300      	movge	r3, #0
 801b746:	f8c8 3000 	strge.w	r3, [r8]
 801b74a:	9d03      	ldr	r5, [sp, #12]
 801b74c:	4bac      	ldr	r3, [pc, #688]	; (801ba00 <_dtoa_r+0x310>)
 801b74e:	bfbc      	itt	lt
 801b750:	2201      	movlt	r2, #1
 801b752:	f8c8 2000 	strlt.w	r2, [r8]
 801b756:	43ab      	bics	r3, r5
 801b758:	d11b      	bne.n	801b792 <_dtoa_r+0xa2>
 801b75a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b75c:	f242 730f 	movw	r3, #9999	; 0x270f
 801b760:	6013      	str	r3, [r2, #0]
 801b762:	9b02      	ldr	r3, [sp, #8]
 801b764:	b923      	cbnz	r3, 801b770 <_dtoa_r+0x80>
 801b766:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b76a:	2d00      	cmp	r5, #0
 801b76c:	f000 84dd 	beq.w	801c12a <_dtoa_r+0xa3a>
 801b770:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b772:	b953      	cbnz	r3, 801b78a <_dtoa_r+0x9a>
 801b774:	4ba3      	ldr	r3, [pc, #652]	; (801ba04 <_dtoa_r+0x314>)
 801b776:	e020      	b.n	801b7ba <_dtoa_r+0xca>
 801b778:	4ba3      	ldr	r3, [pc, #652]	; (801ba08 <_dtoa_r+0x318>)
 801b77a:	9304      	str	r3, [sp, #16]
 801b77c:	3308      	adds	r3, #8
 801b77e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b780:	6013      	str	r3, [r2, #0]
 801b782:	9804      	ldr	r0, [sp, #16]
 801b784:	b015      	add	sp, #84	; 0x54
 801b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b78a:	4b9e      	ldr	r3, [pc, #632]	; (801ba04 <_dtoa_r+0x314>)
 801b78c:	9304      	str	r3, [sp, #16]
 801b78e:	3303      	adds	r3, #3
 801b790:	e7f5      	b.n	801b77e <_dtoa_r+0x8e>
 801b792:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b796:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b79e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b7a2:	d10c      	bne.n	801b7be <_dtoa_r+0xce>
 801b7a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7a6:	2301      	movs	r3, #1
 801b7a8:	6013      	str	r3, [r2, #0]
 801b7aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	f000 84b9 	beq.w	801c124 <_dtoa_r+0xa34>
 801b7b2:	4b96      	ldr	r3, [pc, #600]	; (801ba0c <_dtoa_r+0x31c>)
 801b7b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b7b6:	6013      	str	r3, [r2, #0]
 801b7b8:	3b01      	subs	r3, #1
 801b7ba:	9304      	str	r3, [sp, #16]
 801b7bc:	e7e1      	b.n	801b782 <_dtoa_r+0x92>
 801b7be:	a913      	add	r1, sp, #76	; 0x4c
 801b7c0:	aa12      	add	r2, sp, #72	; 0x48
 801b7c2:	ed9d 0b04 	vldr	d0, [sp, #16]
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	f001 f95f 	bl	801ca8a <__d2b>
 801b7cc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801b7d0:	9001      	str	r0, [sp, #4]
 801b7d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b7d4:	2e00      	cmp	r6, #0
 801b7d6:	d046      	beq.n	801b866 <_dtoa_r+0x176>
 801b7d8:	9805      	ldr	r0, [sp, #20]
 801b7da:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801b7de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b7e2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801b7e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b7ea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801b7ee:	2700      	movs	r7, #0
 801b7f0:	ee07 aa90 	vmov	s15, sl
 801b7f4:	ec43 2b16 	vmov	d6, r2, r3
 801b7f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801b7fc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801b9e8 <_dtoa_r+0x2f8>
 801b800:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801b804:	ee36 7b47 	vsub.f64	d7, d6, d7
 801b808:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801b9f0 <_dtoa_r+0x300>
 801b80c:	eea7 6b04 	vfma.f64	d6, d7, d4
 801b810:	eeb0 7b46 	vmov.f64	d7, d6
 801b814:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801b9f8 <_dtoa_r+0x308>
 801b818:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b81c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b820:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b828:	ee16 ba90 	vmov	fp, s13
 801b82c:	d508      	bpl.n	801b840 <_dtoa_r+0x150>
 801b82e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b832:	eeb4 6b47 	vcmp.f64	d6, d7
 801b836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b83a:	bf18      	it	ne
 801b83c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801b840:	f1bb 0f16 	cmp.w	fp, #22
 801b844:	d834      	bhi.n	801b8b0 <_dtoa_r+0x1c0>
 801b846:	4b72      	ldr	r3, [pc, #456]	; (801ba10 <_dtoa_r+0x320>)
 801b848:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b84c:	ed93 7b00 	vldr	d7, [r3]
 801b850:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b854:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b85c:	dd01      	ble.n	801b862 <_dtoa_r+0x172>
 801b85e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b862:	2300      	movs	r3, #0
 801b864:	e025      	b.n	801b8b2 <_dtoa_r+0x1c2>
 801b866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b868:	eb01 0a03 	add.w	sl, r1, r3
 801b86c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801b870:	2b20      	cmp	r3, #32
 801b872:	dd17      	ble.n	801b8a4 <_dtoa_r+0x1b4>
 801b874:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801b878:	9a02      	ldr	r2, [sp, #8]
 801b87a:	409d      	lsls	r5, r3
 801b87c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801b880:	fa22 f303 	lsr.w	r3, r2, r3
 801b884:	432b      	orrs	r3, r5
 801b886:	ee07 3a90 	vmov	s15, r3
 801b88a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b88e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b892:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b896:	9805      	ldr	r0, [sp, #20]
 801b898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b89c:	2701      	movs	r7, #1
 801b89e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801b8a2:	e7a5      	b.n	801b7f0 <_dtoa_r+0x100>
 801b8a4:	9a02      	ldr	r2, [sp, #8]
 801b8a6:	f1c3 0320 	rsb	r3, r3, #32
 801b8aa:	fa02 f303 	lsl.w	r3, r2, r3
 801b8ae:	e7ea      	b.n	801b886 <_dtoa_r+0x196>
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	eba1 0a0a 	sub.w	sl, r1, sl
 801b8b6:	9310      	str	r3, [sp, #64]	; 0x40
 801b8b8:	f1ba 0301 	subs.w	r3, sl, #1
 801b8bc:	9307      	str	r3, [sp, #28]
 801b8be:	bf43      	ittte	mi
 801b8c0:	2300      	movmi	r3, #0
 801b8c2:	f1ca 0a01 	rsbmi	sl, sl, #1
 801b8c6:	9307      	strmi	r3, [sp, #28]
 801b8c8:	f04f 0a00 	movpl.w	sl, #0
 801b8cc:	f1bb 0f00 	cmp.w	fp, #0
 801b8d0:	db19      	blt.n	801b906 <_dtoa_r+0x216>
 801b8d2:	9b07      	ldr	r3, [sp, #28]
 801b8d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801b8d8:	445b      	add	r3, fp
 801b8da:	9307      	str	r3, [sp, #28]
 801b8dc:	f04f 0800 	mov.w	r8, #0
 801b8e0:	9b08      	ldr	r3, [sp, #32]
 801b8e2:	2b09      	cmp	r3, #9
 801b8e4:	d866      	bhi.n	801b9b4 <_dtoa_r+0x2c4>
 801b8e6:	2b05      	cmp	r3, #5
 801b8e8:	bfc4      	itt	gt
 801b8ea:	3b04      	subgt	r3, #4
 801b8ec:	9308      	strgt	r3, [sp, #32]
 801b8ee:	9b08      	ldr	r3, [sp, #32]
 801b8f0:	f1a3 0302 	sub.w	r3, r3, #2
 801b8f4:	bfcc      	ite	gt
 801b8f6:	2500      	movgt	r5, #0
 801b8f8:	2501      	movle	r5, #1
 801b8fa:	2b03      	cmp	r3, #3
 801b8fc:	d866      	bhi.n	801b9cc <_dtoa_r+0x2dc>
 801b8fe:	e8df f003 	tbb	[pc, r3]
 801b902:	5755      	.short	0x5755
 801b904:	4909      	.short	0x4909
 801b906:	2300      	movs	r3, #0
 801b908:	ebaa 0a0b 	sub.w	sl, sl, fp
 801b90c:	f1cb 0800 	rsb	r8, fp, #0
 801b910:	930b      	str	r3, [sp, #44]	; 0x2c
 801b912:	e7e5      	b.n	801b8e0 <_dtoa_r+0x1f0>
 801b914:	2301      	movs	r3, #1
 801b916:	9309      	str	r3, [sp, #36]	; 0x24
 801b918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	dd59      	ble.n	801b9d2 <_dtoa_r+0x2e2>
 801b91e:	9306      	str	r3, [sp, #24]
 801b920:	4699      	mov	r9, r3
 801b922:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b924:	2200      	movs	r2, #0
 801b926:	6072      	str	r2, [r6, #4]
 801b928:	2204      	movs	r2, #4
 801b92a:	f102 0014 	add.w	r0, r2, #20
 801b92e:	4298      	cmp	r0, r3
 801b930:	6871      	ldr	r1, [r6, #4]
 801b932:	d953      	bls.n	801b9dc <_dtoa_r+0x2ec>
 801b934:	4620      	mov	r0, r4
 801b936:	f000 fe1b 	bl	801c570 <_Balloc>
 801b93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b93c:	6030      	str	r0, [r6, #0]
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	9304      	str	r3, [sp, #16]
 801b942:	f1b9 0f0e 	cmp.w	r9, #14
 801b946:	f200 80c2 	bhi.w	801bace <_dtoa_r+0x3de>
 801b94a:	2d00      	cmp	r5, #0
 801b94c:	f000 80bf 	beq.w	801bace <_dtoa_r+0x3de>
 801b950:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b954:	f1bb 0f00 	cmp.w	fp, #0
 801b958:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801b95c:	f340 80e6 	ble.w	801bb2c <_dtoa_r+0x43c>
 801b960:	4a2b      	ldr	r2, [pc, #172]	; (801ba10 <_dtoa_r+0x320>)
 801b962:	f00b 030f 	and.w	r3, fp, #15
 801b966:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b96a:	ed93 7b00 	vldr	d7, [r3]
 801b96e:	ea4f 132b 	mov.w	r3, fp, asr #4
 801b972:	06da      	lsls	r2, r3, #27
 801b974:	f140 80d8 	bpl.w	801bb28 <_dtoa_r+0x438>
 801b978:	4a26      	ldr	r2, [pc, #152]	; (801ba14 <_dtoa_r+0x324>)
 801b97a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801b97e:	ed92 6b08 	vldr	d6, [r2, #32]
 801b982:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801b986:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b98a:	f003 030f 	and.w	r3, r3, #15
 801b98e:	2203      	movs	r2, #3
 801b990:	4920      	ldr	r1, [pc, #128]	; (801ba14 <_dtoa_r+0x324>)
 801b992:	e04a      	b.n	801ba2a <_dtoa_r+0x33a>
 801b994:	2301      	movs	r3, #1
 801b996:	9309      	str	r3, [sp, #36]	; 0x24
 801b998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b99a:	445b      	add	r3, fp
 801b99c:	f103 0901 	add.w	r9, r3, #1
 801b9a0:	9306      	str	r3, [sp, #24]
 801b9a2:	464b      	mov	r3, r9
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	bfb8      	it	lt
 801b9a8:	2301      	movlt	r3, #1
 801b9aa:	e7ba      	b.n	801b922 <_dtoa_r+0x232>
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	e7b2      	b.n	801b916 <_dtoa_r+0x226>
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	e7f0      	b.n	801b996 <_dtoa_r+0x2a6>
 801b9b4:	2501      	movs	r5, #1
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801b9bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b9c0:	9306      	str	r3, [sp, #24]
 801b9c2:	4699      	mov	r9, r3
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	2312      	movs	r3, #18
 801b9c8:	920a      	str	r2, [sp, #40]	; 0x28
 801b9ca:	e7aa      	b.n	801b922 <_dtoa_r+0x232>
 801b9cc:	2301      	movs	r3, #1
 801b9ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b9d0:	e7f4      	b.n	801b9bc <_dtoa_r+0x2cc>
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	9306      	str	r3, [sp, #24]
 801b9d6:	4699      	mov	r9, r3
 801b9d8:	461a      	mov	r2, r3
 801b9da:	e7f5      	b.n	801b9c8 <_dtoa_r+0x2d8>
 801b9dc:	3101      	adds	r1, #1
 801b9de:	6071      	str	r1, [r6, #4]
 801b9e0:	0052      	lsls	r2, r2, #1
 801b9e2:	e7a2      	b.n	801b92a <_dtoa_r+0x23a>
 801b9e4:	f3af 8000 	nop.w
 801b9e8:	636f4361 	.word	0x636f4361
 801b9ec:	3fd287a7 	.word	0x3fd287a7
 801b9f0:	8b60c8b3 	.word	0x8b60c8b3
 801b9f4:	3fc68a28 	.word	0x3fc68a28
 801b9f8:	509f79fb 	.word	0x509f79fb
 801b9fc:	3fd34413 	.word	0x3fd34413
 801ba00:	7ff00000 	.word	0x7ff00000
 801ba04:	08020944 	.word	0x08020944
 801ba08:	0802093b 	.word	0x0802093b
 801ba0c:	08020817 	.word	0x08020817
 801ba10:	080209d0 	.word	0x080209d0
 801ba14:	080209a8 	.word	0x080209a8
 801ba18:	07de      	lsls	r6, r3, #31
 801ba1a:	d504      	bpl.n	801ba26 <_dtoa_r+0x336>
 801ba1c:	ed91 6b00 	vldr	d6, [r1]
 801ba20:	3201      	adds	r2, #1
 801ba22:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba26:	105b      	asrs	r3, r3, #1
 801ba28:	3108      	adds	r1, #8
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d1f4      	bne.n	801ba18 <_dtoa_r+0x328>
 801ba2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ba32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ba36:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ba3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	f000 80a7 	beq.w	801bb90 <_dtoa_r+0x4a0>
 801ba42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ba46:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba52:	f140 809d 	bpl.w	801bb90 <_dtoa_r+0x4a0>
 801ba56:	f1b9 0f00 	cmp.w	r9, #0
 801ba5a:	f000 8099 	beq.w	801bb90 <_dtoa_r+0x4a0>
 801ba5e:	9b06      	ldr	r3, [sp, #24]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	dd30      	ble.n	801bac6 <_dtoa_r+0x3d6>
 801ba64:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ba68:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ba70:	9d06      	ldr	r5, [sp, #24]
 801ba72:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801ba76:	3201      	adds	r2, #1
 801ba78:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ba7c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801ba80:	ee07 2a90 	vmov	s15, r2
 801ba84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ba88:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ba8c:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ba90:	9a03      	ldr	r2, [sp, #12]
 801ba92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba96:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801ba9a:	2d00      	cmp	r5, #0
 801ba9c:	d17b      	bne.n	801bb96 <_dtoa_r+0x4a6>
 801ba9e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801baa2:	ee36 6b47 	vsub.f64	d6, d6, d7
 801baa6:	ec41 0b17 	vmov	d7, r0, r1
 801baaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801baae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bab2:	f300 8253 	bgt.w	801bf5c <_dtoa_r+0x86c>
 801bab6:	eeb1 7b47 	vneg.f64	d7, d7
 801baba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bac2:	f100 8249 	bmi.w	801bf58 <_dtoa_r+0x868>
 801bac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801baca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f2c0 8119 	blt.w	801bd08 <_dtoa_r+0x618>
 801bad6:	f1bb 0f0e 	cmp.w	fp, #14
 801bada:	f300 8115 	bgt.w	801bd08 <_dtoa_r+0x618>
 801bade:	4bc3      	ldr	r3, [pc, #780]	; (801bdec <_dtoa_r+0x6fc>)
 801bae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bae4:	ed93 6b00 	vldr	d6, [r3]
 801bae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801baea:	2b00      	cmp	r3, #0
 801baec:	f280 80ba 	bge.w	801bc64 <_dtoa_r+0x574>
 801baf0:	f1b9 0f00 	cmp.w	r9, #0
 801baf4:	f300 80b6 	bgt.w	801bc64 <_dtoa_r+0x574>
 801baf8:	f040 822d 	bne.w	801bf56 <_dtoa_r+0x866>
 801bafc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bb00:	ee26 6b07 	vmul.f64	d6, d6, d7
 801bb04:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb10:	464d      	mov	r5, r9
 801bb12:	464f      	mov	r7, r9
 801bb14:	f280 8204 	bge.w	801bf20 <_dtoa_r+0x830>
 801bb18:	9b04      	ldr	r3, [sp, #16]
 801bb1a:	9a04      	ldr	r2, [sp, #16]
 801bb1c:	1c5e      	adds	r6, r3, #1
 801bb1e:	2331      	movs	r3, #49	; 0x31
 801bb20:	7013      	strb	r3, [r2, #0]
 801bb22:	f10b 0b01 	add.w	fp, fp, #1
 801bb26:	e1ff      	b.n	801bf28 <_dtoa_r+0x838>
 801bb28:	2202      	movs	r2, #2
 801bb2a:	e731      	b.n	801b990 <_dtoa_r+0x2a0>
 801bb2c:	d02e      	beq.n	801bb8c <_dtoa_r+0x49c>
 801bb2e:	f1cb 0300 	rsb	r3, fp, #0
 801bb32:	4aae      	ldr	r2, [pc, #696]	; (801bdec <_dtoa_r+0x6fc>)
 801bb34:	f003 010f 	and.w	r1, r3, #15
 801bb38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801bb3c:	ed92 7b00 	vldr	d7, [r2]
 801bb40:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801bb44:	ee26 7b07 	vmul.f64	d7, d6, d7
 801bb48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bb4c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801bb50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801bb54:	49a6      	ldr	r1, [pc, #664]	; (801bdf0 <_dtoa_r+0x700>)
 801bb56:	111b      	asrs	r3, r3, #4
 801bb58:	2000      	movs	r0, #0
 801bb5a:	2202      	movs	r2, #2
 801bb5c:	b93b      	cbnz	r3, 801bb6e <_dtoa_r+0x47e>
 801bb5e:	2800      	cmp	r0, #0
 801bb60:	f43f af6b 	beq.w	801ba3a <_dtoa_r+0x34a>
 801bb64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bb68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb6c:	e765      	b.n	801ba3a <_dtoa_r+0x34a>
 801bb6e:	07dd      	lsls	r5, r3, #31
 801bb70:	d509      	bpl.n	801bb86 <_dtoa_r+0x496>
 801bb72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801bb76:	ed91 7b00 	vldr	d7, [r1]
 801bb7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801bb7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bb82:	3201      	adds	r2, #1
 801bb84:	2001      	movs	r0, #1
 801bb86:	105b      	asrs	r3, r3, #1
 801bb88:	3108      	adds	r1, #8
 801bb8a:	e7e7      	b.n	801bb5c <_dtoa_r+0x46c>
 801bb8c:	2202      	movs	r2, #2
 801bb8e:	e754      	b.n	801ba3a <_dtoa_r+0x34a>
 801bb90:	465b      	mov	r3, fp
 801bb92:	464d      	mov	r5, r9
 801bb94:	e770      	b.n	801ba78 <_dtoa_r+0x388>
 801bb96:	4a95      	ldr	r2, [pc, #596]	; (801bdec <_dtoa_r+0x6fc>)
 801bb98:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801bb9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801bba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bba2:	ec41 0b17 	vmov	d7, r0, r1
 801bba6:	b35a      	cbz	r2, 801bc00 <_dtoa_r+0x510>
 801bba8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801bbac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bbb0:	9e04      	ldr	r6, [sp, #16]
 801bbb2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bbb6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bbba:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bbbe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bbc2:	ee14 2a90 	vmov	r2, s9
 801bbc6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bbca:	3230      	adds	r2, #48	; 0x30
 801bbcc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bbd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbd8:	f806 2b01 	strb.w	r2, [r6], #1
 801bbdc:	d43b      	bmi.n	801bc56 <_dtoa_r+0x566>
 801bbde:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bbe2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbea:	d472      	bmi.n	801bcd2 <_dtoa_r+0x5e2>
 801bbec:	9a04      	ldr	r2, [sp, #16]
 801bbee:	1ab2      	subs	r2, r6, r2
 801bbf0:	4295      	cmp	r5, r2
 801bbf2:	f77f af68 	ble.w	801bac6 <_dtoa_r+0x3d6>
 801bbf6:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bbfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bbfe:	e7de      	b.n	801bbbe <_dtoa_r+0x4ce>
 801bc00:	9a04      	ldr	r2, [sp, #16]
 801bc02:	ee24 7b07 	vmul.f64	d7, d4, d7
 801bc06:	1956      	adds	r6, r2, r5
 801bc08:	4611      	mov	r1, r2
 801bc0a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bc0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bc12:	ee14 2a90 	vmov	r2, s9
 801bc16:	3230      	adds	r2, #48	; 0x30
 801bc18:	f801 2b01 	strb.w	r2, [r1], #1
 801bc1c:	42b1      	cmp	r1, r6
 801bc1e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bc22:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bc26:	d11a      	bne.n	801bc5e <_dtoa_r+0x56e>
 801bc28:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bc2c:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bc30:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc38:	dc4b      	bgt.n	801bcd2 <_dtoa_r+0x5e2>
 801bc3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bc3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc46:	f57f af3e 	bpl.w	801bac6 <_dtoa_r+0x3d6>
 801bc4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801bc4e:	2a30      	cmp	r2, #48	; 0x30
 801bc50:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 801bc54:	d001      	beq.n	801bc5a <_dtoa_r+0x56a>
 801bc56:	469b      	mov	fp, r3
 801bc58:	e02a      	b.n	801bcb0 <_dtoa_r+0x5c0>
 801bc5a:	460e      	mov	r6, r1
 801bc5c:	e7f5      	b.n	801bc4a <_dtoa_r+0x55a>
 801bc5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bc62:	e7d4      	b.n	801bc0e <_dtoa_r+0x51e>
 801bc64:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc68:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bc6c:	9e04      	ldr	r6, [sp, #16]
 801bc6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bc72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bc76:	ee15 3a10 	vmov	r3, s10
 801bc7a:	3330      	adds	r3, #48	; 0x30
 801bc7c:	f806 3b01 	strb.w	r3, [r6], #1
 801bc80:	9b04      	ldr	r3, [sp, #16]
 801bc82:	1af3      	subs	r3, r6, r3
 801bc84:	4599      	cmp	r9, r3
 801bc86:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bc8a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bc8e:	d133      	bne.n	801bcf8 <_dtoa_r+0x608>
 801bc90:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bc94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc9c:	dc18      	bgt.n	801bcd0 <_dtoa_r+0x5e0>
 801bc9e:	eeb4 7b46 	vcmp.f64	d7, d6
 801bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca6:	d103      	bne.n	801bcb0 <_dtoa_r+0x5c0>
 801bca8:	ee15 3a10 	vmov	r3, s10
 801bcac:	07db      	lsls	r3, r3, #31
 801bcae:	d40f      	bmi.n	801bcd0 <_dtoa_r+0x5e0>
 801bcb0:	9901      	ldr	r1, [sp, #4]
 801bcb2:	4620      	mov	r0, r4
 801bcb4:	f000 fc90 	bl	801c5d8 <_Bfree>
 801bcb8:	2300      	movs	r3, #0
 801bcba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bcbc:	7033      	strb	r3, [r6, #0]
 801bcbe:	f10b 0301 	add.w	r3, fp, #1
 801bcc2:	6013      	str	r3, [r2, #0]
 801bcc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	f43f ad5b 	beq.w	801b782 <_dtoa_r+0x92>
 801bccc:	601e      	str	r6, [r3, #0]
 801bcce:	e558      	b.n	801b782 <_dtoa_r+0x92>
 801bcd0:	465b      	mov	r3, fp
 801bcd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bcd6:	2939      	cmp	r1, #57	; 0x39
 801bcd8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801bcdc:	d106      	bne.n	801bcec <_dtoa_r+0x5fc>
 801bcde:	9904      	ldr	r1, [sp, #16]
 801bce0:	4291      	cmp	r1, r2
 801bce2:	d107      	bne.n	801bcf4 <_dtoa_r+0x604>
 801bce4:	2230      	movs	r2, #48	; 0x30
 801bce6:	700a      	strb	r2, [r1, #0]
 801bce8:	3301      	adds	r3, #1
 801bcea:	460a      	mov	r2, r1
 801bcec:	7811      	ldrb	r1, [r2, #0]
 801bcee:	3101      	adds	r1, #1
 801bcf0:	7011      	strb	r1, [r2, #0]
 801bcf2:	e7b0      	b.n	801bc56 <_dtoa_r+0x566>
 801bcf4:	4616      	mov	r6, r2
 801bcf6:	e7ec      	b.n	801bcd2 <_dtoa_r+0x5e2>
 801bcf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bcfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd04:	d1b3      	bne.n	801bc6e <_dtoa_r+0x57e>
 801bd06:	e7d3      	b.n	801bcb0 <_dtoa_r+0x5c0>
 801bd08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd0a:	2a00      	cmp	r2, #0
 801bd0c:	f000 808d 	beq.w	801be2a <_dtoa_r+0x73a>
 801bd10:	9a08      	ldr	r2, [sp, #32]
 801bd12:	2a01      	cmp	r2, #1
 801bd14:	dc72      	bgt.n	801bdfc <_dtoa_r+0x70c>
 801bd16:	2f00      	cmp	r7, #0
 801bd18:	d06c      	beq.n	801bdf4 <_dtoa_r+0x704>
 801bd1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bd1e:	4645      	mov	r5, r8
 801bd20:	4656      	mov	r6, sl
 801bd22:	9a07      	ldr	r2, [sp, #28]
 801bd24:	2101      	movs	r1, #1
 801bd26:	441a      	add	r2, r3
 801bd28:	4620      	mov	r0, r4
 801bd2a:	449a      	add	sl, r3
 801bd2c:	9207      	str	r2, [sp, #28]
 801bd2e:	f000 fcf3 	bl	801c718 <__i2b>
 801bd32:	4607      	mov	r7, r0
 801bd34:	2e00      	cmp	r6, #0
 801bd36:	dd0b      	ble.n	801bd50 <_dtoa_r+0x660>
 801bd38:	9b07      	ldr	r3, [sp, #28]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	dd08      	ble.n	801bd50 <_dtoa_r+0x660>
 801bd3e:	42b3      	cmp	r3, r6
 801bd40:	9a07      	ldr	r2, [sp, #28]
 801bd42:	bfa8      	it	ge
 801bd44:	4633      	movge	r3, r6
 801bd46:	ebaa 0a03 	sub.w	sl, sl, r3
 801bd4a:	1af6      	subs	r6, r6, r3
 801bd4c:	1ad3      	subs	r3, r2, r3
 801bd4e:	9307      	str	r3, [sp, #28]
 801bd50:	f1b8 0f00 	cmp.w	r8, #0
 801bd54:	d01d      	beq.n	801bd92 <_dtoa_r+0x6a2>
 801bd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d06a      	beq.n	801be32 <_dtoa_r+0x742>
 801bd5c:	b18d      	cbz	r5, 801bd82 <_dtoa_r+0x692>
 801bd5e:	4639      	mov	r1, r7
 801bd60:	462a      	mov	r2, r5
 801bd62:	4620      	mov	r0, r4
 801bd64:	f000 fd78 	bl	801c858 <__pow5mult>
 801bd68:	9a01      	ldr	r2, [sp, #4]
 801bd6a:	4601      	mov	r1, r0
 801bd6c:	4607      	mov	r7, r0
 801bd6e:	4620      	mov	r0, r4
 801bd70:	f000 fcdb 	bl	801c72a <__multiply>
 801bd74:	9901      	ldr	r1, [sp, #4]
 801bd76:	900c      	str	r0, [sp, #48]	; 0x30
 801bd78:	4620      	mov	r0, r4
 801bd7a:	f000 fc2d 	bl	801c5d8 <_Bfree>
 801bd7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd80:	9301      	str	r3, [sp, #4]
 801bd82:	ebb8 0205 	subs.w	r2, r8, r5
 801bd86:	d004      	beq.n	801bd92 <_dtoa_r+0x6a2>
 801bd88:	9901      	ldr	r1, [sp, #4]
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	f000 fd64 	bl	801c858 <__pow5mult>
 801bd90:	9001      	str	r0, [sp, #4]
 801bd92:	2101      	movs	r1, #1
 801bd94:	4620      	mov	r0, r4
 801bd96:	f000 fcbf 	bl	801c718 <__i2b>
 801bd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd9c:	4605      	mov	r5, r0
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	f000 81ca 	beq.w	801c138 <_dtoa_r+0xa48>
 801bda4:	461a      	mov	r2, r3
 801bda6:	4601      	mov	r1, r0
 801bda8:	4620      	mov	r0, r4
 801bdaa:	f000 fd55 	bl	801c858 <__pow5mult>
 801bdae:	9b08      	ldr	r3, [sp, #32]
 801bdb0:	2b01      	cmp	r3, #1
 801bdb2:	4605      	mov	r5, r0
 801bdb4:	dc44      	bgt.n	801be40 <_dtoa_r+0x750>
 801bdb6:	9b02      	ldr	r3, [sp, #8]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d13c      	bne.n	801be36 <_dtoa_r+0x746>
 801bdbc:	9b03      	ldr	r3, [sp, #12]
 801bdbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d137      	bne.n	801be36 <_dtoa_r+0x746>
 801bdc6:	9b03      	ldr	r3, [sp, #12]
 801bdc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bdcc:	0d1b      	lsrs	r3, r3, #20
 801bdce:	051b      	lsls	r3, r3, #20
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d033      	beq.n	801be3c <_dtoa_r+0x74c>
 801bdd4:	9b07      	ldr	r3, [sp, #28]
 801bdd6:	3301      	adds	r3, #1
 801bdd8:	f10a 0a01 	add.w	sl, sl, #1
 801bddc:	9307      	str	r3, [sp, #28]
 801bdde:	f04f 0801 	mov.w	r8, #1
 801bde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bde4:	bb73      	cbnz	r3, 801be44 <_dtoa_r+0x754>
 801bde6:	2001      	movs	r0, #1
 801bde8:	e034      	b.n	801be54 <_dtoa_r+0x764>
 801bdea:	bf00      	nop
 801bdec:	080209d0 	.word	0x080209d0
 801bdf0:	080209a8 	.word	0x080209a8
 801bdf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bdf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bdfa:	e790      	b.n	801bd1e <_dtoa_r+0x62e>
 801bdfc:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 801be00:	45a8      	cmp	r8, r5
 801be02:	bfbf      	itttt	lt
 801be04:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801be06:	eba5 0808 	sublt.w	r8, r5, r8
 801be0a:	4443      	addlt	r3, r8
 801be0c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801be0e:	bfb6      	itet	lt
 801be10:	46a8      	movlt	r8, r5
 801be12:	eba8 0505 	subge.w	r5, r8, r5
 801be16:	2500      	movlt	r5, #0
 801be18:	f1b9 0f00 	cmp.w	r9, #0
 801be1c:	bfb9      	ittee	lt
 801be1e:	ebaa 0609 	sublt.w	r6, sl, r9
 801be22:	2300      	movlt	r3, #0
 801be24:	4656      	movge	r6, sl
 801be26:	464b      	movge	r3, r9
 801be28:	e77b      	b.n	801bd22 <_dtoa_r+0x632>
 801be2a:	4645      	mov	r5, r8
 801be2c:	4656      	mov	r6, sl
 801be2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801be30:	e780      	b.n	801bd34 <_dtoa_r+0x644>
 801be32:	4642      	mov	r2, r8
 801be34:	e7a8      	b.n	801bd88 <_dtoa_r+0x698>
 801be36:	f04f 0800 	mov.w	r8, #0
 801be3a:	e7d2      	b.n	801bde2 <_dtoa_r+0x6f2>
 801be3c:	4698      	mov	r8, r3
 801be3e:	e7d0      	b.n	801bde2 <_dtoa_r+0x6f2>
 801be40:	f04f 0800 	mov.w	r8, #0
 801be44:	692b      	ldr	r3, [r5, #16]
 801be46:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801be4a:	6918      	ldr	r0, [r3, #16]
 801be4c:	f000 fc16 	bl	801c67c <__hi0bits>
 801be50:	f1c0 0020 	rsb	r0, r0, #32
 801be54:	9b07      	ldr	r3, [sp, #28]
 801be56:	4418      	add	r0, r3
 801be58:	f010 001f 	ands.w	r0, r0, #31
 801be5c:	d047      	beq.n	801beee <_dtoa_r+0x7fe>
 801be5e:	f1c0 0320 	rsb	r3, r0, #32
 801be62:	2b04      	cmp	r3, #4
 801be64:	dd3b      	ble.n	801bede <_dtoa_r+0x7ee>
 801be66:	9b07      	ldr	r3, [sp, #28]
 801be68:	f1c0 001c 	rsb	r0, r0, #28
 801be6c:	4482      	add	sl, r0
 801be6e:	4406      	add	r6, r0
 801be70:	4403      	add	r3, r0
 801be72:	9307      	str	r3, [sp, #28]
 801be74:	f1ba 0f00 	cmp.w	sl, #0
 801be78:	dd05      	ble.n	801be86 <_dtoa_r+0x796>
 801be7a:	4652      	mov	r2, sl
 801be7c:	9901      	ldr	r1, [sp, #4]
 801be7e:	4620      	mov	r0, r4
 801be80:	f000 fd38 	bl	801c8f4 <__lshift>
 801be84:	9001      	str	r0, [sp, #4]
 801be86:	9b07      	ldr	r3, [sp, #28]
 801be88:	2b00      	cmp	r3, #0
 801be8a:	dd05      	ble.n	801be98 <_dtoa_r+0x7a8>
 801be8c:	4629      	mov	r1, r5
 801be8e:	461a      	mov	r2, r3
 801be90:	4620      	mov	r0, r4
 801be92:	f000 fd2f 	bl	801c8f4 <__lshift>
 801be96:	4605      	mov	r5, r0
 801be98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be9a:	b353      	cbz	r3, 801bef2 <_dtoa_r+0x802>
 801be9c:	4629      	mov	r1, r5
 801be9e:	9801      	ldr	r0, [sp, #4]
 801bea0:	f000 fd7c 	bl	801c99c <__mcmp>
 801bea4:	2800      	cmp	r0, #0
 801bea6:	da24      	bge.n	801bef2 <_dtoa_r+0x802>
 801bea8:	2300      	movs	r3, #0
 801beaa:	220a      	movs	r2, #10
 801beac:	9901      	ldr	r1, [sp, #4]
 801beae:	4620      	mov	r0, r4
 801beb0:	f000 fba9 	bl	801c606 <__multadd>
 801beb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801beb6:	9001      	str	r0, [sp, #4]
 801beb8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	f000 8142 	beq.w	801c146 <_dtoa_r+0xa56>
 801bec2:	2300      	movs	r3, #0
 801bec4:	4639      	mov	r1, r7
 801bec6:	220a      	movs	r2, #10
 801bec8:	4620      	mov	r0, r4
 801beca:	f000 fb9c 	bl	801c606 <__multadd>
 801bece:	9b06      	ldr	r3, [sp, #24]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	4607      	mov	r7, r0
 801bed4:	dc4b      	bgt.n	801bf6e <_dtoa_r+0x87e>
 801bed6:	9b08      	ldr	r3, [sp, #32]
 801bed8:	2b02      	cmp	r3, #2
 801beda:	dd48      	ble.n	801bf6e <_dtoa_r+0x87e>
 801bedc:	e011      	b.n	801bf02 <_dtoa_r+0x812>
 801bede:	d0c9      	beq.n	801be74 <_dtoa_r+0x784>
 801bee0:	9a07      	ldr	r2, [sp, #28]
 801bee2:	331c      	adds	r3, #28
 801bee4:	441a      	add	r2, r3
 801bee6:	449a      	add	sl, r3
 801bee8:	441e      	add	r6, r3
 801beea:	4613      	mov	r3, r2
 801beec:	e7c1      	b.n	801be72 <_dtoa_r+0x782>
 801beee:	4603      	mov	r3, r0
 801bef0:	e7f6      	b.n	801bee0 <_dtoa_r+0x7f0>
 801bef2:	f1b9 0f00 	cmp.w	r9, #0
 801bef6:	dc34      	bgt.n	801bf62 <_dtoa_r+0x872>
 801bef8:	9b08      	ldr	r3, [sp, #32]
 801befa:	2b02      	cmp	r3, #2
 801befc:	dd31      	ble.n	801bf62 <_dtoa_r+0x872>
 801befe:	f8cd 9018 	str.w	r9, [sp, #24]
 801bf02:	9b06      	ldr	r3, [sp, #24]
 801bf04:	b963      	cbnz	r3, 801bf20 <_dtoa_r+0x830>
 801bf06:	4629      	mov	r1, r5
 801bf08:	2205      	movs	r2, #5
 801bf0a:	4620      	mov	r0, r4
 801bf0c:	f000 fb7b 	bl	801c606 <__multadd>
 801bf10:	4601      	mov	r1, r0
 801bf12:	4605      	mov	r5, r0
 801bf14:	9801      	ldr	r0, [sp, #4]
 801bf16:	f000 fd41 	bl	801c99c <__mcmp>
 801bf1a:	2800      	cmp	r0, #0
 801bf1c:	f73f adfc 	bgt.w	801bb18 <_dtoa_r+0x428>
 801bf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf22:	9e04      	ldr	r6, [sp, #16]
 801bf24:	ea6f 0b03 	mvn.w	fp, r3
 801bf28:	f04f 0900 	mov.w	r9, #0
 801bf2c:	4629      	mov	r1, r5
 801bf2e:	4620      	mov	r0, r4
 801bf30:	f000 fb52 	bl	801c5d8 <_Bfree>
 801bf34:	2f00      	cmp	r7, #0
 801bf36:	f43f aebb 	beq.w	801bcb0 <_dtoa_r+0x5c0>
 801bf3a:	f1b9 0f00 	cmp.w	r9, #0
 801bf3e:	d005      	beq.n	801bf4c <_dtoa_r+0x85c>
 801bf40:	45b9      	cmp	r9, r7
 801bf42:	d003      	beq.n	801bf4c <_dtoa_r+0x85c>
 801bf44:	4649      	mov	r1, r9
 801bf46:	4620      	mov	r0, r4
 801bf48:	f000 fb46 	bl	801c5d8 <_Bfree>
 801bf4c:	4639      	mov	r1, r7
 801bf4e:	4620      	mov	r0, r4
 801bf50:	f000 fb42 	bl	801c5d8 <_Bfree>
 801bf54:	e6ac      	b.n	801bcb0 <_dtoa_r+0x5c0>
 801bf56:	2500      	movs	r5, #0
 801bf58:	462f      	mov	r7, r5
 801bf5a:	e7e1      	b.n	801bf20 <_dtoa_r+0x830>
 801bf5c:	469b      	mov	fp, r3
 801bf5e:	462f      	mov	r7, r5
 801bf60:	e5da      	b.n	801bb18 <_dtoa_r+0x428>
 801bf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf64:	f8cd 9018 	str.w	r9, [sp, #24]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	f000 80f3 	beq.w	801c154 <_dtoa_r+0xa64>
 801bf6e:	2e00      	cmp	r6, #0
 801bf70:	dd05      	ble.n	801bf7e <_dtoa_r+0x88e>
 801bf72:	4639      	mov	r1, r7
 801bf74:	4632      	mov	r2, r6
 801bf76:	4620      	mov	r0, r4
 801bf78:	f000 fcbc 	bl	801c8f4 <__lshift>
 801bf7c:	4607      	mov	r7, r0
 801bf7e:	f1b8 0f00 	cmp.w	r8, #0
 801bf82:	d04c      	beq.n	801c01e <_dtoa_r+0x92e>
 801bf84:	6879      	ldr	r1, [r7, #4]
 801bf86:	4620      	mov	r0, r4
 801bf88:	f000 faf2 	bl	801c570 <_Balloc>
 801bf8c:	693a      	ldr	r2, [r7, #16]
 801bf8e:	3202      	adds	r2, #2
 801bf90:	4606      	mov	r6, r0
 801bf92:	0092      	lsls	r2, r2, #2
 801bf94:	f107 010c 	add.w	r1, r7, #12
 801bf98:	300c      	adds	r0, #12
 801bf9a:	f7fe fcd4 	bl	801a946 <memcpy>
 801bf9e:	2201      	movs	r2, #1
 801bfa0:	4631      	mov	r1, r6
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f000 fca6 	bl	801c8f4 <__lshift>
 801bfa8:	9b02      	ldr	r3, [sp, #8]
 801bfaa:	f8dd a010 	ldr.w	sl, [sp, #16]
 801bfae:	f003 0301 	and.w	r3, r3, #1
 801bfb2:	46b9      	mov	r9, r7
 801bfb4:	9307      	str	r3, [sp, #28]
 801bfb6:	4607      	mov	r7, r0
 801bfb8:	4629      	mov	r1, r5
 801bfba:	9801      	ldr	r0, [sp, #4]
 801bfbc:	f7ff fb0a 	bl	801b5d4 <quorem>
 801bfc0:	4649      	mov	r1, r9
 801bfc2:	4606      	mov	r6, r0
 801bfc4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801bfc8:	9801      	ldr	r0, [sp, #4]
 801bfca:	f000 fce7 	bl	801c99c <__mcmp>
 801bfce:	463a      	mov	r2, r7
 801bfd0:	9002      	str	r0, [sp, #8]
 801bfd2:	4629      	mov	r1, r5
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f000 fcfb 	bl	801c9d0 <__mdiff>
 801bfda:	68c3      	ldr	r3, [r0, #12]
 801bfdc:	4602      	mov	r2, r0
 801bfde:	bb03      	cbnz	r3, 801c022 <_dtoa_r+0x932>
 801bfe0:	4601      	mov	r1, r0
 801bfe2:	9009      	str	r0, [sp, #36]	; 0x24
 801bfe4:	9801      	ldr	r0, [sp, #4]
 801bfe6:	f000 fcd9 	bl	801c99c <__mcmp>
 801bfea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bfec:	4603      	mov	r3, r0
 801bfee:	4611      	mov	r1, r2
 801bff0:	4620      	mov	r0, r4
 801bff2:	9309      	str	r3, [sp, #36]	; 0x24
 801bff4:	f000 faf0 	bl	801c5d8 <_Bfree>
 801bff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bffa:	b9a3      	cbnz	r3, 801c026 <_dtoa_r+0x936>
 801bffc:	9a08      	ldr	r2, [sp, #32]
 801bffe:	b992      	cbnz	r2, 801c026 <_dtoa_r+0x936>
 801c000:	9a07      	ldr	r2, [sp, #28]
 801c002:	b982      	cbnz	r2, 801c026 <_dtoa_r+0x936>
 801c004:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c008:	d029      	beq.n	801c05e <_dtoa_r+0x96e>
 801c00a:	9b02      	ldr	r3, [sp, #8]
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	dd01      	ble.n	801c014 <_dtoa_r+0x924>
 801c010:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801c014:	f10a 0601 	add.w	r6, sl, #1
 801c018:	f88a 8000 	strb.w	r8, [sl]
 801c01c:	e786      	b.n	801bf2c <_dtoa_r+0x83c>
 801c01e:	4638      	mov	r0, r7
 801c020:	e7c2      	b.n	801bfa8 <_dtoa_r+0x8b8>
 801c022:	2301      	movs	r3, #1
 801c024:	e7e3      	b.n	801bfee <_dtoa_r+0x8fe>
 801c026:	9a02      	ldr	r2, [sp, #8]
 801c028:	2a00      	cmp	r2, #0
 801c02a:	db04      	blt.n	801c036 <_dtoa_r+0x946>
 801c02c:	d124      	bne.n	801c078 <_dtoa_r+0x988>
 801c02e:	9a08      	ldr	r2, [sp, #32]
 801c030:	bb12      	cbnz	r2, 801c078 <_dtoa_r+0x988>
 801c032:	9a07      	ldr	r2, [sp, #28]
 801c034:	bb02      	cbnz	r2, 801c078 <_dtoa_r+0x988>
 801c036:	2b00      	cmp	r3, #0
 801c038:	ddec      	ble.n	801c014 <_dtoa_r+0x924>
 801c03a:	2201      	movs	r2, #1
 801c03c:	9901      	ldr	r1, [sp, #4]
 801c03e:	4620      	mov	r0, r4
 801c040:	f000 fc58 	bl	801c8f4 <__lshift>
 801c044:	4629      	mov	r1, r5
 801c046:	9001      	str	r0, [sp, #4]
 801c048:	f000 fca8 	bl	801c99c <__mcmp>
 801c04c:	2800      	cmp	r0, #0
 801c04e:	dc03      	bgt.n	801c058 <_dtoa_r+0x968>
 801c050:	d1e0      	bne.n	801c014 <_dtoa_r+0x924>
 801c052:	f018 0f01 	tst.w	r8, #1
 801c056:	d0dd      	beq.n	801c014 <_dtoa_r+0x924>
 801c058:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c05c:	d1d8      	bne.n	801c010 <_dtoa_r+0x920>
 801c05e:	2339      	movs	r3, #57	; 0x39
 801c060:	f10a 0601 	add.w	r6, sl, #1
 801c064:	f88a 3000 	strb.w	r3, [sl]
 801c068:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c06c:	2b39      	cmp	r3, #57	; 0x39
 801c06e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801c072:	d04c      	beq.n	801c10e <_dtoa_r+0xa1e>
 801c074:	3301      	adds	r3, #1
 801c076:	e051      	b.n	801c11c <_dtoa_r+0xa2c>
 801c078:	2b00      	cmp	r3, #0
 801c07a:	f10a 0601 	add.w	r6, sl, #1
 801c07e:	dd05      	ble.n	801c08c <_dtoa_r+0x99c>
 801c080:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c084:	d0eb      	beq.n	801c05e <_dtoa_r+0x96e>
 801c086:	f108 0801 	add.w	r8, r8, #1
 801c08a:	e7c5      	b.n	801c018 <_dtoa_r+0x928>
 801c08c:	9b04      	ldr	r3, [sp, #16]
 801c08e:	9a06      	ldr	r2, [sp, #24]
 801c090:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c094:	1af3      	subs	r3, r6, r3
 801c096:	4293      	cmp	r3, r2
 801c098:	d021      	beq.n	801c0de <_dtoa_r+0x9ee>
 801c09a:	2300      	movs	r3, #0
 801c09c:	220a      	movs	r2, #10
 801c09e:	9901      	ldr	r1, [sp, #4]
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	f000 fab0 	bl	801c606 <__multadd>
 801c0a6:	45b9      	cmp	r9, r7
 801c0a8:	9001      	str	r0, [sp, #4]
 801c0aa:	f04f 0300 	mov.w	r3, #0
 801c0ae:	f04f 020a 	mov.w	r2, #10
 801c0b2:	4649      	mov	r1, r9
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	d105      	bne.n	801c0c4 <_dtoa_r+0x9d4>
 801c0b8:	f000 faa5 	bl	801c606 <__multadd>
 801c0bc:	4681      	mov	r9, r0
 801c0be:	4607      	mov	r7, r0
 801c0c0:	46b2      	mov	sl, r6
 801c0c2:	e779      	b.n	801bfb8 <_dtoa_r+0x8c8>
 801c0c4:	f000 fa9f 	bl	801c606 <__multadd>
 801c0c8:	4639      	mov	r1, r7
 801c0ca:	4681      	mov	r9, r0
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	220a      	movs	r2, #10
 801c0d0:	4620      	mov	r0, r4
 801c0d2:	f000 fa98 	bl	801c606 <__multadd>
 801c0d6:	4607      	mov	r7, r0
 801c0d8:	e7f2      	b.n	801c0c0 <_dtoa_r+0x9d0>
 801c0da:	f04f 0900 	mov.w	r9, #0
 801c0de:	2201      	movs	r2, #1
 801c0e0:	9901      	ldr	r1, [sp, #4]
 801c0e2:	4620      	mov	r0, r4
 801c0e4:	f000 fc06 	bl	801c8f4 <__lshift>
 801c0e8:	4629      	mov	r1, r5
 801c0ea:	9001      	str	r0, [sp, #4]
 801c0ec:	f000 fc56 	bl	801c99c <__mcmp>
 801c0f0:	2800      	cmp	r0, #0
 801c0f2:	dcb9      	bgt.n	801c068 <_dtoa_r+0x978>
 801c0f4:	d102      	bne.n	801c0fc <_dtoa_r+0xa0c>
 801c0f6:	f018 0f01 	tst.w	r8, #1
 801c0fa:	d1b5      	bne.n	801c068 <_dtoa_r+0x978>
 801c0fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c100:	2b30      	cmp	r3, #48	; 0x30
 801c102:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801c106:	f47f af11 	bne.w	801bf2c <_dtoa_r+0x83c>
 801c10a:	4616      	mov	r6, r2
 801c10c:	e7f6      	b.n	801c0fc <_dtoa_r+0xa0c>
 801c10e:	9b04      	ldr	r3, [sp, #16]
 801c110:	4293      	cmp	r3, r2
 801c112:	d105      	bne.n	801c120 <_dtoa_r+0xa30>
 801c114:	9a04      	ldr	r2, [sp, #16]
 801c116:	f10b 0b01 	add.w	fp, fp, #1
 801c11a:	2331      	movs	r3, #49	; 0x31
 801c11c:	7013      	strb	r3, [r2, #0]
 801c11e:	e705      	b.n	801bf2c <_dtoa_r+0x83c>
 801c120:	4616      	mov	r6, r2
 801c122:	e7a1      	b.n	801c068 <_dtoa_r+0x978>
 801c124:	4b16      	ldr	r3, [pc, #88]	; (801c180 <_dtoa_r+0xa90>)
 801c126:	f7ff bb48 	b.w	801b7ba <_dtoa_r+0xca>
 801c12a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	f47f ab23 	bne.w	801b778 <_dtoa_r+0x88>
 801c132:	4b14      	ldr	r3, [pc, #80]	; (801c184 <_dtoa_r+0xa94>)
 801c134:	f7ff bb41 	b.w	801b7ba <_dtoa_r+0xca>
 801c138:	9b08      	ldr	r3, [sp, #32]
 801c13a:	2b01      	cmp	r3, #1
 801c13c:	f77f ae3b 	ble.w	801bdb6 <_dtoa_r+0x6c6>
 801c140:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801c144:	e64f      	b.n	801bde6 <_dtoa_r+0x6f6>
 801c146:	9b06      	ldr	r3, [sp, #24]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	dc03      	bgt.n	801c154 <_dtoa_r+0xa64>
 801c14c:	9b08      	ldr	r3, [sp, #32]
 801c14e:	2b02      	cmp	r3, #2
 801c150:	f73f aed7 	bgt.w	801bf02 <_dtoa_r+0x812>
 801c154:	9e04      	ldr	r6, [sp, #16]
 801c156:	9801      	ldr	r0, [sp, #4]
 801c158:	4629      	mov	r1, r5
 801c15a:	f7ff fa3b 	bl	801b5d4 <quorem>
 801c15e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801c162:	f806 8b01 	strb.w	r8, [r6], #1
 801c166:	9b04      	ldr	r3, [sp, #16]
 801c168:	9a06      	ldr	r2, [sp, #24]
 801c16a:	1af3      	subs	r3, r6, r3
 801c16c:	429a      	cmp	r2, r3
 801c16e:	ddb4      	ble.n	801c0da <_dtoa_r+0x9ea>
 801c170:	2300      	movs	r3, #0
 801c172:	220a      	movs	r2, #10
 801c174:	9901      	ldr	r1, [sp, #4]
 801c176:	4620      	mov	r0, r4
 801c178:	f000 fa45 	bl	801c606 <__multadd>
 801c17c:	9001      	str	r0, [sp, #4]
 801c17e:	e7ea      	b.n	801c156 <_dtoa_r+0xa66>
 801c180:	08020816 	.word	0x08020816
 801c184:	0802093b 	.word	0x0802093b

0801c188 <__sflush_r>:
 801c188:	898a      	ldrh	r2, [r1, #12]
 801c18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c18e:	4605      	mov	r5, r0
 801c190:	0710      	lsls	r0, r2, #28
 801c192:	460c      	mov	r4, r1
 801c194:	d458      	bmi.n	801c248 <__sflush_r+0xc0>
 801c196:	684b      	ldr	r3, [r1, #4]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	dc05      	bgt.n	801c1a8 <__sflush_r+0x20>
 801c19c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	dc02      	bgt.n	801c1a8 <__sflush_r+0x20>
 801c1a2:	2000      	movs	r0, #0
 801c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1aa:	2e00      	cmp	r6, #0
 801c1ac:	d0f9      	beq.n	801c1a2 <__sflush_r+0x1a>
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c1b4:	682f      	ldr	r7, [r5, #0]
 801c1b6:	6a21      	ldr	r1, [r4, #32]
 801c1b8:	602b      	str	r3, [r5, #0]
 801c1ba:	d032      	beq.n	801c222 <__sflush_r+0x9a>
 801c1bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c1be:	89a3      	ldrh	r3, [r4, #12]
 801c1c0:	075a      	lsls	r2, r3, #29
 801c1c2:	d505      	bpl.n	801c1d0 <__sflush_r+0x48>
 801c1c4:	6863      	ldr	r3, [r4, #4]
 801c1c6:	1ac0      	subs	r0, r0, r3
 801c1c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c1ca:	b10b      	cbz	r3, 801c1d0 <__sflush_r+0x48>
 801c1cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1ce:	1ac0      	subs	r0, r0, r3
 801c1d0:	2300      	movs	r3, #0
 801c1d2:	4602      	mov	r2, r0
 801c1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c1d6:	6a21      	ldr	r1, [r4, #32]
 801c1d8:	4628      	mov	r0, r5
 801c1da:	47b0      	blx	r6
 801c1dc:	1c43      	adds	r3, r0, #1
 801c1de:	89a3      	ldrh	r3, [r4, #12]
 801c1e0:	d106      	bne.n	801c1f0 <__sflush_r+0x68>
 801c1e2:	6829      	ldr	r1, [r5, #0]
 801c1e4:	291d      	cmp	r1, #29
 801c1e6:	d848      	bhi.n	801c27a <__sflush_r+0xf2>
 801c1e8:	4a29      	ldr	r2, [pc, #164]	; (801c290 <__sflush_r+0x108>)
 801c1ea:	40ca      	lsrs	r2, r1
 801c1ec:	07d6      	lsls	r6, r2, #31
 801c1ee:	d544      	bpl.n	801c27a <__sflush_r+0xf2>
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	6062      	str	r2, [r4, #4]
 801c1f4:	04d9      	lsls	r1, r3, #19
 801c1f6:	6922      	ldr	r2, [r4, #16]
 801c1f8:	6022      	str	r2, [r4, #0]
 801c1fa:	d504      	bpl.n	801c206 <__sflush_r+0x7e>
 801c1fc:	1c42      	adds	r2, r0, #1
 801c1fe:	d101      	bne.n	801c204 <__sflush_r+0x7c>
 801c200:	682b      	ldr	r3, [r5, #0]
 801c202:	b903      	cbnz	r3, 801c206 <__sflush_r+0x7e>
 801c204:	6560      	str	r0, [r4, #84]	; 0x54
 801c206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c208:	602f      	str	r7, [r5, #0]
 801c20a:	2900      	cmp	r1, #0
 801c20c:	d0c9      	beq.n	801c1a2 <__sflush_r+0x1a>
 801c20e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c212:	4299      	cmp	r1, r3
 801c214:	d002      	beq.n	801c21c <__sflush_r+0x94>
 801c216:	4628      	mov	r0, r5
 801c218:	f000 fc94 	bl	801cb44 <_free_r>
 801c21c:	2000      	movs	r0, #0
 801c21e:	6360      	str	r0, [r4, #52]	; 0x34
 801c220:	e7c0      	b.n	801c1a4 <__sflush_r+0x1c>
 801c222:	2301      	movs	r3, #1
 801c224:	4628      	mov	r0, r5
 801c226:	47b0      	blx	r6
 801c228:	1c41      	adds	r1, r0, #1
 801c22a:	d1c8      	bne.n	801c1be <__sflush_r+0x36>
 801c22c:	682b      	ldr	r3, [r5, #0]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d0c5      	beq.n	801c1be <__sflush_r+0x36>
 801c232:	2b1d      	cmp	r3, #29
 801c234:	d001      	beq.n	801c23a <__sflush_r+0xb2>
 801c236:	2b16      	cmp	r3, #22
 801c238:	d101      	bne.n	801c23e <__sflush_r+0xb6>
 801c23a:	602f      	str	r7, [r5, #0]
 801c23c:	e7b1      	b.n	801c1a2 <__sflush_r+0x1a>
 801c23e:	89a3      	ldrh	r3, [r4, #12]
 801c240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c244:	81a3      	strh	r3, [r4, #12]
 801c246:	e7ad      	b.n	801c1a4 <__sflush_r+0x1c>
 801c248:	690f      	ldr	r7, [r1, #16]
 801c24a:	2f00      	cmp	r7, #0
 801c24c:	d0a9      	beq.n	801c1a2 <__sflush_r+0x1a>
 801c24e:	0793      	lsls	r3, r2, #30
 801c250:	680e      	ldr	r6, [r1, #0]
 801c252:	bf08      	it	eq
 801c254:	694b      	ldreq	r3, [r1, #20]
 801c256:	600f      	str	r7, [r1, #0]
 801c258:	bf18      	it	ne
 801c25a:	2300      	movne	r3, #0
 801c25c:	eba6 0807 	sub.w	r8, r6, r7
 801c260:	608b      	str	r3, [r1, #8]
 801c262:	f1b8 0f00 	cmp.w	r8, #0
 801c266:	dd9c      	ble.n	801c1a2 <__sflush_r+0x1a>
 801c268:	4643      	mov	r3, r8
 801c26a:	463a      	mov	r2, r7
 801c26c:	6a21      	ldr	r1, [r4, #32]
 801c26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c270:	4628      	mov	r0, r5
 801c272:	47b0      	blx	r6
 801c274:	2800      	cmp	r0, #0
 801c276:	dc06      	bgt.n	801c286 <__sflush_r+0xfe>
 801c278:	89a3      	ldrh	r3, [r4, #12]
 801c27a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c27e:	81a3      	strh	r3, [r4, #12]
 801c280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c284:	e78e      	b.n	801c1a4 <__sflush_r+0x1c>
 801c286:	4407      	add	r7, r0
 801c288:	eba8 0800 	sub.w	r8, r8, r0
 801c28c:	e7e9      	b.n	801c262 <__sflush_r+0xda>
 801c28e:	bf00      	nop
 801c290:	20400001 	.word	0x20400001

0801c294 <_fflush_r>:
 801c294:	b538      	push	{r3, r4, r5, lr}
 801c296:	690b      	ldr	r3, [r1, #16]
 801c298:	4605      	mov	r5, r0
 801c29a:	460c      	mov	r4, r1
 801c29c:	b1db      	cbz	r3, 801c2d6 <_fflush_r+0x42>
 801c29e:	b118      	cbz	r0, 801c2a8 <_fflush_r+0x14>
 801c2a0:	6983      	ldr	r3, [r0, #24]
 801c2a2:	b90b      	cbnz	r3, 801c2a8 <_fflush_r+0x14>
 801c2a4:	f000 f860 	bl	801c368 <__sinit>
 801c2a8:	4b0c      	ldr	r3, [pc, #48]	; (801c2dc <_fflush_r+0x48>)
 801c2aa:	429c      	cmp	r4, r3
 801c2ac:	d109      	bne.n	801c2c2 <_fflush_r+0x2e>
 801c2ae:	686c      	ldr	r4, [r5, #4]
 801c2b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2b4:	b17b      	cbz	r3, 801c2d6 <_fflush_r+0x42>
 801c2b6:	4621      	mov	r1, r4
 801c2b8:	4628      	mov	r0, r5
 801c2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2be:	f7ff bf63 	b.w	801c188 <__sflush_r>
 801c2c2:	4b07      	ldr	r3, [pc, #28]	; (801c2e0 <_fflush_r+0x4c>)
 801c2c4:	429c      	cmp	r4, r3
 801c2c6:	d101      	bne.n	801c2cc <_fflush_r+0x38>
 801c2c8:	68ac      	ldr	r4, [r5, #8]
 801c2ca:	e7f1      	b.n	801c2b0 <_fflush_r+0x1c>
 801c2cc:	4b05      	ldr	r3, [pc, #20]	; (801c2e4 <_fflush_r+0x50>)
 801c2ce:	429c      	cmp	r4, r3
 801c2d0:	bf08      	it	eq
 801c2d2:	68ec      	ldreq	r4, [r5, #12]
 801c2d4:	e7ec      	b.n	801c2b0 <_fflush_r+0x1c>
 801c2d6:	2000      	movs	r0, #0
 801c2d8:	bd38      	pop	{r3, r4, r5, pc}
 801c2da:	bf00      	nop
 801c2dc:	08020968 	.word	0x08020968
 801c2e0:	08020988 	.word	0x08020988
 801c2e4:	08020948 	.word	0x08020948

0801c2e8 <std>:
 801c2e8:	2300      	movs	r3, #0
 801c2ea:	b510      	push	{r4, lr}
 801c2ec:	4604      	mov	r4, r0
 801c2ee:	e9c0 3300 	strd	r3, r3, [r0]
 801c2f2:	6083      	str	r3, [r0, #8]
 801c2f4:	8181      	strh	r1, [r0, #12]
 801c2f6:	6643      	str	r3, [r0, #100]	; 0x64
 801c2f8:	81c2      	strh	r2, [r0, #14]
 801c2fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c2fe:	6183      	str	r3, [r0, #24]
 801c300:	4619      	mov	r1, r3
 801c302:	2208      	movs	r2, #8
 801c304:	305c      	adds	r0, #92	; 0x5c
 801c306:	f7fe fb42 	bl	801a98e <memset>
 801c30a:	4b05      	ldr	r3, [pc, #20]	; (801c320 <std+0x38>)
 801c30c:	6263      	str	r3, [r4, #36]	; 0x24
 801c30e:	4b05      	ldr	r3, [pc, #20]	; (801c324 <std+0x3c>)
 801c310:	62a3      	str	r3, [r4, #40]	; 0x28
 801c312:	4b05      	ldr	r3, [pc, #20]	; (801c328 <std+0x40>)
 801c314:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c316:	4b05      	ldr	r3, [pc, #20]	; (801c32c <std+0x44>)
 801c318:	6224      	str	r4, [r4, #32]
 801c31a:	6323      	str	r3, [r4, #48]	; 0x30
 801c31c:	bd10      	pop	{r4, pc}
 801c31e:	bf00      	nop
 801c320:	0801d1d9 	.word	0x0801d1d9
 801c324:	0801d1fb 	.word	0x0801d1fb
 801c328:	0801d233 	.word	0x0801d233
 801c32c:	0801d257 	.word	0x0801d257

0801c330 <_cleanup_r>:
 801c330:	4901      	ldr	r1, [pc, #4]	; (801c338 <_cleanup_r+0x8>)
 801c332:	f000 b885 	b.w	801c440 <_fwalk_reent>
 801c336:	bf00      	nop
 801c338:	0801c295 	.word	0x0801c295

0801c33c <__sfmoreglue>:
 801c33c:	b570      	push	{r4, r5, r6, lr}
 801c33e:	1e4a      	subs	r2, r1, #1
 801c340:	2568      	movs	r5, #104	; 0x68
 801c342:	4355      	muls	r5, r2
 801c344:	460e      	mov	r6, r1
 801c346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c34a:	f000 fc49 	bl	801cbe0 <_malloc_r>
 801c34e:	4604      	mov	r4, r0
 801c350:	b140      	cbz	r0, 801c364 <__sfmoreglue+0x28>
 801c352:	2100      	movs	r1, #0
 801c354:	e9c0 1600 	strd	r1, r6, [r0]
 801c358:	300c      	adds	r0, #12
 801c35a:	60a0      	str	r0, [r4, #8]
 801c35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c360:	f7fe fb15 	bl	801a98e <memset>
 801c364:	4620      	mov	r0, r4
 801c366:	bd70      	pop	{r4, r5, r6, pc}

0801c368 <__sinit>:
 801c368:	6983      	ldr	r3, [r0, #24]
 801c36a:	b510      	push	{r4, lr}
 801c36c:	4604      	mov	r4, r0
 801c36e:	bb33      	cbnz	r3, 801c3be <__sinit+0x56>
 801c370:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c374:	6503      	str	r3, [r0, #80]	; 0x50
 801c376:	4b12      	ldr	r3, [pc, #72]	; (801c3c0 <__sinit+0x58>)
 801c378:	4a12      	ldr	r2, [pc, #72]	; (801c3c4 <__sinit+0x5c>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	6282      	str	r2, [r0, #40]	; 0x28
 801c37e:	4298      	cmp	r0, r3
 801c380:	bf04      	itt	eq
 801c382:	2301      	moveq	r3, #1
 801c384:	6183      	streq	r3, [r0, #24]
 801c386:	f000 f81f 	bl	801c3c8 <__sfp>
 801c38a:	6060      	str	r0, [r4, #4]
 801c38c:	4620      	mov	r0, r4
 801c38e:	f000 f81b 	bl	801c3c8 <__sfp>
 801c392:	60a0      	str	r0, [r4, #8]
 801c394:	4620      	mov	r0, r4
 801c396:	f000 f817 	bl	801c3c8 <__sfp>
 801c39a:	2200      	movs	r2, #0
 801c39c:	60e0      	str	r0, [r4, #12]
 801c39e:	2104      	movs	r1, #4
 801c3a0:	6860      	ldr	r0, [r4, #4]
 801c3a2:	f7ff ffa1 	bl	801c2e8 <std>
 801c3a6:	2201      	movs	r2, #1
 801c3a8:	2109      	movs	r1, #9
 801c3aa:	68a0      	ldr	r0, [r4, #8]
 801c3ac:	f7ff ff9c 	bl	801c2e8 <std>
 801c3b0:	2202      	movs	r2, #2
 801c3b2:	2112      	movs	r1, #18
 801c3b4:	68e0      	ldr	r0, [r4, #12]
 801c3b6:	f7ff ff97 	bl	801c2e8 <std>
 801c3ba:	2301      	movs	r3, #1
 801c3bc:	61a3      	str	r3, [r4, #24]
 801c3be:	bd10      	pop	{r4, pc}
 801c3c0:	080207f8 	.word	0x080207f8
 801c3c4:	0801c331 	.word	0x0801c331

0801c3c8 <__sfp>:
 801c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ca:	4b1b      	ldr	r3, [pc, #108]	; (801c438 <__sfp+0x70>)
 801c3cc:	681e      	ldr	r6, [r3, #0]
 801c3ce:	69b3      	ldr	r3, [r6, #24]
 801c3d0:	4607      	mov	r7, r0
 801c3d2:	b913      	cbnz	r3, 801c3da <__sfp+0x12>
 801c3d4:	4630      	mov	r0, r6
 801c3d6:	f7ff ffc7 	bl	801c368 <__sinit>
 801c3da:	3648      	adds	r6, #72	; 0x48
 801c3dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c3e0:	3b01      	subs	r3, #1
 801c3e2:	d503      	bpl.n	801c3ec <__sfp+0x24>
 801c3e4:	6833      	ldr	r3, [r6, #0]
 801c3e6:	b133      	cbz	r3, 801c3f6 <__sfp+0x2e>
 801c3e8:	6836      	ldr	r6, [r6, #0]
 801c3ea:	e7f7      	b.n	801c3dc <__sfp+0x14>
 801c3ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c3f0:	b16d      	cbz	r5, 801c40e <__sfp+0x46>
 801c3f2:	3468      	adds	r4, #104	; 0x68
 801c3f4:	e7f4      	b.n	801c3e0 <__sfp+0x18>
 801c3f6:	2104      	movs	r1, #4
 801c3f8:	4638      	mov	r0, r7
 801c3fa:	f7ff ff9f 	bl	801c33c <__sfmoreglue>
 801c3fe:	6030      	str	r0, [r6, #0]
 801c400:	2800      	cmp	r0, #0
 801c402:	d1f1      	bne.n	801c3e8 <__sfp+0x20>
 801c404:	230c      	movs	r3, #12
 801c406:	603b      	str	r3, [r7, #0]
 801c408:	4604      	mov	r4, r0
 801c40a:	4620      	mov	r0, r4
 801c40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c40e:	4b0b      	ldr	r3, [pc, #44]	; (801c43c <__sfp+0x74>)
 801c410:	6665      	str	r5, [r4, #100]	; 0x64
 801c412:	e9c4 5500 	strd	r5, r5, [r4]
 801c416:	60a5      	str	r5, [r4, #8]
 801c418:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c41c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c420:	2208      	movs	r2, #8
 801c422:	4629      	mov	r1, r5
 801c424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c428:	f7fe fab1 	bl	801a98e <memset>
 801c42c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c434:	e7e9      	b.n	801c40a <__sfp+0x42>
 801c436:	bf00      	nop
 801c438:	080207f8 	.word	0x080207f8
 801c43c:	ffff0001 	.word	0xffff0001

0801c440 <_fwalk_reent>:
 801c440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c444:	4680      	mov	r8, r0
 801c446:	4689      	mov	r9, r1
 801c448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c44c:	2600      	movs	r6, #0
 801c44e:	b914      	cbnz	r4, 801c456 <_fwalk_reent+0x16>
 801c450:	4630      	mov	r0, r6
 801c452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c456:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c45a:	3f01      	subs	r7, #1
 801c45c:	d501      	bpl.n	801c462 <_fwalk_reent+0x22>
 801c45e:	6824      	ldr	r4, [r4, #0]
 801c460:	e7f5      	b.n	801c44e <_fwalk_reent+0xe>
 801c462:	89ab      	ldrh	r3, [r5, #12]
 801c464:	2b01      	cmp	r3, #1
 801c466:	d907      	bls.n	801c478 <_fwalk_reent+0x38>
 801c468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c46c:	3301      	adds	r3, #1
 801c46e:	d003      	beq.n	801c478 <_fwalk_reent+0x38>
 801c470:	4629      	mov	r1, r5
 801c472:	4640      	mov	r0, r8
 801c474:	47c8      	blx	r9
 801c476:	4306      	orrs	r6, r0
 801c478:	3568      	adds	r5, #104	; 0x68
 801c47a:	e7ee      	b.n	801c45a <_fwalk_reent+0x1a>

0801c47c <_localeconv_r>:
 801c47c:	4b04      	ldr	r3, [pc, #16]	; (801c490 <_localeconv_r+0x14>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	6a18      	ldr	r0, [r3, #32]
 801c482:	4b04      	ldr	r3, [pc, #16]	; (801c494 <_localeconv_r+0x18>)
 801c484:	2800      	cmp	r0, #0
 801c486:	bf08      	it	eq
 801c488:	4618      	moveq	r0, r3
 801c48a:	30f0      	adds	r0, #240	; 0xf0
 801c48c:	4770      	bx	lr
 801c48e:	bf00      	nop
 801c490:	2400003c 	.word	0x2400003c
 801c494:	240000a0 	.word	0x240000a0

0801c498 <__swhatbuf_r>:
 801c498:	b570      	push	{r4, r5, r6, lr}
 801c49a:	460e      	mov	r6, r1
 801c49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4a0:	2900      	cmp	r1, #0
 801c4a2:	b096      	sub	sp, #88	; 0x58
 801c4a4:	4614      	mov	r4, r2
 801c4a6:	461d      	mov	r5, r3
 801c4a8:	da07      	bge.n	801c4ba <__swhatbuf_r+0x22>
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	602b      	str	r3, [r5, #0]
 801c4ae:	89b3      	ldrh	r3, [r6, #12]
 801c4b0:	061a      	lsls	r2, r3, #24
 801c4b2:	d410      	bmi.n	801c4d6 <__swhatbuf_r+0x3e>
 801c4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c4b8:	e00e      	b.n	801c4d8 <__swhatbuf_r+0x40>
 801c4ba:	466a      	mov	r2, sp
 801c4bc:	f000 fef2 	bl	801d2a4 <_fstat_r>
 801c4c0:	2800      	cmp	r0, #0
 801c4c2:	dbf2      	blt.n	801c4aa <__swhatbuf_r+0x12>
 801c4c4:	9a01      	ldr	r2, [sp, #4]
 801c4c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c4ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c4ce:	425a      	negs	r2, r3
 801c4d0:	415a      	adcs	r2, r3
 801c4d2:	602a      	str	r2, [r5, #0]
 801c4d4:	e7ee      	b.n	801c4b4 <__swhatbuf_r+0x1c>
 801c4d6:	2340      	movs	r3, #64	; 0x40
 801c4d8:	2000      	movs	r0, #0
 801c4da:	6023      	str	r3, [r4, #0]
 801c4dc:	b016      	add	sp, #88	; 0x58
 801c4de:	bd70      	pop	{r4, r5, r6, pc}

0801c4e0 <__smakebuf_r>:
 801c4e0:	898b      	ldrh	r3, [r1, #12]
 801c4e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c4e4:	079d      	lsls	r5, r3, #30
 801c4e6:	4606      	mov	r6, r0
 801c4e8:	460c      	mov	r4, r1
 801c4ea:	d507      	bpl.n	801c4fc <__smakebuf_r+0x1c>
 801c4ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c4f0:	6023      	str	r3, [r4, #0]
 801c4f2:	6123      	str	r3, [r4, #16]
 801c4f4:	2301      	movs	r3, #1
 801c4f6:	6163      	str	r3, [r4, #20]
 801c4f8:	b002      	add	sp, #8
 801c4fa:	bd70      	pop	{r4, r5, r6, pc}
 801c4fc:	ab01      	add	r3, sp, #4
 801c4fe:	466a      	mov	r2, sp
 801c500:	f7ff ffca 	bl	801c498 <__swhatbuf_r>
 801c504:	9900      	ldr	r1, [sp, #0]
 801c506:	4605      	mov	r5, r0
 801c508:	4630      	mov	r0, r6
 801c50a:	f000 fb69 	bl	801cbe0 <_malloc_r>
 801c50e:	b948      	cbnz	r0, 801c524 <__smakebuf_r+0x44>
 801c510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c514:	059a      	lsls	r2, r3, #22
 801c516:	d4ef      	bmi.n	801c4f8 <__smakebuf_r+0x18>
 801c518:	f023 0303 	bic.w	r3, r3, #3
 801c51c:	f043 0302 	orr.w	r3, r3, #2
 801c520:	81a3      	strh	r3, [r4, #12]
 801c522:	e7e3      	b.n	801c4ec <__smakebuf_r+0xc>
 801c524:	4b0d      	ldr	r3, [pc, #52]	; (801c55c <__smakebuf_r+0x7c>)
 801c526:	62b3      	str	r3, [r6, #40]	; 0x28
 801c528:	89a3      	ldrh	r3, [r4, #12]
 801c52a:	6020      	str	r0, [r4, #0]
 801c52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c530:	81a3      	strh	r3, [r4, #12]
 801c532:	9b00      	ldr	r3, [sp, #0]
 801c534:	6163      	str	r3, [r4, #20]
 801c536:	9b01      	ldr	r3, [sp, #4]
 801c538:	6120      	str	r0, [r4, #16]
 801c53a:	b15b      	cbz	r3, 801c554 <__smakebuf_r+0x74>
 801c53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c540:	4630      	mov	r0, r6
 801c542:	f000 fec1 	bl	801d2c8 <_isatty_r>
 801c546:	b128      	cbz	r0, 801c554 <__smakebuf_r+0x74>
 801c548:	89a3      	ldrh	r3, [r4, #12]
 801c54a:	f023 0303 	bic.w	r3, r3, #3
 801c54e:	f043 0301 	orr.w	r3, r3, #1
 801c552:	81a3      	strh	r3, [r4, #12]
 801c554:	89a3      	ldrh	r3, [r4, #12]
 801c556:	431d      	orrs	r5, r3
 801c558:	81a5      	strh	r5, [r4, #12]
 801c55a:	e7cd      	b.n	801c4f8 <__smakebuf_r+0x18>
 801c55c:	0801c331 	.word	0x0801c331

0801c560 <malloc>:
 801c560:	4b02      	ldr	r3, [pc, #8]	; (801c56c <malloc+0xc>)
 801c562:	4601      	mov	r1, r0
 801c564:	6818      	ldr	r0, [r3, #0]
 801c566:	f000 bb3b 	b.w	801cbe0 <_malloc_r>
 801c56a:	bf00      	nop
 801c56c:	2400003c 	.word	0x2400003c

0801c570 <_Balloc>:
 801c570:	b570      	push	{r4, r5, r6, lr}
 801c572:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c574:	4604      	mov	r4, r0
 801c576:	460e      	mov	r6, r1
 801c578:	b93d      	cbnz	r5, 801c58a <_Balloc+0x1a>
 801c57a:	2010      	movs	r0, #16
 801c57c:	f7ff fff0 	bl	801c560 <malloc>
 801c580:	6260      	str	r0, [r4, #36]	; 0x24
 801c582:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c586:	6005      	str	r5, [r0, #0]
 801c588:	60c5      	str	r5, [r0, #12]
 801c58a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c58c:	68eb      	ldr	r3, [r5, #12]
 801c58e:	b183      	cbz	r3, 801c5b2 <_Balloc+0x42>
 801c590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c592:	68db      	ldr	r3, [r3, #12]
 801c594:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801c598:	b9b8      	cbnz	r0, 801c5ca <_Balloc+0x5a>
 801c59a:	2101      	movs	r1, #1
 801c59c:	fa01 f506 	lsl.w	r5, r1, r6
 801c5a0:	1d6a      	adds	r2, r5, #5
 801c5a2:	0092      	lsls	r2, r2, #2
 801c5a4:	4620      	mov	r0, r4
 801c5a6:	f000 fabf 	bl	801cb28 <_calloc_r>
 801c5aa:	b160      	cbz	r0, 801c5c6 <_Balloc+0x56>
 801c5ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801c5b0:	e00e      	b.n	801c5d0 <_Balloc+0x60>
 801c5b2:	2221      	movs	r2, #33	; 0x21
 801c5b4:	2104      	movs	r1, #4
 801c5b6:	4620      	mov	r0, r4
 801c5b8:	f000 fab6 	bl	801cb28 <_calloc_r>
 801c5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5be:	60e8      	str	r0, [r5, #12]
 801c5c0:	68db      	ldr	r3, [r3, #12]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d1e4      	bne.n	801c590 <_Balloc+0x20>
 801c5c6:	2000      	movs	r0, #0
 801c5c8:	bd70      	pop	{r4, r5, r6, pc}
 801c5ca:	6802      	ldr	r2, [r0, #0]
 801c5cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c5d6:	e7f7      	b.n	801c5c8 <_Balloc+0x58>

0801c5d8 <_Bfree>:
 801c5d8:	b570      	push	{r4, r5, r6, lr}
 801c5da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801c5dc:	4606      	mov	r6, r0
 801c5de:	460d      	mov	r5, r1
 801c5e0:	b93c      	cbnz	r4, 801c5f2 <_Bfree+0x1a>
 801c5e2:	2010      	movs	r0, #16
 801c5e4:	f7ff ffbc 	bl	801c560 <malloc>
 801c5e8:	6270      	str	r0, [r6, #36]	; 0x24
 801c5ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c5ee:	6004      	str	r4, [r0, #0]
 801c5f0:	60c4      	str	r4, [r0, #12]
 801c5f2:	b13d      	cbz	r5, 801c604 <_Bfree+0x2c>
 801c5f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c5f6:	686a      	ldr	r2, [r5, #4]
 801c5f8:	68db      	ldr	r3, [r3, #12]
 801c5fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c5fe:	6029      	str	r1, [r5, #0]
 801c600:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801c604:	bd70      	pop	{r4, r5, r6, pc}

0801c606 <__multadd>:
 801c606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c60a:	690d      	ldr	r5, [r1, #16]
 801c60c:	461f      	mov	r7, r3
 801c60e:	4606      	mov	r6, r0
 801c610:	460c      	mov	r4, r1
 801c612:	f101 0c14 	add.w	ip, r1, #20
 801c616:	2300      	movs	r3, #0
 801c618:	f8dc 0000 	ldr.w	r0, [ip]
 801c61c:	b281      	uxth	r1, r0
 801c61e:	fb02 7101 	mla	r1, r2, r1, r7
 801c622:	0c0f      	lsrs	r7, r1, #16
 801c624:	0c00      	lsrs	r0, r0, #16
 801c626:	fb02 7000 	mla	r0, r2, r0, r7
 801c62a:	b289      	uxth	r1, r1
 801c62c:	3301      	adds	r3, #1
 801c62e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801c632:	429d      	cmp	r5, r3
 801c634:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801c638:	f84c 1b04 	str.w	r1, [ip], #4
 801c63c:	dcec      	bgt.n	801c618 <__multadd+0x12>
 801c63e:	b1d7      	cbz	r7, 801c676 <__multadd+0x70>
 801c640:	68a3      	ldr	r3, [r4, #8]
 801c642:	42ab      	cmp	r3, r5
 801c644:	dc12      	bgt.n	801c66c <__multadd+0x66>
 801c646:	6861      	ldr	r1, [r4, #4]
 801c648:	4630      	mov	r0, r6
 801c64a:	3101      	adds	r1, #1
 801c64c:	f7ff ff90 	bl	801c570 <_Balloc>
 801c650:	6922      	ldr	r2, [r4, #16]
 801c652:	3202      	adds	r2, #2
 801c654:	f104 010c 	add.w	r1, r4, #12
 801c658:	4680      	mov	r8, r0
 801c65a:	0092      	lsls	r2, r2, #2
 801c65c:	300c      	adds	r0, #12
 801c65e:	f7fe f972 	bl	801a946 <memcpy>
 801c662:	4621      	mov	r1, r4
 801c664:	4630      	mov	r0, r6
 801c666:	f7ff ffb7 	bl	801c5d8 <_Bfree>
 801c66a:	4644      	mov	r4, r8
 801c66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c670:	3501      	adds	r5, #1
 801c672:	615f      	str	r7, [r3, #20]
 801c674:	6125      	str	r5, [r4, #16]
 801c676:	4620      	mov	r0, r4
 801c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c67c <__hi0bits>:
 801c67c:	0c02      	lsrs	r2, r0, #16
 801c67e:	0412      	lsls	r2, r2, #16
 801c680:	4603      	mov	r3, r0
 801c682:	b9b2      	cbnz	r2, 801c6b2 <__hi0bits+0x36>
 801c684:	0403      	lsls	r3, r0, #16
 801c686:	2010      	movs	r0, #16
 801c688:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c68c:	bf04      	itt	eq
 801c68e:	021b      	lsleq	r3, r3, #8
 801c690:	3008      	addeq	r0, #8
 801c692:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c696:	bf04      	itt	eq
 801c698:	011b      	lsleq	r3, r3, #4
 801c69a:	3004      	addeq	r0, #4
 801c69c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c6a0:	bf04      	itt	eq
 801c6a2:	009b      	lsleq	r3, r3, #2
 801c6a4:	3002      	addeq	r0, #2
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	db06      	blt.n	801c6b8 <__hi0bits+0x3c>
 801c6aa:	005b      	lsls	r3, r3, #1
 801c6ac:	d503      	bpl.n	801c6b6 <__hi0bits+0x3a>
 801c6ae:	3001      	adds	r0, #1
 801c6b0:	4770      	bx	lr
 801c6b2:	2000      	movs	r0, #0
 801c6b4:	e7e8      	b.n	801c688 <__hi0bits+0xc>
 801c6b6:	2020      	movs	r0, #32
 801c6b8:	4770      	bx	lr

0801c6ba <__lo0bits>:
 801c6ba:	6803      	ldr	r3, [r0, #0]
 801c6bc:	f013 0207 	ands.w	r2, r3, #7
 801c6c0:	4601      	mov	r1, r0
 801c6c2:	d00b      	beq.n	801c6dc <__lo0bits+0x22>
 801c6c4:	07da      	lsls	r2, r3, #31
 801c6c6:	d423      	bmi.n	801c710 <__lo0bits+0x56>
 801c6c8:	0798      	lsls	r0, r3, #30
 801c6ca:	bf49      	itett	mi
 801c6cc:	085b      	lsrmi	r3, r3, #1
 801c6ce:	089b      	lsrpl	r3, r3, #2
 801c6d0:	2001      	movmi	r0, #1
 801c6d2:	600b      	strmi	r3, [r1, #0]
 801c6d4:	bf5c      	itt	pl
 801c6d6:	600b      	strpl	r3, [r1, #0]
 801c6d8:	2002      	movpl	r0, #2
 801c6da:	4770      	bx	lr
 801c6dc:	b298      	uxth	r0, r3
 801c6de:	b9a8      	cbnz	r0, 801c70c <__lo0bits+0x52>
 801c6e0:	0c1b      	lsrs	r3, r3, #16
 801c6e2:	2010      	movs	r0, #16
 801c6e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 801c6e8:	bf04      	itt	eq
 801c6ea:	0a1b      	lsreq	r3, r3, #8
 801c6ec:	3008      	addeq	r0, #8
 801c6ee:	071a      	lsls	r2, r3, #28
 801c6f0:	bf04      	itt	eq
 801c6f2:	091b      	lsreq	r3, r3, #4
 801c6f4:	3004      	addeq	r0, #4
 801c6f6:	079a      	lsls	r2, r3, #30
 801c6f8:	bf04      	itt	eq
 801c6fa:	089b      	lsreq	r3, r3, #2
 801c6fc:	3002      	addeq	r0, #2
 801c6fe:	07da      	lsls	r2, r3, #31
 801c700:	d402      	bmi.n	801c708 <__lo0bits+0x4e>
 801c702:	085b      	lsrs	r3, r3, #1
 801c704:	d006      	beq.n	801c714 <__lo0bits+0x5a>
 801c706:	3001      	adds	r0, #1
 801c708:	600b      	str	r3, [r1, #0]
 801c70a:	4770      	bx	lr
 801c70c:	4610      	mov	r0, r2
 801c70e:	e7e9      	b.n	801c6e4 <__lo0bits+0x2a>
 801c710:	2000      	movs	r0, #0
 801c712:	4770      	bx	lr
 801c714:	2020      	movs	r0, #32
 801c716:	4770      	bx	lr

0801c718 <__i2b>:
 801c718:	b510      	push	{r4, lr}
 801c71a:	460c      	mov	r4, r1
 801c71c:	2101      	movs	r1, #1
 801c71e:	f7ff ff27 	bl	801c570 <_Balloc>
 801c722:	2201      	movs	r2, #1
 801c724:	6144      	str	r4, [r0, #20]
 801c726:	6102      	str	r2, [r0, #16]
 801c728:	bd10      	pop	{r4, pc}

0801c72a <__multiply>:
 801c72a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c72e:	4614      	mov	r4, r2
 801c730:	690a      	ldr	r2, [r1, #16]
 801c732:	6923      	ldr	r3, [r4, #16]
 801c734:	429a      	cmp	r2, r3
 801c736:	bfb8      	it	lt
 801c738:	460b      	movlt	r3, r1
 801c73a:	4688      	mov	r8, r1
 801c73c:	bfbc      	itt	lt
 801c73e:	46a0      	movlt	r8, r4
 801c740:	461c      	movlt	r4, r3
 801c742:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c746:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c74a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c74e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c752:	eb07 0609 	add.w	r6, r7, r9
 801c756:	42b3      	cmp	r3, r6
 801c758:	bfb8      	it	lt
 801c75a:	3101      	addlt	r1, #1
 801c75c:	f7ff ff08 	bl	801c570 <_Balloc>
 801c760:	f100 0514 	add.w	r5, r0, #20
 801c764:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801c768:	462b      	mov	r3, r5
 801c76a:	2200      	movs	r2, #0
 801c76c:	4573      	cmp	r3, lr
 801c76e:	d316      	bcc.n	801c79e <__multiply+0x74>
 801c770:	f104 0214 	add.w	r2, r4, #20
 801c774:	f108 0114 	add.w	r1, r8, #20
 801c778:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801c77c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801c780:	9300      	str	r3, [sp, #0]
 801c782:	9b00      	ldr	r3, [sp, #0]
 801c784:	9201      	str	r2, [sp, #4]
 801c786:	4293      	cmp	r3, r2
 801c788:	d80c      	bhi.n	801c7a4 <__multiply+0x7a>
 801c78a:	2e00      	cmp	r6, #0
 801c78c:	dd03      	ble.n	801c796 <__multiply+0x6c>
 801c78e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c792:	2b00      	cmp	r3, #0
 801c794:	d05d      	beq.n	801c852 <__multiply+0x128>
 801c796:	6106      	str	r6, [r0, #16]
 801c798:	b003      	add	sp, #12
 801c79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c79e:	f843 2b04 	str.w	r2, [r3], #4
 801c7a2:	e7e3      	b.n	801c76c <__multiply+0x42>
 801c7a4:	f8b2 b000 	ldrh.w	fp, [r2]
 801c7a8:	f1bb 0f00 	cmp.w	fp, #0
 801c7ac:	d023      	beq.n	801c7f6 <__multiply+0xcc>
 801c7ae:	4689      	mov	r9, r1
 801c7b0:	46ac      	mov	ip, r5
 801c7b2:	f04f 0800 	mov.w	r8, #0
 801c7b6:	f859 4b04 	ldr.w	r4, [r9], #4
 801c7ba:	f8dc a000 	ldr.w	sl, [ip]
 801c7be:	b2a3      	uxth	r3, r4
 801c7c0:	fa1f fa8a 	uxth.w	sl, sl
 801c7c4:	fb0b a303 	mla	r3, fp, r3, sl
 801c7c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c7cc:	f8dc 4000 	ldr.w	r4, [ip]
 801c7d0:	4443      	add	r3, r8
 801c7d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c7d6:	fb0b 840a 	mla	r4, fp, sl, r8
 801c7da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801c7de:	46e2      	mov	sl, ip
 801c7e0:	b29b      	uxth	r3, r3
 801c7e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c7e6:	454f      	cmp	r7, r9
 801c7e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c7ec:	f84a 3b04 	str.w	r3, [sl], #4
 801c7f0:	d82b      	bhi.n	801c84a <__multiply+0x120>
 801c7f2:	f8cc 8004 	str.w	r8, [ip, #4]
 801c7f6:	9b01      	ldr	r3, [sp, #4]
 801c7f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801c7fc:	3204      	adds	r2, #4
 801c7fe:	f1ba 0f00 	cmp.w	sl, #0
 801c802:	d020      	beq.n	801c846 <__multiply+0x11c>
 801c804:	682b      	ldr	r3, [r5, #0]
 801c806:	4689      	mov	r9, r1
 801c808:	46a8      	mov	r8, r5
 801c80a:	f04f 0b00 	mov.w	fp, #0
 801c80e:	f8b9 c000 	ldrh.w	ip, [r9]
 801c812:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801c816:	fb0a 440c 	mla	r4, sl, ip, r4
 801c81a:	445c      	add	r4, fp
 801c81c:	46c4      	mov	ip, r8
 801c81e:	b29b      	uxth	r3, r3
 801c820:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c824:	f84c 3b04 	str.w	r3, [ip], #4
 801c828:	f859 3b04 	ldr.w	r3, [r9], #4
 801c82c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801c830:	0c1b      	lsrs	r3, r3, #16
 801c832:	fb0a b303 	mla	r3, sl, r3, fp
 801c836:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801c83a:	454f      	cmp	r7, r9
 801c83c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801c840:	d805      	bhi.n	801c84e <__multiply+0x124>
 801c842:	f8c8 3004 	str.w	r3, [r8, #4]
 801c846:	3504      	adds	r5, #4
 801c848:	e79b      	b.n	801c782 <__multiply+0x58>
 801c84a:	46d4      	mov	ip, sl
 801c84c:	e7b3      	b.n	801c7b6 <__multiply+0x8c>
 801c84e:	46e0      	mov	r8, ip
 801c850:	e7dd      	b.n	801c80e <__multiply+0xe4>
 801c852:	3e01      	subs	r6, #1
 801c854:	e799      	b.n	801c78a <__multiply+0x60>
	...

0801c858 <__pow5mult>:
 801c858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c85c:	4615      	mov	r5, r2
 801c85e:	f012 0203 	ands.w	r2, r2, #3
 801c862:	4606      	mov	r6, r0
 801c864:	460f      	mov	r7, r1
 801c866:	d007      	beq.n	801c878 <__pow5mult+0x20>
 801c868:	3a01      	subs	r2, #1
 801c86a:	4c21      	ldr	r4, [pc, #132]	; (801c8f0 <__pow5mult+0x98>)
 801c86c:	2300      	movs	r3, #0
 801c86e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c872:	f7ff fec8 	bl	801c606 <__multadd>
 801c876:	4607      	mov	r7, r0
 801c878:	10ad      	asrs	r5, r5, #2
 801c87a:	d035      	beq.n	801c8e8 <__pow5mult+0x90>
 801c87c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c87e:	b93c      	cbnz	r4, 801c890 <__pow5mult+0x38>
 801c880:	2010      	movs	r0, #16
 801c882:	f7ff fe6d 	bl	801c560 <malloc>
 801c886:	6270      	str	r0, [r6, #36]	; 0x24
 801c888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c88c:	6004      	str	r4, [r0, #0]
 801c88e:	60c4      	str	r4, [r0, #12]
 801c890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c898:	b94c      	cbnz	r4, 801c8ae <__pow5mult+0x56>
 801c89a:	f240 2171 	movw	r1, #625	; 0x271
 801c89e:	4630      	mov	r0, r6
 801c8a0:	f7ff ff3a 	bl	801c718 <__i2b>
 801c8a4:	2300      	movs	r3, #0
 801c8a6:	f8c8 0008 	str.w	r0, [r8, #8]
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	6003      	str	r3, [r0, #0]
 801c8ae:	f04f 0800 	mov.w	r8, #0
 801c8b2:	07eb      	lsls	r3, r5, #31
 801c8b4:	d50a      	bpl.n	801c8cc <__pow5mult+0x74>
 801c8b6:	4639      	mov	r1, r7
 801c8b8:	4622      	mov	r2, r4
 801c8ba:	4630      	mov	r0, r6
 801c8bc:	f7ff ff35 	bl	801c72a <__multiply>
 801c8c0:	4639      	mov	r1, r7
 801c8c2:	4681      	mov	r9, r0
 801c8c4:	4630      	mov	r0, r6
 801c8c6:	f7ff fe87 	bl	801c5d8 <_Bfree>
 801c8ca:	464f      	mov	r7, r9
 801c8cc:	106d      	asrs	r5, r5, #1
 801c8ce:	d00b      	beq.n	801c8e8 <__pow5mult+0x90>
 801c8d0:	6820      	ldr	r0, [r4, #0]
 801c8d2:	b938      	cbnz	r0, 801c8e4 <__pow5mult+0x8c>
 801c8d4:	4622      	mov	r2, r4
 801c8d6:	4621      	mov	r1, r4
 801c8d8:	4630      	mov	r0, r6
 801c8da:	f7ff ff26 	bl	801c72a <__multiply>
 801c8de:	6020      	str	r0, [r4, #0]
 801c8e0:	f8c0 8000 	str.w	r8, [r0]
 801c8e4:	4604      	mov	r4, r0
 801c8e6:	e7e4      	b.n	801c8b2 <__pow5mult+0x5a>
 801c8e8:	4638      	mov	r0, r7
 801c8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8ee:	bf00      	nop
 801c8f0:	08020a98 	.word	0x08020a98

0801c8f4 <__lshift>:
 801c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8f8:	460c      	mov	r4, r1
 801c8fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c8fe:	6923      	ldr	r3, [r4, #16]
 801c900:	6849      	ldr	r1, [r1, #4]
 801c902:	eb0a 0903 	add.w	r9, sl, r3
 801c906:	68a3      	ldr	r3, [r4, #8]
 801c908:	4607      	mov	r7, r0
 801c90a:	4616      	mov	r6, r2
 801c90c:	f109 0501 	add.w	r5, r9, #1
 801c910:	42ab      	cmp	r3, r5
 801c912:	db32      	blt.n	801c97a <__lshift+0x86>
 801c914:	4638      	mov	r0, r7
 801c916:	f7ff fe2b 	bl	801c570 <_Balloc>
 801c91a:	2300      	movs	r3, #0
 801c91c:	4680      	mov	r8, r0
 801c91e:	f100 0114 	add.w	r1, r0, #20
 801c922:	461a      	mov	r2, r3
 801c924:	4553      	cmp	r3, sl
 801c926:	db2b      	blt.n	801c980 <__lshift+0x8c>
 801c928:	6920      	ldr	r0, [r4, #16]
 801c92a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c92e:	f104 0314 	add.w	r3, r4, #20
 801c932:	f016 021f 	ands.w	r2, r6, #31
 801c936:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c93a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c93e:	d025      	beq.n	801c98c <__lshift+0x98>
 801c940:	f1c2 0e20 	rsb	lr, r2, #32
 801c944:	2000      	movs	r0, #0
 801c946:	681e      	ldr	r6, [r3, #0]
 801c948:	468a      	mov	sl, r1
 801c94a:	4096      	lsls	r6, r2
 801c94c:	4330      	orrs	r0, r6
 801c94e:	f84a 0b04 	str.w	r0, [sl], #4
 801c952:	f853 0b04 	ldr.w	r0, [r3], #4
 801c956:	459c      	cmp	ip, r3
 801c958:	fa20 f00e 	lsr.w	r0, r0, lr
 801c95c:	d814      	bhi.n	801c988 <__lshift+0x94>
 801c95e:	6048      	str	r0, [r1, #4]
 801c960:	b108      	cbz	r0, 801c966 <__lshift+0x72>
 801c962:	f109 0502 	add.w	r5, r9, #2
 801c966:	3d01      	subs	r5, #1
 801c968:	4638      	mov	r0, r7
 801c96a:	f8c8 5010 	str.w	r5, [r8, #16]
 801c96e:	4621      	mov	r1, r4
 801c970:	f7ff fe32 	bl	801c5d8 <_Bfree>
 801c974:	4640      	mov	r0, r8
 801c976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c97a:	3101      	adds	r1, #1
 801c97c:	005b      	lsls	r3, r3, #1
 801c97e:	e7c7      	b.n	801c910 <__lshift+0x1c>
 801c980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801c984:	3301      	adds	r3, #1
 801c986:	e7cd      	b.n	801c924 <__lshift+0x30>
 801c988:	4651      	mov	r1, sl
 801c98a:	e7dc      	b.n	801c946 <__lshift+0x52>
 801c98c:	3904      	subs	r1, #4
 801c98e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c992:	f841 2f04 	str.w	r2, [r1, #4]!
 801c996:	459c      	cmp	ip, r3
 801c998:	d8f9      	bhi.n	801c98e <__lshift+0x9a>
 801c99a:	e7e4      	b.n	801c966 <__lshift+0x72>

0801c99c <__mcmp>:
 801c99c:	6903      	ldr	r3, [r0, #16]
 801c99e:	690a      	ldr	r2, [r1, #16]
 801c9a0:	1a9b      	subs	r3, r3, r2
 801c9a2:	b530      	push	{r4, r5, lr}
 801c9a4:	d10c      	bne.n	801c9c0 <__mcmp+0x24>
 801c9a6:	0092      	lsls	r2, r2, #2
 801c9a8:	3014      	adds	r0, #20
 801c9aa:	3114      	adds	r1, #20
 801c9ac:	1884      	adds	r4, r0, r2
 801c9ae:	4411      	add	r1, r2
 801c9b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c9b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c9b8:	4295      	cmp	r5, r2
 801c9ba:	d003      	beq.n	801c9c4 <__mcmp+0x28>
 801c9bc:	d305      	bcc.n	801c9ca <__mcmp+0x2e>
 801c9be:	2301      	movs	r3, #1
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	bd30      	pop	{r4, r5, pc}
 801c9c4:	42a0      	cmp	r0, r4
 801c9c6:	d3f3      	bcc.n	801c9b0 <__mcmp+0x14>
 801c9c8:	e7fa      	b.n	801c9c0 <__mcmp+0x24>
 801c9ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c9ce:	e7f7      	b.n	801c9c0 <__mcmp+0x24>

0801c9d0 <__mdiff>:
 801c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9d4:	460d      	mov	r5, r1
 801c9d6:	4607      	mov	r7, r0
 801c9d8:	4611      	mov	r1, r2
 801c9da:	4628      	mov	r0, r5
 801c9dc:	4614      	mov	r4, r2
 801c9de:	f7ff ffdd 	bl	801c99c <__mcmp>
 801c9e2:	1e06      	subs	r6, r0, #0
 801c9e4:	d108      	bne.n	801c9f8 <__mdiff+0x28>
 801c9e6:	4631      	mov	r1, r6
 801c9e8:	4638      	mov	r0, r7
 801c9ea:	f7ff fdc1 	bl	801c570 <_Balloc>
 801c9ee:	2301      	movs	r3, #1
 801c9f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801c9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9f8:	bfa4      	itt	ge
 801c9fa:	4623      	movge	r3, r4
 801c9fc:	462c      	movge	r4, r5
 801c9fe:	4638      	mov	r0, r7
 801ca00:	6861      	ldr	r1, [r4, #4]
 801ca02:	bfa6      	itte	ge
 801ca04:	461d      	movge	r5, r3
 801ca06:	2600      	movge	r6, #0
 801ca08:	2601      	movlt	r6, #1
 801ca0a:	f7ff fdb1 	bl	801c570 <_Balloc>
 801ca0e:	692b      	ldr	r3, [r5, #16]
 801ca10:	60c6      	str	r6, [r0, #12]
 801ca12:	6926      	ldr	r6, [r4, #16]
 801ca14:	f105 0914 	add.w	r9, r5, #20
 801ca18:	f104 0214 	add.w	r2, r4, #20
 801ca1c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801ca20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801ca24:	f100 0514 	add.w	r5, r0, #20
 801ca28:	f04f 0e00 	mov.w	lr, #0
 801ca2c:	f852 ab04 	ldr.w	sl, [r2], #4
 801ca30:	f859 4b04 	ldr.w	r4, [r9], #4
 801ca34:	fa1e f18a 	uxtah	r1, lr, sl
 801ca38:	b2a3      	uxth	r3, r4
 801ca3a:	1ac9      	subs	r1, r1, r3
 801ca3c:	0c23      	lsrs	r3, r4, #16
 801ca3e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801ca42:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801ca46:	b289      	uxth	r1, r1
 801ca48:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801ca4c:	45c8      	cmp	r8, r9
 801ca4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801ca52:	4694      	mov	ip, r2
 801ca54:	f845 3b04 	str.w	r3, [r5], #4
 801ca58:	d8e8      	bhi.n	801ca2c <__mdiff+0x5c>
 801ca5a:	45bc      	cmp	ip, r7
 801ca5c:	d304      	bcc.n	801ca68 <__mdiff+0x98>
 801ca5e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801ca62:	b183      	cbz	r3, 801ca86 <__mdiff+0xb6>
 801ca64:	6106      	str	r6, [r0, #16]
 801ca66:	e7c5      	b.n	801c9f4 <__mdiff+0x24>
 801ca68:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ca6c:	fa1e f381 	uxtah	r3, lr, r1
 801ca70:	141a      	asrs	r2, r3, #16
 801ca72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ca76:	b29b      	uxth	r3, r3
 801ca78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ca7c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ca80:	f845 3b04 	str.w	r3, [r5], #4
 801ca84:	e7e9      	b.n	801ca5a <__mdiff+0x8a>
 801ca86:	3e01      	subs	r6, #1
 801ca88:	e7e9      	b.n	801ca5e <__mdiff+0x8e>

0801ca8a <__d2b>:
 801ca8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ca8e:	460e      	mov	r6, r1
 801ca90:	2101      	movs	r1, #1
 801ca92:	ec59 8b10 	vmov	r8, r9, d0
 801ca96:	4615      	mov	r5, r2
 801ca98:	f7ff fd6a 	bl	801c570 <_Balloc>
 801ca9c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801caa0:	4607      	mov	r7, r0
 801caa2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801caa6:	bb34      	cbnz	r4, 801caf6 <__d2b+0x6c>
 801caa8:	9301      	str	r3, [sp, #4]
 801caaa:	f1b8 0300 	subs.w	r3, r8, #0
 801caae:	d027      	beq.n	801cb00 <__d2b+0x76>
 801cab0:	a802      	add	r0, sp, #8
 801cab2:	f840 3d08 	str.w	r3, [r0, #-8]!
 801cab6:	f7ff fe00 	bl	801c6ba <__lo0bits>
 801caba:	9900      	ldr	r1, [sp, #0]
 801cabc:	b1f0      	cbz	r0, 801cafc <__d2b+0x72>
 801cabe:	9a01      	ldr	r2, [sp, #4]
 801cac0:	f1c0 0320 	rsb	r3, r0, #32
 801cac4:	fa02 f303 	lsl.w	r3, r2, r3
 801cac8:	430b      	orrs	r3, r1
 801caca:	40c2      	lsrs	r2, r0
 801cacc:	617b      	str	r3, [r7, #20]
 801cace:	9201      	str	r2, [sp, #4]
 801cad0:	9b01      	ldr	r3, [sp, #4]
 801cad2:	61bb      	str	r3, [r7, #24]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	bf14      	ite	ne
 801cad8:	2102      	movne	r1, #2
 801cada:	2101      	moveq	r1, #1
 801cadc:	6139      	str	r1, [r7, #16]
 801cade:	b1c4      	cbz	r4, 801cb12 <__d2b+0x88>
 801cae0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801cae4:	4404      	add	r4, r0
 801cae6:	6034      	str	r4, [r6, #0]
 801cae8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801caec:	6028      	str	r0, [r5, #0]
 801caee:	4638      	mov	r0, r7
 801caf0:	b003      	add	sp, #12
 801caf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801caf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cafa:	e7d5      	b.n	801caa8 <__d2b+0x1e>
 801cafc:	6179      	str	r1, [r7, #20]
 801cafe:	e7e7      	b.n	801cad0 <__d2b+0x46>
 801cb00:	a801      	add	r0, sp, #4
 801cb02:	f7ff fdda 	bl	801c6ba <__lo0bits>
 801cb06:	9b01      	ldr	r3, [sp, #4]
 801cb08:	617b      	str	r3, [r7, #20]
 801cb0a:	2101      	movs	r1, #1
 801cb0c:	6139      	str	r1, [r7, #16]
 801cb0e:	3020      	adds	r0, #32
 801cb10:	e7e5      	b.n	801cade <__d2b+0x54>
 801cb12:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801cb16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cb1a:	6030      	str	r0, [r6, #0]
 801cb1c:	6918      	ldr	r0, [r3, #16]
 801cb1e:	f7ff fdad 	bl	801c67c <__hi0bits>
 801cb22:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801cb26:	e7e1      	b.n	801caec <__d2b+0x62>

0801cb28 <_calloc_r>:
 801cb28:	b538      	push	{r3, r4, r5, lr}
 801cb2a:	fb02 f401 	mul.w	r4, r2, r1
 801cb2e:	4621      	mov	r1, r4
 801cb30:	f000 f856 	bl	801cbe0 <_malloc_r>
 801cb34:	4605      	mov	r5, r0
 801cb36:	b118      	cbz	r0, 801cb40 <_calloc_r+0x18>
 801cb38:	4622      	mov	r2, r4
 801cb3a:	2100      	movs	r1, #0
 801cb3c:	f7fd ff27 	bl	801a98e <memset>
 801cb40:	4628      	mov	r0, r5
 801cb42:	bd38      	pop	{r3, r4, r5, pc}

0801cb44 <_free_r>:
 801cb44:	b538      	push	{r3, r4, r5, lr}
 801cb46:	4605      	mov	r5, r0
 801cb48:	2900      	cmp	r1, #0
 801cb4a:	d045      	beq.n	801cbd8 <_free_r+0x94>
 801cb4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb50:	1f0c      	subs	r4, r1, #4
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	bfb8      	it	lt
 801cb56:	18e4      	addlt	r4, r4, r3
 801cb58:	f000 fbd8 	bl	801d30c <__malloc_lock>
 801cb5c:	4a1f      	ldr	r2, [pc, #124]	; (801cbdc <_free_r+0x98>)
 801cb5e:	6813      	ldr	r3, [r2, #0]
 801cb60:	4610      	mov	r0, r2
 801cb62:	b933      	cbnz	r3, 801cb72 <_free_r+0x2e>
 801cb64:	6063      	str	r3, [r4, #4]
 801cb66:	6014      	str	r4, [r2, #0]
 801cb68:	4628      	mov	r0, r5
 801cb6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb6e:	f000 bbce 	b.w	801d30e <__malloc_unlock>
 801cb72:	42a3      	cmp	r3, r4
 801cb74:	d90c      	bls.n	801cb90 <_free_r+0x4c>
 801cb76:	6821      	ldr	r1, [r4, #0]
 801cb78:	1862      	adds	r2, r4, r1
 801cb7a:	4293      	cmp	r3, r2
 801cb7c:	bf04      	itt	eq
 801cb7e:	681a      	ldreq	r2, [r3, #0]
 801cb80:	685b      	ldreq	r3, [r3, #4]
 801cb82:	6063      	str	r3, [r4, #4]
 801cb84:	bf04      	itt	eq
 801cb86:	1852      	addeq	r2, r2, r1
 801cb88:	6022      	streq	r2, [r4, #0]
 801cb8a:	6004      	str	r4, [r0, #0]
 801cb8c:	e7ec      	b.n	801cb68 <_free_r+0x24>
 801cb8e:	4613      	mov	r3, r2
 801cb90:	685a      	ldr	r2, [r3, #4]
 801cb92:	b10a      	cbz	r2, 801cb98 <_free_r+0x54>
 801cb94:	42a2      	cmp	r2, r4
 801cb96:	d9fa      	bls.n	801cb8e <_free_r+0x4a>
 801cb98:	6819      	ldr	r1, [r3, #0]
 801cb9a:	1858      	adds	r0, r3, r1
 801cb9c:	42a0      	cmp	r0, r4
 801cb9e:	d10b      	bne.n	801cbb8 <_free_r+0x74>
 801cba0:	6820      	ldr	r0, [r4, #0]
 801cba2:	4401      	add	r1, r0
 801cba4:	1858      	adds	r0, r3, r1
 801cba6:	4282      	cmp	r2, r0
 801cba8:	6019      	str	r1, [r3, #0]
 801cbaa:	d1dd      	bne.n	801cb68 <_free_r+0x24>
 801cbac:	6810      	ldr	r0, [r2, #0]
 801cbae:	6852      	ldr	r2, [r2, #4]
 801cbb0:	605a      	str	r2, [r3, #4]
 801cbb2:	4401      	add	r1, r0
 801cbb4:	6019      	str	r1, [r3, #0]
 801cbb6:	e7d7      	b.n	801cb68 <_free_r+0x24>
 801cbb8:	d902      	bls.n	801cbc0 <_free_r+0x7c>
 801cbba:	230c      	movs	r3, #12
 801cbbc:	602b      	str	r3, [r5, #0]
 801cbbe:	e7d3      	b.n	801cb68 <_free_r+0x24>
 801cbc0:	6820      	ldr	r0, [r4, #0]
 801cbc2:	1821      	adds	r1, r4, r0
 801cbc4:	428a      	cmp	r2, r1
 801cbc6:	bf04      	itt	eq
 801cbc8:	6811      	ldreq	r1, [r2, #0]
 801cbca:	6852      	ldreq	r2, [r2, #4]
 801cbcc:	6062      	str	r2, [r4, #4]
 801cbce:	bf04      	itt	eq
 801cbd0:	1809      	addeq	r1, r1, r0
 801cbd2:	6021      	streq	r1, [r4, #0]
 801cbd4:	605c      	str	r4, [r3, #4]
 801cbd6:	e7c7      	b.n	801cb68 <_free_r+0x24>
 801cbd8:	bd38      	pop	{r3, r4, r5, pc}
 801cbda:	bf00      	nop
 801cbdc:	24004b70 	.word	0x24004b70

0801cbe0 <_malloc_r>:
 801cbe0:	b570      	push	{r4, r5, r6, lr}
 801cbe2:	1ccd      	adds	r5, r1, #3
 801cbe4:	f025 0503 	bic.w	r5, r5, #3
 801cbe8:	3508      	adds	r5, #8
 801cbea:	2d0c      	cmp	r5, #12
 801cbec:	bf38      	it	cc
 801cbee:	250c      	movcc	r5, #12
 801cbf0:	2d00      	cmp	r5, #0
 801cbf2:	4606      	mov	r6, r0
 801cbf4:	db01      	blt.n	801cbfa <_malloc_r+0x1a>
 801cbf6:	42a9      	cmp	r1, r5
 801cbf8:	d903      	bls.n	801cc02 <_malloc_r+0x22>
 801cbfa:	230c      	movs	r3, #12
 801cbfc:	6033      	str	r3, [r6, #0]
 801cbfe:	2000      	movs	r0, #0
 801cc00:	bd70      	pop	{r4, r5, r6, pc}
 801cc02:	f000 fb83 	bl	801d30c <__malloc_lock>
 801cc06:	4a21      	ldr	r2, [pc, #132]	; (801cc8c <_malloc_r+0xac>)
 801cc08:	6814      	ldr	r4, [r2, #0]
 801cc0a:	4621      	mov	r1, r4
 801cc0c:	b991      	cbnz	r1, 801cc34 <_malloc_r+0x54>
 801cc0e:	4c20      	ldr	r4, [pc, #128]	; (801cc90 <_malloc_r+0xb0>)
 801cc10:	6823      	ldr	r3, [r4, #0]
 801cc12:	b91b      	cbnz	r3, 801cc1c <_malloc_r+0x3c>
 801cc14:	4630      	mov	r0, r6
 801cc16:	f000 facf 	bl	801d1b8 <_sbrk_r>
 801cc1a:	6020      	str	r0, [r4, #0]
 801cc1c:	4629      	mov	r1, r5
 801cc1e:	4630      	mov	r0, r6
 801cc20:	f000 faca 	bl	801d1b8 <_sbrk_r>
 801cc24:	1c43      	adds	r3, r0, #1
 801cc26:	d124      	bne.n	801cc72 <_malloc_r+0x92>
 801cc28:	230c      	movs	r3, #12
 801cc2a:	6033      	str	r3, [r6, #0]
 801cc2c:	4630      	mov	r0, r6
 801cc2e:	f000 fb6e 	bl	801d30e <__malloc_unlock>
 801cc32:	e7e4      	b.n	801cbfe <_malloc_r+0x1e>
 801cc34:	680b      	ldr	r3, [r1, #0]
 801cc36:	1b5b      	subs	r3, r3, r5
 801cc38:	d418      	bmi.n	801cc6c <_malloc_r+0x8c>
 801cc3a:	2b0b      	cmp	r3, #11
 801cc3c:	d90f      	bls.n	801cc5e <_malloc_r+0x7e>
 801cc3e:	600b      	str	r3, [r1, #0]
 801cc40:	50cd      	str	r5, [r1, r3]
 801cc42:	18cc      	adds	r4, r1, r3
 801cc44:	4630      	mov	r0, r6
 801cc46:	f000 fb62 	bl	801d30e <__malloc_unlock>
 801cc4a:	f104 000b 	add.w	r0, r4, #11
 801cc4e:	1d23      	adds	r3, r4, #4
 801cc50:	f020 0007 	bic.w	r0, r0, #7
 801cc54:	1ac3      	subs	r3, r0, r3
 801cc56:	d0d3      	beq.n	801cc00 <_malloc_r+0x20>
 801cc58:	425a      	negs	r2, r3
 801cc5a:	50e2      	str	r2, [r4, r3]
 801cc5c:	e7d0      	b.n	801cc00 <_malloc_r+0x20>
 801cc5e:	428c      	cmp	r4, r1
 801cc60:	684b      	ldr	r3, [r1, #4]
 801cc62:	bf16      	itet	ne
 801cc64:	6063      	strne	r3, [r4, #4]
 801cc66:	6013      	streq	r3, [r2, #0]
 801cc68:	460c      	movne	r4, r1
 801cc6a:	e7eb      	b.n	801cc44 <_malloc_r+0x64>
 801cc6c:	460c      	mov	r4, r1
 801cc6e:	6849      	ldr	r1, [r1, #4]
 801cc70:	e7cc      	b.n	801cc0c <_malloc_r+0x2c>
 801cc72:	1cc4      	adds	r4, r0, #3
 801cc74:	f024 0403 	bic.w	r4, r4, #3
 801cc78:	42a0      	cmp	r0, r4
 801cc7a:	d005      	beq.n	801cc88 <_malloc_r+0xa8>
 801cc7c:	1a21      	subs	r1, r4, r0
 801cc7e:	4630      	mov	r0, r6
 801cc80:	f000 fa9a 	bl	801d1b8 <_sbrk_r>
 801cc84:	3001      	adds	r0, #1
 801cc86:	d0cf      	beq.n	801cc28 <_malloc_r+0x48>
 801cc88:	6025      	str	r5, [r4, #0]
 801cc8a:	e7db      	b.n	801cc44 <_malloc_r+0x64>
 801cc8c:	24004b70 	.word	0x24004b70
 801cc90:	24004b74 	.word	0x24004b74

0801cc94 <__ssputs_r>:
 801cc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc98:	688e      	ldr	r6, [r1, #8]
 801cc9a:	429e      	cmp	r6, r3
 801cc9c:	4682      	mov	sl, r0
 801cc9e:	460c      	mov	r4, r1
 801cca0:	4690      	mov	r8, r2
 801cca2:	4699      	mov	r9, r3
 801cca4:	d837      	bhi.n	801cd16 <__ssputs_r+0x82>
 801cca6:	898a      	ldrh	r2, [r1, #12]
 801cca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ccac:	d031      	beq.n	801cd12 <__ssputs_r+0x7e>
 801ccae:	6825      	ldr	r5, [r4, #0]
 801ccb0:	6909      	ldr	r1, [r1, #16]
 801ccb2:	1a6f      	subs	r7, r5, r1
 801ccb4:	6965      	ldr	r5, [r4, #20]
 801ccb6:	2302      	movs	r3, #2
 801ccb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccbc:	fb95 f5f3 	sdiv	r5, r5, r3
 801ccc0:	f109 0301 	add.w	r3, r9, #1
 801ccc4:	443b      	add	r3, r7
 801ccc6:	429d      	cmp	r5, r3
 801ccc8:	bf38      	it	cc
 801ccca:	461d      	movcc	r5, r3
 801cccc:	0553      	lsls	r3, r2, #21
 801ccce:	d530      	bpl.n	801cd32 <__ssputs_r+0x9e>
 801ccd0:	4629      	mov	r1, r5
 801ccd2:	f7ff ff85 	bl	801cbe0 <_malloc_r>
 801ccd6:	4606      	mov	r6, r0
 801ccd8:	b950      	cbnz	r0, 801ccf0 <__ssputs_r+0x5c>
 801ccda:	230c      	movs	r3, #12
 801ccdc:	f8ca 3000 	str.w	r3, [sl]
 801cce0:	89a3      	ldrh	r3, [r4, #12]
 801cce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cce6:	81a3      	strh	r3, [r4, #12]
 801cce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccf0:	463a      	mov	r2, r7
 801ccf2:	6921      	ldr	r1, [r4, #16]
 801ccf4:	f7fd fe27 	bl	801a946 <memcpy>
 801ccf8:	89a3      	ldrh	r3, [r4, #12]
 801ccfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ccfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cd02:	81a3      	strh	r3, [r4, #12]
 801cd04:	6126      	str	r6, [r4, #16]
 801cd06:	6165      	str	r5, [r4, #20]
 801cd08:	443e      	add	r6, r7
 801cd0a:	1bed      	subs	r5, r5, r7
 801cd0c:	6026      	str	r6, [r4, #0]
 801cd0e:	60a5      	str	r5, [r4, #8]
 801cd10:	464e      	mov	r6, r9
 801cd12:	454e      	cmp	r6, r9
 801cd14:	d900      	bls.n	801cd18 <__ssputs_r+0x84>
 801cd16:	464e      	mov	r6, r9
 801cd18:	4632      	mov	r2, r6
 801cd1a:	4641      	mov	r1, r8
 801cd1c:	6820      	ldr	r0, [r4, #0]
 801cd1e:	f7fd fe1d 	bl	801a95c <memmove>
 801cd22:	68a3      	ldr	r3, [r4, #8]
 801cd24:	1b9b      	subs	r3, r3, r6
 801cd26:	60a3      	str	r3, [r4, #8]
 801cd28:	6823      	ldr	r3, [r4, #0]
 801cd2a:	441e      	add	r6, r3
 801cd2c:	6026      	str	r6, [r4, #0]
 801cd2e:	2000      	movs	r0, #0
 801cd30:	e7dc      	b.n	801ccec <__ssputs_r+0x58>
 801cd32:	462a      	mov	r2, r5
 801cd34:	f000 faec 	bl	801d310 <_realloc_r>
 801cd38:	4606      	mov	r6, r0
 801cd3a:	2800      	cmp	r0, #0
 801cd3c:	d1e2      	bne.n	801cd04 <__ssputs_r+0x70>
 801cd3e:	6921      	ldr	r1, [r4, #16]
 801cd40:	4650      	mov	r0, sl
 801cd42:	f7ff feff 	bl	801cb44 <_free_r>
 801cd46:	e7c8      	b.n	801ccda <__ssputs_r+0x46>

0801cd48 <_svfiprintf_r>:
 801cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd4c:	461d      	mov	r5, r3
 801cd4e:	898b      	ldrh	r3, [r1, #12]
 801cd50:	061f      	lsls	r7, r3, #24
 801cd52:	b09d      	sub	sp, #116	; 0x74
 801cd54:	4680      	mov	r8, r0
 801cd56:	460c      	mov	r4, r1
 801cd58:	4616      	mov	r6, r2
 801cd5a:	d50f      	bpl.n	801cd7c <_svfiprintf_r+0x34>
 801cd5c:	690b      	ldr	r3, [r1, #16]
 801cd5e:	b96b      	cbnz	r3, 801cd7c <_svfiprintf_r+0x34>
 801cd60:	2140      	movs	r1, #64	; 0x40
 801cd62:	f7ff ff3d 	bl	801cbe0 <_malloc_r>
 801cd66:	6020      	str	r0, [r4, #0]
 801cd68:	6120      	str	r0, [r4, #16]
 801cd6a:	b928      	cbnz	r0, 801cd78 <_svfiprintf_r+0x30>
 801cd6c:	230c      	movs	r3, #12
 801cd6e:	f8c8 3000 	str.w	r3, [r8]
 801cd72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd76:	e0c8      	b.n	801cf0a <_svfiprintf_r+0x1c2>
 801cd78:	2340      	movs	r3, #64	; 0x40
 801cd7a:	6163      	str	r3, [r4, #20]
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	9309      	str	r3, [sp, #36]	; 0x24
 801cd80:	2320      	movs	r3, #32
 801cd82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cd86:	2330      	movs	r3, #48	; 0x30
 801cd88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cd8c:	9503      	str	r5, [sp, #12]
 801cd8e:	f04f 0b01 	mov.w	fp, #1
 801cd92:	4637      	mov	r7, r6
 801cd94:	463d      	mov	r5, r7
 801cd96:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cd9a:	b10b      	cbz	r3, 801cda0 <_svfiprintf_r+0x58>
 801cd9c:	2b25      	cmp	r3, #37	; 0x25
 801cd9e:	d13e      	bne.n	801ce1e <_svfiprintf_r+0xd6>
 801cda0:	ebb7 0a06 	subs.w	sl, r7, r6
 801cda4:	d00b      	beq.n	801cdbe <_svfiprintf_r+0x76>
 801cda6:	4653      	mov	r3, sl
 801cda8:	4632      	mov	r2, r6
 801cdaa:	4621      	mov	r1, r4
 801cdac:	4640      	mov	r0, r8
 801cdae:	f7ff ff71 	bl	801cc94 <__ssputs_r>
 801cdb2:	3001      	adds	r0, #1
 801cdb4:	f000 80a4 	beq.w	801cf00 <_svfiprintf_r+0x1b8>
 801cdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdba:	4453      	add	r3, sl
 801cdbc:	9309      	str	r3, [sp, #36]	; 0x24
 801cdbe:	783b      	ldrb	r3, [r7, #0]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	f000 809d 	beq.w	801cf00 <_svfiprintf_r+0x1b8>
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cdcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cdd0:	9304      	str	r3, [sp, #16]
 801cdd2:	9307      	str	r3, [sp, #28]
 801cdd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cdd8:	931a      	str	r3, [sp, #104]	; 0x68
 801cdda:	462f      	mov	r7, r5
 801cddc:	2205      	movs	r2, #5
 801cdde:	f817 1b01 	ldrb.w	r1, [r7], #1
 801cde2:	4850      	ldr	r0, [pc, #320]	; (801cf24 <_svfiprintf_r+0x1dc>)
 801cde4:	f7e3 fa94 	bl	8000310 <memchr>
 801cde8:	9b04      	ldr	r3, [sp, #16]
 801cdea:	b9d0      	cbnz	r0, 801ce22 <_svfiprintf_r+0xda>
 801cdec:	06d9      	lsls	r1, r3, #27
 801cdee:	bf44      	itt	mi
 801cdf0:	2220      	movmi	r2, #32
 801cdf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cdf6:	071a      	lsls	r2, r3, #28
 801cdf8:	bf44      	itt	mi
 801cdfa:	222b      	movmi	r2, #43	; 0x2b
 801cdfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ce00:	782a      	ldrb	r2, [r5, #0]
 801ce02:	2a2a      	cmp	r2, #42	; 0x2a
 801ce04:	d015      	beq.n	801ce32 <_svfiprintf_r+0xea>
 801ce06:	9a07      	ldr	r2, [sp, #28]
 801ce08:	462f      	mov	r7, r5
 801ce0a:	2000      	movs	r0, #0
 801ce0c:	250a      	movs	r5, #10
 801ce0e:	4639      	mov	r1, r7
 801ce10:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce14:	3b30      	subs	r3, #48	; 0x30
 801ce16:	2b09      	cmp	r3, #9
 801ce18:	d94d      	bls.n	801ceb6 <_svfiprintf_r+0x16e>
 801ce1a:	b1b8      	cbz	r0, 801ce4c <_svfiprintf_r+0x104>
 801ce1c:	e00f      	b.n	801ce3e <_svfiprintf_r+0xf6>
 801ce1e:	462f      	mov	r7, r5
 801ce20:	e7b8      	b.n	801cd94 <_svfiprintf_r+0x4c>
 801ce22:	4a40      	ldr	r2, [pc, #256]	; (801cf24 <_svfiprintf_r+0x1dc>)
 801ce24:	1a80      	subs	r0, r0, r2
 801ce26:	fa0b f000 	lsl.w	r0, fp, r0
 801ce2a:	4318      	orrs	r0, r3
 801ce2c:	9004      	str	r0, [sp, #16]
 801ce2e:	463d      	mov	r5, r7
 801ce30:	e7d3      	b.n	801cdda <_svfiprintf_r+0x92>
 801ce32:	9a03      	ldr	r2, [sp, #12]
 801ce34:	1d11      	adds	r1, r2, #4
 801ce36:	6812      	ldr	r2, [r2, #0]
 801ce38:	9103      	str	r1, [sp, #12]
 801ce3a:	2a00      	cmp	r2, #0
 801ce3c:	db01      	blt.n	801ce42 <_svfiprintf_r+0xfa>
 801ce3e:	9207      	str	r2, [sp, #28]
 801ce40:	e004      	b.n	801ce4c <_svfiprintf_r+0x104>
 801ce42:	4252      	negs	r2, r2
 801ce44:	f043 0302 	orr.w	r3, r3, #2
 801ce48:	9207      	str	r2, [sp, #28]
 801ce4a:	9304      	str	r3, [sp, #16]
 801ce4c:	783b      	ldrb	r3, [r7, #0]
 801ce4e:	2b2e      	cmp	r3, #46	; 0x2e
 801ce50:	d10c      	bne.n	801ce6c <_svfiprintf_r+0x124>
 801ce52:	787b      	ldrb	r3, [r7, #1]
 801ce54:	2b2a      	cmp	r3, #42	; 0x2a
 801ce56:	d133      	bne.n	801cec0 <_svfiprintf_r+0x178>
 801ce58:	9b03      	ldr	r3, [sp, #12]
 801ce5a:	1d1a      	adds	r2, r3, #4
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	9203      	str	r2, [sp, #12]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	bfb8      	it	lt
 801ce64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ce68:	3702      	adds	r7, #2
 801ce6a:	9305      	str	r3, [sp, #20]
 801ce6c:	4d2e      	ldr	r5, [pc, #184]	; (801cf28 <_svfiprintf_r+0x1e0>)
 801ce6e:	7839      	ldrb	r1, [r7, #0]
 801ce70:	2203      	movs	r2, #3
 801ce72:	4628      	mov	r0, r5
 801ce74:	f7e3 fa4c 	bl	8000310 <memchr>
 801ce78:	b138      	cbz	r0, 801ce8a <_svfiprintf_r+0x142>
 801ce7a:	2340      	movs	r3, #64	; 0x40
 801ce7c:	1b40      	subs	r0, r0, r5
 801ce7e:	fa03 f000 	lsl.w	r0, r3, r0
 801ce82:	9b04      	ldr	r3, [sp, #16]
 801ce84:	4303      	orrs	r3, r0
 801ce86:	3701      	adds	r7, #1
 801ce88:	9304      	str	r3, [sp, #16]
 801ce8a:	7839      	ldrb	r1, [r7, #0]
 801ce8c:	4827      	ldr	r0, [pc, #156]	; (801cf2c <_svfiprintf_r+0x1e4>)
 801ce8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ce92:	2206      	movs	r2, #6
 801ce94:	1c7e      	adds	r6, r7, #1
 801ce96:	f7e3 fa3b 	bl	8000310 <memchr>
 801ce9a:	2800      	cmp	r0, #0
 801ce9c:	d038      	beq.n	801cf10 <_svfiprintf_r+0x1c8>
 801ce9e:	4b24      	ldr	r3, [pc, #144]	; (801cf30 <_svfiprintf_r+0x1e8>)
 801cea0:	bb13      	cbnz	r3, 801cee8 <_svfiprintf_r+0x1a0>
 801cea2:	9b03      	ldr	r3, [sp, #12]
 801cea4:	3307      	adds	r3, #7
 801cea6:	f023 0307 	bic.w	r3, r3, #7
 801ceaa:	3308      	adds	r3, #8
 801ceac:	9303      	str	r3, [sp, #12]
 801ceae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ceb0:	444b      	add	r3, r9
 801ceb2:	9309      	str	r3, [sp, #36]	; 0x24
 801ceb4:	e76d      	b.n	801cd92 <_svfiprintf_r+0x4a>
 801ceb6:	fb05 3202 	mla	r2, r5, r2, r3
 801ceba:	2001      	movs	r0, #1
 801cebc:	460f      	mov	r7, r1
 801cebe:	e7a6      	b.n	801ce0e <_svfiprintf_r+0xc6>
 801cec0:	2300      	movs	r3, #0
 801cec2:	3701      	adds	r7, #1
 801cec4:	9305      	str	r3, [sp, #20]
 801cec6:	4619      	mov	r1, r3
 801cec8:	250a      	movs	r5, #10
 801ceca:	4638      	mov	r0, r7
 801cecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ced0:	3a30      	subs	r2, #48	; 0x30
 801ced2:	2a09      	cmp	r2, #9
 801ced4:	d903      	bls.n	801cede <_svfiprintf_r+0x196>
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d0c8      	beq.n	801ce6c <_svfiprintf_r+0x124>
 801ceda:	9105      	str	r1, [sp, #20]
 801cedc:	e7c6      	b.n	801ce6c <_svfiprintf_r+0x124>
 801cede:	fb05 2101 	mla	r1, r5, r1, r2
 801cee2:	2301      	movs	r3, #1
 801cee4:	4607      	mov	r7, r0
 801cee6:	e7f0      	b.n	801ceca <_svfiprintf_r+0x182>
 801cee8:	ab03      	add	r3, sp, #12
 801ceea:	9300      	str	r3, [sp, #0]
 801ceec:	4622      	mov	r2, r4
 801ceee:	4b11      	ldr	r3, [pc, #68]	; (801cf34 <_svfiprintf_r+0x1ec>)
 801cef0:	a904      	add	r1, sp, #16
 801cef2:	4640      	mov	r0, r8
 801cef4:	f7fd fdd8 	bl	801aaa8 <_printf_float>
 801cef8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801cefc:	4681      	mov	r9, r0
 801cefe:	d1d6      	bne.n	801ceae <_svfiprintf_r+0x166>
 801cf00:	89a3      	ldrh	r3, [r4, #12]
 801cf02:	065b      	lsls	r3, r3, #25
 801cf04:	f53f af35 	bmi.w	801cd72 <_svfiprintf_r+0x2a>
 801cf08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf0a:	b01d      	add	sp, #116	; 0x74
 801cf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf10:	ab03      	add	r3, sp, #12
 801cf12:	9300      	str	r3, [sp, #0]
 801cf14:	4622      	mov	r2, r4
 801cf16:	4b07      	ldr	r3, [pc, #28]	; (801cf34 <_svfiprintf_r+0x1ec>)
 801cf18:	a904      	add	r1, sp, #16
 801cf1a:	4640      	mov	r0, r8
 801cf1c:	f7fe f866 	bl	801afec <_printf_i>
 801cf20:	e7ea      	b.n	801cef8 <_svfiprintf_r+0x1b0>
 801cf22:	bf00      	nop
 801cf24:	08020aa4 	.word	0x08020aa4
 801cf28:	08020aaa 	.word	0x08020aaa
 801cf2c:	08020aae 	.word	0x08020aae
 801cf30:	0801aaa9 	.word	0x0801aaa9
 801cf34:	0801cc95 	.word	0x0801cc95

0801cf38 <__sfputc_r>:
 801cf38:	6893      	ldr	r3, [r2, #8]
 801cf3a:	3b01      	subs	r3, #1
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	b410      	push	{r4}
 801cf40:	6093      	str	r3, [r2, #8]
 801cf42:	da08      	bge.n	801cf56 <__sfputc_r+0x1e>
 801cf44:	6994      	ldr	r4, [r2, #24]
 801cf46:	42a3      	cmp	r3, r4
 801cf48:	db01      	blt.n	801cf4e <__sfputc_r+0x16>
 801cf4a:	290a      	cmp	r1, #10
 801cf4c:	d103      	bne.n	801cf56 <__sfputc_r+0x1e>
 801cf4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf52:	f7fe ba0d 	b.w	801b370 <__swbuf_r>
 801cf56:	6813      	ldr	r3, [r2, #0]
 801cf58:	1c58      	adds	r0, r3, #1
 801cf5a:	6010      	str	r0, [r2, #0]
 801cf5c:	7019      	strb	r1, [r3, #0]
 801cf5e:	4608      	mov	r0, r1
 801cf60:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf64:	4770      	bx	lr

0801cf66 <__sfputs_r>:
 801cf66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf68:	4606      	mov	r6, r0
 801cf6a:	460f      	mov	r7, r1
 801cf6c:	4614      	mov	r4, r2
 801cf6e:	18d5      	adds	r5, r2, r3
 801cf70:	42ac      	cmp	r4, r5
 801cf72:	d101      	bne.n	801cf78 <__sfputs_r+0x12>
 801cf74:	2000      	movs	r0, #0
 801cf76:	e007      	b.n	801cf88 <__sfputs_r+0x22>
 801cf78:	463a      	mov	r2, r7
 801cf7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf7e:	4630      	mov	r0, r6
 801cf80:	f7ff ffda 	bl	801cf38 <__sfputc_r>
 801cf84:	1c43      	adds	r3, r0, #1
 801cf86:	d1f3      	bne.n	801cf70 <__sfputs_r+0xa>
 801cf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cf8c <_vfiprintf_r>:
 801cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf90:	460c      	mov	r4, r1
 801cf92:	b09d      	sub	sp, #116	; 0x74
 801cf94:	4617      	mov	r7, r2
 801cf96:	461d      	mov	r5, r3
 801cf98:	4606      	mov	r6, r0
 801cf9a:	b118      	cbz	r0, 801cfa4 <_vfiprintf_r+0x18>
 801cf9c:	6983      	ldr	r3, [r0, #24]
 801cf9e:	b90b      	cbnz	r3, 801cfa4 <_vfiprintf_r+0x18>
 801cfa0:	f7ff f9e2 	bl	801c368 <__sinit>
 801cfa4:	4b7c      	ldr	r3, [pc, #496]	; (801d198 <_vfiprintf_r+0x20c>)
 801cfa6:	429c      	cmp	r4, r3
 801cfa8:	d158      	bne.n	801d05c <_vfiprintf_r+0xd0>
 801cfaa:	6874      	ldr	r4, [r6, #4]
 801cfac:	89a3      	ldrh	r3, [r4, #12]
 801cfae:	0718      	lsls	r0, r3, #28
 801cfb0:	d55e      	bpl.n	801d070 <_vfiprintf_r+0xe4>
 801cfb2:	6923      	ldr	r3, [r4, #16]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d05b      	beq.n	801d070 <_vfiprintf_r+0xe4>
 801cfb8:	2300      	movs	r3, #0
 801cfba:	9309      	str	r3, [sp, #36]	; 0x24
 801cfbc:	2320      	movs	r3, #32
 801cfbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cfc2:	2330      	movs	r3, #48	; 0x30
 801cfc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cfc8:	9503      	str	r5, [sp, #12]
 801cfca:	f04f 0b01 	mov.w	fp, #1
 801cfce:	46b8      	mov	r8, r7
 801cfd0:	4645      	mov	r5, r8
 801cfd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cfd6:	b10b      	cbz	r3, 801cfdc <_vfiprintf_r+0x50>
 801cfd8:	2b25      	cmp	r3, #37	; 0x25
 801cfda:	d154      	bne.n	801d086 <_vfiprintf_r+0xfa>
 801cfdc:	ebb8 0a07 	subs.w	sl, r8, r7
 801cfe0:	d00b      	beq.n	801cffa <_vfiprintf_r+0x6e>
 801cfe2:	4653      	mov	r3, sl
 801cfe4:	463a      	mov	r2, r7
 801cfe6:	4621      	mov	r1, r4
 801cfe8:	4630      	mov	r0, r6
 801cfea:	f7ff ffbc 	bl	801cf66 <__sfputs_r>
 801cfee:	3001      	adds	r0, #1
 801cff0:	f000 80c2 	beq.w	801d178 <_vfiprintf_r+0x1ec>
 801cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cff6:	4453      	add	r3, sl
 801cff8:	9309      	str	r3, [sp, #36]	; 0x24
 801cffa:	f898 3000 	ldrb.w	r3, [r8]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	f000 80ba 	beq.w	801d178 <_vfiprintf_r+0x1ec>
 801d004:	2300      	movs	r3, #0
 801d006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d00a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d00e:	9304      	str	r3, [sp, #16]
 801d010:	9307      	str	r3, [sp, #28]
 801d012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d016:	931a      	str	r3, [sp, #104]	; 0x68
 801d018:	46a8      	mov	r8, r5
 801d01a:	2205      	movs	r2, #5
 801d01c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801d020:	485e      	ldr	r0, [pc, #376]	; (801d19c <_vfiprintf_r+0x210>)
 801d022:	f7e3 f975 	bl	8000310 <memchr>
 801d026:	9b04      	ldr	r3, [sp, #16]
 801d028:	bb78      	cbnz	r0, 801d08a <_vfiprintf_r+0xfe>
 801d02a:	06d9      	lsls	r1, r3, #27
 801d02c:	bf44      	itt	mi
 801d02e:	2220      	movmi	r2, #32
 801d030:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d034:	071a      	lsls	r2, r3, #28
 801d036:	bf44      	itt	mi
 801d038:	222b      	movmi	r2, #43	; 0x2b
 801d03a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d03e:	782a      	ldrb	r2, [r5, #0]
 801d040:	2a2a      	cmp	r2, #42	; 0x2a
 801d042:	d02a      	beq.n	801d09a <_vfiprintf_r+0x10e>
 801d044:	9a07      	ldr	r2, [sp, #28]
 801d046:	46a8      	mov	r8, r5
 801d048:	2000      	movs	r0, #0
 801d04a:	250a      	movs	r5, #10
 801d04c:	4641      	mov	r1, r8
 801d04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d052:	3b30      	subs	r3, #48	; 0x30
 801d054:	2b09      	cmp	r3, #9
 801d056:	d969      	bls.n	801d12c <_vfiprintf_r+0x1a0>
 801d058:	b360      	cbz	r0, 801d0b4 <_vfiprintf_r+0x128>
 801d05a:	e024      	b.n	801d0a6 <_vfiprintf_r+0x11a>
 801d05c:	4b50      	ldr	r3, [pc, #320]	; (801d1a0 <_vfiprintf_r+0x214>)
 801d05e:	429c      	cmp	r4, r3
 801d060:	d101      	bne.n	801d066 <_vfiprintf_r+0xda>
 801d062:	68b4      	ldr	r4, [r6, #8]
 801d064:	e7a2      	b.n	801cfac <_vfiprintf_r+0x20>
 801d066:	4b4f      	ldr	r3, [pc, #316]	; (801d1a4 <_vfiprintf_r+0x218>)
 801d068:	429c      	cmp	r4, r3
 801d06a:	bf08      	it	eq
 801d06c:	68f4      	ldreq	r4, [r6, #12]
 801d06e:	e79d      	b.n	801cfac <_vfiprintf_r+0x20>
 801d070:	4621      	mov	r1, r4
 801d072:	4630      	mov	r0, r6
 801d074:	f7fe f9dc 	bl	801b430 <__swsetup_r>
 801d078:	2800      	cmp	r0, #0
 801d07a:	d09d      	beq.n	801cfb8 <_vfiprintf_r+0x2c>
 801d07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d080:	b01d      	add	sp, #116	; 0x74
 801d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d086:	46a8      	mov	r8, r5
 801d088:	e7a2      	b.n	801cfd0 <_vfiprintf_r+0x44>
 801d08a:	4a44      	ldr	r2, [pc, #272]	; (801d19c <_vfiprintf_r+0x210>)
 801d08c:	1a80      	subs	r0, r0, r2
 801d08e:	fa0b f000 	lsl.w	r0, fp, r0
 801d092:	4318      	orrs	r0, r3
 801d094:	9004      	str	r0, [sp, #16]
 801d096:	4645      	mov	r5, r8
 801d098:	e7be      	b.n	801d018 <_vfiprintf_r+0x8c>
 801d09a:	9a03      	ldr	r2, [sp, #12]
 801d09c:	1d11      	adds	r1, r2, #4
 801d09e:	6812      	ldr	r2, [r2, #0]
 801d0a0:	9103      	str	r1, [sp, #12]
 801d0a2:	2a00      	cmp	r2, #0
 801d0a4:	db01      	blt.n	801d0aa <_vfiprintf_r+0x11e>
 801d0a6:	9207      	str	r2, [sp, #28]
 801d0a8:	e004      	b.n	801d0b4 <_vfiprintf_r+0x128>
 801d0aa:	4252      	negs	r2, r2
 801d0ac:	f043 0302 	orr.w	r3, r3, #2
 801d0b0:	9207      	str	r2, [sp, #28]
 801d0b2:	9304      	str	r3, [sp, #16]
 801d0b4:	f898 3000 	ldrb.w	r3, [r8]
 801d0b8:	2b2e      	cmp	r3, #46	; 0x2e
 801d0ba:	d10e      	bne.n	801d0da <_vfiprintf_r+0x14e>
 801d0bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 801d0c2:	d138      	bne.n	801d136 <_vfiprintf_r+0x1aa>
 801d0c4:	9b03      	ldr	r3, [sp, #12]
 801d0c6:	1d1a      	adds	r2, r3, #4
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	9203      	str	r2, [sp, #12]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	bfb8      	it	lt
 801d0d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d0d4:	f108 0802 	add.w	r8, r8, #2
 801d0d8:	9305      	str	r3, [sp, #20]
 801d0da:	4d33      	ldr	r5, [pc, #204]	; (801d1a8 <_vfiprintf_r+0x21c>)
 801d0dc:	f898 1000 	ldrb.w	r1, [r8]
 801d0e0:	2203      	movs	r2, #3
 801d0e2:	4628      	mov	r0, r5
 801d0e4:	f7e3 f914 	bl	8000310 <memchr>
 801d0e8:	b140      	cbz	r0, 801d0fc <_vfiprintf_r+0x170>
 801d0ea:	2340      	movs	r3, #64	; 0x40
 801d0ec:	1b40      	subs	r0, r0, r5
 801d0ee:	fa03 f000 	lsl.w	r0, r3, r0
 801d0f2:	9b04      	ldr	r3, [sp, #16]
 801d0f4:	4303      	orrs	r3, r0
 801d0f6:	f108 0801 	add.w	r8, r8, #1
 801d0fa:	9304      	str	r3, [sp, #16]
 801d0fc:	f898 1000 	ldrb.w	r1, [r8]
 801d100:	482a      	ldr	r0, [pc, #168]	; (801d1ac <_vfiprintf_r+0x220>)
 801d102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d106:	2206      	movs	r2, #6
 801d108:	f108 0701 	add.w	r7, r8, #1
 801d10c:	f7e3 f900 	bl	8000310 <memchr>
 801d110:	2800      	cmp	r0, #0
 801d112:	d037      	beq.n	801d184 <_vfiprintf_r+0x1f8>
 801d114:	4b26      	ldr	r3, [pc, #152]	; (801d1b0 <_vfiprintf_r+0x224>)
 801d116:	bb1b      	cbnz	r3, 801d160 <_vfiprintf_r+0x1d4>
 801d118:	9b03      	ldr	r3, [sp, #12]
 801d11a:	3307      	adds	r3, #7
 801d11c:	f023 0307 	bic.w	r3, r3, #7
 801d120:	3308      	adds	r3, #8
 801d122:	9303      	str	r3, [sp, #12]
 801d124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d126:	444b      	add	r3, r9
 801d128:	9309      	str	r3, [sp, #36]	; 0x24
 801d12a:	e750      	b.n	801cfce <_vfiprintf_r+0x42>
 801d12c:	fb05 3202 	mla	r2, r5, r2, r3
 801d130:	2001      	movs	r0, #1
 801d132:	4688      	mov	r8, r1
 801d134:	e78a      	b.n	801d04c <_vfiprintf_r+0xc0>
 801d136:	2300      	movs	r3, #0
 801d138:	f108 0801 	add.w	r8, r8, #1
 801d13c:	9305      	str	r3, [sp, #20]
 801d13e:	4619      	mov	r1, r3
 801d140:	250a      	movs	r5, #10
 801d142:	4640      	mov	r0, r8
 801d144:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d148:	3a30      	subs	r2, #48	; 0x30
 801d14a:	2a09      	cmp	r2, #9
 801d14c:	d903      	bls.n	801d156 <_vfiprintf_r+0x1ca>
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d0c3      	beq.n	801d0da <_vfiprintf_r+0x14e>
 801d152:	9105      	str	r1, [sp, #20]
 801d154:	e7c1      	b.n	801d0da <_vfiprintf_r+0x14e>
 801d156:	fb05 2101 	mla	r1, r5, r1, r2
 801d15a:	2301      	movs	r3, #1
 801d15c:	4680      	mov	r8, r0
 801d15e:	e7f0      	b.n	801d142 <_vfiprintf_r+0x1b6>
 801d160:	ab03      	add	r3, sp, #12
 801d162:	9300      	str	r3, [sp, #0]
 801d164:	4622      	mov	r2, r4
 801d166:	4b13      	ldr	r3, [pc, #76]	; (801d1b4 <_vfiprintf_r+0x228>)
 801d168:	a904      	add	r1, sp, #16
 801d16a:	4630      	mov	r0, r6
 801d16c:	f7fd fc9c 	bl	801aaa8 <_printf_float>
 801d170:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801d174:	4681      	mov	r9, r0
 801d176:	d1d5      	bne.n	801d124 <_vfiprintf_r+0x198>
 801d178:	89a3      	ldrh	r3, [r4, #12]
 801d17a:	065b      	lsls	r3, r3, #25
 801d17c:	f53f af7e 	bmi.w	801d07c <_vfiprintf_r+0xf0>
 801d180:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d182:	e77d      	b.n	801d080 <_vfiprintf_r+0xf4>
 801d184:	ab03      	add	r3, sp, #12
 801d186:	9300      	str	r3, [sp, #0]
 801d188:	4622      	mov	r2, r4
 801d18a:	4b0a      	ldr	r3, [pc, #40]	; (801d1b4 <_vfiprintf_r+0x228>)
 801d18c:	a904      	add	r1, sp, #16
 801d18e:	4630      	mov	r0, r6
 801d190:	f7fd ff2c 	bl	801afec <_printf_i>
 801d194:	e7ec      	b.n	801d170 <_vfiprintf_r+0x1e4>
 801d196:	bf00      	nop
 801d198:	08020968 	.word	0x08020968
 801d19c:	08020aa4 	.word	0x08020aa4
 801d1a0:	08020988 	.word	0x08020988
 801d1a4:	08020948 	.word	0x08020948
 801d1a8:	08020aaa 	.word	0x08020aaa
 801d1ac:	08020aae 	.word	0x08020aae
 801d1b0:	0801aaa9 	.word	0x0801aaa9
 801d1b4:	0801cf67 	.word	0x0801cf67

0801d1b8 <_sbrk_r>:
 801d1b8:	b538      	push	{r3, r4, r5, lr}
 801d1ba:	4c06      	ldr	r4, [pc, #24]	; (801d1d4 <_sbrk_r+0x1c>)
 801d1bc:	2300      	movs	r3, #0
 801d1be:	4605      	mov	r5, r0
 801d1c0:	4608      	mov	r0, r1
 801d1c2:	6023      	str	r3, [r4, #0]
 801d1c4:	f7e3 ff18 	bl	8000ff8 <_sbrk>
 801d1c8:	1c43      	adds	r3, r0, #1
 801d1ca:	d102      	bne.n	801d1d2 <_sbrk_r+0x1a>
 801d1cc:	6823      	ldr	r3, [r4, #0]
 801d1ce:	b103      	cbz	r3, 801d1d2 <_sbrk_r+0x1a>
 801d1d0:	602b      	str	r3, [r5, #0]
 801d1d2:	bd38      	pop	{r3, r4, r5, pc}
 801d1d4:	24008a3c 	.word	0x24008a3c

0801d1d8 <__sread>:
 801d1d8:	b510      	push	{r4, lr}
 801d1da:	460c      	mov	r4, r1
 801d1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1e0:	f000 f8bc 	bl	801d35c <_read_r>
 801d1e4:	2800      	cmp	r0, #0
 801d1e6:	bfab      	itete	ge
 801d1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d1ea:	89a3      	ldrhlt	r3, [r4, #12]
 801d1ec:	181b      	addge	r3, r3, r0
 801d1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d1f2:	bfac      	ite	ge
 801d1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801d1f6:	81a3      	strhlt	r3, [r4, #12]
 801d1f8:	bd10      	pop	{r4, pc}

0801d1fa <__swrite>:
 801d1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1fe:	461f      	mov	r7, r3
 801d200:	898b      	ldrh	r3, [r1, #12]
 801d202:	05db      	lsls	r3, r3, #23
 801d204:	4605      	mov	r5, r0
 801d206:	460c      	mov	r4, r1
 801d208:	4616      	mov	r6, r2
 801d20a:	d505      	bpl.n	801d218 <__swrite+0x1e>
 801d20c:	2302      	movs	r3, #2
 801d20e:	2200      	movs	r2, #0
 801d210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d214:	f000 f868 	bl	801d2e8 <_lseek_r>
 801d218:	89a3      	ldrh	r3, [r4, #12]
 801d21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d222:	81a3      	strh	r3, [r4, #12]
 801d224:	4632      	mov	r2, r6
 801d226:	463b      	mov	r3, r7
 801d228:	4628      	mov	r0, r5
 801d22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d22e:	f000 b817 	b.w	801d260 <_write_r>

0801d232 <__sseek>:
 801d232:	b510      	push	{r4, lr}
 801d234:	460c      	mov	r4, r1
 801d236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d23a:	f000 f855 	bl	801d2e8 <_lseek_r>
 801d23e:	1c43      	adds	r3, r0, #1
 801d240:	89a3      	ldrh	r3, [r4, #12]
 801d242:	bf15      	itete	ne
 801d244:	6560      	strne	r0, [r4, #84]	; 0x54
 801d246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d24a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d24e:	81a3      	strheq	r3, [r4, #12]
 801d250:	bf18      	it	ne
 801d252:	81a3      	strhne	r3, [r4, #12]
 801d254:	bd10      	pop	{r4, pc}

0801d256 <__sclose>:
 801d256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d25a:	f000 b813 	b.w	801d284 <_close_r>
	...

0801d260 <_write_r>:
 801d260:	b538      	push	{r3, r4, r5, lr}
 801d262:	4c07      	ldr	r4, [pc, #28]	; (801d280 <_write_r+0x20>)
 801d264:	4605      	mov	r5, r0
 801d266:	4608      	mov	r0, r1
 801d268:	4611      	mov	r1, r2
 801d26a:	2200      	movs	r2, #0
 801d26c:	6022      	str	r2, [r4, #0]
 801d26e:	461a      	mov	r2, r3
 801d270:	f7e3 fe71 	bl	8000f56 <_write>
 801d274:	1c43      	adds	r3, r0, #1
 801d276:	d102      	bne.n	801d27e <_write_r+0x1e>
 801d278:	6823      	ldr	r3, [r4, #0]
 801d27a:	b103      	cbz	r3, 801d27e <_write_r+0x1e>
 801d27c:	602b      	str	r3, [r5, #0]
 801d27e:	bd38      	pop	{r3, r4, r5, pc}
 801d280:	24008a3c 	.word	0x24008a3c

0801d284 <_close_r>:
 801d284:	b538      	push	{r3, r4, r5, lr}
 801d286:	4c06      	ldr	r4, [pc, #24]	; (801d2a0 <_close_r+0x1c>)
 801d288:	2300      	movs	r3, #0
 801d28a:	4605      	mov	r5, r0
 801d28c:	4608      	mov	r0, r1
 801d28e:	6023      	str	r3, [r4, #0]
 801d290:	f7e3 fe7d 	bl	8000f8e <_close>
 801d294:	1c43      	adds	r3, r0, #1
 801d296:	d102      	bne.n	801d29e <_close_r+0x1a>
 801d298:	6823      	ldr	r3, [r4, #0]
 801d29a:	b103      	cbz	r3, 801d29e <_close_r+0x1a>
 801d29c:	602b      	str	r3, [r5, #0]
 801d29e:	bd38      	pop	{r3, r4, r5, pc}
 801d2a0:	24008a3c 	.word	0x24008a3c

0801d2a4 <_fstat_r>:
 801d2a4:	b538      	push	{r3, r4, r5, lr}
 801d2a6:	4c07      	ldr	r4, [pc, #28]	; (801d2c4 <_fstat_r+0x20>)
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	4605      	mov	r5, r0
 801d2ac:	4608      	mov	r0, r1
 801d2ae:	4611      	mov	r1, r2
 801d2b0:	6023      	str	r3, [r4, #0]
 801d2b2:	f7e3 fe78 	bl	8000fa6 <_fstat>
 801d2b6:	1c43      	adds	r3, r0, #1
 801d2b8:	d102      	bne.n	801d2c0 <_fstat_r+0x1c>
 801d2ba:	6823      	ldr	r3, [r4, #0]
 801d2bc:	b103      	cbz	r3, 801d2c0 <_fstat_r+0x1c>
 801d2be:	602b      	str	r3, [r5, #0]
 801d2c0:	bd38      	pop	{r3, r4, r5, pc}
 801d2c2:	bf00      	nop
 801d2c4:	24008a3c 	.word	0x24008a3c

0801d2c8 <_isatty_r>:
 801d2c8:	b538      	push	{r3, r4, r5, lr}
 801d2ca:	4c06      	ldr	r4, [pc, #24]	; (801d2e4 <_isatty_r+0x1c>)
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	4605      	mov	r5, r0
 801d2d0:	4608      	mov	r0, r1
 801d2d2:	6023      	str	r3, [r4, #0]
 801d2d4:	f7e3 fe77 	bl	8000fc6 <_isatty>
 801d2d8:	1c43      	adds	r3, r0, #1
 801d2da:	d102      	bne.n	801d2e2 <_isatty_r+0x1a>
 801d2dc:	6823      	ldr	r3, [r4, #0]
 801d2de:	b103      	cbz	r3, 801d2e2 <_isatty_r+0x1a>
 801d2e0:	602b      	str	r3, [r5, #0]
 801d2e2:	bd38      	pop	{r3, r4, r5, pc}
 801d2e4:	24008a3c 	.word	0x24008a3c

0801d2e8 <_lseek_r>:
 801d2e8:	b538      	push	{r3, r4, r5, lr}
 801d2ea:	4c07      	ldr	r4, [pc, #28]	; (801d308 <_lseek_r+0x20>)
 801d2ec:	4605      	mov	r5, r0
 801d2ee:	4608      	mov	r0, r1
 801d2f0:	4611      	mov	r1, r2
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	6022      	str	r2, [r4, #0]
 801d2f6:	461a      	mov	r2, r3
 801d2f8:	f7e3 fe70 	bl	8000fdc <_lseek>
 801d2fc:	1c43      	adds	r3, r0, #1
 801d2fe:	d102      	bne.n	801d306 <_lseek_r+0x1e>
 801d300:	6823      	ldr	r3, [r4, #0]
 801d302:	b103      	cbz	r3, 801d306 <_lseek_r+0x1e>
 801d304:	602b      	str	r3, [r5, #0]
 801d306:	bd38      	pop	{r3, r4, r5, pc}
 801d308:	24008a3c 	.word	0x24008a3c

0801d30c <__malloc_lock>:
 801d30c:	4770      	bx	lr

0801d30e <__malloc_unlock>:
 801d30e:	4770      	bx	lr

0801d310 <_realloc_r>:
 801d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d312:	4607      	mov	r7, r0
 801d314:	4614      	mov	r4, r2
 801d316:	460e      	mov	r6, r1
 801d318:	b921      	cbnz	r1, 801d324 <_realloc_r+0x14>
 801d31a:	4611      	mov	r1, r2
 801d31c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d320:	f7ff bc5e 	b.w	801cbe0 <_malloc_r>
 801d324:	b922      	cbnz	r2, 801d330 <_realloc_r+0x20>
 801d326:	f7ff fc0d 	bl	801cb44 <_free_r>
 801d32a:	4625      	mov	r5, r4
 801d32c:	4628      	mov	r0, r5
 801d32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d330:	f000 f826 	bl	801d380 <_malloc_usable_size_r>
 801d334:	42a0      	cmp	r0, r4
 801d336:	d20f      	bcs.n	801d358 <_realloc_r+0x48>
 801d338:	4621      	mov	r1, r4
 801d33a:	4638      	mov	r0, r7
 801d33c:	f7ff fc50 	bl	801cbe0 <_malloc_r>
 801d340:	4605      	mov	r5, r0
 801d342:	2800      	cmp	r0, #0
 801d344:	d0f2      	beq.n	801d32c <_realloc_r+0x1c>
 801d346:	4631      	mov	r1, r6
 801d348:	4622      	mov	r2, r4
 801d34a:	f7fd fafc 	bl	801a946 <memcpy>
 801d34e:	4631      	mov	r1, r6
 801d350:	4638      	mov	r0, r7
 801d352:	f7ff fbf7 	bl	801cb44 <_free_r>
 801d356:	e7e9      	b.n	801d32c <_realloc_r+0x1c>
 801d358:	4635      	mov	r5, r6
 801d35a:	e7e7      	b.n	801d32c <_realloc_r+0x1c>

0801d35c <_read_r>:
 801d35c:	b538      	push	{r3, r4, r5, lr}
 801d35e:	4c07      	ldr	r4, [pc, #28]	; (801d37c <_read_r+0x20>)
 801d360:	4605      	mov	r5, r0
 801d362:	4608      	mov	r0, r1
 801d364:	4611      	mov	r1, r2
 801d366:	2200      	movs	r2, #0
 801d368:	6022      	str	r2, [r4, #0]
 801d36a:	461a      	mov	r2, r3
 801d36c:	f7e3 fdd6 	bl	8000f1c <_read>
 801d370:	1c43      	adds	r3, r0, #1
 801d372:	d102      	bne.n	801d37a <_read_r+0x1e>
 801d374:	6823      	ldr	r3, [r4, #0]
 801d376:	b103      	cbz	r3, 801d37a <_read_r+0x1e>
 801d378:	602b      	str	r3, [r5, #0]
 801d37a:	bd38      	pop	{r3, r4, r5, pc}
 801d37c:	24008a3c 	.word	0x24008a3c

0801d380 <_malloc_usable_size_r>:
 801d380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d384:	1f18      	subs	r0, r3, #4
 801d386:	2b00      	cmp	r3, #0
 801d388:	bfbc      	itt	lt
 801d38a:	580b      	ldrlt	r3, [r1, r0]
 801d38c:	18c0      	addlt	r0, r0, r3
 801d38e:	4770      	bx	lr

0801d390 <_init>:
 801d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d392:	bf00      	nop
 801d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d396:	bc08      	pop	{r3}
 801d398:	469e      	mov	lr, r3
 801d39a:	4770      	bx	lr

0801d39c <_fini>:
 801d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d39e:	bf00      	nop
 801d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3a2:	bc08      	pop	{r3}
 801d3a4:	469e      	mov	lr, r3
 801d3a6:	4770      	bx	lr
