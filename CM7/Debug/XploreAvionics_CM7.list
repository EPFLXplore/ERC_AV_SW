
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023480  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048e8  08023720  08023720  00033720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08028008  08028008  00038008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08028010  08028010  00038010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0802801c  0802801c  0003801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000214  24000000  08028024  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00048ca4  24000214  08028238  00040214  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24048eb8  08028238  00048eb8  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08028238  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c4528  00000000  00000000  00040242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001250d  00000000  00000000  0010476a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003b20  00000000  00000000  00116c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00003810  00000000  00000000  0011a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0005c942  00000000  00000000  0011dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006604d  00000000  00000000  0017a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001cc28e  00000000  00000000  001e0937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  003acbc5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00011c3c  00000000  00000000  003acc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000214 	.word	0x24000214
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023708 	.word	0x08023708

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000218 	.word	0x24000218
 80002dc:	08023708 	.word	0x08023708

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b8:	f000 b96e 	b.w	8000698 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468c      	mov	ip, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	f040 8083 	bne.w	80004ea <__udivmoddi4+0x116>
 80003e4:	428a      	cmp	r2, r1
 80003e6:	4617      	mov	r7, r2
 80003e8:	d947      	bls.n	800047a <__udivmoddi4+0xa6>
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	b142      	cbz	r2, 8000402 <__udivmoddi4+0x2e>
 80003f0:	f1c2 0020 	rsb	r0, r2, #32
 80003f4:	fa24 f000 	lsr.w	r0, r4, r0
 80003f8:	4091      	lsls	r1, r2
 80003fa:	4097      	lsls	r7, r2
 80003fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000400:	4094      	lsls	r4, r2
 8000402:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000406:	0c23      	lsrs	r3, r4, #16
 8000408:	fbbc f6f8 	udiv	r6, ip, r8
 800040c:	fa1f fe87 	uxth.w	lr, r7
 8000410:	fb08 c116 	mls	r1, r8, r6, ip
 8000414:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000418:	fb06 f10e 	mul.w	r1, r6, lr
 800041c:	4299      	cmp	r1, r3
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x60>
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000426:	f080 8119 	bcs.w	800065c <__udivmoddi4+0x288>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 8116 	bls.w	800065c <__udivmoddi4+0x288>
 8000430:	3e02      	subs	r6, #2
 8000432:	443b      	add	r3, r7
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 fe0e 	mul.w	lr, r0, lr
 8000448:	45a6      	cmp	lr, r4
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x8c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	f080 8105 	bcs.w	8000660 <__udivmoddi4+0x28c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8102 	bls.w	8000660 <__udivmoddi4+0x28c>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000464:	eba4 040e 	sub.w	r4, r4, lr
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa0>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	b902      	cbnz	r2, 800047e <__udivmoddi4+0xaa>
 800047c:	deff      	udf	#255	; 0xff
 800047e:	fab2 f282 	clz	r2, r2
 8000482:	2a00      	cmp	r2, #0
 8000484:	d150      	bne.n	8000528 <__udivmoddi4+0x154>
 8000486:	1bcb      	subs	r3, r1, r7
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	2601      	movs	r6, #1
 8000492:	fbb3 fcfe 	udiv	ip, r3, lr
 8000496:	0c21      	lsrs	r1, r4, #16
 8000498:	fb0e 331c 	mls	r3, lr, ip, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb08 f30c 	mul.w	r3, r8, ip
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0xe4>
 80004a8:	1879      	adds	r1, r7, r1
 80004aa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0xe2>
 80004b0:	428b      	cmp	r3, r1
 80004b2:	f200 80e9 	bhi.w	8000688 <__udivmoddi4+0x2b4>
 80004b6:	4684      	mov	ip, r0
 80004b8:	1ac9      	subs	r1, r1, r3
 80004ba:	b2a3      	uxth	r3, r4
 80004bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80004c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c8:	fb08 f800 	mul.w	r8, r8, r0
 80004cc:	45a0      	cmp	r8, r4
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x10c>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d6:	d202      	bcs.n	80004de <__udivmoddi4+0x10a>
 80004d8:	45a0      	cmp	r8, r4
 80004da:	f200 80d9 	bhi.w	8000690 <__udivmoddi4+0x2bc>
 80004de:	4618      	mov	r0, r3
 80004e0:	eba4 0408 	sub.w	r4, r4, r8
 80004e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e8:	e7bf      	b.n	800046a <__udivmoddi4+0x96>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d909      	bls.n	8000502 <__udivmoddi4+0x12e>
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	f000 80b1 	beq.w	8000656 <__udivmoddi4+0x282>
 80004f4:	2600      	movs	r6, #0
 80004f6:	e9c5 0100 	strd	r0, r1, [r5]
 80004fa:	4630      	mov	r0, r6
 80004fc:	4631      	mov	r1, r6
 80004fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000502:	fab3 f683 	clz	r6, r3
 8000506:	2e00      	cmp	r6, #0
 8000508:	d14a      	bne.n	80005a0 <__udivmoddi4+0x1cc>
 800050a:	428b      	cmp	r3, r1
 800050c:	d302      	bcc.n	8000514 <__udivmoddi4+0x140>
 800050e:	4282      	cmp	r2, r0
 8000510:	f200 80b8 	bhi.w	8000684 <__udivmoddi4+0x2b0>
 8000514:	1a84      	subs	r4, r0, r2
 8000516:	eb61 0103 	sbc.w	r1, r1, r3
 800051a:	2001      	movs	r0, #1
 800051c:	468c      	mov	ip, r1
 800051e:	2d00      	cmp	r5, #0
 8000520:	d0a8      	beq.n	8000474 <__udivmoddi4+0xa0>
 8000522:	e9c5 4c00 	strd	r4, ip, [r5]
 8000526:	e7a5      	b.n	8000474 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f603 	lsr.w	r6, r0, r3
 8000530:	4097      	lsls	r7, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053a:	40d9      	lsrs	r1, r3
 800053c:	4330      	orrs	r0, r6
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	fbb1 f6fe 	udiv	r6, r1, lr
 8000544:	fa1f f887 	uxth.w	r8, r7
 8000548:	fb0e 1116 	mls	r1, lr, r6, r1
 800054c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000550:	fb06 f108 	mul.w	r1, r6, r8
 8000554:	4299      	cmp	r1, r3
 8000556:	fa04 f402 	lsl.w	r4, r4, r2
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x19c>
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000562:	f080 808d 	bcs.w	8000680 <__udivmoddi4+0x2ac>
 8000566:	4299      	cmp	r1, r3
 8000568:	f240 808a 	bls.w	8000680 <__udivmoddi4+0x2ac>
 800056c:	3e02      	subs	r6, #2
 800056e:	443b      	add	r3, r7
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	b281      	uxth	r1, r0
 8000574:	fbb3 f0fe 	udiv	r0, r3, lr
 8000578:	fb0e 3310 	mls	r3, lr, r0, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb00 f308 	mul.w	r3, r0, r8
 8000584:	428b      	cmp	r3, r1
 8000586:	d907      	bls.n	8000598 <__udivmoddi4+0x1c4>
 8000588:	1879      	adds	r1, r7, r1
 800058a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800058e:	d273      	bcs.n	8000678 <__udivmoddi4+0x2a4>
 8000590:	428b      	cmp	r3, r1
 8000592:	d971      	bls.n	8000678 <__udivmoddi4+0x2a4>
 8000594:	3802      	subs	r0, #2
 8000596:	4439      	add	r1, r7
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059e:	e778      	b.n	8000492 <__udivmoddi4+0xbe>
 80005a0:	f1c6 0c20 	rsb	ip, r6, #32
 80005a4:	fa03 f406 	lsl.w	r4, r3, r6
 80005a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005ac:	431c      	orrs	r4, r3
 80005ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80005b2:	fa01 f306 	lsl.w	r3, r1, r6
 80005b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80005be:	431f      	orrs	r7, r3
 80005c0:	0c3b      	lsrs	r3, r7, #16
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fa1f f884 	uxth.w	r8, r4
 80005ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005d2:	fb09 fa08 	mul.w	sl, r9, r8
 80005d6:	458a      	cmp	sl, r1
 80005d8:	fa02 f206 	lsl.w	r2, r2, r6
 80005dc:	fa00 f306 	lsl.w	r3, r0, r6
 80005e0:	d908      	bls.n	80005f4 <__udivmoddi4+0x220>
 80005e2:	1861      	adds	r1, r4, r1
 80005e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005e8:	d248      	bcs.n	800067c <__udivmoddi4+0x2a8>
 80005ea:	458a      	cmp	sl, r1
 80005ec:	d946      	bls.n	800067c <__udivmoddi4+0x2a8>
 80005ee:	f1a9 0902 	sub.w	r9, r9, #2
 80005f2:	4421      	add	r1, r4
 80005f4:	eba1 010a 	sub.w	r1, r1, sl
 80005f8:	b2bf      	uxth	r7, r7
 80005fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000602:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000606:	fb00 f808 	mul.w	r8, r0, r8
 800060a:	45b8      	cmp	r8, r7
 800060c:	d907      	bls.n	800061e <__udivmoddi4+0x24a>
 800060e:	19e7      	adds	r7, r4, r7
 8000610:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000614:	d22e      	bcs.n	8000674 <__udivmoddi4+0x2a0>
 8000616:	45b8      	cmp	r8, r7
 8000618:	d92c      	bls.n	8000674 <__udivmoddi4+0x2a0>
 800061a:	3802      	subs	r0, #2
 800061c:	4427      	add	r7, r4
 800061e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000622:	eba7 0708 	sub.w	r7, r7, r8
 8000626:	fba0 8902 	umull	r8, r9, r0, r2
 800062a:	454f      	cmp	r7, r9
 800062c:	46c6      	mov	lr, r8
 800062e:	4649      	mov	r1, r9
 8000630:	d31a      	bcc.n	8000668 <__udivmoddi4+0x294>
 8000632:	d017      	beq.n	8000664 <__udivmoddi4+0x290>
 8000634:	b15d      	cbz	r5, 800064e <__udivmoddi4+0x27a>
 8000636:	ebb3 020e 	subs.w	r2, r3, lr
 800063a:	eb67 0701 	sbc.w	r7, r7, r1
 800063e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000642:	40f2      	lsrs	r2, r6
 8000644:	ea4c 0202 	orr.w	r2, ip, r2
 8000648:	40f7      	lsrs	r7, r6
 800064a:	e9c5 2700 	strd	r2, r7, [r5]
 800064e:	2600      	movs	r6, #0
 8000650:	4631      	mov	r1, r6
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	462e      	mov	r6, r5
 8000658:	4628      	mov	r0, r5
 800065a:	e70b      	b.n	8000474 <__udivmoddi4+0xa0>
 800065c:	4606      	mov	r6, r0
 800065e:	e6e9      	b.n	8000434 <__udivmoddi4+0x60>
 8000660:	4618      	mov	r0, r3
 8000662:	e6fd      	b.n	8000460 <__udivmoddi4+0x8c>
 8000664:	4543      	cmp	r3, r8
 8000666:	d2e5      	bcs.n	8000634 <__udivmoddi4+0x260>
 8000668:	ebb8 0e02 	subs.w	lr, r8, r2
 800066c:	eb69 0104 	sbc.w	r1, r9, r4
 8000670:	3801      	subs	r0, #1
 8000672:	e7df      	b.n	8000634 <__udivmoddi4+0x260>
 8000674:	4608      	mov	r0, r1
 8000676:	e7d2      	b.n	800061e <__udivmoddi4+0x24a>
 8000678:	4660      	mov	r0, ip
 800067a:	e78d      	b.n	8000598 <__udivmoddi4+0x1c4>
 800067c:	4681      	mov	r9, r0
 800067e:	e7b9      	b.n	80005f4 <__udivmoddi4+0x220>
 8000680:	4666      	mov	r6, ip
 8000682:	e775      	b.n	8000570 <__udivmoddi4+0x19c>
 8000684:	4630      	mov	r0, r6
 8000686:	e74a      	b.n	800051e <__udivmoddi4+0x14a>
 8000688:	f1ac 0c02 	sub.w	ip, ip, #2
 800068c:	4439      	add	r1, r7
 800068e:	e713      	b.n	80004b8 <__udivmoddi4+0xe4>
 8000690:	3802      	subs	r0, #2
 8000692:	443c      	add	r4, r7
 8000694:	e724      	b.n	80004e0 <__udivmoddi4+0x10c>
 8000696:	bf00      	nop

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a0:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <SystemInit+0x104>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a3e      	ldr	r2, [pc, #248]	; (80007a0 <SystemInit+0x104>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006b0:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <SystemInit+0x104>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <SystemInit+0x104>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	2b06      	cmp	r3, #6
 80006c6:	d807      	bhi.n	80006d8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <SystemInit+0x108>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f023 030f 	bic.w	r3, r3, #15
 80006d0:	4a34      	ldr	r2, [pc, #208]	; (80007a4 <SystemInit+0x108>)
 80006d2:	f043 0307 	orr.w	r3, r3, #7
 80006d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d8:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <SystemInit+0x10c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a32      	ldr	r2, [pc, #200]	; (80007a8 <SystemInit+0x10c>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006e4:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <SystemInit+0x10c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <SystemInit+0x10c>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	492e      	ldr	r1, [pc, #184]	; (80007a8 <SystemInit+0x10c>)
 80006f0:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <SystemInit+0x110>)
 80006f2:	4013      	ands	r3, r2
 80006f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d007      	beq.n	8000712 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemInit+0x108>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f023 030f 	bic.w	r3, r3, #15
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <SystemInit+0x108>)
 800070c:	f043 0307 	orr.w	r3, r3, #7
 8000710:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000718:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <SystemInit+0x10c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <SystemInit+0x10c>)
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <SystemInit+0x114>)
 8000728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemInit+0x10c>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemInit+0x118>)
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <SystemInit+0x10c>)
 8000732:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemInit+0x11c>)
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <SystemInit+0x10c>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <SystemInit+0x11c>)
 8000740:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <SystemInit+0x10c>)
 800074a:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <SystemInit+0x11c>)
 800074c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <SystemInit+0x10c>)
 8000750:	2200      	movs	r2, #0
 8000752:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <SystemInit+0x10c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <SystemInit+0x10c>)
 800075a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x10c>)
 8000762:	2200      	movs	r2, #0
 8000764:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <SystemInit+0x120>)
 8000768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <SystemInit+0x120>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <SystemInit+0x124>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <SystemInit+0x128>)
 8000778:	4013      	ands	r3, r2
 800077a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800077e:	d202      	bcs.n	8000786 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <SystemInit+0x12c>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <SystemInit+0x130>)
 8000788:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800078c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SystemInit+0x104>)
 8000790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000794:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	52002000 	.word	0x52002000
 80007a8:	58024400 	.word	0x58024400
 80007ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b0:	02020200 	.word	0x02020200
 80007b4:	01ff0000 	.word	0x01ff0000
 80007b8:	01010280 	.word	0x01010280
 80007bc:	580000c0 	.word	0x580000c0
 80007c0:	5c001000 	.word	0x5c001000
 80007c4:	ffff0000 	.word	0xffff0000
 80007c8:	51008108 	.word	0x51008108
 80007cc:	52004000 	.word	0x52004000

080007d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_CRC_Init+0x3c>)
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <MX_CRC_Init+0x40>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_CRC_Init+0x3c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_CRC_Init+0x3c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CRC_Init+0x3c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_CRC_Init+0x3c>)
 80007fa:	f001 fd6b 	bl	80022d4 <HAL_CRC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000804:	f000 fc58 	bl	80010b8 <Error_Handler>
  }

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24045474 	.word	0x24045474
 8000810:	58024c00 	.word	0x58024c00

08000814 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <HAL_CRC_MspInit+0x3c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d10e      	bne.n	8000844 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_CRC_MspInit+0x40>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_CRC_MspInit+0x40>)
 800082e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_CRC_MspInit+0x40>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	58024c00 	.word	0x58024c00
 8000854:	58024400 	.word	0x58024400

08000858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085e:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_DMA_Init+0xac>)
 8000860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000864:	4a27      	ldr	r2, [pc, #156]	; (8000904 <MX_DMA_Init+0xac>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_DMA_Init+0xac>)
 8000870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_DMA_Init+0xac>)
 800087e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000882:	4a20      	ldr	r2, [pc, #128]	; (8000904 <MX_DMA_Init+0xac>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_DMA_Init+0xac>)
 800088e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	2038      	movs	r0, #56	; 0x38
 80008a0:	f001 fc60 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008a4:	2038      	movs	r0, #56	; 0x38
 80008a6:	f001 fc77 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	2039      	movs	r0, #57	; 0x39
 80008b0:	f001 fc58 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008b4:	2039      	movs	r0, #57	; 0x39
 80008b6:	f001 fc6f 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	203c      	movs	r0, #60	; 0x3c
 80008c0:	f001 fc50 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008c4:	203c      	movs	r0, #60	; 0x3c
 80008c6:	f001 fc67 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2105      	movs	r1, #5
 80008ce:	2044      	movs	r0, #68	; 0x44
 80008d0:	f001 fc48 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80008d4:	2044      	movs	r0, #68	; 0x44
 80008d6:	f001 fc5f 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2105      	movs	r1, #5
 80008de:	2045      	movs	r0, #69	; 0x45
 80008e0:	f001 fc40 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008e4:	2045      	movs	r0, #69	; 0x45
 80008e6:	f001 fc57 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	2046      	movs	r0, #70	; 0x46
 80008f0:	f001 fc38 	bl	8002164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008f4:	2046      	movs	r0, #70	; 0x46
 80008f6:	f001 fc4f 	bl	8002198 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	58024400 	.word	0x58024400

08000908 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <vApplicationGetIdleTaskMemory+0x2c>)
 8000918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <vApplicationGetIdleTaskMemory+0x30>)
 800091e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	24000230 	.word	0x24000230
 8000938:	24000284 	.word	0x24000284

0800093c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 512);
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_FREERTOS_Init+0x34>)
 8000944:	1d3c      	adds	r4, r7, #4
 8000946:	461d      	mov	r5, r3
 8000948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000950:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f00a f92a 	bl	800abb2 <osThreadCreate>
 800095e:	4603      	mov	r3, r0
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <MX_FREERTOS_Init+0x38>)
 8000962:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 8000964:	f01f f84c 	bl	801fa00 <initCortexM7>
  /* USER CODE END RTOS_THREADS */

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	0802372c 	.word	0x0802372c
 8000974:	24045498 	.word	0x24045498

08000978 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f00a f962 	bl	800ac4a <osDelay>
 8000986:	e7fb      	b.n	8000980 <watchdogTask+0x8>

08000988 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a2e      	ldr	r2, [pc, #184]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a27      	ldr	r2, [pc, #156]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_GPIO_Init+0xc8>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_GPIO_Init+0xc8>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

}
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	58024400 	.word	0x58024400

08000a54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <MX_I2C1_Init+0x7c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a60:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_I2C1_Init+0x80>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8e:	480f      	ldr	r0, [pc, #60]	; (8000acc <MX_I2C1_Init+0x78>)
 8000a90:	f005 fa74 	bl	8005f7c <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fb0d 	bl	80010b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <MX_I2C1_Init+0x78>)
 8000aa2:	f005 fafb 	bl	800609c <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 fb04 	bl	80010b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0x0F) != HAL_OK)
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_I2C1_Init+0x78>)
 8000ab4:	f005 fb3d 	bl	8006132 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fafb 	bl	80010b8 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f005 fb82 	bl	80061cc <HAL_I2CEx_EnableFastModePlus>

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	240454e8 	.word	0x240454e8
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	00401242 	.word	0x00401242

08000ad8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a5f      	ldr	r2, [pc, #380]	; (8000c74 <HAL_I2C_MspInit+0x19c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12e      	bne.n	8000b58 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b5f      	ldr	r3, [pc, #380]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a5d      	ldr	r2, [pc, #372]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b18:	23c0      	movs	r3, #192	; 0xc0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4852      	ldr	r0, [pc, #328]	; (8000c7c <HAL_I2C_MspInit+0x1a4>)
 8000b34:	f005 f80c 	bl	8005b50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b38:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b3e:	4a4e      	ldr	r2, [pc, #312]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b56:	e088      	b.n	8000c6a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_I2C_MspInit+0x1a8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12f      	bne.n	8000bc2 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b92:	2304      	movs	r3, #4
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4837      	ldr	r0, [pc, #220]	; (8000c7c <HAL_I2C_MspInit+0x1a4>)
 8000b9e:	f004 ffd7 	bl	8005b50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba8:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]
}
 8000bc0:	e053      	b.n	8000c6a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <HAL_I2C_MspInit+0x1ac>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d14e      	bne.n	8000c6a <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <HAL_I2C_MspInit+0x1b0>)
 8000c26:	f004 ff93 	bl	8005b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <HAL_I2C_MspInit+0x1b4>)
 8000c48:	f004 ff82 	bl	8005b50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_I2C_MspInit+0x1a0>)
 8000c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	; 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40005400 	.word	0x40005400
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	58020400 	.word	0x58020400
 8000c80:	40005800 	.word	0x40005800
 8000c84:	40005c00 	.word	0x40005c00
 8000c88:	58020800 	.word	0x58020800
 8000c8c:	58020000 	.word	0x58020000

08000c90 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c94:	f3bf 8f4f 	dsb	sy
}
 8000c98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9a:	f3bf 8f6f 	isb	sy
}
 8000c9e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <SCB_EnableICache+0x48>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca8:	f3bf 8f4f 	dsb	sy
}
 8000cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cae:	f3bf 8f6f 	isb	sy
}
 8000cb2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SCB_EnableICache+0x48>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <SCB_EnableICache+0x48>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc0:	f3bf 8f4f 	dsb	sy
}
 8000cc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cc6:	f3bf 8f6f 	isb	sy
}
 8000cca:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <SCB_EnableDCache+0x84>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cea:	f3bf 8f4f 	dsb	sy
}
 8000cee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <SCB_EnableDCache+0x84>)
 8000cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cf6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0b5b      	lsrs	r3, r3, #13
 8000cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d00:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d0a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d14:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d1a:	4911      	ldr	r1, [pc, #68]	; (8000d60 <SCB_EnableDCache+0x84>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1e5a      	subs	r2, r3, #1
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ef      	bne.n	8000d0c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	60fa      	str	r2, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1e5      	bne.n	8000d02 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d36:	f3bf 8f4f 	dsb	sy
}
 8000d3a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SCB_EnableDCache+0x84>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <SCB_EnableDCache+0x84>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d48:	f3bf 8f4f 	dsb	sy
}
 8000d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d4e:	f3bf 8f6f 	isb	sy
}
 8000d52:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d6a:	f000 f92f 	bl	8000fcc <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d6e:	f7ff ff8f 	bl	8000c90 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d72:	f7ff ffb3 	bl	8000cdc <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d7a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d7c:	bf00      	nop
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <main+0xc0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <main+0x30>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	dcf4      	bgt.n	8000d7e <main+0x1a>
  if ( timeout < 0 )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da01      	bge.n	8000d9e <main+0x3a>
  {
  Error_Handler();
 8000d9a:	f000 f98d 	bl	80010b8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f001 f8ad 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f841 	bl	8000e28 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <main+0xc0>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <main+0xc0>)
 8000dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <main+0xc0>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f005 f895 	bl	8005ef4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f005 f8c1 	bl	8005f54 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dd8:	bf00      	nop
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <main+0xc0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d104      	bne.n	8000df0 <main+0x8c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dcf4      	bgt.n	8000dda <main+0x76>
if ( timeout < 0 )
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <main+0x96>
{
Error_Handler();
 8000df6:	f000 f95f 	bl	80010b8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f7ff fdc5 	bl	8000988 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfe:	f7ff fd2b 	bl	8000858 <MX_DMA_Init>
  MX_CRC_Init();
 8000e02:	f7ff fce5 	bl	80007d0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000e06:	f000 fb59 	bl	80014bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e0a:	f000 fba3 	bl	8001554 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e0e:	f000 fbed 	bl	80015ec <MX_USART3_UART_Init>
  //MX_IWDG1_Init();
  MX_USART6_UART_Init();
 8000e12:	f000 fc37 	bl	8001684 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000e16:	f000 f955 	bl	80010c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e1a:	f7ff fd8f 	bl	800093c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000e1e:	f009 feb1 	bl	800ab84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <main+0xbe>
 8000e24:	58024400 	.word	0x58024400

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0cc      	sub	sp, #304	; 0x130
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e32:	224c      	movs	r2, #76	; 0x4c
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f01f fdae 	bl	8020998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e40:	2220      	movs	r2, #32
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f01f fda7 	bl	8020998 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4618      	mov	r0, r3
 8000e50:	23bc      	movs	r3, #188	; 0xbc
 8000e52:	461a      	mov	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	f01f fd9f 	bl	8020998 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e5a:	2004      	movs	r0, #4
 8000e5c:	f005 f9ea 	bl	8006234 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <SystemClock_Config+0x198>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	4a55      	ldr	r2, [pc, #340]	; (8000fc0 <SystemClock_Config+0x198>)
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <SystemClock_Config+0x198>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <SystemClock_Config+0x19c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a50      	ldr	r2, [pc, #320]	; (8000fc4 <SystemClock_Config+0x19c>)
 8000e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <SystemClock_Config+0x19c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e9a:	bf00      	nop
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <SystemClock_Config+0x19c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ea8:	d1f8      	bne.n	8000e9c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000eaa:	230b      	movs	r3, #11
 8000eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2340      	movs	r3, #64	; 0x40
 8000ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 f9ec 	bl	80062e8 <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f16:	f000 f8cf 	bl	80010b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	233f      	movs	r3, #63	; 0x3f
 8000f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	2303      	movs	r3, #3
 8000f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fdd8 	bl	8006b08 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000f5e:	f000 f8ab 	bl	80010b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <SystemClock_Config+0x1a0>)
 8000f68:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2203      	movs	r2, #3
 8000f80:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2218      	movs	r2, #24
 8000f88:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 f97d 	bl	80072a4 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x18c>
  {
    Error_Handler();
 8000fb0:	f000 f882 	bl	80010b8 <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58000400 	.word	0x58000400
 8000fc4:	58024800 	.word	0x58024800
 8000fc8:	0040300b 	.word	0x0040300b

08000fcc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fde:	f001 f8e9 	bl	80021b4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <MPU_Config+0xc0>)
 8000fec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000fee:	230e      	movs	r3, #14
 8000ff0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f907 	bl	8002224 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001016:	2301      	movs	r3, #1
 8001018:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800101a:	2301      	movs	r3, #1
 800101c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MPU_Config+0xc0>)
 8001020:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001022:	2307      	movs	r3, #7
 8001024:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001026:	2300      	movs	r3, #0
 8001028:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800102a:	2300      	movs	r3, #0
 800102c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800102e:	2303      	movs	r3, #3
 8001030:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001032:	2301      	movs	r3, #1
 8001034:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001036:	2301      	movs	r3, #1
 8001038:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001042:	463b      	mov	r3, r7
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f8ed 	bl	8002224 <HAL_MPU_ConfigRegion>

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800104a:	2301      	movs	r3, #1
 800104c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800104e:	2302      	movs	r3, #2
 8001050:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38001000;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MPU_Config+0xc4>)
 8001054:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001056:	2309      	movs	r3, #9
 8001058:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800105a:	2300      	movs	r3, #0
 800105c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800105e:	2300      	movs	r3, #0
 8001060:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001062:	2303      	movs	r3, #3
 8001064:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001066:	2301      	movs	r3, #1
 8001068:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800106a:	2301      	movs	r3, #1
 800106c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001076:	463b      	mov	r3, r7
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f8d3 	bl	8002224 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800107e:	2004      	movs	r0, #4
 8001080:	f001 f8b0 	bl	80021e4 <HAL_MPU_Enable>

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	30040000 	.word	0x30040000
 8001090:	38001000 	.word	0x38001000

08001094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a6:	f000 ff65 	bl	8001f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001400 	.word	0x40001400

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_RTC_Init+0x48>)
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <MX_RTC_Init+0x4c>)
 80010cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_RTC_Init+0x48>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_RTC_Init+0x48>)
 80010d6:	227f      	movs	r2, #127	; 0x7f
 80010d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_RTC_Init+0x48>)
 80010dc:	22ff      	movs	r2, #255	; 0xff
 80010de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_RTC_Init+0x48>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_RTC_Init+0x48>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_RTC_Init+0x48>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_RTC_Init+0x48>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_RTC_Init+0x48>)
 80010fa:	f007 fc25 	bl	8008948 <HAL_RTC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001104:	f7ff ffd8 	bl	80010b8 <Error_Handler>
  }

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	24045590 	.word	0x24045590
 8001110:	58004000 	.word	0x58004000

08001114 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_RTC_MspInit+0x2c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d105      	bne.n	8001132 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_RTC_MspInit+0x30>)
 8001128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_RTC_MspInit+0x30>)
 800112c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001130:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	58004000 	.word	0x58004000
 8001144:	58024400 	.word	0x58024400

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x38>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_MspInit+0x38>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_MspInit+0x38>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	210f      	movs	r1, #15
 8001170:	f06f 0001 	mvn.w	r0, #1
 8001174:	f000 fff6 	bl	8002164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	58024400 	.word	0x58024400

08001184 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	d827      	bhi.n	80011e2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001192:	2200      	movs	r2, #0
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	2037      	movs	r0, #55	; 0x37
 8001198:	f000 ffe4 	bl	8002164 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800119c:	2037      	movs	r0, #55	; 0x37
 800119e:	f000 fffb 	bl	8002198 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011a2:	4a29      	ldr	r2, [pc, #164]	; (8001248 <HAL_InitTick+0xc4>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <HAL_InitTick+0xc8>)
 80011aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ae:	4a27      	ldr	r2, [pc, #156]	; (800124c <HAL_InitTick+0xc8>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_InitTick+0xc8>)
 80011ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c6:	f107 0210 	add.w	r2, r7, #16
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 f825 	bl	8007220 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <HAL_InitTick+0x6a>
 80011e0:	e001      	b.n	80011e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e02b      	b.n	800123e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011e6:	f005 ffef 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 80011ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011ec:	e004      	b.n	80011f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ee:	f005 ffeb 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 80011f2:	4603      	mov	r3, r0
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_InitTick+0xcc>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9b      	lsrs	r3, r3, #18
 8001202:	3b01      	subs	r3, #1
 8001204:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_InitTick+0xd0>)
 8001208:	4a13      	ldr	r2, [pc, #76]	; (8001258 <HAL_InitTick+0xd4>)
 800120a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_InitTick+0xd0>)
 800120e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001212:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001214:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_InitTick+0xd0>)
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_InitTick+0xd0>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_InitTick+0xd0>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <HAL_InitTick+0xd0>)
 8001228:	f007 fc9a 	bl	8008b60 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d104      	bne.n	800123c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <HAL_InitTick+0xd0>)
 8001234:	f007 fcf6 	bl	8008c24 <HAL_TIM_Base_Start_IT>
 8001238:	4603      	mov	r3, r0
 800123a:	e000      	b.n	800123e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	24000008 	.word	0x24000008
 800124c:	58024400 	.word	0x58024400
 8001250:	431bde83 	.word	0x431bde83
 8001254:	240455b4 	.word	0x240455b4
 8001258:	40001400 	.word	0x40001400

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM7_IRQHandler+0x10>)
 800128e:	f007 fcff 	bl	8008c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	240455b4 	.word	0x240455b4

0800129c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <DMA2_Stream0_IRQHandler+0x10>)
 80012a2:	f001 fc5d 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2404595c 	.word	0x2404595c

080012b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA2_Stream1_IRQHandler+0x10>)
 80012b6:	f001 fc53 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2404586c 	.word	0x2404586c

080012c4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <DMA2_Stream4_IRQHandler+0x10>)
 80012ca:	f001 fc49 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	24045600 	.word	0x24045600

080012d8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <ETH_IRQHandler+0x10>)
 80012de:	f003 fa7f 	bl	80047e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24045ce0 	.word	0x24045ce0

080012ec <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA2_Stream5_IRQHandler+0x10>)
 80012f2:	f001 fc35 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	240459d4 	.word	0x240459d4

08001300 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA2_Stream6_IRQHandler+0x10>)
 8001306:	f001 fc2b 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	24045678 	.word	0x24045678

08001314 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <DMA2_Stream7_IRQHandler+0x10>)
 800131a:	f001 fc21 	bl	8002b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	240458e4 	.word	0x240458e4

08001328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	return 1;
 800132c:	2301      	movs	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_kill>:

int _kill(int pid, int sig)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <_kill+0x20>)
 8001344:	2216      	movs	r2, #22
 8001346:	601a      	str	r2, [r3, #0]
	return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	24048e80 	.word	0x24048e80

0800135c <_exit>:

void _exit (int status)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffe5 	bl	8001338 <_kill>
	while (1) {}		/* Make sure we hang here */
 800136e:	e7fe      	b.n	800136e <_exit+0x12>

08001370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00a      	b.n	8001398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001382:	f3af 8000 	nop.w
 8001386:	4601      	mov	r1, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf0      	blt.n	8001382 <_read+0x12>
	}

return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e009      	b.n	80013d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf1      	blt.n	80013bc <_write+0x12>
	}
	return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	605a      	str	r2, [r3, #4]
	return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d205      	bcs.n	8001488 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <_sbrk+0x6c>)
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001486:	e009      	b.n	800149c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	24080000 	.word	0x24080000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	24000484 	.word	0x24000484
 80014b4:	24048eb8 	.word	0x24048eb8
 80014b8:	24048e80 	.word	0x24048e80

080014bc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <MX_USART1_UART_Init+0x94>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_USART1_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_USART1_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <MX_USART1_UART_Init+0x90>)
 8001506:	f007 fdc3 	bl	8009090 <HAL_UART_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001510:	f7ff fdd2 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_USART1_UART_Init+0x90>)
 8001518:	f008 fda9 	bl	800a06e <HAL_UARTEx_SetTxFifoThreshold>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001522:	f7ff fdc9 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <MX_USART1_UART_Init+0x90>)
 800152a:	f008 fdde 	bl	800a0ea <HAL_UARTEx_SetRxFifoThreshold>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001534:	f7ff fdc0 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_USART1_UART_Init+0x90>)
 800153a:	f008 fd5f 	bl	8009ffc <HAL_UARTEx_DisableFifoMode>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001544:	f7ff fdb8 	bl	80010b8 <Error_Handler>
  }

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	24045a4c 	.word	0x24045a4c
 8001550:	40011000 	.word	0x40011000

08001554 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 800159e:	f007 fd77 	bl	8009090 <HAL_UART_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015a8:	f7ff fd86 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 80015b0:	f008 fd5d 	bl	800a06e <HAL_UARTEx_SetTxFifoThreshold>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f7ff fd7d 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 80015c2:	f008 fd92 	bl	800a0ea <HAL_UARTEx_SetRxFifoThreshold>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015cc:	f7ff fd74 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_USART2_UART_Init+0x90>)
 80015d2:	f008 fd13 	bl	8009ffc <HAL_UARTEx_DisableFifoMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f7ff fd6c 	bl	80010b8 <Error_Handler>
  }

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	24045b64 	.word	0x24045b64
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <MX_USART3_UART_Init+0x90>)
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_USART3_UART_Init+0x94>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_USART3_UART_Init+0x90>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_USART3_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_USART3_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USART3_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001636:	f007 fd2b 	bl	8009090 <HAL_UART_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001640:	f7ff fd3a 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_USART3_UART_Init+0x90>)
 8001648:	f008 fd11 	bl	800a06e <HAL_UARTEx_SetTxFifoThreshold>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001652:	f7ff fd31 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <MX_USART3_UART_Init+0x90>)
 800165a:	f008 fd46 	bl	800a0ea <HAL_UARTEx_SetRxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001664:	f7ff fd28 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_USART3_UART_Init+0x90>)
 800166a:	f008 fcc7 	bl	8009ffc <HAL_UARTEx_DisableFifoMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001674:	f7ff fd20 	bl	80010b8 <Error_Handler>
  }

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	24045768 	.word	0x24045768
 8001680:	40004800 	.word	0x40004800

08001684 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <MX_USART6_UART_Init+0x90>)
 800168a:	4a23      	ldr	r2, [pc, #140]	; (8001718 <MX_USART6_UART_Init+0x94>)
 800168c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <MX_USART6_UART_Init+0x90>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_USART6_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_USART6_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016ce:	f007 fcdf 	bl	8009090 <HAL_UART_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80016d8:	f7ff fcee 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016e0:	f008 fcc5 	bl	800a06e <HAL_UARTEx_SetTxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80016ea:	f7ff fce5 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <MX_USART6_UART_Init+0x90>)
 80016f2:	f008 fcfa 	bl	800a0ea <HAL_UARTEx_SetRxFifoThreshold>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80016fc:	f7ff fcdc 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_USART6_UART_Init+0x90>)
 8001702:	f008 fc7b 	bl	8009ffc <HAL_UARTEx_DisableFifoMode>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800170c:	f7ff fcd4 	bl	80010b8 <Error_Handler>
  }

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	24045ad8 	.word	0x24045ad8
 8001718:	40011400 	.word	0x40011400

0800171c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	; 0x38
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_UART_MspInit+0x260>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f040 808c 	bne.w	8001858 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001740:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001746:	4a8e      	ldr	r2, [pc, #568]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001750:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	4a86      	ldr	r2, [pc, #536]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176e:	4b84      	ldr	r3, [pc, #528]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800177c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178e:	2307      	movs	r3, #7
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	487a      	ldr	r0, [pc, #488]	; (8001984 <HAL_UART_MspInit+0x268>)
 800179a:	f004 f9d9 	bl	8005b50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <HAL_UART_MspInit+0x270>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017a4:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017a6:	2229      	movs	r2, #41	; 0x29
 80017a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017aa:	4b77      	ldr	r3, [pc, #476]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b0:	4b75      	ldr	r3, [pc, #468]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b6:	4b74      	ldr	r3, [pc, #464]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c4:	4b70      	ldr	r3, [pc, #448]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017d0:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017de:	486a      	ldr	r0, [pc, #424]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017e0:	f000 fe62 	bl	80024a8 <HAL_DMA_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80017ea:	f7ff fc65 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a65      	ldr	r2, [pc, #404]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017f2:	679a      	str	r2, [r3, #120]	; 0x78
 80017f4:	4a64      	ldr	r2, [pc, #400]	; (8001988 <HAL_UART_MspInit+0x26c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_UART_MspInit+0x274>)
 80017fc:	4a65      	ldr	r2, [pc, #404]	; (8001994 <HAL_UART_MspInit+0x278>)
 80017fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001802:	222a      	movs	r2, #42	; 0x2a
 8001804:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001806:	4b62      	ldr	r3, [pc, #392]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180c:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_UART_MspInit+0x274>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001818:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_UART_MspInit+0x274>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001820:	4b5b      	ldr	r3, [pc, #364]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001826:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800182c:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_UART_MspInit+0x274>)
 800182e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001832:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800183a:	4855      	ldr	r0, [pc, #340]	; (8001990 <HAL_UART_MspInit+0x274>)
 800183c:	f000 fe34 	bl	80024a8 <HAL_DMA_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001846:	f7ff fc37 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <HAL_UART_MspInit+0x274>)
 800184e:	675a      	str	r2, [r3, #116]	; 0x74
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_UART_MspInit+0x274>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001856:	e1aa      	b.n	8001bae <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_UART_MspInit+0x27c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	f040 80a6 	bne.w	80019b0 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001864:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186a:	4a45      	ldr	r2, [pc, #276]	; (8001980 <HAL_UART_MspInit+0x264>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001874:	4b42      	ldr	r3, [pc, #264]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a3d      	ldr	r2, [pc, #244]	; (8001980 <HAL_UART_MspInit+0x264>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_UART_MspInit+0x264>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b0:	2307      	movs	r3, #7
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4838      	ldr	r0, [pc, #224]	; (800199c <HAL_UART_MspInit+0x280>)
 80018bc:	f004 f948 	bl	8005b50 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 80018c0:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018c2:	4a38      	ldr	r2, [pc, #224]	; (80019a4 <HAL_UART_MspInit+0x288>)
 80018c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018c8:	222b      	movs	r2, #43	; 0x2b
 80018ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018cc:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_UART_MspInit+0x284>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001900:	4827      	ldr	r0, [pc, #156]	; (80019a0 <HAL_UART_MspInit+0x284>)
 8001902:	f000 fdd1 	bl	80024a8 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800190c:	f7ff fbd4 	bl	80010b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_UART_MspInit+0x284>)
 8001914:	679a      	str	r2, [r3, #120]	; 0x78
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <HAL_UART_MspInit+0x284>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 800191e:	4a23      	ldr	r2, [pc, #140]	; (80019ac <HAL_UART_MspInit+0x290>)
 8001920:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001924:	222c      	movs	r2, #44	; 0x2c
 8001926:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001950:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001954:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 800195e:	f000 fda3 	bl	80024a8 <HAL_DMA_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001968:	f7ff fba6 	bl	80010b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001970:	675a      	str	r2, [r3, #116]	; 0x74
 8001972:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_UART_MspInit+0x28c>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001978:	e119      	b.n	8001bae <HAL_UART_MspInit+0x492>
 800197a:	bf00      	nop
 800197c:	40011000 	.word	0x40011000
 8001980:	58024400 	.word	0x58024400
 8001984:	58020000 	.word	0x58020000
 8001988:	2404595c 	.word	0x2404595c
 800198c:	40020410 	.word	0x40020410
 8001990:	2404586c 	.word	0x2404586c
 8001994:	40020428 	.word	0x40020428
 8001998:	40004400 	.word	0x40004400
 800199c:	58020c00 	.word	0x58020c00
 80019a0:	24045600 	.word	0x24045600
 80019a4:	40020470 	.word	0x40020470
 80019a8:	240459d4 	.word	0x240459d4
 80019ac:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HAL_UART_MspInit+0x49c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d16b      	bne.n	8001a92 <HAL_UART_MspInit+0x376>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ba:	4b80      	ldr	r3, [pc, #512]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 80019bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c0:	4a7e      	ldr	r2, [pc, #504]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 80019c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ca:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 80019cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80019d8:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 80019da:	4a7a      	ldr	r2, [pc, #488]	; (8001bc4 <HAL_UART_MspInit+0x4a8>)
 80019dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80019de:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 80019e0:	222d      	movs	r2, #45	; 0x2d
 80019e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ea:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 80019f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f8:	4b71      	ldr	r3, [pc, #452]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019fe:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001a04:	4b6e      	ldr	r3, [pc, #440]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a10:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a12:	4b6b      	ldr	r3, [pc, #428]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a18:	4869      	ldr	r0, [pc, #420]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a1a:	f000 fd45 	bl	80024a8 <HAL_DMA_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x30c>
      Error_Handler();
 8001a24:	f7ff fb48 	bl	80010b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a2c:	679a      	str	r2, [r3, #120]	; 0x78
 8001a2e:	4a64      	ldr	r2, [pc, #400]	; (8001bc0 <HAL_UART_MspInit+0x4a4>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8001a34:	4b64      	ldr	r3, [pc, #400]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_UART_MspInit+0x4b0>)
 8001a38:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a3c:	222e      	movs	r2, #46	; 0x2e
 8001a3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a40:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a4c:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a52:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a54:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a66:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a6c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a6e:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a74:	4854      	ldr	r0, [pc, #336]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a76:	f000 fd17 	bl	80024a8 <HAL_DMA_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_MspInit+0x368>
      Error_Handler();
 8001a80:	f7ff fb1a 	bl	80010b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a88:	675a      	str	r2, [r3, #116]	; 0x74
 8001a8a:	4a4f      	ldr	r2, [pc, #316]	; (8001bc8 <HAL_UART_MspInit+0x4ac>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a90:	e08d      	b.n	8001bae <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART6)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_UART_MspInit+0x4b4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f040 8088 	bne.w	8001bae <HAL_UART_MspInit+0x492>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 8001aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa4:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 8001ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	4a3e      	ldr	r2, [pc, #248]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_UART_MspInit+0x4a0>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ada:	23c0      	movs	r3, #192	; 0xc0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001aea:	2307      	movs	r3, #7
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <HAL_UART_MspInit+0x4b8>)
 8001af6:	f004 f82b 	bl	8005b50 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001afc:	4a37      	ldr	r2, [pc, #220]	; (8001bdc <HAL_UART_MspInit+0x4c0>)
 8001afe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b02:	2247      	movs	r2, #71	; 0x47
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0c:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b18:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b38:	4827      	ldr	r0, [pc, #156]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b3a:	f000 fcb5 	bl	80024a8 <HAL_DMA_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001b44:	f7ff fab8 	bl	80010b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b4c:	679a      	str	r2, [r3, #120]	; 0x78
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_UART_MspInit+0x4bc>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b56:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_UART_MspInit+0x4c8>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b5c:	2248      	movs	r2, #72	; 0x48
 8001b5e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001b92:	4813      	ldr	r0, [pc, #76]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001b94:	f000 fc88 	bl	80024a8 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_UART_MspInit+0x486>
      Error_Handler();
 8001b9e:	f7ff fa8b 	bl	80010b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001ba6:	675a      	str	r2, [r3, #116]	; 0x74
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_UART_MspInit+0x4c4>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bae:	bf00      	nop
 8001bb0:	3738      	adds	r7, #56	; 0x38
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40004800 	.word	0x40004800
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	240456f0 	.word	0x240456f0
 8001bc4:	40020440 	.word	0x40020440
 8001bc8:	240457f4 	.word	0x240457f4
 8001bcc:	40020458 	.word	0x40020458
 8001bd0:	40011400 	.word	0x40011400
 8001bd4:	58020800 	.word	0x58020800
 8001bd8:	24045678 	.word	0x24045678
 8001bdc:	400204a0 	.word	0x400204a0
 8001be0:	240458e4 	.word	0x240458e4
 8001be4:	400204b8 	.word	0x400204b8

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bec:	f7fe fd56 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bf2:	e003      	b.n	8001bfc <LoopCopyDataInit>

08001bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bfa:	3104      	adds	r1, #4

08001bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bfc:	480a      	ldr	r0, [pc, #40]	; (8001c28 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c04:	d3f6      	bcc.n	8001bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001c08:	e002      	b.n	8001c10 <LoopFillZerobss>

08001c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c0c:	f842 3b04 	str.w	r3, [r2], #4

08001c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c14:	d3f9      	bcc.n	8001c0a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f01e fe65 	bl	80208e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7ff f8a3 	bl	8000d64 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001c20:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001c24:	08028024 	.word	0x08028024
  ldr  r0, =_sdata
 8001c28:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001c2c:	24000214 	.word	0x24000214
  ldr  r2, =_sbss
 8001c30:	24000214 	.word	0x24000214
  ldr  r3, = _ebss
 8001c34:	24048eb8 	.word	0x24048eb8

08001c38 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC3_IRQHandler>

08001c3a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <LAN8742_RegisterBusIO+0x28>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <LAN8742_RegisterBusIO+0x28>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <LAN8742_RegisterBusIO+0x28>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c66:	e014      	b.n	8001c92 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d17c      	bne.n	8001db8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e01c      	b.n	8001d12 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f107 0208 	add.w	r2, r7, #8
 8001ce0:	2112      	movs	r1, #18
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	4798      	blx	r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da03      	bge.n	8001cf4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001cec:	f06f 0304 	mvn.w	r3, #4
 8001cf0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001cf2:	e00b      	b.n	8001d0c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d105      	bne.n	8001d0c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
         break;
 8001d0a:	e005      	b.n	8001d18 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b1f      	cmp	r3, #31
 8001d16:	d9df      	bls.n	8001cd8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b1f      	cmp	r3, #31
 8001d1e:	d902      	bls.n	8001d26 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d20:	f06f 0302 	mvn.w	r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d145      	bne.n	8001db8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6810      	ldr	r0, [r2, #0]
 8001d34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4798      	blx	r3
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db37      	blt.n	8001db2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6810      	ldr	r0, [r2, #0]
 8001d4a:	f107 0208 	add.w	r2, r7, #8
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4798      	blx	r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db28      	blt.n	8001daa <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4798      	blx	r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d62:	e01c      	b.n	8001d9e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4798      	blx	r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d76:	d80e      	bhi.n	8001d96 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6810      	ldr	r0, [r2, #0]
 8001d80:	f107 0208 	add.w	r2, r7, #8
 8001d84:	2100      	movs	r1, #0
 8001d86:	4798      	blx	r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da07      	bge.n	8001d9e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001d8e:	f06f 0304 	mvn.w	r3, #4
 8001d92:	613b      	str	r3, [r7, #16]
                 break;
 8001d94:	e010      	b.n	8001db8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001d96:	f06f 0301 	mvn.w	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
               break;
 8001d9c:	e00c      	b.n	8001db8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1dd      	bne.n	8001d64 <LAN8742_Init+0xc6>
 8001da8:	e006      	b.n	8001db8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001daa:	f06f 0304 	mvn.w	r3, #4
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e002      	b.n	8001db8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001db2:	f06f 0303 	mvn.w	r3, #3
 8001db6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d112      	bne.n	8001de4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001dc8:	bf00      	nop
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ddc:	d9f5      	bls.n	8001dca <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001de4:	693b      	ldr	r3, [r7, #16]
 }
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6810      	ldr	r0, [r2, #0]
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	2101      	movs	r1, #1
 8001e08:	4798      	blx	r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da02      	bge.n	8001e16 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e10:	f06f 0304 	mvn.w	r3, #4
 8001e14:	e06e      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6810      	ldr	r0, [r2, #0]
 8001e1e:	f107 020c 	add.w	r2, r7, #12
 8001e22:	2101      	movs	r1, #1
 8001e24:	4798      	blx	r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da02      	bge.n	8001e32 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e2c:	f06f 0304 	mvn.w	r3, #4
 8001e30:	e060      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e059      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6810      	ldr	r0, [r2, #0]
 8001e48:	f107 020c 	add.w	r2, r7, #12
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4798      	blx	r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da02      	bge.n	8001e5c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e56:	f06f 0304 	mvn.w	r3, #4
 8001e5a:	e04b      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d11b      	bne.n	8001e9e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <LAN8742_GetLinkState+0x90>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e03a      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e033      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e96:	2304      	movs	r3, #4
 8001e98:	e02c      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e02a      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6810      	ldr	r0, [r2, #0]
 8001ea6:	f107 020c 	add.w	r2, r7, #12
 8001eaa:	211f      	movs	r1, #31
 8001eac:	4798      	blx	r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da02      	bge.n	8001eba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001eb4:	f06f 0304 	mvn.w	r3, #4
 8001eb8:	e01c      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e015      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 031c 	and.w	r3, r3, #28
 8001ece:	2b18      	cmp	r3, #24
 8001ed0:	d101      	bne.n	8001ed6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e00e      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 031c 	and.w	r3, r3, #28
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d101      	bne.n	8001ee4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e007      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 031c 	and.w	r3, r3, #28
 8001eea:	2b14      	cmp	r3, #20
 8001eec:	d101      	bne.n	8001ef2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e000      	b.n	8001ef4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ef2:	2305      	movs	r3, #5
    }				
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f02:	2003      	movs	r0, #3
 8001f04:	f000 f923 	bl	800214e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f08:	f004 ffb4 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_Init+0x68>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	4913      	ldr	r1, [pc, #76]	; (8001f68 <HAL_Init+0x6c>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_Init+0x68>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_Init+0x6c>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_Init+0x70>)
 8001f3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_Init+0x74>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff f91c 	bl	8001184 <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e002      	b.n	8001f5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f56:	f7ff f8f7 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	58024400 	.word	0x58024400
 8001f68:	08027484 	.word	0x08027484
 8001f6c:	24000004 	.word	0x24000004
 8001f70:	24000000 	.word	0x24000000

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2400000c 	.word	0x2400000c
 8001f98:	24045bf0 	.word	0x24045bf0

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	24045bf0 	.word	0x24045bf0

08001fb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_GetREVID+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	5c001000 	.word	0x5c001000

08001fcc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001fdc:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	58000400 	.word	0x58000400

08001ff4 <__NVIC_SetPriorityGrouping>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <__NVIC_SetPriorityGrouping+0x40>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	4313      	orrs	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x40>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00
 8002038:	05fa0000 	.word	0x05fa0000

0800203c <__NVIC_GetPriorityGrouping>:
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	; (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff4c 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002172:	f7ff ff63 	bl	800203c <__NVIC_GetPriorityGrouping>
 8002176:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff ffb3 	bl	80020e8 <NVIC_EncodePriority>
 8002182:	4602      	mov	r2, r0
 8002184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff82 	bl	8002094 <__NVIC_SetPriority>
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff56 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021b8:	f3bf 8f5f 	dmb	sy
}
 80021bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_MPU_Disable+0x28>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_MPU_Disable+0x28>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_MPU_Disable+0x2c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	e000ed90 	.word	0xe000ed90

080021e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021ec:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_MPU_Enable+0x38>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_MPU_Enable+0x3c>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_MPU_Enable+0x3c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002202:	f3bf 8f4f 	dsb	sy
}
 8002206:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002208:	f3bf 8f6f 	isb	sy
}
 800220c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed90 	.word	0xe000ed90
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	785a      	ldrb	r2, [r3, #1]
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_MPU_ConfigRegion+0x84>)
 8002232:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d029      	beq.n	8002290 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800223c:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_MPU_ConfigRegion+0x84>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7b1b      	ldrb	r3, [r3, #12]
 8002248:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7adb      	ldrb	r3, [r3, #11]
 800224e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002250:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7a9b      	ldrb	r3, [r3, #10]
 8002256:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002258:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7b5b      	ldrb	r3, [r3, #13]
 800225e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002260:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7b9b      	ldrb	r3, [r3, #14]
 8002266:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002268:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7bdb      	ldrb	r3, [r3, #15]
 800226e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002270:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7a5b      	ldrb	r3, [r3, #9]
 8002276:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002278:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7a1b      	ldrb	r3, [r3, #8]
 800227e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002280:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800228a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800228c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800228e:	e005      	b.n	800229c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_MPU_ConfigRegion+0x84>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_MPU_ConfigRegion+0x84>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed90 	.word	0xe000ed90

080022ac <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_GetCurrentCPUID+0x24>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d101      	bne.n	80022c2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80022be:	2303      	movs	r3, #3
 80022c0:	e000      	b.n	80022c4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80022c2:	2301      	movs	r3, #1
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e054      	b.n	8002390 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7f5b      	ldrb	r3, [r3, #29]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fa8c 	bl	8000814 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	791b      	ldrb	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a22      	ldr	r2, [pc, #136]	; (8002398 <HAL_CRC_Init+0xc4>)
 8002310:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0218 	bic.w	r2, r2, #24
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	e00c      	b.n	800233e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	461a      	mov	r2, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f834 	bl	800239c <HAL_CRCEx_Polynomial_Set>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e028      	b.n	8002390 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	795b      	ldrb	r3, [r3, #5]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	e004      	b.n	800235c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6912      	ldr	r2, [r2, #16]
 800235a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	04c11db7 	.word	0x04c11db7

0800239c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80023ac:	231f      	movs	r3, #31
 80023ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80023b0:	bf00      	nop
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	613a      	str	r2, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_CRCEx_Polynomial_Set+0x34>
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_CRCEx_Polynomial_Set+0x16>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b18      	cmp	r3, #24
 80023d4:	d846      	bhi.n	8002464 <HAL_CRCEx_Polynomial_Set+0xc8>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <HAL_CRCEx_Polynomial_Set+0x40>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	0800246b 	.word	0x0800246b
 80023e0:	08002465 	.word	0x08002465
 80023e4:	08002465 	.word	0x08002465
 80023e8:	08002465 	.word	0x08002465
 80023ec:	08002465 	.word	0x08002465
 80023f0:	08002465 	.word	0x08002465
 80023f4:	08002465 	.word	0x08002465
 80023f8:	08002465 	.word	0x08002465
 80023fc:	08002459 	.word	0x08002459
 8002400:	08002465 	.word	0x08002465
 8002404:	08002465 	.word	0x08002465
 8002408:	08002465 	.word	0x08002465
 800240c:	08002465 	.word	0x08002465
 8002410:	08002465 	.word	0x08002465
 8002414:	08002465 	.word	0x08002465
 8002418:	08002465 	.word	0x08002465
 800241c:	0800244d 	.word	0x0800244d
 8002420:	08002465 	.word	0x08002465
 8002424:	08002465 	.word	0x08002465
 8002428:	08002465 	.word	0x08002465
 800242c:	08002465 	.word	0x08002465
 8002430:	08002465 	.word	0x08002465
 8002434:	08002465 	.word	0x08002465
 8002438:	08002465 	.word	0x08002465
 800243c:	08002441 	.word	0x08002441
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b06      	cmp	r3, #6
 8002444:	d913      	bls.n	800246e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800244a:	e010      	b.n	800246e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b07      	cmp	r3, #7
 8002450:	d90f      	bls.n	8002472 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002456:	e00c      	b.n	8002472 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	d90b      	bls.n	8002476 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002462:	e008      	b.n	8002476 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	75fb      	strb	r3, [r7, #23]
      break;
 8002468:	e006      	b.n	8002478 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800246a:	bf00      	nop
 800246c:	e004      	b.n	8002478 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002476:	bf00      	nop
  }
  if (status == HAL_OK)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 0118 	bic.w	r1, r3, #24
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff fd74 	bl	8001f9c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e316      	b.n	8002aee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a66      	ldr	r2, [pc, #408]	; (8002660 <HAL_DMA_Init+0x1b8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04a      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_DMA_Init+0x1bc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d045      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a63      	ldr	r2, [pc, #396]	; (8002668 <HAL_DMA_Init+0x1c0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d040      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a62      	ldr	r2, [pc, #392]	; (800266c <HAL_DMA_Init+0x1c4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d03b      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <HAL_DMA_Init+0x1c8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d036      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <HAL_DMA_Init+0x1cc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d031      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a5d      	ldr	r2, [pc, #372]	; (8002678 <HAL_DMA_Init+0x1d0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02c      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5c      	ldr	r2, [pc, #368]	; (800267c <HAL_DMA_Init+0x1d4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d027      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_DMA_Init+0x1d8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d022      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a59      	ldr	r2, [pc, #356]	; (8002684 <HAL_DMA_Init+0x1dc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d01d      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a57      	ldr	r2, [pc, #348]	; (8002688 <HAL_DMA_Init+0x1e0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d018      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a56      	ldr	r2, [pc, #344]	; (800268c <HAL_DMA_Init+0x1e4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_DMA_Init+0x1e8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00e      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a53      	ldr	r2, [pc, #332]	; (8002694 <HAL_DMA_Init+0x1ec>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_DMA_Init+0x1f0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_DMA_Init+0x1f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0xbc>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_DMA_Init+0xbe>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 813b 	beq.w	80027e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a37      	ldr	r2, [pc, #220]	; (8002660 <HAL_DMA_Init+0x1b8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d04a      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a36      	ldr	r2, [pc, #216]	; (8002664 <HAL_DMA_Init+0x1bc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d045      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a34      	ldr	r2, [pc, #208]	; (8002668 <HAL_DMA_Init+0x1c0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d040      	beq.n	800261c <HAL_DMA_Init+0x174>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_DMA_Init+0x1c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d03b      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a31      	ldr	r2, [pc, #196]	; (8002670 <HAL_DMA_Init+0x1c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d036      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_DMA_Init+0x1cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d031      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2e      	ldr	r2, [pc, #184]	; (8002678 <HAL_DMA_Init+0x1d0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02c      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2d      	ldr	r2, [pc, #180]	; (800267c <HAL_DMA_Init+0x1d4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d027      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_DMA_Init+0x1d8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d022      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_DMA_Init+0x1dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d01d      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_DMA_Init+0x1e0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d018      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_DMA_Init+0x1e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <HAL_DMA_Init+0x1e8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_DMA_Init+0x1ec>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_DMA_Init+0x1f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a21      	ldr	r2, [pc, #132]	; (800269c <HAL_DMA_Init+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <HAL_DMA_Init+0x186>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e007      	b.n	800263e <HAL_DMA_Init+0x196>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800263e:	e02f      	b.n	80026a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002640:	f7ff fcac 	bl	8001f9c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b05      	cmp	r3, #5
 800264c:	d928      	bls.n	80026a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e246      	b.n	8002aee <HAL_DMA_Init+0x646>
 8002660:	40020010 	.word	0x40020010
 8002664:	40020028 	.word	0x40020028
 8002668:	40020040 	.word	0x40020040
 800266c:	40020058 	.word	0x40020058
 8002670:	40020070 	.word	0x40020070
 8002674:	40020088 	.word	0x40020088
 8002678:	400200a0 	.word	0x400200a0
 800267c:	400200b8 	.word	0x400200b8
 8002680:	40020410 	.word	0x40020410
 8002684:	40020428 	.word	0x40020428
 8002688:	40020440 	.word	0x40020440
 800268c:	40020458 	.word	0x40020458
 8002690:	40020470 	.word	0x40020470
 8002694:	40020488 	.word	0x40020488
 8002698:	400204a0 	.word	0x400204a0
 800269c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1c8      	bne.n	8002640 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4b83      	ldr	r3, [pc, #524]	; (80028c8 <HAL_DMA_Init+0x420>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4313      	orrs	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002704:	4b71      	ldr	r3, [pc, #452]	; (80028cc <HAL_DMA_Init+0x424>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b71      	ldr	r3, [pc, #452]	; (80028d0 <HAL_DMA_Init+0x428>)
 800270a:	4013      	ands	r3, r2
 800270c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002710:	d328      	bcc.n	8002764 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b28      	cmp	r3, #40	; 0x28
 8002718:	d903      	bls.n	8002722 <HAL_DMA_Init+0x27a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b2e      	cmp	r3, #46	; 0x2e
 8002720:	d917      	bls.n	8002752 <HAL_DMA_Init+0x2aa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b3e      	cmp	r3, #62	; 0x3e
 8002728:	d903      	bls.n	8002732 <HAL_DMA_Init+0x28a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b42      	cmp	r3, #66	; 0x42
 8002730:	d90f      	bls.n	8002752 <HAL_DMA_Init+0x2aa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b46      	cmp	r3, #70	; 0x46
 8002738:	d903      	bls.n	8002742 <HAL_DMA_Init+0x29a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b48      	cmp	r3, #72	; 0x48
 8002740:	d907      	bls.n	8002752 <HAL_DMA_Init+0x2aa>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b4e      	cmp	r3, #78	; 0x4e
 8002748:	d905      	bls.n	8002756 <HAL_DMA_Init+0x2ae>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b52      	cmp	r3, #82	; 0x52
 8002750:	d801      	bhi.n	8002756 <HAL_DMA_Init+0x2ae>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_DMA_Init+0x2b0>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002762:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b04      	cmp	r3, #4
 800278c:	d117      	bne.n	80027be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 f9b9 	bl	8003b18 <DMA_CheckFifoParam>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e197      	b.n	8002aee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f001 f8f4 	bl	80039b4 <DMA_CalcBaseAndBitshift>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	223f      	movs	r2, #63	; 0x3f
 80027da:	409a      	lsls	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e0cd      	b.n	800297e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_DMA_Init+0x42c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <HAL_DMA_Init+0x430>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01d      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_DMA_Init+0x434>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <HAL_DMA_Init+0x438>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a35      	ldr	r2, [pc, #212]	; (80028e4 <HAL_DMA_Init+0x43c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00e      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <HAL_DMA_Init+0x440>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <HAL_DMA_Init+0x444>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_DMA_Init+0x38a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a30      	ldr	r2, [pc, #192]	; (80028f0 <HAL_DMA_Init+0x448>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_DMA_Init+0x38e>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_DMA_Init+0x390>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8097 	beq.w	800296c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_DMA_Init+0x42c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d021      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_DMA_Init+0x430>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01c      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_DMA_Init+0x434>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d017      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_DMA_Init+0x438>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d012      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_DMA_Init+0x43c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00d      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_DMA_Init+0x440>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d008      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_DMA_Init+0x444>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <HAL_DMA_Init+0x3e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_DMA_Init+0x448>)
 800288a:	4293      	cmp	r3, r2
 800288c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_DMA_Init+0x44c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d020      	beq.n	80028f8 <HAL_DMA_Init+0x450>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d102      	bne.n	80028c4 <HAL_DMA_Init+0x41c>
 80028be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028c2:	e01a      	b.n	80028fa <HAL_DMA_Init+0x452>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e018      	b.n	80028fa <HAL_DMA_Init+0x452>
 80028c8:	fe10803f 	.word	0xfe10803f
 80028cc:	5c001000 	.word	0x5c001000
 80028d0:	ffff0000 	.word	0xffff0000
 80028d4:	58025408 	.word	0x58025408
 80028d8:	5802541c 	.word	0x5802541c
 80028dc:	58025430 	.word	0x58025430
 80028e0:	58025444 	.word	0x58025444
 80028e4:	58025458 	.word	0x58025458
 80028e8:	5802546c 	.word	0x5802546c
 80028ec:	58025480 	.word	0x58025480
 80028f0:	58025494 	.word	0x58025494
 80028f4:	fffe000f 	.word	0xfffe000f
 80028f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68d2      	ldr	r2, [r2, #12]
 80028fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002928:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <HAL_DMA_Init+0x650>)
 8002940:	4413      	add	r3, r2
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_DMA_Init+0x654>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	009a      	lsls	r2, r3, #2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f001 f82f 	bl	80039b4 <DMA_CalcBaseAndBitshift>
 8002956:	4603      	mov	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e008      	b.n	800297e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0b7      	b.n	8002aee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_DMA_Init+0x658>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d072      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_DMA_Init+0x65c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d06d      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_DMA_Init+0x660>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d068      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_DMA_Init+0x664>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d063      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a59      	ldr	r2, [pc, #356]	; (8002b10 <HAL_DMA_Init+0x668>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d05e      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_DMA_Init+0x66c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d059      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_DMA_Init+0x670>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d054      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_DMA_Init+0x674>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d04f      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_DMA_Init+0x678>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a51      	ldr	r2, [pc, #324]	; (8002b24 <HAL_DMA_Init+0x67c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a50      	ldr	r2, [pc, #320]	; (8002b28 <HAL_DMA_Init+0x680>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_DMA_Init+0x684>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_DMA_Init+0x688>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_DMA_Init+0x68c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_DMA_Init+0x690>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_DMA_Init+0x694>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <HAL_DMA_Init+0x698>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_DMA_Init+0x69c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a44      	ldr	r2, [pc, #272]	; (8002b48 <HAL_DMA_Init+0x6a0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a42      	ldr	r2, [pc, #264]	; (8002b4c <HAL_DMA_Init+0x6a4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <HAL_DMA_Init+0x6a8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <HAL_DMA_Init+0x6ac>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3e      	ldr	r2, [pc, #248]	; (8002b58 <HAL_DMA_Init+0x6b0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a3c      	ldr	r2, [pc, #240]	; (8002b5c <HAL_DMA_Init+0x6b4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Init+0x5ca>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_DMA_Init+0x5cc>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d032      	beq.n	8002ade <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f001 f8c9 	bl	8003c10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d102      	bne.n	8002a8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002aa0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_DMA_Init+0x624>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d80c      	bhi.n	8002acc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 f946 	bl	8003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e008      	b.n	8002ade <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	a7fdabf8 	.word	0xa7fdabf8
 8002afc:	cccccccd 	.word	0xcccccccd
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
 8002b40:	58025408 	.word	0x58025408
 8002b44:	5802541c 	.word	0x5802541c
 8002b48:	58025430 	.word	0x58025430
 8002b4c:	58025444 	.word	0x58025444
 8002b50:	58025458 	.word	0x58025458
 8002b54:	5802546c 	.word	0x5802546c
 8002b58:	58025480 	.word	0x58025480
 8002b5c:	58025494 	.word	0x58025494

08002b60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b6c:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_DMA_IRQHandler+0x1ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_DMA_IRQHandler+0x1b0>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5f      	ldr	r2, [pc, #380]	; (8002d14 <HAL_DMA_IRQHandler+0x1b4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04a      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	; (8002d18 <HAL_DMA_IRQHandler+0x1b8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d045      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5c      	ldr	r2, [pc, #368]	; (8002d1c <HAL_DMA_IRQHandler+0x1bc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d040      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <HAL_DMA_IRQHandler+0x1c0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d03b      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a59      	ldr	r2, [pc, #356]	; (8002d24 <HAL_DMA_IRQHandler+0x1c4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d036      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <HAL_DMA_IRQHandler+0x1c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a56      	ldr	r2, [pc, #344]	; (8002d2c <HAL_DMA_IRQHandler+0x1cc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d02c      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a54      	ldr	r2, [pc, #336]	; (8002d30 <HAL_DMA_IRQHandler+0x1d0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a53      	ldr	r2, [pc, #332]	; (8002d34 <HAL_DMA_IRQHandler+0x1d4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_DMA_IRQHandler+0x1d8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_DMA_IRQHandler+0x1dc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a4e      	ldr	r2, [pc, #312]	; (8002d40 <HAL_DMA_IRQHandler+0x1e0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_DMA_IRQHandler+0x1e4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_DMA_IRQHandler+0x1e8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a4a      	ldr	r2, [pc, #296]	; (8002d4c <HAL_DMA_IRQHandler+0x1ec>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xd2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_DMA_IRQHandler+0x1f0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_IRQHandler+0xd6>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_IRQHandler+0xd8>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 842b 	beq.w	8003494 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2208      	movs	r2, #8
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a2 	beq.w	8002d98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <HAL_DMA_IRQHandler+0x1b4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2d      	ldr	r2, [pc, #180]	; (8002d18 <HAL_DMA_IRQHandler+0x1b8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d045      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <HAL_DMA_IRQHandler+0x1bc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <HAL_DMA_IRQHandler+0x1c0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_DMA_IRQHandler+0x1c4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d036      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <HAL_DMA_IRQHandler+0x1c8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <HAL_DMA_IRQHandler+0x1cc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02c      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <HAL_DMA_IRQHandler+0x1d0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_DMA_IRQHandler+0x1d4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <HAL_DMA_IRQHandler+0x1d8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_DMA_IRQHandler+0x1dc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_DMA_IRQHandler+0x1e0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_DMA_IRQHandler+0x1e4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_DMA_IRQHandler+0x1e8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_DMA_IRQHandler+0x1ec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x194>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_DMA_IRQHandler+0x1f0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d12f      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x1f4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e02e      	b.n	8002d68 <HAL_DMA_IRQHandler+0x208>
 8002d0a:	bf00      	nop
 8002d0c:	24000000 	.word	0x24000000
 8002d10:	1b4e81b5 	.word	0x1b4e81b5
 8002d14:	40020010 	.word	0x40020010
 8002d18:	40020028 	.word	0x40020028
 8002d1c:	40020040 	.word	0x40020040
 8002d20:	40020058 	.word	0x40020058
 8002d24:	40020070 	.word	0x40020070
 8002d28:	40020088 	.word	0x40020088
 8002d2c:	400200a0 	.word	0x400200a0
 8002d30:	400200b8 	.word	0x400200b8
 8002d34:	40020410 	.word	0x40020410
 8002d38:	40020428 	.word	0x40020428
 8002d3c:	40020440 	.word	0x40020440
 8002d40:	40020458 	.word	0x40020458
 8002d44:	40020470 	.word	0x40020470
 8002d48:	40020488 	.word	0x40020488
 8002d4c:	400204a0 	.word	0x400204a0
 8002d50:	400204b8 	.word	0x400204b8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d015      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2208      	movs	r2, #8
 8002d86:	409a      	lsls	r2, r3
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06e      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a69      	ldr	r2, [pc, #420]	; (8002f58 <HAL_DMA_IRQHandler+0x3f8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04a      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <HAL_DMA_IRQHandler+0x3fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d045      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a66      	ldr	r2, [pc, #408]	; (8002f60 <HAL_DMA_IRQHandler+0x400>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a64      	ldr	r2, [pc, #400]	; (8002f64 <HAL_DMA_IRQHandler+0x404>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d03b      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_DMA_IRQHandler+0x408>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d036      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_DMA_IRQHandler+0x40c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d031      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a60      	ldr	r2, [pc, #384]	; (8002f70 <HAL_DMA_IRQHandler+0x410>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02c      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5e      	ldr	r2, [pc, #376]	; (8002f74 <HAL_DMA_IRQHandler+0x414>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d027      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a5d      	ldr	r2, [pc, #372]	; (8002f78 <HAL_DMA_IRQHandler+0x418>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5b      	ldr	r2, [pc, #364]	; (8002f7c <HAL_DMA_IRQHandler+0x41c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5a      	ldr	r2, [pc, #360]	; (8002f80 <HAL_DMA_IRQHandler+0x420>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_DMA_IRQHandler+0x424>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a57      	ldr	r2, [pc, #348]	; (8002f88 <HAL_DMA_IRQHandler+0x428>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a55      	ldr	r2, [pc, #340]	; (8002f8c <HAL_DMA_IRQHandler+0x42c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a54      	ldr	r2, [pc, #336]	; (8002f90 <HAL_DMA_IRQHandler+0x430>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x2ee>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_DMA_IRQHandler+0x434>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10a      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x304>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e003      	b.n	8002e6c <HAL_DMA_IRQHandler+0x30c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f043 0202 	orr.w	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2204      	movs	r2, #4
 8002e96:	409a      	lsls	r2, r3
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 808f 	beq.w	8002fc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_DMA_IRQHandler+0x3f8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04a      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_DMA_IRQHandler+0x3fc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d045      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_DMA_IRQHandler+0x400>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d040      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <HAL_DMA_IRQHandler+0x404>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d03b      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <HAL_DMA_IRQHandler+0x408>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d036      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <HAL_DMA_IRQHandler+0x40c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_DMA_IRQHandler+0x410>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d02c      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_DMA_IRQHandler+0x414>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d027      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_DMA_IRQHandler+0x418>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_DMA_IRQHandler+0x41c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_DMA_IRQHandler+0x420>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_DMA_IRQHandler+0x424>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <HAL_DMA_IRQHandler+0x428>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <HAL_DMA_IRQHandler+0x42c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <HAL_DMA_IRQHandler+0x430>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3e2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <HAL_DMA_IRQHandler+0x434>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d12a      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x438>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e023      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x440>
 8002f58:	40020010 	.word	0x40020010
 8002f5c:	40020028 	.word	0x40020028
 8002f60:	40020040 	.word	0x40020040
 8002f64:	40020058 	.word	0x40020058
 8002f68:	40020070 	.word	0x40020070
 8002f6c:	40020088 	.word	0x40020088
 8002f70:	400200a0 	.word	0x400200a0
 8002f74:	400200b8 	.word	0x400200b8
 8002f78:	40020410 	.word	0x40020410
 8002f7c:	40020428 	.word	0x40020428
 8002f80:	40020440 	.word	0x40020440
 8002f84:	40020458 	.word	0x40020458
 8002f88:	40020470 	.word	0x40020470
 8002f8c:	40020488 	.word	0x40020488
 8002f90:	400204a0 	.word	0x400204a0
 8002f94:	400204b8 	.word	0x400204b8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2204      	movs	r2, #4
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2210      	movs	r2, #16
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a6 	beq.w	8003122 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a85      	ldr	r2, [pc, #532]	; (80031f0 <HAL_DMA_IRQHandler+0x690>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04a      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a83      	ldr	r2, [pc, #524]	; (80031f4 <HAL_DMA_IRQHandler+0x694>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d045      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a82      	ldr	r2, [pc, #520]	; (80031f8 <HAL_DMA_IRQHandler+0x698>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a80      	ldr	r2, [pc, #512]	; (80031fc <HAL_DMA_IRQHandler+0x69c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d03b      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7f      	ldr	r2, [pc, #508]	; (8003200 <HAL_DMA_IRQHandler+0x6a0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d036      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <HAL_DMA_IRQHandler+0x6a4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <HAL_DMA_IRQHandler+0x6a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d02c      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7a      	ldr	r2, [pc, #488]	; (800320c <HAL_DMA_IRQHandler+0x6ac>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d027      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a79      	ldr	r2, [pc, #484]	; (8003210 <HAL_DMA_IRQHandler+0x6b0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_DMA_IRQHandler+0x6b4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a76      	ldr	r2, [pc, #472]	; (8003218 <HAL_DMA_IRQHandler+0x6b8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a74      	ldr	r2, [pc, #464]	; (800321c <HAL_DMA_IRQHandler+0x6bc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a73      	ldr	r2, [pc, #460]	; (8003220 <HAL_DMA_IRQHandler+0x6c0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a71      	ldr	r2, [pc, #452]	; (8003224 <HAL_DMA_IRQHandler+0x6c4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a70      	ldr	r2, [pc, #448]	; (8003228 <HAL_DMA_IRQHandler+0x6c8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_IRQHandler+0x516>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a6e      	ldr	r2, [pc, #440]	; (800322c <HAL_DMA_IRQHandler+0x6cc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10a      	bne.n	800308c <HAL_DMA_IRQHandler+0x52c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e009      	b.n	80030a0 <HAL_DMA_IRQHandler+0x540>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03e      	beq.n	8003122 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2210      	movs	r2, #16
 80030ae:	409a      	lsls	r2, r3
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d018      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d024      	beq.n	8003122 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
 80030e0:	e01f      	b.n	8003122 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01b      	beq.n	8003122 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
 80030f2:	e016      	b.n	8003122 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0208 	bic.w	r2, r2, #8
 8003110:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2220      	movs	r2, #32
 800312c:	409a      	lsls	r2, r3
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8110 	beq.w	8003358 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <HAL_DMA_IRQHandler+0x690>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d04a      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_DMA_IRQHandler+0x694>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d045      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <HAL_DMA_IRQHandler+0x698>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d040      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a28      	ldr	r2, [pc, #160]	; (80031fc <HAL_DMA_IRQHandler+0x69c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d03b      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_DMA_IRQHandler+0x6a0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d036      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_DMA_IRQHandler+0x6a4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d031      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a23      	ldr	r2, [pc, #140]	; (8003208 <HAL_DMA_IRQHandler+0x6a8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02c      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_DMA_IRQHandler+0x6ac>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d027      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <HAL_DMA_IRQHandler+0x6b0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_DMA_IRQHandler+0x6b4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01d      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_DMA_IRQHandler+0x6b8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d018      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_DMA_IRQHandler+0x6bc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <HAL_DMA_IRQHandler+0x6c0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_DMA_IRQHandler+0x6c4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a17      	ldr	r2, [pc, #92]	; (8003228 <HAL_DMA_IRQHandler+0x6c8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x678>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_DMA_IRQHandler+0x6cc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d12b      	bne.n	8003230 <HAL_DMA_IRQHandler+0x6d0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	e02a      	b.n	8003244 <HAL_DMA_IRQHandler+0x6e4>
 80031ee:	bf00      	nop
 80031f0:	40020010 	.word	0x40020010
 80031f4:	40020028 	.word	0x40020028
 80031f8:	40020040 	.word	0x40020040
 80031fc:	40020058 	.word	0x40020058
 8003200:	40020070 	.word	0x40020070
 8003204:	40020088 	.word	0x40020088
 8003208:	400200a0 	.word	0x400200a0
 800320c:	400200b8 	.word	0x400200b8
 8003210:	40020410 	.word	0x40020410
 8003214:	40020428 	.word	0x40020428
 8003218:	40020440 	.word	0x40020440
 800321c:	40020458 	.word	0x40020458
 8003220:	40020470 	.word	0x40020470
 8003224:	40020488 	.word	0x40020488
 8003228:	400204a0 	.word	0x400204a0
 800322c:	400204b8 	.word	0x400204b8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8087 	beq.w	8003358 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2220      	movs	r2, #32
 8003254:	409a      	lsls	r2, r3
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b04      	cmp	r3, #4
 8003264:	d139      	bne.n	80032da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0216 	bic.w	r2, r2, #22
 8003274:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003284:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_DMA_IRQHandler+0x736>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	223f      	movs	r2, #63	; 0x3f
 80032b0:	409a      	lsls	r2, r3
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 834a 	beq.w	8003964 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
          }
          return;
 80032d8:	e344      	b.n	8003964 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02c      	beq.n	8003358 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e027      	b.n	8003358 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d023      	beq.n	8003358 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
 8003318:	e01e      	b.n	8003358 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0210 	bic.w	r2, r2, #16
 8003336:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8306 	beq.w	800396e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8088 	beq.w	8003480 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2204      	movs	r2, #4
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a7a      	ldr	r2, [pc, #488]	; (8003568 <HAL_DMA_IRQHandler+0xa08>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d04a      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a79      	ldr	r2, [pc, #484]	; (800356c <HAL_DMA_IRQHandler+0xa0c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d045      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a77      	ldr	r2, [pc, #476]	; (8003570 <HAL_DMA_IRQHandler+0xa10>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d040      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a76      	ldr	r2, [pc, #472]	; (8003574 <HAL_DMA_IRQHandler+0xa14>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d03b      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a74      	ldr	r2, [pc, #464]	; (8003578 <HAL_DMA_IRQHandler+0xa18>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d036      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a73      	ldr	r2, [pc, #460]	; (800357c <HAL_DMA_IRQHandler+0xa1c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d031      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a71      	ldr	r2, [pc, #452]	; (8003580 <HAL_DMA_IRQHandler+0xa20>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02c      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a70      	ldr	r2, [pc, #448]	; (8003584 <HAL_DMA_IRQHandler+0xa24>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d027      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_DMA_IRQHandler+0xa28>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d022      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6d      	ldr	r2, [pc, #436]	; (800358c <HAL_DMA_IRQHandler+0xa2c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d01d      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6b      	ldr	r2, [pc, #428]	; (8003590 <HAL_DMA_IRQHandler+0xa30>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d018      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6a      	ldr	r2, [pc, #424]	; (8003594 <HAL_DMA_IRQHandler+0xa34>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a68      	ldr	r2, [pc, #416]	; (8003598 <HAL_DMA_IRQHandler+0xa38>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_DMA_IRQHandler+0xa3c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <HAL_DMA_IRQHandler+0xa40>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_DMA_IRQHandler+0x8b8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a64      	ldr	r2, [pc, #400]	; (80035a4 <HAL_DMA_IRQHandler+0xa44>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d108      	bne.n	800342a <HAL_DMA_IRQHandler+0x8ca>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e007      	b.n	800343a <HAL_DMA_IRQHandler+0x8da>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	429a      	cmp	r2, r3
 8003444:	d307      	bcc.n	8003456 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f2      	bne.n	800343a <HAL_DMA_IRQHandler+0x8da>
 8003454:	e000      	b.n	8003458 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003456:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2203      	movs	r2, #3
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003476:	e003      	b.n	8003480 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8272 	beq.w	800396e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
 8003492:	e26c      	b.n	800396e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a43      	ldr	r2, [pc, #268]	; (80035a8 <HAL_DMA_IRQHandler+0xa48>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_DMA_IRQHandler+0xa4c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a40      	ldr	r2, [pc, #256]	; (80035b0 <HAL_DMA_IRQHandler+0xa50>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3f      	ldr	r2, [pc, #252]	; (80035b4 <HAL_DMA_IRQHandler+0xa54>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3d      	ldr	r2, [pc, #244]	; (80035b8 <HAL_DMA_IRQHandler+0xa58>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3c      	ldr	r2, [pc, #240]	; (80035bc <HAL_DMA_IRQHandler+0xa5c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3a      	ldr	r2, [pc, #232]	; (80035c0 <HAL_DMA_IRQHandler+0xa60>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x984>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a39      	ldr	r2, [pc, #228]	; (80035c4 <HAL_DMA_IRQHandler+0xa64>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x988>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_DMA_IRQHandler+0x98a>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 823f 	beq.w	800396e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2204      	movs	r2, #4
 8003502:	409a      	lsls	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80cd 	beq.w	80036a8 <HAL_DMA_IRQHandler+0xb48>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80c7 	beq.w	80036a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2204      	movs	r2, #4
 8003524:	409a      	lsls	r2, r3
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d049      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8210 	beq.w	8003968 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003550:	e20a      	b.n	8003968 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8206 	beq.w	8003968 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003564:	e200      	b.n	8003968 <HAL_DMA_IRQHandler+0xe08>
 8003566:	bf00      	nop
 8003568:	40020010 	.word	0x40020010
 800356c:	40020028 	.word	0x40020028
 8003570:	40020040 	.word	0x40020040
 8003574:	40020058 	.word	0x40020058
 8003578:	40020070 	.word	0x40020070
 800357c:	40020088 	.word	0x40020088
 8003580:	400200a0 	.word	0x400200a0
 8003584:	400200b8 	.word	0x400200b8
 8003588:	40020410 	.word	0x40020410
 800358c:	40020428 	.word	0x40020428
 8003590:	40020440 	.word	0x40020440
 8003594:	40020458 	.word	0x40020458
 8003598:	40020470 	.word	0x40020470
 800359c:	40020488 	.word	0x40020488
 80035a0:	400204a0 	.word	0x400204a0
 80035a4:	400204b8 	.word	0x400204b8
 80035a8:	58025408 	.word	0x58025408
 80035ac:	5802541c 	.word	0x5802541c
 80035b0:	58025430 	.word	0x58025430
 80035b4:	58025444 	.word	0x58025444
 80035b8:	58025458 	.word	0x58025458
 80035bc:	5802546c 	.word	0x5802546c
 80035c0:	58025480 	.word	0x58025480
 80035c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d160      	bne.n	8003694 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a8c      	ldr	r2, [pc, #560]	; (8003808 <HAL_DMA_IRQHandler+0xca8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04a      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a8a      	ldr	r2, [pc, #552]	; (800380c <HAL_DMA_IRQHandler+0xcac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d045      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a89      	ldr	r2, [pc, #548]	; (8003810 <HAL_DMA_IRQHandler+0xcb0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d040      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a87      	ldr	r2, [pc, #540]	; (8003814 <HAL_DMA_IRQHandler+0xcb4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d03b      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a86      	ldr	r2, [pc, #536]	; (8003818 <HAL_DMA_IRQHandler+0xcb8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d036      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a84      	ldr	r2, [pc, #528]	; (800381c <HAL_DMA_IRQHandler+0xcbc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d031      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a83      	ldr	r2, [pc, #524]	; (8003820 <HAL_DMA_IRQHandler+0xcc0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d02c      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a81      	ldr	r2, [pc, #516]	; (8003824 <HAL_DMA_IRQHandler+0xcc4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d027      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a80      	ldr	r2, [pc, #512]	; (8003828 <HAL_DMA_IRQHandler+0xcc8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7e      	ldr	r2, [pc, #504]	; (800382c <HAL_DMA_IRQHandler+0xccc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a7d      	ldr	r2, [pc, #500]	; (8003830 <HAL_DMA_IRQHandler+0xcd0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a7b      	ldr	r2, [pc, #492]	; (8003834 <HAL_DMA_IRQHandler+0xcd4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a7a      	ldr	r2, [pc, #488]	; (8003838 <HAL_DMA_IRQHandler+0xcd8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a78      	ldr	r2, [pc, #480]	; (800383c <HAL_DMA_IRQHandler+0xcdc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_DMA_IRQHandler+0xce0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_DMA_IRQHandler+0xb12>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_DMA_IRQHandler+0xce4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d108      	bne.n	8003684 <HAL_DMA_IRQHandler+0xb24>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0208 	bic.w	r2, r2, #8
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e007      	b.n	8003694 <HAL_DMA_IRQHandler+0xb34>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8165 	beq.w	8003968 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a6:	e15f      	b.n	8003968 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2202      	movs	r2, #2
 80036b2:	409a      	lsls	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80c5 	beq.w	8003848 <HAL_DMA_IRQHandler+0xce8>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80bf 	beq.w	8003848 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2202      	movs	r2, #2
 80036d4:	409a      	lsls	r2, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d018      	beq.n	8003716 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 813a 	beq.w	800396c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003700:	e134      	b.n	800396c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8130 	beq.w	800396c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003714:	e12a      	b.n	800396c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d168      	bne.n	80037f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_DMA_IRQHandler+0xca8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d04a      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a37      	ldr	r2, [pc, #220]	; (800380c <HAL_DMA_IRQHandler+0xcac>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d045      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a35      	ldr	r2, [pc, #212]	; (8003810 <HAL_DMA_IRQHandler+0xcb0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d040      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a34      	ldr	r2, [pc, #208]	; (8003814 <HAL_DMA_IRQHandler+0xcb4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d03b      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a32      	ldr	r2, [pc, #200]	; (8003818 <HAL_DMA_IRQHandler+0xcb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d036      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a31      	ldr	r2, [pc, #196]	; (800381c <HAL_DMA_IRQHandler+0xcbc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d031      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <HAL_DMA_IRQHandler+0xcc0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02c      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <HAL_DMA_IRQHandler+0xcc4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d027      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <HAL_DMA_IRQHandler+0xcc8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2b      	ldr	r2, [pc, #172]	; (800382c <HAL_DMA_IRQHandler+0xccc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01d      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_DMA_IRQHandler+0xcd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d018      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a28      	ldr	r2, [pc, #160]	; (8003834 <HAL_DMA_IRQHandler+0xcd4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_DMA_IRQHandler+0xcd8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a25      	ldr	r2, [pc, #148]	; (800383c <HAL_DMA_IRQHandler+0xcdc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_DMA_IRQHandler+0xce0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xc60>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a22      	ldr	r2, [pc, #136]	; (8003844 <HAL_DMA_IRQHandler+0xce4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <HAL_DMA_IRQHandler+0xc72>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0214 	bic.w	r2, r2, #20
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e007      	b.n	80037e2 <HAL_DMA_IRQHandler+0xc82>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 020a 	bic.w	r2, r2, #10
 80037e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80b8 	beq.w	800396c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003804:	e0b2      	b.n	800396c <HAL_DMA_IRQHandler+0xe0c>
 8003806:	bf00      	nop
 8003808:	40020010 	.word	0x40020010
 800380c:	40020028 	.word	0x40020028
 8003810:	40020040 	.word	0x40020040
 8003814:	40020058 	.word	0x40020058
 8003818:	40020070 	.word	0x40020070
 800381c:	40020088 	.word	0x40020088
 8003820:	400200a0 	.word	0x400200a0
 8003824:	400200b8 	.word	0x400200b8
 8003828:	40020410 	.word	0x40020410
 800382c:	40020428 	.word	0x40020428
 8003830:	40020440 	.word	0x40020440
 8003834:	40020458 	.word	0x40020458
 8003838:	40020470 	.word	0x40020470
 800383c:	40020488 	.word	0x40020488
 8003840:	400204a0 	.word	0x400204a0
 8003844:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2208      	movs	r2, #8
 8003852:	409a      	lsls	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8088 	beq.w	800396e <HAL_DMA_IRQHandler+0xe0e>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8082 	beq.w	800396e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a41      	ldr	r2, [pc, #260]	; (8003974 <HAL_DMA_IRQHandler+0xe14>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d04a      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <HAL_DMA_IRQHandler+0xe18>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d045      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3e      	ldr	r2, [pc, #248]	; (800397c <HAL_DMA_IRQHandler+0xe1c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d040      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3c      	ldr	r2, [pc, #240]	; (8003980 <HAL_DMA_IRQHandler+0xe20>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d03b      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3b      	ldr	r2, [pc, #236]	; (8003984 <HAL_DMA_IRQHandler+0xe24>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d036      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a39      	ldr	r2, [pc, #228]	; (8003988 <HAL_DMA_IRQHandler+0xe28>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d031      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a38      	ldr	r2, [pc, #224]	; (800398c <HAL_DMA_IRQHandler+0xe2c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d02c      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a36      	ldr	r2, [pc, #216]	; (8003990 <HAL_DMA_IRQHandler+0xe30>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d027      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a35      	ldr	r2, [pc, #212]	; (8003994 <HAL_DMA_IRQHandler+0xe34>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a33      	ldr	r2, [pc, #204]	; (8003998 <HAL_DMA_IRQHandler+0xe38>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01d      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_DMA_IRQHandler+0xe3c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d018      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a30      	ldr	r2, [pc, #192]	; (80039a0 <HAL_DMA_IRQHandler+0xe40>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <HAL_DMA_IRQHandler+0xe44>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2d      	ldr	r2, [pc, #180]	; (80039a8 <HAL_DMA_IRQHandler+0xe48>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <HAL_DMA_IRQHandler+0xe4c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_DMA_IRQHandler+0xdaa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <HAL_DMA_IRQHandler+0xe50>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <HAL_DMA_IRQHandler+0xdbc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 021c 	bic.w	r2, r2, #28
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e007      	b.n	800392c <HAL_DMA_IRQHandler+0xdcc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020e 	bic.w	r2, r2, #14
 800392a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
 8003962:	e004      	b.n	800396e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003964:	bf00      	nop
 8003966:	e002      	b.n	800396e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40020010 	.word	0x40020010
 8003978:	40020028 	.word	0x40020028
 800397c:	40020040 	.word	0x40020040
 8003980:	40020058 	.word	0x40020058
 8003984:	40020070 	.word	0x40020070
 8003988:	40020088 	.word	0x40020088
 800398c:	400200a0 	.word	0x400200a0
 8003990:	400200b8 	.word	0x400200b8
 8003994:	40020410 	.word	0x40020410
 8003998:	40020428 	.word	0x40020428
 800399c:	40020440 	.word	0x40020440
 80039a0:	40020458 	.word	0x40020458
 80039a4:	40020470 	.word	0x40020470
 80039a8:	40020488 	.word	0x40020488
 80039ac:	400204a0 	.word	0x400204a0
 80039b0:	400204b8 	.word	0x400204b8

080039b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a42      	ldr	r2, [pc, #264]	; (8003acc <DMA_CalcBaseAndBitshift+0x118>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d04a      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a41      	ldr	r2, [pc, #260]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x11c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d045      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x120>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d040      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a3e      	ldr	r2, [pc, #248]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x124>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d03b      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3c      	ldr	r2, [pc, #240]	; (8003adc <DMA_CalcBaseAndBitshift+0x128>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d036      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3b      	ldr	r2, [pc, #236]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x12c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d031      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a39      	ldr	r2, [pc, #228]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x130>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02c      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a38      	ldr	r2, [pc, #224]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x134>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d027      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a36      	ldr	r2, [pc, #216]	; (8003aec <DMA_CalcBaseAndBitshift+0x138>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d022      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a35      	ldr	r2, [pc, #212]	; (8003af0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d01d      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <DMA_CalcBaseAndBitshift+0x140>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d018      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <DMA_CalcBaseAndBitshift+0x144>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a30      	ldr	r2, [pc, #192]	; (8003afc <DMA_CalcBaseAndBitshift+0x148>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00e      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d009      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <DMA_CalcBaseAndBitshift+0x150>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <DMA_CalcBaseAndBitshift+0xa8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <DMA_CalcBaseAndBitshift+0x154>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <DMA_CalcBaseAndBitshift+0xac>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <DMA_CalcBaseAndBitshift+0xae>
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d024      	beq.n	8003ab0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3b10      	subs	r3, #16
 8003a6e:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <DMA_CalcBaseAndBitshift+0x158>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d908      	bls.n	8003aa0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <DMA_CalcBaseAndBitshift+0x160>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a9e:	e00d      	b.n	8003abc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <DMA_CalcBaseAndBitshift+0x160>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6593      	str	r3, [r2, #88]	; 0x58
 8003aae:	e005      	b.n	8003abc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40020010 	.word	0x40020010
 8003ad0:	40020028 	.word	0x40020028
 8003ad4:	40020040 	.word	0x40020040
 8003ad8:	40020058 	.word	0x40020058
 8003adc:	40020070 	.word	0x40020070
 8003ae0:	40020088 	.word	0x40020088
 8003ae4:	400200a0 	.word	0x400200a0
 8003ae8:	400200b8 	.word	0x400200b8
 8003aec:	40020410 	.word	0x40020410
 8003af0:	40020428 	.word	0x40020428
 8003af4:	40020440 	.word	0x40020440
 8003af8:	40020458 	.word	0x40020458
 8003afc:	40020470 	.word	0x40020470
 8003b00:	40020488 	.word	0x40020488
 8003b04:	400204a0 	.word	0x400204a0
 8003b08:	400204b8 	.word	0x400204b8
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	08027494 	.word	0x08027494
 8003b14:	fffffc00 	.word	0xfffffc00

08003b18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d120      	bne.n	8003b6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d858      	bhi.n	8003be6 <DMA_CheckFifoParam+0xce>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x24>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003be7 	.word	0x08003be7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d048      	beq.n	8003bea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b5c:	e045      	b.n	8003bea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b66:	d142      	bne.n	8003bee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b6c:	e03f      	b.n	8003bee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d123      	bne.n	8003bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d838      	bhi.n	8003bf2 <DMA_CheckFifoParam+0xda>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <DMA_CheckFifoParam+0x70>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003b9f 	.word	0x08003b9f
 8003b90:	08003b99 	.word	0x08003b99
 8003b94:	08003bb1 	.word	0x08003bb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b9c:	e030      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d025      	beq.n	8003bf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bae:	e022      	b.n	8003bf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb8:	d11f      	bne.n	8003bfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bbe:	e01c      	b.n	8003bfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d902      	bls.n	8003bce <DMA_CheckFifoParam+0xb6>
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d003      	beq.n	8003bd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003bcc:	e018      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003bd2:	e015      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
    break;
 8003be4:	e00b      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
        break;
 8003be6:	bf00      	nop
 8003be8:	e00a      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        break;
 8003bea:	bf00      	nop
 8003bec:	e008      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e006      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e004      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        break;
 8003bf6:	bf00      	nop
 8003bf8:	e002      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <DMA_CheckFifoParam+0xe8>
    break;
 8003bfe:	bf00      	nop
    }
  }

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a36      	ldr	r2, [pc, #216]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a35      	ldr	r2, [pc, #212]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d018      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a33      	ldr	r2, [pc, #204]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a32      	ldr	r2, [pc, #200]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a30      	ldr	r2, [pc, #192]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2f      	ldr	r2, [pc, #188]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2d      	ldr	r2, [pc, #180]	; (8003d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c72:	2300      	movs	r3, #0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3b08      	subs	r3, #8
 8003c80:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003cac:	e024      	b.n	8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3b10      	subs	r3, #16
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d806      	bhi.n	8003cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d902      	bls.n	8003cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ce8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	58025408 	.word	0x58025408
 8003d08:	5802541c 	.word	0x5802541c
 8003d0c:	58025430 	.word	0x58025430
 8003d10:	58025444 	.word	0x58025444
 8003d14:	58025458 	.word	0x58025458
 8003d18:	5802546c 	.word	0x5802546c
 8003d1c:	58025480 	.word	0x58025480
 8003d20:	58025494 	.word	0x58025494
 8003d24:	cccccccd 	.word	0xcccccccd
 8003d28:	16009600 	.word	0x16009600
 8003d2c:	58025880 	.word	0x58025880
 8003d30:	aaaaaaab 	.word	0xaaaaaaab
 8003d34:	400204b8 	.word	0x400204b8
 8003d38:	4002040f 	.word	0x4002040f
 8003d3c:	10008200 	.word	0x10008200
 8003d40:	40020880 	.word	0x40020880

08003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04a      	beq.n	8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d847      	bhi.n	8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003dcc:	671a      	str	r2, [r3, #112]	; 0x70
 8003dce:	e009      	b.n	8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003de2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	58025408 	.word	0x58025408
 8003e00:	5802541c 	.word	0x5802541c
 8003e04:	58025430 	.word	0x58025430
 8003e08:	58025444 	.word	0x58025444
 8003e0c:	58025458 	.word	0x58025458
 8003e10:	5802546c 	.word	0x5802546c
 8003e14:	58025480 	.word	0x58025480
 8003e18:	58025494 	.word	0x58025494
 8003e1c:	1600963f 	.word	0x1600963f
 8003e20:	58025940 	.word	0x58025940
 8003e24:	1000823f 	.word	0x1000823f
 8003e28:	40020940 	.word	0x40020940

08003e2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0c6      	b.n	8003fcc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f006 fa22 	bl	800a290 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2223      	movs	r2, #35	; 0x23
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	4b60      	ldr	r3, [pc, #384]	; (8003fd4 <HAL_ETH_Init+0x1a8>)
 8003e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e58:	4a5e      	ldr	r2, [pc, #376]	; (8003fd4 <HAL_ETH_Init+0x1a8>)
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e62:	4b5c      	ldr	r3, [pc, #368]	; (8003fd4 <HAL_ETH_Init+0x1a8>)
 8003e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7a1b      	ldrb	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7fe f8a7 	bl	8001fcc <HAL_SYSCFG_ETHInterfaceSelect>
 8003e7e:	e003      	b.n	8003e88 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003e80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003e84:	f7fe f8a2 	bl	8001fcc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea0:	f7fe f87c 	bl	8001f9c <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ea6:	e00f      	b.n	8003ec8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003ea8:	f7fe f878 	bl	8001f9c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003eb6:	d907      	bls.n	8003ec8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	22e0      	movs	r2, #224	; 0xe0
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e081      	b.n	8003fcc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f001 fae8 	bl	80054b0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ee0:	f003 f942 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_ETH_Init+0x1ac>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	0c9a      	lsrs	r2, r3, #18
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3a01      	subs	r2, #1
 8003ef4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f001 fa3b 	bl	8005374 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f14:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f18:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	22e0      	movs	r2, #224	; 0xe0
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e04a      	b.n	8003fcc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f3e:	4413      	add	r3, r2
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_ETH_Init+0x1b0>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6952      	ldr	r2, [r2, #20]
 8003f4a:	0052      	lsls	r2, r2, #1
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	6809      	ldr	r1, [r1, #0]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f56:	440b      	add	r3, r1
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f001 fb00 	bl	8005560 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f001 fb44 	bl	80055ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	3305      	adds	r3, #5
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	021a      	lsls	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	3303      	adds	r3, #3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	061a      	lsls	r2, r3, #24
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	3302      	adds	r3, #2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fa4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fb2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2210      	movs	r2, #16
 8003fc8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	431bde83 	.word	0x431bde83
 8003fdc:	ffff8001 	.word	0xffff8001

08003fe0 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	330a      	adds	r3, #10
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_ETH_DescAssignMemory+0x28>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d904      	bls.n	8004012 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e021      	b.n	8004056 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	2b10      	cmp	r3, #16
 8004070:	d174      	bne.n	800415c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2223      	movs	r2, #35	; 0x23
 8004076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e00f      	b.n	800409e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	330a      	adds	r3, #10
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d9ec      	bls.n	800407e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0202 	orr.w	r2, r2, #2
 80040b8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f241 1304 	movw	r3, #4356	; 0x1104
 80040e6:	4413      	add	r3, r2
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6811      	ldr	r1, [r2, #0]
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80040f6:	440b      	add	r3, r1
 80040f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f241 1308 	movw	r3, #4360	; 0x1108
 8004102:	4413      	add	r3, r2
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6811      	ldr	r1, [r2, #0]
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004112:	440b      	add	r3, r1
 8004114:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8004128:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800412c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	f241 1334 	movw	r3, #4404	; 0x1134
 8004136:	4413      	add	r3, r2
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8004142:	431a      	orrs	r2, r3
 8004144:	f241 1334 	movw	r3, #4404	; 0x1134
 8004148:	440b      	add	r3, r1
 800414a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2210      	movs	r2, #16
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2222      	movs	r2, #34	; 0x22
 8004156:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	2b00      	cmp	r3, #0
 800417a:	d067      	beq.n	800424c <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2223      	movs	r2, #35	; 0x23
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f241 1334 	movw	r3, #4404	; 0x1134
 800418a:	4413      	add	r3, r2
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6811      	ldr	r1, [r2, #0]
 8004192:	4a32      	ldr	r2, [pc, #200]	; (800425c <HAL_ETH_Stop_IT+0xf0>)
 8004194:	401a      	ands	r2, r3
 8004196:	f241 1334 	movw	r3, #4404	; 0x1134
 800419a:	440b      	add	r3, r1
 800419c:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80041a6:	4413      	add	r3, r2
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6811      	ldr	r1, [r2, #0]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80041b6:	440b      	add	r3, r1
 80041b8:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	f241 1308 	movw	r3, #4360	; 0x1108
 80041c2:	4413      	add	r3, r2
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6811      	ldr	r1, [r2, #0]
 80041ca:	f023 0201 	bic.w	r2, r3, #1
 80041ce:	f241 1308 	movw	r3, #4360	; 0x1108
 80041d2:	440b      	add	r3, r1
 80041d4:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0202 	bic.w	r2, r2, #2
 8004208:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e00f      	b.n	8004230 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	330a      	adds	r3, #10
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d9ec      	bls.n	8004210 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2210      	movs	r2, #16
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2210      	movs	r2, #16
 8004246:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	ffff2fbe 	.word	0xffff2fbe

08004260 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e073      	b.n	800436a <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	2b10      	cmp	r3, #16
 8004288:	d16e      	bne.n	8004368 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800428a:	2200      	movs	r2, #0
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 fa0a 	bl	80056a8 <ETH_Prepare_Tx_Descriptors>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	f043 0202 	orr.w	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e05f      	b.n	800436a <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3206      	adds	r2, #6
 80042b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	629a      	str	r2, [r3, #40]	; 0x28
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d904      	bls.n	80042d4 <HAL_ETH_Transmit+0x74>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	1f1a      	subs	r2, r3, #4
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	3106      	adds	r1, #6
 80042e0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80042e4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80042e8:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80042ea:	f7fd fe57 	bl	8001f9c <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80042f0:	e034      	b.n	800435c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d011      	beq.n	8004328 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f043 0208 	orr.w	r2, r3, #8
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	22e0      	movs	r2, #224	; 0xe0
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e020      	b.n	800436a <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432e:	d015      	beq.n	800435c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8004330:	f7fd fe34 	bl	8001f9c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <HAL_ETH_Transmit+0xe6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	f043 0204 	orr.w	r2, r3, #4
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22e0      	movs	r2, #224	; 0xe0
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e006      	b.n	800436a <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	dbc6      	blt.n	80042f2 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8004372:	b480      	push	{r7}
 8004374:	b089      	sub	sp, #36	; 0x24
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	332c      	adds	r3, #44	; 0x2c
 800437e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d06b      	beq.n	800447c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e0ce      	b.n	8004546 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3301      	adds	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d036      	beq.n	8004428 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3301      	adds	r3, #1
 80043be:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3301      	adds	r3, #1
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d902      	bls.n	80043dc <HAL_ETH_IsRxDataAvailable+0x6a>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3b04      	subs	r3, #4
 80043da:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e4:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db11      	blt.n	8004412 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2201      	movs	r2, #1
 80043fe:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3301      	adds	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d902      	bls.n	8004412 <HAL_ETH_IsRxDataAvailable+0xa0>
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3b04      	subs	r3, #4
 8004410:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8004424:	2301      	movs	r3, #1
 8004426:	e08e      	b.n	8004546 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d012      	beq.n	800445a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8004438:	2301      	movs	r3, #1
 800443a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d902      	bls.n	800444e <HAL_ETH_IsRxDataAvailable+0xdc>
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3b04      	subs	r3, #4
 800444c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e010      	b.n	800447c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	3301      	adds	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d902      	bls.n	8004472 <HAL_ETH_IsRxDataAvailable+0x100>
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3b04      	subs	r3, #4
 8004470:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db02      	blt.n	800448a <HAL_ETH_IsRxDataAvailable+0x118>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d98e      	bls.n	80043a8 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d056      	beq.n	800453e <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e03b      	b.n	8004528 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044be:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3b01      	subs	r3, #1
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	429a      	cmp	r2, r3
 8004504:	d20d      	bcs.n	8004522 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d902      	bls.n	8004518 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3b04      	subs	r3, #4
 8004516:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004520:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	3301      	adds	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3bf      	bcc.n	80044b0 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	f241 1328 	movw	r3, #4392	; 0x1128
 800453a:	440b      	add	r3, r1
 800453c:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	619a      	str	r2, [r3, #24]

  return 0;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3724      	adds	r7, #36	; 0x24
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b08a      	sub	sp, #40	; 0x28
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	332c      	adds	r3, #44	; 0x2c
 8004560:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004574:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07d      	b.n	8004686 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff feed 	bl	8004372 <HAL_ETH_IsRxDataAvailable>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e071      	b.n	8004686 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
 80045b6:	e031      	b.n	800461c <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	461a      	mov	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	461a      	mov	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045f2:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	3301      	adds	r3, #1
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d902      	bls.n	8004606 <HAL_ETH_GetRxDataBuffer+0xb4>
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	3b04      	subs	r3, #4
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	3301      	adds	r3, #1
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	3b01      	subs	r3, #1
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	429a      	cmp	r2, r3
 8004626:	d3c7      	bcc.n	80045b8 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	461a      	mov	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	429a      	cmp	r2, r3
 8004648:	d803      	bhi.n	8004652 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	e018      	b.n	8004684 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d012      	beq.n	8004680 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	461a      	mov	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	1ad2      	subs	r2, r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	e001      	b.n	8004684 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3728      	adds	r7, #40	; 0x28
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	332c      	adds	r3, #44	; 0x2c
 800469c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fe60 	bl	8004372 <HAL_ETH_IsRxDataAvailable>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e017      	b.n	80046ec <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	3b01      	subs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d902      	bls.n	80046d4 <HAL_ETH_GetRxDataLength+0x46>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3b04      	subs	r3, #4
 80046d2:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046dc:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	332c      	adds	r3, #44	; 0x2c
 8004700:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004710:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e057      	b.n	80047d4 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3301      	adds	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e03b      	b.n	80047b0 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004746:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3b01      	subs	r3, #1
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d20d      	bcs.n	80047aa <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d902      	bls.n	80047a0 <HAL_ETH_BuildRxDescriptors+0xac>
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3b04      	subs	r3, #4
 800479e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a8:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3301      	adds	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d3bf      	bcc.n	8004738 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6819      	ldr	r1, [r3, #0]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	f241 1328 	movw	r3, #4392	; 0x1128
 80047c2:	440b      	add	r3, r1
 80047c4:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3724      	adds	r7, #36	; 0x24
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d113      	bne.n	8004822 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8004802:	4413      	add	r3, r2
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d109      	bne.n	8004822 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f005 fe14 	bl	800a43c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800481c:	f248 0240 	movw	r2, #32832	; 0x8040
 8004820:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b01      	cmp	r3, #1
 8004832:	d113      	bne.n	800485c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	f241 1334 	movw	r3, #4404	; 0x1134
 800483c:	4413      	add	r3, r2
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d109      	bne.n	800485c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8c7 	bl	80049dc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004856:	f248 0201 	movw	r2, #32769	; 0x8001
 800485a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486e:	d149      	bne.n	8004904 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f241 1334 	movw	r3, #4404	; 0x1134
 8004878:	4413      	add	r3, r2
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004884:	d13e      	bne.n	8004904 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	f043 0208 	orr.w	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a4:	d11b      	bne.n	80048de <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	f241 1302 	movw	r3, #4354	; 0x1102
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f241 1334 	movw	r3, #4404	; 0x1134
 80048c2:	4413      	add	r3, r2
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6811      	ldr	r1, [r2, #0]
 80048ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048ce:	f241 1334 	movw	r3, #4404	; 0x1134
 80048d2:	440b      	add	r3, r1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	22e0      	movs	r2, #224	; 0xe0
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
 80048dc:	e00f      	b.n	80048fe <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048f8:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80048fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f876 	bl	80049f0 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800490c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004910:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004914:	d10e      	bne.n	8004934 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	22e0      	movs	r2, #224	; 0xe0
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f86b 	bl	8004a04 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d10d      	bne.n	8004960 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800494c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f85f 	bl	8004a18 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d10d      	bne.n	800498c <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f853 	bl	8004a2c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800498c:	f7fd fc8e 	bl	80022ac <HAL_GetCurrentCPUID>
 8004990:	4603      	mov	r3, r0
 8004992:	2b03      	cmp	r3, #3
 8004994:	d10d      	bne.n	80049b2 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_ETH_IRQHandler+0x1f4>)
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d014      	beq.n	80049cc <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_ETH_IRQHandler+0x1f4>)
 80049a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f848 	bl	8004a40 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 80049b0:	e00c      	b.n	80049cc <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_ETH_IRQHandler+0x1f8>)
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_ETH_IRQHandler+0x1f8>)
 80049c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f83a 	bl	8004a40 <HAL_ETH_WakeUpCallback>
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	58000080 	.word	0x58000080
 80049d8:	580000c0 	.word	0x580000c0

080049dc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e03e      	b.n	8004af4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a7e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	055b      	lsls	r3, r3, #21
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f043 030c 	orr.w	r3, r3, #12
 8004aa2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004ab6:	f7fd fa71 	bl	8001f9c <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004abc:	e009      	b.n	8004ad2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004abe:	f7fd fa6d 	bl	8001f9c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004acc:	d901      	bls.n	8004ad2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e010      	b.n	8004af4 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ed      	bne.n	8004abe <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e03c      	b.n	8004b98 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b26:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	055b      	lsls	r3, r3, #21
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 030c 	bic.w	r3, r3, #12
 8004b4a:	f043 0304 	orr.w	r3, r3, #4
 8004b4e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_ETH_WritePHYRegister+0xa4>)
 8004b5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004b62:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <HAL_ETH_WritePHYRegister+0xa4>)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004b6a:	f7fd fa17 	bl	8001f9c <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b70:	e009      	b.n	8004b86 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004b72:	f7fd fa13 	bl	8001f9c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b80:	d901      	bls.n	8004b86 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e008      	b.n	8004b98 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ed      	bne.n	8004b72 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40028000 	.word	0x40028000

08004ba4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e1c3      	b.n	8004f40 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 020c 	and.w	r2, r3, #12
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0e5b      	lsrs	r3, r3, #25
 8004e02:	f003 021f 	and.w	r2, r3, #31
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004ecc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004edc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf14      	ite	ne
 8004f12:	2301      	movne	r3, #1
 8004f14:	2300      	moveq	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e00a      	b.n	8004f76 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d105      	bne.n	8004f74 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f860 	bl	8005030 <ETH_SetMACConfig>

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f90:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f98:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f9a:	f002 f8e5 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 8004f9e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d908      	bls.n	8004fba <HAL_ETH_SetMDIOClockRange+0x3a>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d804      	bhi.n	8004fba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e027      	b.n	800500a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	; (8005020 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d908      	bls.n	8004fd4 <HAL_ETH_SetMDIOClockRange+0x54>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a17      	ldr	r2, [pc, #92]	; (8005024 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d204      	bcs.n	8004fd4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e01a      	b.n	800500a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d303      	bcc.n	8004fe4 <HAL_ETH_SetMDIOClockRange+0x64>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a12      	ldr	r2, [pc, #72]	; (8005028 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d911      	bls.n	8005008 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a10      	ldr	r2, [pc, #64]	; (8005028 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d908      	bls.n	8004ffe <HAL_ETH_SetMDIOClockRange+0x7e>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a0f      	ldr	r2, [pc, #60]	; (800502c <HAL_ETH_SetMDIOClockRange+0xac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d804      	bhi.n	8004ffe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e005      	b.n	800500a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e000      	b.n	800500a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005008:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	01312cff 	.word	0x01312cff
 8005020:	02160ebf 	.word	0x02160ebf
 8005024:	03938700 	.word	0x03938700
 8005028:	05f5e0ff 	.word	0x05f5e0ff
 800502c:	08f0d17f 	.word	0x08f0d17f

08005030 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005042:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	791b      	ldrb	r3, [r3, #4]
 8005048:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800504a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	7b1b      	ldrb	r3, [r3, #12]
 8005050:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005052:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	7b5b      	ldrb	r3, [r3, #13]
 8005058:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800505a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	7b9b      	ldrb	r3, [r3, #14]
 8005060:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005062:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	7bdb      	ldrb	r3, [r3, #15]
 8005068:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800506a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	7c12      	ldrb	r2, [r2, #16]
 8005070:	2a00      	cmp	r2, #0
 8005072:	d102      	bne.n	800507a <ETH_SetMACConfig+0x4a>
 8005074:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005078:	e000      	b.n	800507c <ETH_SetMACConfig+0x4c>
 800507a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800507c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	7c52      	ldrb	r2, [r2, #17]
 8005082:	2a00      	cmp	r2, #0
 8005084:	d102      	bne.n	800508c <ETH_SetMACConfig+0x5c>
 8005086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800508a:	e000      	b.n	800508e <ETH_SetMACConfig+0x5e>
 800508c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800508e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	7c9b      	ldrb	r3, [r3, #18]
 8005094:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005096:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800509c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80050a2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	7f1b      	ldrb	r3, [r3, #28]
 80050a8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80050aa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	7f5b      	ldrb	r3, [r3, #29]
 80050b0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80050b2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	7f92      	ldrb	r2, [r2, #30]
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d102      	bne.n	80050c2 <ETH_SetMACConfig+0x92>
 80050bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c0:	e000      	b.n	80050c4 <ETH_SetMACConfig+0x94>
 80050c2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80050c4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	7fdb      	ldrb	r3, [r3, #31]
 80050ca:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80050cc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d102      	bne.n	80050de <ETH_SetMACConfig+0xae>
 80050d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050dc:	e000      	b.n	80050e0 <ETH_SetMACConfig+0xb0>
 80050de:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80050e0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80050e6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ee:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80050f0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b56      	ldr	r3, [pc, #344]	; (800525c <ETH_SetMACConfig+0x22c>)
 8005102:	4013      	ands	r3, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	430b      	orrs	r3, r1
 800510c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800511a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800511c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005124:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005126:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800512e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005130:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005138:	2a00      	cmp	r2, #0
 800513a:	d102      	bne.n	8005142 <ETH_SetMACConfig+0x112>
 800513c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005140:	e000      	b.n	8005144 <ETH_SetMACConfig+0x114>
 8005142:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005144:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b42      	ldr	r3, [pc, #264]	; (8005260 <ETH_SetMACConfig+0x230>)
 8005156:	4013      	ands	r3, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	68f9      	ldr	r1, [r7, #12]
 800515e:	430b      	orrs	r3, r1
 8005160:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005168:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <ETH_SetMACConfig+0x234>)
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	430b      	orrs	r3, r1
 8005184:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800518c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005192:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800519a:	2a00      	cmp	r2, #0
 800519c:	d101      	bne.n	80051a2 <ETH_SetMACConfig+0x172>
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	e000      	b.n	80051a4 <ETH_SetMACConfig+0x174>
 80051a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80051a4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051b6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80051cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80051d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f023 0103 	bic.w	r1, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80051fa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005216:	2a00      	cmp	r2, #0
 8005218:	d101      	bne.n	800521e <ETH_SetMACConfig+0x1ee>
 800521a:	2240      	movs	r2, #64	; 0x40
 800521c:	e000      	b.n	8005220 <ETH_SetMACConfig+0x1f0>
 800521e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005220:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005228:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800522a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005232:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005240:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	430a      	orrs	r2, r1
 800524c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	00048083 	.word	0x00048083
 8005260:	c0f88000 	.word	0xc0f88000
 8005264:	fffffef0 	.word	0xfffffef0

08005268 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b38      	ldr	r3, [pc, #224]	; (8005360 <ETH_SetDMAConfig+0xf8>)
 800527e:	4013      	ands	r3, r2
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	6809      	ldr	r1, [r1, #0]
 8005288:	431a      	orrs	r2, r3
 800528a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800528e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	791b      	ldrb	r3, [r3, #4]
 8005294:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800529a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	7b1b      	ldrb	r3, [r3, #12]
 80052a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80052ae:	4413      	add	r3, r2
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <ETH_SetDMAConfig+0xfc>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6811      	ldr	r1, [r2, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	431a      	orrs	r2, r3
 80052be:	f241 0304 	movw	r3, #4100	; 0x1004
 80052c2:	440b      	add	r3, r1
 80052c4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	7b5b      	ldrb	r3, [r3, #13]
 80052ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b22      	ldr	r3, [pc, #136]	; (8005368 <ETH_SetDMAConfig+0x100>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6811      	ldr	r1, [r2, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80052ee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	7d1b      	ldrb	r3, [r3, #20]
 80052f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80052fa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	7f5b      	ldrb	r3, [r3, #29]
 8005300:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f241 1304 	movw	r3, #4356	; 0x1104
 800530e:	4413      	add	r3, r2
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b16      	ldr	r3, [pc, #88]	; (800536c <ETH_SetDMAConfig+0x104>)
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	431a      	orrs	r2, r3
 800531e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005322:	440b      	add	r3, r1
 8005324:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	7f1b      	ldrb	r3, [r3, #28]
 800532a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	f241 1308 	movw	r3, #4360	; 0x1108
 800533c:	4413      	add	r3, r2
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <ETH_SetDMAConfig+0x108>)
 8005342:	4013      	ands	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6811      	ldr	r1, [r2, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	431a      	orrs	r2, r3
 800534c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005350:	440b      	add	r3, r1
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	ffff87fd 	.word	0xffff87fd
 8005364:	ffff2ffe 	.word	0xffff2ffe
 8005368:	fffec000 	.word	0xfffec000
 800536c:	ffc0efef 	.word	0xffc0efef
 8005370:	7fc0ffff 	.word	0x7fc0ffff

08005374 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b0a4      	sub	sp, #144	; 0x90
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005382:	2300      	movs	r3, #0
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800538c:	2300      	movs	r3, #0
 800538e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80053b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80053bc:	2300      	movs	r3, #0
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80053cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80053d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80053d8:	2300      	movs	r3, #0
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80053ee:	2300      	movs	r3, #0
 80053f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80053f6:	2300      	movs	r3, #0
 80053f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800540c:	2320      	movs	r3, #32
 800540e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800541e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005428:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005430:	2302      	movs	r3, #2
 8005432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800544e:	2300      	movs	r3, #0
 8005450:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fde6 	bl	8005030 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005464:	2301      	movs	r3, #1
 8005466:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005468:	2301      	movs	r3, #1
 800546a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800546c:	2300      	movs	r3, #0
 800546e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800547a:	2300      	movs	r3, #0
 800547c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800547e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005482:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005484:	2300      	movs	r3, #0
 8005486:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800548c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005494:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fee1 	bl	8005268 <ETH_SetDMAConfig>
}
 80054a6:	bf00      	nop
 80054a8:	3790      	adds	r7, #144	; 0x90
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80054ca:	f001 fe4d 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 80054ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d908      	bls.n	80054ea <ETH_MAC_MDIO_ClkConfig+0x3a>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d804      	bhi.n	80054ea <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e027      	b.n	800553a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4a18      	ldr	r2, [pc, #96]	; (8005550 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d908      	bls.n	8005504 <ETH_MAC_MDIO_ClkConfig+0x54>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4a17      	ldr	r2, [pc, #92]	; (8005554 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d204      	bcs.n	8005504 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e01a      	b.n	800553a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a13      	ldr	r2, [pc, #76]	; (8005554 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d303      	bcc.n	8005514 <ETH_MAC_MDIO_ClkConfig+0x64>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a12      	ldr	r2, [pc, #72]	; (8005558 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d911      	bls.n	8005538 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a10      	ldr	r2, [pc, #64]	; (8005558 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d908      	bls.n	800552e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a0f      	ldr	r2, [pc, #60]	; (800555c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d804      	bhi.n	800552e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e005      	b.n	800553a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e000      	b.n	800553a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005538:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	01312cff 	.word	0x01312cff
 8005550:	02160ebf 	.word	0x02160ebf
 8005554:	03938700 	.word	0x03938700
 8005558:	05f5e0ff 	.word	0x05f5e0ff
 800555c:	08f0d17f 	.word	0x08f0d17f

08005560 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e01d      	b.n	80055aa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	3206      	adds	r2, #6
 80055a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d9de      	bls.n	800556e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	f241 132c 	movw	r3, #4396	; 0x112c
 80055be:	4413      	add	r3, r2
 80055c0:	2203      	movs	r2, #3
 80055c2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68d9      	ldr	r1, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f241 1314 	movw	r3, #4372	; 0x1114
 80055d0:	4413      	add	r3, r2
 80055d2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e024      	b.n	8005646 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6919      	ldr	r1, [r3, #16]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4613      	mov	r3, r2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	330a      	adds	r3, #10
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d9d7      	bls.n	80055fc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	f241 1330 	movw	r3, #4400	; 0x1130
 8005672:	4413      	add	r3, r2
 8005674:	2203      	movs	r2, #3
 8005676:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6919      	ldr	r1, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	f241 131c 	movw	r3, #4380	; 0x111c
 8005684:	4413      	add	r3, r2
 8005686:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	f241 1328 	movw	r3, #4392	; 0x1128
 8005698:	4413      	add	r3, r2
 800569a:	6019      	str	r1, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b08d      	sub	sp, #52	; 0x34
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3318      	adds	r3, #24
 80056b8:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80056c6:	2300      	movs	r3, #0
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e6:	d101      	bne.n	80056ec <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80056e8:	2302      	movs	r3, #2
 80056ea:	e223      	b.n	8005b34 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d044      	beq.n	8005782 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	4b72      	ldr	r3, [pc, #456]	; (80058c8 <ETH_Prepare_Tx_Descriptors+0x220>)
 80056fe:	4013      	ands	r3, r2
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005704:	431a      	orrs	r2, r3
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005724:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d027      	beq.n	8005782 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	b29a      	uxth	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	431a      	orrs	r2, r3
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005770:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005780:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	4b4e      	ldr	r3, [pc, #312]	; (80058cc <ETH_Prepare_Tx_Descriptors+0x224>)
 8005794:	4013      	ands	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	6992      	ldr	r2, [r2, #24]
 800579a:	431a      	orrs	r2, r3
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <ETH_Prepare_Tx_Descriptors+0x11c>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d030      	beq.n	8005826 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	3301      	adds	r3, #1
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d902      	bls.n	80057ee <ETH_Prepare_Tx_Descriptors+0x146>
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	3b04      	subs	r3, #4
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	3301      	adds	r3, #1
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580a:	d10c      	bne.n	8005826 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	e186      	b.n	8005b34 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	3301      	adds	r3, #1
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <ETH_Prepare_Tx_Descriptors+0x224>)
 800583c:	4013      	ands	r3, r2
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	6852      	ldr	r2, [r2, #4]
 8005842:	431a      	orrs	r2, r3
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d012      	beq.n	8005876 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8005866:	4013      	ands	r3, r2
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	6852      	ldr	r2, [r2, #4]
 800586c:	0412      	lsls	r2, r2, #16
 800586e:	431a      	orrs	r2, r3
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	e008      	b.n	8005888 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2200      	movs	r2, #0
 800587a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8005882:	4013      	ands	r3, r2
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d021      	beq.n	80058d8 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	04db      	lsls	r3, r3, #19
 80058a2:	431a      	orrs	r2, r3
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	69d2      	ldr	r2, [r2, #28]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	e02e      	b.n	8005926 <ETH_Prepare_Tx_Descriptors+0x27e>
 80058c8:	ffff0000 	.word	0xffff0000
 80058cc:	ffffc000 	.word	0xffffc000
 80058d0:	c000ffff 	.word	0xc000ffff
 80058d4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	4b98      	ldr	r3, [pc, #608]	; (8005b40 <ETH_Prepare_Tx_Descriptors+0x498>)
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	431a      	orrs	r2, r3
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	431a      	orrs	r2, r3
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	431a      	orrs	r2, r3
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80c0 	beq.w	8005af6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	431a      	orrs	r2, r3
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005988:	e0b5      	b.n	8005af6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	3301      	adds	r3, #1
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d902      	bls.n	80059a8 <ETH_Prepare_Tx_Descriptors+0x300>
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	3b04      	subs	r3, #4
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ca:	d126      	bne.n	8005a1a <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	e016      	b.n	8005a0e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	3301      	adds	r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d902      	bls.n	80059fe <ETH_Prepare_Tx_Descriptors+0x356>
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	3b04      	subs	r3, #4
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a06:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3e4      	bcc.n	80059e0 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	e08c      	b.n	8005b34 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	6852      	ldr	r2, [r2, #4]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	6852      	ldr	r2, [r2, #4]
 8005a66:	0412      	lsls	r2, r2, #16
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	e008      	b.n	8005a82 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	4b33      	ldr	r3, [pc, #204]	; (8005b48 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00f      	beq.n	8005aae <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	69d2      	ldr	r2, [r2, #28]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	60da      	str	r2, [r3, #12]
 8005aac:	e017      	b.n	8005ade <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6852      	ldr	r2, [r2, #4]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f47f af45 	bne.w	800598a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	609a      	str	r2, [r3, #8]
 8005b12:	e005      	b.n	8005b20 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b30:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3734      	adds	r7, #52	; 0x34
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	ffff8000 	.word	0xffff8000
 8005b44:	ffffc000 	.word	0xffffc000
 8005b48:	c000ffff 	.word	0xc000ffff
 8005b4c:	fffc0000 	.word	0xfffc0000

08005b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b089      	sub	sp, #36	; 0x24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b5e:	4b89      	ldr	r3, [pc, #548]	; (8005d84 <HAL_GPIO_Init+0x234>)
 8005b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b62:	e194      	b.n	8005e8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	4013      	ands	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8186 	beq.w	8005e88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d00b      	beq.n	8005b9c <HAL_GPIO_Init+0x4c>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d007      	beq.n	8005b9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b90:	2b11      	cmp	r3, #17
 8005b92:	d003      	beq.n	8005b9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b12      	cmp	r3, #18
 8005b9a:	d130      	bne.n	8005bfe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f003 0201 	and.w	r2, r3, #1
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	2203      	movs	r2, #3
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_Init+0xee>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b12      	cmp	r3, #18
 8005c3c:	d123      	bne.n	8005c86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	08da      	lsrs	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3208      	adds	r2, #8
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	220f      	movs	r2, #15
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	08da      	lsrs	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3208      	adds	r2, #8
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2203      	movs	r2, #3
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0203 	and.w	r2, r3, #3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80e0 	beq.w	8005e88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc8:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_GPIO_Init+0x238>)
 8005cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_GPIO_Init+0x238>)
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cd8:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_GPIO_Init+0x238>)
 8005cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ce6:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <HAL_GPIO_Init+0x23c>)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	089b      	lsrs	r3, r3, #2
 8005cec:	3302      	adds	r3, #2
 8005cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <HAL_GPIO_Init+0x240>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d052      	beq.n	8005db8 <HAL_GPIO_Init+0x268>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <HAL_GPIO_Init+0x244>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_GPIO_Init+0x22e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <HAL_GPIO_Init+0x248>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02b      	beq.n	8005d7a <HAL_GPIO_Init+0x22a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <HAL_GPIO_Init+0x24c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d025      	beq.n	8005d76 <HAL_GPIO_Init+0x226>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_GPIO_Init+0x250>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01f      	beq.n	8005d72 <HAL_GPIO_Init+0x222>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_GPIO_Init+0x254>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d019      	beq.n	8005d6e <HAL_GPIO_Init+0x21e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <HAL_GPIO_Init+0x258>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_GPIO_Init+0x21a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a19      	ldr	r2, [pc, #100]	; (8005dac <HAL_GPIO_Init+0x25c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00d      	beq.n	8005d66 <HAL_GPIO_Init+0x216>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_GPIO_Init+0x260>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <HAL_GPIO_Init+0x212>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <HAL_GPIO_Init+0x264>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <HAL_GPIO_Init+0x20e>
 8005d5a:	2309      	movs	r3, #9
 8005d5c:	e02d      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d5e:	230a      	movs	r3, #10
 8005d60:	e02b      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d62:	2308      	movs	r3, #8
 8005d64:	e029      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d66:	2307      	movs	r3, #7
 8005d68:	e027      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d6a:	2306      	movs	r3, #6
 8005d6c:	e025      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d6e:	2305      	movs	r3, #5
 8005d70:	e023      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d72:	2304      	movs	r3, #4
 8005d74:	e021      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d76:	2303      	movs	r3, #3
 8005d78:	e01f      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e01d      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e01b      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d82:	bf00      	nop
 8005d84:	58000080 	.word	0x58000080
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	58000400 	.word	0x58000400
 8005d90:	58020000 	.word	0x58020000
 8005d94:	58020400 	.word	0x58020400
 8005d98:	58020800 	.word	0x58020800
 8005d9c:	58020c00 	.word	0x58020c00
 8005da0:	58021000 	.word	0x58021000
 8005da4:	58021400 	.word	0x58021400
 8005da8:	58021800 	.word	0x58021800
 8005dac:	58021c00 	.word	0x58021c00
 8005db0:	58022000 	.word	0x58022000
 8005db4:	58022400 	.word	0x58022400
 8005db8:	2300      	movs	r3, #0
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	f002 0203 	and.w	r2, r2, #3
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	4093      	lsls	r3, r2
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dca:	4938      	ldr	r1, [pc, #224]	; (8005eac <HAL_GPIO_Init+0x35c>)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f ae63 	bne.w	8005b64 <HAL_GPIO_Init+0x14>
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3724      	adds	r7, #36	; 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	58000400 	.word	0x58000400

08005eb0 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8005eba:	490c      	ldr	r1, [pc, #48]	; (8005eec <HAL_HSEM_Take+0x3c>)
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <HAL_HSEM_Take+0x40>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8005ec8:	4a08      	ldr	r2, [pc, #32]	; (8005eec <HAL_HSEM_Take+0x3c>)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <HAL_HSEM_Take+0x40>)
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d101      	bne.n	8005ede <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	58026400 	.word	0x58026400
 8005ef0:	80000300 	.word	0x80000300

08005ef4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005efc:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <HAL_HSEM_FastTake+0x2c>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3320      	adds	r3, #32
 8005f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f06:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <HAL_HSEM_FastTake+0x30>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d101      	bne.n	8005f10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e000      	b.n	8005f12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	58026400 	.word	0x58026400
 8005f24:	80000300 	.word	0x80000300

08005f28 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8005f30:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <HAL_HSEM_IsSemTaken+0x28>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da01      	bge.n	8005f40 <HAL_HSEM_IsSemTaken+0x18>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_HSEM_IsSemTaken+0x1a>
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	58026400 	.word	0x58026400

08005f54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f5e:	4906      	ldr	r1, [pc, #24]	; (8005f78 <HAL_HSEM_Release+0x24>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	58026400 	.word	0x58026400

08005f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07f      	b.n	800608e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fa fd98 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff2:	609a      	str	r2, [r3, #8]
 8005ff4:	e006      	b.n	8006004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d104      	bne.n	8006016 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <HAL_I2C_Init+0x11c>)
 8006022:	430b      	orrs	r3, r1
 8006024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	ea42 0103 	orr.w	r1, r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69d9      	ldr	r1, [r3, #28]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	02008000 	.word	0x02008000

0800609c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d138      	bne.n	8006124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060bc:	2302      	movs	r3, #2
 80060be:	e032      	b.n	8006126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2224      	movs	r2, #36	; 0x24
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6819      	ldr	r1, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b20      	cmp	r3, #32
 8006146:	d139      	bne.n	80061bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006152:	2302      	movs	r3, #2
 8006154:	e033      	b.n	80061be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2224      	movs	r2, #36	; 0x24
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d4:	4b0d      	ldr	r3, [pc, #52]	; (800620c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80061d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80061e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80061f2:	4b07      	ldr	r3, [pc, #28]	; (8006210 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4906      	ldr	r1, [pc, #24]	; (8006210 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	604b      	str	r3, [r1, #4]
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	58024400 	.word	0x58024400
 8006210:	58000400 	.word	0x58000400

08006214 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006224:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800623c:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	2b06      	cmp	r3, #6
 8006246:	d00a      	beq.n	800625e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006248:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d001      	beq.n	800625a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e040      	b.n	80062dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e03e      	b.n	80062dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800625e:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006266:	491f      	ldr	r1, [pc, #124]	; (80062e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4313      	orrs	r3, r2
 800626c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800626e:	f7fb fe95 	bl	8001f9c <HAL_GetTick>
 8006272:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006274:	e009      	b.n	800628a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006276:	f7fb fe91 	bl	8001f9c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006284:	d901      	bls.n	800628a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e028      	b.n	80062dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800628a:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006296:	d1ee      	bne.n	8006276 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b1e      	cmp	r3, #30
 800629c:	d008      	beq.n	80062b0 <HAL_PWREx_ConfigSupply+0x7c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b2e      	cmp	r3, #46	; 0x2e
 80062a2:	d005      	beq.n	80062b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b1d      	cmp	r3, #29
 80062a8:	d002      	beq.n	80062b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b2d      	cmp	r3, #45	; 0x2d
 80062ae:	d114      	bne.n	80062da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062b0:	f7fb fe74 	bl	8001f9c <HAL_GetTick>
 80062b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062b6:	e009      	b.n	80062cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062b8:	f7fb fe70 	bl	8001f9c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c6:	d901      	bls.n	80062cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e007      	b.n	80062dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d8:	d1ee      	bne.n	80062b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	58024800 	.word	0x58024800

080062e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e3ff      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8087 	beq.w	8006416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006308:	4b99      	ldr	r3, [pc, #612]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006312:	4b97      	ldr	r3, [pc, #604]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	2b10      	cmp	r3, #16
 800631c:	d007      	beq.n	800632e <HAL_RCC_OscConfig+0x46>
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	2b18      	cmp	r3, #24
 8006322:	d110      	bne.n	8006346 <HAL_RCC_OscConfig+0x5e>
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d10b      	bne.n	8006346 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632e:	4b90      	ldr	r3, [pc, #576]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d06c      	beq.n	8006414 <HAL_RCC_OscConfig+0x12c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d168      	bne.n	8006414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e3d9      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800634e:	d106      	bne.n	800635e <HAL_RCC_OscConfig+0x76>
 8006350:	4b87      	ldr	r3, [pc, #540]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a86      	ldr	r2, [pc, #536]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	e02e      	b.n	80063bc <HAL_RCC_OscConfig+0xd4>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <HAL_RCC_OscConfig+0x98>
 8006366:	4b82      	ldr	r3, [pc, #520]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a81      	ldr	r2, [pc, #516]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800636c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a7e      	ldr	r2, [pc, #504]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e01d      	b.n	80063bc <HAL_RCC_OscConfig+0xd4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006388:	d10c      	bne.n	80063a4 <HAL_RCC_OscConfig+0xbc>
 800638a:	4b79      	ldr	r3, [pc, #484]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a78      	ldr	r2, [pc, #480]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	4b76      	ldr	r3, [pc, #472]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a75      	ldr	r2, [pc, #468]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e00b      	b.n	80063bc <HAL_RCC_OscConfig+0xd4>
 80063a4:	4b72      	ldr	r3, [pc, #456]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a71      	ldr	r2, [pc, #452]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80063aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	4b6f      	ldr	r3, [pc, #444]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a6e      	ldr	r2, [pc, #440]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80063b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d013      	beq.n	80063ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fb fdea 	bl	8001f9c <HAL_GetTick>
 80063c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063cc:	f7fb fde6 	bl	8001f9c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b64      	cmp	r3, #100	; 0x64
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e38d      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063de:	4b64      	ldr	r3, [pc, #400]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0xe4>
 80063ea:	e014      	b.n	8006416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fb fdd6 	bl	8001f9c <HAL_GetTick>
 80063f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f4:	f7fb fdd2 	bl	8001f9c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b64      	cmp	r3, #100	; 0x64
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e379      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006406:	4b5a      	ldr	r3, [pc, #360]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <HAL_RCC_OscConfig+0x10c>
 8006412:	e000      	b.n	8006416 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80ae 	beq.w	8006580 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006424:	4b52      	ldr	r3, [pc, #328]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800642c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800642e:	4b50      	ldr	r3, [pc, #320]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_RCC_OscConfig+0x162>
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	2b18      	cmp	r3, #24
 800643e:	d13a      	bne.n	80064b6 <HAL_RCC_OscConfig+0x1ce>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d135      	bne.n	80064b6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800644a:	4b49      	ldr	r3, [pc, #292]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x17a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e34b      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	f7fb fda7 	bl	8001fb4 <HAL_GetREVID>
 8006466:	4603      	mov	r3, r0
 8006468:	f241 0203 	movw	r2, #4099	; 0x1003
 800646c:	4293      	cmp	r3, r2
 800646e:	d817      	bhi.n	80064a0 <HAL_RCC_OscConfig+0x1b8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d108      	bne.n	800648a <HAL_RCC_OscConfig+0x1a2>
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006480:	4a3b      	ldr	r2, [pc, #236]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006486:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006488:	e07a      	b.n	8006580 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648a:	4b39      	ldr	r3, [pc, #228]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	031b      	lsls	r3, r3, #12
 8006498:	4935      	ldr	r1, [pc, #212]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800649a:	4313      	orrs	r3, r2
 800649c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649e:	e06f      	b.n	8006580 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a0:	4b33      	ldr	r3, [pc, #204]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	4930      	ldr	r1, [pc, #192]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b4:	e064      	b.n	8006580 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d045      	beq.n	800654a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064be:	4b2c      	ldr	r3, [pc, #176]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 0219 	bic.w	r2, r3, #25
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4929      	ldr	r1, [pc, #164]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fb fd64 	bl	8001f9c <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d8:	f7fb fd60 	bl	8001f9c <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e307      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f6:	f7fb fd5d 	bl	8001fb4 <HAL_GetREVID>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006500:	4293      	cmp	r3, r2
 8006502:	d817      	bhi.n	8006534 <HAL_RCC_OscConfig+0x24c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d108      	bne.n	800651e <HAL_RCC_OscConfig+0x236>
 800650c:	4b18      	ldr	r3, [pc, #96]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006514:	4a16      	ldr	r2, [pc, #88]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800651a:	6053      	str	r3, [r2, #4]
 800651c:	e030      	b.n	8006580 <HAL_RCC_OscConfig+0x298>
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	031b      	lsls	r3, r3, #12
 800652c:	4910      	ldr	r1, [pc, #64]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]
 8006532:	e025      	b.n	8006580 <HAL_RCC_OscConfig+0x298>
 8006534:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	061b      	lsls	r3, r3, #24
 8006542:	490b      	ldr	r1, [pc, #44]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006544:	4313      	orrs	r3, r2
 8006546:	604b      	str	r3, [r1, #4]
 8006548:	e01a      	b.n	8006580 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a08      	ldr	r2, [pc, #32]	; (8006570 <HAL_RCC_OscConfig+0x288>)
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fb fd21 	bl	8001f9c <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800655c:	e00a      	b.n	8006574 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800655e:	f7fb fd1d 	bl	8001f9c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d903      	bls.n	8006574 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e2c4      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
 8006570:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006574:	4ba4      	ldr	r3, [pc, #656]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ee      	bne.n	800655e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80a9 	beq.w	80066e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800658e:	4b9e      	ldr	r3, [pc, #632]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006598:	4b9b      	ldr	r3, [pc, #620]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d007      	beq.n	80065b4 <HAL_RCC_OscConfig+0x2cc>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b18      	cmp	r3, #24
 80065a8:	d13a      	bne.n	8006620 <HAL_RCC_OscConfig+0x338>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d135      	bne.n	8006620 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065b4:	4b94      	ldr	r3, [pc, #592]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCC_OscConfig+0x2e4>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	2b80      	cmp	r3, #128	; 0x80
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e296      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065cc:	f7fb fcf2 	bl	8001fb4 <HAL_GetREVID>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d817      	bhi.n	800660a <HAL_RCC_OscConfig+0x322>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d108      	bne.n	80065f4 <HAL_RCC_OscConfig+0x30c>
 80065e2:	4b89      	ldr	r3, [pc, #548]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065ea:	4a87      	ldr	r2, [pc, #540]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f2:	e075      	b.n	80066e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065f4:	4b84      	ldr	r3, [pc, #528]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	069b      	lsls	r3, r3, #26
 8006602:	4981      	ldr	r1, [pc, #516]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006608:	e06a      	b.n	80066e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800660a:	4b7f      	ldr	r3, [pc, #508]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	497b      	ldr	r1, [pc, #492]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800661a:	4313      	orrs	r3, r2
 800661c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800661e:	e05f      	b.n	80066e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d042      	beq.n	80066ae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006628:	4b77      	ldr	r3, [pc, #476]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a76      	ldr	r2, [pc, #472]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fb fcb2 	bl	8001f9c <HAL_GetTick>
 8006638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800663c:	f7fb fcae 	bl	8001f9c <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e255      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800664e:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800665a:	f7fb fcab 	bl	8001fb4 <HAL_GetREVID>
 800665e:	4603      	mov	r3, r0
 8006660:	f241 0203 	movw	r2, #4099	; 0x1003
 8006664:	4293      	cmp	r3, r2
 8006666:	d817      	bhi.n	8006698 <HAL_RCC_OscConfig+0x3b0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	2b20      	cmp	r3, #32
 800666e:	d108      	bne.n	8006682 <HAL_RCC_OscConfig+0x39a>
 8006670:	4b65      	ldr	r3, [pc, #404]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006678:	4a63      	ldr	r2, [pc, #396]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800667a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667e:	6053      	str	r3, [r2, #4]
 8006680:	e02e      	b.n	80066e0 <HAL_RCC_OscConfig+0x3f8>
 8006682:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	069b      	lsls	r3, r3, #26
 8006690:	495d      	ldr	r1, [pc, #372]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
 8006696:	e023      	b.n	80066e0 <HAL_RCC_OscConfig+0x3f8>
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	4958      	ldr	r1, [pc, #352]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60cb      	str	r3, [r1, #12]
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066ae:	4b56      	ldr	r3, [pc, #344]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a55      	ldr	r2, [pc, #340]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80066b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fb fc6f 	bl	8001f9c <HAL_GetTick>
 80066be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066c2:	f7fb fc6b 	bl	8001f9c <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e212      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066d4:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d036      	beq.n	800675a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f4:	4b44      	ldr	r3, [pc, #272]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80066f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f8:	4a43      	ldr	r2, [pc, #268]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fb fc4c 	bl	8001f9c <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006708:	f7fb fc48 	bl	8001f9c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e1ef      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800671a:	4b3b      	ldr	r3, [pc, #236]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800671c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x420>
 8006726:	e018      	b.n	800675a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006728:	4b37      	ldr	r3, [pc, #220]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800672a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672c:	4a36      	ldr	r2, [pc, #216]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fb fc32 	bl	8001f9c <HAL_GetTick>
 8006738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800673c:	f7fb fc2e 	bl	8001f9c <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1d5      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800674e:	4b2e      	ldr	r3, [pc, #184]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d036      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d019      	beq.n	80067a2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a25      	ldr	r2, [pc, #148]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800677a:	f7fb fc0f 	bl	8001f9c <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006782:	f7fb fc0b 	bl	8001f9c <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e1b2      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x49a>
 80067a0:	e018      	b.n	80067d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067a2:	4b19      	ldr	r3, [pc, #100]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80067a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ae:	f7fb fbf5 	bl	8001f9c <HAL_GetTick>
 80067b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067b6:	f7fb fbf1 	bl	8001f9c <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e198      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <HAL_RCC_OscConfig+0x520>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f0      	bne.n	80067b6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8085 	beq.w	80068ec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_RCC_OscConfig+0x524>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <HAL_RCC_OscConfig+0x524>)
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ee:	f7fb fbd5 	bl	8001f9c <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f4:	e00c      	b.n	8006810 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067f6:	f7fb fbd1 	bl	8001f9c <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b64      	cmp	r3, #100	; 0x64
 8006802:	d905      	bls.n	8006810 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e178      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
 8006808:	58024400 	.word	0x58024400
 800680c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006810:	4b96      	ldr	r3, [pc, #600]	; (8006a6c <HAL_RCC_OscConfig+0x784>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0ec      	beq.n	80067f6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d106      	bne.n	8006832 <HAL_RCC_OscConfig+0x54a>
 8006824:	4b92      	ldr	r3, [pc, #584]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006828:	4a91      	ldr	r2, [pc, #580]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6713      	str	r3, [r2, #112]	; 0x70
 8006830:	e02d      	b.n	800688e <HAL_RCC_OscConfig+0x5a6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <HAL_RCC_OscConfig+0x56c>
 800683a:	4b8d      	ldr	r3, [pc, #564]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683e:	4a8c      	ldr	r2, [pc, #560]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	6713      	str	r3, [r2, #112]	; 0x70
 8006846:	4b8a      	ldr	r3, [pc, #552]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	4a89      	ldr	r2, [pc, #548]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800684c:	f023 0304 	bic.w	r3, r3, #4
 8006850:	6713      	str	r3, [r2, #112]	; 0x70
 8006852:	e01c      	b.n	800688e <HAL_RCC_OscConfig+0x5a6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b05      	cmp	r3, #5
 800685a:	d10c      	bne.n	8006876 <HAL_RCC_OscConfig+0x58e>
 800685c:	4b84      	ldr	r3, [pc, #528]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4a83      	ldr	r2, [pc, #524]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006862:	f043 0304 	orr.w	r3, r3, #4
 8006866:	6713      	str	r3, [r2, #112]	; 0x70
 8006868:	4b81      	ldr	r3, [pc, #516]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	4a80      	ldr	r2, [pc, #512]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	6713      	str	r3, [r2, #112]	; 0x70
 8006874:	e00b      	b.n	800688e <HAL_RCC_OscConfig+0x5a6>
 8006876:	4b7e      	ldr	r3, [pc, #504]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	4a7d      	ldr	r2, [pc, #500]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	6713      	str	r3, [r2, #112]	; 0x70
 8006882:	4b7b      	ldr	r3, [pc, #492]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	4a7a      	ldr	r2, [pc, #488]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d015      	beq.n	80068c2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006896:	f7fb fb81 	bl	8001f9c <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689c:	e00a      	b.n	80068b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800689e:	f7fb fb7d 	bl	8001f9c <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e122      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b4:	4b6e      	ldr	r3, [pc, #440]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0ee      	beq.n	800689e <HAL_RCC_OscConfig+0x5b6>
 80068c0:	e014      	b.n	80068ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c2:	f7fb fb6b 	bl	8001f9c <HAL_GetTick>
 80068c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068c8:	e00a      	b.n	80068e0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ca:	f7fb fb67 	bl	8001f9c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d8:	4293      	cmp	r3, r2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e10c      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068e0:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80068e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ee      	bne.n	80068ca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8101 	beq.w	8006af8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068f6:	4b5e      	ldr	r3, [pc, #376]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068fe:	2b18      	cmp	r3, #24
 8006900:	f000 80bc 	beq.w	8006a7c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	2b02      	cmp	r3, #2
 800690a:	f040 8095 	bne.w	8006a38 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690e:	4b58      	ldr	r3, [pc, #352]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a57      	ldr	r2, [pc, #348]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691a:	f7fb fb3f 	bl	8001f9c <HAL_GetTick>
 800691e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006922:	f7fb fb3b 	bl	8001f9c <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0e2      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006934:	4b4e      	ldr	r3, [pc, #312]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006940:	4b4b      	ldr	r3, [pc, #300]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006944:	4b4b      	ldr	r3, [pc, #300]	; (8006a74 <HAL_RCC_OscConfig+0x78c>)
 8006946:	4013      	ands	r3, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006950:	0112      	lsls	r2, r2, #4
 8006952:	430a      	orrs	r2, r1
 8006954:	4946      	ldr	r1, [pc, #280]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006956:	4313      	orrs	r3, r2
 8006958:	628b      	str	r3, [r1, #40]	; 0x28
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	3b01      	subs	r3, #1
 8006960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006968:	3b01      	subs	r3, #1
 800696a:	025b      	lsls	r3, r3, #9
 800696c:	b29b      	uxth	r3, r3
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	3b01      	subs	r3, #1
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	3b01      	subs	r3, #1
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800698a:	4939      	ldr	r1, [pc, #228]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800698c:	4313      	orrs	r3, r2
 800698e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006990:	4b37      	ldr	r3, [pc, #220]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	4a36      	ldr	r2, [pc, #216]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800699c:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 800699e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a0:	4b35      	ldr	r3, [pc, #212]	; (8006a78 <HAL_RCC_OscConfig+0x790>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80069a8:	00d2      	lsls	r2, r2, #3
 80069aa:	4931      	ldr	r1, [pc, #196]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069b0:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f023 020c 	bic.w	r2, r3, #12
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	492c      	ldr	r1, [pc, #176]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069c2:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	f023 0202 	bic.w	r2, r3, #2
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ce:	4928      	ldr	r1, [pc, #160]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069d4:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069ec:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fb fac4 	bl	8001f9c <HAL_GetTick>
 8006a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a18:	f7fb fac0 	bl	8001f9c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e067      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x730>
 8006a36:	e05f      	b.n	8006af8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fb faaa 	bl	8001f9c <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a4c:	f7fb faa6 	bl	8001f9c <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e04d      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_RCC_OscConfig+0x788>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x764>
 8006a6a:	e045      	b.n	8006af8 <HAL_RCC_OscConfig+0x810>
 8006a6c:	58024800 	.word	0x58024800
 8006a70:	58024400 	.word	0x58024400
 8006a74:	fffffc0c 	.word	0xfffffc0c
 8006a78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a7c:	4b21      	ldr	r3, [pc, #132]	; (8006b04 <HAL_RCC_OscConfig+0x81c>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a82:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <HAL_RCC_OscConfig+0x81c>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d031      	beq.n	8006af4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f003 0203 	and.w	r2, r3, #3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d12a      	bne.n	8006af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d122      	bne.n	8006af4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d11a      	bne.n	8006af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	0a5b      	lsrs	r3, r3, #9
 8006ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d111      	bne.n	8006af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d108      	bne.n	8006af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3730      	adds	r7, #48	; 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400

08006b08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e19c      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b8a      	ldr	r3, [pc, #552]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d910      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b87      	ldr	r3, [pc, #540]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 020f 	bic.w	r2, r3, #15
 8006b32:	4985      	ldr	r1, [pc, #532]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b83      	ldr	r3, [pc, #524]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e184      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d908      	bls.n	8006b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b68:	4b78      	ldr	r3, [pc, #480]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	4975      	ldr	r1, [pc, #468]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d010      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	4b70      	ldr	r3, [pc, #448]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d908      	bls.n	8006ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b96:	4b6d      	ldr	r3, [pc, #436]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	496a      	ldr	r1, [pc, #424]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d010      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699a      	ldr	r2, [r3, #24]
 8006bb8:	4b64      	ldr	r3, [pc, #400]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d908      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bc4:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	495e      	ldr	r1, [pc, #376]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69da      	ldr	r2, [r3, #28]
 8006be6:	4b59      	ldr	r3, [pc, #356]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d908      	bls.n	8006c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bf2:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4953      	ldr	r1, [pc, #332]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d010      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d908      	bls.n	8006c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c20:	4b4a      	ldr	r3, [pc, #296]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f023 020f 	bic.w	r2, r3, #15
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4947      	ldr	r1, [pc, #284]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d055      	beq.n	8006cea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c3e:	4b43      	ldr	r3, [pc, #268]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4940      	ldr	r1, [pc, #256]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c58:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d121      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0f6      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c70:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d115      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0ea      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d107      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c88:	4b30      	ldr	r3, [pc, #192]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0de      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c98:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0d6      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ca8:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f023 0207 	bic.w	r2, r3, #7
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4925      	ldr	r1, [pc, #148]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cba:	f7fb f96f 	bl	8001f9c <HAL_GetTick>
 8006cbe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc2:	f7fb f96b 	bl	8001f9c <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e0be      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd8:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d1eb      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d208      	bcs.n	8006d18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d06:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f023 020f 	bic.w	r2, r3, #15
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	490e      	ldr	r1, [pc, #56]	; (8006d4c <HAL_RCC_ClockConfig+0x244>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d18:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d214      	bcs.n	8006d50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f023 020f 	bic.w	r2, r3, #15
 8006d2e:	4906      	ldr	r1, [pc, #24]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <HAL_RCC_ClockConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d005      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e086      	b.n	8006e56 <HAL_RCC_ClockConfig+0x34e>
 8006d48:	52002000 	.word	0x52002000
 8006d4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d010      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d208      	bcs.n	8006d7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d6c:	4b3c      	ldr	r3, [pc, #240]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	4939      	ldr	r1, [pc, #228]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d010      	beq.n	8006dac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695a      	ldr	r2, [r3, #20]
 8006d8e:	4b34      	ldr	r3, [pc, #208]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d208      	bcs.n	8006dac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d9a:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	492e      	ldr	r1, [pc, #184]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d010      	beq.n	8006dda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d208      	bcs.n	8006dda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dc8:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	4922      	ldr	r1, [pc, #136]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d010      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d208      	bcs.n	8006e08 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	4917      	ldr	r1, [pc, #92]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e08:	f000 f834 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	4912      	ldr	r1, [pc, #72]	; (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e26:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <HAL_RCC_ClockConfig+0x358>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <HAL_RCC_ClockConfig+0x35c>)
 8006e30:	5cd3      	ldrb	r3, [r2, r3]
 8006e32:	f003 031f 	and.w	r3, r3, #31
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3c:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <HAL_RCC_ClockConfig+0x360>)
 8006e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e40:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <HAL_RCC_ClockConfig+0x364>)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <HAL_RCC_ClockConfig+0x368>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa f99a 	bl	8001184 <HAL_InitTick>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	58024400 	.word	0x58024400
 8006e64:	08027484 	.word	0x08027484
 8006e68:	24000004 	.word	0x24000004
 8006e6c:	24000000 	.word	0x24000000
 8006e70:	24000008 	.word	0x24000008

08006e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	; 0x24
 8006e78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e7a:	4bb3      	ldr	r3, [pc, #716]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e82:	2b18      	cmp	r3, #24
 8006e84:	f200 8155 	bhi.w	8007132 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006ef5 	.word	0x08006ef5
 8006e94:	08007133 	.word	0x08007133
 8006e98:	08007133 	.word	0x08007133
 8006e9c:	08007133 	.word	0x08007133
 8006ea0:	08007133 	.word	0x08007133
 8006ea4:	08007133 	.word	0x08007133
 8006ea8:	08007133 	.word	0x08007133
 8006eac:	08007133 	.word	0x08007133
 8006eb0:	08006f1b 	.word	0x08006f1b
 8006eb4:	08007133 	.word	0x08007133
 8006eb8:	08007133 	.word	0x08007133
 8006ebc:	08007133 	.word	0x08007133
 8006ec0:	08007133 	.word	0x08007133
 8006ec4:	08007133 	.word	0x08007133
 8006ec8:	08007133 	.word	0x08007133
 8006ecc:	08007133 	.word	0x08007133
 8006ed0:	08006f21 	.word	0x08006f21
 8006ed4:	08007133 	.word	0x08007133
 8006ed8:	08007133 	.word	0x08007133
 8006edc:	08007133 	.word	0x08007133
 8006ee0:	08007133 	.word	0x08007133
 8006ee4:	08007133 	.word	0x08007133
 8006ee8:	08007133 	.word	0x08007133
 8006eec:	08007133 	.word	0x08007133
 8006ef0:	08006f27 	.word	0x08006f27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef4:	4b94      	ldr	r3, [pc, #592]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f00:	4b91      	ldr	r3, [pc, #580]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	08db      	lsrs	r3, r3, #3
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	4a90      	ldr	r2, [pc, #576]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006f12:	e111      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f14:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f16:	61bb      	str	r3, [r7, #24]
    break;
 8006f18:	e10e      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f1a:	4b8d      	ldr	r3, [pc, #564]	; (8007150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f1c:	61bb      	str	r3, [r7, #24]
    break;
 8006f1e:	e10b      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f20:	4b8c      	ldr	r3, [pc, #560]	; (8007154 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f22:	61bb      	str	r3, [r7, #24]
    break;
 8006f24:	e108      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f26:	4b88      	ldr	r3, [pc, #544]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f30:	4b85      	ldr	r3, [pc, #532]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f3c:	4b82      	ldr	r3, [pc, #520]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f46:	4b80      	ldr	r3, [pc, #512]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4a:	08db      	lsrs	r3, r3, #3
 8006f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80e1 	beq.w	800712c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	f000 8083 	beq.w	8007078 <HAL_RCC_GetSysClockFreq+0x204>
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	f200 80a1 	bhi.w	80070bc <HAL_RCC_GetSysClockFreq+0x248>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_RCC_GetSysClockFreq+0x114>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d056      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f86:	e099      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f88:	4b6f      	ldr	r3, [pc, #444]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d02d      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f94:	4b6c      	ldr	r3, [pc, #432]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	08db      	lsrs	r3, r3, #3
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	4a6b      	ldr	r2, [pc, #428]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fbe:	4b62      	ldr	r3, [pc, #392]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fd2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007158 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006fee:	e087      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800715c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007002:	4b51      	ldr	r3, [pc, #324]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007012:	ed97 6a02 	vldr	s12, [r7, #8]
 8007016:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800701a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007032:	e065      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007160 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007046:	4b40      	ldr	r3, [pc, #256]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007056:	ed97 6a02 	vldr	s12, [r7, #8]
 800705a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007076:	e043      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007164 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708a:	4b2f      	ldr	r3, [pc, #188]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	ed97 6a02 	vldr	s12, [r7, #8]
 800709e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007158 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ba:	e021      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007160 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ce:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a02 	vldr	s12, [r7, #8]
 80070e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007158 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007100:	4b11      	ldr	r3, [pc, #68]	; (8007148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	0a5b      	lsrs	r3, r3, #9
 8007106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710a:	3301      	adds	r3, #1
 800710c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	ee07 3a90 	vmov	s15, r3
 8007114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007118:	edd7 6a07 	vldr	s13, [r7, #28]
 800711c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007124:	ee17 3a90 	vmov	r3, s15
 8007128:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800712a:	e005      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	61bb      	str	r3, [r7, #24]
    break;
 8007130:	e002      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007134:	61bb      	str	r3, [r7, #24]
    break;
 8007136:	bf00      	nop
  }

  return sysclockfreq;
 8007138:	69bb      	ldr	r3, [r7, #24]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3724      	adds	r7, #36	; 0x24
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	58024400 	.word	0x58024400
 800714c:	03d09000 	.word	0x03d09000
 8007150:	003d0900 	.word	0x003d0900
 8007154:	017d7840 	.word	0x017d7840
 8007158:	46000000 	.word	0x46000000
 800715c:	4c742400 	.word	0x4c742400
 8007160:	4a742400 	.word	0x4a742400
 8007164:	4bbebc20 	.word	0x4bbebc20

08007168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800716e:	f7ff fe81 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8007172:	4602      	mov	r2, r0
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	0a1b      	lsrs	r3, r3, #8
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	490f      	ldr	r1, [pc, #60]	; (80071bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007180:	5ccb      	ldrb	r3, [r1, r3]
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	fa22 f303 	lsr.w	r3, r2, r3
 800718a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800718c:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	4a09      	ldr	r2, [pc, #36]	; (80071bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	fa22 f303 	lsr.w	r3, r2, r3
 80071a2:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80071a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071a6:	4a07      	ldr	r2, [pc, #28]	; (80071c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071ac:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	58024400 	.word	0x58024400
 80071bc:	08027484 	.word	0x08027484
 80071c0:	24000004 	.word	0x24000004
 80071c4:	24000000 	.word	0x24000000

080071c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071cc:	f7ff ffcc 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071de:	5ccb      	ldrb	r3, [r1, r3]
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	58024400 	.word	0x58024400
 80071f0:	08027484 	.word	0x08027484

080071f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071f8:	f7ff ffb6 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 80071fc:	4602      	mov	r2, r0
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	0a1b      	lsrs	r3, r3, #8
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	4904      	ldr	r1, [pc, #16]	; (800721c <HAL_RCC_GetPCLK2Freq+0x28>)
 800720a:	5ccb      	ldrb	r3, [r1, r3]
 800720c:	f003 031f 	and.w	r3, r3, #31
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007214:	4618      	mov	r0, r3
 8007216:	bd80      	pop	{r7, pc}
 8007218:	58024400 	.word	0x58024400
 800721c:	08027484 	.word	0x08027484

08007220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	223f      	movs	r2, #63	; 0x3f
 800722e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007230:	4b1a      	ldr	r3, [pc, #104]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0207 	and.w	r2, r3, #7
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800723c:	4b17      	ldr	r3, [pc, #92]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007248:	4b14      	ldr	r3, [pc, #80]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f003 020f 	and.w	r2, r3, #15
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007254:	4b11      	ldr	r3, [pc, #68]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007260:	4b0e      	ldr	r3, [pc, #56]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007278:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_RCC_GetClockConfig+0x7c>)
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <HAL_RCC_GetClockConfig+0x80>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	58024400 	.word	0x58024400
 80072a0:	52002000 	.word	0x52002000

080072a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072b0:	2300      	movs	r3, #0
 80072b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d03f      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072c8:	d02a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80072ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ce:	d824      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072d4:	d018      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072da:	d81e      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e4:	d007      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80072e6:	e018      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e8:	4bab      	ldr	r3, [pc, #684]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4aaa      	ldr	r2, [pc, #680]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072f4:	e015      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	2102      	movs	r1, #2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f9bf 	bl	8008680 <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007306:	e00c      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	2102      	movs	r1, #2
 800730e:	4618      	mov	r0, r3
 8007310:	f001 fa68 	bl	80087e4 <RCCEx_PLL3_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007318:	e003      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
      break;
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007328:	4b9b      	ldr	r3, [pc, #620]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007334:	4998      	ldr	r1, [pc, #608]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007336:	4313      	orrs	r3, r2
 8007338:	650b      	str	r3, [r1, #80]	; 0x50
 800733a:	e001      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007348:	2b00      	cmp	r3, #0
 800734a:	d03d      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007350:	2b04      	cmp	r3, #4
 8007352:	d826      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	08007371 	.word	0x08007371
 8007360:	0800737f 	.word	0x0800737f
 8007364:	08007391 	.word	0x08007391
 8007368:	080073a9 	.word	0x080073a9
 800736c:	080073a9 	.word	0x080073a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007370:	4b89      	ldr	r3, [pc, #548]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	4a88      	ldr	r2, [pc, #544]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800737c:	e015      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3304      	adds	r3, #4
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f001 f97b 	bl	8008680 <RCCEx_PLL2_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800738e:	e00c      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f001 fa24 	bl	80087e4 <RCCEx_PLL3_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
      break;
 80073a6:	e000      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80073a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073b0:	4b79      	ldr	r3, [pc, #484]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b4:	f023 0207 	bic.w	r2, r3, #7
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073bc:	4976      	ldr	r1, [pc, #472]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	650b      	str	r3, [r1, #80]	; 0x50
 80073c2:	e001      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d042      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073dc:	d02b      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80073de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e2:	d825      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073e4:	2bc0      	cmp	r3, #192	; 0xc0
 80073e6:	d028      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073e8:	2bc0      	cmp	r3, #192	; 0xc0
 80073ea:	d821      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d016      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d81d      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d007      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80073fc:	e018      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fe:	4b66      	ldr	r3, [pc, #408]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4a65      	ldr	r2, [pc, #404]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800740a:	e017      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f001 f934 	bl	8008680 <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800741c:	e00e      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3324      	adds	r3, #36	; 0x24
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f9dd 	bl	80087e4 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800742e:	e005      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	e002      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800743a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007442:	4b55      	ldr	r3, [pc, #340]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007446:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	4952      	ldr	r1, [pc, #328]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007450:	4313      	orrs	r3, r2
 8007452:	650b      	str	r3, [r1, #80]	; 0x50
 8007454:	e001      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007462:	2b00      	cmp	r3, #0
 8007464:	d049      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800746c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007470:	d030      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007476:	d82a      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007478:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800747c:	d02c      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800747e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007482:	d824      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007488:	d018      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800748a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800748e:	d81e      	bhi.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007498:	d007      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800749a:	e018      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4b3e      	ldr	r3, [pc, #248]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4a3d      	ldr	r2, [pc, #244]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a8:	e017      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3304      	adds	r3, #4
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f8e5 	bl	8008680 <RCCEx_PLL2_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074ba:	e00e      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3324      	adds	r3, #36	; 0x24
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 f98e 	bl	80087e4 <RCCEx_PLL3_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074cc:	e005      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
      break;
 80074d2:	e002      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80074d4:	bf00      	nop
 80074d6:	e000      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80074d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074e0:	4b2d      	ldr	r3, [pc, #180]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074ee:	492a      	ldr	r1, [pc, #168]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	658b      	str	r3, [r1, #88]	; 0x58
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04c      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800750c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007510:	d030      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007516:	d82a      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800751c:	d02c      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800751e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007522:	d824      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007528:	d018      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800752a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800752e:	d81e      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007538:	d007      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800753a:	e018      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4b16      	ldr	r3, [pc, #88]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4a15      	ldr	r2, [pc, #84]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007548:	e017      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f001 f895 	bl	8008680 <RCCEx_PLL2_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800755a:	e00e      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3324      	adds	r3, #36	; 0x24
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f93e 	bl	80087e4 <RCCEx_PLL3_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800756c:	e005      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
      break;
 8007572:	e002      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10d      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007584:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800758e:	4902      	ldr	r1, [pc, #8]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007590:	4313      	orrs	r3, r2
 8007592:	658b      	str	r3, [r1, #88]	; 0x58
 8007594:	e004      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d032      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b0:	2b30      	cmp	r3, #48	; 0x30
 80075b2:	d01c      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d817      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d00c      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d813      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d016      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d10f      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c8:	4baf      	ldr	r3, [pc, #700]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4aae      	ldr	r2, [pc, #696]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075d4:	e00e      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	2102      	movs	r1, #2
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 f84f 	bl	8008680 <RCCEx_PLL2_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075e6:	e005      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
      break;
 80075ec:	e002      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80075f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075fa:	4ba3      	ldr	r3, [pc, #652]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007606:	49a0      	ldr	r1, [pc, #640]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007608:	4313      	orrs	r3, r2
 800760a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800760c:	e001      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d047      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007626:	d030      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762c:	d82a      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800762e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007632:	d02c      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007638:	d824      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763e:	d018      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007644:	d81e      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d007      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007650:	e018      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007652:	4b8d      	ldr	r3, [pc, #564]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	4a8c      	ldr	r2, [pc, #560]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800765e:	e017      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	2100      	movs	r1, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f001 f80a 	bl	8008680 <RCCEx_PLL2_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007670:	e00e      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3324      	adds	r3, #36	; 0x24
 8007676:	2100      	movs	r1, #0
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f8b3 	bl	80087e4 <RCCEx_PLL3_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007682:	e005      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	e002      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800768e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007696:	4b7c      	ldr	r3, [pc, #496]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	4979      	ldr	r1, [pc, #484]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	650b      	str	r3, [r1, #80]	; 0x50
 80076a8:	e001      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d049      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c2:	d02e      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80076c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c8:	d828      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076ce:	d02a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80076d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076d4:	d822      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076da:	d026      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80076dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076e0:	d81c      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e6:	d010      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80076e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ec:	d816      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01d      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80076f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f6:	d111      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	2101      	movs	r1, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 ffbe 	bl	8008680 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007708:	e012      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3324      	adds	r3, #36	; 0x24
 800770e:	2101      	movs	r1, #1
 8007710:	4618      	mov	r0, r3
 8007712:	f001 f867 	bl	80087e4 <RCCEx_PLL3_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800771a:	e009      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
      break;
 8007720:	e006      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007722:	bf00      	nop
 8007724:	e004      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007726:	bf00      	nop
 8007728:	e002      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800772a:	bf00      	nop
 800772c:	e000      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800772e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007736:	4b54      	ldr	r3, [pc, #336]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007742:	4951      	ldr	r1, [pc, #324]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007744:	4313      	orrs	r3, r2
 8007746:	650b      	str	r3, [r1, #80]	; 0x50
 8007748:	e001      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d04b      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007764:	d02e      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800776a:	d828      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d02a      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007776:	d822      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777c:	d026      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800777e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007782:	d81c      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007788:	d010      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800778a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778e:	d816      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01d      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007798:	d111      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3304      	adds	r3, #4
 800779e:	2101      	movs	r1, #1
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 ff6d 	bl	8008680 <RCCEx_PLL2_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077aa:	e012      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3324      	adds	r3, #36	; 0x24
 80077b0:	2101      	movs	r1, #1
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 f816 	bl	80087e4 <RCCEx_PLL3_Config>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077bc:	e009      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
      break;
 80077c2:	e006      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077c4:	bf00      	nop
 80077c6:	e004      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077c8:	bf00      	nop
 80077ca:	e002      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077cc:	bf00      	nop
 80077ce:	e000      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077d8:	4b2b      	ldr	r3, [pc, #172]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e6:	4928      	ldr	r1, [pc, #160]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	658b      	str	r3, [r1, #88]	; 0x58
 80077ec:	e001      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d02f      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007806:	d00e      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780c:	d814      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d015      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007816:	d10f      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007818:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	4a1a      	ldr	r2, [pc, #104]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800781e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007824:	e00c      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3304      	adds	r3, #4
 800782a:	2101      	movs	r1, #1
 800782c:	4618      	mov	r0, r3
 800782e:	f000 ff27 	bl	8008680 <RCCEx_PLL2_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]
      break;
 800783c:	e000      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800783e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007846:	4b10      	ldr	r3, [pc, #64]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007852:	490d      	ldr	r1, [pc, #52]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007854:	4313      	orrs	r3, r2
 8007856:	650b      	str	r3, [r1, #80]	; 0x50
 8007858:	e001      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d033      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	2b03      	cmp	r3, #3
 8007870:	d81c      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	080078b3 	.word	0x080078b3
 800787c:	0800788d 	.word	0x0800788d
 8007880:	0800789b 	.word	0x0800789b
 8007884:	080078b3 	.word	0x080078b3
 8007888:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788c:	4bb8      	ldr	r3, [pc, #736]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	4ab7      	ldr	r2, [pc, #732]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007898:	e00c      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3304      	adds	r3, #4
 800789e:	2102      	movs	r1, #2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 feed 	bl	8008680 <RCCEx_PLL2_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078aa:	e003      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
      break;
 80078b0:	e000      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80078b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078ba:	4bad      	ldr	r3, [pc, #692]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	f023 0203 	bic.w	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c6:	49aa      	ldr	r1, [pc, #680]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078cc:	e001      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 8086 	beq.w	80079ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078e0:	4ba4      	ldr	r3, [pc, #656]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4aa3      	ldr	r2, [pc, #652]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80078e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078ec:	f7fa fb56 	bl	8001f9c <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078f2:	e009      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f4:	f7fa fb52 	bl	8001f9c <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b64      	cmp	r3, #100	; 0x64
 8007900:	d902      	bls.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	75fb      	strb	r3, [r7, #23]
        break;
 8007906:	e005      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007908:	4b9a      	ldr	r3, [pc, #616]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0ef      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d166      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800791a:	4b95      	ldr	r3, [pc, #596]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800791c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007924:	4053      	eors	r3, r2
 8007926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792a:	2b00      	cmp	r3, #0
 800792c:	d013      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800792e:	4b90      	ldr	r3, [pc, #576]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007936:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007938:	4b8d      	ldr	r3, [pc, #564]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	4a8c      	ldr	r2, [pc, #560]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800793e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007942:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007944:	4b8a      	ldr	r3, [pc, #552]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007948:	4a89      	ldr	r2, [pc, #548]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800794a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007950:	4a87      	ldr	r2, [pc, #540]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800795c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007960:	d115      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007962:	f7fa fb1b 	bl	8001f9c <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007968:	e00b      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800796a:	f7fa fb17 	bl	8001f9c <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	f241 3288 	movw	r2, #5000	; 0x1388
 8007978:	4293      	cmp	r3, r2
 800797a:	d902      	bls.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	75fb      	strb	r3, [r7, #23]
            break;
 8007980:	e005      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007982:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0ed      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d126      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800799a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a2:	d10d      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80079a4:	4b72      	ldr	r3, [pc, #456]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079b2:	0919      	lsrs	r1, r3, #4
 80079b4:	4b70      	ldr	r3, [pc, #448]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80079b6:	400b      	ands	r3, r1
 80079b8:	496d      	ldr	r1, [pc, #436]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	610b      	str	r3, [r1, #16]
 80079be:	e005      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80079c0:	4b6b      	ldr	r3, [pc, #428]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	4a6a      	ldr	r2, [pc, #424]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80079ca:	6113      	str	r3, [r2, #16]
 80079cc:	4b68      	ldr	r3, [pc, #416]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079da:	4965      	ldr	r1, [pc, #404]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	670b      	str	r3, [r1, #112]	; 0x70
 80079e0:	e004      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	75bb      	strb	r3, [r7, #22]
 80079e6:	e001      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d07e      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079fc:	2b28      	cmp	r3, #40	; 0x28
 80079fe:	d867      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007ad7 	.word	0x08007ad7
 8007a0c:	08007ad1 	.word	0x08007ad1
 8007a10:	08007ad1 	.word	0x08007ad1
 8007a14:	08007ad1 	.word	0x08007ad1
 8007a18:	08007ad1 	.word	0x08007ad1
 8007a1c:	08007ad1 	.word	0x08007ad1
 8007a20:	08007ad1 	.word	0x08007ad1
 8007a24:	08007ad1 	.word	0x08007ad1
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007ad1 	.word	0x08007ad1
 8007a30:	08007ad1 	.word	0x08007ad1
 8007a34:	08007ad1 	.word	0x08007ad1
 8007a38:	08007ad1 	.word	0x08007ad1
 8007a3c:	08007ad1 	.word	0x08007ad1
 8007a40:	08007ad1 	.word	0x08007ad1
 8007a44:	08007ad1 	.word	0x08007ad1
 8007a48:	08007abf 	.word	0x08007abf
 8007a4c:	08007ad1 	.word	0x08007ad1
 8007a50:	08007ad1 	.word	0x08007ad1
 8007a54:	08007ad1 	.word	0x08007ad1
 8007a58:	08007ad1 	.word	0x08007ad1
 8007a5c:	08007ad1 	.word	0x08007ad1
 8007a60:	08007ad1 	.word	0x08007ad1
 8007a64:	08007ad1 	.word	0x08007ad1
 8007a68:	08007ad7 	.word	0x08007ad7
 8007a6c:	08007ad1 	.word	0x08007ad1
 8007a70:	08007ad1 	.word	0x08007ad1
 8007a74:	08007ad1 	.word	0x08007ad1
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007ad1 	.word	0x08007ad1
 8007a84:	08007ad1 	.word	0x08007ad1
 8007a88:	08007ad7 	.word	0x08007ad7
 8007a8c:	08007ad1 	.word	0x08007ad1
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007ad1 	.word	0x08007ad1
 8007a9c:	08007ad1 	.word	0x08007ad1
 8007aa0:	08007ad1 	.word	0x08007ad1
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ad7 	.word	0x08007ad7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fde4 	bl	8008680 <RCCEx_PLL2_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007abc:	e00c      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3324      	adds	r3, #36	; 0x24
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fe8d 	bl	80087e4 <RCCEx_PLL3_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ace:	e003      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad4:	e000      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aea:	4921      	ldr	r1, [pc, #132]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	654b      	str	r3, [r1, #84]	; 0x54
 8007af0:	e001      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d03e      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d820      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b53 	.word	0x08007b53
 8007b14:	08007b29 	.word	0x08007b29
 8007b18:	08007b3b 	.word	0x08007b3b
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b53 	.word	0x08007b53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fda6 	bl	8008680 <RCCEx_PLL2_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b38:	e00c      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3324      	adds	r3, #36	; 0x24
 8007b3e:	2101      	movs	r1, #1
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fe4f 	bl	80087e4 <RCCEx_PLL3_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d110      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f023 0207 	bic.w	r2, r3, #7
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b66:	4902      	ldr	r1, [pc, #8]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b6c:	e008      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007b6e:	bf00      	nop
 8007b70:	58024400 	.word	0x58024400
 8007b74:	58024800 	.word	0x58024800
 8007b78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d039      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d820      	bhi.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bdf 	.word	0x08007bdf
 8007ba0:	08007bb5 	.word	0x08007bb5
 8007ba4:	08007bc7 	.word	0x08007bc7
 8007ba8:	08007bdf 	.word	0x08007bdf
 8007bac:	08007bdf 	.word	0x08007bdf
 8007bb0:	08007bdf 	.word	0x08007bdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fd60 	bl	8008680 <RCCEx_PLL2_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007bc4:	e00c      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3324      	adds	r3, #36	; 0x24
 8007bca:	2101      	movs	r1, #1
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fe09 	bl	80087e4 <RCCEx_PLL3_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007bd6:	e003      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
      break;
 8007bdc:	e000      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007be6:	4bb7      	ldr	r3, [pc, #732]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	f023 0207 	bic.w	r2, r3, #7
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf4:	49b3      	ldr	r1, [pc, #716]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	658b      	str	r3, [r1, #88]	; 0x58
 8007bfa:	e001      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d04b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c16:	d02e      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c1c:	d828      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c22:	d02a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c28:	d822      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c2e:	d026      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c34:	d81c      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c3a:	d010      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c40:	d816      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01d      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c4a:	d111      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	2100      	movs	r1, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fd14 	bl	8008680 <RCCEx_PLL2_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c5c:	e012      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3324      	adds	r3, #36	; 0x24
 8007c62:	2102      	movs	r1, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fdbd 	bl	80087e4 <RCCEx_PLL3_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c6e:	e009      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
      break;
 8007c74:	e006      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c76:	bf00      	nop
 8007c78:	e004      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c8a:	4b8e      	ldr	r3, [pc, #568]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	498a      	ldr	r1, [pc, #552]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	654b      	str	r3, [r1, #84]	; 0x54
 8007c9e:	e001      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d04b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cba:	d02e      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007cbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cc0:	d828      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc6:	d02a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ccc:	d822      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cd2:	d026      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cd8:	d81c      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cde:	d010      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce4:	d816      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01d      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cee:	d111      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fcc2 	bl	8008680 <RCCEx_PLL2_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d00:	e012      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3324      	adds	r3, #36	; 0x24
 8007d06:	2102      	movs	r1, #2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fd6b 	bl	80087e4 <RCCEx_PLL3_Config>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d12:	e009      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
      break;
 8007d18:	e006      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007d1a:	bf00      	nop
 8007d1c:	e004      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007d1e:	bf00      	nop
 8007d20:	e002      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007d22:	bf00      	nop
 8007d24:	e000      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d2e:	4b65      	ldr	r3, [pc, #404]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d3c:	4961      	ldr	r1, [pc, #388]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	658b      	str	r3, [r1, #88]	; 0x58
 8007d42:	e001      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d04b      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d5e:	d02e      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007d60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d64:	d828      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6a:	d02a      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d70:	d822      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d76:	d026      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007d78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d7c:	d81c      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d82:	d010      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d88:	d816      	bhi.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01d      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d92:	d111      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fc70 	bl	8008680 <RCCEx_PLL2_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007da4:	e012      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3324      	adds	r3, #36	; 0x24
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fd19 	bl	80087e4 <RCCEx_PLL3_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007db6:	e009      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbc:	e006      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007dbe:	bf00      	nop
 8007dc0:	e004      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007dc2:	bf00      	nop
 8007dc4:	e002      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007dd2:	4b3c      	ldr	r3, [pc, #240]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007de0:	4938      	ldr	r1, [pc, #224]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	658b      	str	r3, [r1, #88]	; 0x58
 8007de6:	e001      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e02:	d10a      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3324      	adds	r3, #36	; 0x24
 8007e08:	2102      	movs	r1, #2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fcea 	bl	80087e4 <RCCEx_PLL3_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e28:	4926      	ldr	r1, [pc, #152]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0310 	and.w	r3, r3, #16
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01a      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e44:	d10a      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3324      	adds	r3, #36	; 0x24
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fcc9 	bl	80087e4 <RCCEx_PLL3_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e5c:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e6a:	4916      	ldr	r1, [pc, #88]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d036      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e86:	d01f      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8c:	d817      	bhi.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e96:	d009      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007e98:	e011      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fbed 	bl	8008680 <RCCEx_PLL2_Config>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007eaa:	e00e      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3324      	adds	r3, #36	; 0x24
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fc96 	bl	80087e4 <RCCEx_PLL3_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ebc:	e005      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec2:	e002      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007ec4:	58024400 	.word	0x58024400
      break;
 8007ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ed0:	4b8b      	ldr	r3, [pc, #556]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ede:	4988      	ldr	r1, [pc, #544]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ee4:	e001      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d033      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f00:	d01c      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007f02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f06:	d816      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f0c:	d003      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f12:	d007      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007f14:	e00f      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f16:	4b7a      	ldr	r3, [pc, #488]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	4a79      	ldr	r2, [pc, #484]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f22:	e00c      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fc5a 	bl	80087e4 <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f34:	e003      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3a:	e000      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f44:	4b6e      	ldr	r3, [pc, #440]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f52:	496b      	ldr	r1, [pc, #428]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	654b      	str	r3, [r1, #84]	; 0x54
 8007f58:	e001      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d029      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f76:	d007      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007f78:	e00f      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f7a:	4b61      	ldr	r3, [pc, #388]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	4a60      	ldr	r2, [pc, #384]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f86:	e00b      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fb76 	bl	8008680 <RCCEx_PLL2_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f98:	e002      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fa6:	4b56      	ldr	r3, [pc, #344]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb2:	4953      	ldr	r1, [pc, #332]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fb8:	e001      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3324      	adds	r3, #36	; 0x24
 8007fce:	2102      	movs	r1, #2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fc07 	bl	80087e4 <RCCEx_PLL3_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d030      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ff4:	d017      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ffa:	d811      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008000:	d013      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008006:	d80b      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800800c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008010:	d106      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008012:	4b3b      	ldr	r3, [pc, #236]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	4a3a      	ldr	r2, [pc, #232]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800801e:	e007      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]
      break;
 8008024:	e004      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008026:	bf00      	nop
 8008028:	e002      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800802a:	bf00      	nop
 800802c:	e000      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800802e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008036:	4b32      	ldr	r3, [pc, #200]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008042:	492f      	ldr	r1, [pc, #188]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	654b      	str	r3, [r1, #84]	; 0x54
 8008048:	e001      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d008      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800805a:	4b29      	ldr	r3, [pc, #164]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800805c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	4926      	ldr	r1, [pc, #152]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008068:	4313      	orrs	r3, r2
 800806a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008078:	4b21      	ldr	r3, [pc, #132]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008086:	491e      	ldr	r1, [pc, #120]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008088:	4313      	orrs	r3, r2
 800808a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008098:	4b19      	ldr	r3, [pc, #100]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080a4:	4916      	ldr	r1, [pc, #88]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080b6:	4b12      	ldr	r3, [pc, #72]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	4a11      	ldr	r2, [pc, #68]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080c0:	6113      	str	r3, [r2, #16]
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80080cc:	490c      	ldr	r1, [pc, #48]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da08      	bge.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e6:	4906      	ldr	r1, [pc, #24]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80080ec:	7dbb      	ldrb	r3, [r7, #22]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	58024400 	.word	0x58024400

08008104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008108:	f7ff f82e 	bl	8007168 <HAL_RCC_GetHCLKFreq>
 800810c:	4602      	mov	r2, r0
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	091b      	lsrs	r3, r3, #4
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	4904      	ldr	r1, [pc, #16]	; (800812c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800811a:	5ccb      	ldrb	r3, [r1, r3]
 800811c:	f003 031f 	and.w	r3, r3, #31
 8008120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008124:	4618      	mov	r0, r3
 8008126:	bd80      	pop	{r7, pc}
 8008128:	58024400 	.word	0x58024400
 800812c:	08027484 	.word	0x08027484

08008130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008130:	b480      	push	{r7}
 8008132:	b089      	sub	sp, #36	; 0x24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008138:	4ba1      	ldr	r3, [pc, #644]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008142:	4b9f      	ldr	r3, [pc, #636]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	0b1b      	lsrs	r3, r3, #12
 8008148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800814c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800814e:	4b9c      	ldr	r3, [pc, #624]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	091b      	lsrs	r3, r3, #4
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800815a:	4b99      	ldr	r3, [pc, #612]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	08db      	lsrs	r3, r3, #3
 8008160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	fb02 f303 	mul.w	r3, r2, r3
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8111 	beq.w	80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b02      	cmp	r3, #2
 8008182:	f000 8083 	beq.w	800828c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b02      	cmp	r3, #2
 800818a:	f200 80a1 	bhi.w	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d056      	beq.n	8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800819a:	e099      	b.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800819c:	4b88      	ldr	r3, [pc, #544]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d02d      	beq.n	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081a8:	4b85      	ldr	r3, [pc, #532]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	08db      	lsrs	r3, r3, #3
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	4a84      	ldr	r2, [pc, #528]	; (80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
 80081b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	ee07 3a90 	vmov	s15, r3
 80081c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b7b      	ldr	r3, [pc, #492]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008202:	e087      	b.n	8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008216:	4b6a      	ldr	r3, [pc, #424]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a03 	vldr	s12, [r7, #12]
 800822a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008246:	e065      	b.n	8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b59      	ldr	r3, [pc, #356]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	ed97 6a03 	vldr	s12, [r7, #12]
 800826e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800828a:	e043      	b.n	8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800829a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829e:	4b48      	ldr	r3, [pc, #288]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ce:	e021      	b.n	8008314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e2:	4b37      	ldr	r3, [pc, #220]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008312:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008314:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	0a5b      	lsrs	r3, r3, #9
 800831a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800832a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800832e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833a:	ee17 2a90 	vmov	r2, s15
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008342:	4b1f      	ldr	r3, [pc, #124]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	0c1b      	lsrs	r3, r3, #16
 8008348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800835c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008368:	ee17 2a90 	vmov	r2, s15
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008370:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	0e1b      	lsrs	r3, r3, #24
 8008376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800838a:	edd7 6a07 	vldr	s13, [r7, #28]
 800838e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008396:	ee17 2a90 	vmov	r2, s15
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800839e:	e008      	b.n	80083b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
}
 80083b2:	bf00      	nop
 80083b4:	3724      	adds	r7, #36	; 0x24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	58024400 	.word	0x58024400
 80083c4:	03d09000 	.word	0x03d09000
 80083c8:	46000000 	.word	0x46000000
 80083cc:	4c742400 	.word	0x4c742400
 80083d0:	4a742400 	.word	0x4a742400
 80083d4:	4bbebc20 	.word	0x4bbebc20

080083d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80083d8:	b480      	push	{r7}
 80083da:	b089      	sub	sp, #36	; 0x24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083e0:	4ba1      	ldr	r3, [pc, #644]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083ea:	4b9f      	ldr	r3, [pc, #636]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	0d1b      	lsrs	r3, r3, #20
 80083f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083f6:	4b9c      	ldr	r3, [pc, #624]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008402:	4b99      	ldr	r3, [pc, #612]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	08db      	lsrs	r3, r3, #3
 8008408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8111 	beq.w	8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b02      	cmp	r3, #2
 800842a:	f000 8083 	beq.w	8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b02      	cmp	r3, #2
 8008432:	f200 80a1 	bhi.w	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d056      	beq.n	80084f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008442:	e099      	b.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008444:	4b88      	ldr	r3, [pc, #544]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d02d      	beq.n	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008450:	4b85      	ldr	r3, [pc, #532]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	08db      	lsrs	r3, r3, #3
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	4a84      	ldr	r2, [pc, #528]	; (800866c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800845c:	fa22 f303 	lsr.w	r3, r2, r3
 8008460:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847a:	4b7b      	ldr	r3, [pc, #492]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848a:	ed97 6a03 	vldr	s12, [r7, #12]
 800848e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084aa:	e087      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80084ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084be:	4b6a      	ldr	r3, [pc, #424]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084ee:	e065      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008502:	4b59      	ldr	r3, [pc, #356]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008512:	ed97 6a03 	vldr	s12, [r7, #12]
 8008516:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800851a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008532:	e043      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800867c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008546:	4b48      	ldr	r3, [pc, #288]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008556:	ed97 6a03 	vldr	s12, [r7, #12]
 800855a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800855e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008576:	e021      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858a:	4b37      	ldr	r3, [pc, #220]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859a:	ed97 6a03 	vldr	s12, [r7, #12]
 800859e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80085bc:	4b2a      	ldr	r3, [pc, #168]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	0a5b      	lsrs	r3, r3, #9
 80085c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e2:	ee17 2a90 	vmov	r2, s15
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80085ea:	4b1f      	ldr	r3, [pc, #124]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008600:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008604:	edd7 6a07 	vldr	s13, [r7, #28]
 8008608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008610:	ee17 2a90 	vmov	r2, s15
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008618:	4b13      	ldr	r3, [pc, #76]	; (8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	0e1b      	lsrs	r3, r3, #24
 800861e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800862e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008632:	edd7 6a07 	vldr	s13, [r7, #28]
 8008636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800863a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800863e:	ee17 2a90 	vmov	r2, s15
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008646:	e008      	b.n	800865a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	609a      	str	r2, [r3, #8]
}
 800865a:	bf00      	nop
 800865c:	3724      	adds	r7, #36	; 0x24
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	58024400 	.word	0x58024400
 800866c:	03d09000 	.word	0x03d09000
 8008670:	46000000 	.word	0x46000000
 8008674:	4c742400 	.word	0x4c742400
 8008678:	4a742400 	.word	0x4a742400
 800867c:	4bbebc20 	.word	0x4bbebc20

08008680 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800868e:	4b53      	ldr	r3, [pc, #332]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	2b03      	cmp	r3, #3
 8008698:	d101      	bne.n	800869e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e099      	b.n	80087d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800869e:	4b4f      	ldr	r3, [pc, #316]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a4e      	ldr	r2, [pc, #312]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80086a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086aa:	f7f9 fc77 	bl	8001f9c <HAL_GetTick>
 80086ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086b0:	e008      	b.n	80086c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80086b2:	f7f9 fc73 	bl	8001f9c <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d901      	bls.n	80086c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e086      	b.n	80087d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086c4:	4b45      	ldr	r3, [pc, #276]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f0      	bne.n	80086b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086d0:	4b42      	ldr	r3, [pc, #264]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	031b      	lsls	r3, r3, #12
 80086de:	493f      	ldr	r1, [pc, #252]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	628b      	str	r3, [r1, #40]	; 0x28
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	025b      	lsls	r3, r3, #9
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	3b01      	subs	r3, #1
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	3b01      	subs	r3, #1
 800870e:	061b      	lsls	r3, r3, #24
 8008710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008714:	4931      	ldr	r1, [pc, #196]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008716:	4313      	orrs	r3, r2
 8008718:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800871a:	4b30      	ldr	r3, [pc, #192]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	492d      	ldr	r1, [pc, #180]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008728:	4313      	orrs	r3, r2
 800872a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800872c:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	f023 0220 	bic.w	r2, r3, #32
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	4928      	ldr	r1, [pc, #160]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 800873a:	4313      	orrs	r3, r2
 800873c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800873e:	4b27      	ldr	r3, [pc, #156]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	4a26      	ldr	r2, [pc, #152]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008744:	f023 0310 	bic.w	r3, r3, #16
 8008748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800874a:	4b24      	ldr	r3, [pc, #144]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 800874c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800874e:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <RCCEx_PLL2_Config+0x160>)
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	69d2      	ldr	r2, [r2, #28]
 8008756:	00d2      	lsls	r2, r2, #3
 8008758:	4920      	ldr	r1, [pc, #128]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 800875a:	4313      	orrs	r3, r2
 800875c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800875e:	4b1f      	ldr	r3, [pc, #124]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	4a1e      	ldr	r2, [pc, #120]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008764:	f043 0310 	orr.w	r3, r3, #16
 8008768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	4a19      	ldr	r2, [pc, #100]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800877a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800877c:	e00f      	b.n	800879e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d106      	bne.n	8008792 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008784:	4b15      	ldr	r3, [pc, #84]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	4a14      	ldr	r2, [pc, #80]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 800878a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800878e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008790:	e005      	b.n	800879e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	4a11      	ldr	r2, [pc, #68]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 8008798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800879c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a0e      	ldr	r2, [pc, #56]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80087a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087aa:	f7f9 fbf7 	bl	8001f9c <HAL_GetTick>
 80087ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087b0:	e008      	b.n	80087c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087b2:	f7f9 fbf3 	bl	8001f9c <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d901      	bls.n	80087c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e006      	b.n	80087d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <RCCEx_PLL2_Config+0x15c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0f0      	beq.n	80087b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	58024400 	.word	0x58024400
 80087e0:	ffff0007 	.word	0xffff0007

080087e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087f2:	4b53      	ldr	r3, [pc, #332]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d101      	bne.n	8008802 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e099      	b.n	8008936 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008802:	4b4f      	ldr	r3, [pc, #316]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a4e      	ldr	r2, [pc, #312]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800880c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880e:	f7f9 fbc5 	bl	8001f9c <HAL_GetTick>
 8008812:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008814:	e008      	b.n	8008828 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008816:	f7f9 fbc1 	bl	8001f9c <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e086      	b.n	8008936 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008828:	4b45      	ldr	r3, [pc, #276]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f0      	bne.n	8008816 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008834:	4b42      	ldr	r3, [pc, #264]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	051b      	lsls	r3, r3, #20
 8008842:	493f      	ldr	r1, [pc, #252]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008844:	4313      	orrs	r3, r2
 8008846:	628b      	str	r3, [r1, #40]	; 0x28
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	3b01      	subs	r3, #1
 800884e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	3b01      	subs	r3, #1
 8008858:	025b      	lsls	r3, r3, #9
 800885a:	b29b      	uxth	r3, r3
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	3b01      	subs	r3, #1
 8008864:	041b      	lsls	r3, r3, #16
 8008866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	3b01      	subs	r3, #1
 8008872:	061b      	lsls	r3, r3, #24
 8008874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008878:	4931      	ldr	r1, [pc, #196]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 800887a:	4313      	orrs	r3, r2
 800887c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800887e:	4b30      	ldr	r3, [pc, #192]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	492d      	ldr	r1, [pc, #180]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 800888c:	4313      	orrs	r3, r2
 800888e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008890:	4b2b      	ldr	r3, [pc, #172]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	4928      	ldr	r1, [pc, #160]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088a2:	4b27      	ldr	r3, [pc, #156]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	4a26      	ldr	r2, [pc, #152]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088ae:	4b24      	ldr	r3, [pc, #144]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <RCCEx_PLL3_Config+0x160>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	69d2      	ldr	r2, [r2, #28]
 80088ba:	00d2      	lsls	r2, r2, #3
 80088bc:	4920      	ldr	r1, [pc, #128]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088c2:	4b1f      	ldr	r3, [pc, #124]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088d4:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	4a19      	ldr	r2, [pc, #100]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088e0:	e00f      	b.n	8008902 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d106      	bne.n	80088f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	4a14      	ldr	r2, [pc, #80]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088f4:	e005      	b.n	8008902 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088f6:	4b12      	ldr	r3, [pc, #72]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	4a11      	ldr	r2, [pc, #68]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 80088fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a0e      	ldr	r2, [pc, #56]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 8008908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800890c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800890e:	f7f9 fb45 	bl	8001f9c <HAL_GetTick>
 8008912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008914:	e008      	b.n	8008928 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008916:	f7f9 fb41 	bl	8001f9c <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2b02      	cmp	r3, #2
 8008922:	d901      	bls.n	8008928 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e006      	b.n	8008936 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <RCCEx_PLL3_Config+0x15c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0f0      	beq.n	8008916 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	58024400 	.word	0x58024400
 8008944:	ffff0007 	.word	0xffff0007

08008948 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d067      	beq.n	8008a2a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f8 fbd0 	bl	8001114 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	22ca      	movs	r2, #202	; 0xca
 8008982:	625a      	str	r2, [r3, #36]	; 0x24
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2253      	movs	r2, #83	; 0x53
 800898a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f879 	bl	8008a84 <RTC_EnterInitMode>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d13b      	bne.n	8008a14 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6899      	ldr	r1, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b23      	ldr	r3, [pc, #140]	; (8008a34 <HAL_RTC_Init+0xec>)
 80089a8:	400b      	ands	r3, r1
 80089aa:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6899      	ldr	r1, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	0419      	lsls	r1, r3, #16
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f881 	bl	8008ae4 <RTC_ExitInitMode>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d113      	bne.n	8008a14 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0203 	bic.w	r2, r2, #3
 80089fa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69da      	ldr	r2, [r3, #28]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	22ff      	movs	r2, #255	; 0xff
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	ff8fffbf 	.word	0xff8fffbf

08008a38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a4e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008a50:	f7f9 faa4 	bl	8001f9c <HAL_GetTick>
 8008a54:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a56:	e009      	b.n	8008a6c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a58:	f7f9 faa0 	bl	8001f9c <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a66:	d901      	bls.n	8008a6c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e007      	b.n	8008a7c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0ee      	beq.n	8008a58 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d11d      	bne.n	8008ada <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aa6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008aa8:	f7f9 fa78 	bl	8001f9c <HAL_GetTick>
 8008aac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008aae:	e00d      	b.n	8008acc <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ab0:	f7f9 fa74 	bl	8001f9c <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008abe:	d905      	bls.n	8008acc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0ea      	beq.n	8008ab0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008af0:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4a19      	ldr	r2, [pc, #100]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afa:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008afc:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10c      	bne.n	8008b22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ff95 	bl	8008a38 <HAL_RTC_WaitForSynchro>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01e      	beq.n	8008b52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2203      	movs	r2, #3
 8008b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	e017      	b.n	8008b52 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b22:	4b0e      	ldr	r3, [pc, #56]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008b28:	f023 0320 	bic.w	r3, r3, #32
 8008b2c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff ff82 	bl	8008a38 <HAL_RTC_WaitForSynchro>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	4a04      	ldr	r2, [pc, #16]	; (8008b5c <RTC_ExitInitMode+0x78>)
 8008b4c:	f043 0320 	orr.w	r3, r3, #32
 8008b50:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	58004000 	.word	0x58004000

08008b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e049      	b.n	8008c06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f841 	bl	8008c0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	f000 f9be 	bl	8008f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e021      	b.n	8008c80 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <HAL_TIM_Base_Start_IT+0x68>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b06      	cmp	r3, #6
 8008c64:	d00b      	beq.n	8008c7e <HAL_TIM_Base_Start_IT+0x5a>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6c:	d007      	beq.n	8008c7e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f042 0201 	orr.w	r2, r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	00010007 	.word	0x00010007

08008c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d122      	bne.n	8008cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d11b      	bne.n	8008cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0202 	mvn.w	r2, #2
 8008cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f905 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008cd8:	e005      	b.n	8008ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f8f7 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f908 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d122      	bne.n	8008d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d11b      	bne.n	8008d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0204 	mvn.w	r2, #4
 8008d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8db 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008d2c:	e005      	b.n	8008d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8cd 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8de 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0308 	and.w	r3, r3, #8
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d122      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d11b      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0208 	mvn.w	r2, #8
 8008d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8b1 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008d80:	e005      	b.n	8008d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f8a3 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8b4 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d122      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b10      	cmp	r3, #16
 8008dae:	d11b      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f06f 0210 	mvn.w	r2, #16
 8008db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2208      	movs	r2, #8
 8008dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f887 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008dd4:	e005      	b.n	8008de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f879 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f88a 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d10e      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d107      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f06f 0201 	mvn.w	r2, #1
 8008e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f8 f940 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1e:	2b80      	cmp	r3, #128	; 0x80
 8008e20:	d10e      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2c:	2b80      	cmp	r3, #128	; 0x80
 8008e2e:	d107      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f914 	bl	8009068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4e:	d10e      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5a:	2b80      	cmp	r3, #128	; 0x80
 8008e5c:	d107      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f907 	bl	800907c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e78:	2b40      	cmp	r3, #64	; 0x40
 8008e7a:	d10e      	bne.n	8008e9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b40      	cmp	r3, #64	; 0x40
 8008e88:	d107      	bne.n	8008e9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f838 	bl	8008f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d10e      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d107      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f06f 0220 	mvn.w	r2, #32
 8008ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f8c7 	bl	8009054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a40      	ldr	r2, [pc, #256]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d013      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3e:	d00f      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a3d      	ldr	r2, [pc, #244]	; (8009038 <TIM_Base_SetConfig+0x118>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00b      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a3c      	ldr	r2, [pc, #240]	; (800903c <TIM_Base_SetConfig+0x11c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d007      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a3b      	ldr	r2, [pc, #236]	; (8009040 <TIM_Base_SetConfig+0x120>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a3a      	ldr	r2, [pc, #232]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d108      	bne.n	8008f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2f      	ldr	r2, [pc, #188]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d01f      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d01b      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a2c      	ldr	r2, [pc, #176]	; (8009038 <TIM_Base_SetConfig+0x118>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d017      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a2b      	ldr	r2, [pc, #172]	; (800903c <TIM_Base_SetConfig+0x11c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d013      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <TIM_Base_SetConfig+0x120>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00f      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a29      	ldr	r2, [pc, #164]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00b      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a28      	ldr	r2, [pc, #160]	; (8009048 <TIM_Base_SetConfig+0x128>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d007      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a27      	ldr	r2, [pc, #156]	; (800904c <TIM_Base_SetConfig+0x12c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d003      	beq.n	8008fba <TIM_Base_SetConfig+0x9a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a26      	ldr	r2, [pc, #152]	; (8009050 <TIM_Base_SetConfig+0x130>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d108      	bne.n	8008fcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00f      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a12      	ldr	r2, [pc, #72]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00b      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a11      	ldr	r2, [pc, #68]	; (8009048 <TIM_Base_SetConfig+0x128>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a10      	ldr	r2, [pc, #64]	; (800904c <TIM_Base_SetConfig+0x12c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a0f      	ldr	r2, [pc, #60]	; (8009050 <TIM_Base_SetConfig+0x130>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d103      	bne.n	8009020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	615a      	str	r2, [r3, #20]
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010000 	.word	0x40010000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40010400 	.word	0x40010400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800

08009054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e042      	b.n	8009128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d106      	bne.n	80090ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7f8 fb31 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2224      	movs	r2, #36	; 0x24
 80090be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0201 	bic.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f8c2 	bl	800925c <UART_SetConfig>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e022      	b.n	8009128 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fe1c 	bl	8009d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800910e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fea3 	bl	8009e6c <UART_CheckIdleState>
 8009126:	4603      	mov	r3, r0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08a      	sub	sp, #40	; 0x28
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009146:	2b20      	cmp	r3, #32
 8009148:	f040 8083 	bne.w	8009252 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_UART_Transmit+0x28>
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e07b      	b.n	8009254 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_UART_Transmit+0x3a>
 8009166:	2302      	movs	r3, #2
 8009168:	e074      	b.n	8009254 <HAL_UART_Transmit+0x124>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2221      	movs	r2, #33	; 0x21
 800917e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009182:	f7f8 ff0b 	bl	8001f9c <HAL_GetTick>
 8009186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	88fa      	ldrh	r2, [r7, #6]
 8009194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a0:	d108      	bne.n	80091b4 <HAL_UART_Transmit+0x84>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	e003      	b.n	80091bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80091c4:	e02c      	b.n	8009220 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	2180      	movs	r1, #128	; 0x80
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fe93 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e039      	b.n	8009254 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	3302      	adds	r3, #2
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	e007      	b.n	800920e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	3301      	adds	r3, #1
 800920c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009214:	b29b      	uxth	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	b29a      	uxth	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009226:	b29b      	uxth	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1cc      	bne.n	80091c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	2140      	movs	r1, #64	; 0x40
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 fe60 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e006      	b.n	8009254 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	e000      	b.n	8009254 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009252:	2302      	movs	r3, #2
  }
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	b08e      	sub	sp, #56	; 0x38
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	431a      	orrs	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	4313      	orrs	r3, r2
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009288:	4313      	orrs	r3, r2
 800928a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4bc0      	ldr	r3, [pc, #768]	; (8009594 <UART_SetConfig+0x338>)
 8009294:	4013      	ands	r3, r2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6812      	ldr	r2, [r2, #0]
 800929a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800929c:	430b      	orrs	r3, r1
 800929e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4ab5      	ldr	r2, [pc, #724]	; (8009598 <UART_SetConfig+0x33c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d004      	beq.n	80092d0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092cc:	4313      	orrs	r3, r2
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	4bb1      	ldr	r3, [pc, #708]	; (800959c <UART_SetConfig+0x340>)
 80092d8:	4013      	ands	r3, r2
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092e0:	430b      	orrs	r3, r1
 80092e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ea:	f023 010f 	bic.w	r1, r3, #15
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4aa8      	ldr	r2, [pc, #672]	; (80095a0 <UART_SetConfig+0x344>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d177      	bne.n	80093f4 <UART_SetConfig+0x198>
 8009304:	4ba7      	ldr	r3, [pc, #668]	; (80095a4 <UART_SetConfig+0x348>)
 8009306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800930c:	2b28      	cmp	r3, #40	; 0x28
 800930e:	d86d      	bhi.n	80093ec <UART_SetConfig+0x190>
 8009310:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <UART_SetConfig+0xbc>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	080093bd 	.word	0x080093bd
 800931c:	080093ed 	.word	0x080093ed
 8009320:	080093ed 	.word	0x080093ed
 8009324:	080093ed 	.word	0x080093ed
 8009328:	080093ed 	.word	0x080093ed
 800932c:	080093ed 	.word	0x080093ed
 8009330:	080093ed 	.word	0x080093ed
 8009334:	080093ed 	.word	0x080093ed
 8009338:	080093c5 	.word	0x080093c5
 800933c:	080093ed 	.word	0x080093ed
 8009340:	080093ed 	.word	0x080093ed
 8009344:	080093ed 	.word	0x080093ed
 8009348:	080093ed 	.word	0x080093ed
 800934c:	080093ed 	.word	0x080093ed
 8009350:	080093ed 	.word	0x080093ed
 8009354:	080093ed 	.word	0x080093ed
 8009358:	080093cd 	.word	0x080093cd
 800935c:	080093ed 	.word	0x080093ed
 8009360:	080093ed 	.word	0x080093ed
 8009364:	080093ed 	.word	0x080093ed
 8009368:	080093ed 	.word	0x080093ed
 800936c:	080093ed 	.word	0x080093ed
 8009370:	080093ed 	.word	0x080093ed
 8009374:	080093ed 	.word	0x080093ed
 8009378:	080093d5 	.word	0x080093d5
 800937c:	080093ed 	.word	0x080093ed
 8009380:	080093ed 	.word	0x080093ed
 8009384:	080093ed 	.word	0x080093ed
 8009388:	080093ed 	.word	0x080093ed
 800938c:	080093ed 	.word	0x080093ed
 8009390:	080093ed 	.word	0x080093ed
 8009394:	080093ed 	.word	0x080093ed
 8009398:	080093dd 	.word	0x080093dd
 800939c:	080093ed 	.word	0x080093ed
 80093a0:	080093ed 	.word	0x080093ed
 80093a4:	080093ed 	.word	0x080093ed
 80093a8:	080093ed 	.word	0x080093ed
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093ed 	.word	0x080093ed
 80093b4:	080093ed 	.word	0x080093ed
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c2:	e222      	b.n	800980a <UART_SetConfig+0x5ae>
 80093c4:	2304      	movs	r3, #4
 80093c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ca:	e21e      	b.n	800980a <UART_SetConfig+0x5ae>
 80093cc:	2308      	movs	r3, #8
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e21a      	b.n	800980a <UART_SetConfig+0x5ae>
 80093d4:	2310      	movs	r3, #16
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e216      	b.n	800980a <UART_SetConfig+0x5ae>
 80093dc:	2320      	movs	r3, #32
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e212      	b.n	800980a <UART_SetConfig+0x5ae>
 80093e4:	2340      	movs	r3, #64	; 0x40
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e20e      	b.n	800980a <UART_SetConfig+0x5ae>
 80093ec:	2380      	movs	r3, #128	; 0x80
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e20a      	b.n	800980a <UART_SetConfig+0x5ae>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a6b      	ldr	r2, [pc, #428]	; (80095a8 <UART_SetConfig+0x34c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d130      	bne.n	8009460 <UART_SetConfig+0x204>
 80093fe:	4b69      	ldr	r3, [pc, #420]	; (80095a4 <UART_SetConfig+0x348>)
 8009400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	2b05      	cmp	r3, #5
 8009408:	d826      	bhi.n	8009458 <UART_SetConfig+0x1fc>
 800940a:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <UART_SetConfig+0x1b4>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009429 	.word	0x08009429
 8009414:	08009431 	.word	0x08009431
 8009418:	08009439 	.word	0x08009439
 800941c:	08009441 	.word	0x08009441
 8009420:	08009449 	.word	0x08009449
 8009424:	08009451 	.word	0x08009451
 8009428:	2300      	movs	r3, #0
 800942a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942e:	e1ec      	b.n	800980a <UART_SetConfig+0x5ae>
 8009430:	2304      	movs	r3, #4
 8009432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009436:	e1e8      	b.n	800980a <UART_SetConfig+0x5ae>
 8009438:	2308      	movs	r3, #8
 800943a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943e:	e1e4      	b.n	800980a <UART_SetConfig+0x5ae>
 8009440:	2310      	movs	r3, #16
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e1e0      	b.n	800980a <UART_SetConfig+0x5ae>
 8009448:	2320      	movs	r3, #32
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e1dc      	b.n	800980a <UART_SetConfig+0x5ae>
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e1d8      	b.n	800980a <UART_SetConfig+0x5ae>
 8009458:	2380      	movs	r3, #128	; 0x80
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e1d4      	b.n	800980a <UART_SetConfig+0x5ae>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a51      	ldr	r2, [pc, #324]	; (80095ac <UART_SetConfig+0x350>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d130      	bne.n	80094cc <UART_SetConfig+0x270>
 800946a:	4b4e      	ldr	r3, [pc, #312]	; (80095a4 <UART_SetConfig+0x348>)
 800946c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	2b05      	cmp	r3, #5
 8009474:	d826      	bhi.n	80094c4 <UART_SetConfig+0x268>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0x220>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	08009495 	.word	0x08009495
 8009480:	0800949d 	.word	0x0800949d
 8009484:	080094a5 	.word	0x080094a5
 8009488:	080094ad 	.word	0x080094ad
 800948c:	080094b5 	.word	0x080094b5
 8009490:	080094bd 	.word	0x080094bd
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800949a:	e1b6      	b.n	800980a <UART_SetConfig+0x5ae>
 800949c:	2304      	movs	r3, #4
 800949e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094a2:	e1b2      	b.n	800980a <UART_SetConfig+0x5ae>
 80094a4:	2308      	movs	r3, #8
 80094a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094aa:	e1ae      	b.n	800980a <UART_SetConfig+0x5ae>
 80094ac:	2310      	movs	r3, #16
 80094ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b2:	e1aa      	b.n	800980a <UART_SetConfig+0x5ae>
 80094b4:	2320      	movs	r3, #32
 80094b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ba:	e1a6      	b.n	800980a <UART_SetConfig+0x5ae>
 80094bc:	2340      	movs	r3, #64	; 0x40
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e1a2      	b.n	800980a <UART_SetConfig+0x5ae>
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e19e      	b.n	800980a <UART_SetConfig+0x5ae>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a37      	ldr	r2, [pc, #220]	; (80095b0 <UART_SetConfig+0x354>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d130      	bne.n	8009538 <UART_SetConfig+0x2dc>
 80094d6:	4b33      	ldr	r3, [pc, #204]	; (80095a4 <UART_SetConfig+0x348>)
 80094d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d826      	bhi.n	8009530 <UART_SetConfig+0x2d4>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <UART_SetConfig+0x28c>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	08009501 	.word	0x08009501
 80094ec:	08009509 	.word	0x08009509
 80094f0:	08009511 	.word	0x08009511
 80094f4:	08009519 	.word	0x08009519
 80094f8:	08009521 	.word	0x08009521
 80094fc:	08009529 	.word	0x08009529
 8009500:	2300      	movs	r3, #0
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009506:	e180      	b.n	800980a <UART_SetConfig+0x5ae>
 8009508:	2304      	movs	r3, #4
 800950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950e:	e17c      	b.n	800980a <UART_SetConfig+0x5ae>
 8009510:	2308      	movs	r3, #8
 8009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009516:	e178      	b.n	800980a <UART_SetConfig+0x5ae>
 8009518:	2310      	movs	r3, #16
 800951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951e:	e174      	b.n	800980a <UART_SetConfig+0x5ae>
 8009520:	2320      	movs	r3, #32
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009526:	e170      	b.n	800980a <UART_SetConfig+0x5ae>
 8009528:	2340      	movs	r3, #64	; 0x40
 800952a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952e:	e16c      	b.n	800980a <UART_SetConfig+0x5ae>
 8009530:	2380      	movs	r3, #128	; 0x80
 8009532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009536:	e168      	b.n	800980a <UART_SetConfig+0x5ae>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1d      	ldr	r2, [pc, #116]	; (80095b4 <UART_SetConfig+0x358>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d142      	bne.n	80095c8 <UART_SetConfig+0x36c>
 8009542:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <UART_SetConfig+0x348>)
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b05      	cmp	r3, #5
 800954c:	d838      	bhi.n	80095c0 <UART_SetConfig+0x364>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <UART_SetConfig+0x2f8>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	0800956d 	.word	0x0800956d
 8009558:	08009575 	.word	0x08009575
 800955c:	0800957d 	.word	0x0800957d
 8009560:	08009585 	.word	0x08009585
 8009564:	0800958d 	.word	0x0800958d
 8009568:	080095b9 	.word	0x080095b9
 800956c:	2300      	movs	r3, #0
 800956e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009572:	e14a      	b.n	800980a <UART_SetConfig+0x5ae>
 8009574:	2304      	movs	r3, #4
 8009576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800957a:	e146      	b.n	800980a <UART_SetConfig+0x5ae>
 800957c:	2308      	movs	r3, #8
 800957e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009582:	e142      	b.n	800980a <UART_SetConfig+0x5ae>
 8009584:	2310      	movs	r3, #16
 8009586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800958a:	e13e      	b.n	800980a <UART_SetConfig+0x5ae>
 800958c:	2320      	movs	r3, #32
 800958e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009592:	e13a      	b.n	800980a <UART_SetConfig+0x5ae>
 8009594:	cfff69f3 	.word	0xcfff69f3
 8009598:	58000c00 	.word	0x58000c00
 800959c:	11fff4ff 	.word	0x11fff4ff
 80095a0:	40011000 	.word	0x40011000
 80095a4:	58024400 	.word	0x58024400
 80095a8:	40004400 	.word	0x40004400
 80095ac:	40004800 	.word	0x40004800
 80095b0:	40004c00 	.word	0x40004c00
 80095b4:	40005000 	.word	0x40005000
 80095b8:	2340      	movs	r3, #64	; 0x40
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e124      	b.n	800980a <UART_SetConfig+0x5ae>
 80095c0:	2380      	movs	r3, #128	; 0x80
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e120      	b.n	800980a <UART_SetConfig+0x5ae>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4acc      	ldr	r2, [pc, #816]	; (8009900 <UART_SetConfig+0x6a4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d176      	bne.n	80096c0 <UART_SetConfig+0x464>
 80095d2:	4bcc      	ldr	r3, [pc, #816]	; (8009904 <UART_SetConfig+0x6a8>)
 80095d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095da:	2b28      	cmp	r3, #40	; 0x28
 80095dc:	d86c      	bhi.n	80096b8 <UART_SetConfig+0x45c>
 80095de:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <UART_SetConfig+0x388>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	08009689 	.word	0x08009689
 80095e8:	080096b9 	.word	0x080096b9
 80095ec:	080096b9 	.word	0x080096b9
 80095f0:	080096b9 	.word	0x080096b9
 80095f4:	080096b9 	.word	0x080096b9
 80095f8:	080096b9 	.word	0x080096b9
 80095fc:	080096b9 	.word	0x080096b9
 8009600:	080096b9 	.word	0x080096b9
 8009604:	08009691 	.word	0x08009691
 8009608:	080096b9 	.word	0x080096b9
 800960c:	080096b9 	.word	0x080096b9
 8009610:	080096b9 	.word	0x080096b9
 8009614:	080096b9 	.word	0x080096b9
 8009618:	080096b9 	.word	0x080096b9
 800961c:	080096b9 	.word	0x080096b9
 8009620:	080096b9 	.word	0x080096b9
 8009624:	08009699 	.word	0x08009699
 8009628:	080096b9 	.word	0x080096b9
 800962c:	080096b9 	.word	0x080096b9
 8009630:	080096b9 	.word	0x080096b9
 8009634:	080096b9 	.word	0x080096b9
 8009638:	080096b9 	.word	0x080096b9
 800963c:	080096b9 	.word	0x080096b9
 8009640:	080096b9 	.word	0x080096b9
 8009644:	080096a1 	.word	0x080096a1
 8009648:	080096b9 	.word	0x080096b9
 800964c:	080096b9 	.word	0x080096b9
 8009650:	080096b9 	.word	0x080096b9
 8009654:	080096b9 	.word	0x080096b9
 8009658:	080096b9 	.word	0x080096b9
 800965c:	080096b9 	.word	0x080096b9
 8009660:	080096b9 	.word	0x080096b9
 8009664:	080096a9 	.word	0x080096a9
 8009668:	080096b9 	.word	0x080096b9
 800966c:	080096b9 	.word	0x080096b9
 8009670:	080096b9 	.word	0x080096b9
 8009674:	080096b9 	.word	0x080096b9
 8009678:	080096b9 	.word	0x080096b9
 800967c:	080096b9 	.word	0x080096b9
 8009680:	080096b9 	.word	0x080096b9
 8009684:	080096b1 	.word	0x080096b1
 8009688:	2301      	movs	r3, #1
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e0bc      	b.n	800980a <UART_SetConfig+0x5ae>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e0b8      	b.n	800980a <UART_SetConfig+0x5ae>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e0b4      	b.n	800980a <UART_SetConfig+0x5ae>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e0b0      	b.n	800980a <UART_SetConfig+0x5ae>
 80096a8:	2320      	movs	r3, #32
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e0ac      	b.n	800980a <UART_SetConfig+0x5ae>
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e0a8      	b.n	800980a <UART_SetConfig+0x5ae>
 80096b8:	2380      	movs	r3, #128	; 0x80
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e0a4      	b.n	800980a <UART_SetConfig+0x5ae>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a90      	ldr	r2, [pc, #576]	; (8009908 <UART_SetConfig+0x6ac>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d130      	bne.n	800972c <UART_SetConfig+0x4d0>
 80096ca:	4b8e      	ldr	r3, [pc, #568]	; (8009904 <UART_SetConfig+0x6a8>)
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	2b05      	cmp	r3, #5
 80096d4:	d826      	bhi.n	8009724 <UART_SetConfig+0x4c8>
 80096d6:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <UART_SetConfig+0x480>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	080096f5 	.word	0x080096f5
 80096e0:	080096fd 	.word	0x080096fd
 80096e4:	08009705 	.word	0x08009705
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	08009715 	.word	0x08009715
 80096f0:	0800971d 	.word	0x0800971d
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e086      	b.n	800980a <UART_SetConfig+0x5ae>
 80096fc:	2304      	movs	r3, #4
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e082      	b.n	800980a <UART_SetConfig+0x5ae>
 8009704:	2308      	movs	r3, #8
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	e07e      	b.n	800980a <UART_SetConfig+0x5ae>
 800970c:	2310      	movs	r3, #16
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009712:	e07a      	b.n	800980a <UART_SetConfig+0x5ae>
 8009714:	2320      	movs	r3, #32
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e076      	b.n	800980a <UART_SetConfig+0x5ae>
 800971c:	2340      	movs	r3, #64	; 0x40
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e072      	b.n	800980a <UART_SetConfig+0x5ae>
 8009724:	2380      	movs	r3, #128	; 0x80
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e06e      	b.n	800980a <UART_SetConfig+0x5ae>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a76      	ldr	r2, [pc, #472]	; (800990c <UART_SetConfig+0x6b0>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d130      	bne.n	8009798 <UART_SetConfig+0x53c>
 8009736:	4b73      	ldr	r3, [pc, #460]	; (8009904 <UART_SetConfig+0x6a8>)
 8009738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	2b05      	cmp	r3, #5
 8009740:	d826      	bhi.n	8009790 <UART_SetConfig+0x534>
 8009742:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <UART_SetConfig+0x4ec>)
 8009744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009748:	08009761 	.word	0x08009761
 800974c:	08009769 	.word	0x08009769
 8009750:	08009771 	.word	0x08009771
 8009754:	08009779 	.word	0x08009779
 8009758:	08009781 	.word	0x08009781
 800975c:	08009789 	.word	0x08009789
 8009760:	2300      	movs	r3, #0
 8009762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009766:	e050      	b.n	800980a <UART_SetConfig+0x5ae>
 8009768:	2304      	movs	r3, #4
 800976a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976e:	e04c      	b.n	800980a <UART_SetConfig+0x5ae>
 8009770:	2308      	movs	r3, #8
 8009772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009776:	e048      	b.n	800980a <UART_SetConfig+0x5ae>
 8009778:	2310      	movs	r3, #16
 800977a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977e:	e044      	b.n	800980a <UART_SetConfig+0x5ae>
 8009780:	2320      	movs	r3, #32
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e040      	b.n	800980a <UART_SetConfig+0x5ae>
 8009788:	2340      	movs	r3, #64	; 0x40
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e03c      	b.n	800980a <UART_SetConfig+0x5ae>
 8009790:	2380      	movs	r3, #128	; 0x80
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e038      	b.n	800980a <UART_SetConfig+0x5ae>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a5c      	ldr	r2, [pc, #368]	; (8009910 <UART_SetConfig+0x6b4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d130      	bne.n	8009804 <UART_SetConfig+0x5a8>
 80097a2:	4b58      	ldr	r3, [pc, #352]	; (8009904 <UART_SetConfig+0x6a8>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	2b05      	cmp	r3, #5
 80097ac:	d826      	bhi.n	80097fc <UART_SetConfig+0x5a0>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <UART_SetConfig+0x558>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097cd 	.word	0x080097cd
 80097b8:	080097d5 	.word	0x080097d5
 80097bc:	080097dd 	.word	0x080097dd
 80097c0:	080097e5 	.word	0x080097e5
 80097c4:	080097ed 	.word	0x080097ed
 80097c8:	080097f5 	.word	0x080097f5
 80097cc:	2302      	movs	r3, #2
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e01a      	b.n	800980a <UART_SetConfig+0x5ae>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e016      	b.n	800980a <UART_SetConfig+0x5ae>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e2:	e012      	b.n	800980a <UART_SetConfig+0x5ae>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	e00e      	b.n	800980a <UART_SetConfig+0x5ae>
 80097ec:	2320      	movs	r3, #32
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e00a      	b.n	800980a <UART_SetConfig+0x5ae>
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e006      	b.n	800980a <UART_SetConfig+0x5ae>
 80097fc:	2380      	movs	r3, #128	; 0x80
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e002      	b.n	800980a <UART_SetConfig+0x5ae>
 8009804:	2380      	movs	r3, #128	; 0x80
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a40      	ldr	r2, [pc, #256]	; (8009910 <UART_SetConfig+0x6b4>)
 8009810:	4293      	cmp	r3, r2
 8009812:	f040 80ef 	bne.w	80099f4 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800981a:	2b20      	cmp	r3, #32
 800981c:	dc46      	bgt.n	80098ac <UART_SetConfig+0x650>
 800981e:	2b02      	cmp	r3, #2
 8009820:	f2c0 8081 	blt.w	8009926 <UART_SetConfig+0x6ca>
 8009824:	3b02      	subs	r3, #2
 8009826:	2b1e      	cmp	r3, #30
 8009828:	d87d      	bhi.n	8009926 <UART_SetConfig+0x6ca>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <UART_SetConfig+0x5d4>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	080098b3 	.word	0x080098b3
 8009834:	08009927 	.word	0x08009927
 8009838:	080098bb 	.word	0x080098bb
 800983c:	08009927 	.word	0x08009927
 8009840:	08009927 	.word	0x08009927
 8009844:	08009927 	.word	0x08009927
 8009848:	080098cb 	.word	0x080098cb
 800984c:	08009927 	.word	0x08009927
 8009850:	08009927 	.word	0x08009927
 8009854:	08009927 	.word	0x08009927
 8009858:	08009927 	.word	0x08009927
 800985c:	08009927 	.word	0x08009927
 8009860:	08009927 	.word	0x08009927
 8009864:	08009927 	.word	0x08009927
 8009868:	080098db 	.word	0x080098db
 800986c:	08009927 	.word	0x08009927
 8009870:	08009927 	.word	0x08009927
 8009874:	08009927 	.word	0x08009927
 8009878:	08009927 	.word	0x08009927
 800987c:	08009927 	.word	0x08009927
 8009880:	08009927 	.word	0x08009927
 8009884:	08009927 	.word	0x08009927
 8009888:	08009927 	.word	0x08009927
 800988c:	08009927 	.word	0x08009927
 8009890:	08009927 	.word	0x08009927
 8009894:	08009927 	.word	0x08009927
 8009898:	08009927 	.word	0x08009927
 800989c:	08009927 	.word	0x08009927
 80098a0:	08009927 	.word	0x08009927
 80098a4:	08009927 	.word	0x08009927
 80098a8:	08009919 	.word	0x08009919
 80098ac:	2b40      	cmp	r3, #64	; 0x40
 80098ae:	d036      	beq.n	800991e <UART_SetConfig+0x6c2>
 80098b0:	e039      	b.n	8009926 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098b2:	f7fe fc27 	bl	8008104 <HAL_RCCEx_GetD3PCLK1Freq>
 80098b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80098b8:	e03b      	b.n	8009932 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ba:	f107 0314 	add.w	r3, r7, #20
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fc36 	bl	8008130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098c8:	e033      	b.n	8009932 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ca:	f107 0308 	add.w	r3, r7, #8
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fd82 	bl	80083d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098d8:	e02b      	b.n	8009932 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098da:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <UART_SetConfig+0x6a8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d009      	beq.n	80098fa <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098e6:	4b07      	ldr	r3, [pc, #28]	; (8009904 <UART_SetConfig+0x6a8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	08db      	lsrs	r3, r3, #3
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	4a08      	ldr	r2, [pc, #32]	; (8009914 <UART_SetConfig+0x6b8>)
 80098f2:	fa22 f303 	lsr.w	r3, r2, r3
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098f8:	e01b      	b.n	8009932 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <UART_SetConfig+0x6b8>)
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098fe:	e018      	b.n	8009932 <UART_SetConfig+0x6d6>
 8009900:	40011400 	.word	0x40011400
 8009904:	58024400 	.word	0x58024400
 8009908:	40007800 	.word	0x40007800
 800990c:	40007c00 	.word	0x40007c00
 8009910:	58000c00 	.word	0x58000c00
 8009914:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009918:	4bc4      	ldr	r3, [pc, #784]	; (8009c2c <UART_SetConfig+0x9d0>)
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800991c:	e009      	b.n	8009932 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800991e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009924:	e005      	b.n	8009932 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 81da 	beq.w	8009cee <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	4abc      	ldr	r2, [pc, #752]	; (8009c30 <UART_SetConfig+0x9d4>)
 8009940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009944:	461a      	mov	r2, r3
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	fbb3 f3f2 	udiv	r3, r3, r2
 800994c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	4413      	add	r3, r2
 8009958:	6a3a      	ldr	r2, [r7, #32]
 800995a:	429a      	cmp	r2, r3
 800995c:	d305      	bcc.n	800996a <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	429a      	cmp	r2, r3
 8009968:	d903      	bls.n	8009972 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009970:	e1bd      	b.n	8009cee <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	4618      	mov	r0, r3
 8009976:	f04f 0100 	mov.w	r1, #0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	4aac      	ldr	r2, [pc, #688]	; (8009c30 <UART_SetConfig+0x9d4>)
 8009980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009984:	b29a      	uxth	r2, r3
 8009986:	f04f 0300 	mov.w	r3, #0
 800998a:	f7f6 fd0b 	bl	80003a4 <__aeabi_uldivmod>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4610      	mov	r0, r2
 8009994:	4619      	mov	r1, r3
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	020b      	lsls	r3, r1, #8
 80099a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099a4:	0202      	lsls	r2, r0, #8
 80099a6:	6879      	ldr	r1, [r7, #4]
 80099a8:	6849      	ldr	r1, [r1, #4]
 80099aa:	0849      	lsrs	r1, r1, #1
 80099ac:	4608      	mov	r0, r1
 80099ae:	f04f 0100 	mov.w	r1, #0
 80099b2:	1814      	adds	r4, r2, r0
 80099b4:	eb43 0501 	adc.w	r5, r3, r1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	461a      	mov	r2, r3
 80099be:	f04f 0300 	mov.w	r3, #0
 80099c2:	4620      	mov	r0, r4
 80099c4:	4629      	mov	r1, r5
 80099c6:	f7f6 fced 	bl	80003a4 <__aeabi_uldivmod>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4613      	mov	r3, r2
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d8:	d308      	bcc.n	80099ec <UART_SetConfig+0x790>
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099e0:	d204      	bcs.n	80099ec <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e8:	60da      	str	r2, [r3, #12]
 80099ea:	e180      	b.n	8009cee <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80099f2:	e17c      	b.n	8009cee <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099fc:	f040 80bf 	bne.w	8009b7e <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8009a00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	dc49      	bgt.n	8009a9c <UART_SetConfig+0x840>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	db7c      	blt.n	8009b06 <UART_SetConfig+0x8aa>
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d87a      	bhi.n	8009b06 <UART_SetConfig+0x8aa>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0x7bc>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009aa3 	.word	0x08009aa3
 8009a1c:	08009aab 	.word	0x08009aab
 8009a20:	08009b07 	.word	0x08009b07
 8009a24:	08009b07 	.word	0x08009b07
 8009a28:	08009ab3 	.word	0x08009ab3
 8009a2c:	08009b07 	.word	0x08009b07
 8009a30:	08009b07 	.word	0x08009b07
 8009a34:	08009b07 	.word	0x08009b07
 8009a38:	08009ac3 	.word	0x08009ac3
 8009a3c:	08009b07 	.word	0x08009b07
 8009a40:	08009b07 	.word	0x08009b07
 8009a44:	08009b07 	.word	0x08009b07
 8009a48:	08009b07 	.word	0x08009b07
 8009a4c:	08009b07 	.word	0x08009b07
 8009a50:	08009b07 	.word	0x08009b07
 8009a54:	08009b07 	.word	0x08009b07
 8009a58:	08009ad3 	.word	0x08009ad3
 8009a5c:	08009b07 	.word	0x08009b07
 8009a60:	08009b07 	.word	0x08009b07
 8009a64:	08009b07 	.word	0x08009b07
 8009a68:	08009b07 	.word	0x08009b07
 8009a6c:	08009b07 	.word	0x08009b07
 8009a70:	08009b07 	.word	0x08009b07
 8009a74:	08009b07 	.word	0x08009b07
 8009a78:	08009b07 	.word	0x08009b07
 8009a7c:	08009b07 	.word	0x08009b07
 8009a80:	08009b07 	.word	0x08009b07
 8009a84:	08009b07 	.word	0x08009b07
 8009a88:	08009b07 	.word	0x08009b07
 8009a8c:	08009b07 	.word	0x08009b07
 8009a90:	08009b07 	.word	0x08009b07
 8009a94:	08009b07 	.word	0x08009b07
 8009a98:	08009af9 	.word	0x08009af9
 8009a9c:	2b40      	cmp	r3, #64	; 0x40
 8009a9e:	d02e      	beq.n	8009afe <UART_SetConfig+0x8a2>
 8009aa0:	e031      	b.n	8009b06 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aa2:	f7fd fb91 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 8009aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009aa8:	e033      	b.n	8009b12 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aaa:	f7fd fba3 	bl	80071f4 <HAL_RCC_GetPCLK2Freq>
 8009aae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ab0:	e02f      	b.n	8009b12 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab2:	f107 0314 	add.w	r3, r7, #20
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fb3a 	bl	8008130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ac0:	e027      	b.n	8009b12 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fc86 	bl	80083d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ad0:	e01f      	b.n	8009b12 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad2:	4b58      	ldr	r3, [pc, #352]	; (8009c34 <UART_SetConfig+0x9d8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d009      	beq.n	8009af2 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ade:	4b55      	ldr	r3, [pc, #340]	; (8009c34 <UART_SetConfig+0x9d8>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	08db      	lsrs	r3, r3, #3
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	4a53      	ldr	r2, [pc, #332]	; (8009c38 <UART_SetConfig+0x9dc>)
 8009aea:	fa22 f303 	lsr.w	r3, r2, r3
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009af0:	e00f      	b.n	8009b12 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8009af2:	4b51      	ldr	r3, [pc, #324]	; (8009c38 <UART_SetConfig+0x9dc>)
 8009af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009af6:	e00c      	b.n	8009b12 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009af8:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <UART_SetConfig+0x9d0>)
 8009afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009afc:	e009      	b.n	8009b12 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b04:	e005      	b.n	8009b12 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80ea 	beq.w	8009cee <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	4a44      	ldr	r2, [pc, #272]	; (8009c30 <UART_SetConfig+0x9d4>)
 8009b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b2c:	005a      	lsls	r2, r3, #1
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	2b0f      	cmp	r3, #15
 8009b46:	d916      	bls.n	8009b76 <UART_SetConfig+0x91a>
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b4e:	d212      	bcs.n	8009b76 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f023 030f 	bic.w	r3, r3, #15
 8009b58:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f003 0307 	and.w	r3, r3, #7
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b72:	60da      	str	r2, [r3, #12]
 8009b74:	e0bb      	b.n	8009cee <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b7c:	e0b7      	b.n	8009cee <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	dc4a      	bgt.n	8009c1c <UART_SetConfig+0x9c0>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f2c0 8086 	blt.w	8009c98 <UART_SetConfig+0xa3c>
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	f200 8083 	bhi.w	8009c98 <UART_SetConfig+0xa3c>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <UART_SetConfig+0x93c>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009c23 	.word	0x08009c23
 8009b9c:	08009c3d 	.word	0x08009c3d
 8009ba0:	08009c99 	.word	0x08009c99
 8009ba4:	08009c99 	.word	0x08009c99
 8009ba8:	08009c45 	.word	0x08009c45
 8009bac:	08009c99 	.word	0x08009c99
 8009bb0:	08009c99 	.word	0x08009c99
 8009bb4:	08009c99 	.word	0x08009c99
 8009bb8:	08009c55 	.word	0x08009c55
 8009bbc:	08009c99 	.word	0x08009c99
 8009bc0:	08009c99 	.word	0x08009c99
 8009bc4:	08009c99 	.word	0x08009c99
 8009bc8:	08009c99 	.word	0x08009c99
 8009bcc:	08009c99 	.word	0x08009c99
 8009bd0:	08009c99 	.word	0x08009c99
 8009bd4:	08009c99 	.word	0x08009c99
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c99 	.word	0x08009c99
 8009be0:	08009c99 	.word	0x08009c99
 8009be4:	08009c99 	.word	0x08009c99
 8009be8:	08009c99 	.word	0x08009c99
 8009bec:	08009c99 	.word	0x08009c99
 8009bf0:	08009c99 	.word	0x08009c99
 8009bf4:	08009c99 	.word	0x08009c99
 8009bf8:	08009c99 	.word	0x08009c99
 8009bfc:	08009c99 	.word	0x08009c99
 8009c00:	08009c99 	.word	0x08009c99
 8009c04:	08009c99 	.word	0x08009c99
 8009c08:	08009c99 	.word	0x08009c99
 8009c0c:	08009c99 	.word	0x08009c99
 8009c10:	08009c99 	.word	0x08009c99
 8009c14:	08009c99 	.word	0x08009c99
 8009c18:	08009c8b 	.word	0x08009c8b
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d037      	beq.n	8009c90 <UART_SetConfig+0xa34>
 8009c20:	e03a      	b.n	8009c98 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c22:	f7fd fad1 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 8009c26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c28:	e03c      	b.n	8009ca4 <UART_SetConfig+0xa48>
 8009c2a:	bf00      	nop
 8009c2c:	003d0900 	.word	0x003d0900
 8009c30:	0802749c 	.word	0x0802749c
 8009c34:	58024400 	.word	0x58024400
 8009c38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c3c:	f7fd fada 	bl	80071f4 <HAL_RCC_GetPCLK2Freq>
 8009c40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c42:	e02f      	b.n	8009ca4 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c44:	f107 0314 	add.w	r3, r7, #20
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fa71 	bl	8008130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c52:	e027      	b.n	8009ca4 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c54:	f107 0308 	add.w	r3, r7, #8
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fe fbbd 	bl	80083d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c62:	e01f      	b.n	8009ca4 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c64:	4b2c      	ldr	r3, [pc, #176]	; (8009d18 <UART_SetConfig+0xabc>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c70:	4b29      	ldr	r3, [pc, #164]	; (8009d18 <UART_SetConfig+0xabc>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	08db      	lsrs	r3, r3, #3
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	4a28      	ldr	r2, [pc, #160]	; (8009d1c <UART_SetConfig+0xac0>)
 8009c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c82:	e00f      	b.n	8009ca4 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8009c84:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <UART_SetConfig+0xac0>)
 8009c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c88:	e00c      	b.n	8009ca4 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c8a:	4b25      	ldr	r3, [pc, #148]	; (8009d20 <UART_SetConfig+0xac4>)
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c8e:	e009      	b.n	8009ca4 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c96:	e005      	b.n	8009ca4 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d021      	beq.n	8009cee <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	4a1d      	ldr	r2, [pc, #116]	; (8009d24 <UART_SetConfig+0xac8>)
 8009cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	085b      	lsrs	r3, r3, #1
 8009cc2:	441a      	add	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	2b0f      	cmp	r3, #15
 8009cd4:	d908      	bls.n	8009ce8 <UART_SetConfig+0xa8c>
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cdc:	d204      	bcs.n	8009ce8 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce4:	60da      	str	r2, [r3, #12]
 8009ce6:	e002      	b.n	8009cee <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009d0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3738      	adds	r7, #56	; 0x38
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bdb0      	pop	{r4, r5, r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	003d0900 	.word	0x003d0900
 8009d24:	0802749c 	.word	0x0802749c

08009d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00a      	beq.n	8009d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01a      	beq.n	8009e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e26:	d10a      	bne.n	8009e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
  }
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e7c:	f7f8 f88e 	bl	8001f9c <HAL_GetTick>
 8009e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d10e      	bne.n	8009eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f82c 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e022      	b.n	8009ef4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0304 	and.w	r3, r3, #4
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d10e      	bne.n	8009eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f816 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e00c      	b.n	8009ef4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0c:	e062      	b.n	8009fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f14:	d05e      	beq.n	8009fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f16:	f7f8 f841 	bl	8001f9c <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d302      	bcc.n	8009f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d11d      	bne.n	8009f68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0201 	bic.w	r2, r2, #1
 8009f4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2220      	movs	r2, #32
 8009f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e045      	b.n	8009ff4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d02e      	beq.n	8009fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f84:	d126      	bne.n	8009fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e00f      	b.n	8009ff4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	69da      	ldr	r2, [r3, #28]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	bf0c      	ite	eq
 8009fe4:	2301      	moveq	r3, #1
 8009fe6:	2300      	movne	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d08d      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_UARTEx_DisableFifoMode+0x16>
 800a00e:	2302      	movs	r3, #2
 800a010:	e027      	b.n	800a062 <HAL_UARTEx_DisableFifoMode+0x66>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2224      	movs	r2, #36	; 0x24
 800a01e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0201 	bic.w	r2, r2, #1
 800a038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2220      	movs	r2, #32
 800a054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d101      	bne.n	800a086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a082:	2302      	movs	r3, #2
 800a084:	e02d      	b.n	800a0e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2224      	movs	r2, #36	; 0x24
 800a092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0201 	bic.w	r2, r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f850 	bl	800a168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0fe:	2302      	movs	r3, #2
 800a100:	e02d      	b.n	800a15e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2224      	movs	r2, #36	; 0x24
 800a10e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0201 	bic.w	r2, r2, #1
 800a128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f812 	bl	800a168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2220      	movs	r2, #32
 800a150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b089      	sub	sp, #36	; 0x24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a170:	4a2f      	ldr	r2, [pc, #188]	; (800a230 <UARTEx_SetNbDataToProcess+0xc8>)
 800a172:	f107 0314 	add.w	r3, r7, #20
 800a176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a17a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a17e:	4a2d      	ldr	r2, [pc, #180]	; (800a234 <UARTEx_SetNbDataToProcess+0xcc>)
 800a180:	f107 030c 	add.w	r3, r7, #12
 800a184:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a188:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a190:	2b00      	cmp	r3, #0
 800a192:	d108      	bne.n	800a1a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1a4:	e03d      	b.n	800a222 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1a6:	2310      	movs	r3, #16
 800a1a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	0e5b      	lsrs	r3, r3, #25
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	0f5b      	lsrs	r3, r3, #29
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f003 0307 	and.w	r3, r3, #7
 800a1cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a1ce:	7fbb      	ldrb	r3, [r7, #30]
 800a1d0:	7f3a      	ldrb	r2, [r7, #28]
 800a1d2:	f107 0120 	add.w	r1, r7, #32
 800a1d6:	440a      	add	r2, r1
 800a1d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1dc:	fb02 f303 	mul.w	r3, r2, r3
 800a1e0:	7f3a      	ldrb	r2, [r7, #28]
 800a1e2:	f107 0120 	add.w	r1, r7, #32
 800a1e6:	440a      	add	r2, r1
 800a1e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a1f8:	7ffb      	ldrb	r3, [r7, #31]
 800a1fa:	7f7a      	ldrb	r2, [r7, #29]
 800a1fc:	f107 0120 	add.w	r1, r7, #32
 800a200:	440a      	add	r2, r1
 800a202:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	7f7a      	ldrb	r2, [r7, #29]
 800a20c:	f107 0120 	add.w	r1, r7, #32
 800a210:	440a      	add	r2, r1
 800a212:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a216:	fb93 f3f2 	sdiv	r3, r3, r2
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a222:	bf00      	nop
 800a224:	3724      	adds	r7, #36	; 0x24
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	08023748 	.word	0x08023748
 800a234:	08023750 	.word	0x08023750

0800a238 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a24a:	2320      	movs	r3, #32
 800a24c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a24e:	f3bf 8f4f 	dsb	sy
}
 800a252:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800a254:	e00b      	b.n	800a26e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a256:	4a0d      	ldr	r2, [pc, #52]	; (800a28c <SCB_InvalidateDCache_by_Addr+0x54>)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4413      	add	r3, r2
 800a264:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	dcf0      	bgt.n	800a256 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a274:	f3bf 8f4f 	dsb	sy
}
 800a278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a27a:	f3bf 8f6f 	isb	sy
}
 800a27e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800a280:	bf00      	nop
 800a282:	371c      	adds	r7, #28
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	e000ed00 	.word	0xe000ed00

0800a290 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08e      	sub	sp, #56	; 0x38
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	605a      	str	r2, [r3, #4]
 800a2a2:	609a      	str	r2, [r3, #8]
 800a2a4:	60da      	str	r2, [r3, #12]
 800a2a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a5d      	ldr	r2, [pc, #372]	; (800a424 <HAL_ETH_MspInit+0x194>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	f040 80b3 	bne.w	800a41a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a2b4:	4b5c      	ldr	r3, [pc, #368]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2ba:	4a5b      	ldr	r2, [pc, #364]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a2c4:	4b58      	ldr	r3, [pc, #352]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2ce:	623b      	str	r3, [r7, #32]
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a2d2:	4b55      	ldr	r3, [pc, #340]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2d8:	4a53      	ldr	r2, [pc, #332]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a2e2:	4b51      	ldr	r3, [pc, #324]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ec:	61fb      	str	r3, [r7, #28]
 800a2ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a2f0:	4b4d      	ldr	r3, [pc, #308]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2f6:	4a4c      	ldr	r2, [pc, #304]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a300:	4b49      	ldr	r3, [pc, #292]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a302:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a30a:	61bb      	str	r3, [r7, #24]
 800a30c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a30e:	4b46      	ldr	r3, [pc, #280]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a314:	4a44      	ldr	r2, [pc, #272]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a316:	f043 0304 	orr.w	r3, r3, #4
 800a31a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a31e:	4b42      	ldr	r3, [pc, #264]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a32c:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a32e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a332:	4a3d      	ldr	r2, [pc, #244]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a334:	f043 0301 	orr.w	r3, r3, #1
 800a338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a33c:	4b3a      	ldr	r3, [pc, #232]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a33e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a34a:	4b37      	ldr	r3, [pc, #220]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a34c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a350:	4a35      	ldr	r2, [pc, #212]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a352:	f043 0302 	orr.w	r3, r3, #2
 800a356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a35a:	4b33      	ldr	r3, [pc, #204]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a35c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a368:	4b2f      	ldr	r3, [pc, #188]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a36a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a36e:	4a2e      	ldr	r2, [pc, #184]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a378:	4b2b      	ldr	r3, [pc, #172]	; (800a428 <HAL_ETH_MspInit+0x198>)
 800a37a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a382:	60bb      	str	r3, [r7, #8]
 800a384:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a386:	2332      	movs	r3, #50	; 0x32
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a38a:	2302      	movs	r3, #2
 800a38c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a392:	2303      	movs	r3, #3
 800a394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a396:	230b      	movs	r3, #11
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a39a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4822      	ldr	r0, [pc, #136]	; (800a42c <HAL_ETH_MspInit+0x19c>)
 800a3a2:	f7fb fbd5 	bl	8005b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a3a6:	2386      	movs	r3, #134	; 0x86
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3b6:	230b      	movs	r3, #11
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3be:	4619      	mov	r1, r3
 800a3c0:	481b      	ldr	r0, [pc, #108]	; (800a430 <HAL_ETH_MspInit+0x1a0>)
 800a3c2:	f7fb fbc5 	bl	8005b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a3c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3d8:	230b      	movs	r3, #11
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4814      	ldr	r0, [pc, #80]	; (800a434 <HAL_ETH_MspInit+0x1a4>)
 800a3e4:	f7fb fbb4 	bl	8005b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800a3e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3fa:	230b      	movs	r3, #11
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a402:	4619      	mov	r1, r3
 800a404:	480c      	ldr	r0, [pc, #48]	; (800a438 <HAL_ETH_MspInit+0x1a8>)
 800a406:	f7fb fba3 	bl	8005b50 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 800a40a:	2200      	movs	r2, #0
 800a40c:	2107      	movs	r1, #7
 800a40e:	203d      	movs	r0, #61	; 0x3d
 800a410:	f7f7 fea8 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a414:	203d      	movs	r0, #61	; 0x3d
 800a416:	f7f7 febf 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a41a:	bf00      	nop
 800a41c:	3738      	adds	r7, #56	; 0x38
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	40028000 	.word	0x40028000
 800a428:	58024400 	.word	0x58024400
 800a42c:	58020800 	.word	0x58020800
 800a430:	58020000 	.word	0x58020000
 800a434:	58020400 	.word	0x58020400
 800a438:	58021800 	.word	0x58021800

0800a43c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a444:	4b04      	ldr	r3, [pc, #16]	; (800a458 <HAL_ETH_RxCpltCallback+0x1c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 fd2f 	bl	800aeac <osSemaphoreRelease>
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	24000488 	.word	0x24000488

0800a45c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a45c:	b5b0      	push	{r4, r5, r7, lr}
 800a45e:	b0ac      	sub	sp, #176	; 0xb0
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a476:	4b91      	ldr	r3, [pc, #580]	; (800a6bc <low_level_init+0x260>)
 800a478:	4a91      	ldr	r2, [pc, #580]	; (800a6c0 <low_level_init+0x264>)
 800a47a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a482:	2380      	movs	r3, #128	; 0x80
 800a484:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a488:	23e1      	movs	r3, #225	; 0xe1
 800a48a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a494:	2300      	movs	r3, #0
 800a496:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a49a:	2300      	movs	r3, #0
 800a49c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a4a0:	4a86      	ldr	r2, [pc, #536]	; (800a6bc <low_level_init+0x260>)
 800a4a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4a6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a4a8:	4b84      	ldr	r3, [pc, #528]	; (800a6bc <low_level_init+0x260>)
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a4ae:	4b83      	ldr	r3, [pc, #524]	; (800a6bc <low_level_init+0x260>)
 800a4b0:	4a84      	ldr	r2, [pc, #528]	; (800a6c4 <low_level_init+0x268>)
 800a4b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a4b4:	4b81      	ldr	r3, [pc, #516]	; (800a6bc <low_level_init+0x260>)
 800a4b6:	4a84      	ldr	r2, [pc, #528]	; (800a6c8 <low_level_init+0x26c>)
 800a4b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a4ba:	4b80      	ldr	r3, [pc, #512]	; (800a6bc <low_level_init+0x260>)
 800a4bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a4c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a4c2:	487e      	ldr	r0, [pc, #504]	; (800a6bc <low_level_init+0x260>)
 800a4c4:	f7f9 fcb2 	bl	8003e2c <HAL_ETH_Init>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a4ce:	2234      	movs	r2, #52	; 0x34
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	487e      	ldr	r0, [pc, #504]	; (800a6cc <low_level_init+0x270>)
 800a4d4:	f016 fa60 	bl	8020998 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a4d8:	4b7c      	ldr	r3, [pc, #496]	; (800a6cc <low_level_init+0x270>)
 800a4da:	2221      	movs	r2, #33	; 0x21
 800a4dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a4de:	4b7b      	ldr	r3, [pc, #492]	; (800a6cc <low_level_init+0x270>)
 800a4e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a4e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a4e6:	4b79      	ldr	r3, [pc, #484]	; (800a6cc <low_level_init+0x270>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a4ec:	4878      	ldr	r0, [pc, #480]	; (800a6d0 <low_level_init+0x274>)
 800a4ee:	f008 fe23 	bl	8013138 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2206      	movs	r2, #6
 800a4f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a4fa:	4b70      	ldr	r3, [pc, #448]	; (800a6bc <low_level_init+0x260>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	781a      	ldrb	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a506:	4b6d      	ldr	r3, [pc, #436]	; (800a6bc <low_level_init+0x260>)
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	785a      	ldrb	r2, [r3, #1]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a512:	4b6a      	ldr	r3, [pc, #424]	; (800a6bc <low_level_init+0x260>)
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	789a      	ldrb	r2, [r3, #2]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a51e:	4b67      	ldr	r3, [pc, #412]	; (800a6bc <low_level_init+0x260>)
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	78da      	ldrb	r2, [r3, #3]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a52a:	4b64      	ldr	r3, [pc, #400]	; (800a6bc <low_level_init+0x260>)
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	791a      	ldrb	r2, [r3, #4]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a536:	4b61      	ldr	r3, [pc, #388]	; (800a6bc <low_level_init+0x260>)
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	795a      	ldrb	r2, [r3, #5]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a548:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a550:	f043 030a 	orr.w	r3, r3, #10
 800a554:	b2da      	uxtb	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a55c:	2300      	movs	r3, #0
 800a55e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a562:	e012      	b.n	800a58a <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a568:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	4a58      	ldr	r2, [pc, #352]	; (800a6d4 <low_level_init+0x278>)
 800a572:	441a      	add	r2, r3
 800a574:	2300      	movs	r3, #0
 800a576:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a57a:	4850      	ldr	r0, [pc, #320]	; (800a6bc <low_level_init+0x260>)
 800a57c:	f7f9 fd30 	bl	8003fe0 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a584:	3301      	adds	r3, #1
 800a586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d9e8      	bls.n	800a564 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a592:	2300      	movs	r3, #0
 800a594:	62bb      	str	r3, [r7, #40]	; 0x28
 800a596:	2300      	movs	r3, #0
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a59a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fc03 	bl	800adac <osSemaphoreCreate>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	4a4b      	ldr	r2, [pc, #300]	; (800a6d8 <low_level_init+0x27c>)
 800a5aa:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a5ac:	4b4b      	ldr	r3, [pc, #300]	; (800a6dc <low_level_init+0x280>)
 800a5ae:	f107 040c 	add.w	r4, r7, #12
 800a5b2:	461d      	mov	r5, r3
 800a5b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	6879      	ldr	r1, [r7, #4]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 faf3 	bl	800abb2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a5cc:	4944      	ldr	r1, [pc, #272]	; (800a6e0 <low_level_init+0x284>)
 800a5ce:	4845      	ldr	r0, [pc, #276]	; (800a6e4 <low_level_init+0x288>)
 800a5d0:	f7f7 fb33 	bl	8001c3a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a5d4:	4843      	ldr	r0, [pc, #268]	; (800a6e4 <low_level_init+0x288>)
 800a5d6:	f7f7 fb62 	bl	8001c9e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a5da:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d165      	bne.n	800a6ae <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a5e2:	4840      	ldr	r0, [pc, #256]	; (800a6e4 <low_level_init+0x288>)
 800a5e4:	f7f7 fc03 	bl	8001dee <LAN8742_GetLinkState>
 800a5e8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a5ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	dc06      	bgt.n	800a602 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f009 fa0b 	bl	8013a10 <netif_set_link_down>
      netif_set_down(netif);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f009 f9a2 	bl	8013944 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a600:	e057      	b.n	800a6b2 <low_level_init+0x256>
 800a602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a606:	3b02      	subs	r3, #2
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d82b      	bhi.n	800a664 <low_level_init+0x208>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <low_level_init+0x1b8>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a625 	.word	0x0800a625
 800a618:	0800a637 	.word	0x0800a637
 800a61c:	0800a647 	.word	0x0800a647
 800a620:	0800a657 	.word	0x0800a657
        duplex = ETH_FULLDUPLEX_MODE;
 800a624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a62c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a634:	e01f      	b.n	800a676 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a636:	2300      	movs	r3, #0
 800a638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a63c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a644:	e017      	b.n	800a676 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a64a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a64e:	2300      	movs	r3, #0
 800a650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a654:	e00f      	b.n	800a676 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800a656:	2300      	movs	r3, #0
 800a658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a65c:	2300      	movs	r3, #0
 800a65e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a662:	e008      	b.n	800a676 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800a664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a66c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a674:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a67a:	4619      	mov	r1, r3
 800a67c:	480f      	ldr	r0, [pc, #60]	; (800a6bc <low_level_init+0x260>)
 800a67e:	f7fa fa91 	bl	8004ba4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a686:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a68c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a68e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a692:	4619      	mov	r1, r3
 800a694:	4809      	ldr	r0, [pc, #36]	; (800a6bc <low_level_init+0x260>)
 800a696:	f7fa fc59 	bl	8004f4c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a69a:	4808      	ldr	r0, [pc, #32]	; (800a6bc <low_level_init+0x260>)
 800a69c:	f7f9 fce1 	bl	8004062 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f009 f8e3 	bl	801386c <netif_set_up>
    netif_set_link_up(netif);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f009 f97e 	bl	80139a8 <netif_set_link_up>
}
 800a6ac:	e001      	b.n	800a6b2 <low_level_init+0x256>
    Error_Handler();
 800a6ae:	f7f6 fd03 	bl	80010b8 <Error_Handler>
}
 800a6b2:	bf00      	nop
 800a6b4:	37b0      	adds	r7, #176	; 0xb0
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	24045ce0 	.word	0x24045ce0
 800a6c0:	40028000 	.word	0x40028000
 800a6c4:	30040060 	.word	0x30040060
 800a6c8:	30040000 	.word	0x30040000
 800a6cc:	24045d50 	.word	0x24045d50
 800a6d0:	080274b4 	.word	0x080274b4
 800a6d4:	30040200 	.word	0x30040200
 800a6d8:	24000488 	.word	0x24000488
 800a6dc:	08023760 	.word	0x08023760
 800a6e0:	24000010 	.word	0x24000010
 800a6e4:	24045cc0 	.word	0x24045cc0

0800a6e8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b092      	sub	sp, #72	; 0x48
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a6fc:	f107 030c 	add.w	r3, r7, #12
 800a700:	2230      	movs	r2, #48	; 0x30
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f016 f947 	bl	8020998 <memset>

  for(q = p; q != NULL; q = q->next)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	643b      	str	r3, [r7, #64]	; 0x40
 800a70e:	e049      	b.n	800a7a4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a712:	2b03      	cmp	r3, #3
 800a714:	d902      	bls.n	800a71c <low_level_output+0x34>
      return ERR_IF;
 800a716:	f06f 030b 	mvn.w	r3, #11
 800a71a:	e056      	b.n	800a7ca <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71e:	6859      	ldr	r1, [r3, #4]
 800a720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a722:	4613      	mov	r3, r2
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a72e:	4413      	add	r3, r2
 800a730:	3b3c      	subs	r3, #60	; 0x3c
 800a732:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a736:	895b      	ldrh	r3, [r3, #10]
 800a738:	4619      	mov	r1, r3
 800a73a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a73c:	4613      	mov	r3, r2
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a748:	4413      	add	r3, r2
 800a74a:	3b38      	subs	r3, #56	; 0x38
 800a74c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a750:	2b00      	cmp	r3, #0
 800a752:	d012      	beq.n	800a77a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a756:	1e5a      	subs	r2, r3, #1
 800a758:	f107 000c 	add.w	r0, r7, #12
 800a75c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a75e:	460b      	mov	r3, r1
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	440b      	add	r3, r1
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	18c1      	adds	r1, r0, r3
 800a768:	4613      	mov	r3, r2
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a774:	4413      	add	r3, r2
 800a776:	3b34      	subs	r3, #52	; 0x34
 800a778:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800a782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a784:	4613      	mov	r3, r2
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a790:	4413      	add	r3, r2
 800a792:	3b34      	subs	r3, #52	; 0x34
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a79a:	3301      	adds	r3, #1
 800a79c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1b2      	bne.n	800a710 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	891b      	ldrh	r3, [r3, #8]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <low_level_output+0xec>)
 800a7b2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a7b4:	4a07      	ldr	r2, [pc, #28]	; (800a7d4 <low_level_output+0xec>)
 800a7b6:	f107 030c 	add.w	r3, r7, #12
 800a7ba:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a7bc:	2214      	movs	r2, #20
 800a7be:	4905      	ldr	r1, [pc, #20]	; (800a7d4 <low_level_output+0xec>)
 800a7c0:	4805      	ldr	r0, [pc, #20]	; (800a7d8 <low_level_output+0xf0>)
 800a7c2:	f7f9 fd4d 	bl	8004260 <HAL_ETH_Transmit>

  return errval;
 800a7c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3748      	adds	r7, #72	; 0x48
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	24045d50 	.word	0x24045d50
 800a7d8:	24045ce0 	.word	0x24045ce0

0800a7dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b094      	sub	sp, #80	; 0x50
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60bb      	str	r3, [r7, #8]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a7f0:	f107 030c 	add.w	r3, r7, #12
 800a7f4:	2230      	movs	r2, #48	; 0x30
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f016 f8cd 	bl	8020998 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	643b      	str	r3, [r7, #64]	; 0x40
 800a802:	e015      	b.n	800a830 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800a804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	f107 010c 	add.w	r1, r7, #12
 800a80c:	4613      	mov	r3, r2
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4419      	add	r1, r3
 800a816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a818:	4613      	mov	r3, r2
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a824:	4413      	add	r3, r2
 800a826:	3b34      	subs	r3, #52	; 0x34
 800a828:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800a82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a82c:	3301      	adds	r3, #1
 800a82e:	643b      	str	r3, [r7, #64]	; 0x40
 800a830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a832:	2b02      	cmp	r3, #2
 800a834:	d9e6      	bls.n	800a804 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800a836:	f107 030c 	add.w	r3, r7, #12
 800a83a:	4619      	mov	r1, r3
 800a83c:	4818      	ldr	r0, [pc, #96]	; (800a8a0 <low_level_input+0xc4>)
 800a83e:	f7f9 fe88 	bl	8004552 <HAL_ETH_GetRxDataBuffer>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d125      	bne.n	800a894 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a848:	f107 0308 	add.w	r3, r7, #8
 800a84c:	4619      	mov	r1, r3
 800a84e:	4814      	ldr	r0, [pc, #80]	; (800a8a0 <low_level_input+0xc4>)
 800a850:	f7f9 ff1d 	bl	800468e <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a854:	4812      	ldr	r0, [pc, #72]	; (800a8a0 <low_level_input+0xc4>)
 800a856:	f7f9 ff4d 	bl	80046f4 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	4611      	mov	r1, r2
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff fce9 	bl	800a238 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a866:	480f      	ldr	r0, [pc, #60]	; (800a8a4 <low_level_input+0xc8>)
 800a868:	f008 fce2 	bl	8013230 <memp_malloc_pool>
 800a86c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800a86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00f      	beq.n	800a894 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800a874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a876:	4a0c      	ldr	r2, [pc, #48]	; (800a8a8 <low_level_input+0xcc>)
 800a878:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	b299      	uxth	r1, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	b292      	uxth	r2, r2
 800a884:	9201      	str	r2, [sp, #4]
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a88a:	2241      	movs	r2, #65	; 0x41
 800a88c:	2000      	movs	r0, #0
 800a88e:	f009 fae3 	bl	8013e58 <pbuf_alloced_custom>
 800a892:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800a894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a896:	4618      	mov	r0, r3
 800a898:	3748      	adds	r7, #72	; 0x48
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	24045ce0 	.word	0x24045ce0
 800a8a4:	080274b4 	.word	0x080274b4
 800a8a8:	0800a959 	.word	0x0800a959

0800a8ac <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <ethernetif_input+0x4c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 faa5 	bl	800ae10 <osSemaphoreWait>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f5      	bne.n	800a8b8 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f7ff ff85 	bl	800a7dc <low_level_input>
 800a8d2:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	68f9      	ldr	r1, [r7, #12]
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	4798      	blx	r3
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800a8ea:	68b8      	ldr	r0, [r7, #8]
 800a8ec:	f009 fca0 	bl	8014230 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1ea      	bne.n	800a8cc <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a8f6:	e7df      	b.n	800a8b8 <ethernetif_input+0xc>
 800a8f8:	24000488 	.word	0x24000488

0800a8fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <ethernetif_init+0x1c>
 800a90a:	4b0e      	ldr	r3, [pc, #56]	; (800a944 <ethernetif_init+0x48>)
 800a90c:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a910:	490d      	ldr	r1, [pc, #52]	; (800a948 <ethernetif_init+0x4c>)
 800a912:	480e      	ldr	r0, [pc, #56]	; (800a94c <ethernetif_init+0x50>)
 800a914:	f016 fc8a 	bl	802122c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2273      	movs	r2, #115	; 0x73
 800a91c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2274      	movs	r2, #116	; 0x74
 800a924:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a09      	ldr	r2, [pc, #36]	; (800a950 <ethernetif_init+0x54>)
 800a92c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a08      	ldr	r2, [pc, #32]	; (800a954 <ethernetif_init+0x58>)
 800a932:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff fd91 	bl	800a45c <low_level_init>

  return ERR_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	0802377c 	.word	0x0802377c
 800a948:	08023798 	.word	0x08023798
 800a94c:	080237a8 	.word	0x080237a8
 800a950:	08010809 	.word	0x08010809
 800a954:	0800a6e9 	.word	0x0800a6e9

0800a958 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a964:	68f9      	ldr	r1, [r7, #12]
 800a966:	4803      	ldr	r0, [pc, #12]	; (800a974 <pbuf_free_custom+0x1c>)
 800a968:	f008 fcd6 	bl	8013318 <memp_free_pool>
}
 800a96c:	bf00      	nop
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	080274b4 	.word	0x080274b4

0800a978 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a97c:	f7f7 fb0e 	bl	8001f9c <HAL_GetTick>
 800a980:	4603      	mov	r3, r0
}
 800a982:	4618      	mov	r0, r3
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a98c:	4802      	ldr	r0, [pc, #8]	; (800a998 <ETH_PHY_IO_Init+0x10>)
 800a98e:	f7fa faf7 	bl	8004f80 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	bd80      	pop	{r7, pc}
 800a998:	24045ce0 	.word	0x24045ce0

0800a99c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a99c:	b480      	push	{r7}
 800a99e:	af00      	add	r7, sp, #0
  return 0;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	68f9      	ldr	r1, [r7, #12]
 800a9be:	4807      	ldr	r0, [pc, #28]	; (800a9dc <ETH_PHY_IO_ReadReg+0x30>)
 800a9c0:	f7fa f848 	bl	8004a54 <HAL_ETH_ReadPHYRegister>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a9ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9ce:	e000      	b.n	800a9d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	24045ce0 	.word	0x24045ce0

0800a9e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	68f9      	ldr	r1, [r7, #12]
 800a9f2:	4807      	ldr	r0, [pc, #28]	; (800aa10 <ETH_PHY_IO_WriteReg+0x30>)
 800a9f4:	f7fa f882 	bl	8004afc <HAL_ETH_WritePHYRegister>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa02:	e000      	b.n	800aa06 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	24045ce0 	.word	0x24045ce0

0800aa14 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aa18:	f7f7 fac0 	bl	8001f9c <HAL_GetTick>
 800aa1c:	4603      	mov	r3, r0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	bd80      	pop	{r7, pc}
	...

0800aa24 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b0a0      	sub	sp, #128	; 0x80
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa30:	2300      	movs	r3, #0
 800aa32:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa34:	2300      	movs	r3, #0
 800aa36:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aa3c:	483a      	ldr	r0, [pc, #232]	; (800ab28 <ethernet_link_thread+0x104>)
 800aa3e:	f7f7 f9d6 	bl	8001dee <LAN8742_GetLinkState>
 800aa42:	4603      	mov	r3, r0
 800aa44:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800aa46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa4c:	089b      	lsrs	r3, r3, #2
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <ethernet_link_thread+0x4e>
 800aa58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d809      	bhi.n	800aa72 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800aa5e:	4833      	ldr	r0, [pc, #204]	; (800ab2c <ethernet_link_thread+0x108>)
 800aa60:	f7f9 fb84 	bl	800416c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800aa64:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aa66:	f008 ff6d 	bl	8013944 <netif_set_down>
    netif_set_link_down(netif);
 800aa6a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aa6c:	f008 ffd0 	bl	8013a10 <netif_set_link_down>
 800aa70:	e055      	b.n	800ab1e <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800aa72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa78:	f003 0304 	and.w	r3, r3, #4
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d14e      	bne.n	800ab1e <ethernet_link_thread+0xfa>
 800aa80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d94b      	bls.n	800ab1e <ethernet_link_thread+0xfa>
 800aa86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa88:	3b02      	subs	r3, #2
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d82a      	bhi.n	800aae4 <ethernet_link_thread+0xc0>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <ethernet_link_thread+0x70>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aab7 	.word	0x0800aab7
 800aa9c:	0800aac7 	.word	0x0800aac7
 800aaa0:	0800aad7 	.word	0x0800aad7
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aaa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aaa8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aaaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aaae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aab0:	2301      	movs	r3, #1
 800aab2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aab4:	e017      	b.n	800aae6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aaba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aabe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aac0:	2301      	movs	r3, #1
 800aac2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aac4:	e00f      	b.n	800aae6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aaca:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aacc:	2300      	movs	r3, #0
 800aace:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aad0:	2301      	movs	r3, #1
 800aad2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aad4:	e007      	b.n	800aae6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aada:	2300      	movs	r3, #0
 800aadc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aade:	2301      	movs	r3, #1
 800aae0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aae2:	e000      	b.n	800aae6 <ethernet_link_thread+0xc2>
    default:
      break;
 800aae4:	bf00      	nop
    }

    if(linkchanged)
 800aae6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d018      	beq.n	800ab1e <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aaec:	f107 0308 	add.w	r3, r7, #8
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	480e      	ldr	r0, [pc, #56]	; (800ab2c <ethernet_link_thread+0x108>)
 800aaf4:	f7fa f856 	bl	8004ba4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aaf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aafa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800aafc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aafe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	4619      	mov	r1, r3
 800ab06:	4809      	ldr	r0, [pc, #36]	; (800ab2c <ethernet_link_thread+0x108>)
 800ab08:	f7fa fa20 	bl	8004f4c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800ab0c:	4807      	ldr	r0, [pc, #28]	; (800ab2c <ethernet_link_thread+0x108>)
 800ab0e:	f7f9 faa8 	bl	8004062 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ab12:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ab14:	f008 feaa 	bl	801386c <netif_set_up>
      netif_set_link_up(netif);
 800ab18:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ab1a:	f008 ff45 	bl	80139a8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ab1e:	2064      	movs	r0, #100	; 0x64
 800ab20:	f000 f893 	bl	800ac4a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ab24:	e78a      	b.n	800aa3c <ethernet_link_thread+0x18>
 800ab26:	bf00      	nop
 800ab28:	24045cc0 	.word	0x24045cc0
 800ab2c:	24045ce0 	.word	0x24045ce0

0800ab30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ab3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab42:	2b84      	cmp	r3, #132	; 0x84
 800ab44:	d005      	beq.n	800ab52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ab46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	3303      	adds	r3, #3
 800ab50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ab52:	68fb      	ldr	r3, [r7, #12]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab66:	f3ef 8305 	mrs	r3, IPSR
 800ab6a:	607b      	str	r3, [r7, #4]
  return(result);
 800ab6c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ab88:	f002 f9e4 	bl	800cf54 <vTaskStartScheduler>
  
  return osOK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ab96:	f7ff ffe3 	bl	800ab60 <inHandlerMode>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800aba0:	f002 faf2 	bl	800d188 <xTaskGetTickCountFromISR>
 800aba4:	4603      	mov	r3, r0
 800aba6:	e002      	b.n	800abae <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800aba8:	f002 fade 	bl	800d168 <xTaskGetTickCount>
 800abac:	4603      	mov	r3, r0
  }
}
 800abae:	4618      	mov	r0, r3
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800abb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb4:	b089      	sub	sp, #36	; 0x24
 800abb6:	af04      	add	r7, sp, #16
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d020      	beq.n	800ac06 <osThreadCreate+0x54>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01c      	beq.n	800ac06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685c      	ldr	r4, [r3, #4]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681d      	ldr	r5, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	691e      	ldr	r6, [r3, #16]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ffa6 	bl	800ab30 <makeFreeRtosPriority>
 800abe4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abee:	9202      	str	r2, [sp, #8]
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	9100      	str	r1, [sp, #0]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	4632      	mov	r2, r6
 800abf8:	4629      	mov	r1, r5
 800abfa:	4620      	mov	r0, r4
 800abfc:	f001 ff52 	bl	800caa4 <xTaskCreateStatic>
 800ac00:	4603      	mov	r3, r0
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e01c      	b.n	800ac40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685c      	ldr	r4, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac12:	b29e      	uxth	r6, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff ff88 	bl	800ab30 <makeFreeRtosPriority>
 800ac20:	4602      	mov	r2, r0
 800ac22:	f107 030c 	add.w	r3, r7, #12
 800ac26:	9301      	str	r3, [sp, #4]
 800ac28:	9200      	str	r2, [sp, #0]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4629      	mov	r1, r5
 800ac30:	4620      	mov	r0, r4
 800ac32:	f001 ff94 	bl	800cb5e <xTaskCreate>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d001      	beq.n	800ac40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e000      	b.n	800ac42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ac40:	68fb      	ldr	r3, [r7, #12]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <osDelay+0x16>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	e000      	b.n	800ac62 <osDelay+0x18>
 800ac60:	2301      	movs	r3, #1
 800ac62:	4618      	mov	r0, r3
 800ac64:	f002 f942 	bl	800ceec <vTaskDelay>
  
  return osOK;
 800ac68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	4619      	mov	r1, r3
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f001 f8ae 	bl	800bdea <xQueueCreateMutexStatic>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	e003      	b.n	800ac9a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ac92:	2001      	movs	r0, #1
 800ac94:	f001 f891 	bl	800bdba <xQueueCreateMutex>
 800ac98:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800acae:	2300      	movs	r3, #0
 800acb0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <osMutexWait+0x18>
    return osErrorParameter;
 800acb8:	2380      	movs	r3, #128	; 0x80
 800acba:	e03a      	b.n	800ad32 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc6:	d103      	bne.n	800acd0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	e009      	b.n	800ace4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d006      	beq.n	800ace4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <osMutexWait+0x40>
      ticks = 1;
 800ace0:	2301      	movs	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ace4:	f7ff ff3c 	bl	800ab60 <inHandlerMode>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d017      	beq.n	800ad1e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800acee:	f107 0308 	add.w	r3, r7, #8
 800acf2:	461a      	mov	r2, r3
 800acf4:	2100      	movs	r1, #0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 fca2 	bl	800c640 <xQueueReceiveFromISR>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d001      	beq.n	800ad06 <osMutexWait+0x62>
      return osErrorOS;
 800ad02:	23ff      	movs	r3, #255	; 0xff
 800ad04:	e015      	b.n	800ad32 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d011      	beq.n	800ad30 <osMutexWait+0x8c>
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <osMutexWait+0x98>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	e008      	b.n	800ad30 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ad1e:	68f9      	ldr	r1, [r7, #12]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f001 fb81 	bl	800c428 <xQueueSemaphoreTake>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d001      	beq.n	800ad30 <osMutexWait+0x8c>
    return osErrorOS;
 800ad2c:	23ff      	movs	r3, #255	; 0xff
 800ad2e:	e000      	b.n	800ad32 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	e000ed04 	.word	0xe000ed04

0800ad40 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ad50:	f7ff ff06 	bl	800ab60 <inHandlerMode>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d016      	beq.n	800ad88 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ad5a:	f107 0308 	add.w	r3, r7, #8
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f001 f9f3 	bl	800c14c <xQueueGiveFromISR>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d001      	beq.n	800ad70 <osMutexRelease+0x30>
      return osErrorOS;
 800ad6c:	23ff      	movs	r3, #255	; 0xff
 800ad6e:	e017      	b.n	800ada0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d013      	beq.n	800ad9e <osMutexRelease+0x5e>
 800ad76:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <osMutexRelease+0x68>)
 800ad78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	e00a      	b.n	800ad9e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 f846 	bl	800be20 <xQueueGenericSend>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d001      	beq.n	800ad9e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ad9a:	23ff      	movs	r3, #255	; 0xff
 800ad9c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <osSemaphoreCreate+0x32>
    if (count == 1) {
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d10a      	bne.n	800adda <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	2203      	movs	r2, #3
 800adca:	9200      	str	r2, [sp, #0]
 800adcc:	2200      	movs	r2, #0
 800adce:	2100      	movs	r1, #0
 800add0:	2001      	movs	r0, #1
 800add2:	f000 ff01 	bl	800bbd8 <xQueueGenericCreateStatic>
 800add6:	4603      	mov	r3, r0
 800add8:	e016      	b.n	800ae08 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	e014      	b.n	800ae08 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d110      	bne.n	800ae06 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ade4:	2203      	movs	r2, #3
 800ade6:	2100      	movs	r1, #0
 800ade8:	2001      	movs	r0, #1
 800adea:	f000 ff6d 	bl	800bcc8 <xQueueGenericCreate>
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <osSemaphoreCreate+0x56>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2200      	movs	r2, #0
 800adfa:	2100      	movs	r1, #0
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f001 f80f 	bl	800be20 <xQueueGenericSend>
      return sema;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	e000      	b.n	800ae08 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ae06:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ae24:	2380      	movs	r3, #128	; 0x80
 800ae26:	e03a      	b.n	800ae9e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae32:	d103      	bne.n	800ae3c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ae34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	e009      	b.n	800ae50 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <osSemaphoreWait+0x40>
      ticks = 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ae50:	f7ff fe86 	bl	800ab60 <inHandlerMode>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d017      	beq.n	800ae8a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	461a      	mov	r2, r3
 800ae60:	2100      	movs	r1, #0
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f001 fbec 	bl	800c640 <xQueueReceiveFromISR>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d001      	beq.n	800ae72 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ae6e:	23ff      	movs	r3, #255	; 0xff
 800ae70:	e015      	b.n	800ae9e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d011      	beq.n	800ae9c <osSemaphoreWait+0x8c>
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <osSemaphoreWait+0x98>)
 800ae7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	e008      	b.n	800ae9c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 facb 	bl	800c428 <xQueueSemaphoreTake>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d001      	beq.n	800ae9c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ae98:	23ff      	movs	r3, #255	; 0xff
 800ae9a:	e000      	b.n	800ae9e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	e000ed04 	.word	0xe000ed04

0800aeac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aebc:	f7ff fe50 	bl	800ab60 <inHandlerMode>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d016      	beq.n	800aef4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aec6:	f107 0308 	add.w	r3, r7, #8
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 f93d 	bl	800c14c <xQueueGiveFromISR>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d001      	beq.n	800aedc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aed8:	23ff      	movs	r3, #255	; 0xff
 800aeda:	e017      	b.n	800af0c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d013      	beq.n	800af0a <osSemaphoreRelease+0x5e>
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <osSemaphoreRelease+0x68>)
 800aee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	e00a      	b.n	800af0a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aef4:	2300      	movs	r3, #0
 800aef6:	2200      	movs	r2, #0
 800aef8:	2100      	movs	r1, #0
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 ff90 	bl	800be20 <xQueueGenericSend>
 800af00:	4603      	mov	r3, r0
 800af02:	2b01      	cmp	r3, #1
 800af04:	d001      	beq.n	800af0a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800af06:	23ff      	movs	r3, #255	; 0xff
 800af08:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800af0a:	68fb      	ldr	r3, [r7, #12]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800af20:	f7ff fe1e 	bl	800ab60 <inHandlerMode>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800af2a:	2382      	movs	r3, #130	; 0x82
 800af2c:	e003      	b.n	800af36 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f001 fc42 	bl	800c7b8 <vQueueDelete>

  return osOK; 
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800af3e:	b590      	push	{r4, r7, lr}
 800af40:	b085      	sub	sp, #20
 800af42:	af02      	add	r7, sp, #8
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d011      	beq.n	800af74 <osMessageCreate+0x36>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00d      	beq.n	800af74 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6818      	ldr	r0, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6859      	ldr	r1, [r3, #4]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	2400      	movs	r4, #0
 800af6a:	9400      	str	r4, [sp, #0]
 800af6c:	f000 fe34 	bl	800bbd8 <xQueueGenericCreateStatic>
 800af70:	4603      	mov	r3, r0
 800af72:	e008      	b.n	800af86 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	4619      	mov	r1, r3
 800af80:	f000 fea2 	bl	800bcc8 <xQueueGenericCreate>
 800af84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd90      	pop	{r4, r7, pc}
	...

0800af90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <osMessagePut+0x1e>
    ticks = 1;
 800afaa:	2301      	movs	r3, #1
 800afac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800afae:	f7ff fdd7 	bl	800ab60 <inHandlerMode>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d018      	beq.n	800afea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800afb8:	f107 0210 	add.w	r2, r7, #16
 800afbc:	f107 0108 	add.w	r1, r7, #8
 800afc0:	2300      	movs	r3, #0
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f001 f82a 	bl	800c01c <xQueueGenericSendFromISR>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d001      	beq.n	800afd2 <osMessagePut+0x42>
      return osErrorOS;
 800afce:	23ff      	movs	r3, #255	; 0xff
 800afd0:	e018      	b.n	800b004 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d014      	beq.n	800b002 <osMessagePut+0x72>
 800afd8:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <osMessagePut+0x7c>)
 800afda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	e00b      	b.n	800b002 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800afea:	f107 0108 	add.w	r1, r7, #8
 800afee:	2300      	movs	r3, #0
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f000 ff14 	bl	800be20 <xQueueGenericSend>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b01      	cmp	r3, #1
 800affc:	d001      	beq.n	800b002 <osMessagePut+0x72>
      return osErrorOS;
 800affe:	23ff      	movs	r3, #255	; 0xff
 800b000:	e000      	b.n	800b004 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	e000ed04 	.word	0xe000ed04

0800b010 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b08b      	sub	sp, #44	; 0x2c
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b02a:	2380      	movs	r3, #128	; 0x80
 800b02c:	617b      	str	r3, [r7, #20]
    return event;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	461c      	mov	r4, r3
 800b032:	f107 0314 	add.w	r3, r7, #20
 800b036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b03a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b03e:	e054      	b.n	800b0ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b040:	2300      	movs	r3, #0
 800b042:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b04e:	d103      	bne.n	800b058 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b054:	627b      	str	r3, [r7, #36]	; 0x24
 800b056:	e009      	b.n	800b06c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <osMessageGet+0x5c>
      ticks = 1;
 800b068:	2301      	movs	r3, #1
 800b06a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b06c:	f7ff fd78 	bl	800ab60 <inHandlerMode>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d01c      	beq.n	800b0b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b076:	f107 0220 	add.w	r2, r7, #32
 800b07a:	f107 0314 	add.w	r3, r7, #20
 800b07e:	3304      	adds	r3, #4
 800b080:	4619      	mov	r1, r3
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f001 fadc 	bl	800c640 <xQueueReceiveFromISR>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d102      	bne.n	800b094 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b08e:	2310      	movs	r3, #16
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	e001      	b.n	800b098 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b094:	2300      	movs	r3, #0
 800b096:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d01d      	beq.n	800b0da <osMessageGet+0xca>
 800b09e:	4b15      	ldr	r3, [pc, #84]	; (800b0f4 <osMessageGet+0xe4>)
 800b0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	e014      	b.n	800b0da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b0b0:	f107 0314 	add.w	r3, r7, #20
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	68b8      	ldr	r0, [r7, #8]
 800b0bc:	f001 f8d4 	bl	800c268 <xQueueReceive>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d102      	bne.n	800b0cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b0c6:	2310      	movs	r3, #16
 800b0c8:	617b      	str	r3, [r7, #20]
 800b0ca:	e006      	b.n	800b0da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <osMessageGet+0xc6>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e000      	b.n	800b0d8 <osMessageGet+0xc8>
 800b0d6:	2340      	movs	r3, #64	; 0x40
 800b0d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	461c      	mov	r4, r3
 800b0de:	f107 0314 	add.w	r3, r7, #20
 800b0e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	372c      	adds	r7, #44	; 0x2c
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd90      	pop	{r4, r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	e000ed04 	.word	0xe000ed04

0800b0f8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b100:	f7ff fd2e 	bl	800ab60 <inHandlerMode>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 fb36 	bl	800c77c <uxQueueMessagesWaitingFromISR>
 800b110:	4603      	mov	r3, r0
 800b112:	e003      	b.n	800b11c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f001 fb13 	bl	800c740 <uxQueueMessagesWaiting>
 800b11a:	4603      	mov	r3, r0
  }
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b12c:	f7ff fd18 	bl	800ab60 <inHandlerMode>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <osMessageDelete+0x16>
    return osErrorISR;
 800b136:	2382      	movs	r3, #130	; 0x82
 800b138:	e003      	b.n	800b142 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 fb3c 	bl	800c7b8 <vQueueDelete>

  return osOK; 
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	; 0x28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b158:	f001 ff5c 	bl	800d014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b15c:	4b58      	ldr	r3, [pc, #352]	; (800b2c0 <pvPortMalloc+0x174>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b164:	f000 f910 	bl	800b388 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b168:	4b56      	ldr	r3, [pc, #344]	; (800b2c4 <pvPortMalloc+0x178>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4013      	ands	r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	f040 808e 	bne.w	800b292 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01d      	beq.n	800b1b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b17c:	2208      	movs	r2, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4413      	add	r3, r2
 800b182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d014      	beq.n	800b1b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f023 0307 	bic.w	r3, r3, #7
 800b194:	3308      	adds	r3, #8
 800b196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f003 0307 	and.w	r3, r3, #7
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00a      	beq.n	800b1b8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b1b4:	bf00      	nop
 800b1b6:	e7fe      	b.n	800b1b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d069      	beq.n	800b292 <pvPortMalloc+0x146>
 800b1be:	4b42      	ldr	r3, [pc, #264]	; (800b2c8 <pvPortMalloc+0x17c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d864      	bhi.n	800b292 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1c8:	4b40      	ldr	r3, [pc, #256]	; (800b2cc <pvPortMalloc+0x180>)
 800b1ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1cc:	4b3f      	ldr	r3, [pc, #252]	; (800b2cc <pvPortMalloc+0x180>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1d2:	e004      	b.n	800b1de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d903      	bls.n	800b1f0 <pvPortMalloc+0xa4>
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1f1      	bne.n	800b1d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1f0:	4b33      	ldr	r3, [pc, #204]	; (800b2c0 <pvPortMalloc+0x174>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d04b      	beq.n	800b292 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2208      	movs	r2, #8
 800b200:	4413      	add	r3, r2
 800b202:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	1ad2      	subs	r2, r2, r3
 800b214:	2308      	movs	r3, #8
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	429a      	cmp	r2, r3
 800b21a:	d91f      	bls.n	800b25c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4413      	add	r3, r2
 800b222:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	f003 0307 	and.w	r3, r3, #7
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <pvPortMalloc+0xf8>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	613b      	str	r3, [r7, #16]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	1ad2      	subs	r2, r2, r3
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b256:	69b8      	ldr	r0, [r7, #24]
 800b258:	f000 f8f8 	bl	800b44c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b25c:	4b1a      	ldr	r3, [pc, #104]	; (800b2c8 <pvPortMalloc+0x17c>)
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	4a18      	ldr	r2, [pc, #96]	; (800b2c8 <pvPortMalloc+0x17c>)
 800b268:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b26a:	4b17      	ldr	r3, [pc, #92]	; (800b2c8 <pvPortMalloc+0x17c>)
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	4b18      	ldr	r3, [pc, #96]	; (800b2d0 <pvPortMalloc+0x184>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	429a      	cmp	r2, r3
 800b274:	d203      	bcs.n	800b27e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b276:	4b14      	ldr	r3, [pc, #80]	; (800b2c8 <pvPortMalloc+0x17c>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a15      	ldr	r2, [pc, #84]	; (800b2d0 <pvPortMalloc+0x184>)
 800b27c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	4b10      	ldr	r3, [pc, #64]	; (800b2c4 <pvPortMalloc+0x178>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	431a      	orrs	r2, r3
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b292:	f001 fecd 	bl	800d030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	f003 0307 	and.w	r3, r3, #7
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00a      	beq.n	800b2b6 <pvPortMalloc+0x16a>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <pvPortMalloc+0x168>
	return pvReturn;
 800b2b6:	69fb      	ldr	r3, [r7, #28]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3728      	adds	r7, #40	; 0x28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	24040498 	.word	0x24040498
 800b2c4:	240404a4 	.word	0x240404a4
 800b2c8:	2404049c 	.word	0x2404049c
 800b2cc:	24040490 	.word	0x24040490
 800b2d0:	240404a0 	.word	0x240404a0

0800b2d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d048      	beq.n	800b378 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2e6:	2308      	movs	r3, #8
 800b2e8:	425b      	negs	r3, r3
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	4b21      	ldr	r3, [pc, #132]	; (800b380 <vPortFree+0xac>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10a      	bne.n	800b318 <vPortFree+0x44>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	60fb      	str	r3, [r7, #12]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00a      	beq.n	800b336 <vPortFree+0x62>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60bb      	str	r3, [r7, #8]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	4b11      	ldr	r3, [pc, #68]	; (800b380 <vPortFree+0xac>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4013      	ands	r3, r2
 800b340:	2b00      	cmp	r3, #0
 800b342:	d019      	beq.n	800b378 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d115      	bne.n	800b378 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <vPortFree+0xac>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	43db      	mvns	r3, r3
 800b356:	401a      	ands	r2, r3
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b35c:	f001 fe5a 	bl	800d014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	4b07      	ldr	r3, [pc, #28]	; (800b384 <vPortFree+0xb0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4413      	add	r3, r2
 800b36a:	4a06      	ldr	r2, [pc, #24]	; (800b384 <vPortFree+0xb0>)
 800b36c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b36e:	6938      	ldr	r0, [r7, #16]
 800b370:	f000 f86c 	bl	800b44c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b374:	f001 fe5c 	bl	800d030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b378:	bf00      	nop
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	240404a4 	.word	0x240404a4
 800b384:	2404049c 	.word	0x2404049c

0800b388 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b38e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b392:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b394:	4b27      	ldr	r3, [pc, #156]	; (800b434 <prvHeapInit+0xac>)
 800b396:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00c      	beq.n	800b3bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3307      	adds	r3, #7
 800b3a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 0307 	bic.w	r3, r3, #7
 800b3ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	4a1f      	ldr	r2, [pc, #124]	; (800b434 <prvHeapInit+0xac>)
 800b3b8:	4413      	add	r3, r2
 800b3ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3c0:	4a1d      	ldr	r2, [pc, #116]	; (800b438 <prvHeapInit+0xb0>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3c6:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <prvHeapInit+0xb0>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3d4:	2208      	movs	r2, #8
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	1a9b      	subs	r3, r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f023 0307 	bic.w	r3, r3, #7
 800b3e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4a15      	ldr	r2, [pc, #84]	; (800b43c <prvHeapInit+0xb4>)
 800b3e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3ea:	4b14      	ldr	r3, [pc, #80]	; (800b43c <prvHeapInit+0xb4>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3f2:	4b12      	ldr	r3, [pc, #72]	; (800b43c <prvHeapInit+0xb4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	1ad2      	subs	r2, r2, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <prvHeapInit+0xb4>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	4a0a      	ldr	r2, [pc, #40]	; (800b440 <prvHeapInit+0xb8>)
 800b416:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	4a09      	ldr	r2, [pc, #36]	; (800b444 <prvHeapInit+0xbc>)
 800b41e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <prvHeapInit+0xc0>)
 800b422:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b426:	601a      	str	r2, [r3, #0]
}
 800b428:	bf00      	nop
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	24000490 	.word	0x24000490
 800b438:	24040490 	.word	0x24040490
 800b43c:	24040498 	.word	0x24040498
 800b440:	240404a0 	.word	0x240404a0
 800b444:	2404049c 	.word	0x2404049c
 800b448:	240404a4 	.word	0x240404a4

0800b44c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b454:	4b28      	ldr	r3, [pc, #160]	; (800b4f8 <prvInsertBlockIntoFreeList+0xac>)
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	e002      	b.n	800b460 <prvInsertBlockIntoFreeList+0x14>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d8f7      	bhi.n	800b45a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	4413      	add	r3, r2
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d108      	bne.n	800b48e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	441a      	add	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	441a      	add	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d118      	bne.n	800b4d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <prvInsertBlockIntoFreeList+0xb0>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d00d      	beq.n	800b4ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	441a      	add	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	e008      	b.n	800b4dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4ca:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <prvInsertBlockIntoFreeList+0xb0>)
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	e003      	b.n	800b4dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d002      	beq.n	800b4ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4ea:	bf00      	nop
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	24040490 	.word	0x24040490
 800b4fc:	24040498 	.word	0x24040498

0800b500 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f103 0208 	add.w	r2, r3, #8
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b518:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f103 0208 	add.w	r2, r3, #8
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f103 0208 	add.w	r2, r3, #8
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b54e:	bf00      	nop
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b55a:	b480      	push	{r7}
 800b55c:	b085      	sub	sp, #20
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	601a      	str	r2, [r3, #0]
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b085      	sub	sp, #20
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5b8:	d103      	bne.n	800b5c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	60fb      	str	r3, [r7, #12]
 800b5c0:	e00c      	b.n	800b5dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	60fb      	str	r3, [r7, #12]
 800b5c8:	e002      	b.n	800b5d0 <vListInsert+0x2e>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d2f6      	bcs.n	800b5ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	683a      	ldr	r2, [r7, #0]
 800b5f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	601a      	str	r2, [r3, #0]
}
 800b608:	bf00      	nop
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6892      	ldr	r2, [r2, #8]
 800b62a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	6852      	ldr	r2, [r2, #4]
 800b634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d103      	bne.n	800b648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	689a      	ldr	r2, [r3, #8]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	1e5a      	subs	r2, r3, #1
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3b04      	subs	r3, #4
 800b678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3b04      	subs	r3, #4
 800b686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f023 0201 	bic.w	r2, r3, #1
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3b04      	subs	r3, #4
 800b696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b698:	4a0c      	ldr	r2, [pc, #48]	; (800b6cc <pxPortInitialiseStack+0x64>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3b14      	subs	r3, #20
 800b6a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3b04      	subs	r3, #4
 800b6ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f06f 0202 	mvn.w	r2, #2
 800b6b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3b20      	subs	r3, #32
 800b6bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6be:	68fb      	ldr	r3, [r7, #12]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	0800b6d1 	.word	0x0800b6d1

0800b6d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6da:	4b12      	ldr	r3, [pc, #72]	; (800b724 <prvTaskExitError+0x54>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6e2:	d00a      	beq.n	800b6fa <prvTaskExitError+0x2a>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60fb      	str	r3, [r7, #12]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <prvTaskExitError+0x28>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	60bb      	str	r3, [r7, #8]
}
 800b70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b70e:	bf00      	nop
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0fc      	beq.n	800b710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	24000024 	.word	0x24000024
	...

0800b730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b730:	4b07      	ldr	r3, [pc, #28]	; (800b750 <pxCurrentTCBConst2>)
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	6808      	ldr	r0, [r1, #0]
 800b736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73a:	f380 8809 	msr	PSP, r0
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8811 	msr	BASEPRI, r0
 800b74a:	4770      	bx	lr
 800b74c:	f3af 8000 	nop.w

0800b750 <pxCurrentTCBConst2>:
 800b750:	240404b0 	.word	0x240404b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop

0800b758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b758:	4808      	ldr	r0, [pc, #32]	; (800b77c <prvPortStartFirstTask+0x24>)
 800b75a:	6800      	ldr	r0, [r0, #0]
 800b75c:	6800      	ldr	r0, [r0, #0]
 800b75e:	f380 8808 	msr	MSP, r0
 800b762:	f04f 0000 	mov.w	r0, #0
 800b766:	f380 8814 	msr	CONTROL, r0
 800b76a:	b662      	cpsie	i
 800b76c:	b661      	cpsie	f
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	df00      	svc	0
 800b778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b77a:	bf00      	nop
 800b77c:	e000ed08 	.word	0xe000ed08

0800b780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b786:	4b46      	ldr	r3, [pc, #280]	; (800b8a0 <xPortStartScheduler+0x120>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a46      	ldr	r2, [pc, #280]	; (800b8a4 <xPortStartScheduler+0x124>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d10a      	bne.n	800b7a6 <xPortStartScheduler+0x26>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	613b      	str	r3, [r7, #16]
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7a6:	4b3e      	ldr	r3, [pc, #248]	; (800b8a0 <xPortStartScheduler+0x120>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a3f      	ldr	r2, [pc, #252]	; (800b8a8 <xPortStartScheduler+0x128>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d10a      	bne.n	800b7c6 <xPortStartScheduler+0x46>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	60fb      	str	r3, [r7, #12]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7c6:	4b39      	ldr	r3, [pc, #228]	; (800b8ac <xPortStartScheduler+0x12c>)
 800b7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	22ff      	movs	r2, #255	; 0xff
 800b7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	4b31      	ldr	r3, [pc, #196]	; (800b8b0 <xPortStartScheduler+0x130>)
 800b7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7ee:	4b31      	ldr	r3, [pc, #196]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7f4:	e009      	b.n	800b80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b7f6:	4b2f      	ldr	r3, [pc, #188]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	4a2d      	ldr	r2, [pc, #180]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b800:	78fb      	ldrb	r3, [r7, #3]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	b2db      	uxtb	r3, r3
 800b808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b80a:	78fb      	ldrb	r3, [r7, #3]
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b812:	2b80      	cmp	r3, #128	; 0x80
 800b814:	d0ef      	beq.n	800b7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b816:	4b27      	ldr	r3, [pc, #156]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1c3 0307 	rsb	r3, r3, #7
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d00a      	beq.n	800b838 <xPortStartScheduler+0xb8>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60bb      	str	r3, [r7, #8]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b838:	4b1e      	ldr	r3, [pc, #120]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	021b      	lsls	r3, r3, #8
 800b83e:	4a1d      	ldr	r2, [pc, #116]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b842:	4b1c      	ldr	r3, [pc, #112]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b84a:	4a1a      	ldr	r2, [pc, #104]	; (800b8b4 <xPortStartScheduler+0x134>)
 800b84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	b2da      	uxtb	r2, r3
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b856:	4b18      	ldr	r3, [pc, #96]	; (800b8b8 <xPortStartScheduler+0x138>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a17      	ldr	r2, [pc, #92]	; (800b8b8 <xPortStartScheduler+0x138>)
 800b85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <xPortStartScheduler+0x138>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a14      	ldr	r2, [pc, #80]	; (800b8b8 <xPortStartScheduler+0x138>)
 800b868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b86e:	f000 f8dd 	bl	800ba2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b872:	4b12      	ldr	r3, [pc, #72]	; (800b8bc <xPortStartScheduler+0x13c>)
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b878:	f000 f8fc 	bl	800ba74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b87c:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <xPortStartScheduler+0x140>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a0f      	ldr	r2, [pc, #60]	; (800b8c0 <xPortStartScheduler+0x140>)
 800b882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b888:	f7ff ff66 	bl	800b758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b88c:	f001 fd46 	bl	800d31c <vTaskSwitchContext>
	prvTaskExitError();
 800b890:	f7ff ff1e 	bl	800b6d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	e000ed00 	.word	0xe000ed00
 800b8a4:	410fc271 	.word	0x410fc271
 800b8a8:	410fc270 	.word	0x410fc270
 800b8ac:	e000e400 	.word	0xe000e400
 800b8b0:	240404a8 	.word	0x240404a8
 800b8b4:	240404ac 	.word	0x240404ac
 800b8b8:	e000ed20 	.word	0xe000ed20
 800b8bc:	24000024 	.word	0x24000024
 800b8c0:	e000ef34 	.word	0xe000ef34

0800b8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	607b      	str	r3, [r7, #4]
}
 800b8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <vPortEnterCritical+0x58>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	4a0d      	ldr	r2, [pc, #52]	; (800b91c <vPortEnterCritical+0x58>)
 800b8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8e8:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <vPortEnterCritical+0x58>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d10f      	bne.n	800b910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8f0:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <vPortEnterCritical+0x5c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <vPortEnterCritical+0x4c>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	603b      	str	r3, [r7, #0]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <vPortEnterCritical+0x4a>
	}
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	24000024 	.word	0x24000024
 800b920:	e000ed04 	.word	0xe000ed04

0800b924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b92a:	4b12      	ldr	r3, [pc, #72]	; (800b974 <vPortExitCritical+0x50>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <vPortExitCritical+0x24>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	607b      	str	r3, [r7, #4]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b948:	4b0a      	ldr	r3, [pc, #40]	; (800b974 <vPortExitCritical+0x50>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	4a09      	ldr	r2, [pc, #36]	; (800b974 <vPortExitCritical+0x50>)
 800b950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b952:	4b08      	ldr	r3, [pc, #32]	; (800b974 <vPortExitCritical+0x50>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <vPortExitCritical+0x42>
 800b95a:	2300      	movs	r3, #0
 800b95c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	24000024 	.word	0x24000024
	...

0800b980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b980:	f3ef 8009 	mrs	r0, PSP
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <pxCurrentTCBConst>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f01e 0f10 	tst.w	lr, #16
 800b990:	bf08      	it	eq
 800b992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99a:	6010      	str	r0, [r2, #0]
 800b99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b9a4:	f380 8811 	msr	BASEPRI, r0
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f001 fcb4 	bl	800d31c <vTaskSwitchContext>
 800b9b4:	f04f 0000 	mov.w	r0, #0
 800b9b8:	f380 8811 	msr	BASEPRI, r0
 800b9bc:	bc09      	pop	{r0, r3}
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	6808      	ldr	r0, [r1, #0]
 800b9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c6:	f01e 0f10 	tst.w	lr, #16
 800b9ca:	bf08      	it	eq
 800b9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9d0:	f380 8809 	msr	PSP, r0
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	f3af 8000 	nop.w

0800b9e0 <pxCurrentTCBConst>:
 800b9e0:	240404b0 	.word	0x240404b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop

0800b9e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba02:	f001 fbd3 	bl	800d1ac <xTaskIncrementTick>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba0c:	4b06      	ldr	r3, [pc, #24]	; (800ba28 <SysTick_Handler+0x40>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	2300      	movs	r3, #0
 800ba16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f383 8811 	msr	BASEPRI, r3
}
 800ba1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba20:	bf00      	nop
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	e000ed04 	.word	0xe000ed04

0800ba2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <vPortSetupTimerInterrupt+0x34>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba36:	4b0b      	ldr	r3, [pc, #44]	; (800ba64 <vPortSetupTimerInterrupt+0x38>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <vPortSetupTimerInterrupt+0x3c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a0a      	ldr	r2, [pc, #40]	; (800ba6c <vPortSetupTimerInterrupt+0x40>)
 800ba42:	fba2 2303 	umull	r2, r3, r2, r3
 800ba46:	099b      	lsrs	r3, r3, #6
 800ba48:	4a09      	ldr	r2, [pc, #36]	; (800ba70 <vPortSetupTimerInterrupt+0x44>)
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba4e:	4b04      	ldr	r3, [pc, #16]	; (800ba60 <vPortSetupTimerInterrupt+0x34>)
 800ba50:	2207      	movs	r2, #7
 800ba52:	601a      	str	r2, [r3, #0]
}
 800ba54:	bf00      	nop
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	e000e010 	.word	0xe000e010
 800ba64:	e000e018 	.word	0xe000e018
 800ba68:	24000000 	.word	0x24000000
 800ba6c:	10624dd3 	.word	0x10624dd3
 800ba70:	e000e014 	.word	0xe000e014

0800ba74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba84 <vPortEnableVFP+0x10>
 800ba78:	6801      	ldr	r1, [r0, #0]
 800ba7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba7e:	6001      	str	r1, [r0, #0]
 800ba80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba82:	bf00      	nop
 800ba84:	e000ed88 	.word	0xe000ed88

0800ba88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba8e:	f3ef 8305 	mrs	r3, IPSR
 800ba92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b0f      	cmp	r3, #15
 800ba98:	d914      	bls.n	800bac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba9a:	4a17      	ldr	r2, [pc, #92]	; (800baf8 <vPortValidateInterruptPriority+0x70>)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800baa4:	4b15      	ldr	r3, [pc, #84]	; (800bafc <vPortValidateInterruptPriority+0x74>)
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	7afa      	ldrb	r2, [r7, #11]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d20a      	bcs.n	800bac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bac4:	4b0e      	ldr	r3, [pc, #56]	; (800bb00 <vPortValidateInterruptPriority+0x78>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bacc:	4b0d      	ldr	r3, [pc, #52]	; (800bb04 <vPortValidateInterruptPriority+0x7c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d90a      	bls.n	800baea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	603b      	str	r3, [r7, #0]
}
 800bae6:	bf00      	nop
 800bae8:	e7fe      	b.n	800bae8 <vPortValidateInterruptPriority+0x60>
	}
 800baea:	bf00      	nop
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	e000e3f0 	.word	0xe000e3f0
 800bafc:	240404a8 	.word	0x240404a8
 800bb00:	e000ed0c 	.word	0xe000ed0c
 800bb04:	240404ac 	.word	0x240404ac

0800bb08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <xQueueGenericReset+0x2a>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60bb      	str	r3, [r7, #8]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb32:	f7ff fec7 	bl	800b8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3e:	68f9      	ldr	r1, [r7, #12]
 800bb40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb42:	fb01 f303 	mul.w	r3, r1, r3
 800bb46:	441a      	add	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb62:	3b01      	subs	r3, #1
 800bb64:	68f9      	ldr	r1, [r7, #12]
 800bb66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb68:	fb01 f303 	mul.w	r3, r1, r3
 800bb6c:	441a      	add	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	22ff      	movs	r2, #255	; 0xff
 800bb76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	22ff      	movs	r2, #255	; 0xff
 800bb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d114      	bne.n	800bbb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01a      	beq.n	800bbc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3310      	adds	r3, #16
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 fc4f 	bl	800d438 <xTaskRemoveFromEventList>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d012      	beq.n	800bbc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bba0:	4b0c      	ldr	r3, [pc, #48]	; (800bbd4 <xQueueGenericReset+0xcc>)
 800bba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	e009      	b.n	800bbc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3310      	adds	r3, #16
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fca2 	bl	800b500 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3324      	adds	r3, #36	; 0x24
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff fc9d 	bl	800b500 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbc6:	f7ff fead 	bl	800b924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbca:	2301      	movs	r3, #1
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	e000ed04 	.word	0xe000ed04

0800bbd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08e      	sub	sp, #56	; 0x38
 800bbdc:	af02      	add	r7, sp, #8
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbfe:	bf00      	nop
 800bc00:	e7fe      	b.n	800bc00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc1a:	bf00      	nop
 800bc1c:	e7fe      	b.n	800bc1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <xQueueGenericCreateStatic+0x52>
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <xQueueGenericCreateStatic+0x56>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e000      	b.n	800bc30 <xQueueGenericCreateStatic+0x58>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	623b      	str	r3, [r7, #32]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <xQueueGenericCreateStatic+0x7e>
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d101      	bne.n	800bc5a <xQueueGenericCreateStatic+0x82>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e000      	b.n	800bc5c <xQueueGenericCreateStatic+0x84>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10a      	bne.n	800bc76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	61fb      	str	r3, [r7, #28]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc76:	2348      	movs	r3, #72	; 0x48
 800bc78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2b48      	cmp	r3, #72	; 0x48
 800bc7e:	d00a      	beq.n	800bc96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	61bb      	str	r3, [r7, #24]
}
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00d      	beq.n	800bcbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f845 	bl	800bd48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3730      	adds	r7, #48	; 0x30
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	; 0x28
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	613b      	str	r3, [r7, #16]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	61fb      	str	r3, [r7, #28]
 800bcfc:	e004      	b.n	800bd08 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	fb02 f303 	mul.w	r3, r2, r3
 800bd06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	3348      	adds	r3, #72	; 0x48
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff fa1d 	bl	800b14c <pvPortMalloc>
 800bd12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d011      	beq.n	800bd3e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	3348      	adds	r3, #72	; 0x48
 800bd22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd2c:	79fa      	ldrb	r2, [r7, #7]
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	4613      	mov	r3, r2
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	68b9      	ldr	r1, [r7, #8]
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 f805 	bl	800bd48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd3e:	69bb      	ldr	r3, [r7, #24]
	}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3720      	adds	r7, #32
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	e002      	b.n	800bd6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd76:	2101      	movs	r1, #1
 800bd78:	69b8      	ldr	r0, [r7, #24]
 800bd7a:	f7ff fec5 	bl	800bb08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00e      	beq.n	800bdb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bda6:	2300      	movs	r3, #0
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f837 	bl	800be20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b086      	sub	sp, #24
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6939      	ldr	r1, [r7, #16]
 800bdd2:	6978      	ldr	r0, [r7, #20]
 800bdd4:	f7ff ff78 	bl	800bcc8 <xQueueGenericCreate>
 800bdd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff ffd3 	bl	800bd86 <prvInitialiseMutex>

		return xNewQueue;
 800bde0:	68fb      	ldr	r3, [r7, #12]
	}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b088      	sub	sp, #32
 800bdee:	af02      	add	r7, sp, #8
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	6039      	str	r1, [r7, #0]
 800bdf4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2200      	movs	r2, #0
 800be06:	6939      	ldr	r1, [r7, #16]
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	f7ff fee5 	bl	800bbd8 <xQueueGenericCreateStatic>
 800be0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff ffb8 	bl	800bd86 <prvInitialiseMutex>

		return xNewQueue;
 800be16:	68fb      	ldr	r3, [r7, #12]
	}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be2e:	2300      	movs	r3, #0
 800be30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <xQueueGenericSend+0x32>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d103      	bne.n	800be60 <xQueueGenericSend+0x40>
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <xQueueGenericSend+0x44>
 800be60:	2301      	movs	r3, #1
 800be62:	e000      	b.n	800be66 <xQueueGenericSend+0x46>
 800be64:	2300      	movs	r3, #0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10a      	bne.n	800be80 <xQueueGenericSend+0x60>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b02      	cmp	r3, #2
 800be84:	d103      	bne.n	800be8e <xQueueGenericSend+0x6e>
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d101      	bne.n	800be92 <xQueueGenericSend+0x72>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueGenericSend+0x74>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueGenericSend+0x8e>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	623b      	str	r3, [r7, #32]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beae:	f001 fc7f 	bl	800d7b0 <xTaskGetSchedulerState>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d102      	bne.n	800bebe <xQueueGenericSend+0x9e>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <xQueueGenericSend+0xa2>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e000      	b.n	800bec4 <xQueueGenericSend+0xa4>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xQueueGenericSend+0xbe>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	61fb      	str	r3, [r7, #28]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bede:	f7ff fcf1 	bl	800b8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beea:	429a      	cmp	r2, r3
 800beec:	d302      	bcc.n	800bef4 <xQueueGenericSend+0xd4>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d129      	bne.n	800bf48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800befa:	f000 fc98 	bl	800c82e <prvCopyDataToQueue>
 800befe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d010      	beq.n	800bf2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	3324      	adds	r3, #36	; 0x24
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f001 fa93 	bl	800d438 <xTaskRemoveFromEventList>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d013      	beq.n	800bf40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf18:	4b3f      	ldr	r3, [pc, #252]	; (800c018 <xQueueGenericSend+0x1f8>)
 800bf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	e00a      	b.n	800bf40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d007      	beq.n	800bf40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf30:	4b39      	ldr	r3, [pc, #228]	; (800c018 <xQueueGenericSend+0x1f8>)
 800bf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf40:	f7ff fcf0 	bl	800b924 <vPortExitCritical>
				return pdPASS;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e063      	b.n	800c010 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d103      	bne.n	800bf56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf4e:	f7ff fce9 	bl	800b924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	e05c      	b.n	800c010 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d106      	bne.n	800bf6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf5c:	f107 0314 	add.w	r3, r7, #20
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 facb 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf66:	2301      	movs	r3, #1
 800bf68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf6a:	f7ff fcdb 	bl	800b924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf6e:	f001 f851 	bl	800d014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf72:	f7ff fca7 	bl	800b8c4 <vPortEnterCritical>
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf7c:	b25b      	sxtb	r3, r3
 800bf7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf82:	d103      	bne.n	800bf8c <xQueueGenericSend+0x16c>
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf98:	d103      	bne.n	800bfa2 <xQueueGenericSend+0x182>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfa2:	f7ff fcbf 	bl	800b924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfa6:	1d3a      	adds	r2, r7, #4
 800bfa8:	f107 0314 	add.w	r3, r7, #20
 800bfac:	4611      	mov	r1, r2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 faba 	bl	800d528 <xTaskCheckForTimeOut>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d124      	bne.n	800c004 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfbc:	f000 fd2f 	bl	800ca1e <prvIsQueueFull>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d018      	beq.n	800bff8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	3310      	adds	r3, #16
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fa0e 	bl	800d3f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfd6:	f000 fcba 	bl	800c94e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfda:	f001 f829 	bl	800d030 <xTaskResumeAll>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f47f af7c 	bne.w	800bede <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <xQueueGenericSend+0x1f8>)
 800bfe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	e772      	b.n	800bede <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bffa:	f000 fca8 	bl	800c94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bffe:	f001 f817 	bl	800d030 <xTaskResumeAll>
 800c002:	e76c      	b.n	800bede <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c006:	f000 fca2 	bl	800c94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c00a:	f001 f811 	bl	800d030 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c00e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c010:	4618      	mov	r0, r3
 800c012:	3738      	adds	r7, #56	; 0x38
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08e      	sub	sp, #56	; 0x38
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d103      	bne.n	800c058 <xQueueGenericSendFromISR+0x3c>
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <xQueueGenericSendFromISR+0x40>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <xQueueGenericSendFromISR+0x42>
 800c05c:	2300      	movs	r3, #0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	623b      	str	r3, [r7, #32]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d103      	bne.n	800c086 <xQueueGenericSendFromISR+0x6a>
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	2b01      	cmp	r3, #1
 800c084:	d101      	bne.n	800c08a <xQueueGenericSendFromISR+0x6e>
 800c086:	2301      	movs	r3, #1
 800c088:	e000      	b.n	800c08c <xQueueGenericSendFromISR+0x70>
 800c08a:	2300      	movs	r3, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	61fb      	str	r3, [r7, #28]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0a6:	f7ff fcef 	bl	800ba88 <vPortValidateInterruptPriority>
	__asm volatile
 800c0aa:	f3ef 8211 	mrs	r2, BASEPRI
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	61ba      	str	r2, [r7, #24]
 800c0c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <xQueueGenericSendFromISR+0xbc>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d12c      	bne.n	800c132 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0e8:	f000 fba1 	bl	800c82e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0f4:	d112      	bne.n	800c11c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d016      	beq.n	800c12c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	3324      	adds	r3, #36	; 0x24
 800c102:	4618      	mov	r0, r3
 800c104:	f001 f998 	bl	800d438 <xTaskRemoveFromEventList>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00e      	beq.n	800c12c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00b      	beq.n	800c12c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	e007      	b.n	800c12c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c11c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c120:	3301      	adds	r3, #1
 800c122:	b2db      	uxtb	r3, r3
 800c124:	b25a      	sxtb	r2, r3
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c12c:	2301      	movs	r3, #1
 800c12e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c130:	e001      	b.n	800c136 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c132:	2300      	movs	r3, #0
 800c134:	637b      	str	r3, [r7, #52]	; 0x34
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	f383 8811 	msr	BASEPRI, r3
}
 800c140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c144:	4618      	mov	r0, r3
 800c146:	3738      	adds	r7, #56	; 0x38
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08e      	sub	sp, #56	; 0x38
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	623b      	str	r3, [r7, #32]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00a      	beq.n	800c194 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	61fb      	str	r3, [r7, #28]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d103      	bne.n	800c1a4 <xQueueGiveFromISR+0x58>
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <xQueueGiveFromISR+0x5c>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e000      	b.n	800c1aa <xQueueGiveFromISR+0x5e>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	61bb      	str	r3, [r7, #24]
}
 800c1c0:	bf00      	nop
 800c1c2:	e7fe      	b.n	800c1c2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1c4:	f7ff fc60 	bl	800ba88 <vPortValidateInterruptPriority>
	__asm volatile
 800c1c8:	f3ef 8211 	mrs	r2, BASEPRI
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	617a      	str	r2, [r7, #20]
 800c1de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c1e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d22b      	bcs.n	800c24c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	1c5a      	adds	r2, r3, #1
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c206:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c20e:	d112      	bne.n	800c236 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d016      	beq.n	800c246 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21a:	3324      	adds	r3, #36	; 0x24
 800c21c:	4618      	mov	r0, r3
 800c21e:	f001 f90b 	bl	800d438 <xTaskRemoveFromEventList>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00b      	beq.n	800c246 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2201      	movs	r2, #1
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	e007      	b.n	800c246 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	b25a      	sxtb	r2, r3
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c246:	2301      	movs	r3, #1
 800c248:	637b      	str	r3, [r7, #52]	; 0x34
 800c24a:	e001      	b.n	800c250 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	637b      	str	r3, [r7, #52]	; 0x34
 800c250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c252:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f383 8811 	msr	BASEPRI, r3
}
 800c25a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3738      	adds	r7, #56	; 0x38
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08c      	sub	sp, #48	; 0x30
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <xQueueReceive+0x30>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	623b      	str	r3, [r7, #32]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <xQueueReceive+0x3e>
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <xQueueReceive+0x42>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <xQueueReceive+0x44>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueReceive+0x5e>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	61fb      	str	r3, [r7, #28]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2c6:	f001 fa73 	bl	800d7b0 <xTaskGetSchedulerState>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <xQueueReceive+0x6e>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <xQueueReceive+0x72>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueReceive+0x74>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueReceive+0x8e>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	61bb      	str	r3, [r7, #24]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2f6:	f7ff fae5 	bl	800b8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01f      	beq.n	800c346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30a:	f000 fafa 	bl	800c902 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	1e5a      	subs	r2, r3, #1
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	3310      	adds	r3, #16
 800c322:	4618      	mov	r0, r3
 800c324:	f001 f888 	bl	800d438 <xTaskRemoveFromEventList>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c32e:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <xQueueReceive+0x1bc>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c33e:	f7ff faf1 	bl	800b924 <vPortExitCritical>
				return pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	e069      	b.n	800c41a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d103      	bne.n	800c354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c34c:	f7ff faea 	bl	800b924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c350:	2300      	movs	r3, #0
 800c352:	e062      	b.n	800c41a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c35a:	f107 0310 	add.w	r3, r7, #16
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 f8cc 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c368:	f7ff fadc 	bl	800b924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c36c:	f000 fe52 	bl	800d014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c370:	f7ff faa8 	bl	800b8c4 <vPortEnterCritical>
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c37a:	b25b      	sxtb	r3, r3
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c380:	d103      	bne.n	800c38a <xQueueReceive+0x122>
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c390:	b25b      	sxtb	r3, r3
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c396:	d103      	bne.n	800c3a0 <xQueueReceive+0x138>
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a0:	f7ff fac0 	bl	800b924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3a4:	1d3a      	adds	r2, r7, #4
 800c3a6:	f107 0310 	add.w	r3, r7, #16
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f001 f8bb 	bl	800d528 <xTaskCheckForTimeOut>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d123      	bne.n	800c400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ba:	f000 fb1a 	bl	800c9f2 <prvIsQueueEmpty>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d017      	beq.n	800c3f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	3324      	adds	r3, #36	; 0x24
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f001 f80f 	bl	800d3f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d4:	f000 fabb 	bl	800c94e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3d8:	f000 fe2a 	bl	800d030 <xTaskResumeAll>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d189      	bne.n	800c2f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c3e2:	4b10      	ldr	r3, [pc, #64]	; (800c424 <xQueueReceive+0x1bc>)
 800c3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	e780      	b.n	800c2f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f6:	f000 faaa 	bl	800c94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3fa:	f000 fe19 	bl	800d030 <xTaskResumeAll>
 800c3fe:	e77a      	b.n	800c2f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f000 faa4 	bl	800c94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c406:	f000 fe13 	bl	800d030 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c40c:	f000 faf1 	bl	800c9f2 <prvIsQueueEmpty>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	f43f af6f 	beq.w	800c2f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3730      	adds	r7, #48	; 0x30
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	; 0x38
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c432:	2300      	movs	r3, #0
 800c434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	623b      	str	r3, [r7, #32]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00a      	beq.n	800c478 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	61fb      	str	r3, [r7, #28]
}
 800c474:	bf00      	nop
 800c476:	e7fe      	b.n	800c476 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c478:	f001 f99a 	bl	800d7b0 <xTaskGetSchedulerState>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d102      	bne.n	800c488 <xQueueSemaphoreTake+0x60>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <xQueueSemaphoreTake+0x64>
 800c488:	2301      	movs	r3, #1
 800c48a:	e000      	b.n	800c48e <xQueueSemaphoreTake+0x66>
 800c48c:	2300      	movs	r3, #0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	61bb      	str	r3, [r7, #24]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a8:	f7ff fa0c 	bl	800b8c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d024      	beq.n	800c502 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	1e5a      	subs	r2, r3, #1
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d104      	bne.n	800c4d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c4c8:	f001 fb30 	bl	800db2c <pvTaskIncrementMutexHeldCount>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00f      	beq.n	800c4fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	3310      	adds	r3, #16
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 ffaa 	bl	800d438 <xTaskRemoveFromEventList>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4ea:	4b54      	ldr	r3, [pc, #336]	; (800c63c <xQueueSemaphoreTake+0x214>)
 800c4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4fa:	f7ff fa13 	bl	800b924 <vPortExitCritical>
				return pdPASS;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e097      	b.n	800c632 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d111      	bne.n	800c52c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	617b      	str	r3, [r7, #20]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c524:	f7ff f9fe 	bl	800b924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c528:	2300      	movs	r3, #0
 800c52a:	e082      	b.n	800c632 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c532:	f107 030c 	add.w	r3, r7, #12
 800c536:	4618      	mov	r0, r3
 800c538:	f000 ffe0 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c540:	f7ff f9f0 	bl	800b924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c544:	f000 fd66 	bl	800d014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c548:	f7ff f9bc 	bl	800b8c4 <vPortEnterCritical>
 800c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c552:	b25b      	sxtb	r3, r3
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c558:	d103      	bne.n	800c562 <xQueueSemaphoreTake+0x13a>
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c568:	b25b      	sxtb	r3, r3
 800c56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c56e:	d103      	bne.n	800c578 <xQueueSemaphoreTake+0x150>
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c578:	f7ff f9d4 	bl	800b924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c57c:	463a      	mov	r2, r7
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f000 ffcf 	bl	800d528 <xTaskCheckForTimeOut>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d132      	bne.n	800c5f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c592:	f000 fa2e 	bl	800c9f2 <prvIsQueueEmpty>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d026      	beq.n	800c5ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c5a4:	f7ff f98e 	bl	800b8c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f001 f91d 	bl	800d7ec <xTaskPriorityInherit>
 800c5b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c5b4:	f7ff f9b6 	bl	800b924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	3324      	adds	r3, #36	; 0x24
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 ff15 	bl	800d3f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5c8:	f000 f9c1 	bl	800c94e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5cc:	f000 fd30 	bl	800d030 <xTaskResumeAll>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f47f af68 	bne.w	800c4a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c5d8:	4b18      	ldr	r3, [pc, #96]	; (800c63c <xQueueSemaphoreTake+0x214>)
 800c5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	e75e      	b.n	800c4a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5ec:	f000 f9af 	bl	800c94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5f0:	f000 fd1e 	bl	800d030 <xTaskResumeAll>
 800c5f4:	e758      	b.n	800c4a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5f8:	f000 f9a9 	bl	800c94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5fc:	f000 fd18 	bl	800d030 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c602:	f000 f9f6 	bl	800c9f2 <prvIsQueueEmpty>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f43f af4d 	beq.w	800c4a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00d      	beq.n	800c630 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c614:	f7ff f956 	bl	800b8c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c61a:	f000 f8f0 	bl	800c7fe <prvGetDisinheritPriorityAfterTimeout>
 800c61e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c626:	4618      	mov	r0, r3
 800c628:	f001 f9e6 	bl	800d9f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c62c:	f7ff f97a 	bl	800b924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c632:	4618      	mov	r0, r3
 800c634:	3738      	adds	r7, #56	; 0x38
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08e      	sub	sp, #56	; 0x38
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	623b      	str	r3, [r7, #32]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <xQueueReceiveFromISR+0x3a>
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <xQueueReceiveFromISR+0x3e>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <xQueueReceiveFromISR+0x40>
 800c67e:	2300      	movs	r3, #0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	61fb      	str	r3, [r7, #28]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c69a:	f7ff f9f5 	bl	800ba88 <vPortValidateInterruptPriority>
	__asm volatile
 800c69e:	f3ef 8211 	mrs	r2, BASEPRI
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	61ba      	str	r2, [r7, #24]
 800c6b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c6b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d02f      	beq.n	800c726 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6d4:	f000 f915 	bl	800c902 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	1e5a      	subs	r2, r3, #1
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c6e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6e8:	d112      	bne.n	800c710 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d016      	beq.n	800c720 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	3310      	adds	r3, #16
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 fe9e 	bl	800d438 <xTaskRemoveFromEventList>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00e      	beq.n	800c720 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00b      	beq.n	800c720 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	e007      	b.n	800c720 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c714:	3301      	adds	r3, #1
 800c716:	b2db      	uxtb	r3, r3
 800c718:	b25a      	sxtb	r2, r3
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c720:	2301      	movs	r3, #1
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
 800c724:	e001      	b.n	800c72a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c726:	2300      	movs	r3, #0
 800c728:	637b      	str	r3, [r7, #52]	; 0x34
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	f383 8811 	msr	BASEPRI, r3
}
 800c734:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3738      	adds	r7, #56	; 0x38
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60bb      	str	r3, [r7, #8]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c764:	f7ff f8ae 	bl	800b8c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c76e:	f7ff f8d9 	bl	800b924 <vPortExitCritical>

	return uxReturn;
 800c772:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60fb      	str	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c7aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <vQueueDelete+0x28>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	60bb      	str	r3, [r7, #8]
}
 800c7dc:	bf00      	nop
 800c7de:	e7fe      	b.n	800c7de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f935 	bl	800ca50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7fe fd6f 	bl	800b2d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c7fe:	b480      	push	{r7}
 800c800:	b085      	sub	sp, #20
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d006      	beq.n	800c81c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f1c3 0307 	rsb	r3, r3, #7
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	e001      	b.n	800c820 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c81c:	2300      	movs	r3, #0
 800c81e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c820:	68fb      	ldr	r3, [r7, #12]
	}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b086      	sub	sp, #24
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c83a:	2300      	movs	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d10d      	bne.n	800c868 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d14d      	bne.n	800c8f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f847 	bl	800d8ec <xTaskPriorityDisinherit>
 800c85e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	609a      	str	r2, [r3, #8]
 800c866:	e043      	b.n	800c8f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d119      	bne.n	800c8a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6858      	ldr	r0, [r3, #4]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c876:	461a      	mov	r2, r3
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	f014 f865 	bl	8020948 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c886:	441a      	add	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	429a      	cmp	r2, r3
 800c896:	d32b      	bcc.n	800c8f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	605a      	str	r2, [r3, #4]
 800c8a0:	e026      	b.n	800c8f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68d8      	ldr	r0, [r3, #12]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	f014 f84b 	bl	8020948 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	425b      	negs	r3, r3
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d207      	bcs.n	800c8de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d6:	425b      	negs	r3, r3
 800c8d8:	441a      	add	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d105      	bne.n	800c8f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8f8:	697b      	ldr	r3, [r7, #20]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c910:	2b00      	cmp	r3, #0
 800c912:	d018      	beq.n	800c946 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	441a      	add	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68da      	ldr	r2, [r3, #12]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d303      	bcc.n	800c936 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68d9      	ldr	r1, [r3, #12]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	461a      	mov	r2, r3
 800c940:	6838      	ldr	r0, [r7, #0]
 800c942:	f014 f801 	bl	8020948 <memcpy>
	}
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c956:	f7fe ffb5 	bl	800b8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c960:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c962:	e011      	b.n	800c988 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d012      	beq.n	800c992 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3324      	adds	r3, #36	; 0x24
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fd61 	bl	800d438 <xTaskRemoveFromEventList>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c97c:	f000 fe36 	bl	800d5ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	3b01      	subs	r3, #1
 800c984:	b2db      	uxtb	r3, r3
 800c986:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dce9      	bgt.n	800c964 <prvUnlockQueue+0x16>
 800c990:	e000      	b.n	800c994 <prvUnlockQueue+0x46>
					break;
 800c992:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	22ff      	movs	r2, #255	; 0xff
 800c998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c99c:	f7fe ffc2 	bl	800b924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9a0:	f7fe ff90 	bl	800b8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9ac:	e011      	b.n	800c9d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d012      	beq.n	800c9dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3310      	adds	r3, #16
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fd3c 	bl	800d438 <xTaskRemoveFromEventList>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9c6:	f000 fe11 	bl	800d5ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9ca:	7bbb      	ldrb	r3, [r7, #14]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dce9      	bgt.n	800c9ae <prvUnlockQueue+0x60>
 800c9da:	e000      	b.n	800c9de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	22ff      	movs	r2, #255	; 0xff
 800c9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9e6:	f7fe ff9d 	bl	800b924 <vPortExitCritical>
}
 800c9ea:	bf00      	nop
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9fa:	f7fe ff63 	bl	800b8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca06:	2301      	movs	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	e001      	b.n	800ca10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca10:	f7fe ff88 	bl	800b924 <vPortExitCritical>

	return xReturn;
 800ca14:	68fb      	ldr	r3, [r7, #12]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca26:	f7fe ff4d 	bl	800b8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d102      	bne.n	800ca3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca36:	2301      	movs	r3, #1
 800ca38:	60fb      	str	r3, [r7, #12]
 800ca3a:	e001      	b.n	800ca40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca40:	f7fe ff70 	bl	800b924 <vPortExitCritical>

	return xReturn;
 800ca44:	68fb      	ldr	r3, [r7, #12]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e016      	b.n	800ca8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ca5e:	4a10      	ldr	r2, [pc, #64]	; (800caa0 <vQueueUnregisterQueue+0x50>)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	4413      	add	r3, r2
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d10b      	bne.n	800ca86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ca6e:	4a0c      	ldr	r2, [pc, #48]	; (800caa0 <vQueueUnregisterQueue+0x50>)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2100      	movs	r1, #0
 800ca74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ca78:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <vQueueUnregisterQueue+0x50>)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	4413      	add	r3, r2
 800ca80:	2200      	movs	r2, #0
 800ca82:	605a      	str	r2, [r3, #4]
				break;
 800ca84:	e006      	b.n	800ca94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b07      	cmp	r3, #7
 800ca90:	d9e5      	bls.n	800ca5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	24045d84 	.word	0x24045d84

0800caa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08e      	sub	sp, #56	; 0x38
 800caa8:	af04      	add	r7, sp, #16
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10a      	bne.n	800cace <xTaskCreateStatic+0x2a>
	__asm volatile
 800cab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	623b      	str	r3, [r7, #32]
}
 800caca:	bf00      	nop
 800cacc:	e7fe      	b.n	800cacc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10a      	bne.n	800caea <xTaskCreateStatic+0x46>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	61fb      	str	r3, [r7, #28]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800caea:	2354      	movs	r3, #84	; 0x54
 800caec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2b54      	cmp	r3, #84	; 0x54
 800caf2:	d00a      	beq.n	800cb0a <xTaskCreateStatic+0x66>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	61bb      	str	r3, [r7, #24]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d01e      	beq.n	800cb50 <xTaskCreateStatic+0xac>
 800cb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d01b      	beq.n	800cb50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	2202      	movs	r2, #2
 800cb26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	9303      	str	r3, [sp, #12]
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	f107 0314 	add.w	r3, r7, #20
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f000 f850 	bl	800cbe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb4a:	f000 f8d5 	bl	800ccf8 <prvAddNewTaskToReadyList>
 800cb4e:	e001      	b.n	800cb54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb50:	2300      	movs	r3, #0
 800cb52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb54:	697b      	ldr	r3, [r7, #20]
	}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3728      	adds	r7, #40	; 0x28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b08c      	sub	sp, #48	; 0x30
 800cb62:	af04      	add	r7, sp, #16
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	603b      	str	r3, [r7, #0]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb6e:	88fb      	ldrh	r3, [r7, #6]
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe faea 	bl	800b14c <pvPortMalloc>
 800cb78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00e      	beq.n	800cb9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb80:	2054      	movs	r0, #84	; 0x54
 800cb82:	f7fe fae3 	bl	800b14c <pvPortMalloc>
 800cb86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d003      	beq.n	800cb96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	697a      	ldr	r2, [r7, #20]
 800cb92:	631a      	str	r2, [r3, #48]	; 0x30
 800cb94:	e005      	b.n	800cba2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb96:	6978      	ldr	r0, [r7, #20]
 800cb98:	f7fe fb9c 	bl	800b2d4 <vPortFree>
 800cb9c:	e001      	b.n	800cba2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d017      	beq.n	800cbd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbb0:	88fa      	ldrh	r2, [r7, #6]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9303      	str	r3, [sp, #12]
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	9302      	str	r3, [sp, #8]
 800cbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	68b9      	ldr	r1, [r7, #8]
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f000 f80e 	bl	800cbe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbcc:	69f8      	ldr	r0, [r7, #28]
 800cbce:	f000 f893 	bl	800ccf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	61bb      	str	r3, [r7, #24]
 800cbd6:	e002      	b.n	800cbde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbde:	69bb      	ldr	r3, [r7, #24]
	}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3720      	adds	r7, #32
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b088      	sub	sp, #32
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
 800cbf4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbfa:	6879      	ldr	r1, [r7, #4]
 800cbfc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cc00:	440b      	add	r3, r1
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	f023 0307 	bic.w	r3, r3, #7
 800cc0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	f003 0307 	and.w	r3, r3, #7
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	617b      	str	r3, [r7, #20]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01f      	beq.n	800cc76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc36:	2300      	movs	r3, #0
 800cc38:	61fb      	str	r3, [r7, #28]
 800cc3a:	e012      	b.n	800cc62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	4413      	add	r3, r2
 800cc42:	7819      	ldrb	r1, [r3, #0]
 800cc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	4413      	add	r3, r2
 800cc4a:	3334      	adds	r3, #52	; 0x34
 800cc4c:	460a      	mov	r2, r1
 800cc4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	4413      	add	r3, r2
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	61fb      	str	r3, [r7, #28]
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	2b0f      	cmp	r3, #15
 800cc66:	d9e9      	bls.n	800cc3c <prvInitialiseNewTask+0x54>
 800cc68:	e000      	b.n	800cc6c <prvInitialiseNewTask+0x84>
			{
				break;
 800cc6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc74:	e003      	b.n	800cc7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	2b06      	cmp	r3, #6
 800cc82:	d901      	bls.n	800cc88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc84:	2306      	movs	r3, #6
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	2200      	movs	r2, #0
 800cc98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe fc4e 	bl	800b540 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	3318      	adds	r3, #24
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fe fc49 	bl	800b540 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb6:	f1c3 0207 	rsb	r2, r3, #7
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	68f9      	ldr	r1, [r7, #12]
 800ccd6:	69b8      	ldr	r0, [r7, #24]
 800ccd8:	f7fe fcc6 	bl	800b668 <pxPortInitialiseStack>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccee:	bf00      	nop
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd00:	f7fe fde0 	bl	800b8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd04:	4b2a      	ldr	r3, [pc, #168]	; (800cdb0 <prvAddNewTaskToReadyList+0xb8>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	4a29      	ldr	r2, [pc, #164]	; (800cdb0 <prvAddNewTaskToReadyList+0xb8>)
 800cd0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd0e:	4b29      	ldr	r3, [pc, #164]	; (800cdb4 <prvAddNewTaskToReadyList+0xbc>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d109      	bne.n	800cd2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd16:	4a27      	ldr	r2, [pc, #156]	; (800cdb4 <prvAddNewTaskToReadyList+0xbc>)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd1c:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <prvAddNewTaskToReadyList+0xb8>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d110      	bne.n	800cd46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd24:	f000 fc86 	bl	800d634 <prvInitialiseTaskLists>
 800cd28:	e00d      	b.n	800cd46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd2a:	4b23      	ldr	r3, [pc, #140]	; (800cdb8 <prvAddNewTaskToReadyList+0xc0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d109      	bne.n	800cd46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd32:	4b20      	ldr	r3, [pc, #128]	; (800cdb4 <prvAddNewTaskToReadyList+0xbc>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d802      	bhi.n	800cd46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd40:	4a1c      	ldr	r2, [pc, #112]	; (800cdb4 <prvAddNewTaskToReadyList+0xbc>)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd46:	4b1d      	ldr	r3, [pc, #116]	; (800cdbc <prvAddNewTaskToReadyList+0xc4>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	4a1b      	ldr	r2, [pc, #108]	; (800cdbc <prvAddNewTaskToReadyList+0xc4>)
 800cd4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd54:	2201      	movs	r2, #1
 800cd56:	409a      	lsls	r2, r3
 800cd58:	4b19      	ldr	r3, [pc, #100]	; (800cdc0 <prvAddNewTaskToReadyList+0xc8>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	4a18      	ldr	r2, [pc, #96]	; (800cdc0 <prvAddNewTaskToReadyList+0xc8>)
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4a15      	ldr	r2, [pc, #84]	; (800cdc4 <prvAddNewTaskToReadyList+0xcc>)
 800cd70:	441a      	add	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3304      	adds	r3, #4
 800cd76:	4619      	mov	r1, r3
 800cd78:	4610      	mov	r0, r2
 800cd7a:	f7fe fbee 	bl	800b55a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd7e:	f7fe fdd1 	bl	800b924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd82:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <prvAddNewTaskToReadyList+0xc0>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00e      	beq.n	800cda8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd8a:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <prvAddNewTaskToReadyList+0xbc>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d207      	bcs.n	800cda8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd98:	4b0b      	ldr	r3, [pc, #44]	; (800cdc8 <prvAddNewTaskToReadyList+0xd0>)
 800cd9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd9e:	601a      	str	r2, [r3, #0]
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	240405b0 	.word	0x240405b0
 800cdb4:	240404b0 	.word	0x240404b0
 800cdb8:	240405bc 	.word	0x240405bc
 800cdbc:	240405cc 	.word	0x240405cc
 800cdc0:	240405b8 	.word	0x240405b8
 800cdc4:	240404b4 	.word	0x240404b4
 800cdc8:	e000ed04 	.word	0xe000ed04

0800cdcc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cdd4:	f7fe fd76 	bl	800b8c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <vTaskDelete+0x18>
 800cdde:	4b39      	ldr	r3, [pc, #228]	; (800cec4 <vTaskDelete+0xf8>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	e000      	b.n	800cde6 <vTaskDelete+0x1a>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe fc11 	bl	800b614 <uxListRemove>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d115      	bne.n	800ce24 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	4932      	ldr	r1, [pc, #200]	; (800cec8 <vTaskDelete+0xfc>)
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	440b      	add	r3, r1
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <vTaskDelete+0x58>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce12:	2201      	movs	r2, #1
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	43da      	mvns	r2, r3
 800ce1a:	4b2c      	ldr	r3, [pc, #176]	; (800cecc <vTaskDelete+0x100>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4013      	ands	r3, r2
 800ce20:	4a2a      	ldr	r2, [pc, #168]	; (800cecc <vTaskDelete+0x100>)
 800ce22:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d004      	beq.n	800ce36 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	3318      	adds	r3, #24
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fe fbef 	bl	800b614 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ce36:	4b26      	ldr	r3, [pc, #152]	; (800ced0 <vTaskDelete+0x104>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	4a24      	ldr	r2, [pc, #144]	; (800ced0 <vTaskDelete+0x104>)
 800ce3e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ce40:	4b20      	ldr	r3, [pc, #128]	; (800cec4 <vTaskDelete+0xf8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d10b      	bne.n	800ce62 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4820      	ldr	r0, [pc, #128]	; (800ced4 <vTaskDelete+0x108>)
 800ce52:	f7fe fb82 	bl	800b55a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ce56:	4b20      	ldr	r3, [pc, #128]	; (800ced8 <vTaskDelete+0x10c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	4a1e      	ldr	r2, [pc, #120]	; (800ced8 <vTaskDelete+0x10c>)
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	e009      	b.n	800ce76 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ce62:	4b1e      	ldr	r3, [pc, #120]	; (800cedc <vTaskDelete+0x110>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3b01      	subs	r3, #1
 800ce68:	4a1c      	ldr	r2, [pc, #112]	; (800cedc <vTaskDelete+0x110>)
 800ce6a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 fc4f 	bl	800d710 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ce72:	f000 fc7d 	bl	800d770 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ce76:	f7fe fd55 	bl	800b924 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ce7a:	4b19      	ldr	r3, [pc, #100]	; (800cee0 <vTaskDelete+0x114>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d01b      	beq.n	800ceba <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ce82:	4b10      	ldr	r3, [pc, #64]	; (800cec4 <vTaskDelete+0xf8>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d116      	bne.n	800ceba <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ce8c:	4b15      	ldr	r3, [pc, #84]	; (800cee4 <vTaskDelete+0x118>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00a      	beq.n	800ceaa <vTaskDelete+0xde>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	60bb      	str	r3, [r7, #8]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ceaa:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <vTaskDelete+0x11c>)
 800ceac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ceba:	bf00      	nop
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	240404b0 	.word	0x240404b0
 800cec8:	240404b4 	.word	0x240404b4
 800cecc:	240405b8 	.word	0x240405b8
 800ced0:	240405cc 	.word	0x240405cc
 800ced4:	24040584 	.word	0x24040584
 800ced8:	24040598 	.word	0x24040598
 800cedc:	240405b0 	.word	0x240405b0
 800cee0:	240405bc 	.word	0x240405bc
 800cee4:	240405d8 	.word	0x240405d8
 800cee8:	e000ed04 	.word	0xe000ed04

0800ceec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d017      	beq.n	800cf2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <vTaskDelay+0x60>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <vTaskDelay+0x30>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60bb      	str	r3, [r7, #8]
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf1c:	f000 f87a 	bl	800d014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf20:	2100      	movs	r1, #0
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fe16 	bl	800db54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf28:	f000 f882 	bl	800d030 <xTaskResumeAll>
 800cf2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d107      	bne.n	800cf44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf34:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <vTaskDelay+0x64>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf44:	bf00      	nop
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	240405d8 	.word	0x240405d8
 800cf50:	e000ed04 	.word	0xe000ed04

0800cf54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf62:	463a      	mov	r2, r7
 800cf64:	1d39      	adds	r1, r7, #4
 800cf66:	f107 0308 	add.w	r3, r7, #8
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7f3 fccc 	bl	8000908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	9202      	str	r2, [sp, #8]
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	460a      	mov	r2, r1
 800cf82:	491e      	ldr	r1, [pc, #120]	; (800cffc <vTaskStartScheduler+0xa8>)
 800cf84:	481e      	ldr	r0, [pc, #120]	; (800d000 <vTaskStartScheduler+0xac>)
 800cf86:	f7ff fd8d 	bl	800caa4 <xTaskCreateStatic>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4a1d      	ldr	r2, [pc, #116]	; (800d004 <vTaskStartScheduler+0xb0>)
 800cf8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf90:	4b1c      	ldr	r3, [pc, #112]	; (800d004 <vTaskStartScheduler+0xb0>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	e001      	b.n	800cfa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d116      	bne.n	800cfd6 <vTaskStartScheduler+0x82>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	613b      	str	r3, [r7, #16]
}
 800cfba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfbc:	4b12      	ldr	r3, [pc, #72]	; (800d008 <vTaskStartScheduler+0xb4>)
 800cfbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfc4:	4b11      	ldr	r3, [pc, #68]	; (800d00c <vTaskStartScheduler+0xb8>)
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfca:	4b11      	ldr	r3, [pc, #68]	; (800d010 <vTaskStartScheduler+0xbc>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfd0:	f7fe fbd6 	bl	800b780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfd4:	e00e      	b.n	800cff4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfdc:	d10a      	bne.n	800cff4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	60fb      	str	r3, [r7, #12]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <vTaskStartScheduler+0x9e>
}
 800cff4:	bf00      	nop
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	080237d0 	.word	0x080237d0
 800d000:	0800d605 	.word	0x0800d605
 800d004:	240405d4 	.word	0x240405d4
 800d008:	240405d0 	.word	0x240405d0
 800d00c:	240405bc 	.word	0x240405bc
 800d010:	240405b4 	.word	0x240405b4

0800d014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d014:	b480      	push	{r7}
 800d016:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d018:	4b04      	ldr	r3, [pc, #16]	; (800d02c <vTaskSuspendAll+0x18>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3301      	adds	r3, #1
 800d01e:	4a03      	ldr	r2, [pc, #12]	; (800d02c <vTaskSuspendAll+0x18>)
 800d020:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d022:	bf00      	nop
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	240405d8 	.word	0x240405d8

0800d030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d03a:	2300      	movs	r3, #0
 800d03c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d03e:	4b41      	ldr	r3, [pc, #260]	; (800d144 <xTaskResumeAll+0x114>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <xTaskResumeAll+0x2c>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	603b      	str	r3, [r7, #0]
}
 800d058:	bf00      	nop
 800d05a:	e7fe      	b.n	800d05a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d05c:	f7fe fc32 	bl	800b8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d060:	4b38      	ldr	r3, [pc, #224]	; (800d144 <xTaskResumeAll+0x114>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3b01      	subs	r3, #1
 800d066:	4a37      	ldr	r2, [pc, #220]	; (800d144 <xTaskResumeAll+0x114>)
 800d068:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d06a:	4b36      	ldr	r3, [pc, #216]	; (800d144 <xTaskResumeAll+0x114>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d161      	bne.n	800d136 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d072:	4b35      	ldr	r3, [pc, #212]	; (800d148 <xTaskResumeAll+0x118>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d05d      	beq.n	800d136 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d07a:	e02e      	b.n	800d0da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d07c:	4b33      	ldr	r3, [pc, #204]	; (800d14c <xTaskResumeAll+0x11c>)
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3318      	adds	r3, #24
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fe fac3 	bl	800b614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3304      	adds	r3, #4
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fabe 	bl	800b614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09c:	2201      	movs	r2, #1
 800d09e:	409a      	lsls	r2, r3
 800d0a0:	4b2b      	ldr	r3, [pc, #172]	; (800d150 <xTaskResumeAll+0x120>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	4a2a      	ldr	r2, [pc, #168]	; (800d150 <xTaskResumeAll+0x120>)
 800d0a8:	6013      	str	r3, [r2, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4413      	add	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4a27      	ldr	r2, [pc, #156]	; (800d154 <xTaskResumeAll+0x124>)
 800d0b8:	441a      	add	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	f7fe fa4a 	bl	800b55a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ca:	4b23      	ldr	r3, [pc, #140]	; (800d158 <xTaskResumeAll+0x128>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d302      	bcc.n	800d0da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d0d4:	4b21      	ldr	r3, [pc, #132]	; (800d15c <xTaskResumeAll+0x12c>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0da:	4b1c      	ldr	r3, [pc, #112]	; (800d14c <xTaskResumeAll+0x11c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1cc      	bne.n	800d07c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0e8:	f000 fb42 	bl	800d770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d0ec:	4b1c      	ldr	r3, [pc, #112]	; (800d160 <xTaskResumeAll+0x130>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d010      	beq.n	800d11a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0f8:	f000 f858 	bl	800d1ac <xTaskIncrementTick>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d102:	4b16      	ldr	r3, [pc, #88]	; (800d15c <xTaskResumeAll+0x12c>)
 800d104:	2201      	movs	r2, #1
 800d106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1f1      	bne.n	800d0f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d114:	4b12      	ldr	r3, [pc, #72]	; (800d160 <xTaskResumeAll+0x130>)
 800d116:	2200      	movs	r2, #0
 800d118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d11a:	4b10      	ldr	r3, [pc, #64]	; (800d15c <xTaskResumeAll+0x12c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d009      	beq.n	800d136 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d122:	2301      	movs	r3, #1
 800d124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d126:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <xTaskResumeAll+0x134>)
 800d128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d136:	f7fe fbf5 	bl	800b924 <vPortExitCritical>

	return xAlreadyYielded;
 800d13a:	68bb      	ldr	r3, [r7, #8]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	240405d8 	.word	0x240405d8
 800d148:	240405b0 	.word	0x240405b0
 800d14c:	24040570 	.word	0x24040570
 800d150:	240405b8 	.word	0x240405b8
 800d154:	240404b4 	.word	0x240404b4
 800d158:	240404b0 	.word	0x240404b0
 800d15c:	240405c4 	.word	0x240405c4
 800d160:	240405c0 	.word	0x240405c0
 800d164:	e000ed04 	.word	0xe000ed04

0800d168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d16e:	4b05      	ldr	r3, [pc, #20]	; (800d184 <xTaskGetTickCount+0x1c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d174:	687b      	ldr	r3, [r7, #4]
}
 800d176:	4618      	mov	r0, r3
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	240405b4 	.word	0x240405b4

0800d188 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d18e:	f7fe fc7b 	bl	800ba88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d192:	2300      	movs	r3, #0
 800d194:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d196:	4b04      	ldr	r3, [pc, #16]	; (800d1a8 <xTaskGetTickCountFromISR+0x20>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d19c:	683b      	ldr	r3, [r7, #0]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	240405b4 	.word	0x240405b4

0800d1ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1b6:	4b4e      	ldr	r3, [pc, #312]	; (800d2f0 <xTaskIncrementTick+0x144>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f040 8088 	bne.w	800d2d0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1c0:	4b4c      	ldr	r3, [pc, #304]	; (800d2f4 <xTaskIncrementTick+0x148>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1c8:	4a4a      	ldr	r2, [pc, #296]	; (800d2f4 <xTaskIncrementTick+0x148>)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d120      	bne.n	800d216 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1d4:	4b48      	ldr	r3, [pc, #288]	; (800d2f8 <xTaskIncrementTick+0x14c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	603b      	str	r3, [r7, #0]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <xTaskIncrementTick+0x46>
 800d1f4:	4b40      	ldr	r3, [pc, #256]	; (800d2f8 <xTaskIncrementTick+0x14c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	4b40      	ldr	r3, [pc, #256]	; (800d2fc <xTaskIncrementTick+0x150>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a3e      	ldr	r2, [pc, #248]	; (800d2f8 <xTaskIncrementTick+0x14c>)
 800d200:	6013      	str	r3, [r2, #0]
 800d202:	4a3e      	ldr	r2, [pc, #248]	; (800d2fc <xTaskIncrementTick+0x150>)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	4b3d      	ldr	r3, [pc, #244]	; (800d300 <xTaskIncrementTick+0x154>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3301      	adds	r3, #1
 800d20e:	4a3c      	ldr	r2, [pc, #240]	; (800d300 <xTaskIncrementTick+0x154>)
 800d210:	6013      	str	r3, [r2, #0]
 800d212:	f000 faad 	bl	800d770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d216:	4b3b      	ldr	r3, [pc, #236]	; (800d304 <xTaskIncrementTick+0x158>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d348      	bcc.n	800d2b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d220:	4b35      	ldr	r3, [pc, #212]	; (800d2f8 <xTaskIncrementTick+0x14c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d104      	bne.n	800d234 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d22a:	4b36      	ldr	r3, [pc, #216]	; (800d304 <xTaskIncrementTick+0x158>)
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d230:	601a      	str	r2, [r3, #0]
					break;
 800d232:	e03e      	b.n	800d2b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d234:	4b30      	ldr	r3, [pc, #192]	; (800d2f8 <xTaskIncrementTick+0x14c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d203      	bcs.n	800d254 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d24c:	4a2d      	ldr	r2, [pc, #180]	; (800d304 <xTaskIncrementTick+0x158>)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d252:	e02e      	b.n	800d2b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	3304      	adds	r3, #4
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe f9db 	bl	800b614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d262:	2b00      	cmp	r3, #0
 800d264:	d004      	beq.n	800d270 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	3318      	adds	r3, #24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fe f9d2 	bl	800b614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d274:	2201      	movs	r2, #1
 800d276:	409a      	lsls	r2, r3
 800d278:	4b23      	ldr	r3, [pc, #140]	; (800d308 <xTaskIncrementTick+0x15c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	4a22      	ldr	r2, [pc, #136]	; (800d308 <xTaskIncrementTick+0x15c>)
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4a1f      	ldr	r2, [pc, #124]	; (800d30c <xTaskIncrementTick+0x160>)
 800d290:	441a      	add	r2, r3
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	3304      	adds	r3, #4
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f7fe f95e 	bl	800b55a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a2:	4b1b      	ldr	r3, [pc, #108]	; (800d310 <xTaskIncrementTick+0x164>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d3b9      	bcc.n	800d220 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2b0:	e7b6      	b.n	800d220 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2b2:	4b17      	ldr	r3, [pc, #92]	; (800d310 <xTaskIncrementTick+0x164>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b8:	4914      	ldr	r1, [pc, #80]	; (800d30c <xTaskIncrementTick+0x160>)
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	440b      	add	r3, r1
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d907      	bls.n	800d2da <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	e004      	b.n	800d2da <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d2d0:	4b10      	ldr	r3, [pc, #64]	; (800d314 <xTaskIncrementTick+0x168>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	4a0f      	ldr	r2, [pc, #60]	; (800d314 <xTaskIncrementTick+0x168>)
 800d2d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d2da:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <xTaskIncrementTick+0x16c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d2e6:	697b      	ldr	r3, [r7, #20]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	240405d8 	.word	0x240405d8
 800d2f4:	240405b4 	.word	0x240405b4
 800d2f8:	24040568 	.word	0x24040568
 800d2fc:	2404056c 	.word	0x2404056c
 800d300:	240405c8 	.word	0x240405c8
 800d304:	240405d0 	.word	0x240405d0
 800d308:	240405b8 	.word	0x240405b8
 800d30c:	240404b4 	.word	0x240404b4
 800d310:	240404b0 	.word	0x240404b0
 800d314:	240405c0 	.word	0x240405c0
 800d318:	240405c4 	.word	0x240405c4

0800d31c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d322:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <vTaskSwitchContext+0xc0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d32a:	4b2d      	ldr	r3, [pc, #180]	; (800d3e0 <vTaskSwitchContext+0xc4>)
 800d32c:	2201      	movs	r2, #1
 800d32e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d330:	e050      	b.n	800d3d4 <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 800d332:	4b2b      	ldr	r3, [pc, #172]	; (800d3e0 <vTaskSwitchContext+0xc4>)
 800d334:	2200      	movs	r2, #0
 800d336:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d338:	4b2a      	ldr	r3, [pc, #168]	; (800d3e4 <vTaskSwitchContext+0xc8>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	4b29      	ldr	r3, [pc, #164]	; (800d3e4 <vTaskSwitchContext+0xc8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d344:	429a      	cmp	r2, r3
 800d346:	d808      	bhi.n	800d35a <vTaskSwitchContext+0x3e>
 800d348:	4b26      	ldr	r3, [pc, #152]	; (800d3e4 <vTaskSwitchContext+0xc8>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	4b25      	ldr	r3, [pc, #148]	; (800d3e4 <vTaskSwitchContext+0xc8>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3334      	adds	r3, #52	; 0x34
 800d352:	4619      	mov	r1, r3
 800d354:	4610      	mov	r0, r2
 800d356:	f012 fbb3 	bl	801fac0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d35a:	4b23      	ldr	r3, [pc, #140]	; (800d3e8 <vTaskSwitchContext+0xcc>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	fab3 f383 	clz	r3, r3
 800d366:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d368:	7afb      	ldrb	r3, [r7, #11]
 800d36a:	f1c3 031f 	rsb	r3, r3, #31
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	491e      	ldr	r1, [pc, #120]	; (800d3ec <vTaskSwitchContext+0xd0>)
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	4613      	mov	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	440b      	add	r3, r1
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <vTaskSwitchContext+0x7e>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	607b      	str	r3, [r7, #4]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <vTaskSwitchContext+0x7c>
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	4613      	mov	r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4a11      	ldr	r2, [pc, #68]	; (800d3ec <vTaskSwitchContext+0xd0>)
 800d3a6:	4413      	add	r3, r2
 800d3a8:	613b      	str	r3, [r7, #16]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	605a      	str	r2, [r3, #4]
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	685a      	ldr	r2, [r3, #4]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d104      	bne.n	800d3ca <vTaskSwitchContext+0xae>
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	605a      	str	r2, [r3, #4]
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	4a04      	ldr	r2, [pc, #16]	; (800d3e4 <vTaskSwitchContext+0xc8>)
 800d3d2:	6013      	str	r3, [r2, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	240405d8 	.word	0x240405d8
 800d3e0:	240405c4 	.word	0x240405c4
 800d3e4:	240404b0 	.word	0x240404b0
 800d3e8:	240405b8 	.word	0x240405b8
 800d3ec:	240404b4 	.word	0x240404b4

0800d3f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	60fb      	str	r3, [r7, #12]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d416:	4b07      	ldr	r3, [pc, #28]	; (800d434 <vTaskPlaceOnEventList+0x44>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3318      	adds	r3, #24
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7fe f8bf 	bl	800b5a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d424:	2101      	movs	r1, #1
 800d426:	6838      	ldr	r0, [r7, #0]
 800d428:	f000 fb94 	bl	800db54 <prvAddCurrentTaskToDelayedList>
}
 800d42c:	bf00      	nop
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	240404b0 	.word	0x240404b0

0800d438 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10a      	bne.n	800d464 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	60fb      	str	r3, [r7, #12]
}
 800d460:	bf00      	nop
 800d462:	e7fe      	b.n	800d462 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	3318      	adds	r3, #24
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fe f8d3 	bl	800b614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d46e:	4b1d      	ldr	r3, [pc, #116]	; (800d4e4 <xTaskRemoveFromEventList+0xac>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d11c      	bne.n	800d4b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	3304      	adds	r3, #4
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fe f8ca 	bl	800b614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	2201      	movs	r2, #1
 800d486:	409a      	lsls	r2, r3
 800d488:	4b17      	ldr	r3, [pc, #92]	; (800d4e8 <xTaskRemoveFromEventList+0xb0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4313      	orrs	r3, r2
 800d48e:	4a16      	ldr	r2, [pc, #88]	; (800d4e8 <xTaskRemoveFromEventList+0xb0>)
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d496:	4613      	mov	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4a13      	ldr	r2, [pc, #76]	; (800d4ec <xTaskRemoveFromEventList+0xb4>)
 800d4a0:	441a      	add	r2, r3
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	f7fe f856 	bl	800b55a <vListInsertEnd>
 800d4ae:	e005      	b.n	800d4bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	3318      	adds	r3, #24
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	480e      	ldr	r0, [pc, #56]	; (800d4f0 <xTaskRemoveFromEventList+0xb8>)
 800d4b8:	f7fe f84f 	bl	800b55a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c0:	4b0c      	ldr	r3, [pc, #48]	; (800d4f4 <xTaskRemoveFromEventList+0xbc>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d905      	bls.n	800d4d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4ce:	4b0a      	ldr	r3, [pc, #40]	; (800d4f8 <xTaskRemoveFromEventList+0xc0>)
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e001      	b.n	800d4da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4da:	697b      	ldr	r3, [r7, #20]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	240405d8 	.word	0x240405d8
 800d4e8:	240405b8 	.word	0x240405b8
 800d4ec:	240404b4 	.word	0x240404b4
 800d4f0:	24040570 	.word	0x24040570
 800d4f4:	240404b0 	.word	0x240404b0
 800d4f8:	240405c4 	.word	0x240405c4

0800d4fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d504:	4b06      	ldr	r3, [pc, #24]	; (800d520 <vTaskInternalSetTimeOutState+0x24>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d50c:	4b05      	ldr	r3, [pc, #20]	; (800d524 <vTaskInternalSetTimeOutState+0x28>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	605a      	str	r2, [r3, #4]
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	240405c8 	.word	0x240405c8
 800d524:	240405b4 	.word	0x240405b4

0800d528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10a      	bne.n	800d54e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	613b      	str	r3, [r7, #16]
}
 800d54a:	bf00      	nop
 800d54c:	e7fe      	b.n	800d54c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d10a      	bne.n	800d56a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	60fb      	str	r3, [r7, #12]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d56a:	f7fe f9ab 	bl	800b8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d56e:	4b1d      	ldr	r3, [pc, #116]	; (800d5e4 <xTaskCheckForTimeOut+0xbc>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	69ba      	ldr	r2, [r7, #24]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d586:	d102      	bne.n	800d58e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d588:	2300      	movs	r3, #0
 800d58a:	61fb      	str	r3, [r7, #28]
 800d58c:	e023      	b.n	800d5d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	4b15      	ldr	r3, [pc, #84]	; (800d5e8 <xTaskCheckForTimeOut+0xc0>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d007      	beq.n	800d5aa <xTaskCheckForTimeOut+0x82>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d302      	bcc.n	800d5aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	61fb      	str	r3, [r7, #28]
 800d5a8:	e015      	b.n	800d5d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d20b      	bcs.n	800d5cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	1ad2      	subs	r2, r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff ff9b 	bl	800d4fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	61fb      	str	r3, [r7, #28]
 800d5ca:	e004      	b.n	800d5d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5d6:	f7fe f9a5 	bl	800b924 <vPortExitCritical>

	return xReturn;
 800d5da:	69fb      	ldr	r3, [r7, #28]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3720      	adds	r7, #32
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	240405b4 	.word	0x240405b4
 800d5e8:	240405c8 	.word	0x240405c8

0800d5ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5f0:	4b03      	ldr	r3, [pc, #12]	; (800d600 <vTaskMissedYield+0x14>)
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	601a      	str	r2, [r3, #0]
}
 800d5f6:	bf00      	nop
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	240405c4 	.word	0x240405c4

0800d604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d60c:	f000 f852 	bl	800d6b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d610:	4b06      	ldr	r3, [pc, #24]	; (800d62c <prvIdleTask+0x28>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d9f9      	bls.n	800d60c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d618:	4b05      	ldr	r3, [pc, #20]	; (800d630 <prvIdleTask+0x2c>)
 800d61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d61e:	601a      	str	r2, [r3, #0]
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d628:	e7f0      	b.n	800d60c <prvIdleTask+0x8>
 800d62a:	bf00      	nop
 800d62c:	240404b4 	.word	0x240404b4
 800d630:	e000ed04 	.word	0xe000ed04

0800d634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d63a:	2300      	movs	r3, #0
 800d63c:	607b      	str	r3, [r7, #4]
 800d63e:	e00c      	b.n	800d65a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	4613      	mov	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4a12      	ldr	r2, [pc, #72]	; (800d694 <prvInitialiseTaskLists+0x60>)
 800d64c:	4413      	add	r3, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fd ff56 	bl	800b500 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	3301      	adds	r3, #1
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b06      	cmp	r3, #6
 800d65e:	d9ef      	bls.n	800d640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d660:	480d      	ldr	r0, [pc, #52]	; (800d698 <prvInitialiseTaskLists+0x64>)
 800d662:	f7fd ff4d 	bl	800b500 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d666:	480d      	ldr	r0, [pc, #52]	; (800d69c <prvInitialiseTaskLists+0x68>)
 800d668:	f7fd ff4a 	bl	800b500 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d66c:	480c      	ldr	r0, [pc, #48]	; (800d6a0 <prvInitialiseTaskLists+0x6c>)
 800d66e:	f7fd ff47 	bl	800b500 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d672:	480c      	ldr	r0, [pc, #48]	; (800d6a4 <prvInitialiseTaskLists+0x70>)
 800d674:	f7fd ff44 	bl	800b500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d678:	480b      	ldr	r0, [pc, #44]	; (800d6a8 <prvInitialiseTaskLists+0x74>)
 800d67a:	f7fd ff41 	bl	800b500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d67e:	4b0b      	ldr	r3, [pc, #44]	; (800d6ac <prvInitialiseTaskLists+0x78>)
 800d680:	4a05      	ldr	r2, [pc, #20]	; (800d698 <prvInitialiseTaskLists+0x64>)
 800d682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d684:	4b0a      	ldr	r3, [pc, #40]	; (800d6b0 <prvInitialiseTaskLists+0x7c>)
 800d686:	4a05      	ldr	r2, [pc, #20]	; (800d69c <prvInitialiseTaskLists+0x68>)
 800d688:	601a      	str	r2, [r3, #0]
}
 800d68a:	bf00      	nop
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	240404b4 	.word	0x240404b4
 800d698:	24040540 	.word	0x24040540
 800d69c:	24040554 	.word	0x24040554
 800d6a0:	24040570 	.word	0x24040570
 800d6a4:	24040584 	.word	0x24040584
 800d6a8:	2404059c 	.word	0x2404059c
 800d6ac:	24040568 	.word	0x24040568
 800d6b0:	2404056c 	.word	0x2404056c

0800d6b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ba:	e019      	b.n	800d6f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6bc:	f7fe f902 	bl	800b8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6c0:	4b10      	ldr	r3, [pc, #64]	; (800d704 <prvCheckTasksWaitingTermination+0x50>)
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fd ffa1 	bl	800b614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6d2:	4b0d      	ldr	r3, [pc, #52]	; (800d708 <prvCheckTasksWaitingTermination+0x54>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	4a0b      	ldr	r2, [pc, #44]	; (800d708 <prvCheckTasksWaitingTermination+0x54>)
 800d6da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <prvCheckTasksWaitingTermination+0x58>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	4a0a      	ldr	r2, [pc, #40]	; (800d70c <prvCheckTasksWaitingTermination+0x58>)
 800d6e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6e6:	f7fe f91d 	bl	800b924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f810 	bl	800d710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6f0:	4b06      	ldr	r3, [pc, #24]	; (800d70c <prvCheckTasksWaitingTermination+0x58>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1e1      	bne.n	800d6bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6f8:	bf00      	nop
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	24040584 	.word	0x24040584
 800d708:	240405b0 	.word	0x240405b0
 800d70c:	24040598 	.word	0x24040598

0800d710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d108      	bne.n	800d734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	4618      	mov	r0, r3
 800d728:	f7fd fdd4 	bl	800b2d4 <vPortFree>
				vPortFree( pxTCB );
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7fd fdd1 	bl	800b2d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d732:	e018      	b.n	800d766 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d103      	bne.n	800d746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7fd fdc8 	bl	800b2d4 <vPortFree>
	}
 800d744:	e00f      	b.n	800d766 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d00a      	beq.n	800d766 <prvDeleteTCB+0x56>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	60fb      	str	r3, [r7, #12]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <prvDeleteTCB+0x54>
	}
 800d766:	bf00      	nop
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d776:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <prvResetNextTaskUnblockTime+0x38>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d104      	bne.n	800d78a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d780:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <prvResetNextTaskUnblockTime+0x3c>)
 800d782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d788:	e008      	b.n	800d79c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d78a:	4b07      	ldr	r3, [pc, #28]	; (800d7a8 <prvResetNextTaskUnblockTime+0x38>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	4a04      	ldr	r2, [pc, #16]	; (800d7ac <prvResetNextTaskUnblockTime+0x3c>)
 800d79a:	6013      	str	r3, [r2, #0]
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	24040568 	.word	0x24040568
 800d7ac:	240405d0 	.word	0x240405d0

0800d7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7b6:	4b0b      	ldr	r3, [pc, #44]	; (800d7e4 <xTaskGetSchedulerState+0x34>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d102      	bne.n	800d7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	607b      	str	r3, [r7, #4]
 800d7c2:	e008      	b.n	800d7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7c4:	4b08      	ldr	r3, [pc, #32]	; (800d7e8 <xTaskGetSchedulerState+0x38>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	607b      	str	r3, [r7, #4]
 800d7d0:	e001      	b.n	800d7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7d6:	687b      	ldr	r3, [r7, #4]
	}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	240405bc 	.word	0x240405bc
 800d7e8:	240405d8 	.word	0x240405d8

0800d7ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d069      	beq.n	800d8d6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d806:	4b36      	ldr	r3, [pc, #216]	; (800d8e0 <xTaskPriorityInherit+0xf4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d259      	bcs.n	800d8c4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	2b00      	cmp	r3, #0
 800d816:	db06      	blt.n	800d826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d818:	4b31      	ldr	r3, [pc, #196]	; (800d8e0 <xTaskPriorityInherit+0xf4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	f1c3 0207 	rsb	r2, r3, #7
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	6959      	ldr	r1, [r3, #20]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82e:	4613      	mov	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	4413      	add	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4a2b      	ldr	r2, [pc, #172]	; (800d8e4 <xTaskPriorityInherit+0xf8>)
 800d838:	4413      	add	r3, r2
 800d83a:	4299      	cmp	r1, r3
 800d83c:	d13a      	bne.n	800d8b4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	3304      	adds	r3, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f7fd fee6 	bl	800b614 <uxListRemove>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d115      	bne.n	800d87a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d852:	4924      	ldr	r1, [pc, #144]	; (800d8e4 <xTaskPriorityInherit+0xf8>)
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	440b      	add	r3, r1
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <xTaskPriorityInherit+0x8e>
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	2201      	movs	r2, #1
 800d86a:	fa02 f303 	lsl.w	r3, r2, r3
 800d86e:	43da      	mvns	r2, r3
 800d870:	4b1d      	ldr	r3, [pc, #116]	; (800d8e8 <xTaskPriorityInherit+0xfc>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4013      	ands	r3, r2
 800d876:	4a1c      	ldr	r2, [pc, #112]	; (800d8e8 <xTaskPriorityInherit+0xfc>)
 800d878:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d87a:	4b19      	ldr	r3, [pc, #100]	; (800d8e0 <xTaskPriorityInherit+0xf4>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	2201      	movs	r2, #1
 800d88a:	409a      	lsls	r2, r3
 800d88c:	4b16      	ldr	r3, [pc, #88]	; (800d8e8 <xTaskPriorityInherit+0xfc>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4313      	orrs	r3, r2
 800d892:	4a15      	ldr	r2, [pc, #84]	; (800d8e8 <xTaskPriorityInherit+0xfc>)
 800d894:	6013      	str	r3, [r2, #0]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89a:	4613      	mov	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4a10      	ldr	r2, [pc, #64]	; (800d8e4 <xTaskPriorityInherit+0xf8>)
 800d8a4:	441a      	add	r2, r3
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	f7fd fe54 	bl	800b55a <vListInsertEnd>
 800d8b2:	e004      	b.n	800d8be <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	; (800d8e0 <xTaskPriorityInherit+0xf4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	60fb      	str	r3, [r7, #12]
 800d8c2:	e008      	b.n	800d8d6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8c8:	4b05      	ldr	r3, [pc, #20]	; (800d8e0 <xTaskPriorityInherit+0xf4>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d201      	bcs.n	800d8d6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
	}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	240404b0 	.word	0x240404b0
 800d8e4:	240404b4 	.word	0x240404b4
 800d8e8:	240405b8 	.word	0x240405b8

0800d8ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d06e      	beq.n	800d9e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d902:	4b3a      	ldr	r3, [pc, #232]	; (800d9ec <xTaskPriorityDisinherit+0x100>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d00a      	beq.n	800d922 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	60fb      	str	r3, [r7, #12]
}
 800d91e:	bf00      	nop
 800d920:	e7fe      	b.n	800d920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	60bb      	str	r3, [r7, #8]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d944:	1e5a      	subs	r2, r3, #1
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d952:	429a      	cmp	r2, r3
 800d954:	d044      	beq.n	800d9e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d140      	bne.n	800d9e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	3304      	adds	r3, #4
 800d962:	4618      	mov	r0, r3
 800d964:	f7fd fe56 	bl	800b614 <uxListRemove>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d115      	bne.n	800d99a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d972:	491f      	ldr	r1, [pc, #124]	; (800d9f0 <xTaskPriorityDisinherit+0x104>)
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	440b      	add	r3, r1
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10a      	bne.n	800d99a <xTaskPriorityDisinherit+0xae>
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	2201      	movs	r2, #1
 800d98a:	fa02 f303 	lsl.w	r3, r2, r3
 800d98e:	43da      	mvns	r2, r3
 800d990:	4b18      	ldr	r3, [pc, #96]	; (800d9f4 <xTaskPriorityDisinherit+0x108>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4013      	ands	r3, r2
 800d996:	4a17      	ldr	r2, [pc, #92]	; (800d9f4 <xTaskPriorityDisinherit+0x108>)
 800d998:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	f1c3 0207 	rsb	r2, r3, #7
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	409a      	lsls	r2, r3
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <xTaskPriorityDisinherit+0x108>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	4a0d      	ldr	r2, [pc, #52]	; (800d9f4 <xTaskPriorityDisinherit+0x108>)
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	4a08      	ldr	r2, [pc, #32]	; (800d9f0 <xTaskPriorityDisinherit+0x104>)
 800d9ce:	441a      	add	r2, r3
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7fd fdbf 	bl	800b55a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9e0:	697b      	ldr	r3, [r7, #20]
	}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	240404b0 	.word	0x240404b0
 800d9f0:	240404b4 	.word	0x240404b4
 800d9f4:	240405b8 	.word	0x240405b8

0800d9f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b088      	sub	sp, #32
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da06:	2301      	movs	r3, #1
 800da08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 8083 	beq.w	800db18 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	60fb      	str	r3, [r7, #12]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d902      	bls.n	800da40 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	e002      	b.n	800da46 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4a:	69fa      	ldr	r2, [r7, #28]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d063      	beq.n	800db18 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	429a      	cmp	r2, r3
 800da58:	d15e      	bne.n	800db18 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da5a:	4b31      	ldr	r3, [pc, #196]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	69ba      	ldr	r2, [r7, #24]
 800da60:	429a      	cmp	r2, r3
 800da62:	d10a      	bne.n	800da7a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	60bb      	str	r3, [r7, #8]
}
 800da76:	bf00      	nop
 800da78:	e7fe      	b.n	800da78 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	69fa      	ldr	r2, [r7, #28]
 800da84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	db04      	blt.n	800da98 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	f1c3 0207 	rsb	r2, r3, #7
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	6959      	ldr	r1, [r3, #20]
 800da9c:	693a      	ldr	r2, [r7, #16]
 800da9e:	4613      	mov	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	4413      	add	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4a1f      	ldr	r2, [pc, #124]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800daa8:	4413      	add	r3, r2
 800daaa:	4299      	cmp	r1, r3
 800daac:	d134      	bne.n	800db18 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	3304      	adds	r3, #4
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fd fdae 	bl	800b614 <uxListRemove>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d115      	bne.n	800daea <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac2:	4918      	ldr	r1, [pc, #96]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	440b      	add	r3, r1
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10a      	bne.n	800daea <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad8:	2201      	movs	r2, #1
 800dada:	fa02 f303 	lsl.w	r3, r2, r3
 800dade:	43da      	mvns	r2, r3
 800dae0:	4b11      	ldr	r3, [pc, #68]	; (800db28 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4013      	ands	r3, r2
 800dae6:	4a10      	ldr	r2, [pc, #64]	; (800db28 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dae8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daee:	2201      	movs	r2, #1
 800daf0:	409a      	lsls	r2, r3
 800daf2:	4b0d      	ldr	r3, [pc, #52]	; (800db28 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	4a0b      	ldr	r2, [pc, #44]	; (800db28 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db00:	4613      	mov	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4413      	add	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4a06      	ldr	r2, [pc, #24]	; (800db24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800db0a:	441a      	add	r2, r3
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	3304      	adds	r3, #4
 800db10:	4619      	mov	r1, r3
 800db12:	4610      	mov	r0, r2
 800db14:	f7fd fd21 	bl	800b55a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db18:	bf00      	nop
 800db1a:	3720      	adds	r7, #32
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	240404b0 	.word	0x240404b0
 800db24:	240404b4 	.word	0x240404b4
 800db28:	240405b8 	.word	0x240405b8

0800db2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db2c:	b480      	push	{r7}
 800db2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db30:	4b07      	ldr	r3, [pc, #28]	; (800db50 <pvTaskIncrementMutexHeldCount+0x24>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d004      	beq.n	800db42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db38:	4b05      	ldr	r3, [pc, #20]	; (800db50 <pvTaskIncrementMutexHeldCount+0x24>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db3e:	3201      	adds	r2, #1
 800db40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db42:	4b03      	ldr	r3, [pc, #12]	; (800db50 <pvTaskIncrementMutexHeldCount+0x24>)
 800db44:	681b      	ldr	r3, [r3, #0]
	}
 800db46:	4618      	mov	r0, r3
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	240404b0 	.word	0x240404b0

0800db54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db5e:	4b29      	ldr	r3, [pc, #164]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb0>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db64:	4b28      	ldr	r3, [pc, #160]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3304      	adds	r3, #4
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fd fd52 	bl	800b614 <uxListRemove>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10b      	bne.n	800db8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db76:	4b24      	ldr	r3, [pc, #144]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7c:	2201      	movs	r2, #1
 800db7e:	fa02 f303 	lsl.w	r3, r2, r3
 800db82:	43da      	mvns	r2, r3
 800db84:	4b21      	ldr	r3, [pc, #132]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4013      	ands	r3, r2
 800db8a:	4a20      	ldr	r2, [pc, #128]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800db8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db94:	d10a      	bne.n	800dbac <prvAddCurrentTaskToDelayedList+0x58>
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d007      	beq.n	800dbac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db9c:	4b1a      	ldr	r3, [pc, #104]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3304      	adds	r3, #4
 800dba2:	4619      	mov	r1, r3
 800dba4:	481a      	ldr	r0, [pc, #104]	; (800dc10 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dba6:	f7fd fcd8 	bl	800b55a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbaa:	e026      	b.n	800dbfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbb4:	4b14      	ldr	r3, [pc, #80]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d209      	bcs.n	800dbd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc4:	4b13      	ldr	r3, [pc, #76]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	4b0f      	ldr	r3, [pc, #60]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fd fce6 	bl	800b5a2 <vListInsert>
}
 800dbd6:	e010      	b.n	800dbfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd8:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	4b0a      	ldr	r3, [pc, #40]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7fd fcdc 	bl	800b5a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbea:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d202      	bcs.n	800dbfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbf4:	4a09      	ldr	r2, [pc, #36]	; (800dc1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	6013      	str	r3, [r2, #0]
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	240405b4 	.word	0x240405b4
 800dc08:	240404b0 	.word	0x240404b0
 800dc0c:	240405b8 	.word	0x240405b8
 800dc10:	2404059c 	.word	0x2404059c
 800dc14:	2404056c 	.word	0x2404056c
 800dc18:	24040568 	.word	0x24040568
 800dc1c:	240405d0 	.word	0x240405d0

0800dc20 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	330c      	adds	r3, #12
 800dc30:	461a      	mov	r2, r3
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f00e f9d3 	bl	801bfe0 <tcpip_send_msg_wait_sem>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dc3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d103      	bne.n	800dc4e <netconn_apimsg+0x2e>
    return apimsg->err;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dc4c:	e001      	b.n	800dc52 <netconn_apimsg+0x32>
  }
  return err;
 800dc4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
	...

0800dc5c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b08c      	sub	sp, #48	; 0x30
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	4603      	mov	r3, r0
 800dc64:	603a      	str	r2, [r7, #0]
 800dc66:	71fb      	strb	r3, [r7, #7]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800dc6c:	79fb      	ldrb	r3, [r7, #7]
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f001 f859 	bl	800ed28 <netconn_alloc>
 800dc76:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d054      	beq.n	800dd28 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800dc7e:	79bb      	ldrb	r3, [r7, #6]
 800dc80:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800dc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc84:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800dc86:	f107 0308 	add.w	r3, r7, #8
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4829      	ldr	r0, [pc, #164]	; (800dd34 <netconn_new_with_proto_and_callback+0xd8>)
 800dc8e:	f7ff ffc7 	bl	800dc20 <netconn_apimsg>
 800dc92:	4603      	mov	r3, r0
 800dc94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800dc98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d043      	beq.n	800dd28 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d005      	beq.n	800dcb4 <netconn_new_with_proto_and_callback+0x58>
 800dca8:	4b23      	ldr	r3, [pc, #140]	; (800dd38 <netconn_new_with_proto_and_callback+0xdc>)
 800dcaa:	22a3      	movs	r2, #163	; 0xa3
 800dcac:	4923      	ldr	r1, [pc, #140]	; (800dd3c <netconn_new_with_proto_and_callback+0xe0>)
 800dcae:	4824      	ldr	r0, [pc, #144]	; (800dd40 <netconn_new_with_proto_and_callback+0xe4>)
 800dcb0:	f013 fabc 	bl	802122c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	3310      	adds	r3, #16
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f007 feec 	bl	8015a96 <sys_mbox_valid>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d105      	bne.n	800dcd0 <netconn_new_with_proto_and_callback+0x74>
 800dcc4:	4b1c      	ldr	r3, [pc, #112]	; (800dd38 <netconn_new_with_proto_and_callback+0xdc>)
 800dcc6:	22a4      	movs	r2, #164	; 0xa4
 800dcc8:	491e      	ldr	r1, [pc, #120]	; (800dd44 <netconn_new_with_proto_and_callback+0xe8>)
 800dcca:	481d      	ldr	r0, [pc, #116]	; (800dd40 <netconn_new_with_proto_and_callback+0xe4>)
 800dccc:	f013 faae 	bl	802122c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800dcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd2:	3314      	adds	r3, #20
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f007 fede 	bl	8015a96 <sys_mbox_valid>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d005      	beq.n	800dcec <netconn_new_with_proto_and_callback+0x90>
 800dce0:	4b15      	ldr	r3, [pc, #84]	; (800dd38 <netconn_new_with_proto_and_callback+0xdc>)
 800dce2:	22a6      	movs	r2, #166	; 0xa6
 800dce4:	4918      	ldr	r1, [pc, #96]	; (800dd48 <netconn_new_with_proto_and_callback+0xec>)
 800dce6:	4816      	ldr	r0, [pc, #88]	; (800dd40 <netconn_new_with_proto_and_callback+0xe4>)
 800dce8:	f013 faa0 	bl	802122c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	330c      	adds	r3, #12
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f007 ff61 	bl	8015bb8 <sys_sem_valid>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d105      	bne.n	800dd08 <netconn_new_with_proto_and_callback+0xac>
 800dcfc:	4b0e      	ldr	r3, [pc, #56]	; (800dd38 <netconn_new_with_proto_and_callback+0xdc>)
 800dcfe:	22a9      	movs	r2, #169	; 0xa9
 800dd00:	4912      	ldr	r1, [pc, #72]	; (800dd4c <netconn_new_with_proto_and_callback+0xf0>)
 800dd02:	480f      	ldr	r0, [pc, #60]	; (800dd40 <netconn_new_with_proto_and_callback+0xe4>)
 800dd04:	f013 fa92 	bl	802122c <iprintf>
      sys_sem_free(&conn->op_completed);
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	330c      	adds	r3, #12
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f007 ff46 	bl	8015b9e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800dd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd14:	3310      	adds	r3, #16
 800dd16:	4618      	mov	r0, r3
 800dd18:	f007 fe36 	bl	8015988 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800dd1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd1e:	2007      	movs	r0, #7
 800dd20:	f005 fb1e 	bl	8013360 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800dd24:	2300      	movs	r3, #0
 800dd26:	e000      	b.n	800dd2a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3730      	adds	r7, #48	; 0x30
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	0800ecfd 	.word	0x0800ecfd
 800dd38:	080237d8 	.word	0x080237d8
 800dd3c:	08023828 	.word	0x08023828
 800dd40:	0802384c 	.word	0x0802384c
 800dd44:	08023874 	.word	0x08023874
 800dd48:	0802388c 	.word	0x0802388c
 800dd4c:	080238b0 	.word	0x080238b0

0800dd50 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b08c      	sub	sp, #48	; 0x30
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e014      	b.n	800dd8c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800dd66:	2329      	movs	r3, #41	; 0x29
 800dd68:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800dd6a:	f107 030c 	add.w	r3, r7, #12
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4808      	ldr	r0, [pc, #32]	; (800dd94 <netconn_prepare_delete+0x44>)
 800dd72:	f7ff ff55 	bl	800dc20 <netconn_apimsg>
 800dd76:	4603      	mov	r3, r0
 800dd78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800dd7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <netconn_prepare_delete+0x3a>
    return err;
 800dd84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dd88:	e000      	b.n	800dd8c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3730      	adds	r7, #48	; 0x30
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	0800f261 	.word	0x0800f261

0800dd98 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <netconn_delete+0x12>
    return ERR_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	e00d      	b.n	800ddc6 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7ff ffd0 	bl	800dd50 <netconn_prepare_delete>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ddb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <netconn_delete+0x2a>
    netconn_free(conn);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f001 f821 	bl	800ee04 <netconn_free>
  }
  return err;
 800ddc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
	...

0800ddd0 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08e      	sub	sp, #56	; 0x38
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d109      	bne.n	800ddf8 <netconn_getaddr+0x28>
 800dde4:	4b1d      	ldr	r3, [pc, #116]	; (800de5c <netconn_getaddr+0x8c>)
 800dde6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ddea:	491d      	ldr	r1, [pc, #116]	; (800de60 <netconn_getaddr+0x90>)
 800ddec:	481d      	ldr	r0, [pc, #116]	; (800de64 <netconn_getaddr+0x94>)
 800ddee:	f013 fa1d 	bl	802122c <iprintf>
 800ddf2:	f06f 030f 	mvn.w	r3, #15
 800ddf6:	e02d      	b.n	800de54 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d109      	bne.n	800de12 <netconn_getaddr+0x42>
 800ddfe:	4b17      	ldr	r3, [pc, #92]	; (800de5c <netconn_getaddr+0x8c>)
 800de00:	f240 1213 	movw	r2, #275	; 0x113
 800de04:	4918      	ldr	r1, [pc, #96]	; (800de68 <netconn_getaddr+0x98>)
 800de06:	4817      	ldr	r0, [pc, #92]	; (800de64 <netconn_getaddr+0x94>)
 800de08:	f013 fa10 	bl	802122c <iprintf>
 800de0c:	f06f 030f 	mvn.w	r3, #15
 800de10:	e020      	b.n	800de54 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d109      	bne.n	800de2c <netconn_getaddr+0x5c>
 800de18:	4b10      	ldr	r3, [pc, #64]	; (800de5c <netconn_getaddr+0x8c>)
 800de1a:	f44f 728a 	mov.w	r2, #276	; 0x114
 800de1e:	4913      	ldr	r1, [pc, #76]	; (800de6c <netconn_getaddr+0x9c>)
 800de20:	4810      	ldr	r0, [pc, #64]	; (800de64 <netconn_getaddr+0x94>)
 800de22:	f013 fa03 	bl	802122c <iprintf>
 800de26:	f06f 030f 	mvn.w	r3, #15
 800de2a:	e013      	b.n	800de54 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800de30:	78fb      	ldrb	r3, [r7, #3]
 800de32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800de3e:	f107 0314 	add.w	r3, r7, #20
 800de42:	4619      	mov	r1, r3
 800de44:	480a      	ldr	r0, [pc, #40]	; (800de70 <netconn_getaddr+0xa0>)
 800de46:	f7ff feeb 	bl	800dc20 <netconn_apimsg>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800de50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800de54:	4618      	mov	r0, r3
 800de56:	3738      	adds	r7, #56	; 0x38
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	080237d8 	.word	0x080237d8
 800de60:	080238cc 	.word	0x080238cc
 800de64:	0802384c 	.word	0x0802384c
 800de68:	080238ec 	.word	0x080238ec
 800de6c:	0802390c 	.word	0x0802390c
 800de70:	0800fcb5 	.word	0x0800fcb5

0800de74 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08e      	sub	sp, #56	; 0x38
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	4613      	mov	r3, r2
 800de80:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d109      	bne.n	800de9c <netconn_connect+0x28>
 800de88:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <netconn_connect+0x5c>)
 800de8a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800de8e:	4911      	ldr	r1, [pc, #68]	; (800ded4 <netconn_connect+0x60>)
 800de90:	4811      	ldr	r0, [pc, #68]	; (800ded8 <netconn_connect+0x64>)
 800de92:	f013 f9cb 	bl	802122c <iprintf>
 800de96:	f06f 030f 	mvn.w	r3, #15
 800de9a:	e015      	b.n	800dec8 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800dea2:	4b0e      	ldr	r3, [pc, #56]	; (800dedc <netconn_connect+0x68>)
 800dea4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800deae:	88fb      	ldrh	r3, [r7, #6]
 800deb0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800deb2:	f107 0314 	add.w	r3, r7, #20
 800deb6:	4619      	mov	r1, r3
 800deb8:	4809      	ldr	r0, [pc, #36]	; (800dee0 <netconn_connect+0x6c>)
 800deba:	f7ff feb1 	bl	800dc20 <netconn_apimsg>
 800debe:	4603      	mov	r3, r0
 800dec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dec4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3738      	adds	r7, #56	; 0x38
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	080237d8 	.word	0x080237d8
 800ded4:	08023968 	.word	0x08023968
 800ded8:	0802384c 	.word	0x0802384c
 800dedc:	08027518 	.word	0x08027518
 800dee0:	0800f549 	.word	0x0800f549

0800dee4 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08c      	sub	sp, #48	; 0x30
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d109      	bne.n	800df06 <netconn_disconnect+0x22>
 800def2:	4b0d      	ldr	r3, [pc, #52]	; (800df28 <netconn_disconnect+0x44>)
 800def4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800def8:	490c      	ldr	r1, [pc, #48]	; (800df2c <netconn_disconnect+0x48>)
 800defa:	480d      	ldr	r0, [pc, #52]	; (800df30 <netconn_disconnect+0x4c>)
 800defc:	f013 f996 	bl	802122c <iprintf>
 800df00:	f06f 030f 	mvn.w	r3, #15
 800df04:	e00c      	b.n	800df20 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800df0a:	f107 030c 	add.w	r3, r7, #12
 800df0e:	4619      	mov	r1, r3
 800df10:	4808      	ldr	r0, [pc, #32]	; (800df34 <netconn_disconnect+0x50>)
 800df12:	f7ff fe85 	bl	800dc20 <netconn_apimsg>
 800df16:	4603      	mov	r3, r0
 800df18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800df1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800df20:	4618      	mov	r0, r3
 800df22:	3730      	adds	r7, #48	; 0x30
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	080237d8 	.word	0x080237d8
 800df2c:	08023988 	.word	0x08023988
 800df30:	0802384c 	.word	0x0802384c
 800df34:	0800f6c5 	.word	0x0800f6c5

0800df38 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	4613      	mov	r3, r2
 800df44:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800df46:	2300      	movs	r3, #0
 800df48:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d109      	bne.n	800df64 <netconn_recv_data+0x2c>
 800df50:	4b58      	ldr	r3, [pc, #352]	; (800e0b4 <netconn_recv_data+0x17c>)
 800df52:	f44f 7212 	mov.w	r2, #584	; 0x248
 800df56:	4958      	ldr	r1, [pc, #352]	; (800e0b8 <netconn_recv_data+0x180>)
 800df58:	4858      	ldr	r0, [pc, #352]	; (800e0bc <netconn_recv_data+0x184>)
 800df5a:	f013 f967 	bl	802122c <iprintf>
 800df5e:	f06f 030f 	mvn.w	r3, #15
 800df62:	e0a2      	b.n	800e0aa <netconn_recv_data+0x172>
  *new_buf = NULL;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d109      	bne.n	800df84 <netconn_recv_data+0x4c>
 800df70:	4b50      	ldr	r3, [pc, #320]	; (800e0b4 <netconn_recv_data+0x17c>)
 800df72:	f240 224a 	movw	r2, #586	; 0x24a
 800df76:	4952      	ldr	r1, [pc, #328]	; (800e0c0 <netconn_recv_data+0x188>)
 800df78:	4850      	ldr	r0, [pc, #320]	; (800e0bc <netconn_recv_data+0x184>)
 800df7a:	f013 f957 	bl	802122c <iprintf>
 800df7e:	f06f 030f 	mvn.w	r3, #15
 800df82:	e092      	b.n	800e0aa <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3310      	adds	r3, #16
 800df88:	4618      	mov	r0, r3
 800df8a:	f007 fd84 	bl	8015a96 <sys_mbox_valid>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10e      	bne.n	800dfb2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f000 fb01 	bl	800e59c <netconn_err>
 800df9a:	4603      	mov	r3, r0
 800df9c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800df9e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d002      	beq.n	800dfac <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800dfa6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dfaa:	e07e      	b.n	800e0aa <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800dfac:	f06f 030a 	mvn.w	r3, #10
 800dfb0:	e07b      	b.n	800e0aa <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	7f1b      	ldrb	r3, [r3, #28]
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10f      	bne.n	800dfde <netconn_recv_data+0xa6>
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	f003 0304 	and.w	r3, r3, #4
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10a      	bne.n	800dfde <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	7f1b      	ldrb	r3, [r3, #28]
 800dfcc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d104      	bne.n	800dfde <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d023      	beq.n	800e026 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3310      	adds	r3, #16
 800dfe2:	f107 0218 	add.w	r2, r7, #24
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f007 fd38 	bl	8015a5e <sys_arch_mbox_tryfetch>
 800dfee:	4603      	mov	r3, r0
 800dff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dff4:	d11f      	bne.n	800e036 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 fad0 	bl	800e59c <netconn_err>
 800dffc:	4603      	mov	r3, r0
 800dffe:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e000:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e008:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e00c:	e04d      	b.n	800e0aa <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	7f1b      	ldrb	r3, [r3, #28]
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e01a:	f06f 030a 	mvn.w	r3, #10
 800e01e:	e044      	b.n	800e0aa <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e020:	f06f 0306 	mvn.w	r3, #6
 800e024:	e041      	b.n	800e0aa <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3310      	adds	r3, #16
 800e02a:	f107 0118 	add.w	r1, r7, #24
 800e02e:	2200      	movs	r2, #0
 800e030:	4618      	mov	r0, r3
 800e032:	f007 fcd5 	bl	80159e0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e03e:	2b10      	cmp	r3, #16
 800e040:	d117      	bne.n	800e072 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	f107 0217 	add.w	r2, r7, #23
 800e048:	4611      	mov	r1, r2
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 faf8 	bl	800e640 <lwip_netconn_is_err_msg>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e05a:	f113 0f0f 	cmn.w	r3, #15
 800e05e:	d101      	bne.n	800e064 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	e022      	b.n	800e0aa <netconn_recv_data+0x172>
      }
      return err;
 800e064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e068:	e01f      	b.n	800e0aa <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	891b      	ldrh	r3, [r3, #8]
 800e06e:	83fb      	strh	r3, [r7, #30]
 800e070:	e00d      	b.n	800e08e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d106      	bne.n	800e086 <netconn_recv_data+0x14e>
 800e078:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <netconn_recv_data+0x17c>)
 800e07a:	f240 2291 	movw	r2, #657	; 0x291
 800e07e:	4911      	ldr	r1, [pc, #68]	; (800e0c4 <netconn_recv_data+0x18c>)
 800e080:	480e      	ldr	r0, [pc, #56]	; (800e0bc <netconn_recv_data+0x184>)
 800e082:	f013 f8d3 	bl	802122c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	891b      	ldrh	r3, [r3, #8]
 800e08c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e092:	2b00      	cmp	r3, #0
 800e094:	d005      	beq.n	800e0a2 <netconn_recv_data+0x16a>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09a:	8bfa      	ldrh	r2, [r7, #30]
 800e09c:	2101      	movs	r1, #1
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e0a2:	69ba      	ldr	r2, [r7, #24]
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3720      	adds	r7, #32
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	080237d8 	.word	0x080237d8
 800e0b8:	08023a0c 	.word	0x08023a0c
 800e0bc:	0802384c 	.word	0x0802384c
 800e0c0:	08023a2c 	.word	0x08023a2c
 800e0c4:	08023a48 	.word	0x08023a48

0800e0c8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d005      	beq.n	800e0e6 <netconn_tcp_recvd_msg+0x1e>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0e2:	2b10      	cmp	r3, #16
 800e0e4:	d009      	beq.n	800e0fa <netconn_tcp_recvd_msg+0x32>
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <netconn_tcp_recvd_msg+0x50>)
 800e0e8:	f240 22a7 	movw	r2, #679	; 0x2a7
 800e0ec:	490b      	ldr	r1, [pc, #44]	; (800e11c <netconn_tcp_recvd_msg+0x54>)
 800e0ee:	480c      	ldr	r0, [pc, #48]	; (800e120 <netconn_tcp_recvd_msg+0x58>)
 800e0f0:	f013 f89c 	bl	802122c <iprintf>
 800e0f4:	f06f 030f 	mvn.w	r3, #15
 800e0f8:	e00a      	b.n	800e110 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4806      	ldr	r0, [pc, #24]	; (800e124 <netconn_tcp_recvd_msg+0x5c>)
 800e10a:	f7ff fd89 	bl	800dc20 <netconn_apimsg>
 800e10e:	4603      	mov	r3, r0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	080237d8 	.word	0x080237d8
 800e11c:	08023a54 	.word	0x08023a54
 800e120:	0802384c 	.word	0x0802384c
 800e124:	0800f79b 	.word	0x0800f79b

0800e128 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08c      	sub	sp, #48	; 0x30
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d005      	beq.n	800e144 <netconn_tcp_recvd+0x1c>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e140:	2b10      	cmp	r3, #16
 800e142:	d009      	beq.n	800e158 <netconn_tcp_recvd+0x30>
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <netconn_tcp_recvd+0x50>)
 800e146:	f240 22b5 	movw	r2, #693	; 0x2b5
 800e14a:	490c      	ldr	r1, [pc, #48]	; (800e17c <netconn_tcp_recvd+0x54>)
 800e14c:	480c      	ldr	r0, [pc, #48]	; (800e180 <netconn_tcp_recvd+0x58>)
 800e14e:	f013 f86d 	bl	802122c <iprintf>
 800e152:	f06f 030f 	mvn.w	r3, #15
 800e156:	e00b      	b.n	800e170 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800e158:	f107 030c 	add.w	r3, r7, #12
 800e15c:	461a      	mov	r2, r3
 800e15e:	6839      	ldr	r1, [r7, #0]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff ffb1 	bl	800e0c8 <netconn_tcp_recvd_msg>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800e16c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e170:	4618      	mov	r0, r3
 800e172:	3730      	adds	r7, #48	; 0x30
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	080237d8 	.word	0x080237d8
 800e17c:	08023a54 	.word	0x08023a54
 800e180:	0802384c 	.word	0x0802384c

0800e184 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b090      	sub	sp, #64	; 0x40
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	4613      	mov	r3, r2
 800e190:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3310      	adds	r3, #16
 800e196:	4618      	mov	r0, r3
 800e198:	f007 fc7d 	bl	8015a96 <sys_mbox_valid>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e1a2:	f06f 030a 	mvn.w	r3, #10
 800e1a6:	e06d      	b.n	800e284 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	7f1b      	ldrb	r3, [r3, #28]
 800e1ac:	b25b      	sxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	da07      	bge.n	800e1c2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	7f1b      	ldrb	r3, [r3, #28]
 800e1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e1c0:	e039      	b.n	800e236 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e1c2:	79fb      	ldrb	r3, [r7, #7]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	68b9      	ldr	r1, [r7, #8]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff feb5 	bl	800df38 <netconn_recv_data>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800e1d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e1dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e1e0:	e050      	b.n	800e284 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	f003 0308 	and.w	r3, r3, #8
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10e      	bne.n	800e210 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <netconn_recv_data_tcp+0x7a>
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	891b      	ldrh	r3, [r3, #8]
 800e1fc:	e000      	b.n	800e200 <netconn_recv_data_tcp+0x7c>
 800e1fe:	2301      	movs	r3, #1
 800e200:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e202:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e204:	f107 0214 	add.w	r2, r7, #20
 800e208:	4619      	mov	r1, r3
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f7ff ff5c 	bl	800e0c8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	2b00      	cmp	r3, #0
 800e214:	d134      	bne.n	800e280 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e216:	79fb      	ldrb	r3, [r7, #7]
 800e218:	f003 0310 	and.w	r3, r3, #16
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d009      	beq.n	800e234 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	7f1b      	ldrb	r3, [r3, #28]
 800e224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e22e:	f06f 0306 	mvn.w	r3, #6
 800e232:	e027      	b.n	800e284 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e234:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d005      	beq.n	800e24a <netconn_recv_data_tcp+0xc6>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e242:	2200      	movs	r2, #0
 800e244:	2101      	movs	r1, #1
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10f      	bne.n	800e272 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 f9a2 	bl	800e59c <netconn_err>
 800e258:	4603      	mov	r3, r0
 800e25a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800e25e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <netconn_recv_data_tcp+0xe8>
          return err;
 800e266:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e26a:	e00b      	b.n	800e284 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e26c:	f06f 030d 	mvn.w	r3, #13
 800e270:	e008      	b.n	800e284 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e272:	2101      	movs	r1, #1
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f000 f961 	bl	800e53c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e27a:	f06f 030e 	mvn.w	r3, #14
 800e27e:	e001      	b.n	800e284 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e280:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e284:	4618      	mov	r0, r3
 800e286:	3740      	adds	r7, #64	; 0x40
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	4613      	mov	r3, r2
 800e298:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d005      	beq.n	800e2ac <netconn_recv_tcp_pbuf_flags+0x20>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2a8:	2b10      	cmp	r3, #16
 800e2aa:	d009      	beq.n	800e2c0 <netconn_recv_tcp_pbuf_flags+0x34>
 800e2ac:	4b0a      	ldr	r3, [pc, #40]	; (800e2d8 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800e2ae:	f240 3225 	movw	r2, #805	; 0x325
 800e2b2:	490a      	ldr	r1, [pc, #40]	; (800e2dc <netconn_recv_tcp_pbuf_flags+0x50>)
 800e2b4:	480a      	ldr	r0, [pc, #40]	; (800e2e0 <netconn_recv_tcp_pbuf_flags+0x54>)
 800e2b6:	f012 ffb9 	bl	802122c <iprintf>
 800e2ba:	f06f 030f 	mvn.w	r3, #15
 800e2be:	e006      	b.n	800e2ce <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800e2c0:	79fb      	ldrb	r3, [r7, #7]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	68b9      	ldr	r1, [r7, #8]
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f7ff ff5c 	bl	800e184 <netconn_recv_data_tcp>
 800e2cc:	4603      	mov	r3, r0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	080237d8 	.word	0x080237d8
 800e2dc:	08023a54 	.word	0x08023a54
 800e2e0:	0802384c 	.word	0x0802384c

0800e2e4 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d005      	beq.n	800e304 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e300:	2b10      	cmp	r3, #16
 800e302:	d109      	bne.n	800e318 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e304:	4b0a      	ldr	r3, [pc, #40]	; (800e330 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e306:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800e30a:	490a      	ldr	r1, [pc, #40]	; (800e334 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e30c:	480a      	ldr	r0, [pc, #40]	; (800e338 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e30e:	f012 ff8d 	bl	802122c <iprintf>
 800e312:	f06f 030f 	mvn.w	r3, #15
 800e316:	e006      	b.n	800e326 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	461a      	mov	r2, r3
 800e31c:	68b9      	ldr	r1, [r7, #8]
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7ff fe0a 	bl	800df38 <netconn_recv_data>
 800e324:	4603      	mov	r3, r0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	080237d8 	.word	0x080237d8
 800e334:	08023a78 	.word	0x08023a78
 800e338:	0802384c 	.word	0x0802384c

0800e33c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b08c      	sub	sp, #48	; 0x30
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d109      	bne.n	800e360 <netconn_send+0x24>
 800e34c:	4b0e      	ldr	r3, [pc, #56]	; (800e388 <netconn_send+0x4c>)
 800e34e:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e352:	490e      	ldr	r1, [pc, #56]	; (800e38c <netconn_send+0x50>)
 800e354:	480e      	ldr	r0, [pc, #56]	; (800e390 <netconn_send+0x54>)
 800e356:	f012 ff69 	bl	802122c <iprintf>
 800e35a:	f06f 030f 	mvn.w	r3, #15
 800e35e:	e00e      	b.n	800e37e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e368:	f107 030c 	add.w	r3, r7, #12
 800e36c:	4619      	mov	r1, r3
 800e36e:	4809      	ldr	r0, [pc, #36]	; (800e394 <netconn_send+0x58>)
 800e370:	f7ff fc56 	bl	800dc20 <netconn_apimsg>
 800e374:	4603      	mov	r3, r0
 800e376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e37a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3730      	adds	r7, #48	; 0x30
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	080237d8 	.word	0x080237d8
 800e38c:	08023ab0 	.word	0x08023ab0
 800e390:	0802384c 	.word	0x0802384c
 800e394:	0800f701 	.word	0x0800f701

0800e398 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b088      	sub	sp, #32
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e3ae:	78fa      	ldrb	r2, [r7, #3]
 800e3b0:	f107 0110 	add.w	r1, r7, #16
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 f805 	bl	800e3cc <netconn_write_vectors_partly>
 800e3c2:	4603      	mov	r3, r0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3718      	adds	r7, #24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b092      	sub	sp, #72	; 0x48
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	461a      	mov	r2, r3
 800e3da:	460b      	mov	r3, r1
 800e3dc:	80fb      	strh	r3, [r7, #6]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d109      	bne.n	800e3fc <netconn_write_vectors_partly+0x30>
 800e3e8:	4b4e      	ldr	r3, [pc, #312]	; (800e524 <netconn_write_vectors_partly+0x158>)
 800e3ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e3ee:	494e      	ldr	r1, [pc, #312]	; (800e528 <netconn_write_vectors_partly+0x15c>)
 800e3f0:	484e      	ldr	r0, [pc, #312]	; (800e52c <netconn_write_vectors_partly+0x160>)
 800e3f2:	f012 ff1b 	bl	802122c <iprintf>
 800e3f6:	f06f 030f 	mvn.w	r3, #15
 800e3fa:	e08e      	b.n	800e51a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e404:	2b10      	cmp	r3, #16
 800e406:	d009      	beq.n	800e41c <netconn_write_vectors_partly+0x50>
 800e408:	4b46      	ldr	r3, [pc, #280]	; (800e524 <netconn_write_vectors_partly+0x158>)
 800e40a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e40e:	4948      	ldr	r1, [pc, #288]	; (800e530 <netconn_write_vectors_partly+0x164>)
 800e410:	4846      	ldr	r0, [pc, #280]	; (800e52c <netconn_write_vectors_partly+0x160>)
 800e412:	f012 ff0b 	bl	802122c <iprintf>
 800e416:	f06f 0305 	mvn.w	r3, #5
 800e41a:	e07e      	b.n	800e51a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	7f1b      	ldrb	r3, [r3, #28]
 800e420:	f003 0302 	and.w	r3, r3, #2
 800e424:	2b00      	cmp	r3, #0
 800e426:	d104      	bne.n	800e432 <netconn_write_vectors_partly+0x66>
 800e428:	797b      	ldrb	r3, [r7, #5]
 800e42a:	f003 0304 	and.w	r3, r3, #4
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d001      	beq.n	800e436 <netconn_write_vectors_partly+0x6a>
 800e432:	2301      	movs	r3, #1
 800e434:	e000      	b.n	800e438 <netconn_write_vectors_partly+0x6c>
 800e436:	2300      	movs	r3, #0
 800e438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e43c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e440:	2b00      	cmp	r3, #0
 800e442:	d005      	beq.n	800e450 <netconn_write_vectors_partly+0x84>
 800e444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e446:	2b00      	cmp	r3, #0
 800e448:	d102      	bne.n	800e450 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e44a:	f06f 0305 	mvn.w	r3, #5
 800e44e:	e064      	b.n	800e51a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e454:	2300      	movs	r3, #0
 800e456:	643b      	str	r3, [r7, #64]	; 0x40
 800e458:	e015      	b.n	800e486 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45c:	00db      	lsls	r3, r3, #3
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	4413      	add	r3, r2
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e466:	4413      	add	r3, r2
 800e468:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	4413      	add	r3, r2
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e476:	429a      	cmp	r2, r3
 800e478:	d202      	bcs.n	800e480 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e47a:	f06f 0305 	mvn.w	r3, #5
 800e47e:	e04c      	b.n	800e51a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e482:	3301      	adds	r3, #1
 800e484:	643b      	str	r3, [r7, #64]	; 0x40
 800e486:	88fb      	ldrh	r3, [r7, #6]
 800e488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e48a:	429a      	cmp	r2, r3
 800e48c:	dbe5      	blt.n	800e45a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e494:	2300      	movs	r3, #0
 800e496:	e040      	b.n	800e51a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	da0a      	bge.n	800e4b4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e4a4:	f06f 0305 	mvn.w	r3, #5
 800e4a8:	e037      	b.n	800e51a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e4aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e4ae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e4bc:	88fb      	ldrh	r3, [r7, #6]
 800e4be:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e4c4:	797b      	ldrb	r3, [r7, #5]
 800e4c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4cc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e4d2:	f107 0314 	add.w	r3, r7, #20
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4816      	ldr	r0, [pc, #88]	; (800e534 <netconn_write_vectors_partly+0x168>)
 800e4da:	f7ff fba1 	bl	800dc20 <netconn_apimsg>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e4e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d114      	bne.n	800e516 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d002      	beq.n	800e4f8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e4f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10a      	bne.n	800e516 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e504:	429a      	cmp	r2, r3
 800e506:	d006      	beq.n	800e516 <netconn_write_vectors_partly+0x14a>
 800e508:	4b06      	ldr	r3, [pc, #24]	; (800e524 <netconn_write_vectors_partly+0x158>)
 800e50a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e50e:	490a      	ldr	r1, [pc, #40]	; (800e538 <netconn_write_vectors_partly+0x16c>)
 800e510:	4806      	ldr	r0, [pc, #24]	; (800e52c <netconn_write_vectors_partly+0x160>)
 800e512:	f012 fe8b 	bl	802122c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e516:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3748      	adds	r7, #72	; 0x48
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	080237d8 	.word	0x080237d8
 800e528:	08023acc 	.word	0x08023acc
 800e52c:	0802384c 	.word	0x0802384c
 800e530:	08023ae8 	.word	0x08023ae8
 800e534:	0800fb9d 	.word	0x0800fb9d
 800e538:	08023b0c 	.word	0x08023b0c

0800e53c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08c      	sub	sp, #48	; 0x30
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d109      	bne.n	800e562 <netconn_close_shutdown+0x26>
 800e54e:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <netconn_close_shutdown+0x50>)
 800e550:	f240 4247 	movw	r2, #1095	; 0x447
 800e554:	490e      	ldr	r1, [pc, #56]	; (800e590 <netconn_close_shutdown+0x54>)
 800e556:	480f      	ldr	r0, [pc, #60]	; (800e594 <netconn_close_shutdown+0x58>)
 800e558:	f012 fe68 	bl	802122c <iprintf>
 800e55c:	f06f 030f 	mvn.w	r3, #15
 800e560:	e010      	b.n	800e584 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e566:	78fb      	ldrb	r3, [r7, #3]
 800e568:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e56a:	2329      	movs	r3, #41	; 0x29
 800e56c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e56e:	f107 030c 	add.w	r3, r7, #12
 800e572:	4619      	mov	r1, r3
 800e574:	4808      	ldr	r0, [pc, #32]	; (800e598 <netconn_close_shutdown+0x5c>)
 800e576:	f7ff fb53 	bl	800dc20 <netconn_apimsg>
 800e57a:	4603      	mov	r3, r0
 800e57c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e580:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e584:	4618      	mov	r0, r3
 800e586:	3730      	adds	r7, #48	; 0x30
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	080237d8 	.word	0x080237d8
 800e590:	08023b30 	.word	0x08023b30
 800e594:	0802384c 	.word	0x0802384c
 800e598:	0800fdc1 	.word	0x0800fdc1

0800e59c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <netconn_err+0x12>
    return ERR_OK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e00d      	b.n	800e5ca <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e5ae:	f007 fb8d 	bl	8015ccc <sys_arch_protect>
 800e5b2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7a1b      	ldrb	r3, [r3, #8]
 800e5b8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f007 fb91 	bl	8015ce8 <sys_arch_unprotect>
  return err;
 800e5c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
	...

0800e5d4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	4603      	mov	r3, r0
 800e5dc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e5de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e5e2:	f113 0f0d 	cmn.w	r3, #13
 800e5e6:	d009      	beq.n	800e5fc <lwip_netconn_err_to_msg+0x28>
 800e5e8:	f113 0f0d 	cmn.w	r3, #13
 800e5ec:	dc0c      	bgt.n	800e608 <lwip_netconn_err_to_msg+0x34>
 800e5ee:	f113 0f0f 	cmn.w	r3, #15
 800e5f2:	d007      	beq.n	800e604 <lwip_netconn_err_to_msg+0x30>
 800e5f4:	f113 0f0e 	cmn.w	r3, #14
 800e5f8:	d002      	beq.n	800e600 <lwip_netconn_err_to_msg+0x2c>
 800e5fa:	e005      	b.n	800e608 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e5fc:	4b0a      	ldr	r3, [pc, #40]	; (800e628 <lwip_netconn_err_to_msg+0x54>)
 800e5fe:	e00e      	b.n	800e61e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e600:	4b0a      	ldr	r3, [pc, #40]	; (800e62c <lwip_netconn_err_to_msg+0x58>)
 800e602:	e00c      	b.n	800e61e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e604:	4b0a      	ldr	r3, [pc, #40]	; (800e630 <lwip_netconn_err_to_msg+0x5c>)
 800e606:	e00a      	b.n	800e61e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d005      	beq.n	800e61c <lwip_netconn_err_to_msg+0x48>
 800e610:	4b08      	ldr	r3, [pc, #32]	; (800e634 <lwip_netconn_err_to_msg+0x60>)
 800e612:	227d      	movs	r2, #125	; 0x7d
 800e614:	4908      	ldr	r1, [pc, #32]	; (800e638 <lwip_netconn_err_to_msg+0x64>)
 800e616:	4809      	ldr	r0, [pc, #36]	; (800e63c <lwip_netconn_err_to_msg+0x68>)
 800e618:	f012 fe08 	bl	802122c <iprintf>
      return NULL;
 800e61c:	2300      	movs	r3, #0
  }
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	080274c0 	.word	0x080274c0
 800e62c:	080274c1 	.word	0x080274c1
 800e630:	080274c2 	.word	0x080274c2
 800e634:	08023b4c 	.word	0x08023b4c
 800e638:	08023b9c 	.word	0x08023b9c
 800e63c:	08023bac 	.word	0x08023bac

0800e640 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d105      	bne.n	800e65c <lwip_netconn_is_err_msg+0x1c>
 800e650:	4b12      	ldr	r3, [pc, #72]	; (800e69c <lwip_netconn_is_err_msg+0x5c>)
 800e652:	2285      	movs	r2, #133	; 0x85
 800e654:	4912      	ldr	r1, [pc, #72]	; (800e6a0 <lwip_netconn_is_err_msg+0x60>)
 800e656:	4813      	ldr	r0, [pc, #76]	; (800e6a4 <lwip_netconn_is_err_msg+0x64>)
 800e658:	f012 fde8 	bl	802122c <iprintf>

  if (msg == &netconn_aborted) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a12      	ldr	r2, [pc, #72]	; (800e6a8 <lwip_netconn_is_err_msg+0x68>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d104      	bne.n	800e66e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	22f3      	movs	r2, #243	; 0xf3
 800e668:	701a      	strb	r2, [r3, #0]
    return 1;
 800e66a:	2301      	movs	r3, #1
 800e66c:	e012      	b.n	800e694 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a0e      	ldr	r2, [pc, #56]	; (800e6ac <lwip_netconn_is_err_msg+0x6c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d104      	bne.n	800e680 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	22f2      	movs	r2, #242	; 0xf2
 800e67a:	701a      	strb	r2, [r3, #0]
    return 1;
 800e67c:	2301      	movs	r3, #1
 800e67e:	e009      	b.n	800e694 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4a0b      	ldr	r2, [pc, #44]	; (800e6b0 <lwip_netconn_is_err_msg+0x70>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d104      	bne.n	800e692 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	22f1      	movs	r2, #241	; 0xf1
 800e68c:	701a      	strb	r2, [r3, #0]
    return 1;
 800e68e:	2301      	movs	r3, #1
 800e690:	e000      	b.n	800e694 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	08023b4c 	.word	0x08023b4c
 800e6a0:	08023bd4 	.word	0x08023bd4
 800e6a4:	08023bac 	.word	0x08023bac
 800e6a8:	080274c0 	.word	0x080274c0
 800e6ac:	080274c1 	.word	0x080274c1
 800e6b0:	080274c2 	.word	0x080274c2

0800e6b4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b088      	sub	sp, #32
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d105      	bne.n	800e6d4 <recv_udp+0x20>
 800e6c8:	4b34      	ldr	r3, [pc, #208]	; (800e79c <recv_udp+0xe8>)
 800e6ca:	22e5      	movs	r2, #229	; 0xe5
 800e6cc:	4934      	ldr	r1, [pc, #208]	; (800e7a0 <recv_udp+0xec>)
 800e6ce:	4835      	ldr	r0, [pc, #212]	; (800e7a4 <recv_udp+0xf0>)
 800e6d0:	f012 fdac 	bl	802122c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d105      	bne.n	800e6e6 <recv_udp+0x32>
 800e6da:	4b30      	ldr	r3, [pc, #192]	; (800e79c <recv_udp+0xe8>)
 800e6dc:	22e6      	movs	r2, #230	; 0xe6
 800e6de:	4932      	ldr	r1, [pc, #200]	; (800e7a8 <recv_udp+0xf4>)
 800e6e0:	4830      	ldr	r0, [pc, #192]	; (800e7a4 <recv_udp+0xf0>)
 800e6e2:	f012 fda3 	bl	802122c <iprintf>
  conn = (struct netconn *)arg;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d103      	bne.n	800e6f8 <recv_udp+0x44>
    pbuf_free(p);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f005 fd9d 	bl	8014230 <pbuf_free>
    return;
 800e6f6:	e04d      	b.n	800e794 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d005      	beq.n	800e70e <recv_udp+0x5a>
 800e702:	4b26      	ldr	r3, [pc, #152]	; (800e79c <recv_udp+0xe8>)
 800e704:	22ee      	movs	r2, #238	; 0xee
 800e706:	4929      	ldr	r1, [pc, #164]	; (800e7ac <recv_udp+0xf8>)
 800e708:	4826      	ldr	r0, [pc, #152]	; (800e7a4 <recv_udp+0xf0>)
 800e70a:	f012 fd8f 	bl	802122c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	3310      	adds	r3, #16
 800e712:	4618      	mov	r0, r3
 800e714:	f007 f9bf 	bl	8015a96 <sys_mbox_valid>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d103      	bne.n	800e726 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f005 fd86 	bl	8014230 <pbuf_free>
    return;
 800e724:	e036      	b.n	800e794 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e726:	2006      	movs	r0, #6
 800e728:	f004 fda4 	bl	8013274 <memp_malloc>
 800e72c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d103      	bne.n	800e73c <recv_udp+0x88>
    pbuf_free(p);
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f005 fd7b 	bl	8014230 <pbuf_free>
    return;
 800e73a:	e02b      	b.n	800e794 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <recv_udp+0xa0>
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	e000      	b.n	800e756 <recv_udp+0xa2>
 800e754:	2300      	movs	r3, #0
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e75e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	891b      	ldrh	r3, [r3, #8]
 800e764:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	3310      	adds	r3, #16
 800e76a:	69b9      	ldr	r1, [r7, #24]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f007 f91d 	bl	80159ac <sys_mbox_trypost>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d003      	beq.n	800e780 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e778:	69b8      	ldr	r0, [r7, #24]
 800e77a:	f004 fe1b 	bl	80133b4 <netbuf_delete>
    return;
 800e77e:	e009      	b.n	800e794 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	2b00      	cmp	r3, #0
 800e786:	d005      	beq.n	800e794 <recv_udp+0xe0>
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78c:	8afa      	ldrh	r2, [r7, #22]
 800e78e:	2100      	movs	r1, #0
 800e790:	69f8      	ldr	r0, [r7, #28]
 800e792:	4798      	blx	r3
  }
}
 800e794:	3720      	adds	r7, #32
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	08023b4c 	.word	0x08023b4c
 800e7a0:	08023be0 	.word	0x08023be0
 800e7a4:	08023bac 	.word	0x08023bac
 800e7a8:	08023c04 	.word	0x08023c04
 800e7ac:	08023c24 	.word	0x08023c24

0800e7b0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b088      	sub	sp, #32
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
 800e7bc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d106      	bne.n	800e7d2 <recv_tcp+0x22>
 800e7c4:	4b36      	ldr	r3, [pc, #216]	; (800e8a0 <recv_tcp+0xf0>)
 800e7c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e7ca:	4936      	ldr	r1, [pc, #216]	; (800e8a4 <recv_tcp+0xf4>)
 800e7cc:	4836      	ldr	r0, [pc, #216]	; (800e8a8 <recv_tcp+0xf8>)
 800e7ce:	f012 fd2d 	bl	802122c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d106      	bne.n	800e7e6 <recv_tcp+0x36>
 800e7d8:	4b31      	ldr	r3, [pc, #196]	; (800e8a0 <recv_tcp+0xf0>)
 800e7da:	f240 122d 	movw	r2, #301	; 0x12d
 800e7de:	4933      	ldr	r1, [pc, #204]	; (800e8ac <recv_tcp+0xfc>)
 800e7e0:	4831      	ldr	r0, [pc, #196]	; (800e8a8 <recv_tcp+0xf8>)
 800e7e2:	f012 fd23 	bl	802122c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e7e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d006      	beq.n	800e7fc <recv_tcp+0x4c>
 800e7ee:	4b2c      	ldr	r3, [pc, #176]	; (800e8a0 <recv_tcp+0xf0>)
 800e7f0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e7f4:	492e      	ldr	r1, [pc, #184]	; (800e8b0 <recv_tcp+0x100>)
 800e7f6:	482c      	ldr	r0, [pc, #176]	; (800e8a8 <recv_tcp+0xf8>)
 800e7f8:	f012 fd18 	bl	802122c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d102      	bne.n	800e80c <recv_tcp+0x5c>
    return ERR_VAL;
 800e806:	f06f 0305 	mvn.w	r3, #5
 800e80a:	e045      	b.n	800e898 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	429a      	cmp	r2, r3
 800e814:	d006      	beq.n	800e824 <recv_tcp+0x74>
 800e816:	4b22      	ldr	r3, [pc, #136]	; (800e8a0 <recv_tcp+0xf0>)
 800e818:	f240 1235 	movw	r2, #309	; 0x135
 800e81c:	4925      	ldr	r1, [pc, #148]	; (800e8b4 <recv_tcp+0x104>)
 800e81e:	4822      	ldr	r0, [pc, #136]	; (800e8a8 <recv_tcp+0xf8>)
 800e820:	f012 fd04 	bl	802122c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	3310      	adds	r3, #16
 800e828:	4618      	mov	r0, r3
 800e82a:	f007 f934 	bl	8015a96 <sys_mbox_valid>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d10d      	bne.n	800e850 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d008      	beq.n	800e84c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	891b      	ldrh	r3, [r3, #8]
 800e83e:	4619      	mov	r1, r3
 800e840:	68b8      	ldr	r0, [r7, #8]
 800e842:	f007 fe1d 	bl	8016480 <tcp_recved>
      pbuf_free(p);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f005 fcf2 	bl	8014230 <pbuf_free>
    }
    return ERR_OK;
 800e84c:	2300      	movs	r3, #0
 800e84e:	e023      	b.n	800e898 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d005      	beq.n	800e862 <recv_tcp+0xb2>
    msg = p;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	891b      	ldrh	r3, [r3, #8]
 800e85e:	83fb      	strh	r3, [r7, #30]
 800e860:	e003      	b.n	800e86a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e862:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <recv_tcp+0x108>)
 800e864:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	3310      	adds	r3, #16
 800e86e:	69b9      	ldr	r1, [r7, #24]
 800e870:	4618      	mov	r0, r3
 800e872:	f007 f89b 	bl	80159ac <sys_mbox_trypost>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e880:	e00a      	b.n	800e898 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e886:	2b00      	cmp	r3, #0
 800e888:	d005      	beq.n	800e896 <recv_tcp+0xe6>
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e88e:	8bfa      	ldrh	r2, [r7, #30]
 800e890:	2100      	movs	r1, #0
 800e892:	6978      	ldr	r0, [r7, #20]
 800e894:	4798      	blx	r3
  }

  return ERR_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3720      	adds	r7, #32
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	08023b4c 	.word	0x08023b4c
 800e8a4:	08023c44 	.word	0x08023c44
 800e8a8:	08023bac 	.word	0x08023bac
 800e8ac:	08023c68 	.word	0x08023c68
 800e8b0:	08023c88 	.word	0x08023c88
 800e8b4:	08023ca0 	.word	0x08023ca0
 800e8b8:	080274c2 	.word	0x080274c2

0800e8bc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <poll_tcp+0x22>
 800e8d0:	4b29      	ldr	r3, [pc, #164]	; (800e978 <poll_tcp+0xbc>)
 800e8d2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e8d6:	4929      	ldr	r1, [pc, #164]	; (800e97c <poll_tcp+0xc0>)
 800e8d8:	4829      	ldr	r0, [pc, #164]	; (800e980 <poll_tcp+0xc4>)
 800e8da:	f012 fca7 	bl	802122c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	785b      	ldrb	r3, [r3, #1]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d104      	bne.n	800e8f0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e8e6:	2101      	movs	r1, #1
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 ff8b 	bl	800f804 <lwip_netconn_do_writemore>
 800e8ee:	e016      	b.n	800e91e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	785b      	ldrb	r3, [r3, #1]
 800e8f4:	2b04      	cmp	r3, #4
 800e8f6:	d112      	bne.n	800e91e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6a1b      	ldr	r3, [r3, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00a      	beq.n	800e916 <poll_tcp+0x5a>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6a1b      	ldr	r3, [r3, #32]
 800e904:	7a5b      	ldrb	r3, [r3, #9]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d005      	beq.n	800e916 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	7a5a      	ldrb	r2, [r3, #9]
 800e910:	3a01      	subs	r2, #1
 800e912:	b2d2      	uxtb	r2, r2
 800e914:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e916:	2101      	movs	r1, #1
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f000 fb3b 	bl	800ef94 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	7f1b      	ldrb	r3, [r3, #28]
 800e922:	f003 0310 	and.w	r3, r3, #16
 800e926:	2b00      	cmp	r3, #0
 800e928:	d021      	beq.n	800e96e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d01d      	beq.n	800e96e <poll_tcp+0xb2>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e93a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e93e:	d316      	bcc.n	800e96e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e948:	2b04      	cmp	r3, #4
 800e94a:	d810      	bhi.n	800e96e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	7f1b      	ldrb	r3, [r3, #28]
 800e950:	f023 0310 	bic.w	r3, r3, #16
 800e954:	b2da      	uxtb	r2, r3
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <poll_tcp+0xb2>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e966:	2200      	movs	r2, #0
 800e968:	2102      	movs	r1, #2
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	08023b4c 	.word	0x08023b4c
 800e97c:	08023cc0 	.word	0x08023cc0
 800e980:	08023bac 	.word	0x08023bac

0800e984 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	4613      	mov	r3, r2
 800e990:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d106      	bne.n	800e9aa <sent_tcp+0x26>
 800e99c:	4b20      	ldr	r3, [pc, #128]	; (800ea20 <sent_tcp+0x9c>)
 800e99e:	f240 1293 	movw	r2, #403	; 0x193
 800e9a2:	4920      	ldr	r1, [pc, #128]	; (800ea24 <sent_tcp+0xa0>)
 800e9a4:	4820      	ldr	r0, [pc, #128]	; (800ea28 <sent_tcp+0xa4>)
 800e9a6:	f012 fc41 	bl	802122c <iprintf>

  if (conn) {
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d032      	beq.n	800ea16 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	785b      	ldrb	r3, [r3, #1]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d104      	bne.n	800e9c2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	6978      	ldr	r0, [r7, #20]
 800e9bc:	f000 ff22 	bl	800f804 <lwip_netconn_do_writemore>
 800e9c0:	e007      	b.n	800e9d2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	785b      	ldrb	r3, [r3, #1]
 800e9c6:	2b04      	cmp	r3, #4
 800e9c8:	d103      	bne.n	800e9d2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	6978      	ldr	r0, [r7, #20]
 800e9ce:	f000 fae1 	bl	800ef94 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d01d      	beq.n	800ea16 <sent_tcp+0x92>
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e9e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e9e6:	d316      	bcc.n	800ea16 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e9f0:	2b04      	cmp	r3, #4
 800e9f2:	d810      	bhi.n	800ea16 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	7f1b      	ldrb	r3, [r3, #28]
 800e9f8:	f023 0310 	bic.w	r3, r3, #16
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d005      	beq.n	800ea16 <sent_tcp+0x92>
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0e:	88fa      	ldrh	r2, [r7, #6]
 800ea10:	2102      	movs	r1, #2
 800ea12:	6978      	ldr	r0, [r7, #20]
 800ea14:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	08023b4c 	.word	0x08023b4c
 800ea24:	08023cc0 	.word	0x08023cc0
 800ea28:	08023bac 	.word	0x08023bac

0800ea2c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b088      	sub	sp, #32
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	460b      	mov	r3, r1
 800ea36:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d106      	bne.n	800ea50 <err_tcp+0x24>
 800ea42:	4b5f      	ldr	r3, [pc, #380]	; (800ebc0 <err_tcp+0x194>)
 800ea44:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ea48:	495e      	ldr	r1, [pc, #376]	; (800ebc4 <err_tcp+0x198>)
 800ea4a:	485f      	ldr	r0, [pc, #380]	; (800ebc8 <err_tcp+0x19c>)
 800ea4c:	f012 fbee 	bl	802122c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ea50:	f007 f93c 	bl	8015ccc <sys_arch_protect>
 800ea54:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	78fa      	ldrb	r2, [r7, #3]
 800ea60:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	7f1b      	ldrb	r3, [r3, #28]
 800ea66:	f043 0301 	orr.w	r3, r3, #1
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	785b      	ldrb	r3, [r3, #1]
 800ea74:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ea7c:	69b8      	ldr	r0, [r7, #24]
 800ea7e:	f007 f933 	bl	8015ce8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d005      	beq.n	800ea96 <err_tcp+0x6a>
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2104      	movs	r1, #4
 800ea92:	69f8      	ldr	r0, [r7, #28]
 800ea94:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d005      	beq.n	800eaaa <err_tcp+0x7e>
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	69f8      	ldr	r0, [r7, #28]
 800eaa8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d005      	beq.n	800eabe <err_tcp+0x92>
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab6:	2200      	movs	r2, #0
 800eab8:	2102      	movs	r1, #2
 800eaba:	69f8      	ldr	r0, [r7, #28]
 800eabc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800eabe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7ff fd86 	bl	800e5d4 <lwip_netconn_err_to_msg>
 800eac8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	3310      	adds	r3, #16
 800eace:	4618      	mov	r0, r3
 800ead0:	f006 ffe1 	bl	8015a96 <sys_mbox_valid>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	3310      	adds	r3, #16
 800eade:	6939      	ldr	r1, [r7, #16]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f006 ff63 	bl	80159ac <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	3314      	adds	r3, #20
 800eaea:	4618      	mov	r0, r3
 800eaec:	f006 ffd3 	bl	8015a96 <sys_mbox_valid>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d005      	beq.n	800eb02 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	3314      	adds	r3, #20
 800eafa:	6939      	ldr	r1, [r7, #16]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f006 ff55 	bl	80159ac <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d005      	beq.n	800eb14 <err_tcp+0xe8>
 800eb08:	7dfb      	ldrb	r3, [r7, #23]
 800eb0a:	2b04      	cmp	r3, #4
 800eb0c:	d002      	beq.n	800eb14 <err_tcp+0xe8>
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	d143      	bne.n	800eb9c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	7f1b      	ldrb	r3, [r3, #28]
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	bf14      	ite	ne
 800eb20:	2301      	movne	r3, #1
 800eb22:	2300      	moveq	r3, #0
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	7f1b      	ldrb	r3, [r3, #28]
 800eb2c:	f023 0304 	bic.w	r3, r3, #4
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d13b      	bne.n	800ebb4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	6a1b      	ldr	r3, [r3, #32]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <err_tcp+0x126>
 800eb44:	4b1e      	ldr	r3, [pc, #120]	; (800ebc0 <err_tcp+0x194>)
 800eb46:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eb4a:	4920      	ldr	r1, [pc, #128]	; (800ebcc <err_tcp+0x1a0>)
 800eb4c:	481e      	ldr	r0, [pc, #120]	; (800ebc8 <err_tcp+0x19c>)
 800eb4e:	f012 fb6d 	bl	802122c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800eb52:	7dfb      	ldrb	r3, [r7, #23]
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	d104      	bne.n	800eb62 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	6a1b      	ldr	r3, [r3, #32]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	711a      	strb	r2, [r3, #4]
 800eb60:	e003      	b.n	800eb6a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	6a1b      	ldr	r3, [r3, #32]
 800eb66:	78fa      	ldrb	r2, [r7, #3]
 800eb68:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	6a1b      	ldr	r3, [r3, #32]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	330c      	adds	r3, #12
 800eb72:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800eb74:	68b8      	ldr	r0, [r7, #8]
 800eb76:	f007 f81f 	bl	8015bb8 <sys_sem_valid>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d106      	bne.n	800eb8e <err_tcp+0x162>
 800eb80:	4b0f      	ldr	r3, [pc, #60]	; (800ebc0 <err_tcp+0x194>)
 800eb82:	f240 12ef 	movw	r2, #495	; 0x1ef
 800eb86:	4912      	ldr	r1, [pc, #72]	; (800ebd0 <err_tcp+0x1a4>)
 800eb88:	480f      	ldr	r0, [pc, #60]	; (800ebc8 <err_tcp+0x19c>)
 800eb8a:	f012 fb4f 	bl	802122c <iprintf>
      conn->current_msg = NULL;
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	2200      	movs	r2, #0
 800eb92:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800eb94:	68b8      	ldr	r0, [r7, #8]
 800eb96:	f006 fff5 	bl	8015b84 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800eb9a:	e00b      	b.n	800ebb4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	6a1b      	ldr	r3, [r3, #32]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d008      	beq.n	800ebb6 <err_tcp+0x18a>
 800eba4:	4b06      	ldr	r3, [pc, #24]	; (800ebc0 <err_tcp+0x194>)
 800eba6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ebaa:	490a      	ldr	r1, [pc, #40]	; (800ebd4 <err_tcp+0x1a8>)
 800ebac:	4806      	ldr	r0, [pc, #24]	; (800ebc8 <err_tcp+0x19c>)
 800ebae:	f012 fb3d 	bl	802122c <iprintf>
  }
}
 800ebb2:	e000      	b.n	800ebb6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ebb4:	bf00      	nop
}
 800ebb6:	bf00      	nop
 800ebb8:	3720      	adds	r7, #32
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	08023b4c 	.word	0x08023b4c
 800ebc4:	08023cc0 	.word	0x08023cc0
 800ebc8:	08023bac 	.word	0x08023bac
 800ebcc:	08023cd0 	.word	0x08023cd0
 800ebd0:	08023cec 	.word	0x08023cec
 800ebd4:	08023d08 	.word	0x08023d08

0800ebd8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ebe6:	6879      	ldr	r1, [r7, #4]
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f008 fc27 	bl	801743c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ebee:	490a      	ldr	r1, [pc, #40]	; (800ec18 <setup_tcp+0x40>)
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f008 fc35 	bl	8017460 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ebf6:	4909      	ldr	r1, [pc, #36]	; (800ec1c <setup_tcp+0x44>)
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f008 fc53 	bl	80174a4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ebfe:	2202      	movs	r2, #2
 800ec00:	4907      	ldr	r1, [pc, #28]	; (800ec20 <setup_tcp+0x48>)
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f008 fcaa 	bl	801755c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ec08:	4906      	ldr	r1, [pc, #24]	; (800ec24 <setup_tcp+0x4c>)
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f008 fc6c 	bl	80174e8 <tcp_err>
}
 800ec10:	bf00      	nop
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	0800e7b1 	.word	0x0800e7b1
 800ec1c:	0800e985 	.word	0x0800e985
 800ec20:	0800e8bd 	.word	0x0800e8bd
 800ec24:	0800ea2d 	.word	0x0800ea2d

0800ec28 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ec28:	b590      	push	{r4, r7, lr}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ec30:	2300      	movs	r3, #0
 800ec32:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d006      	beq.n	800ec4c <pcb_new+0x24>
 800ec3e:	4b2b      	ldr	r3, [pc, #172]	; (800ecec <pcb_new+0xc4>)
 800ec40:	f240 2265 	movw	r2, #613	; 0x265
 800ec44:	492a      	ldr	r1, [pc, #168]	; (800ecf0 <pcb_new+0xc8>)
 800ec46:	482b      	ldr	r0, [pc, #172]	; (800ecf4 <pcb_new+0xcc>)
 800ec48:	f012 faf0 	bl	802122c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec56:	2b10      	cmp	r3, #16
 800ec58:	d022      	beq.n	800eca0 <pcb_new+0x78>
 800ec5a:	2b20      	cmp	r3, #32
 800ec5c:	d133      	bne.n	800ecc6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681c      	ldr	r4, [r3, #0]
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f00e f8fc 	bl	801ce62 <udp_new_ip_type>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d02a      	beq.n	800ecce <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	2b22      	cmp	r3, #34	; 0x22
 800ec80:	d104      	bne.n	800ec8c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6858      	ldr	r0, [r3, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	461a      	mov	r2, r3
 800ec98:	4917      	ldr	r1, [pc, #92]	; (800ecf8 <pcb_new+0xd0>)
 800ec9a:	f00e f869 	bl	801cd70 <udp_recv>
      }
      break;
 800ec9e:	e016      	b.n	800ecce <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681c      	ldr	r4, [r3, #0]
 800eca4:	7bfb      	ldrb	r3, [r7, #15]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f008 fbba 	bl	8017420 <tcp_new_ip_type>
 800ecac:	4603      	mov	r3, r0
 800ecae:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00b      	beq.n	800ecd2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7ff ff8a 	bl	800ebd8 <setup_tcp>
      }
      break;
 800ecc4:	e005      	b.n	800ecd2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	22fa      	movs	r2, #250	; 0xfa
 800ecca:	711a      	strb	r2, [r3, #4]
      return;
 800eccc:	e00a      	b.n	800ece4 <pcb_new+0xbc>
      break;
 800ecce:	bf00      	nop
 800ecd0:	e000      	b.n	800ecd4 <pcb_new+0xac>
      break;
 800ecd2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d102      	bne.n	800ece4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	22ff      	movs	r2, #255	; 0xff
 800ece2:	711a      	strb	r2, [r3, #4]
  }
}
 800ece4:	3714      	adds	r7, #20
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd90      	pop	{r4, r7, pc}
 800ecea:	bf00      	nop
 800ecec:	08023b4c 	.word	0x08023b4c
 800ecf0:	08023d4c 	.word	0x08023d4c
 800ecf4:	08023bac 	.word	0x08023bac
 800ecf8:	0800e6b5 	.word	0x0800e6b5

0800ecfc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d102      	bne.n	800ed1e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f7ff ff85 	bl	800ec28 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ed1e:	bf00      	nop
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
	...

0800ed28 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	6039      	str	r1, [r7, #0]
 800ed32:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ed34:	2300      	movs	r3, #0
 800ed36:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ed38:	2007      	movs	r0, #7
 800ed3a:	f004 fa9b 	bl	8013274 <memp_malloc>
 800ed3e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <netconn_alloc+0x22>
    return NULL;
 800ed46:	2300      	movs	r3, #0
 800ed48:	e052      	b.n	800edf0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	79fa      	ldrb	r2, [r7, #7]
 800ed54:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ed5c:	79fb      	ldrb	r3, [r7, #7]
 800ed5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed62:	2b10      	cmp	r3, #16
 800ed64:	d004      	beq.n	800ed70 <netconn_alloc+0x48>
 800ed66:	2b20      	cmp	r3, #32
 800ed68:	d105      	bne.n	800ed76 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ed6a:	2306      	movs	r3, #6
 800ed6c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ed6e:	e00a      	b.n	800ed86 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ed70:	2306      	movs	r3, #6
 800ed72:	617b      	str	r3, [r7, #20]
      break;
 800ed74:	e007      	b.n	800ed86 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ed76:	4b20      	ldr	r3, [pc, #128]	; (800edf8 <netconn_alloc+0xd0>)
 800ed78:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ed7c:	491f      	ldr	r1, [pc, #124]	; (800edfc <netconn_alloc+0xd4>)
 800ed7e:	4820      	ldr	r0, [pc, #128]	; (800ee00 <netconn_alloc+0xd8>)
 800ed80:	f012 fa54 	bl	802122c <iprintf>
      goto free_and_return;
 800ed84:	e02f      	b.n	800ede6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3310      	adds	r3, #16
 800ed8a:	6979      	ldr	r1, [r7, #20]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f006 fdd9 	bl	8015944 <sys_mbox_new>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d125      	bne.n	800ede4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	330c      	adds	r3, #12
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f006 fe97 	bl	8015ad2 <sys_sem_new>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d005      	beq.n	800edb6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	3310      	adds	r3, #16
 800edae:	4618      	mov	r0, r3
 800edb0:	f006 fdea 	bl	8015988 <sys_mbox_free>
    goto free_and_return;
 800edb4:	e017      	b.n	800ede6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3314      	adds	r3, #20
 800edba:	4618      	mov	r0, r3
 800edbc:	f006 fe7c 	bl	8015ab8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800edcc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	683a      	ldr	r2, [r7, #0]
 800edd2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2200      	movs	r2, #0
 800edd8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	7cfa      	ldrb	r2, [r7, #19]
 800edde:	771a      	strb	r2, [r3, #28]
  return conn;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	e005      	b.n	800edf0 <netconn_alloc+0xc8>
    goto free_and_return;
 800ede4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	2007      	movs	r0, #7
 800edea:	f004 fab9 	bl	8013360 <memp_free>
  return NULL;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	08023b4c 	.word	0x08023b4c
 800edfc:	08023d6c 	.word	0x08023d6c
 800ee00:	08023bac 	.word	0x08023bac

0800ee04 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d006      	beq.n	800ee22 <netconn_free+0x1e>
 800ee14:	4b1b      	ldr	r3, [pc, #108]	; (800ee84 <netconn_free+0x80>)
 800ee16:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ee1a:	491b      	ldr	r1, [pc, #108]	; (800ee88 <netconn_free+0x84>)
 800ee1c:	481b      	ldr	r0, [pc, #108]	; (800ee8c <netconn_free+0x88>)
 800ee1e:	f012 fa05 	bl	802122c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3310      	adds	r3, #16
 800ee26:	4618      	mov	r0, r3
 800ee28:	f006 fe35 	bl	8015a96 <sys_mbox_valid>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d006      	beq.n	800ee40 <netconn_free+0x3c>
 800ee32:	4b14      	ldr	r3, [pc, #80]	; (800ee84 <netconn_free+0x80>)
 800ee34:	f240 3223 	movw	r2, #803	; 0x323
 800ee38:	4915      	ldr	r1, [pc, #84]	; (800ee90 <netconn_free+0x8c>)
 800ee3a:	4814      	ldr	r0, [pc, #80]	; (800ee8c <netconn_free+0x88>)
 800ee3c:	f012 f9f6 	bl	802122c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3314      	adds	r3, #20
 800ee44:	4618      	mov	r0, r3
 800ee46:	f006 fe26 	bl	8015a96 <sys_mbox_valid>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d006      	beq.n	800ee5e <netconn_free+0x5a>
 800ee50:	4b0c      	ldr	r3, [pc, #48]	; (800ee84 <netconn_free+0x80>)
 800ee52:	f240 3226 	movw	r2, #806	; 0x326
 800ee56:	490f      	ldr	r1, [pc, #60]	; (800ee94 <netconn_free+0x90>)
 800ee58:	480c      	ldr	r0, [pc, #48]	; (800ee8c <netconn_free+0x88>)
 800ee5a:	f012 f9e7 	bl	802122c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	330c      	adds	r3, #12
 800ee62:	4618      	mov	r0, r3
 800ee64:	f006 fe9b 	bl	8015b9e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	330c      	adds	r3, #12
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f006 feb4 	bl	8015bda <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	2007      	movs	r0, #7
 800ee76:	f004 fa73 	bl	8013360 <memp_free>
}
 800ee7a:	bf00      	nop
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	08023b4c 	.word	0x08023b4c
 800ee88:	08023d94 	.word	0x08023d94
 800ee8c:	08023bac 	.word	0x08023bac
 800ee90:	08023dc4 	.word	0x08023dc4
 800ee94:	08023e00 	.word	0x08023e00

0800ee98 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3310      	adds	r3, #16
 800eea4:	4618      	mov	r0, r3
 800eea6:	f006 fdf6 	bl	8015a96 <sys_mbox_valid>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d02f      	beq.n	800ef10 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800eeb0:	e018      	b.n	800eee4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eeba:	2b10      	cmp	r3, #16
 800eebc:	d10e      	bne.n	800eedc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	f107 020f 	add.w	r2, r7, #15
 800eec4:	4611      	mov	r1, r2
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7ff fbba 	bl	800e640 <lwip_netconn_is_err_msg>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d108      	bne.n	800eee4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f005 f9ab 	bl	8014230 <pbuf_free>
 800eeda:	e003      	b.n	800eee4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	4618      	mov	r0, r3
 800eee0:	f004 fa68 	bl	80133b4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3310      	adds	r3, #16
 800eee8:	f107 0210 	add.w	r2, r7, #16
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f006 fdb5 	bl	8015a5e <sys_arch_mbox_tryfetch>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eefa:	d1da      	bne.n	800eeb2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	3310      	adds	r3, #16
 800ef00:	4618      	mov	r0, r3
 800ef02:	f006 fd41 	bl	8015988 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	3310      	adds	r3, #16
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f006 fdd4 	bl	8015ab8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3314      	adds	r3, #20
 800ef14:	4618      	mov	r0, r3
 800ef16:	f006 fdbe 	bl	8015a96 <sys_mbox_valid>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d034      	beq.n	800ef8a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ef20:	e01d      	b.n	800ef5e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	f107 020e 	add.w	r2, r7, #14
 800ef28:	4611      	mov	r1, r2
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff fb88 	bl	800e640 <lwip_netconn_is_err_msg>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d113      	bne.n	800ef5e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ef3a:	6978      	ldr	r0, [r7, #20]
 800ef3c:	f7ff ffac 	bl	800ee98 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d007      	beq.n	800ef58 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f007 fa31 	bl	80163b4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	2200      	movs	r2, #0
 800ef56:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ef58:	6978      	ldr	r0, [r7, #20]
 800ef5a:	f7ff ff53 	bl	800ee04 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3314      	adds	r3, #20
 800ef62:	f107 0210 	add.w	r2, r7, #16
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f006 fd78 	bl	8015a5e <sys_arch_mbox_tryfetch>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef74:	d1d5      	bne.n	800ef22 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3314      	adds	r3, #20
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f006 fd04 	bl	8015988 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3314      	adds	r3, #20
 800ef84:	4618      	mov	r0, r3
 800ef86:	f006 fd97 	bl	8015ab8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ef8a:	bf00      	nop
 800ef8c:	3718      	adds	r7, #24
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
	...

0800ef94 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800efa0:	2300      	movs	r3, #0
 800efa2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <lwip_netconn_do_close_internal+0x24>
 800efaa:	4ba1      	ldr	r3, [pc, #644]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800efac:	f240 32a2 	movw	r2, #930	; 0x3a2
 800efb0:	49a0      	ldr	r1, [pc, #640]	; (800f234 <lwip_netconn_do_close_internal+0x2a0>)
 800efb2:	48a1      	ldr	r0, [pc, #644]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800efb4:	f012 f93a 	bl	802122c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efc0:	2b10      	cmp	r3, #16
 800efc2:	d006      	beq.n	800efd2 <lwip_netconn_do_close_internal+0x3e>
 800efc4:	4b9a      	ldr	r3, [pc, #616]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800efc6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800efca:	499c      	ldr	r1, [pc, #624]	; (800f23c <lwip_netconn_do_close_internal+0x2a8>)
 800efcc:	489a      	ldr	r0, [pc, #616]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800efce:	f012 f92d 	bl	802122c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	2b04      	cmp	r3, #4
 800efd8:	d006      	beq.n	800efe8 <lwip_netconn_do_close_internal+0x54>
 800efda:	4b95      	ldr	r3, [pc, #596]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800efdc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800efe0:	4997      	ldr	r1, [pc, #604]	; (800f240 <lwip_netconn_do_close_internal+0x2ac>)
 800efe2:	4895      	ldr	r0, [pc, #596]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800efe4:	f012 f922 	bl	802122c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <lwip_netconn_do_close_internal+0x6a>
 800eff0:	4b8f      	ldr	r3, [pc, #572]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800eff2:	f240 32a5 	movw	r2, #933	; 0x3a5
 800eff6:	4993      	ldr	r1, [pc, #588]	; (800f244 <lwip_netconn_do_close_internal+0x2b0>)
 800eff8:	488f      	ldr	r0, [pc, #572]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800effa:	f012 f917 	bl	802122c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d106      	bne.n	800f014 <lwip_netconn_do_close_internal+0x80>
 800f006:	4b8a      	ldr	r3, [pc, #552]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800f008:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f00c:	498e      	ldr	r1, [pc, #568]	; (800f248 <lwip_netconn_do_close_internal+0x2b4>)
 800f00e:	488a      	ldr	r0, [pc, #552]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800f010:	f012 f90c 	bl	802122c <iprintf>

  tpcb = conn->pcb.tcp;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a1b      	ldr	r3, [r3, #32]
 800f01e:	7a1b      	ldrb	r3, [r3, #8]
 800f020:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f022:	7bfb      	ldrb	r3, [r7, #15]
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	f003 0302 	and.w	r3, r3, #2
 800f030:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	2b03      	cmp	r3, #3
 800f036:	d102      	bne.n	800f03e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f038:	2301      	movs	r3, #1
 800f03a:	75bb      	strb	r3, [r7, #22]
 800f03c:	e01f      	b.n	800f07e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f03e:	7bbb      	ldrb	r3, [r7, #14]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00e      	beq.n	800f062 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f048:	2b05      	cmp	r3, #5
 800f04a:	d007      	beq.n	800f05c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f050:	2b06      	cmp	r3, #6
 800f052:	d003      	beq.n	800f05c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f058:	2b08      	cmp	r3, #8
 800f05a:	d102      	bne.n	800f062 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f05c:	2301      	movs	r3, #1
 800f05e:	75bb      	strb	r3, [r7, #22]
 800f060:	e00d      	b.n	800f07e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f062:	7b7b      	ldrb	r3, [r7, #13]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d008      	beq.n	800f07a <lwip_netconn_do_close_internal+0xe6>
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	8b5b      	ldrh	r3, [r3, #26]
 800f06c:	f003 0310 	and.w	r3, r3, #16
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f074:	2301      	movs	r3, #1
 800f076:	75bb      	strb	r3, [r7, #22]
 800f078:	e001      	b.n	800f07e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f07e:	7dbb      	ldrb	r3, [r7, #22]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d003      	beq.n	800f08c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f084:	2100      	movs	r1, #0
 800f086:	6938      	ldr	r0, [r7, #16]
 800f088:	f008 f9d8 	bl	801743c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d104      	bne.n	800f09e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f094:	2100      	movs	r1, #0
 800f096:	6938      	ldr	r0, [r7, #16]
 800f098:	f008 fa48 	bl	801752c <tcp_accept>
 800f09c:	e01d      	b.n	800f0da <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d007      	beq.n	800f0b4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	6938      	ldr	r0, [r7, #16]
 800f0a8:	f008 f9da 	bl	8017460 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	6938      	ldr	r0, [r7, #16]
 800f0b0:	f008 fa3c 	bl	801752c <tcp_accept>
    }
    if (shut_tx) {
 800f0b4:	7b7b      	ldrb	r3, [r7, #13]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	6938      	ldr	r0, [r7, #16]
 800f0be:	f008 f9f1 	bl	80174a4 <tcp_sent>
    }
    if (shut_close) {
 800f0c2:	7dbb      	ldrb	r3, [r7, #22]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d008      	beq.n	800f0da <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	6938      	ldr	r0, [r7, #16]
 800f0ce:	f008 fa45 	bl	801755c <tcp_poll>
      tcp_err(tpcb, NULL);
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	6938      	ldr	r0, [r7, #16]
 800f0d6:	f008 fa07 	bl	80174e8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f0da:	7dbb      	ldrb	r3, [r7, #22]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d005      	beq.n	800f0ec <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f0e0:	6938      	ldr	r0, [r7, #16]
 800f0e2:	f007 f821 	bl	8016128 <tcp_close>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	75fb      	strb	r3, [r7, #23]
 800f0ea:	e007      	b.n	800f0fc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f0ec:	7bbb      	ldrb	r3, [r7, #14]
 800f0ee:	7b7a      	ldrb	r2, [r7, #13]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6938      	ldr	r0, [r7, #16]
 800f0f4:	f007 f844 	bl	8016180 <tcp_shutdown>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f0fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d102      	bne.n	800f10a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f104:	2301      	movs	r3, #1
 800f106:	757b      	strb	r3, [r7, #21]
 800f108:	e016      	b.n	800f138 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f10a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f112:	d10f      	bne.n	800f134 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a1b      	ldr	r3, [r3, #32]
 800f118:	7a5b      	ldrb	r3, [r3, #9]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10c      	bne.n	800f138 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f11e:	2301      	movs	r3, #1
 800f120:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f122:	7dbb      	ldrb	r3, [r7, #22]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d007      	beq.n	800f138 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f128:	6938      	ldr	r0, [r7, #16]
 800f12a:	f007 f943 	bl	80163b4 <tcp_abort>
          err = ERR_OK;
 800f12e:	2300      	movs	r3, #0
 800f130:	75fb      	strb	r3, [r7, #23]
 800f132:	e001      	b.n	800f138 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f134:	2301      	movs	r3, #1
 800f136:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f138:	7d7b      	ldrb	r3, [r7, #21]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d044      	beq.n	800f1c8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	330c      	adds	r3, #12
 800f146:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6a1b      	ldr	r3, [r3, #32]
 800f14c:	7dfa      	ldrb	r2, [r7, #23]
 800f14e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2200      	movs	r2, #0
 800f15a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d129      	bne.n	800f1b8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f164:	7dbb      	ldrb	r3, [r7, #22]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00c      	beq.n	800f184 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <lwip_netconn_do_close_internal+0x1f0>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17c:	2200      	movs	r2, #0
 800f17e:	2104      	movs	r1, #4
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	4798      	blx	r3
      }
      if (shut_rx) {
 800f184:	7bbb      	ldrb	r3, [r7, #14]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d009      	beq.n	800f19e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d005      	beq.n	800f19e <lwip_netconn_do_close_internal+0x20a>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f196:	2200      	movs	r2, #0
 800f198:	2100      	movs	r1, #0
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	4798      	blx	r3
      }
      if (shut_tx) {
 800f19e:	7b7b      	ldrb	r3, [r7, #13]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d009      	beq.n	800f1b8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d005      	beq.n	800f1b8 <lwip_netconn_do_close_internal+0x224>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	2102      	movs	r1, #2
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f1b8:	78fb      	ldrb	r3, [r7, #3]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f1be:	68b8      	ldr	r0, [r7, #8]
 800f1c0:	f006 fce0 	bl	8015b84 <sys_sem_signal>
    }
    return ERR_OK;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e02e      	b.n	800f226 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800f1c8:	7d7b      	ldrb	r3, [r7, #21]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d11e      	bne.n	800f20c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	7d1b      	ldrb	r3, [r3, #20]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d106      	bne.n	800f1e4 <lwip_netconn_do_close_internal+0x250>
 800f1d6:	4b16      	ldr	r3, [pc, #88]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800f1d8:	f240 4241 	movw	r2, #1089	; 0x441
 800f1dc:	491b      	ldr	r1, [pc, #108]	; (800f24c <lwip_netconn_do_close_internal+0x2b8>)
 800f1de:	4816      	ldr	r0, [pc, #88]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800f1e0:	f012 f824 	bl	802122c <iprintf>
    if (shut_tx) {
 800f1e4:	7b7b      	ldrb	r3, [r7, #13]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d003      	beq.n	800f1f2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800f1ea:	4919      	ldr	r1, [pc, #100]	; (800f250 <lwip_netconn_do_close_internal+0x2bc>)
 800f1ec:	6938      	ldr	r0, [r7, #16]
 800f1ee:	f008 f959 	bl	80174a4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	4917      	ldr	r1, [pc, #92]	; (800f254 <lwip_netconn_do_close_internal+0x2c0>)
 800f1f6:	6938      	ldr	r0, [r7, #16]
 800f1f8:	f008 f9b0 	bl	801755c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f1fc:	4916      	ldr	r1, [pc, #88]	; (800f258 <lwip_netconn_do_close_internal+0x2c4>)
 800f1fe:	6938      	ldr	r0, [r7, #16]
 800f200:	f008 f972 	bl	80174e8 <tcp_err>
    tcp_arg(tpcb, conn);
 800f204:	6879      	ldr	r1, [r7, #4]
 800f206:	6938      	ldr	r0, [r7, #16]
 800f208:	f008 f918 	bl	801743c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d106      	bne.n	800f222 <lwip_netconn_do_close_internal+0x28e>
 800f214:	4b06      	ldr	r3, [pc, #24]	; (800f230 <lwip_netconn_do_close_internal+0x29c>)
 800f216:	f240 424d 	movw	r2, #1101	; 0x44d
 800f21a:	4910      	ldr	r1, [pc, #64]	; (800f25c <lwip_netconn_do_close_internal+0x2c8>)
 800f21c:	4806      	ldr	r0, [pc, #24]	; (800f238 <lwip_netconn_do_close_internal+0x2a4>)
 800f21e:	f012 f805 	bl	802122c <iprintf>
  return err;
 800f222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	08023b4c 	.word	0x08023b4c
 800f234:	08023e3c 	.word	0x08023e3c
 800f238:	08023bac 	.word	0x08023bac
 800f23c:	08023e4c 	.word	0x08023e4c
 800f240:	08023e6c 	.word	0x08023e6c
 800f244:	08023e90 	.word	0x08023e90
 800f248:	08023cd0 	.word	0x08023cd0
 800f24c:	08023ea4 	.word	0x08023ea4
 800f250:	0800e985 	.word	0x0800e985
 800f254:	0800e8bd 	.word	0x0800e8bd
 800f258:	0800ea2d 	.word	0x0800ea2d
 800f25c:	08023ec8 	.word	0x08023ec8

0800f260 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	785b      	ldrb	r3, [r3, #1]
 800f272:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f274:	7afb      	ldrb	r3, [r7, #11]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00d      	beq.n	800f296 <lwip_netconn_do_delconn+0x36>
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f284:	2b10      	cmp	r3, #16
 800f286:	d006      	beq.n	800f296 <lwip_netconn_do_delconn+0x36>
 800f288:	4b60      	ldr	r3, [pc, #384]	; (800f40c <lwip_netconn_do_delconn+0x1ac>)
 800f28a:	f240 425e 	movw	r2, #1118	; 0x45e
 800f28e:	4960      	ldr	r1, [pc, #384]	; (800f410 <lwip_netconn_do_delconn+0x1b0>)
 800f290:	4860      	ldr	r0, [pc, #384]	; (800f414 <lwip_netconn_do_delconn+0x1b4>)
 800f292:	f011 ffcb 	bl	802122c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f296:	7afb      	ldrb	r3, [r7, #11]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d005      	beq.n	800f2a8 <lwip_netconn_do_delconn+0x48>
 800f29c:	7afb      	ldrb	r3, [r7, #11]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d002      	beq.n	800f2a8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f2a2:	7afb      	ldrb	r3, [r7, #11]
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d109      	bne.n	800f2bc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f2a8:	7afb      	ldrb	r3, [r7, #11]
 800f2aa:	2b03      	cmp	r3, #3
 800f2ac:	d10a      	bne.n	800f2c4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	7f1b      	ldrb	r3, [r3, #28]
 800f2b4:	f003 0304 	and.w	r3, r3, #4
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d103      	bne.n	800f2c4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	22fb      	movs	r2, #251	; 0xfb
 800f2c0:	711a      	strb	r2, [r3, #4]
 800f2c2:	e097      	b.n	800f3f4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f2c4:	7afb      	ldrb	r3, [r7, #11]
 800f2c6:	2b03      	cmp	r3, #3
 800f2c8:	d10d      	bne.n	800f2e6 <lwip_netconn_do_delconn+0x86>
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	7f1b      	ldrb	r3, [r3, #28]
 800f2d0:	f003 0304 	and.w	r3, r3, #4
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d106      	bne.n	800f2e6 <lwip_netconn_do_delconn+0x86>
 800f2d8:	4b4c      	ldr	r3, [pc, #304]	; (800f40c <lwip_netconn_do_delconn+0x1ac>)
 800f2da:	f240 427a 	movw	r2, #1146	; 0x47a
 800f2de:	494e      	ldr	r1, [pc, #312]	; (800f418 <lwip_netconn_do_delconn+0x1b8>)
 800f2e0:	484c      	ldr	r0, [pc, #304]	; (800f414 <lwip_netconn_do_delconn+0x1b4>)
 800f2e2:	f011 ffa3 	bl	802122c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fdd1 	bl	800ee98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d05f      	beq.n	800f3c0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f30a:	2b10      	cmp	r3, #16
 800f30c:	d00d      	beq.n	800f32a <lwip_netconn_do_delconn+0xca>
 800f30e:	2b20      	cmp	r3, #32
 800f310:	d151      	bne.n	800f3b6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	4618      	mov	r0, r3
 800f324:	f00d fd44 	bl	801cdb0 <udp_remove>
          break;
 800f328:	e046      	b.n	800f3b8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	6a1b      	ldr	r3, [r3, #32]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d006      	beq.n	800f342 <lwip_netconn_do_delconn+0xe2>
 800f334:	4b35      	ldr	r3, [pc, #212]	; (800f40c <lwip_netconn_do_delconn+0x1ac>)
 800f336:	f240 4294 	movw	r2, #1172	; 0x494
 800f33a:	4938      	ldr	r1, [pc, #224]	; (800f41c <lwip_netconn_do_delconn+0x1bc>)
 800f33c:	4835      	ldr	r0, [pc, #212]	; (800f414 <lwip_netconn_do_delconn+0x1b4>)
 800f33e:	f011 ff75 	bl	802122c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2204      	movs	r2, #4
 800f348:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2203      	movs	r2, #3
 800f34e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2100      	movs	r1, #0
 800f35e:	4618      	mov	r0, r3
 800f360:	f7ff fe18 	bl	800ef94 <lwip_netconn_do_close_internal>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d04b      	beq.n	800f402 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	785b      	ldrb	r3, [r3, #1]
 800f370:	2b04      	cmp	r3, #4
 800f372:	d006      	beq.n	800f382 <lwip_netconn_do_delconn+0x122>
 800f374:	4b25      	ldr	r3, [pc, #148]	; (800f40c <lwip_netconn_do_delconn+0x1ac>)
 800f376:	f240 429a 	movw	r2, #1178	; 0x49a
 800f37a:	4929      	ldr	r1, [pc, #164]	; (800f420 <lwip_netconn_do_delconn+0x1c0>)
 800f37c:	4825      	ldr	r0, [pc, #148]	; (800f414 <lwip_netconn_do_delconn+0x1b4>)
 800f37e:	f011 ff55 	bl	802122c <iprintf>
            UNLOCK_TCPIP_CORE();
 800f382:	4828      	ldr	r0, [pc, #160]	; (800f424 <lwip_netconn_do_delconn+0x1c4>)
 800f384:	f006 fc6f 	bl	8015c66 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	330c      	adds	r3, #12
 800f38e:	2100      	movs	r1, #0
 800f390:	4618      	mov	r0, r3
 800f392:	f006 fbc6 	bl	8015b22 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f396:	4823      	ldr	r0, [pc, #140]	; (800f424 <lwip_netconn_do_delconn+0x1c4>)
 800f398:	f006 fc56 	bl	8015c48 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	785b      	ldrb	r3, [r3, #1]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d02d      	beq.n	800f402 <lwip_netconn_do_delconn+0x1a2>
 800f3a6:	4b19      	ldr	r3, [pc, #100]	; (800f40c <lwip_netconn_do_delconn+0x1ac>)
 800f3a8:	f240 429e 	movw	r2, #1182	; 0x49e
 800f3ac:	491c      	ldr	r1, [pc, #112]	; (800f420 <lwip_netconn_do_delconn+0x1c0>)
 800f3ae:	4819      	ldr	r0, [pc, #100]	; (800f414 <lwip_netconn_do_delconn+0x1b4>)
 800f3b0:	f011 ff3c 	bl	802122c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f3b4:	e025      	b.n	800f402 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f3b6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <lwip_netconn_do_delconn+0x17a>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	6810      	ldr	r0, [r2, #0]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d007      	beq.n	800f3f4 <lwip_netconn_do_delconn+0x194>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	6810      	ldr	r0, [r2, #0]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	2102      	movs	r1, #2
 800f3f2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	330c      	adds	r3, #12
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f006 fbdc 	bl	8015bb8 <sys_sem_valid>
 800f400:	e000      	b.n	800f404 <lwip_netconn_do_delconn+0x1a4>
          return;
 800f402:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	08023b4c 	.word	0x08023b4c
 800f410:	08023ed8 	.word	0x08023ed8
 800f414:	08023bac 	.word	0x08023bac
 800f418:	08023eec 	.word	0x08023eec
 800f41c:	08023f0c 	.word	0x08023f0c
 800f420:	08023f28 	.word	0x08023f28
 800f424:	24048ea4 	.word	0x24048ea4

0800f428 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	4613      	mov	r3, r2
 800f434:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800f436:	2300      	movs	r3, #0
 800f438:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800f444:	f06f 0305 	mvn.w	r3, #5
 800f448:	e070      	b.n	800f52c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	785b      	ldrb	r3, [r3, #1]
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d006      	beq.n	800f460 <lwip_netconn_do_connected+0x38>
 800f452:	4b38      	ldr	r3, [pc, #224]	; (800f534 <lwip_netconn_do_connected+0x10c>)
 800f454:	f240 5223 	movw	r2, #1315	; 0x523
 800f458:	4937      	ldr	r1, [pc, #220]	; (800f538 <lwip_netconn_do_connected+0x110>)
 800f45a:	4838      	ldr	r0, [pc, #224]	; (800f53c <lwip_netconn_do_connected+0x114>)
 800f45c:	f011 fee6 	bl	802122c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	6a1b      	ldr	r3, [r3, #32]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10c      	bne.n	800f482 <lwip_netconn_do_connected+0x5a>
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	7f1b      	ldrb	r3, [r3, #28]
 800f46c:	f003 0304 	and.w	r3, r3, #4
 800f470:	2b00      	cmp	r3, #0
 800f472:	d106      	bne.n	800f482 <lwip_netconn_do_connected+0x5a>
 800f474:	4b2f      	ldr	r3, [pc, #188]	; (800f534 <lwip_netconn_do_connected+0x10c>)
 800f476:	f240 5224 	movw	r2, #1316	; 0x524
 800f47a:	4931      	ldr	r1, [pc, #196]	; (800f540 <lwip_netconn_do_connected+0x118>)
 800f47c:	482f      	ldr	r0, [pc, #188]	; (800f53c <lwip_netconn_do_connected+0x114>)
 800f47e:	f011 fed5 	bl	802122c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d008      	beq.n	800f49c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	6a1b      	ldr	r3, [r3, #32]
 800f48e:	79fa      	ldrb	r2, [r7, #7]
 800f490:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	330c      	adds	r3, #12
 800f49a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4a4:	2b10      	cmp	r3, #16
 800f4a6:	d106      	bne.n	800f4b6 <lwip_netconn_do_connected+0x8e>
 800f4a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d102      	bne.n	800f4b6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800f4b0:	69b8      	ldr	r0, [r7, #24]
 800f4b2:	f7ff fb91 	bl	800ebd8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	7f1b      	ldrb	r3, [r3, #28]
 800f4ba:	f003 0304 	and.w	r3, r3, #4
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	bf0c      	ite	eq
 800f4c2:	2301      	moveq	r3, #1
 800f4c4:	2300      	movne	r3, #0
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	7f1b      	ldrb	r3, [r3, #28]
 800f4ce:	f023 0304 	bic.w	r3, r3, #4
 800f4d2:	b2da      	uxtb	r2, r3
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <lwip_netconn_do_connected+0xbc>
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10c      	bne.n	800f4fe <lwip_netconn_do_connected+0xd6>
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d102      	bne.n	800f4f0 <lwip_netconn_do_connected+0xc8>
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d006      	beq.n	800f4fe <lwip_netconn_do_connected+0xd6>
 800f4f0:	4b10      	ldr	r3, [pc, #64]	; (800f534 <lwip_netconn_do_connected+0x10c>)
 800f4f2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800f4f6:	4913      	ldr	r1, [pc, #76]	; (800f544 <lwip_netconn_do_connected+0x11c>)
 800f4f8:	4810      	ldr	r0, [pc, #64]	; (800f53c <lwip_netconn_do_connected+0x114>)
 800f4fa:	f011 fe97 	bl	802122c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	2200      	movs	r2, #0
 800f502:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	2200      	movs	r2, #0
 800f508:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d005      	beq.n	800f51e <lwip_netconn_do_connected+0xf6>
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f516:	2200      	movs	r2, #0
 800f518:	2102      	movs	r1, #2
 800f51a:	69b8      	ldr	r0, [r7, #24]
 800f51c:	4798      	blx	r3

  if (was_blocking) {
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800f524:	69f8      	ldr	r0, [r7, #28]
 800f526:	f006 fb2d 	bl	8015b84 <sys_sem_signal>
  }
  return ERR_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3720      	adds	r7, #32
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	08023b4c 	.word	0x08023b4c
 800f538:	08023f30 	.word	0x08023f30
 800f53c:	08023bac 	.word	0x08023bac
 800f540:	08023f50 	.word	0x08023f50
 800f544:	08023f90 	.word	0x08023f90

0800f548 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d102      	bne.n	800f564 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800f55e:	23f1      	movs	r3, #241	; 0xf1
 800f560:	75fb      	strb	r3, [r7, #23]
 800f562:	e09b      	b.n	800f69c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f56e:	2b10      	cmp	r3, #16
 800f570:	d00f      	beq.n	800f592 <lwip_netconn_do_connect+0x4a>
 800f572:	2b20      	cmp	r3, #32
 800f574:	f040 8087 	bne.w	800f686 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	6858      	ldr	r0, [r3, #4]
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	6899      	ldr	r1, [r3, #8]
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	899b      	ldrh	r3, [r3, #12]
 800f586:	461a      	mov	r2, r3
 800f588:	f00d fb5c 	bl	801cc44 <udp_connect>
 800f58c:	4603      	mov	r3, r0
 800f58e:	75fb      	strb	r3, [r7, #23]
        break;
 800f590:	e084      	b.n	800f69c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	785b      	ldrb	r3, [r3, #1]
 800f598:	2b03      	cmp	r3, #3
 800f59a:	d102      	bne.n	800f5a2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800f59c:	23f7      	movs	r3, #247	; 0xf7
 800f59e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800f5a0:	e07b      	b.n	800f69a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	785b      	ldrb	r3, [r3, #1]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800f5ac:	23f6      	movs	r3, #246	; 0xf6
 800f5ae:	75fb      	strb	r3, [r7, #23]
        break;
 800f5b0:	e073      	b.n	800f69a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7ff fb0e 	bl	800ebd8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	6858      	ldr	r0, [r3, #4]
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	6899      	ldr	r1, [r3, #8]
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	899a      	ldrh	r2, [r3, #12]
 800f5ca:	4b38      	ldr	r3, [pc, #224]	; (800f6ac <lwip_netconn_do_connect+0x164>)
 800f5cc:	f006 ffee 	bl	80165ac <tcp_connect>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800f5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d15e      	bne.n	800f69a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	7f1b      	ldrb	r3, [r3, #28]
 800f5e2:	f003 0302 	and.w	r3, r3, #2
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	bf14      	ite	ne
 800f5ea:	2301      	movne	r3, #1
 800f5ec:	2300      	moveq	r3, #0
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2203      	movs	r2, #3
 800f5f8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d009      	beq.n	800f614 <lwip_netconn_do_connect+0xcc>
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	7f1a      	ldrb	r2, [r3, #28]
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f042 0204 	orr.w	r2, r2, #4
 800f60e:	b2d2      	uxtb	r2, r2
 800f610:	771a      	strb	r2, [r3, #28]
 800f612:	e008      	b.n	800f626 <lwip_netconn_do_connect+0xde>
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	7f1a      	ldrb	r2, [r3, #28]
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f022 0204 	bic.w	r2, r2, #4
 800f622:	b2d2      	uxtb	r2, r2
 800f624:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d002      	beq.n	800f632 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800f62c:	23fb      	movs	r3, #251	; 0xfb
 800f62e:	75fb      	strb	r3, [r7, #23]
        break;
 800f630:	e033      	b.n	800f69a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	693a      	ldr	r2, [r7, #16]
 800f638:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	785b      	ldrb	r3, [r3, #1]
 800f640:	2b03      	cmp	r3, #3
 800f642:	d006      	beq.n	800f652 <lwip_netconn_do_connect+0x10a>
 800f644:	4b1a      	ldr	r3, [pc, #104]	; (800f6b0 <lwip_netconn_do_connect+0x168>)
 800f646:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f64a:	491a      	ldr	r1, [pc, #104]	; (800f6b4 <lwip_netconn_do_connect+0x16c>)
 800f64c:	481a      	ldr	r0, [pc, #104]	; (800f6b8 <lwip_netconn_do_connect+0x170>)
 800f64e:	f011 fded 	bl	802122c <iprintf>
              UNLOCK_TCPIP_CORE();
 800f652:	481a      	ldr	r0, [pc, #104]	; (800f6bc <lwip_netconn_do_connect+0x174>)
 800f654:	f006 fb07 	bl	8015c66 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	330c      	adds	r3, #12
 800f65e:	2100      	movs	r1, #0
 800f660:	4618      	mov	r0, r3
 800f662:	f006 fa5e 	bl	8015b22 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800f666:	4815      	ldr	r0, [pc, #84]	; (800f6bc <lwip_netconn_do_connect+0x174>)
 800f668:	f006 faee 	bl	8015c48 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	785b      	ldrb	r3, [r3, #1]
 800f672:	2b03      	cmp	r3, #3
 800f674:	d116      	bne.n	800f6a4 <lwip_netconn_do_connect+0x15c>
 800f676:	4b0e      	ldr	r3, [pc, #56]	; (800f6b0 <lwip_netconn_do_connect+0x168>)
 800f678:	f240 5274 	movw	r2, #1396	; 0x574
 800f67c:	490d      	ldr	r1, [pc, #52]	; (800f6b4 <lwip_netconn_do_connect+0x16c>)
 800f67e:	480e      	ldr	r0, [pc, #56]	; (800f6b8 <lwip_netconn_do_connect+0x170>)
 800f680:	f011 fdd4 	bl	802122c <iprintf>
              return;
 800f684:	e00e      	b.n	800f6a4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800f686:	4b0a      	ldr	r3, [pc, #40]	; (800f6b0 <lwip_netconn_do_connect+0x168>)
 800f688:	f240 527d 	movw	r2, #1405	; 0x57d
 800f68c:	490c      	ldr	r1, [pc, #48]	; (800f6c0 <lwip_netconn_do_connect+0x178>)
 800f68e:	480a      	ldr	r0, [pc, #40]	; (800f6b8 <lwip_netconn_do_connect+0x170>)
 800f690:	f011 fdcc 	bl	802122c <iprintf>
 800f694:	23fa      	movs	r3, #250	; 0xfa
 800f696:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800f698:	e000      	b.n	800f69c <lwip_netconn_do_connect+0x154>
        break;
 800f69a:	bf00      	nop
    }
  }
  msg->err = err;
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	7dfa      	ldrb	r2, [r7, #23]
 800f6a0:	711a      	strb	r2, [r3, #4]
 800f6a2:	e000      	b.n	800f6a6 <lwip_netconn_do_connect+0x15e>
              return;
 800f6a4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	0800f429 	.word	0x0800f429
 800f6b0:	08023b4c 	.word	0x08023b4c
 800f6b4:	08023f28 	.word	0x08023f28
 800f6b8:	08023bac 	.word	0x08023bac
 800f6bc:	24048ea4 	.word	0x24048ea4
 800f6c0:	08023fb0 	.word	0x08023fb0

0800f6c4 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6da:	2b20      	cmp	r3, #32
 800f6dc:	d109      	bne.n	800f6f2 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f00d fb1b 	bl	801cd20 <udp_disconnect>
    msg->err = ERR_OK;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f6f0:	e002      	b.n	800f6f8 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	22fa      	movs	r2, #250	; 0xfa
 800f6f6:	711a      	strb	r2, [r3, #4]
}
 800f6f8:	bf00      	nop
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe ff43 	bl	800e59c <netconn_err>
 800f716:	4603      	mov	r3, r0
 800f718:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d134      	bne.n	800f78c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d02d      	beq.n	800f788 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f736:	2b20      	cmp	r3, #32
 800f738:	d123      	bne.n	800f782 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10c      	bne.n	800f75e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4619      	mov	r1, r3
 800f752:	4610      	mov	r0, r2
 800f754:	f00d f804 	bl	801c760 <udp_send>
 800f758:	4603      	mov	r3, r0
 800f75a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800f75c:	e016      	b.n	800f78c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6858      	ldr	r0, [r3, #4]
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	6819      	ldr	r1, [r3, #0]
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	f103 0208 	add.w	r2, r3, #8
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	899b      	ldrh	r3, [r3, #12]
 800f778:	f00d f826 	bl	801c7c8 <udp_sendto>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73fb      	strb	r3, [r7, #15]
          break;
 800f780:	e004      	b.n	800f78c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800f782:	23f5      	movs	r3, #245	; 0xf5
 800f784:	73fb      	strb	r3, [r7, #15]
          break;
 800f786:	e001      	b.n	800f78c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800f788:	23f5      	movs	r3, #245	; 0xf5
 800f78a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	7bfa      	ldrb	r2, [r7, #15]
 800f790:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f792:	bf00      	nop
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b086      	sub	sp, #24
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d022      	beq.n	800f7fc <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7c0:	2b10      	cmp	r3, #16
 800f7c2:	d11b      	bne.n	800f7fc <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7d0:	d202      	bcs.n	800f7d8 <lwip_netconn_do_recv+0x3e>
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	e001      	b.n	800f7dc <lwip_netconn_do_recv+0x42>
 800f7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7dc:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	89fa      	ldrh	r2, [r7, #14]
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f006 fe49 	bl	8016480 <tcp_recved>
        remaining -= recved;
 800f7ee:	89fb      	ldrh	r3, [r7, #14]
 800f7f0:	697a      	ldr	r2, [r7, #20]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1e6      	bne.n	800f7ca <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f7fc:	bf00      	nop
 800f7fe:	3718      	adds	r7, #24
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	460b      	mov	r3, r1
 800f80e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d106      	bne.n	800f828 <lwip_netconn_do_writemore+0x24>
 800f81a:	4b96      	ldr	r3, [pc, #600]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f81c:	f240 6273 	movw	r2, #1651	; 0x673
 800f820:	4995      	ldr	r1, [pc, #596]	; (800fa78 <lwip_netconn_do_writemore+0x274>)
 800f822:	4896      	ldr	r0, [pc, #600]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f824:	f011 fd02 	bl	802122c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	785b      	ldrb	r3, [r3, #1]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d006      	beq.n	800f83e <lwip_netconn_do_writemore+0x3a>
 800f830:	4b90      	ldr	r3, [pc, #576]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f832:	f240 6274 	movw	r2, #1652	; 0x674
 800f836:	4992      	ldr	r1, [pc, #584]	; (800fa80 <lwip_netconn_do_writemore+0x27c>)
 800f838:	4890      	ldr	r0, [pc, #576]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f83a:	f011 fcf7 	bl	802122c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a1b      	ldr	r3, [r3, #32]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <lwip_netconn_do_writemore+0x50>
 800f846:	4b8b      	ldr	r3, [pc, #556]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f848:	f240 6275 	movw	r2, #1653	; 0x675
 800f84c:	498d      	ldr	r1, [pc, #564]	; (800fa84 <lwip_netconn_do_writemore+0x280>)
 800f84e:	488b      	ldr	r0, [pc, #556]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f850:	f011 fcec 	bl	802122c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d106      	bne.n	800f86a <lwip_netconn_do_writemore+0x66>
 800f85c:	4b85      	ldr	r3, [pc, #532]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f85e:	f240 6276 	movw	r2, #1654	; 0x676
 800f862:	4989      	ldr	r1, [pc, #548]	; (800fa88 <lwip_netconn_do_writemore+0x284>)
 800f864:	4885      	ldr	r0, [pc, #532]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f866:	f011 fce1 	bl	802122c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a1b      	ldr	r3, [r3, #32]
 800f86e:	699a      	ldr	r2, [r3, #24]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6a1b      	ldr	r3, [r3, #32]
 800f874:	695b      	ldr	r3, [r3, #20]
 800f876:	429a      	cmp	r2, r3
 800f878:	d306      	bcc.n	800f888 <lwip_netconn_do_writemore+0x84>
 800f87a:	4b7e      	ldr	r3, [pc, #504]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f87c:	f240 6277 	movw	r2, #1655	; 0x677
 800f880:	4982      	ldr	r1, [pc, #520]	; (800fa8c <lwip_netconn_do_writemore+0x288>)
 800f882:	487e      	ldr	r0, [pc, #504]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f884:	f011 fcd2 	bl	802122c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a1b      	ldr	r3, [r3, #32]
 800f88c:	899b      	ldrh	r3, [r3, #12]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <lwip_netconn_do_writemore+0x9c>
 800f892:	4b78      	ldr	r3, [pc, #480]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f894:	f240 6279 	movw	r2, #1657	; 0x679
 800f898:	497d      	ldr	r1, [pc, #500]	; (800fa90 <lwip_netconn_do_writemore+0x28c>)
 800f89a:	4878      	ldr	r0, [pc, #480]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f89c:	f011 fcc6 	bl	802122c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a1b      	ldr	r3, [r3, #32]
 800f8a4:	7f1b      	ldrb	r3, [r3, #28]
 800f8a6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	7f1b      	ldrb	r3, [r3, #28]
 800f8ac:	f003 0302 	and.w	r3, r3, #2
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d104      	bne.n	800f8be <lwip_netconn_do_writemore+0xba>
 800f8b4:	7ebb      	ldrb	r3, [r7, #26]
 800f8b6:	f003 0304 	and.w	r3, r3, #4
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <lwip_netconn_do_writemore+0xbe>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e000      	b.n	800f8c4 <lwip_netconn_do_writemore+0xc0>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	691b      	ldr	r3, [r3, #16]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a1b      	ldr	r3, [r3, #32]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6a1b      	ldr	r3, [r3, #32]
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8f0:	d307      	bcc.n	800f902 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800f8f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8f6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f8f8:	7ebb      	ldrb	r3, [r7, #26]
 800f8fa:	f043 0302 	orr.w	r3, r3, #2
 800f8fe:	76bb      	strb	r3, [r7, #26]
 800f900:	e001      	b.n	800f906 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f90e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800f910:	89fa      	ldrh	r2, [r7, #14]
 800f912:	8bbb      	ldrh	r3, [r7, #28]
 800f914:	429a      	cmp	r2, r3
 800f916:	d216      	bcs.n	800f946 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800f918:	89fb      	ldrh	r3, [r7, #14]
 800f91a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800f91c:	7e3b      	ldrb	r3, [r7, #24]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d00d      	beq.n	800f93e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800f922:	8bbb      	ldrh	r3, [r7, #28]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10e      	bne.n	800f946 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a1b      	ldr	r3, [r3, #32]
 800f92c:	699b      	ldr	r3, [r3, #24]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d102      	bne.n	800f938 <lwip_netconn_do_writemore+0x134>
 800f932:	f06f 0306 	mvn.w	r3, #6
 800f936:	e000      	b.n	800f93a <lwip_netconn_do_writemore+0x136>
 800f938:	2300      	movs	r3, #0
 800f93a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800f93c:	e07d      	b.n	800fa3a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800f93e:	7ebb      	ldrb	r3, [r7, #26]
 800f940:	f043 0302 	orr.w	r3, r3, #2
 800f944:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	691a      	ldr	r2, [r3, #16]
 800f94c:	8bbb      	ldrh	r3, [r7, #28]
 800f94e:	441a      	add	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a1b      	ldr	r3, [r3, #32]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d906      	bls.n	800f96a <lwip_netconn_do_writemore+0x166>
 800f95c:	4b45      	ldr	r3, [pc, #276]	; (800fa74 <lwip_netconn_do_writemore+0x270>)
 800f95e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800f962:	494c      	ldr	r1, [pc, #304]	; (800fa94 <lwip_netconn_do_writemore+0x290>)
 800f964:	4845      	ldr	r0, [pc, #276]	; (800fa7c <lwip_netconn_do_writemore+0x278>)
 800f966:	f011 fc61 	bl	802122c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f96a:	8bbb      	ldrh	r3, [r7, #28]
 800f96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f970:	4293      	cmp	r3, r2
 800f972:	d103      	bne.n	800f97c <lwip_netconn_do_writemore+0x178>
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f97a:	d209      	bcs.n	800f990 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f980:	8bba      	ldrh	r2, [r7, #28]
 800f982:	429a      	cmp	r2, r3
 800f984:	d10b      	bne.n	800f99e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a1b      	ldr	r3, [r3, #32]
 800f98a:	899b      	ldrh	r3, [r3, #12]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d906      	bls.n	800f99e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800f990:	2301      	movs	r3, #1
 800f992:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f994:	7ebb      	ldrb	r3, [r7, #26]
 800f996:	f043 0302 	orr.w	r3, r3, #2
 800f99a:	76bb      	strb	r3, [r7, #26]
 800f99c:	e001      	b.n	800f9a2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6858      	ldr	r0, [r3, #4]
 800f9a6:	7ebb      	ldrb	r3, [r7, #26]
 800f9a8:	8bba      	ldrh	r2, [r7, #28]
 800f9aa:	6979      	ldr	r1, [r7, #20]
 800f9ac:	f00a fc84 	bl	801a2b8 <tcp_write>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800f9b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d12c      	bne.n	800fa16 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a1b      	ldr	r3, [r3, #32]
 800f9c0:	6999      	ldr	r1, [r3, #24]
 800f9c2:	8bba      	ldrh	r2, [r7, #28]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6a1b      	ldr	r3, [r3, #32]
 800f9c8:	440a      	add	r2, r1
 800f9ca:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a1b      	ldr	r3, [r3, #32]
 800f9d0:	6919      	ldr	r1, [r3, #16]
 800f9d2:	8bba      	ldrh	r2, [r7, #28]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a1b      	ldr	r3, [r3, #32]
 800f9d8:	440a      	add	r2, r1
 800f9da:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a1b      	ldr	r3, [r3, #32]
 800f9e0:	691a      	ldr	r2, [r3, #16]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d113      	bne.n	800fa16 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	899a      	ldrh	r2, [r3, #12]
 800f9f4:	3a01      	subs	r2, #1
 800f9f6:	b292      	uxth	r2, r2
 800f9f8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	899b      	ldrh	r3, [r3, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d008      	beq.n	800fa16 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a1b      	ldr	r3, [r3, #32]
 800fa08:	689a      	ldr	r2, [r3, #8]
 800fa0a:	3208      	adds	r2, #8
 800fa0c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	2200      	movs	r2, #0
 800fa14:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800fa16:	7e7b      	ldrb	r3, [r7, #25]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d004      	beq.n	800fa26 <lwip_netconn_do_writemore+0x222>
 800fa1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f43f af50 	beq.w	800f8c6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800fa26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d004      	beq.n	800fa38 <lwip_netconn_do_writemore+0x234>
 800fa2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa36:	d146      	bne.n	800fac6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800fa38:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800fa3a:	7e3b      	ldrb	r3, [r7, #24]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d02b      	beq.n	800fa98 <lwip_netconn_do_writemore+0x294>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	699a      	ldr	r2, [r3, #24]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d223      	bcs.n	800fa98 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d005      	beq.n	800fa64 <lwip_netconn_do_writemore+0x260>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	2103      	movs	r1, #3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	7f1b      	ldrb	r3, [r3, #28]
 800fa68:	f043 0310 	orr.w	r3, r3, #16
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	771a      	strb	r2, [r3, #28]
 800fa72:	e028      	b.n	800fac6 <lwip_netconn_do_writemore+0x2c2>
 800fa74:	08023b4c 	.word	0x08023b4c
 800fa78:	08023cc0 	.word	0x08023cc0
 800fa7c:	08023bac 	.word	0x08023bac
 800fa80:	08023fc8 	.word	0x08023fc8
 800fa84:	08023cd0 	.word	0x08023cd0
 800fa88:	08023fe8 	.word	0x08023fe8
 800fa8c:	08024000 	.word	0x08024000
 800fa90:	08024040 	.word	0x08024040
 800fa94:	08024068 	.word	0x08024068
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800faa0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800faa4:	d305      	bcc.n	800fab2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d909      	bls.n	800fac6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d005      	beq.n	800fac6 <lwip_netconn_do_writemore+0x2c2>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	2200      	movs	r2, #0
 800fac0:	2103      	movs	r1, #3
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800fac6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d11d      	bne.n	800fb0a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	699a      	ldr	r2, [r3, #24]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	695b      	ldr	r3, [r3, #20]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d002      	beq.n	800fae4 <lwip_netconn_do_writemore+0x2e0>
 800fade:	7e3b      	ldrb	r3, [r7, #24]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800fae4:	2301      	movs	r3, #1
 800fae6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	f00b f9cd 	bl	801ae8c <tcp_output>
 800faf2:	4603      	mov	r3, r0
 800faf4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800faf6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fafa:	f113 0f04 	cmn.w	r3, #4
 800fafe:	d12c      	bne.n	800fb5a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fb00:	7b3b      	ldrb	r3, [r7, #12]
 800fb02:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fb04:	2301      	movs	r3, #1
 800fb06:	76fb      	strb	r3, [r7, #27]
 800fb08:	e027      	b.n	800fb5a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800fb0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fb0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb12:	d120      	bne.n	800fb56 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f00b f9b7 	bl	801ae8c <tcp_output>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800fb22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fb26:	f113 0f04 	cmn.w	r3, #4
 800fb2a:	d104      	bne.n	800fb36 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fb2c:	7b7b      	ldrb	r3, [r7, #13]
 800fb2e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fb30:	2301      	movs	r3, #1
 800fb32:	76fb      	strb	r3, [r7, #27]
 800fb34:	e011      	b.n	800fb5a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800fb36:	7e3b      	ldrb	r3, [r7, #24]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00e      	beq.n	800fb5a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a1b      	ldr	r3, [r3, #32]
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d102      	bne.n	800fb4c <lwip_netconn_do_writemore+0x348>
 800fb46:	f06f 0306 	mvn.w	r3, #6
 800fb4a:	e000      	b.n	800fb4e <lwip_netconn_do_writemore+0x34a>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fb50:	2301      	movs	r3, #1
 800fb52:	76fb      	strb	r3, [r7, #27]
 800fb54:	e001      	b.n	800fb5a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800fb56:	2301      	movs	r3, #1
 800fb58:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800fb5a:	7efb      	ldrb	r3, [r7, #27]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d015      	beq.n	800fb8c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6a1b      	ldr	r3, [r3, #32]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	330c      	adds	r3, #12
 800fb68:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a1b      	ldr	r3, [r3, #32]
 800fb6e:	7ffa      	ldrb	r2, [r7, #31]
 800fb70:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fb7e:	78fb      	ldrb	r3, [r7, #3]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d006      	beq.n	800fb92 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800fb84:	68b8      	ldr	r0, [r7, #8]
 800fb86:	f005 fffd 	bl	8015b84 <sys_sem_signal>
 800fb8a:	e002      	b.n	800fb92 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800fb8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb90:	e000      	b.n	800fb94 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3720      	adds	r7, #32
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fe fcf5 	bl	800e59c <netconn_err>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d166      	bne.n	800fc8c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbc8:	2b10      	cmp	r3, #16
 800fbca:	d15d      	bne.n	800fc88 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	785b      	ldrb	r3, [r3, #1]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d002      	beq.n	800fbdc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800fbd6:	23fb      	movs	r3, #251	; 0xfb
 800fbd8:	73fb      	strb	r3, [r7, #15]
 800fbda:	e057      	b.n	800fc8c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d04d      	beq.n	800fc82 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2201      	movs	r2, #1
 800fbec:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	6a1b      	ldr	r3, [r3, #32]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d006      	beq.n	800fc06 <lwip_netconn_do_write+0x6a>
 800fbf8:	4b28      	ldr	r3, [pc, #160]	; (800fc9c <lwip_netconn_do_write+0x100>)
 800fbfa:	f240 7223 	movw	r2, #1827	; 0x723
 800fbfe:	4928      	ldr	r1, [pc, #160]	; (800fca0 <lwip_netconn_do_write+0x104>)
 800fc00:	4828      	ldr	r0, [pc, #160]	; (800fca4 <lwip_netconn_do_write+0x108>)
 800fc02:	f011 fb13 	bl	802122c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	695b      	ldr	r3, [r3, #20]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d106      	bne.n	800fc1c <lwip_netconn_do_write+0x80>
 800fc0e:	4b23      	ldr	r3, [pc, #140]	; (800fc9c <lwip_netconn_do_write+0x100>)
 800fc10:	f240 7224 	movw	r2, #1828	; 0x724
 800fc14:	4924      	ldr	r1, [pc, #144]	; (800fca8 <lwip_netconn_do_write+0x10c>)
 800fc16:	4823      	ldr	r0, [pc, #140]	; (800fca4 <lwip_netconn_do_write+0x108>)
 800fc18:	f011 fb08 	bl	802122c <iprintf>
        msg->conn->current_msg = msg;
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7ff fdea 	bl	800f804 <lwip_netconn_do_writemore>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d02e      	beq.n	800fc94 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	785b      	ldrb	r3, [r3, #1]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d006      	beq.n	800fc4e <lwip_netconn_do_write+0xb2>
 800fc40:	4b16      	ldr	r3, [pc, #88]	; (800fc9c <lwip_netconn_do_write+0x100>)
 800fc42:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fc46:	4919      	ldr	r1, [pc, #100]	; (800fcac <lwip_netconn_do_write+0x110>)
 800fc48:	4816      	ldr	r0, [pc, #88]	; (800fca4 <lwip_netconn_do_write+0x108>)
 800fc4a:	f011 faef 	bl	802122c <iprintf>
          UNLOCK_TCPIP_CORE();
 800fc4e:	4818      	ldr	r0, [pc, #96]	; (800fcb0 <lwip_netconn_do_write+0x114>)
 800fc50:	f006 f809 	bl	8015c66 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	330c      	adds	r3, #12
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f005 ff60 	bl	8015b22 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800fc62:	4813      	ldr	r0, [pc, #76]	; (800fcb0 <lwip_netconn_do_write+0x114>)
 800fc64:	f005 fff0 	bl	8015c48 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	785b      	ldrb	r3, [r3, #1]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d110      	bne.n	800fc94 <lwip_netconn_do_write+0xf8>
 800fc72:	4b0a      	ldr	r3, [pc, #40]	; (800fc9c <lwip_netconn_do_write+0x100>)
 800fc74:	f240 722c 	movw	r2, #1836	; 0x72c
 800fc78:	490c      	ldr	r1, [pc, #48]	; (800fcac <lwip_netconn_do_write+0x110>)
 800fc7a:	480a      	ldr	r0, [pc, #40]	; (800fca4 <lwip_netconn_do_write+0x108>)
 800fc7c:	f011 fad6 	bl	802122c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800fc80:	e008      	b.n	800fc94 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800fc82:	23f5      	movs	r3, #245	; 0xf5
 800fc84:	73fb      	strb	r3, [r7, #15]
 800fc86:	e001      	b.n	800fc8c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800fc88:	23fa      	movs	r3, #250	; 0xfa
 800fc8a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	7bfa      	ldrb	r2, [r7, #15]
 800fc90:	711a      	strb	r2, [r3, #4]
 800fc92:	e000      	b.n	800fc96 <lwip_netconn_do_write+0xfa>
        return;
 800fc94:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	08023b4c 	.word	0x08023b4c
 800fca0:	08023f0c 	.word	0x08023f0c
 800fca4:	08023bac 	.word	0x08023bac
 800fca8:	08024094 	.word	0x08024094
 800fcac:	08023f28 	.word	0x08023f28
 800fcb0:	24048ea4 	.word	0x24048ea4

0800fcb4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d06b      	beq.n	800fda2 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	7c1b      	ldrb	r3, [r3, #16]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d007      	beq.n	800fce2 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	685a      	ldr	r2, [r3, #4]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	6812      	ldr	r2, [r2, #0]
 800fcde:	601a      	str	r2, [r3, #0]
 800fce0:	e006      	b.n	800fcf0 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	6852      	ldr	r2, [r2, #4]
 800fcee:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd00:	2b10      	cmp	r3, #16
 800fd02:	d021      	beq.n	800fd48 <lwip_netconn_do_getaddr+0x94>
 800fd04:	2b20      	cmp	r3, #32
 800fd06:	d144      	bne.n	800fd92 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	7c1b      	ldrb	r3, [r3, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d007      	beq.n	800fd20 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685a      	ldr	r2, [r3, #4]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	8a52      	ldrh	r2, [r2, #18]
 800fd1c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800fd1e:	e044      	b.n	800fdaa <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	7c1b      	ldrb	r3, [r3, #16]
 800fd28:	f003 0304 	and.w	r3, r3, #4
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d103      	bne.n	800fd38 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	22f5      	movs	r2, #245	; 0xf5
 800fd34:	711a      	strb	r2, [r3, #4]
        break;
 800fd36:	e038      	b.n	800fdaa <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	685a      	ldr	r2, [r3, #4]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	8a92      	ldrh	r2, [r2, #20]
 800fd44:	801a      	strh	r2, [r3, #0]
        break;
 800fd46:	e030      	b.n	800fdaa <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	7c1b      	ldrb	r3, [r3, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10f      	bne.n	800fd70 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d005      	beq.n	800fd68 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	7d1b      	ldrb	r3, [r3, #20]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d103      	bne.n	800fd70 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	22f5      	movs	r2, #245	; 0xf5
 800fd6c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800fd6e:	e01c      	b.n	800fdaa <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	7c1b      	ldrb	r3, [r3, #16]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d004      	beq.n	800fd82 <lwip_netconn_do_getaddr+0xce>
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	8adb      	ldrh	r3, [r3, #22]
 800fd80:	e003      	b.n	800fd8a <lwip_netconn_do_getaddr+0xd6>
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	8b1b      	ldrh	r3, [r3, #24]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	68d2      	ldr	r2, [r2, #12]
 800fd8e:	8013      	strh	r3, [r2, #0]
        break;
 800fd90:	e00b      	b.n	800fdaa <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800fd92:	4b08      	ldr	r3, [pc, #32]	; (800fdb4 <lwip_netconn_do_getaddr+0x100>)
 800fd94:	f240 727d 	movw	r2, #1917	; 0x77d
 800fd98:	4907      	ldr	r1, [pc, #28]	; (800fdb8 <lwip_netconn_do_getaddr+0x104>)
 800fd9a:	4808      	ldr	r0, [pc, #32]	; (800fdbc <lwip_netconn_do_getaddr+0x108>)
 800fd9c:	f011 fa46 	bl	802122c <iprintf>
        break;
 800fda0:	e003      	b.n	800fdaa <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	22f5      	movs	r2, #245	; 0xf5
 800fda6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fda8:	bf00      	nop
 800fdaa:	bf00      	nop
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	08023b4c 	.word	0x08023b4c
 800fdb8:	080240a8 	.word	0x080240a8
 800fdbc:	08023bac 	.word	0x08023bac

0800fdc0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	785b      	ldrb	r3, [r3, #1]
 800fdd2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d069      	beq.n	800feb2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fde8:	2b10      	cmp	r3, #16
 800fdea:	d162      	bne.n	800feb2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fdf0:	2b03      	cmp	r3, #3
 800fdf2:	d002      	beq.n	800fdfa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fdf4:	7afb      	ldrb	r3, [r7, #11]
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	d05b      	beq.n	800feb2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fdfa:	7afb      	ldrb	r3, [r7, #11]
 800fdfc:	2b03      	cmp	r3, #3
 800fdfe:	d103      	bne.n	800fe08 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	22f5      	movs	r2, #245	; 0xf5
 800fe04:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fe06:	e059      	b.n	800febc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800fe08:	7afb      	ldrb	r3, [r7, #11]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d103      	bne.n	800fe16 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	22fb      	movs	r2, #251	; 0xfb
 800fe12:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fe14:	e052      	b.n	800febc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	7a1b      	ldrb	r3, [r3, #8]
 800fe1a:	f003 0301 	and.w	r3, r3, #1
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d004      	beq.n	800fe2c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff f836 	bl	800ee98 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d006      	beq.n	800fe44 <lwip_netconn_do_close+0x84>
 800fe36:	4b23      	ldr	r3, [pc, #140]	; (800fec4 <lwip_netconn_do_close+0x104>)
 800fe38:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800fe3c:	4922      	ldr	r1, [pc, #136]	; (800fec8 <lwip_netconn_do_close+0x108>)
 800fe3e:	4823      	ldr	r0, [pc, #140]	; (800fecc <lwip_netconn_do_close+0x10c>)
 800fe40:	f011 f9f4 	bl	802122c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2204      	movs	r2, #4
 800fe4a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2100      	movs	r1, #0
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff f89a 	bl	800ef94 <lwip_netconn_do_close_internal>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d029      	beq.n	800feba <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	785b      	ldrb	r3, [r3, #1]
 800fe6c:	2b04      	cmp	r3, #4
 800fe6e:	d006      	beq.n	800fe7e <lwip_netconn_do_close+0xbe>
 800fe70:	4b14      	ldr	r3, [pc, #80]	; (800fec4 <lwip_netconn_do_close+0x104>)
 800fe72:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800fe76:	4916      	ldr	r1, [pc, #88]	; (800fed0 <lwip_netconn_do_close+0x110>)
 800fe78:	4814      	ldr	r0, [pc, #80]	; (800fecc <lwip_netconn_do_close+0x10c>)
 800fe7a:	f011 f9d7 	bl	802122c <iprintf>
        UNLOCK_TCPIP_CORE();
 800fe7e:	4815      	ldr	r0, [pc, #84]	; (800fed4 <lwip_netconn_do_close+0x114>)
 800fe80:	f005 fef1 	bl	8015c66 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	330c      	adds	r3, #12
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f005 fe48 	bl	8015b22 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fe92:	4810      	ldr	r0, [pc, #64]	; (800fed4 <lwip_netconn_do_close+0x114>)
 800fe94:	f005 fed8 	bl	8015c48 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	785b      	ldrb	r3, [r3, #1]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d00b      	beq.n	800feba <lwip_netconn_do_close+0xfa>
 800fea2:	4b08      	ldr	r3, [pc, #32]	; (800fec4 <lwip_netconn_do_close+0x104>)
 800fea4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800fea8:	4909      	ldr	r1, [pc, #36]	; (800fed0 <lwip_netconn_do_close+0x110>)
 800feaa:	4808      	ldr	r0, [pc, #32]	; (800fecc <lwip_netconn_do_close+0x10c>)
 800feac:	f011 f9be 	bl	802122c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800feb0:	e003      	b.n	800feba <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	22f5      	movs	r2, #245	; 0xf5
 800feb6:	711a      	strb	r2, [r3, #4]
 800feb8:	e000      	b.n	800febc <lwip_netconn_do_close+0xfc>
      return;
 800feba:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800febc:	3710      	adds	r7, #16
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	08023b4c 	.word	0x08023b4c
 800fec8:	08023f0c 	.word	0x08023f0c
 800fecc:	08023bac 	.word	0x08023bac
 800fed0:	08023f28 	.word	0x08023f28
 800fed4:	24048ea4 	.word	0x24048ea4

0800fed8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fee2:	88fb      	ldrh	r3, [r7, #6]
 800fee4:	021b      	lsls	r3, r3, #8
 800fee6:	b21a      	sxth	r2, r3
 800fee8:	88fb      	ldrh	r3, [r7, #6]
 800feea:	0a1b      	lsrs	r3, r3, #8
 800feec:	b29b      	uxth	r3, r3
 800feee:	b21b      	sxth	r3, r3
 800fef0:	4313      	orrs	r3, r2
 800fef2:	b21b      	sxth	r3, r3
 800fef4:	b29b      	uxth	r3, r3
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ff02:	b480      	push	{r7}
 800ff04:	b083      	sub	sp, #12
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	061a      	lsls	r2, r3, #24
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	021b      	lsls	r3, r3, #8
 800ff12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ff16:	431a      	orrs	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	0a1b      	lsrs	r3, r3, #8
 800ff1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ff20:	431a      	orrs	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	0e1b      	lsrs	r3, r3, #24
 800ff26:	4313      	orrs	r3, r2
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800ff3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dc04      	bgt.n	800ff50 <err_to_errno+0x1c>
 800ff46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff4a:	f113 0f10 	cmn.w	r3, #16
 800ff4e:	da01      	bge.n	800ff54 <err_to_errno+0x20>
    return EIO;
 800ff50:	2305      	movs	r3, #5
 800ff52:	e005      	b.n	800ff60 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800ff54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff58:	425b      	negs	r3, r3
 800ff5a:	4a04      	ldr	r2, [pc, #16]	; (800ff6c <err_to_errno+0x38>)
 800ff5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	080274c4 	.word	0x080274c4

0800ff70 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ff78:	4915      	ldr	r1, [pc, #84]	; (800ffd0 <etharp_free_entry+0x60>)
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	005b      	lsls	r3, r3, #1
 800ff80:	4413      	add	r3, r2
 800ff82:	00db      	lsls	r3, r3, #3
 800ff84:	440b      	add	r3, r1
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d013      	beq.n	800ffb4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ff8c:	4910      	ldr	r1, [pc, #64]	; (800ffd0 <etharp_free_entry+0x60>)
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	4613      	mov	r3, r2
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	4413      	add	r3, r2
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	440b      	add	r3, r1
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f004 f947 	bl	8014230 <pbuf_free>
    arp_table[i].q = NULL;
 800ffa2:	490b      	ldr	r1, [pc, #44]	; (800ffd0 <etharp_free_entry+0x60>)
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	005b      	lsls	r3, r3, #1
 800ffaa:	4413      	add	r3, r2
 800ffac:	00db      	lsls	r3, r3, #3
 800ffae:	440b      	add	r3, r1
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ffb4:	4906      	ldr	r1, [pc, #24]	; (800ffd0 <etharp_free_entry+0x60>)
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4613      	mov	r3, r2
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	4413      	add	r3, r2
 800ffbe:	00db      	lsls	r3, r3, #3
 800ffc0:	440b      	add	r3, r1
 800ffc2:	3314      	adds	r3, #20
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ffc8:	bf00      	nop
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	240405dc 	.word	0x240405dc

0800ffd4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ffda:	2300      	movs	r3, #0
 800ffdc:	607b      	str	r3, [r7, #4]
 800ffde:	e096      	b.n	801010e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ffe0:	494f      	ldr	r1, [pc, #316]	; (8010120 <etharp_tmr+0x14c>)
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	005b      	lsls	r3, r3, #1
 800ffe8:	4413      	add	r3, r2
 800ffea:	00db      	lsls	r3, r3, #3
 800ffec:	440b      	add	r3, r1
 800ffee:	3314      	adds	r3, #20
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fff4:	78fb      	ldrb	r3, [r7, #3]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f000 8086 	beq.w	8010108 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fffc:	4948      	ldr	r1, [pc, #288]	; (8010120 <etharp_tmr+0x14c>)
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	4613      	mov	r3, r2
 8010002:	005b      	lsls	r3, r3, #1
 8010004:	4413      	add	r3, r2
 8010006:	00db      	lsls	r3, r3, #3
 8010008:	440b      	add	r3, r1
 801000a:	3312      	adds	r3, #18
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	3301      	adds	r3, #1
 8010010:	b298      	uxth	r0, r3
 8010012:	4943      	ldr	r1, [pc, #268]	; (8010120 <etharp_tmr+0x14c>)
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	4613      	mov	r3, r2
 8010018:	005b      	lsls	r3, r3, #1
 801001a:	4413      	add	r3, r2
 801001c:	00db      	lsls	r3, r3, #3
 801001e:	440b      	add	r3, r1
 8010020:	3312      	adds	r3, #18
 8010022:	4602      	mov	r2, r0
 8010024:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010026:	493e      	ldr	r1, [pc, #248]	; (8010120 <etharp_tmr+0x14c>)
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	4613      	mov	r3, r2
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	4413      	add	r3, r2
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	440b      	add	r3, r1
 8010034:	3312      	adds	r3, #18
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801003c:	d215      	bcs.n	801006a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801003e:	4938      	ldr	r1, [pc, #224]	; (8010120 <etharp_tmr+0x14c>)
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	4613      	mov	r3, r2
 8010044:	005b      	lsls	r3, r3, #1
 8010046:	4413      	add	r3, r2
 8010048:	00db      	lsls	r3, r3, #3
 801004a:	440b      	add	r3, r1
 801004c:	3314      	adds	r3, #20
 801004e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010050:	2b01      	cmp	r3, #1
 8010052:	d10e      	bne.n	8010072 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010054:	4932      	ldr	r1, [pc, #200]	; (8010120 <etharp_tmr+0x14c>)
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	4613      	mov	r3, r2
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	4413      	add	r3, r2
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	440b      	add	r3, r1
 8010062:	3312      	adds	r3, #18
 8010064:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010066:	2b04      	cmp	r3, #4
 8010068:	d903      	bls.n	8010072 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f7ff ff80 	bl	800ff70 <etharp_free_entry>
 8010070:	e04a      	b.n	8010108 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010072:	492b      	ldr	r1, [pc, #172]	; (8010120 <etharp_tmr+0x14c>)
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	4613      	mov	r3, r2
 8010078:	005b      	lsls	r3, r3, #1
 801007a:	4413      	add	r3, r2
 801007c:	00db      	lsls	r3, r3, #3
 801007e:	440b      	add	r3, r1
 8010080:	3314      	adds	r3, #20
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2b03      	cmp	r3, #3
 8010086:	d10a      	bne.n	801009e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010088:	4925      	ldr	r1, [pc, #148]	; (8010120 <etharp_tmr+0x14c>)
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	4613      	mov	r3, r2
 801008e:	005b      	lsls	r3, r3, #1
 8010090:	4413      	add	r3, r2
 8010092:	00db      	lsls	r3, r3, #3
 8010094:	440b      	add	r3, r1
 8010096:	3314      	adds	r3, #20
 8010098:	2204      	movs	r2, #4
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	e034      	b.n	8010108 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801009e:	4920      	ldr	r1, [pc, #128]	; (8010120 <etharp_tmr+0x14c>)
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	4613      	mov	r3, r2
 80100a4:	005b      	lsls	r3, r3, #1
 80100a6:	4413      	add	r3, r2
 80100a8:	00db      	lsls	r3, r3, #3
 80100aa:	440b      	add	r3, r1
 80100ac:	3314      	adds	r3, #20
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	2b04      	cmp	r3, #4
 80100b2:	d10a      	bne.n	80100ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80100b4:	491a      	ldr	r1, [pc, #104]	; (8010120 <etharp_tmr+0x14c>)
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	4613      	mov	r3, r2
 80100ba:	005b      	lsls	r3, r3, #1
 80100bc:	4413      	add	r3, r2
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	440b      	add	r3, r1
 80100c2:	3314      	adds	r3, #20
 80100c4:	2202      	movs	r2, #2
 80100c6:	701a      	strb	r2, [r3, #0]
 80100c8:	e01e      	b.n	8010108 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80100ca:	4915      	ldr	r1, [pc, #84]	; (8010120 <etharp_tmr+0x14c>)
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	440b      	add	r3, r1
 80100d8:	3314      	adds	r3, #20
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d113      	bne.n	8010108 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80100e0:	490f      	ldr	r1, [pc, #60]	; (8010120 <etharp_tmr+0x14c>)
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	4613      	mov	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	4413      	add	r3, r2
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	440b      	add	r3, r1
 80100ee:	3308      	adds	r3, #8
 80100f0:	6818      	ldr	r0, [r3, #0]
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	4613      	mov	r3, r2
 80100f6:	005b      	lsls	r3, r3, #1
 80100f8:	4413      	add	r3, r2
 80100fa:	00db      	lsls	r3, r3, #3
 80100fc:	4a08      	ldr	r2, [pc, #32]	; (8010120 <etharp_tmr+0x14c>)
 80100fe:	4413      	add	r3, r2
 8010100:	3304      	adds	r3, #4
 8010102:	4619      	mov	r1, r3
 8010104:	f000 fe6e 	bl	8010de4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3301      	adds	r3, #1
 801010c:	607b      	str	r3, [r7, #4]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2b09      	cmp	r3, #9
 8010112:	f77f af65 	ble.w	800ffe0 <etharp_tmr+0xc>
      }
    }
  }
}
 8010116:	bf00      	nop
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	240405dc 	.word	0x240405dc

08010124 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08a      	sub	sp, #40	; 0x28
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	460b      	mov	r3, r1
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010132:	230a      	movs	r3, #10
 8010134:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010136:	230a      	movs	r3, #10
 8010138:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801013a:	230a      	movs	r3, #10
 801013c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010142:	230a      	movs	r3, #10
 8010144:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	83bb      	strh	r3, [r7, #28]
 801014a:	2300      	movs	r3, #0
 801014c:	837b      	strh	r3, [r7, #26]
 801014e:	2300      	movs	r3, #0
 8010150:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010152:	2300      	movs	r3, #0
 8010154:	843b      	strh	r3, [r7, #32]
 8010156:	e0ae      	b.n	80102b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010158:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801015c:	49a6      	ldr	r1, [pc, #664]	; (80103f8 <etharp_find_entry+0x2d4>)
 801015e:	4613      	mov	r3, r2
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	4413      	add	r3, r2
 8010164:	00db      	lsls	r3, r3, #3
 8010166:	440b      	add	r3, r1
 8010168:	3314      	adds	r3, #20
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801016e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010172:	2b0a      	cmp	r3, #10
 8010174:	d105      	bne.n	8010182 <etharp_find_entry+0x5e>
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d102      	bne.n	8010182 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801017c:	8c3b      	ldrh	r3, [r7, #32]
 801017e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010180:	e095      	b.n	80102ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	2b00      	cmp	r3, #0
 8010186:	f000 8092 	beq.w	80102ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801018a:	7dfb      	ldrb	r3, [r7, #23]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d009      	beq.n	80101a4 <etharp_find_entry+0x80>
 8010190:	7dfb      	ldrb	r3, [r7, #23]
 8010192:	2b01      	cmp	r3, #1
 8010194:	d806      	bhi.n	80101a4 <etharp_find_entry+0x80>
 8010196:	4b99      	ldr	r3, [pc, #612]	; (80103fc <etharp_find_entry+0x2d8>)
 8010198:	f240 1223 	movw	r2, #291	; 0x123
 801019c:	4998      	ldr	r1, [pc, #608]	; (8010400 <etharp_find_entry+0x2dc>)
 801019e:	4899      	ldr	r0, [pc, #612]	; (8010404 <etharp_find_entry+0x2e0>)
 80101a0:	f011 f844 	bl	802122c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d020      	beq.n	80101ec <etharp_find_entry+0xc8>
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6819      	ldr	r1, [r3, #0]
 80101ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101b2:	4891      	ldr	r0, [pc, #580]	; (80103f8 <etharp_find_entry+0x2d4>)
 80101b4:	4613      	mov	r3, r2
 80101b6:	005b      	lsls	r3, r3, #1
 80101b8:	4413      	add	r3, r2
 80101ba:	00db      	lsls	r3, r3, #3
 80101bc:	4403      	add	r3, r0
 80101be:	3304      	adds	r3, #4
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4299      	cmp	r1, r3
 80101c4:	d112      	bne.n	80101ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d00c      	beq.n	80101e6 <etharp_find_entry+0xc2>
 80101cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101d0:	4989      	ldr	r1, [pc, #548]	; (80103f8 <etharp_find_entry+0x2d4>)
 80101d2:	4613      	mov	r3, r2
 80101d4:	005b      	lsls	r3, r3, #1
 80101d6:	4413      	add	r3, r2
 80101d8:	00db      	lsls	r3, r3, #3
 80101da:	440b      	add	r3, r1
 80101dc:	3308      	adds	r3, #8
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d102      	bne.n	80101ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80101e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80101ea:	e100      	b.n	80103ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d140      	bne.n	8010274 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80101f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101f6:	4980      	ldr	r1, [pc, #512]	; (80103f8 <etharp_find_entry+0x2d4>)
 80101f8:	4613      	mov	r3, r2
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	4413      	add	r3, r2
 80101fe:	00db      	lsls	r3, r3, #3
 8010200:	440b      	add	r3, r1
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d01a      	beq.n	801023e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010208:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801020c:	497a      	ldr	r1, [pc, #488]	; (80103f8 <etharp_find_entry+0x2d4>)
 801020e:	4613      	mov	r3, r2
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	4413      	add	r3, r2
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	440b      	add	r3, r1
 8010218:	3312      	adds	r3, #18
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	8bba      	ldrh	r2, [r7, #28]
 801021e:	429a      	cmp	r2, r3
 8010220:	d845      	bhi.n	80102ae <etharp_find_entry+0x18a>
            old_queue = i;
 8010222:	8c3b      	ldrh	r3, [r7, #32]
 8010224:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801022a:	4973      	ldr	r1, [pc, #460]	; (80103f8 <etharp_find_entry+0x2d4>)
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	3312      	adds	r3, #18
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	83bb      	strh	r3, [r7, #28]
 801023c:	e037      	b.n	80102ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801023e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010242:	496d      	ldr	r1, [pc, #436]	; (80103f8 <etharp_find_entry+0x2d4>)
 8010244:	4613      	mov	r3, r2
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	4413      	add	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	440b      	add	r3, r1
 801024e:	3312      	adds	r3, #18
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	8b7a      	ldrh	r2, [r7, #26]
 8010254:	429a      	cmp	r2, r3
 8010256:	d82a      	bhi.n	80102ae <etharp_find_entry+0x18a>
            old_pending = i;
 8010258:	8c3b      	ldrh	r3, [r7, #32]
 801025a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801025c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010260:	4965      	ldr	r1, [pc, #404]	; (80103f8 <etharp_find_entry+0x2d4>)
 8010262:	4613      	mov	r3, r2
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4413      	add	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	440b      	add	r3, r1
 801026c:	3312      	adds	r3, #18
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	837b      	strh	r3, [r7, #26]
 8010272:	e01c      	b.n	80102ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d919      	bls.n	80102ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801027a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801027e:	495e      	ldr	r1, [pc, #376]	; (80103f8 <etharp_find_entry+0x2d4>)
 8010280:	4613      	mov	r3, r2
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	4413      	add	r3, r2
 8010286:	00db      	lsls	r3, r3, #3
 8010288:	440b      	add	r3, r1
 801028a:	3312      	adds	r3, #18
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	8b3a      	ldrh	r2, [r7, #24]
 8010290:	429a      	cmp	r2, r3
 8010292:	d80c      	bhi.n	80102ae <etharp_find_entry+0x18a>
            old_stable = i;
 8010294:	8c3b      	ldrh	r3, [r7, #32]
 8010296:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801029c:	4956      	ldr	r1, [pc, #344]	; (80103f8 <etharp_find_entry+0x2d4>)
 801029e:	4613      	mov	r3, r2
 80102a0:	005b      	lsls	r3, r3, #1
 80102a2:	4413      	add	r3, r2
 80102a4:	00db      	lsls	r3, r3, #3
 80102a6:	440b      	add	r3, r1
 80102a8:	3312      	adds	r3, #18
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102ae:	8c3b      	ldrh	r3, [r7, #32]
 80102b0:	3301      	adds	r3, #1
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	843b      	strh	r3, [r7, #32]
 80102b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102ba:	2b09      	cmp	r3, #9
 80102bc:	f77f af4c 	ble.w	8010158 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80102c0:	7afb      	ldrb	r3, [r7, #11]
 80102c2:	f003 0302 	and.w	r3, r3, #2
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d108      	bne.n	80102dc <etharp_find_entry+0x1b8>
 80102ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80102ce:	2b0a      	cmp	r3, #10
 80102d0:	d107      	bne.n	80102e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80102d2:	7afb      	ldrb	r3, [r7, #11]
 80102d4:	f003 0301 	and.w	r3, r3, #1
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d102      	bne.n	80102e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80102dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102e0:	e085      	b.n	80103ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80102e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80102e6:	2b09      	cmp	r3, #9
 80102e8:	dc02      	bgt.n	80102f0 <etharp_find_entry+0x1cc>
    i = empty;
 80102ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102ec:	843b      	strh	r3, [r7, #32]
 80102ee:	e039      	b.n	8010364 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80102f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80102f4:	2b09      	cmp	r3, #9
 80102f6:	dc14      	bgt.n	8010322 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80102f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80102fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010300:	493d      	ldr	r1, [pc, #244]	; (80103f8 <etharp_find_entry+0x2d4>)
 8010302:	4613      	mov	r3, r2
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	4413      	add	r3, r2
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	440b      	add	r3, r1
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d018      	beq.n	8010344 <etharp_find_entry+0x220>
 8010312:	4b3a      	ldr	r3, [pc, #232]	; (80103fc <etharp_find_entry+0x2d8>)
 8010314:	f240 126d 	movw	r2, #365	; 0x16d
 8010318:	493b      	ldr	r1, [pc, #236]	; (8010408 <etharp_find_entry+0x2e4>)
 801031a:	483a      	ldr	r0, [pc, #232]	; (8010404 <etharp_find_entry+0x2e0>)
 801031c:	f010 ff86 	bl	802122c <iprintf>
 8010320:	e010      	b.n	8010344 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010322:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010326:	2b09      	cmp	r3, #9
 8010328:	dc02      	bgt.n	8010330 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801032a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801032c:	843b      	strh	r3, [r7, #32]
 801032e:	e009      	b.n	8010344 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010330:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010334:	2b09      	cmp	r3, #9
 8010336:	dc02      	bgt.n	801033e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010338:	8bfb      	ldrh	r3, [r7, #30]
 801033a:	843b      	strh	r3, [r7, #32]
 801033c:	e002      	b.n	8010344 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801033e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010342:	e054      	b.n	80103ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010344:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010348:	2b09      	cmp	r3, #9
 801034a:	dd06      	ble.n	801035a <etharp_find_entry+0x236>
 801034c:	4b2b      	ldr	r3, [pc, #172]	; (80103fc <etharp_find_entry+0x2d8>)
 801034e:	f240 127f 	movw	r2, #383	; 0x17f
 8010352:	492e      	ldr	r1, [pc, #184]	; (801040c <etharp_find_entry+0x2e8>)
 8010354:	482b      	ldr	r0, [pc, #172]	; (8010404 <etharp_find_entry+0x2e0>)
 8010356:	f010 ff69 	bl	802122c <iprintf>
    etharp_free_entry(i);
 801035a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801035e:	4618      	mov	r0, r3
 8010360:	f7ff fe06 	bl	800ff70 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010364:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010368:	2b09      	cmp	r3, #9
 801036a:	dd06      	ble.n	801037a <etharp_find_entry+0x256>
 801036c:	4b23      	ldr	r3, [pc, #140]	; (80103fc <etharp_find_entry+0x2d8>)
 801036e:	f240 1283 	movw	r2, #387	; 0x183
 8010372:	4926      	ldr	r1, [pc, #152]	; (801040c <etharp_find_entry+0x2e8>)
 8010374:	4823      	ldr	r0, [pc, #140]	; (8010404 <etharp_find_entry+0x2e0>)
 8010376:	f010 ff59 	bl	802122c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801037a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801037e:	491e      	ldr	r1, [pc, #120]	; (80103f8 <etharp_find_entry+0x2d4>)
 8010380:	4613      	mov	r3, r2
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	4413      	add	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	440b      	add	r3, r1
 801038a:	3314      	adds	r3, #20
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d006      	beq.n	80103a0 <etharp_find_entry+0x27c>
 8010392:	4b1a      	ldr	r3, [pc, #104]	; (80103fc <etharp_find_entry+0x2d8>)
 8010394:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010398:	491d      	ldr	r1, [pc, #116]	; (8010410 <etharp_find_entry+0x2ec>)
 801039a:	481a      	ldr	r0, [pc, #104]	; (8010404 <etharp_find_entry+0x2e0>)
 801039c:	f010 ff46 	bl	802122c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00b      	beq.n	80103be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80103a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6819      	ldr	r1, [r3, #0]
 80103ae:	4812      	ldr	r0, [pc, #72]	; (80103f8 <etharp_find_entry+0x2d4>)
 80103b0:	4613      	mov	r3, r2
 80103b2:	005b      	lsls	r3, r3, #1
 80103b4:	4413      	add	r3, r2
 80103b6:	00db      	lsls	r3, r3, #3
 80103b8:	4403      	add	r3, r0
 80103ba:	3304      	adds	r3, #4
 80103bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80103be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103c2:	490d      	ldr	r1, [pc, #52]	; (80103f8 <etharp_find_entry+0x2d4>)
 80103c4:	4613      	mov	r3, r2
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	4413      	add	r3, r2
 80103ca:	00db      	lsls	r3, r3, #3
 80103cc:	440b      	add	r3, r1
 80103ce:	3312      	adds	r3, #18
 80103d0:	2200      	movs	r2, #0
 80103d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80103d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103d8:	4907      	ldr	r1, [pc, #28]	; (80103f8 <etharp_find_entry+0x2d4>)
 80103da:	4613      	mov	r3, r2
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	4413      	add	r3, r2
 80103e0:	00db      	lsls	r3, r3, #3
 80103e2:	440b      	add	r3, r1
 80103e4:	3308      	adds	r3, #8
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80103ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3728      	adds	r7, #40	; 0x28
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	240405dc 	.word	0x240405dc
 80103fc:	080240c0 	.word	0x080240c0
 8010400:	08024114 	.word	0x08024114
 8010404:	08024154 	.word	0x08024154
 8010408:	0802417c 	.word	0x0802417c
 801040c:	08024194 	.word	0x08024194
 8010410:	080241a8 	.word	0x080241a8

08010414 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b088      	sub	sp, #32
 8010418:	af02      	add	r7, sp, #8
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010428:	2b06      	cmp	r3, #6
 801042a:	d006      	beq.n	801043a <etharp_update_arp_entry+0x26>
 801042c:	4b48      	ldr	r3, [pc, #288]	; (8010550 <etharp_update_arp_entry+0x13c>)
 801042e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010432:	4948      	ldr	r1, [pc, #288]	; (8010554 <etharp_update_arp_entry+0x140>)
 8010434:	4848      	ldr	r0, [pc, #288]	; (8010558 <etharp_update_arp_entry+0x144>)
 8010436:	f010 fef9 	bl	802122c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d012      	beq.n	8010466 <etharp_update_arp_entry+0x52>
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00e      	beq.n	8010466 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	68f9      	ldr	r1, [r7, #12]
 801044e:	4618      	mov	r0, r3
 8010450:	f001 face 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 8010454:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010456:	2b00      	cmp	r3, #0
 8010458:	d105      	bne.n	8010466 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010462:	2be0      	cmp	r3, #224	; 0xe0
 8010464:	d102      	bne.n	801046c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010466:	f06f 030f 	mvn.w	r3, #15
 801046a:	e06c      	b.n	8010546 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801046c:	78fb      	ldrb	r3, [r7, #3]
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	4619      	mov	r1, r3
 8010472:	68b8      	ldr	r0, [r7, #8]
 8010474:	f7ff fe56 	bl	8010124 <etharp_find_entry>
 8010478:	4603      	mov	r3, r0
 801047a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801047c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010480:	2b00      	cmp	r3, #0
 8010482:	da02      	bge.n	801048a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010484:	8afb      	ldrh	r3, [r7, #22]
 8010486:	b25b      	sxtb	r3, r3
 8010488:	e05d      	b.n	8010546 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801048a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801048e:	4933      	ldr	r1, [pc, #204]	; (801055c <etharp_update_arp_entry+0x148>)
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	440b      	add	r3, r1
 801049a:	3314      	adds	r3, #20
 801049c:	2202      	movs	r2, #2
 801049e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80104a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104a4:	492d      	ldr	r1, [pc, #180]	; (801055c <etharp_update_arp_entry+0x148>)
 80104a6:	4613      	mov	r3, r2
 80104a8:	005b      	lsls	r3, r3, #1
 80104aa:	4413      	add	r3, r2
 80104ac:	00db      	lsls	r3, r3, #3
 80104ae:	440b      	add	r3, r1
 80104b0:	3308      	adds	r3, #8
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80104b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	3308      	adds	r3, #8
 80104c4:	4a25      	ldr	r2, [pc, #148]	; (801055c <etharp_update_arp_entry+0x148>)
 80104c6:	4413      	add	r3, r2
 80104c8:	3304      	adds	r3, #4
 80104ca:	2206      	movs	r2, #6
 80104cc:	6879      	ldr	r1, [r7, #4]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f010 fa3a 	bl	8020948 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80104d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104d8:	4920      	ldr	r1, [pc, #128]	; (801055c <etharp_update_arp_entry+0x148>)
 80104da:	4613      	mov	r3, r2
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4413      	add	r3, r2
 80104e0:	00db      	lsls	r3, r3, #3
 80104e2:	440b      	add	r3, r1
 80104e4:	3312      	adds	r3, #18
 80104e6:	2200      	movs	r2, #0
 80104e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80104ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104ee:	491b      	ldr	r1, [pc, #108]	; (801055c <etharp_update_arp_entry+0x148>)
 80104f0:	4613      	mov	r3, r2
 80104f2:	005b      	lsls	r3, r3, #1
 80104f4:	4413      	add	r3, r2
 80104f6:	00db      	lsls	r3, r3, #3
 80104f8:	440b      	add	r3, r1
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d021      	beq.n	8010544 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010500:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010504:	4915      	ldr	r1, [pc, #84]	; (801055c <etharp_update_arp_entry+0x148>)
 8010506:	4613      	mov	r3, r2
 8010508:	005b      	lsls	r3, r3, #1
 801050a:	4413      	add	r3, r2
 801050c:	00db      	lsls	r3, r3, #3
 801050e:	440b      	add	r3, r1
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010514:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010518:	4910      	ldr	r1, [pc, #64]	; (801055c <etharp_update_arp_entry+0x148>)
 801051a:	4613      	mov	r3, r2
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	4413      	add	r3, r2
 8010520:	00db      	lsls	r3, r3, #3
 8010522:	440b      	add	r3, r1
 8010524:	2200      	movs	r2, #0
 8010526:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801052e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6939      	ldr	r1, [r7, #16]
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f000 fcf3 	bl	8010f24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801053e:	6938      	ldr	r0, [r7, #16]
 8010540:	f003 fe76 	bl	8014230 <pbuf_free>
  }
  return ERR_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	080240c0 	.word	0x080240c0
 8010554:	080241d4 	.word	0x080241d4
 8010558:	08024154 	.word	0x08024154
 801055c:	240405dc 	.word	0x240405dc

08010560 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010568:	2300      	movs	r3, #0
 801056a:	60fb      	str	r3, [r7, #12]
 801056c:	e01e      	b.n	80105ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801056e:	4913      	ldr	r1, [pc, #76]	; (80105bc <etharp_cleanup_netif+0x5c>)
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	4613      	mov	r3, r2
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	4413      	add	r3, r2
 8010578:	00db      	lsls	r3, r3, #3
 801057a:	440b      	add	r3, r1
 801057c:	3314      	adds	r3, #20
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010582:	7afb      	ldrb	r3, [r7, #11]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00e      	beq.n	80105a6 <etharp_cleanup_netif+0x46>
 8010588:	490c      	ldr	r1, [pc, #48]	; (80105bc <etharp_cleanup_netif+0x5c>)
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	4613      	mov	r3, r2
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	4413      	add	r3, r2
 8010592:	00db      	lsls	r3, r3, #3
 8010594:	440b      	add	r3, r1
 8010596:	3308      	adds	r3, #8
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	429a      	cmp	r2, r3
 801059e:	d102      	bne.n	80105a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f7ff fce5 	bl	800ff70 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3301      	adds	r3, #1
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2b09      	cmp	r3, #9
 80105b0:	dddd      	ble.n	801056e <etharp_cleanup_netif+0xe>
    }
  }
}
 80105b2:	bf00      	nop
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	240405dc 	.word	0x240405dc

080105c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80105c0:	b5b0      	push	{r4, r5, r7, lr}
 80105c2:	b08a      	sub	sp, #40	; 0x28
 80105c4:	af04      	add	r7, sp, #16
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d107      	bne.n	80105e0 <etharp_input+0x20>
 80105d0:	4b3d      	ldr	r3, [pc, #244]	; (80106c8 <etharp_input+0x108>)
 80105d2:	f240 228a 	movw	r2, #650	; 0x28a
 80105d6:	493d      	ldr	r1, [pc, #244]	; (80106cc <etharp_input+0x10c>)
 80105d8:	483d      	ldr	r0, [pc, #244]	; (80106d0 <etharp_input+0x110>)
 80105da:	f010 fe27 	bl	802122c <iprintf>
 80105de:	e06f      	b.n	80106c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105f0:	d10c      	bne.n	801060c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80105f6:	2b06      	cmp	r3, #6
 80105f8:	d108      	bne.n	801060c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80105fe:	2b04      	cmp	r3, #4
 8010600:	d104      	bne.n	801060c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	885b      	ldrh	r3, [r3, #2]
 8010606:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010608:	2b08      	cmp	r3, #8
 801060a:	d003      	beq.n	8010614 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f003 fe0f 	bl	8014230 <pbuf_free>
    return;
 8010612:	e055      	b.n	80106c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	330e      	adds	r3, #14
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	3318      	adds	r3, #24
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	3304      	adds	r3, #4
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d102      	bne.n	8010634 <etharp_input+0x74>
    for_us = 0;
 801062e:	2300      	movs	r3, #0
 8010630:	75fb      	strb	r3, [r7, #23]
 8010632:	e009      	b.n	8010648 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	3304      	adds	r3, #4
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	429a      	cmp	r2, r3
 801063e:	bf0c      	ite	eq
 8010640:	2301      	moveq	r3, #1
 8010642:	2300      	movne	r3, #0
 8010644:	b2db      	uxtb	r3, r3
 8010646:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	f103 0208 	add.w	r2, r3, #8
 801064e:	7dfb      	ldrb	r3, [r7, #23]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <etharp_input+0x98>
 8010654:	2301      	movs	r3, #1
 8010656:	e000      	b.n	801065a <etharp_input+0x9a>
 8010658:	2302      	movs	r3, #2
 801065a:	f107 010c 	add.w	r1, r7, #12
 801065e:	6838      	ldr	r0, [r7, #0]
 8010660:	f7ff fed8 	bl	8010414 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	88db      	ldrh	r3, [r3, #6]
 8010668:	b29b      	uxth	r3, r3
 801066a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801066e:	d003      	beq.n	8010678 <etharp_input+0xb8>
 8010670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010674:	d01e      	beq.n	80106b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010676:	e020      	b.n	80106ba <etharp_input+0xfa>
      if (for_us) {
 8010678:	7dfb      	ldrb	r3, [r7, #23]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d01c      	beq.n	80106b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010694:	693a      	ldr	r2, [r7, #16]
 8010696:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010698:	2102      	movs	r1, #2
 801069a:	9103      	str	r1, [sp, #12]
 801069c:	f107 010c 	add.w	r1, r7, #12
 80106a0:	9102      	str	r1, [sp, #8]
 80106a2:	9201      	str	r2, [sp, #4]
 80106a4:	9300      	str	r3, [sp, #0]
 80106a6:	462b      	mov	r3, r5
 80106a8:	4622      	mov	r2, r4
 80106aa:	4601      	mov	r1, r0
 80106ac:	6838      	ldr	r0, [r7, #0]
 80106ae:	f000 faeb 	bl	8010c88 <etharp_raw>
      break;
 80106b2:	e001      	b.n	80106b8 <etharp_input+0xf8>
      break;
 80106b4:	bf00      	nop
 80106b6:	e000      	b.n	80106ba <etharp_input+0xfa>
      break;
 80106b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f003 fdb8 	bl	8014230 <pbuf_free>
}
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bdb0      	pop	{r4, r5, r7, pc}
 80106c6:	bf00      	nop
 80106c8:	080240c0 	.word	0x080240c0
 80106cc:	0802422c 	.word	0x0802422c
 80106d0:	08024154 	.word	0x08024154

080106d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b086      	sub	sp, #24
 80106d8:	af02      	add	r7, sp, #8
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4613      	mov	r3, r2
 80106e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80106e2:	79fa      	ldrb	r2, [r7, #7]
 80106e4:	4944      	ldr	r1, [pc, #272]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 80106e6:	4613      	mov	r3, r2
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	4413      	add	r3, r2
 80106ec:	00db      	lsls	r3, r3, #3
 80106ee:	440b      	add	r3, r1
 80106f0:	3314      	adds	r3, #20
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d806      	bhi.n	8010706 <etharp_output_to_arp_index+0x32>
 80106f8:	4b40      	ldr	r3, [pc, #256]	; (80107fc <etharp_output_to_arp_index+0x128>)
 80106fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80106fe:	4940      	ldr	r1, [pc, #256]	; (8010800 <etharp_output_to_arp_index+0x12c>)
 8010700:	4840      	ldr	r0, [pc, #256]	; (8010804 <etharp_output_to_arp_index+0x130>)
 8010702:	f010 fd93 	bl	802122c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010706:	79fa      	ldrb	r2, [r7, #7]
 8010708:	493b      	ldr	r1, [pc, #236]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 801070a:	4613      	mov	r3, r2
 801070c:	005b      	lsls	r3, r3, #1
 801070e:	4413      	add	r3, r2
 8010710:	00db      	lsls	r3, r3, #3
 8010712:	440b      	add	r3, r1
 8010714:	3314      	adds	r3, #20
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	2b02      	cmp	r3, #2
 801071a:	d153      	bne.n	80107c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801071c:	79fa      	ldrb	r2, [r7, #7]
 801071e:	4936      	ldr	r1, [pc, #216]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 8010720:	4613      	mov	r3, r2
 8010722:	005b      	lsls	r3, r3, #1
 8010724:	4413      	add	r3, r2
 8010726:	00db      	lsls	r3, r3, #3
 8010728:	440b      	add	r3, r1
 801072a:	3312      	adds	r3, #18
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010732:	d919      	bls.n	8010768 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010734:	79fa      	ldrb	r2, [r7, #7]
 8010736:	4613      	mov	r3, r2
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	4413      	add	r3, r2
 801073c:	00db      	lsls	r3, r3, #3
 801073e:	4a2e      	ldr	r2, [pc, #184]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 8010740:	4413      	add	r3, r2
 8010742:	3304      	adds	r3, #4
 8010744:	4619      	mov	r1, r3
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f000 fb4c 	bl	8010de4 <etharp_request>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d138      	bne.n	80107c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010752:	79fa      	ldrb	r2, [r7, #7]
 8010754:	4928      	ldr	r1, [pc, #160]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 8010756:	4613      	mov	r3, r2
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	4413      	add	r3, r2
 801075c:	00db      	lsls	r3, r3, #3
 801075e:	440b      	add	r3, r1
 8010760:	3314      	adds	r3, #20
 8010762:	2203      	movs	r2, #3
 8010764:	701a      	strb	r2, [r3, #0]
 8010766:	e02d      	b.n	80107c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010768:	79fa      	ldrb	r2, [r7, #7]
 801076a:	4923      	ldr	r1, [pc, #140]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 801076c:	4613      	mov	r3, r2
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	4413      	add	r3, r2
 8010772:	00db      	lsls	r3, r3, #3
 8010774:	440b      	add	r3, r1
 8010776:	3312      	adds	r3, #18
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801077e:	d321      	bcc.n	80107c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010780:	79fa      	ldrb	r2, [r7, #7]
 8010782:	4613      	mov	r3, r2
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	4413      	add	r3, r2
 8010788:	00db      	lsls	r3, r3, #3
 801078a:	4a1b      	ldr	r2, [pc, #108]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 801078c:	4413      	add	r3, r2
 801078e:	1d19      	adds	r1, r3, #4
 8010790:	79fa      	ldrb	r2, [r7, #7]
 8010792:	4613      	mov	r3, r2
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	4413      	add	r3, r2
 8010798:	00db      	lsls	r3, r3, #3
 801079a:	3308      	adds	r3, #8
 801079c:	4a16      	ldr	r2, [pc, #88]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 801079e:	4413      	add	r3, r2
 80107a0:	3304      	adds	r3, #4
 80107a2:	461a      	mov	r2, r3
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f000 fafb 	bl	8010da0 <etharp_request_dst>
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d109      	bne.n	80107c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80107b0:	79fa      	ldrb	r2, [r7, #7]
 80107b2:	4911      	ldr	r1, [pc, #68]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 80107b4:	4613      	mov	r3, r2
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	4413      	add	r3, r2
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	440b      	add	r3, r1
 80107be:	3314      	adds	r3, #20
 80107c0:	2203      	movs	r2, #3
 80107c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80107ca:	79fa      	ldrb	r2, [r7, #7]
 80107cc:	4613      	mov	r3, r2
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	3308      	adds	r3, #8
 80107d6:	4a08      	ldr	r2, [pc, #32]	; (80107f8 <etharp_output_to_arp_index+0x124>)
 80107d8:	4413      	add	r3, r2
 80107da:	3304      	adds	r3, #4
 80107dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80107e0:	9200      	str	r2, [sp, #0]
 80107e2:	460a      	mov	r2, r1
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f000 fb9c 	bl	8010f24 <ethernet_output>
 80107ec:	4603      	mov	r3, r0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	240405dc 	.word	0x240405dc
 80107fc:	080240c0 	.word	0x080240c0
 8010800:	0802424c 	.word	0x0802424c
 8010804:	08024154 	.word	0x08024154

08010808 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b08a      	sub	sp, #40	; 0x28
 801080c:	af02      	add	r7, sp, #8
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d106      	bne.n	801082c <etharp_output+0x24>
 801081e:	4b73      	ldr	r3, [pc, #460]	; (80109ec <etharp_output+0x1e4>)
 8010820:	f240 321e 	movw	r2, #798	; 0x31e
 8010824:	4972      	ldr	r1, [pc, #456]	; (80109f0 <etharp_output+0x1e8>)
 8010826:	4873      	ldr	r0, [pc, #460]	; (80109f4 <etharp_output+0x1ec>)
 8010828:	f010 fd00 	bl	802122c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <etharp_output+0x38>
 8010832:	4b6e      	ldr	r3, [pc, #440]	; (80109ec <etharp_output+0x1e4>)
 8010834:	f240 321f 	movw	r2, #799	; 0x31f
 8010838:	496f      	ldr	r1, [pc, #444]	; (80109f8 <etharp_output+0x1f0>)
 801083a:	486e      	ldr	r0, [pc, #440]	; (80109f4 <etharp_output+0x1ec>)
 801083c:	f010 fcf6 	bl	802122c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d106      	bne.n	8010854 <etharp_output+0x4c>
 8010846:	4b69      	ldr	r3, [pc, #420]	; (80109ec <etharp_output+0x1e4>)
 8010848:	f44f 7248 	mov.w	r2, #800	; 0x320
 801084c:	496b      	ldr	r1, [pc, #428]	; (80109fc <etharp_output+0x1f4>)
 801084e:	4869      	ldr	r0, [pc, #420]	; (80109f4 <etharp_output+0x1ec>)
 8010850:	f010 fcec 	bl	802122c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	68f9      	ldr	r1, [r7, #12]
 801085a:	4618      	mov	r0, r3
 801085c:	f001 f8c8 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d002      	beq.n	801086c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010866:	4b66      	ldr	r3, [pc, #408]	; (8010a00 <etharp_output+0x1f8>)
 8010868:	61fb      	str	r3, [r7, #28]
 801086a:	e0af      	b.n	80109cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010874:	2be0      	cmp	r3, #224	; 0xe0
 8010876:	d118      	bne.n	80108aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010878:	2301      	movs	r3, #1
 801087a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801087c:	2300      	movs	r3, #0
 801087e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010880:	235e      	movs	r3, #94	; 0x5e
 8010882:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	3301      	adds	r3, #1
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801088e:	b2db      	uxtb	r3, r3
 8010890:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3302      	adds	r3, #2
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	3303      	adds	r3, #3
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80108a2:	f107 0310 	add.w	r3, r7, #16
 80108a6:	61fb      	str	r3, [r7, #28]
 80108a8:	e090      	b.n	80109cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	3304      	adds	r3, #4
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	405a      	eors	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	3308      	adds	r3, #8
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4013      	ands	r3, r2
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d012      	beq.n	80108e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80108c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d00b      	beq.n	80108e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	330c      	adds	r3, #12
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d003      	beq.n	80108e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	330c      	adds	r3, #12
 80108de:	61bb      	str	r3, [r7, #24]
 80108e0:	e002      	b.n	80108e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80108e2:	f06f 0303 	mvn.w	r3, #3
 80108e6:	e07d      	b.n	80109e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80108e8:	4b46      	ldr	r3, [pc, #280]	; (8010a04 <etharp_output+0x1fc>)
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	4619      	mov	r1, r3
 80108ee:	4a46      	ldr	r2, [pc, #280]	; (8010a08 <etharp_output+0x200>)
 80108f0:	460b      	mov	r3, r1
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	440b      	add	r3, r1
 80108f6:	00db      	lsls	r3, r3, #3
 80108f8:	4413      	add	r3, r2
 80108fa:	3314      	adds	r3, #20
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d925      	bls.n	801094e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010902:	4b40      	ldr	r3, [pc, #256]	; (8010a04 <etharp_output+0x1fc>)
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	4619      	mov	r1, r3
 8010908:	4a3f      	ldr	r2, [pc, #252]	; (8010a08 <etharp_output+0x200>)
 801090a:	460b      	mov	r3, r1
 801090c:	005b      	lsls	r3, r3, #1
 801090e:	440b      	add	r3, r1
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	4413      	add	r3, r2
 8010914:	3308      	adds	r3, #8
 8010916:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	429a      	cmp	r2, r3
 801091c:	d117      	bne.n	801094e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	4b38      	ldr	r3, [pc, #224]	; (8010a04 <etharp_output+0x1fc>)
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	4618      	mov	r0, r3
 8010928:	4937      	ldr	r1, [pc, #220]	; (8010a08 <etharp_output+0x200>)
 801092a:	4603      	mov	r3, r0
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	4403      	add	r3, r0
 8010930:	00db      	lsls	r3, r3, #3
 8010932:	440b      	add	r3, r1
 8010934:	3304      	adds	r3, #4
 8010936:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010938:	429a      	cmp	r2, r3
 801093a:	d108      	bne.n	801094e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801093c:	4b31      	ldr	r3, [pc, #196]	; (8010a04 <etharp_output+0x1fc>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	461a      	mov	r2, r3
 8010942:	68b9      	ldr	r1, [r7, #8]
 8010944:	68f8      	ldr	r0, [r7, #12]
 8010946:	f7ff fec5 	bl	80106d4 <etharp_output_to_arp_index>
 801094a:	4603      	mov	r3, r0
 801094c:	e04a      	b.n	80109e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801094e:	2300      	movs	r3, #0
 8010950:	75fb      	strb	r3, [r7, #23]
 8010952:	e031      	b.n	80109b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010954:	7dfa      	ldrb	r2, [r7, #23]
 8010956:	492c      	ldr	r1, [pc, #176]	; (8010a08 <etharp_output+0x200>)
 8010958:	4613      	mov	r3, r2
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	4413      	add	r3, r2
 801095e:	00db      	lsls	r3, r3, #3
 8010960:	440b      	add	r3, r1
 8010962:	3314      	adds	r3, #20
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b01      	cmp	r3, #1
 8010968:	d923      	bls.n	80109b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801096a:	7dfa      	ldrb	r2, [r7, #23]
 801096c:	4926      	ldr	r1, [pc, #152]	; (8010a08 <etharp_output+0x200>)
 801096e:	4613      	mov	r3, r2
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4413      	add	r3, r2
 8010974:	00db      	lsls	r3, r3, #3
 8010976:	440b      	add	r3, r1
 8010978:	3308      	adds	r3, #8
 801097a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	429a      	cmp	r2, r3
 8010980:	d117      	bne.n	80109b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	6819      	ldr	r1, [r3, #0]
 8010986:	7dfa      	ldrb	r2, [r7, #23]
 8010988:	481f      	ldr	r0, [pc, #124]	; (8010a08 <etharp_output+0x200>)
 801098a:	4613      	mov	r3, r2
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	4403      	add	r3, r0
 8010994:	3304      	adds	r3, #4
 8010996:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010998:	4299      	cmp	r1, r3
 801099a:	d10a      	bne.n	80109b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801099c:	4a19      	ldr	r2, [pc, #100]	; (8010a04 <etharp_output+0x1fc>)
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	461a      	mov	r2, r3
 80109a6:	68b9      	ldr	r1, [r7, #8]
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f7ff fe93 	bl	80106d4 <etharp_output_to_arp_index>
 80109ae:	4603      	mov	r3, r0
 80109b0:	e018      	b.n	80109e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80109b2:	7dfb      	ldrb	r3, [r7, #23]
 80109b4:	3301      	adds	r3, #1
 80109b6:	75fb      	strb	r3, [r7, #23]
 80109b8:	7dfb      	ldrb	r3, [r7, #23]
 80109ba:	2b09      	cmp	r3, #9
 80109bc:	d9ca      	bls.n	8010954 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	69b9      	ldr	r1, [r7, #24]
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f000 f822 	bl	8010a0c <etharp_query>
 80109c8:	4603      	mov	r3, r0
 80109ca:	e00b      	b.n	80109e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80109d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	68b9      	ldr	r1, [r7, #8]
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f000 faa1 	bl	8010f24 <ethernet_output>
 80109e2:	4603      	mov	r3, r0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3720      	adds	r7, #32
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	080240c0 	.word	0x080240c0
 80109f0:	0802422c 	.word	0x0802422c
 80109f4:	08024154 	.word	0x08024154
 80109f8:	0802427c 	.word	0x0802427c
 80109fc:	0802421c 	.word	0x0802421c
 8010a00:	08027508 	.word	0x08027508
 8010a04:	240406cc 	.word	0x240406cc
 8010a08:	240405dc 	.word	0x240405dc

08010a0c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08c      	sub	sp, #48	; 0x30
 8010a10:	af02      	add	r7, sp, #8
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	3326      	adds	r3, #38	; 0x26
 8010a1c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010a1e:	23ff      	movs	r3, #255	; 0xff
 8010a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010a24:	2300      	movs	r3, #0
 8010a26:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	68f9      	ldr	r1, [r7, #12]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f000 ffde 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d10c      	bne.n	8010a54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a42:	2be0      	cmp	r3, #224	; 0xe0
 8010a44:	d006      	beq.n	8010a54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d102      	bne.n	8010a5a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a54:	f06f 030f 	mvn.w	r3, #15
 8010a58:	e101      	b.n	8010c5e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	2101      	movs	r1, #1
 8010a5e:	68b8      	ldr	r0, [r7, #8]
 8010a60:	f7ff fb60 	bl	8010124 <etharp_find_entry>
 8010a64:	4603      	mov	r3, r0
 8010a66:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010a68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	da02      	bge.n	8010a76 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010a70:	8a7b      	ldrh	r3, [r7, #18]
 8010a72:	b25b      	sxtb	r3, r3
 8010a74:	e0f3      	b.n	8010c5e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010a76:	8a7b      	ldrh	r3, [r7, #18]
 8010a78:	2b7e      	cmp	r3, #126	; 0x7e
 8010a7a:	d906      	bls.n	8010a8a <etharp_query+0x7e>
 8010a7c:	4b7a      	ldr	r3, [pc, #488]	; (8010c68 <etharp_query+0x25c>)
 8010a7e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010a82:	497a      	ldr	r1, [pc, #488]	; (8010c6c <etharp_query+0x260>)
 8010a84:	487a      	ldr	r0, [pc, #488]	; (8010c70 <etharp_query+0x264>)
 8010a86:	f010 fbd1 	bl	802122c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010a8a:	8a7b      	ldrh	r3, [r7, #18]
 8010a8c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010a8e:	7c7a      	ldrb	r2, [r7, #17]
 8010a90:	4978      	ldr	r1, [pc, #480]	; (8010c74 <etharp_query+0x268>)
 8010a92:	4613      	mov	r3, r2
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	4413      	add	r3, r2
 8010a98:	00db      	lsls	r3, r3, #3
 8010a9a:	440b      	add	r3, r1
 8010a9c:	3314      	adds	r3, #20
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d115      	bne.n	8010ad0 <etharp_query+0xc4>
    is_new_entry = 1;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010aa8:	7c7a      	ldrb	r2, [r7, #17]
 8010aaa:	4972      	ldr	r1, [pc, #456]	; (8010c74 <etharp_query+0x268>)
 8010aac:	4613      	mov	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	00db      	lsls	r3, r3, #3
 8010ab4:	440b      	add	r3, r1
 8010ab6:	3314      	adds	r3, #20
 8010ab8:	2201      	movs	r2, #1
 8010aba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010abc:	7c7a      	ldrb	r2, [r7, #17]
 8010abe:	496d      	ldr	r1, [pc, #436]	; (8010c74 <etharp_query+0x268>)
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	005b      	lsls	r3, r3, #1
 8010ac4:	4413      	add	r3, r2
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	440b      	add	r3, r1
 8010aca:	3308      	adds	r3, #8
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010ad0:	7c7a      	ldrb	r2, [r7, #17]
 8010ad2:	4968      	ldr	r1, [pc, #416]	; (8010c74 <etharp_query+0x268>)
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	005b      	lsls	r3, r3, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	00db      	lsls	r3, r3, #3
 8010adc:	440b      	add	r3, r1
 8010ade:	3314      	adds	r3, #20
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	2b01      	cmp	r3, #1
 8010ae4:	d011      	beq.n	8010b0a <etharp_query+0xfe>
 8010ae6:	7c7a      	ldrb	r2, [r7, #17]
 8010ae8:	4962      	ldr	r1, [pc, #392]	; (8010c74 <etharp_query+0x268>)
 8010aea:	4613      	mov	r3, r2
 8010aec:	005b      	lsls	r3, r3, #1
 8010aee:	4413      	add	r3, r2
 8010af0:	00db      	lsls	r3, r3, #3
 8010af2:	440b      	add	r3, r1
 8010af4:	3314      	adds	r3, #20
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d806      	bhi.n	8010b0a <etharp_query+0xfe>
 8010afc:	4b5a      	ldr	r3, [pc, #360]	; (8010c68 <etharp_query+0x25c>)
 8010afe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010b02:	495d      	ldr	r1, [pc, #372]	; (8010c78 <etharp_query+0x26c>)
 8010b04:	485a      	ldr	r0, [pc, #360]	; (8010c70 <etharp_query+0x264>)
 8010b06:	f010 fb91 	bl	802122c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010b0a:	6a3b      	ldr	r3, [r7, #32]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d102      	bne.n	8010b16 <etharp_query+0x10a>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10c      	bne.n	8010b30 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010b16:	68b9      	ldr	r1, [r7, #8]
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f000 f963 	bl	8010de4 <etharp_request>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d102      	bne.n	8010b30 <etharp_query+0x124>
      return result;
 8010b2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b2e:	e096      	b.n	8010c5e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <etharp_query+0x138>
 8010b36:	4b4c      	ldr	r3, [pc, #304]	; (8010c68 <etharp_query+0x25c>)
 8010b38:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010b3c:	494f      	ldr	r1, [pc, #316]	; (8010c7c <etharp_query+0x270>)
 8010b3e:	484c      	ldr	r0, [pc, #304]	; (8010c70 <etharp_query+0x264>)
 8010b40:	f010 fb74 	bl	802122c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010b44:	7c7a      	ldrb	r2, [r7, #17]
 8010b46:	494b      	ldr	r1, [pc, #300]	; (8010c74 <etharp_query+0x268>)
 8010b48:	4613      	mov	r3, r2
 8010b4a:	005b      	lsls	r3, r3, #1
 8010b4c:	4413      	add	r3, r2
 8010b4e:	00db      	lsls	r3, r3, #3
 8010b50:	440b      	add	r3, r1
 8010b52:	3314      	adds	r3, #20
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	d917      	bls.n	8010b8a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010b5a:	4a49      	ldr	r2, [pc, #292]	; (8010c80 <etharp_query+0x274>)
 8010b5c:	7c7b      	ldrb	r3, [r7, #17]
 8010b5e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010b60:	7c7a      	ldrb	r2, [r7, #17]
 8010b62:	4613      	mov	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	3308      	adds	r3, #8
 8010b6c:	4a41      	ldr	r2, [pc, #260]	; (8010c74 <etharp_query+0x268>)
 8010b6e:	4413      	add	r3, r2
 8010b70:	3304      	adds	r3, #4
 8010b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b76:	9200      	str	r2, [sp, #0]
 8010b78:	697a      	ldr	r2, [r7, #20]
 8010b7a:	6879      	ldr	r1, [r7, #4]
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f000 f9d1 	bl	8010f24 <ethernet_output>
 8010b82:	4603      	mov	r3, r0
 8010b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b88:	e067      	b.n	8010c5a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010b8a:	7c7a      	ldrb	r2, [r7, #17]
 8010b8c:	4939      	ldr	r1, [pc, #228]	; (8010c74 <etharp_query+0x268>)
 8010b8e:	4613      	mov	r3, r2
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	4413      	add	r3, r2
 8010b94:	00db      	lsls	r3, r3, #3
 8010b96:	440b      	add	r3, r1
 8010b98:	3314      	adds	r3, #20
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d15c      	bne.n	8010c5a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ba8:	e01c      	b.n	8010be4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	895a      	ldrh	r2, [r3, #10]
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	891b      	ldrh	r3, [r3, #8]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d10a      	bne.n	8010bcc <etharp_query+0x1c0>
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d006      	beq.n	8010bcc <etharp_query+0x1c0>
 8010bbe:	4b2a      	ldr	r3, [pc, #168]	; (8010c68 <etharp_query+0x25c>)
 8010bc0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010bc4:	492f      	ldr	r1, [pc, #188]	; (8010c84 <etharp_query+0x278>)
 8010bc6:	482a      	ldr	r0, [pc, #168]	; (8010c70 <etharp_query+0x264>)
 8010bc8:	f010 fb30 	bl	802122c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	7b1b      	ldrb	r3, [r3, #12]
 8010bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <etharp_query+0x1d2>
        copy_needed = 1;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	61bb      	str	r3, [r7, #24]
        break;
 8010bdc:	e005      	b.n	8010bea <etharp_query+0x1de>
      }
      p = p->next;
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1df      	bne.n	8010baa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d007      	beq.n	8010c00 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010bf6:	200e      	movs	r0, #14
 8010bf8:	f003 fd92 	bl	8014720 <pbuf_clone>
 8010bfc:	61f8      	str	r0, [r7, #28]
 8010bfe:	e004      	b.n	8010c0a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010c04:	69f8      	ldr	r0, [r7, #28]
 8010c06:	f003 fbb9 	bl	801437c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d021      	beq.n	8010c54 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010c10:	7c7a      	ldrb	r2, [r7, #17]
 8010c12:	4918      	ldr	r1, [pc, #96]	; (8010c74 <etharp_query+0x268>)
 8010c14:	4613      	mov	r3, r2
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	4413      	add	r3, r2
 8010c1a:	00db      	lsls	r3, r3, #3
 8010c1c:	440b      	add	r3, r1
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00a      	beq.n	8010c3a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010c24:	7c7a      	ldrb	r2, [r7, #17]
 8010c26:	4913      	ldr	r1, [pc, #76]	; (8010c74 <etharp_query+0x268>)
 8010c28:	4613      	mov	r3, r2
 8010c2a:	005b      	lsls	r3, r3, #1
 8010c2c:	4413      	add	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	440b      	add	r3, r1
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f003 fafb 	bl	8014230 <pbuf_free>
      }
      arp_table[i].q = p;
 8010c3a:	7c7a      	ldrb	r2, [r7, #17]
 8010c3c:	490d      	ldr	r1, [pc, #52]	; (8010c74 <etharp_query+0x268>)
 8010c3e:	4613      	mov	r3, r2
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	440b      	add	r3, r1
 8010c48:	69fa      	ldr	r2, [r7, #28]
 8010c4a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c52:	e002      	b.n	8010c5a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010c54:	23ff      	movs	r3, #255	; 0xff
 8010c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010c5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3728      	adds	r7, #40	; 0x28
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	080240c0 	.word	0x080240c0
 8010c6c:	08024288 	.word	0x08024288
 8010c70:	08024154 	.word	0x08024154
 8010c74:	240405dc 	.word	0x240405dc
 8010c78:	08024298 	.word	0x08024298
 8010c7c:	0802427c 	.word	0x0802427c
 8010c80:	240406cc 	.word	0x240406cc
 8010c84:	080242c0 	.word	0x080242c0

08010c88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b08a      	sub	sp, #40	; 0x28
 8010c8c:	af02      	add	r7, sp, #8
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d106      	bne.n	8010cae <etharp_raw+0x26>
 8010ca0:	4b3a      	ldr	r3, [pc, #232]	; (8010d8c <etharp_raw+0x104>)
 8010ca2:	f240 4257 	movw	r2, #1111	; 0x457
 8010ca6:	493a      	ldr	r1, [pc, #232]	; (8010d90 <etharp_raw+0x108>)
 8010ca8:	483a      	ldr	r0, [pc, #232]	; (8010d94 <etharp_raw+0x10c>)
 8010caa:	f010 fabf 	bl	802122c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010cae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cb2:	211c      	movs	r1, #28
 8010cb4:	200e      	movs	r0, #14
 8010cb6:	f002 ffa5 	bl	8013c04 <pbuf_alloc>
 8010cba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d102      	bne.n	8010cc8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cc6:	e05d      	b.n	8010d84 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	895b      	ldrh	r3, [r3, #10]
 8010ccc:	2b1b      	cmp	r3, #27
 8010cce:	d806      	bhi.n	8010cde <etharp_raw+0x56>
 8010cd0:	4b2e      	ldr	r3, [pc, #184]	; (8010d8c <etharp_raw+0x104>)
 8010cd2:	f240 4262 	movw	r2, #1122	; 0x462
 8010cd6:	4930      	ldr	r1, [pc, #192]	; (8010d98 <etharp_raw+0x110>)
 8010cd8:	482e      	ldr	r0, [pc, #184]	; (8010d94 <etharp_raw+0x10c>)
 8010cda:	f010 faa7 	bl	802122c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010cde:	69bb      	ldr	r3, [r7, #24]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010ce4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7ff f8f6 	bl	800fed8 <lwip_htons>
 8010cec:	4603      	mov	r3, r0
 8010cee:	461a      	mov	r2, r3
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cfa:	2b06      	cmp	r3, #6
 8010cfc:	d006      	beq.n	8010d0c <etharp_raw+0x84>
 8010cfe:	4b23      	ldr	r3, [pc, #140]	; (8010d8c <etharp_raw+0x104>)
 8010d00:	f240 4269 	movw	r2, #1129	; 0x469
 8010d04:	4925      	ldr	r1, [pc, #148]	; (8010d9c <etharp_raw+0x114>)
 8010d06:	4823      	ldr	r0, [pc, #140]	; (8010d94 <etharp_raw+0x10c>)
 8010d08:	f010 fa90 	bl	802122c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	3308      	adds	r3, #8
 8010d10:	2206      	movs	r2, #6
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f00f fe17 	bl	8020948 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	3312      	adds	r3, #18
 8010d1e:	2206      	movs	r2, #6
 8010d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d22:	4618      	mov	r0, r3
 8010d24:	f00f fe10 	bl	8020948 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	330e      	adds	r3, #14
 8010d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d2e:	6812      	ldr	r2, [r2, #0]
 8010d30:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	3318      	adds	r3, #24
 8010d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d38:	6812      	ldr	r2, [r2, #0]
 8010d3a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	701a      	strb	r2, [r3, #0]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f042 0201 	orr.w	r2, r2, #1
 8010d48:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f042 0208 	orr.w	r2, r2, #8
 8010d52:	709a      	strb	r2, [r3, #2]
 8010d54:	2200      	movs	r2, #0
 8010d56:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	2206      	movs	r2, #6
 8010d5c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	2204      	movs	r2, #4
 8010d62:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010d64:	f640 0306 	movw	r3, #2054	; 0x806
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	69b9      	ldr	r1, [r7, #24]
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f000 f8d7 	bl	8010f24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010d76:	69b8      	ldr	r0, [r7, #24]
 8010d78:	f003 fa5a 	bl	8014230 <pbuf_free>
  p = NULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010d80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3720      	adds	r7, #32
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	080240c0 	.word	0x080240c0
 8010d90:	0802422c 	.word	0x0802422c
 8010d94:	08024154 	.word	0x08024154
 8010d98:	080242dc 	.word	0x080242dc
 8010d9c:	08024310 	.word	0x08024310

08010da0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b088      	sub	sp, #32
 8010da4:	af04      	add	r7, sp, #16
 8010da6:	60f8      	str	r0, [r7, #12]
 8010da8:	60b9      	str	r1, [r7, #8]
 8010daa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	9203      	str	r2, [sp, #12]
 8010dc0:	68ba      	ldr	r2, [r7, #8]
 8010dc2:	9202      	str	r2, [sp, #8]
 8010dc4:	4a06      	ldr	r2, [pc, #24]	; (8010de0 <etharp_request_dst+0x40>)
 8010dc6:	9201      	str	r2, [sp, #4]
 8010dc8:	9300      	str	r3, [sp, #0]
 8010dca:	4603      	mov	r3, r0
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f7ff ff5a 	bl	8010c88 <etharp_raw>
 8010dd4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	08027510 	.word	0x08027510

08010de4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010dee:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <etharp_request+0x20>)
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7ff ffd4 	bl	8010da0 <etharp_request_dst>
 8010df8:	4603      	mov	r3, r0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	08027508 	.word	0x08027508

08010e08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b086      	sub	sp, #24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010e12:	230e      	movs	r3, #14
 8010e14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	895b      	ldrh	r3, [r3, #10]
 8010e1a:	2b0e      	cmp	r3, #14
 8010e1c:	d96e      	bls.n	8010efc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	7bdb      	ldrb	r3, [r3, #15]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	7b1a      	ldrb	r2, [r3, #12]
 8010e3e:	7b5b      	ldrb	r3, [r3, #13]
 8010e40:	021b      	lsls	r3, r3, #8
 8010e42:	4313      	orrs	r3, r2
 8010e44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	f003 0301 	and.w	r3, r3, #1
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d023      	beq.n	8010e9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d10f      	bne.n	8010e7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	785b      	ldrb	r3, [r3, #1]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d11b      	bne.n	8010e9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010e66:	2b5e      	cmp	r3, #94	; 0x5e
 8010e68:	d117      	bne.n	8010e9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	7b5b      	ldrb	r3, [r3, #13]
 8010e6e:	f043 0310 	orr.w	r3, r3, #16
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	735a      	strb	r2, [r3, #13]
 8010e78:	e00f      	b.n	8010e9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	2206      	movs	r2, #6
 8010e7e:	4928      	ldr	r1, [pc, #160]	; (8010f20 <ethernet_input+0x118>)
 8010e80:	4618      	mov	r0, r3
 8010e82:	f00f fd53 	bl	802092c <memcmp>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d106      	bne.n	8010e9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	7b5b      	ldrb	r3, [r3, #13]
 8010e90:	f043 0308 	orr.w	r3, r3, #8
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010e9a:	89fb      	ldrh	r3, [r7, #14]
 8010e9c:	2b08      	cmp	r3, #8
 8010e9e:	d003      	beq.n	8010ea8 <ethernet_input+0xa0>
 8010ea0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010ea4:	d014      	beq.n	8010ed0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010ea6:	e032      	b.n	8010f0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010eae:	f003 0308 	and.w	r3, r3, #8
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d024      	beq.n	8010f00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010eb6:	8afb      	ldrh	r3, [r7, #22]
 8010eb8:	4619      	mov	r1, r3
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f003 f900 	bl	80140c0 <pbuf_remove_header>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d11e      	bne.n	8010f04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 fb95 	bl	80115f8 <ip4_input>
      break;
 8010ece:	e013      	b.n	8010ef8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ed6:	f003 0308 	and.w	r3, r3, #8
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d014      	beq.n	8010f08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010ede:	8afb      	ldrh	r3, [r7, #22]
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f003 f8ec 	bl	80140c0 <pbuf_remove_header>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d10e      	bne.n	8010f0c <ethernet_input+0x104>
        etharp_input(p, netif);
 8010eee:	6839      	ldr	r1, [r7, #0]
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7ff fb65 	bl	80105c0 <etharp_input>
      break;
 8010ef6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	e00c      	b.n	8010f16 <ethernet_input+0x10e>
    goto free_and_return;
 8010efc:	bf00      	nop
 8010efe:	e006      	b.n	8010f0e <ethernet_input+0x106>
        goto free_and_return;
 8010f00:	bf00      	nop
 8010f02:	e004      	b.n	8010f0e <ethernet_input+0x106>
        goto free_and_return;
 8010f04:	bf00      	nop
 8010f06:	e002      	b.n	8010f0e <ethernet_input+0x106>
        goto free_and_return;
 8010f08:	bf00      	nop
 8010f0a:	e000      	b.n	8010f0e <ethernet_input+0x106>
        goto free_and_return;
 8010f0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f003 f98e 	bl	8014230 <pbuf_free>
  return ERR_OK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	08027508 	.word	0x08027508

08010f24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
 8010f30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010f32:	8c3b      	ldrh	r3, [r7, #32]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fe ffcf 	bl	800fed8 <lwip_htons>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010f3e:	210e      	movs	r1, #14
 8010f40:	68b8      	ldr	r0, [r7, #8]
 8010f42:	f003 f8ad 	bl	80140a0 <pbuf_add_header>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d125      	bne.n	8010f98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	8afa      	ldrh	r2, [r7, #22]
 8010f56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	2206      	movs	r2, #6
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f00f fcf2 	bl	8020948 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	3306      	adds	r3, #6
 8010f68:	2206      	movs	r2, #6
 8010f6a:	6879      	ldr	r1, [r7, #4]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f00f fceb 	bl	8020948 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f78:	2b06      	cmp	r3, #6
 8010f7a:	d006      	beq.n	8010f8a <ethernet_output+0x66>
 8010f7c:	4b0a      	ldr	r3, [pc, #40]	; (8010fa8 <ethernet_output+0x84>)
 8010f7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010f82:	490a      	ldr	r1, [pc, #40]	; (8010fac <ethernet_output+0x88>)
 8010f84:	480a      	ldr	r0, [pc, #40]	; (8010fb0 <ethernet_output+0x8c>)
 8010f86:	f010 f951 	bl	802122c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	699b      	ldr	r3, [r3, #24]
 8010f8e:	68b9      	ldr	r1, [r7, #8]
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	4798      	blx	r3
 8010f94:	4603      	mov	r3, r0
 8010f96:	e002      	b.n	8010f9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010f98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010f9a:	f06f 0301 	mvn.w	r3, #1
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3718      	adds	r7, #24
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	08024354 	.word	0x08024354
 8010fac:	080243a8 	.word	0x080243a8
 8010fb0:	080243dc 	.word	0x080243dc

08010fb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b08e      	sub	sp, #56	; 0x38
 8010fb8:	af04      	add	r7, sp, #16
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010fbe:	4b87      	ldr	r3, [pc, #540]	; (80111dc <icmp_input+0x228>)
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 030f 	and.w	r3, r3, #15
 8010fcc:	b2db      	uxtb	r3, r3
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010fd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fd6:	2b13      	cmp	r3, #19
 8010fd8:	f240 80e8 	bls.w	80111ac <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	895b      	ldrh	r3, [r3, #10]
 8010fe0:	2b03      	cmp	r3, #3
 8010fe2:	f240 80e5 	bls.w	80111b0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010ff0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	f000 80d2 	beq.w	801119e <icmp_input+0x1ea>
 8010ffa:	2b08      	cmp	r3, #8
 8010ffc:	f040 80d2 	bne.w	80111a4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011000:	4b77      	ldr	r3, [pc, #476]	; (80111e0 <icmp_input+0x22c>)
 8011002:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011004:	4b75      	ldr	r3, [pc, #468]	; (80111dc <icmp_input+0x228>)
 8011006:	695b      	ldr	r3, [r3, #20]
 8011008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801100c:	2be0      	cmp	r3, #224	; 0xe0
 801100e:	f000 80d6 	beq.w	80111be <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011012:	4b72      	ldr	r3, [pc, #456]	; (80111dc <icmp_input+0x228>)
 8011014:	695b      	ldr	r3, [r3, #20]
 8011016:	4a71      	ldr	r2, [pc, #452]	; (80111dc <icmp_input+0x228>)
 8011018:	6812      	ldr	r2, [r2, #0]
 801101a:	4611      	mov	r1, r2
 801101c:	4618      	mov	r0, r3
 801101e:	f000 fce7 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 8011022:	4603      	mov	r3, r0
 8011024:	2b00      	cmp	r3, #0
 8011026:	f040 80cc 	bne.w	80111c2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	891b      	ldrh	r3, [r3, #8]
 801102e:	2b07      	cmp	r3, #7
 8011030:	f240 80c0 	bls.w	80111b4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f9e0 	bl	80113fa <inet_chksum_pbuf>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d003      	beq.n	8011048 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f003 f8f5 	bl	8014230 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011046:	e0c5      	b.n	80111d4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801104a:	330e      	adds	r3, #14
 801104c:	4619      	mov	r1, r3
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f003 f826 	bl	80140a0 <pbuf_add_header>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d04b      	beq.n	80110f2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	891a      	ldrh	r2, [r3, #8]
 801105e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011060:	4413      	add	r3, r2
 8011062:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	891b      	ldrh	r3, [r3, #8]
 8011068:	8b7a      	ldrh	r2, [r7, #26]
 801106a:	429a      	cmp	r2, r3
 801106c:	f0c0 80ab 	bcc.w	80111c6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011070:	8b7b      	ldrh	r3, [r7, #26]
 8011072:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011076:	4619      	mov	r1, r3
 8011078:	200e      	movs	r0, #14
 801107a:	f002 fdc3 	bl	8013c04 <pbuf_alloc>
 801107e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	2b00      	cmp	r3, #0
 8011084:	f000 80a1 	beq.w	80111ca <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	895b      	ldrh	r3, [r3, #10]
 801108c:	461a      	mov	r2, r3
 801108e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011090:	3308      	adds	r3, #8
 8011092:	429a      	cmp	r2, r3
 8011094:	d203      	bcs.n	801109e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011096:	6978      	ldr	r0, [r7, #20]
 8011098:	f003 f8ca 	bl	8014230 <pbuf_free>
          goto icmperr;
 801109c:	e096      	b.n	80111cc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110a6:	4618      	mov	r0, r3
 80110a8:	f00f fc4e 	bl	8020948 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80110ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110ae:	4619      	mov	r1, r3
 80110b0:	6978      	ldr	r0, [r7, #20]
 80110b2:	f003 f805 	bl	80140c0 <pbuf_remove_header>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d009      	beq.n	80110d0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80110bc:	4b49      	ldr	r3, [pc, #292]	; (80111e4 <icmp_input+0x230>)
 80110be:	22b6      	movs	r2, #182	; 0xb6
 80110c0:	4949      	ldr	r1, [pc, #292]	; (80111e8 <icmp_input+0x234>)
 80110c2:	484a      	ldr	r0, [pc, #296]	; (80111ec <icmp_input+0x238>)
 80110c4:	f010 f8b2 	bl	802122c <iprintf>
          pbuf_free(r);
 80110c8:	6978      	ldr	r0, [r7, #20]
 80110ca:	f003 f8b1 	bl	8014230 <pbuf_free>
          goto icmperr;
 80110ce:	e07d      	b.n	80111cc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80110d0:	6879      	ldr	r1, [r7, #4]
 80110d2:	6978      	ldr	r0, [r7, #20]
 80110d4:	f003 f9e0 	bl	8014498 <pbuf_copy>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d003      	beq.n	80110e6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80110de:	6978      	ldr	r0, [r7, #20]
 80110e0:	f003 f8a6 	bl	8014230 <pbuf_free>
          goto icmperr;
 80110e4:	e072      	b.n	80111cc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f003 f8a2 	bl	8014230 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	607b      	str	r3, [r7, #4]
 80110f0:	e00f      	b.n	8011112 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80110f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110f4:	330e      	adds	r3, #14
 80110f6:	4619      	mov	r1, r3
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f002 ffe1 	bl	80140c0 <pbuf_remove_header>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d006      	beq.n	8011112 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011104:	4b37      	ldr	r3, [pc, #220]	; (80111e4 <icmp_input+0x230>)
 8011106:	22c7      	movs	r2, #199	; 0xc7
 8011108:	4939      	ldr	r1, [pc, #228]	; (80111f0 <icmp_input+0x23c>)
 801110a:	4838      	ldr	r0, [pc, #224]	; (80111ec <icmp_input+0x238>)
 801110c:	f010 f88e 	bl	802122c <iprintf>
          goto icmperr;
 8011110:	e05c      	b.n	80111cc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801111a:	4619      	mov	r1, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f002 ffbf 	bl	80140a0 <pbuf_add_header>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d13c      	bne.n	80111a2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011136:	4b29      	ldr	r3, [pc, #164]	; (80111dc <icmp_input+0x228>)
 8011138:	691a      	ldr	r2, [r3, #16]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2200      	movs	r2, #0
 8011142:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	885b      	ldrh	r3, [r3, #2]
 8011148:	b29b      	uxth	r3, r3
 801114a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801114e:	4293      	cmp	r3, r2
 8011150:	d907      	bls.n	8011162 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	885b      	ldrh	r3, [r3, #2]
 8011156:	b29b      	uxth	r3, r3
 8011158:	3309      	adds	r3, #9
 801115a:	b29a      	uxth	r2, r3
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	805a      	strh	r2, [r3, #2]
 8011160:	e006      	b.n	8011170 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	885b      	ldrh	r3, [r3, #2]
 8011166:	b29b      	uxth	r3, r3
 8011168:	3308      	adds	r3, #8
 801116a:	b29a      	uxth	r2, r3
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	22ff      	movs	r2, #255	; 0xff
 8011174:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2200      	movs	r2, #0
 801117a:	729a      	strb	r2, [r3, #10]
 801117c:	2200      	movs	r2, #0
 801117e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	9302      	str	r3, [sp, #8]
 8011184:	2301      	movs	r3, #1
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	2300      	movs	r3, #0
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	23ff      	movs	r3, #255	; 0xff
 801118e:	2200      	movs	r2, #0
 8011190:	69f9      	ldr	r1, [r7, #28]
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 fb54 	bl	8011840 <ip4_output_if>
 8011198:	4603      	mov	r3, r0
 801119a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801119c:	e001      	b.n	80111a2 <icmp_input+0x1ee>
      break;
 801119e:	bf00      	nop
 80111a0:	e000      	b.n	80111a4 <icmp_input+0x1f0>
      break;
 80111a2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f003 f843 	bl	8014230 <pbuf_free>
  return;
 80111aa:	e013      	b.n	80111d4 <icmp_input+0x220>
    goto lenerr;
 80111ac:	bf00      	nop
 80111ae:	e002      	b.n	80111b6 <icmp_input+0x202>
    goto lenerr;
 80111b0:	bf00      	nop
 80111b2:	e000      	b.n	80111b6 <icmp_input+0x202>
        goto lenerr;
 80111b4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f003 f83a 	bl	8014230 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80111bc:	e00a      	b.n	80111d4 <icmp_input+0x220>
        goto icmperr;
 80111be:	bf00      	nop
 80111c0:	e004      	b.n	80111cc <icmp_input+0x218>
        goto icmperr;
 80111c2:	bf00      	nop
 80111c4:	e002      	b.n	80111cc <icmp_input+0x218>
          goto icmperr;
 80111c6:	bf00      	nop
 80111c8:	e000      	b.n	80111cc <icmp_input+0x218>
          goto icmperr;
 80111ca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f003 f82f 	bl	8014230 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80111d2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80111d4:	3728      	adds	r7, #40	; 0x28
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	24045dc4 	.word	0x24045dc4
 80111e0:	24045dd8 	.word	0x24045dd8
 80111e4:	08024404 	.word	0x08024404
 80111e8:	08024458 	.word	0x08024458
 80111ec:	08024490 	.word	0x08024490
 80111f0:	080244b8 	.word	0x080244b8

080111f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	460b      	mov	r3, r1
 80111fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	461a      	mov	r2, r3
 8011204:	2103      	movs	r1, #3
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 f814 	bl	8011234 <icmp_send_response>
}
 801120c:	bf00      	nop
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	460b      	mov	r3, r1
 801121e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011220:	78fb      	ldrb	r3, [r7, #3]
 8011222:	461a      	mov	r2, r3
 8011224:	210b      	movs	r1, #11
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 f804 	bl	8011234 <icmp_send_response>
}
 801122c:	bf00      	nop
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b08c      	sub	sp, #48	; 0x30
 8011238:	af04      	add	r7, sp, #16
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	460b      	mov	r3, r1
 801123e:	70fb      	strb	r3, [r7, #3]
 8011240:	4613      	mov	r3, r2
 8011242:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011244:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011248:	2124      	movs	r1, #36	; 0x24
 801124a:	2022      	movs	r0, #34	; 0x22
 801124c:	f002 fcda 	bl	8013c04 <pbuf_alloc>
 8011250:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011252:	69fb      	ldr	r3, [r7, #28]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d056      	beq.n	8011306 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	895b      	ldrh	r3, [r3, #10]
 801125c:	2b23      	cmp	r3, #35	; 0x23
 801125e:	d806      	bhi.n	801126e <icmp_send_response+0x3a>
 8011260:	4b2b      	ldr	r3, [pc, #172]	; (8011310 <icmp_send_response+0xdc>)
 8011262:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011266:	492b      	ldr	r1, [pc, #172]	; (8011314 <icmp_send_response+0xe0>)
 8011268:	482b      	ldr	r0, [pc, #172]	; (8011318 <icmp_send_response+0xe4>)
 801126a:	f00f ffdf 	bl	802122c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	78fa      	ldrb	r2, [r7, #3]
 801127e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	78ba      	ldrb	r2, [r7, #2]
 8011284:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	2200      	movs	r2, #0
 801128a:	711a      	strb	r2, [r3, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	2200      	movs	r2, #0
 8011294:	719a      	strb	r2, [r3, #6]
 8011296:	2200      	movs	r2, #0
 8011298:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	f103 0008 	add.w	r0, r3, #8
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	221c      	movs	r2, #28
 80112a8:	4619      	mov	r1, r3
 80112aa:	f00f fb4d 	bl	8020948 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80112b4:	f107 030c 	add.w	r3, r7, #12
 80112b8:	4618      	mov	r0, r3
 80112ba:	f000 f903 	bl	80114c4 <ip4_route>
 80112be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d01b      	beq.n	80112fe <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	2200      	movs	r2, #0
 80112ca:	709a      	strb	r2, [r3, #2]
 80112cc:	2200      	movs	r2, #0
 80112ce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	895b      	ldrh	r3, [r3, #10]
 80112d4:	4619      	mov	r1, r3
 80112d6:	6978      	ldr	r0, [r7, #20]
 80112d8:	f000 f87d 	bl	80113d6 <inet_chksum>
 80112dc:	4603      	mov	r3, r0
 80112de:	461a      	mov	r2, r3
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80112e4:	f107 020c 	add.w	r2, r7, #12
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	9302      	str	r3, [sp, #8]
 80112ec:	2301      	movs	r3, #1
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	2300      	movs	r3, #0
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	23ff      	movs	r3, #255	; 0xff
 80112f6:	2100      	movs	r1, #0
 80112f8:	69f8      	ldr	r0, [r7, #28]
 80112fa:	f000 faa1 	bl	8011840 <ip4_output_if>
  }
  pbuf_free(q);
 80112fe:	69f8      	ldr	r0, [r7, #28]
 8011300:	f002 ff96 	bl	8014230 <pbuf_free>
 8011304:	e000      	b.n	8011308 <icmp_send_response+0xd4>
    return;
 8011306:	bf00      	nop
}
 8011308:	3720      	adds	r7, #32
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	08024404 	.word	0x08024404
 8011314:	080244ec 	.word	0x080244ec
 8011318:	08024490 	.word	0x08024490

0801131c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801131c:	b480      	push	{r7}
 801131e:	b089      	sub	sp, #36	; 0x24
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	f003 0301 	and.w	r3, r3, #1
 8011338:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00d      	beq.n	801135c <lwip_standard_chksum+0x40>
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	dd0a      	ble.n	801135c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8011346:	69fa      	ldr	r2, [r7, #28]
 8011348:	1c53      	adds	r3, r2, #1
 801134a:	61fb      	str	r3, [r7, #28]
 801134c:	f107 030e 	add.w	r3, r7, #14
 8011350:	3301      	adds	r3, #1
 8011352:	7812      	ldrb	r2, [r2, #0]
 8011354:	701a      	strb	r2, [r3, #0]
    len--;
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	3b01      	subs	r3, #1
 801135a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011360:	e00a      	b.n	8011378 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	1c9a      	adds	r2, r3, #2
 8011366:	61ba      	str	r2, [r7, #24]
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	461a      	mov	r2, r3
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	4413      	add	r3, r2
 8011370:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	3b02      	subs	r3, #2
 8011376:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2b01      	cmp	r3, #1
 801137c:	dcf1      	bgt.n	8011362 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	dd04      	ble.n	801138e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8011384:	f107 030e 	add.w	r3, r7, #14
 8011388:	69ba      	ldr	r2, [r7, #24]
 801138a:	7812      	ldrb	r2, [r2, #0]
 801138c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801138e:	89fb      	ldrh	r3, [r7, #14]
 8011390:	461a      	mov	r2, r3
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	4413      	add	r3, r2
 8011396:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	0c1a      	lsrs	r2, r3, #16
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	b29b      	uxth	r3, r3
 80113a0:	4413      	add	r3, r2
 80113a2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	0c1a      	lsrs	r2, r3, #16
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	4413      	add	r3, r2
 80113ae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d007      	beq.n	80113c6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	021b      	lsls	r3, r3, #8
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	0a1b      	lsrs	r3, r3, #8
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	4313      	orrs	r3, r2
 80113c4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	b29b      	uxth	r3, r3
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3724      	adds	r7, #36	; 0x24
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr

080113d6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b082      	sub	sp, #8
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
 80113de:	460b      	mov	r3, r1
 80113e0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80113e2:	887b      	ldrh	r3, [r7, #2]
 80113e4:	4619      	mov	r1, r3
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7ff ff98 	bl	801131c <lwip_standard_chksum>
 80113ec:	4603      	mov	r3, r0
 80113ee:	43db      	mvns	r3, r3
 80113f0:	b29b      	uxth	r3, r3
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}

080113fa <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b086      	sub	sp, #24
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8011406:	2300      	movs	r3, #0
 8011408:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	613b      	str	r3, [r7, #16]
 801140e:	e02b      	b.n	8011468 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	895b      	ldrh	r3, [r3, #10]
 8011418:	4619      	mov	r1, r3
 801141a:	4610      	mov	r0, r2
 801141c:	f7ff ff7e 	bl	801131c <lwip_standard_chksum>
 8011420:	4603      	mov	r3, r0
 8011422:	461a      	mov	r2, r3
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	4413      	add	r3, r2
 8011428:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	0c1a      	lsrs	r2, r3, #16
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	b29b      	uxth	r3, r3
 8011432:	4413      	add	r3, r2
 8011434:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	895b      	ldrh	r3, [r3, #10]
 801143a:	f003 0301 	and.w	r3, r3, #1
 801143e:	b29b      	uxth	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00e      	beq.n	8011462 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	bf0c      	ite	eq
 801144a:	2301      	moveq	r3, #1
 801144c:	2300      	movne	r3, #0
 801144e:	b2db      	uxtb	r3, r3
 8011450:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	021b      	lsls	r3, r3, #8
 8011456:	b29a      	uxth	r2, r3
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	0a1b      	lsrs	r3, r3, #8
 801145c:	b2db      	uxtb	r3, r3
 801145e:	4313      	orrs	r3, r2
 8011460:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	613b      	str	r3, [r7, #16]
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d1d0      	bne.n	8011410 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d007      	beq.n	8011484 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	021b      	lsls	r3, r3, #8
 8011478:	b29a      	uxth	r2, r3
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	0a1b      	lsrs	r3, r3, #8
 801147e:	b2db      	uxtb	r3, r3
 8011480:	4313      	orrs	r3, r2
 8011482:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	b29b      	uxth	r3, r3
 8011488:	43db      	mvns	r3, r3
 801148a:	b29b      	uxth	r3, r3
}
 801148c:	4618      	mov	r0, r3
 801148e:	3718      	adds	r7, #24
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801149e:	f004 fba9 	bl	8015bf4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80114a2:	f001 fb13 	bl	8012acc <mem_init>
  memp_init();
 80114a6:	f001 fe77 	bl	8013198 <memp_init>
  pbuf_init();
  netif_init();
 80114aa:	f002 f815 	bl	80134d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80114ae:	f00a ff95 	bl	801c3dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80114b2:	f004 fc29 	bl	8015d08 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80114b6:	f00a fed7 	bl	801c268 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80114ba:	bf00      	nop
 80114bc:	3708      	adds	r7, #8
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
	...

080114c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80114cc:	4b33      	ldr	r3, [pc, #204]	; (801159c <ip4_route+0xd8>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	60fb      	str	r3, [r7, #12]
 80114d2:	e036      	b.n	8011542 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114da:	f003 0301 	and.w	r3, r3, #1
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d02b      	beq.n	801153c <ip4_route+0x78>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114ea:	089b      	lsrs	r3, r3, #2
 80114ec:	f003 0301 	and.w	r3, r3, #1
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d022      	beq.n	801153c <ip4_route+0x78>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	3304      	adds	r3, #4
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d01d      	beq.n	801153c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	3304      	adds	r3, #4
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	405a      	eors	r2, r3
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	3308      	adds	r3, #8
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	4013      	ands	r3, r2
 8011514:	2b00      	cmp	r3, #0
 8011516:	d101      	bne.n	801151c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	e038      	b.n	801158e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011522:	f003 0302 	and.w	r3, r3, #2
 8011526:	2b00      	cmp	r3, #0
 8011528:	d108      	bne.n	801153c <ip4_route+0x78>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	330c      	adds	r3, #12
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	429a      	cmp	r2, r3
 8011536:	d101      	bne.n	801153c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	e028      	b.n	801158e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	60fb      	str	r3, [r7, #12]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1c5      	bne.n	80114d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011548:	4b15      	ldr	r3, [pc, #84]	; (80115a0 <ip4_route+0xdc>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d01a      	beq.n	8011586 <ip4_route+0xc2>
 8011550:	4b13      	ldr	r3, [pc, #76]	; (80115a0 <ip4_route+0xdc>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	d012      	beq.n	8011586 <ip4_route+0xc2>
 8011560:	4b0f      	ldr	r3, [pc, #60]	; (80115a0 <ip4_route+0xdc>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011568:	f003 0304 	and.w	r3, r3, #4
 801156c:	2b00      	cmp	r3, #0
 801156e:	d00a      	beq.n	8011586 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011570:	4b0b      	ldr	r3, [pc, #44]	; (80115a0 <ip4_route+0xdc>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	3304      	adds	r3, #4
 8011576:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011578:	2b00      	cmp	r3, #0
 801157a:	d004      	beq.n	8011586 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	b2db      	uxtb	r3, r3
 8011582:	2b7f      	cmp	r3, #127	; 0x7f
 8011584:	d101      	bne.n	801158a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011586:	2300      	movs	r3, #0
 8011588:	e001      	b.n	801158e <ip4_route+0xca>
  }

  return netif_default;
 801158a:	4b05      	ldr	r3, [pc, #20]	; (80115a0 <ip4_route+0xdc>)
 801158c:	681b      	ldr	r3, [r3, #0]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3714      	adds	r7, #20
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	24048e74 	.word	0x24048e74
 80115a0:	24048e78 	.word	0x24048e78

080115a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115b2:	f003 0301 	and.w	r3, r3, #1
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d016      	beq.n	80115ea <ip4_input_accept+0x46>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	3304      	adds	r3, #4
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d011      	beq.n	80115ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80115c6:	4b0b      	ldr	r3, [pc, #44]	; (80115f4 <ip4_input_accept+0x50>)
 80115c8:	695a      	ldr	r2, [r3, #20]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	3304      	adds	r3, #4
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d008      	beq.n	80115e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80115d4:	4b07      	ldr	r3, [pc, #28]	; (80115f4 <ip4_input_accept+0x50>)
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	6879      	ldr	r1, [r7, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	f000 fa08 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 80115e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d001      	beq.n	80115ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80115e6:	2301      	movs	r3, #1
 80115e8:	e000      	b.n	80115ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	24045dc4 	.word	0x24045dc4

080115f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b086      	sub	sp, #24
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	091b      	lsrs	r3, r3, #4
 801160e:	b2db      	uxtb	r3, r3
 8011610:	2b04      	cmp	r3, #4
 8011612:	d004      	beq.n	801161e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f002 fe0b 	bl	8014230 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	e107      	b.n	801182e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	f003 030f 	and.w	r3, r3, #15
 8011626:	b2db      	uxtb	r3, r3
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	b2db      	uxtb	r3, r3
 801162c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	885b      	ldrh	r3, [r3, #2]
 8011632:	b29b      	uxth	r3, r3
 8011634:	4618      	mov	r0, r3
 8011636:	f7fe fc4f 	bl	800fed8 <lwip_htons>
 801163a:	4603      	mov	r3, r0
 801163c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	891b      	ldrh	r3, [r3, #8]
 8011642:	89ba      	ldrh	r2, [r7, #12]
 8011644:	429a      	cmp	r2, r3
 8011646:	d204      	bcs.n	8011652 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011648:	89bb      	ldrh	r3, [r7, #12]
 801164a:	4619      	mov	r1, r3
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f002 fc37 	bl	8013ec0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	895b      	ldrh	r3, [r3, #10]
 8011656:	89fa      	ldrh	r2, [r7, #14]
 8011658:	429a      	cmp	r2, r3
 801165a:	d807      	bhi.n	801166c <ip4_input+0x74>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	89ba      	ldrh	r2, [r7, #12]
 8011662:	429a      	cmp	r2, r3
 8011664:	d802      	bhi.n	801166c <ip4_input+0x74>
 8011666:	89fb      	ldrh	r3, [r7, #14]
 8011668:	2b13      	cmp	r3, #19
 801166a:	d804      	bhi.n	8011676 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f002 fddf 	bl	8014230 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011672:	2300      	movs	r3, #0
 8011674:	e0db      	b.n	801182e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	691b      	ldr	r3, [r3, #16]
 801167a:	4a6f      	ldr	r2, [pc, #444]	; (8011838 <ip4_input+0x240>)
 801167c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	4a6d      	ldr	r2, [pc, #436]	; (8011838 <ip4_input+0x240>)
 8011684:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011686:	4b6c      	ldr	r3, [pc, #432]	; (8011838 <ip4_input+0x240>)
 8011688:	695b      	ldr	r3, [r3, #20]
 801168a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801168e:	2be0      	cmp	r3, #224	; 0xe0
 8011690:	d112      	bne.n	80116b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011698:	f003 0301 	and.w	r3, r3, #1
 801169c:	b2db      	uxtb	r3, r3
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d007      	beq.n	80116b2 <ip4_input+0xba>
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	3304      	adds	r3, #4
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d002      	beq.n	80116b2 <ip4_input+0xba>
      netif = inp;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	613b      	str	r3, [r7, #16]
 80116b0:	e02a      	b.n	8011708 <ip4_input+0x110>
    } else {
      netif = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	613b      	str	r3, [r7, #16]
 80116b6:	e027      	b.n	8011708 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80116b8:	6838      	ldr	r0, [r7, #0]
 80116ba:	f7ff ff73 	bl	80115a4 <ip4_input_accept>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d002      	beq.n	80116ca <ip4_input+0xd2>
      netif = inp;
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	613b      	str	r3, [r7, #16]
 80116c8:	e01e      	b.n	8011708 <ip4_input+0x110>
    } else {
      netif = NULL;
 80116ca:	2300      	movs	r3, #0
 80116cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80116ce:	4b5a      	ldr	r3, [pc, #360]	; (8011838 <ip4_input+0x240>)
 80116d0:	695b      	ldr	r3, [r3, #20]
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	2b7f      	cmp	r3, #127	; 0x7f
 80116d6:	d017      	beq.n	8011708 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80116d8:	4b58      	ldr	r3, [pc, #352]	; (801183c <ip4_input+0x244>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	613b      	str	r3, [r7, #16]
 80116de:	e00e      	b.n	80116fe <ip4_input+0x106>
          if (netif == inp) {
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d006      	beq.n	80116f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80116e8:	6938      	ldr	r0, [r7, #16]
 80116ea:	f7ff ff5b 	bl	80115a4 <ip4_input_accept>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d108      	bne.n	8011706 <ip4_input+0x10e>
 80116f4:	e000      	b.n	80116f8 <ip4_input+0x100>
            continue;
 80116f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	613b      	str	r3, [r7, #16]
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d1ed      	bne.n	80116e0 <ip4_input+0xe8>
 8011704:	e000      	b.n	8011708 <ip4_input+0x110>
            break;
 8011706:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011708:	4b4b      	ldr	r3, [pc, #300]	; (8011838 <ip4_input+0x240>)
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	6839      	ldr	r1, [r7, #0]
 801170e:	4618      	mov	r0, r3
 8011710:	f000 f96e 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d105      	bne.n	8011726 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801171a:	4b47      	ldr	r3, [pc, #284]	; (8011838 <ip4_input+0x240>)
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011722:	2be0      	cmp	r3, #224	; 0xe0
 8011724:	d104      	bne.n	8011730 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f002 fd82 	bl	8014230 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801172c:	2300      	movs	r3, #0
 801172e:	e07e      	b.n	801182e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d104      	bne.n	8011740 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f002 fd7a 	bl	8014230 <pbuf_free>
    return ERR_OK;
 801173c:	2300      	movs	r3, #0
 801173e:	e076      	b.n	801182e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	88db      	ldrh	r3, [r3, #6]
 8011744:	b29b      	uxth	r3, r3
 8011746:	461a      	mov	r2, r3
 8011748:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801174c:	4013      	ands	r3, r2
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00b      	beq.n	801176a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f000 fdbc 	bl	80122d0 <ip4_reass>
 8011758:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <ip4_input+0x16c>
      return ERR_OK;
 8011760:	2300      	movs	r3, #0
 8011762:	e064      	b.n	801182e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801176a:	4a33      	ldr	r2, [pc, #204]	; (8011838 <ip4_input+0x240>)
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011770:	4a31      	ldr	r2, [pc, #196]	; (8011838 <ip4_input+0x240>)
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011776:	4a30      	ldr	r2, [pc, #192]	; (8011838 <ip4_input+0x240>)
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	f003 030f 	and.w	r3, r3, #15
 8011784:	b2db      	uxtb	r3, r3
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	b2db      	uxtb	r3, r3
 801178a:	b29a      	uxth	r2, r3
 801178c:	4b2a      	ldr	r3, [pc, #168]	; (8011838 <ip4_input+0x240>)
 801178e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011790:	89fb      	ldrh	r3, [r7, #14]
 8011792:	4619      	mov	r1, r3
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f002 fc93 	bl	80140c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	7a5b      	ldrb	r3, [r3, #9]
 801179e:	2b11      	cmp	r3, #17
 80117a0:	d006      	beq.n	80117b0 <ip4_input+0x1b8>
 80117a2:	2b11      	cmp	r3, #17
 80117a4:	dc13      	bgt.n	80117ce <ip4_input+0x1d6>
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d00c      	beq.n	80117c4 <ip4_input+0x1cc>
 80117aa:	2b06      	cmp	r3, #6
 80117ac:	d005      	beq.n	80117ba <ip4_input+0x1c2>
 80117ae:	e00e      	b.n	80117ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f00a fec0 	bl	801c538 <udp_input>
        break;
 80117b8:	e026      	b.n	8011808 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f006 f8c5 	bl	801794c <tcp_input>
        break;
 80117c2:	e021      	b.n	8011808 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80117c4:	6839      	ldr	r1, [r7, #0]
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7ff fbf4 	bl	8010fb4 <icmp_input>
        break;
 80117cc:	e01c      	b.n	8011808 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80117ce:	4b1a      	ldr	r3, [pc, #104]	; (8011838 <ip4_input+0x240>)
 80117d0:	695b      	ldr	r3, [r3, #20]
 80117d2:	6939      	ldr	r1, [r7, #16]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f000 f90b 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d10f      	bne.n	8011800 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117e0:	4b15      	ldr	r3, [pc, #84]	; (8011838 <ip4_input+0x240>)
 80117e2:	695b      	ldr	r3, [r3, #20]
 80117e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80117e8:	2be0      	cmp	r3, #224	; 0xe0
 80117ea:	d009      	beq.n	8011800 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80117ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80117f0:	4619      	mov	r1, r3
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f002 fcd7 	bl	80141a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80117f8:	2102      	movs	r1, #2
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f7ff fcfa 	bl	80111f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f002 fd15 	bl	8014230 <pbuf_free>
        break;
 8011806:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011808:	4b0b      	ldr	r3, [pc, #44]	; (8011838 <ip4_input+0x240>)
 801180a:	2200      	movs	r2, #0
 801180c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801180e:	4b0a      	ldr	r3, [pc, #40]	; (8011838 <ip4_input+0x240>)
 8011810:	2200      	movs	r2, #0
 8011812:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011814:	4b08      	ldr	r3, [pc, #32]	; (8011838 <ip4_input+0x240>)
 8011816:	2200      	movs	r2, #0
 8011818:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801181a:	4b07      	ldr	r3, [pc, #28]	; (8011838 <ip4_input+0x240>)
 801181c:	2200      	movs	r2, #0
 801181e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011820:	4b05      	ldr	r3, [pc, #20]	; (8011838 <ip4_input+0x240>)
 8011822:	2200      	movs	r2, #0
 8011824:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011826:	4b04      	ldr	r3, [pc, #16]	; (8011838 <ip4_input+0x240>)
 8011828:	2200      	movs	r2, #0
 801182a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801182c:	2300      	movs	r3, #0
}
 801182e:	4618      	mov	r0, r3
 8011830:	3718      	adds	r7, #24
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	24045dc4 	.word	0x24045dc4
 801183c:	24048e74 	.word	0x24048e74

08011840 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b08a      	sub	sp, #40	; 0x28
 8011844:	af04      	add	r7, sp, #16
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	607a      	str	r2, [r7, #4]
 801184c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d009      	beq.n	801186c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d003      	beq.n	8011866 <ip4_output_if+0x26>
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d102      	bne.n	801186c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011868:	3304      	adds	r3, #4
 801186a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801186c:	78fa      	ldrb	r2, [r7, #3]
 801186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011870:	9302      	str	r3, [sp, #8]
 8011872:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011876:	9301      	str	r3, [sp, #4]
 8011878:	f897 3020 	ldrb.w	r3, [r7, #32]
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	4613      	mov	r3, r2
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	6979      	ldr	r1, [r7, #20]
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f000 f805 	bl	8011894 <ip4_output_if_src>
 801188a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801188c:	4618      	mov	r0, r3
 801188e:	3718      	adds	r7, #24
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b088      	sub	sp, #32
 8011898:	af00      	add	r7, sp, #0
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	607a      	str	r2, [r7, #4]
 80118a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	7b9b      	ldrb	r3, [r3, #14]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d006      	beq.n	80118b8 <ip4_output_if_src+0x24>
 80118aa:	4b4b      	ldr	r3, [pc, #300]	; (80119d8 <ip4_output_if_src+0x144>)
 80118ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 80118b0:	494a      	ldr	r1, [pc, #296]	; (80119dc <ip4_output_if_src+0x148>)
 80118b2:	484b      	ldr	r0, [pc, #300]	; (80119e0 <ip4_output_if_src+0x14c>)
 80118b4:	f00f fcba 	bl	802122c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d060      	beq.n	8011980 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80118be:	2314      	movs	r3, #20
 80118c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80118c2:	2114      	movs	r1, #20
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f002 fbeb 	bl	80140a0 <pbuf_add_header>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80118d0:	f06f 0301 	mvn.w	r3, #1
 80118d4:	e07c      	b.n	80119d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	2b13      	cmp	r3, #19
 80118e2:	d806      	bhi.n	80118f2 <ip4_output_if_src+0x5e>
 80118e4:	4b3c      	ldr	r3, [pc, #240]	; (80119d8 <ip4_output_if_src+0x144>)
 80118e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80118ea:	493e      	ldr	r1, [pc, #248]	; (80119e4 <ip4_output_if_src+0x150>)
 80118ec:	483c      	ldr	r0, [pc, #240]	; (80119e0 <ip4_output_if_src+0x14c>)
 80118ee:	f00f fc9d 	bl	802122c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	78fa      	ldrb	r2, [r7, #3]
 80118f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80118fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681a      	ldr	r2, [r3, #0]
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011908:	8b7b      	ldrh	r3, [r7, #26]
 801190a:	089b      	lsrs	r3, r3, #2
 801190c:	b29b      	uxth	r3, r3
 801190e:	b2db      	uxtb	r3, r3
 8011910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011914:	b2da      	uxtb	r2, r3
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011920:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	891b      	ldrh	r3, [r3, #8]
 8011926:	4618      	mov	r0, r3
 8011928:	f7fe fad6 	bl	800fed8 <lwip_htons>
 801192c:	4603      	mov	r3, r0
 801192e:	461a      	mov	r2, r3
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	2200      	movs	r2, #0
 8011938:	719a      	strb	r2, [r3, #6]
 801193a:	2200      	movs	r2, #0
 801193c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801193e:	4b2a      	ldr	r3, [pc, #168]	; (80119e8 <ip4_output_if_src+0x154>)
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe fac8 	bl	800fed8 <lwip_htons>
 8011948:	4603      	mov	r3, r0
 801194a:	461a      	mov	r2, r3
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011950:	4b25      	ldr	r3, [pc, #148]	; (80119e8 <ip4_output_if_src+0x154>)
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	3301      	adds	r3, #1
 8011956:	b29a      	uxth	r2, r3
 8011958:	4b23      	ldr	r3, [pc, #140]	; (80119e8 <ip4_output_if_src+0x154>)
 801195a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d104      	bne.n	801196c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011962:	4b22      	ldr	r3, [pc, #136]	; (80119ec <ip4_output_if_src+0x158>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	60da      	str	r2, [r3, #12]
 801196a:	e003      	b.n	8011974 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	2200      	movs	r2, #0
 8011978:	729a      	strb	r2, [r3, #10]
 801197a:	2200      	movs	r2, #0
 801197c:	72da      	strb	r2, [r3, #11]
 801197e:	e00f      	b.n	80119a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	895b      	ldrh	r3, [r3, #10]
 8011984:	2b13      	cmp	r3, #19
 8011986:	d802      	bhi.n	801198e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011988:	f06f 0301 	mvn.w	r3, #1
 801198c:	e020      	b.n	80119d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801199a:	f107 0314 	add.w	r3, r7, #20
 801199e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80119a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00c      	beq.n	80119c2 <ip4_output_if_src+0x12e>
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	891a      	ldrh	r2, [r3, #8]
 80119ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d906      	bls.n	80119c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f000 fe77 	bl	80126ac <ip4_frag>
 80119be:	4603      	mov	r3, r0
 80119c0:	e006      	b.n	80119d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	695b      	ldr	r3, [r3, #20]
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	68f9      	ldr	r1, [r7, #12]
 80119ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119cc:	4798      	blx	r3
 80119ce:	4603      	mov	r3, r0
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3720      	adds	r7, #32
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	08024518 	.word	0x08024518
 80119dc:	0802456c 	.word	0x0802456c
 80119e0:	08024578 	.word	0x08024578
 80119e4:	080245a0 	.word	0x080245a0
 80119e8:	240406ce 	.word	0x240406ce
 80119ec:	08027518 	.word	0x08027518

080119f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b085      	sub	sp, #20
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a04:	d002      	beq.n	8011a0c <ip4_addr_isbroadcast_u32+0x1c>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d101      	bne.n	8011a10 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e02a      	b.n	8011a66 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a16:	f003 0302 	and.w	r3, r3, #2
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d101      	bne.n	8011a22 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	e021      	b.n	8011a66 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	3304      	adds	r3, #4
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d101      	bne.n	8011a32 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e019      	b.n	8011a66 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	3304      	adds	r3, #4
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	405a      	eors	r2, r3
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	3308      	adds	r3, #8
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4013      	ands	r3, r2
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d10d      	bne.n	8011a64 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	3308      	adds	r3, #8
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	43da      	mvns	r2, r3
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	3308      	adds	r3, #8
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d101      	bne.n	8011a64 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011a60:	2301      	movs	r3, #1
 8011a62:	e000      	b.n	8011a66 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011a64:	2300      	movs	r3, #0
  }
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3714      	adds	r7, #20
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a70:	4770      	bx	lr
	...

08011a74 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b08a      	sub	sp, #40	; 0x28
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8011a7e:	f107 030c 	add.w	r3, r7, #12
 8011a82:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8011a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011a90:	3301      	adds	r3, #1
 8011a92:	4a89      	ldr	r2, [pc, #548]	; (8011cb8 <ip4addr_aton+0x244>)
 8011a94:	4413      	add	r3, r2
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	f003 0304 	and.w	r3, r3, #4
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d101      	bne.n	8011aa4 <ip4addr_aton+0x30>
      return 0;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e105      	b.n	8011cb0 <ip4addr_aton+0x23c>
    }
    val = 0;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8011aa8:	230a      	movs	r3, #10
 8011aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8011aae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ab2:	2b30      	cmp	r3, #48	; 0x30
 8011ab4:	d11c      	bne.n	8011af0 <ip4addr_aton+0x7c>
      c = *++cp;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	607b      	str	r3, [r7, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8011ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ac8:	2b78      	cmp	r3, #120	; 0x78
 8011aca:	d003      	beq.n	8011ad4 <ip4addr_aton+0x60>
 8011acc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ad0:	2b58      	cmp	r3, #88	; 0x58
 8011ad2:	d10a      	bne.n	8011aea <ip4addr_aton+0x76>
        base = 16;
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	3301      	adds	r3, #1
 8011ade:	607b      	str	r3, [r7, #4]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011ae8:	e002      	b.n	8011af0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8011aea:	2308      	movs	r3, #8
 8011aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8011af0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011af4:	3301      	adds	r3, #1
 8011af6:	4a70      	ldr	r2, [pc, #448]	; (8011cb8 <ip4addr_aton+0x244>)
 8011af8:	4413      	add	r3, r2
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	f003 0304 	and.w	r3, r3, #4
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d011      	beq.n	8011b28 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8011b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b0a:	fb02 f203 	mul.w	r2, r2, r3
 8011b0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b12:	4413      	add	r3, r2
 8011b14:	3b30      	subs	r3, #48	; 0x30
 8011b16:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	607b      	str	r3, [r7, #4]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011b26:	e7e3      	b.n	8011af0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8011b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011b2c:	2b10      	cmp	r3, #16
 8011b2e:	d127      	bne.n	8011b80 <ip4addr_aton+0x10c>
 8011b30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b34:	3301      	adds	r3, #1
 8011b36:	4a60      	ldr	r2, [pc, #384]	; (8011cb8 <ip4addr_aton+0x244>)
 8011b38:	4413      	add	r3, r2
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d01d      	beq.n	8011b80 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8011b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b46:	011b      	lsls	r3, r3, #4
 8011b48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011b4c:	f102 010a 	add.w	r1, r2, #10
 8011b50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011b54:	3201      	adds	r2, #1
 8011b56:	4858      	ldr	r0, [pc, #352]	; (8011cb8 <ip4addr_aton+0x244>)
 8011b58:	4402      	add	r2, r0
 8011b5a:	7812      	ldrb	r2, [r2, #0]
 8011b5c:	f002 0203 	and.w	r2, r2, #3
 8011b60:	2a02      	cmp	r2, #2
 8011b62:	d101      	bne.n	8011b68 <ip4addr_aton+0xf4>
 8011b64:	2261      	movs	r2, #97	; 0x61
 8011b66:	e000      	b.n	8011b6a <ip4addr_aton+0xf6>
 8011b68:	2241      	movs	r2, #65	; 0x41
 8011b6a:	1a8a      	subs	r2, r1, r2
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	3301      	adds	r3, #1
 8011b74:	607b      	str	r3, [r7, #4]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8011b7e:	e7b7      	b.n	8011af0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8011b80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b84:	2b2e      	cmp	r3, #46	; 0x2e
 8011b86:	d114      	bne.n	8011bb2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8011b88:	f107 030c 	add.w	r3, r7, #12
 8011b8c:	330c      	adds	r3, #12
 8011b8e:	69fa      	ldr	r2, [r7, #28]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d301      	bcc.n	8011b98 <ip4addr_aton+0x124>
        return 0;
 8011b94:	2300      	movs	r3, #0
 8011b96:	e08b      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	1d1a      	adds	r2, r3, #4
 8011b9c:	61fa      	str	r2, [r7, #28]
 8011b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ba0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	607b      	str	r3, [r7, #4]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8011bb0:	e76c      	b.n	8011a8c <ip4addr_aton+0x18>
    } else {
      break;
 8011bb2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8011bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00b      	beq.n	8011bd4 <ip4addr_aton+0x160>
 8011bbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	4a3d      	ldr	r2, [pc, #244]	; (8011cb8 <ip4addr_aton+0x244>)
 8011bc4:	4413      	add	r3, r2
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	f003 0308 	and.w	r3, r3, #8
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d101      	bne.n	8011bd4 <ip4addr_aton+0x160>
    return 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	e06d      	b.n	8011cb0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8011bd4:	f107 030c 	add.w	r3, r7, #12
 8011bd8:	69fa      	ldr	r2, [r7, #28]
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	109b      	asrs	r3, r3, #2
 8011bde:	3301      	adds	r3, #1
 8011be0:	2b04      	cmp	r3, #4
 8011be2:	d853      	bhi.n	8011c8c <ip4addr_aton+0x218>
 8011be4:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <ip4addr_aton+0x178>)
 8011be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bea:	bf00      	nop
 8011bec:	08011c01 	.word	0x08011c01
 8011bf0:	08011c9b 	.word	0x08011c9b
 8011bf4:	08011c05 	.word	0x08011c05
 8011bf8:	08011c27 	.word	0x08011c27
 8011bfc:	08011c55 	.word	0x08011c55

    case 0:
      return 0;       /* initial nondigit */
 8011c00:	2300      	movs	r3, #0
 8011c02:	e055      	b.n	8011cb0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c0a:	d301      	bcc.n	8011c10 <ip4addr_aton+0x19c>
        return 0;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	e04f      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2bff      	cmp	r3, #255	; 0xff
 8011c14:	d901      	bls.n	8011c1a <ip4addr_aton+0x1a6>
        return 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	e04a      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	061b      	lsls	r3, r3, #24
 8011c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c20:	4313      	orrs	r3, r2
 8011c22:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011c24:	e03a      	b.n	8011c9c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8011c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c2c:	d301      	bcc.n	8011c32 <ip4addr_aton+0x1be>
        return 0;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	e03e      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2bff      	cmp	r3, #255	; 0xff
 8011c36:	d802      	bhi.n	8011c3e <ip4addr_aton+0x1ca>
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	2bff      	cmp	r3, #255	; 0xff
 8011c3c:	d901      	bls.n	8011c42 <ip4addr_aton+0x1ce>
        return 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e036      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	061a      	lsls	r2, r3, #24
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	041b      	lsls	r3, r3, #16
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011c52:	e023      	b.n	8011c9c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8011c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c56:	2bff      	cmp	r3, #255	; 0xff
 8011c58:	d901      	bls.n	8011c5e <ip4addr_aton+0x1ea>
        return 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e028      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2bff      	cmp	r3, #255	; 0xff
 8011c62:	d805      	bhi.n	8011c70 <ip4addr_aton+0x1fc>
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	2bff      	cmp	r3, #255	; 0xff
 8011c68:	d802      	bhi.n	8011c70 <ip4addr_aton+0x1fc>
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2bff      	cmp	r3, #255	; 0xff
 8011c6e:	d901      	bls.n	8011c74 <ip4addr_aton+0x200>
        return 0;
 8011c70:	2300      	movs	r3, #0
 8011c72:	e01d      	b.n	8011cb0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	061a      	lsls	r2, r3, #24
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	041b      	lsls	r3, r3, #16
 8011c7c:	431a      	orrs	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	021b      	lsls	r3, r3, #8
 8011c82:	4313      	orrs	r3, r2
 8011c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c86:	4313      	orrs	r3, r2
 8011c88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011c8a:	e007      	b.n	8011c9c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8011c8c:	4b0b      	ldr	r3, [pc, #44]	; (8011cbc <ip4addr_aton+0x248>)
 8011c8e:	22f9      	movs	r2, #249	; 0xf9
 8011c90:	490b      	ldr	r1, [pc, #44]	; (8011cc0 <ip4addr_aton+0x24c>)
 8011c92:	480c      	ldr	r0, [pc, #48]	; (8011cc4 <ip4addr_aton+0x250>)
 8011c94:	f00f faca 	bl	802122c <iprintf>
      break;
 8011c98:	e000      	b.n	8011c9c <ip4addr_aton+0x228>
      break;
 8011c9a:	bf00      	nop
  }
  if (addr) {
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d005      	beq.n	8011cae <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8011ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ca4:	f7fe f92d 	bl	800ff02 <lwip_htonl>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8011cae:	2301      	movs	r3, #1
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3728      	adds	r7, #40	; 0x28
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	08027bc5 	.word	0x08027bc5
 8011cbc:	080245d0 	.word	0x080245d0
 8011cc0:	08024628 	.word	0x08024628
 8011cc4:	08024634 	.word	0x08024634

08011cc8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011cd2:	4b12      	ldr	r3, [pc, #72]	; (8011d1c <ip_reass_tmr+0x54>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011cd8:	e018      	b.n	8011d0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	7fdb      	ldrb	r3, [r3, #31]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00b      	beq.n	8011cfa <ip_reass_tmr+0x32>
      r->timer--;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	7fdb      	ldrb	r3, [r3, #31]
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	e008      	b.n	8011d0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011d04:	68b9      	ldr	r1, [r7, #8]
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f80a 	bl	8011d20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d1e3      	bne.n	8011cda <ip_reass_tmr+0x12>
    }
  }
}
 8011d12:	bf00      	nop
 8011d14:	bf00      	nop
 8011d16:	3710      	adds	r7, #16
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	240406d0 	.word	0x240406d0

08011d20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b088      	sub	sp, #32
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011d2e:	683a      	ldr	r2, [r7, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d105      	bne.n	8011d42 <ip_reass_free_complete_datagram+0x22>
 8011d36:	4b45      	ldr	r3, [pc, #276]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011d38:	22ab      	movs	r2, #171	; 0xab
 8011d3a:	4945      	ldr	r1, [pc, #276]	; (8011e50 <ip_reass_free_complete_datagram+0x130>)
 8011d3c:	4845      	ldr	r0, [pc, #276]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011d3e:	f00f fa75 	bl	802122c <iprintf>
  if (prev != NULL) {
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d00a      	beq.n	8011d5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d005      	beq.n	8011d5e <ip_reass_free_complete_datagram+0x3e>
 8011d52:	4b3e      	ldr	r3, [pc, #248]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011d54:	22ad      	movs	r2, #173	; 0xad
 8011d56:	4940      	ldr	r1, [pc, #256]	; (8011e58 <ip_reass_free_complete_datagram+0x138>)
 8011d58:	483e      	ldr	r0, [pc, #248]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011d5a:	f00f fa67 	bl	802122c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	889b      	ldrh	r3, [r3, #4]
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d12a      	bne.n	8011dc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	6858      	ldr	r0, [r3, #4]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	3308      	adds	r3, #8
 8011d86:	2214      	movs	r2, #20
 8011d88:	4619      	mov	r1, r3
 8011d8a:	f00e fddd 	bl	8020948 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011d8e:	2101      	movs	r1, #1
 8011d90:	69b8      	ldr	r0, [r7, #24]
 8011d92:	f7ff fa3f 	bl	8011214 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011d96:	69b8      	ldr	r0, [r7, #24]
 8011d98:	f002 fad8 	bl	801434c <pbuf_clen>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011da0:	8bfa      	ldrh	r2, [r7, #30]
 8011da2:	8a7b      	ldrh	r3, [r7, #18]
 8011da4:	4413      	add	r3, r2
 8011da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011daa:	db05      	blt.n	8011db8 <ip_reass_free_complete_datagram+0x98>
 8011dac:	4b27      	ldr	r3, [pc, #156]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011dae:	22bc      	movs	r2, #188	; 0xbc
 8011db0:	492a      	ldr	r1, [pc, #168]	; (8011e5c <ip_reass_free_complete_datagram+0x13c>)
 8011db2:	4828      	ldr	r0, [pc, #160]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011db4:	f00f fa3a 	bl	802122c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011db8:	8bfa      	ldrh	r2, [r7, #30]
 8011dba:	8a7b      	ldrh	r3, [r7, #18]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011dc0:	69b8      	ldr	r0, [r7, #24]
 8011dc2:	f002 fa35 	bl	8014230 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011dcc:	e01f      	b.n	8011e0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f002 fab4 	bl	801434c <pbuf_clen>
 8011de4:	4603      	mov	r3, r0
 8011de6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011de8:	8bfa      	ldrh	r2, [r7, #30]
 8011dea:	8a7b      	ldrh	r3, [r7, #18]
 8011dec:	4413      	add	r3, r2
 8011dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011df2:	db05      	blt.n	8011e00 <ip_reass_free_complete_datagram+0xe0>
 8011df4:	4b15      	ldr	r3, [pc, #84]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011df6:	22cc      	movs	r2, #204	; 0xcc
 8011df8:	4918      	ldr	r1, [pc, #96]	; (8011e5c <ip_reass_free_complete_datagram+0x13c>)
 8011dfa:	4816      	ldr	r0, [pc, #88]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011dfc:	f00f fa16 	bl	802122c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e00:	8bfa      	ldrh	r2, [r7, #30]
 8011e02:	8a7b      	ldrh	r3, [r7, #18]
 8011e04:	4413      	add	r3, r2
 8011e06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	f002 fa11 	bl	8014230 <pbuf_free>
  while (p != NULL) {
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1dc      	bne.n	8011dce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 f8c2 	bl	8011fa0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011e1c:	4b10      	ldr	r3, [pc, #64]	; (8011e60 <ip_reass_free_complete_datagram+0x140>)
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	8bfa      	ldrh	r2, [r7, #30]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d905      	bls.n	8011e32 <ip_reass_free_complete_datagram+0x112>
 8011e26:	4b09      	ldr	r3, [pc, #36]	; (8011e4c <ip_reass_free_complete_datagram+0x12c>)
 8011e28:	22d2      	movs	r2, #210	; 0xd2
 8011e2a:	490e      	ldr	r1, [pc, #56]	; (8011e64 <ip_reass_free_complete_datagram+0x144>)
 8011e2c:	4809      	ldr	r0, [pc, #36]	; (8011e54 <ip_reass_free_complete_datagram+0x134>)
 8011e2e:	f00f f9fd 	bl	802122c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011e32:	4b0b      	ldr	r3, [pc, #44]	; (8011e60 <ip_reass_free_complete_datagram+0x140>)
 8011e34:	881a      	ldrh	r2, [r3, #0]
 8011e36:	8bfb      	ldrh	r3, [r7, #30]
 8011e38:	1ad3      	subs	r3, r2, r3
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	4b08      	ldr	r3, [pc, #32]	; (8011e60 <ip_reass_free_complete_datagram+0x140>)
 8011e3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011e40:	8bfb      	ldrh	r3, [r7, #30]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3720      	adds	r7, #32
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	0802465c 	.word	0x0802465c
 8011e50:	080246b4 	.word	0x080246b4
 8011e54:	080246c0 	.word	0x080246c0
 8011e58:	080246e8 	.word	0x080246e8
 8011e5c:	080246fc 	.word	0x080246fc
 8011e60:	240406d4 	.word	0x240406d4
 8011e64:	0802471c 	.word	0x0802471c

08011e68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b08a      	sub	sp, #40	; 0x28
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011e72:	2300      	movs	r3, #0
 8011e74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011e76:	2300      	movs	r3, #0
 8011e78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011e86:	4b28      	ldr	r3, [pc, #160]	; (8011f28 <ip_reass_remove_oldest_datagram+0xc0>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e8c:	e030      	b.n	8011ef0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e90:	695a      	ldr	r2, [r3, #20]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d10c      	bne.n	8011eb4 <ip_reass_remove_oldest_datagram+0x4c>
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	699a      	ldr	r2, [r3, #24]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d106      	bne.n	8011eb4 <ip_reass_remove_oldest_datagram+0x4c>
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea8:	899a      	ldrh	r2, [r3, #12]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	889b      	ldrh	r3, [r3, #4]
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d014      	beq.n	8011ede <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011eba:	6a3b      	ldr	r3, [r7, #32]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d104      	bne.n	8011eca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	61bb      	str	r3, [r7, #24]
 8011ec8:	e009      	b.n	8011ede <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	7fda      	ldrb	r2, [r3, #31]
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	7fdb      	ldrb	r3, [r3, #31]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d803      	bhi.n	8011ede <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d001      	beq.n	8011eea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1cb      	bne.n	8011e8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011ef6:	6a3b      	ldr	r3, [r7, #32]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d008      	beq.n	8011f0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011efc:	69b9      	ldr	r1, [r7, #24]
 8011efe:	6a38      	ldr	r0, [r7, #32]
 8011f00:	f7ff ff0e 	bl	8011d20 <ip_reass_free_complete_datagram>
 8011f04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011f06:	697a      	ldr	r2, [r7, #20]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	4413      	add	r3, r2
 8011f0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011f0e:	697a      	ldr	r2, [r7, #20]
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	da02      	bge.n	8011f1c <ip_reass_remove_oldest_datagram+0xb4>
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	dcac      	bgt.n	8011e76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011f1c:	697b      	ldr	r3, [r7, #20]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3728      	adds	r7, #40	; 0x28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	240406d0 	.word	0x240406d0

08011f2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f36:	2004      	movs	r0, #4
 8011f38:	f001 f99c 	bl	8013274 <memp_malloc>
 8011f3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d110      	bne.n	8011f66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011f44:	6839      	ldr	r1, [r7, #0]
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7ff ff8e 	bl	8011e68 <ip_reass_remove_oldest_datagram>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	4293      	cmp	r3, r2
 8011f52:	dc03      	bgt.n	8011f5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f54:	2004      	movs	r0, #4
 8011f56:	f001 f98d 	bl	8013274 <memp_malloc>
 8011f5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d101      	bne.n	8011f66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	e016      	b.n	8011f94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011f66:	2220      	movs	r2, #32
 8011f68:	2100      	movs	r1, #0
 8011f6a:	68f8      	ldr	r0, [r7, #12]
 8011f6c:	f00e fd14 	bl	8020998 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	220f      	movs	r2, #15
 8011f74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011f76:	4b09      	ldr	r3, [pc, #36]	; (8011f9c <ip_reass_enqueue_new_datagram+0x70>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011f7e:	4a07      	ldr	r2, [pc, #28]	; (8011f9c <ip_reass_enqueue_new_datagram+0x70>)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	3308      	adds	r3, #8
 8011f88:	2214      	movs	r2, #20
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f00e fcdb 	bl	8020948 <memcpy>
  return ipr;
 8011f92:	68fb      	ldr	r3, [r7, #12]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	240406d0 	.word	0x240406d0

08011fa0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011faa:	4b10      	ldr	r3, [pc, #64]	; (8011fec <ip_reass_dequeue_datagram+0x4c>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d104      	bne.n	8011fbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a0c      	ldr	r2, [pc, #48]	; (8011fec <ip_reass_dequeue_datagram+0x4c>)
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	e00d      	b.n	8011fda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d106      	bne.n	8011fd2 <ip_reass_dequeue_datagram+0x32>
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	; (8011ff0 <ip_reass_dequeue_datagram+0x50>)
 8011fc6:	f240 1245 	movw	r2, #325	; 0x145
 8011fca:	490a      	ldr	r1, [pc, #40]	; (8011ff4 <ip_reass_dequeue_datagram+0x54>)
 8011fcc:	480a      	ldr	r0, [pc, #40]	; (8011ff8 <ip_reass_dequeue_datagram+0x58>)
 8011fce:	f00f f92d 	bl	802122c <iprintf>
    prev->next = ipr->next;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	2004      	movs	r0, #4
 8011fde:	f001 f9bf 	bl	8013360 <memp_free>
}
 8011fe2:	bf00      	nop
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	240406d0 	.word	0x240406d0
 8011ff0:	0802465c 	.word	0x0802465c
 8011ff4:	08024740 	.word	0x08024740
 8011ff8:	080246c0 	.word	0x080246c0

08011ffc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08c      	sub	sp, #48	; 0x30
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012008:	2300      	movs	r3, #0
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801200c:	2301      	movs	r3, #1
 801200e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	885b      	ldrh	r3, [r3, #2]
 801201a:	b29b      	uxth	r3, r3
 801201c:	4618      	mov	r0, r3
 801201e:	f7fd ff5b 	bl	800fed8 <lwip_htons>
 8012022:	4603      	mov	r3, r0
 8012024:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	f003 030f 	and.w	r3, r3, #15
 801202e:	b2db      	uxtb	r3, r3
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012034:	7e7b      	ldrb	r3, [r7, #25]
 8012036:	b29b      	uxth	r3, r3
 8012038:	8b7a      	ldrh	r2, [r7, #26]
 801203a:	429a      	cmp	r2, r3
 801203c:	d202      	bcs.n	8012044 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801203e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012042:	e135      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012044:	7e7b      	ldrb	r3, [r7, #25]
 8012046:	b29b      	uxth	r3, r3
 8012048:	8b7a      	ldrh	r2, [r7, #26]
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	88db      	ldrh	r3, [r3, #6]
 8012052:	b29b      	uxth	r3, r3
 8012054:	4618      	mov	r0, r3
 8012056:	f7fd ff3f 	bl	800fed8 <lwip_htons>
 801205a:	4603      	mov	r3, r0
 801205c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012060:	b29b      	uxth	r3, r3
 8012062:	00db      	lsls	r3, r3, #3
 8012064:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	2200      	movs	r2, #0
 8012070:	701a      	strb	r2, [r3, #0]
 8012072:	2200      	movs	r2, #0
 8012074:	705a      	strb	r2, [r3, #1]
 8012076:	2200      	movs	r2, #0
 8012078:	709a      	strb	r2, [r3, #2]
 801207a:	2200      	movs	r2, #0
 801207c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012080:	8afa      	ldrh	r2, [r7, #22]
 8012082:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012084:	8afa      	ldrh	r2, [r7, #22]
 8012086:	8b7b      	ldrh	r3, [r7, #26]
 8012088:	4413      	add	r3, r2
 801208a:	b29a      	uxth	r2, r3
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012092:	88db      	ldrh	r3, [r3, #6]
 8012094:	b29b      	uxth	r3, r3
 8012096:	8afa      	ldrh	r2, [r7, #22]
 8012098:	429a      	cmp	r2, r3
 801209a:	d902      	bls.n	80120a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801209c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120a0:	e106      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	627b      	str	r3, [r7, #36]	; 0x24
 80120a8:	e068      	b.n	801217c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	889b      	ldrh	r3, [r3, #4]
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	889b      	ldrh	r3, [r3, #4]
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	429a      	cmp	r2, r3
 80120be:	d235      	bcs.n	801212c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80120c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d020      	beq.n	801210e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	889b      	ldrh	r3, [r3, #4]
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	88db      	ldrh	r3, [r3, #6]
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	429a      	cmp	r2, r3
 80120da:	d307      	bcc.n	80120ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80120dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120de:	88db      	ldrh	r3, [r3, #6]
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	889b      	ldrh	r3, [r3, #4]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d902      	bls.n	80120f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120f0:	e0de      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80120f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fa:	88db      	ldrh	r3, [r3, #6]
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012100:	889b      	ldrh	r3, [r3, #4]
 8012102:	b29b      	uxth	r3, r3
 8012104:	429a      	cmp	r2, r3
 8012106:	d03d      	beq.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801210c:	e03a      	b.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	88db      	ldrh	r3, [r3, #6]
 8012112:	b29a      	uxth	r2, r3
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	889b      	ldrh	r3, [r3, #4]
 8012118:	b29b      	uxth	r3, r3
 801211a:	429a      	cmp	r2, r3
 801211c:	d902      	bls.n	8012124 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801211e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012122:	e0c5      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	605a      	str	r2, [r3, #4]
      break;
 801212a:	e02b      	b.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212e:	889b      	ldrh	r3, [r3, #4]
 8012130:	b29a      	uxth	r2, r3
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	889b      	ldrh	r3, [r3, #4]
 8012136:	b29b      	uxth	r3, r3
 8012138:	429a      	cmp	r2, r3
 801213a:	d102      	bne.n	8012142 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801213c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012140:	e0b6      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012144:	889b      	ldrh	r3, [r3, #4]
 8012146:	b29a      	uxth	r2, r3
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	88db      	ldrh	r3, [r3, #6]
 801214c:	b29b      	uxth	r3, r3
 801214e:	429a      	cmp	r2, r3
 8012150:	d202      	bcs.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012156:	e0ab      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215a:	2b00      	cmp	r3, #0
 801215c:	d009      	beq.n	8012172 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	88db      	ldrh	r3, [r3, #6]
 8012162:	b29a      	uxth	r2, r3
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	889b      	ldrh	r3, [r3, #4]
 8012168:	b29b      	uxth	r3, r3
 801216a:	429a      	cmp	r2, r3
 801216c:	d001      	beq.n	8012172 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801216e:	2300      	movs	r3, #0
 8012170:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217e:	2b00      	cmp	r3, #0
 8012180:	d193      	bne.n	80120aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012182:	e000      	b.n	8012186 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012184:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	2b00      	cmp	r3, #0
 801218a:	d12d      	bne.n	80121e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	2b00      	cmp	r3, #0
 8012190:	d01c      	beq.n	80121cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012194:	88db      	ldrh	r3, [r3, #6]
 8012196:	b29a      	uxth	r2, r3
 8012198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219a:	889b      	ldrh	r3, [r3, #4]
 801219c:	b29b      	uxth	r3, r3
 801219e:	429a      	cmp	r2, r3
 80121a0:	d906      	bls.n	80121b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80121a2:	4b45      	ldr	r3, [pc, #276]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80121a8:	4944      	ldr	r1, [pc, #272]	; (80122bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80121aa:	4845      	ldr	r0, [pc, #276]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121ac:	f00f f83e 	bl	802122c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80121b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b8:	88db      	ldrh	r3, [r3, #6]
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121be:	889b      	ldrh	r3, [r3, #4]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d010      	beq.n	80121e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80121c6:	2300      	movs	r3, #0
 80121c8:	623b      	str	r3, [r7, #32]
 80121ca:	e00d      	b.n	80121e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d006      	beq.n	80121e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80121d4:	4b38      	ldr	r3, [pc, #224]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80121da:	493a      	ldr	r1, [pc, #232]	; (80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80121dc:	4838      	ldr	r0, [pc, #224]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121de:	f00f f825 	bl	802122c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d105      	bne.n	80121fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	7f9b      	ldrb	r3, [r3, #30]
 80121f2:	f003 0301 	and.w	r3, r3, #1
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d059      	beq.n	80122ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80121fa:	6a3b      	ldr	r3, [r7, #32]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d04f      	beq.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d006      	beq.n	8012216 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	889b      	ldrh	r3, [r3, #4]
 8012210:	b29b      	uxth	r3, r3
 8012212:	2b00      	cmp	r3, #0
 8012214:	d002      	beq.n	801221c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	623b      	str	r3, [r7, #32]
 801221a:	e041      	b.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012226:	e012      	b.n	801224e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	88db      	ldrh	r3, [r3, #6]
 8012232:	b29a      	uxth	r2, r3
 8012234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012236:	889b      	ldrh	r3, [r3, #4]
 8012238:	b29b      	uxth	r3, r3
 801223a:	429a      	cmp	r2, r3
 801223c:	d002      	beq.n	8012244 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	623b      	str	r3, [r7, #32]
            break;
 8012242:	e007      	b.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012246:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1e9      	bne.n	8012228 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d022      	beq.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d106      	bne.n	8012270 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012262:	4b15      	ldr	r3, [pc, #84]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012264:	f240 12df 	movw	r2, #479	; 0x1df
 8012268:	4917      	ldr	r1, [pc, #92]	; (80122c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801226a:	4815      	ldr	r0, [pc, #84]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801226c:	f00e ffde 	bl	802122c <iprintf>
          LWIP_ASSERT("sanity check",
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012278:	429a      	cmp	r2, r3
 801227a:	d106      	bne.n	801228a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801227c:	4b0e      	ldr	r3, [pc, #56]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801227e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012282:	4911      	ldr	r1, [pc, #68]	; (80122c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012284:	480e      	ldr	r0, [pc, #56]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012286:	f00e ffd1 	bl	802122c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d006      	beq.n	80122a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012292:	4b09      	ldr	r3, [pc, #36]	; (80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012294:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012298:	490c      	ldr	r1, [pc, #48]	; (80122cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801229a:	4809      	ldr	r0, [pc, #36]	; (80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801229c:	f00e ffc6 	bl	802122c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80122a0:	6a3b      	ldr	r3, [r7, #32]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	bf14      	ite	ne
 80122a6:	2301      	movne	r3, #1
 80122a8:	2300      	moveq	r3, #0
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	e000      	b.n	80122b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80122ae:	2300      	movs	r3, #0
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3730      	adds	r7, #48	; 0x30
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	0802465c 	.word	0x0802465c
 80122bc:	0802475c 	.word	0x0802475c
 80122c0:	080246c0 	.word	0x080246c0
 80122c4:	0802477c 	.word	0x0802477c
 80122c8:	080247b4 	.word	0x080247b4
 80122cc:	080247c4 	.word	0x080247c4

080122d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08e      	sub	sp, #56	; 0x38
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	f003 030f 	and.w	r3, r3, #15
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	2b14      	cmp	r3, #20
 80122ee:	f040 8167 	bne.w	80125c0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80122f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f4:	88db      	ldrh	r3, [r3, #6]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fd fded 	bl	800fed8 <lwip_htons>
 80122fe:	4603      	mov	r3, r0
 8012300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012304:	b29b      	uxth	r3, r3
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230c:	885b      	ldrh	r3, [r3, #2]
 801230e:	b29b      	uxth	r3, r3
 8012310:	4618      	mov	r0, r3
 8012312:	f7fd fde1 	bl	800fed8 <lwip_htons>
 8012316:	4603      	mov	r3, r0
 8012318:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	f003 030f 	and.w	r3, r3, #15
 8012322:	b2db      	uxtb	r3, r3
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801232a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801232e:	b29b      	uxth	r3, r3
 8012330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012332:	429a      	cmp	r2, r3
 8012334:	f0c0 8146 	bcc.w	80125c4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801233c:	b29b      	uxth	r3, r3
 801233e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012340:	1ad3      	subs	r3, r2, r3
 8012342:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f002 f801 	bl	801434c <pbuf_clen>
 801234a:	4603      	mov	r3, r0
 801234c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801234e:	4b9f      	ldr	r3, [pc, #636]	; (80125cc <ip4_reass+0x2fc>)
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	8c3b      	ldrh	r3, [r7, #32]
 8012356:	4413      	add	r3, r2
 8012358:	2b0a      	cmp	r3, #10
 801235a:	dd10      	ble.n	801237e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801235c:	8c3b      	ldrh	r3, [r7, #32]
 801235e:	4619      	mov	r1, r3
 8012360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012362:	f7ff fd81 	bl	8011e68 <ip_reass_remove_oldest_datagram>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 812d 	beq.w	80125c8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801236e:	4b97      	ldr	r3, [pc, #604]	; (80125cc <ip4_reass+0x2fc>)
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	461a      	mov	r2, r3
 8012374:	8c3b      	ldrh	r3, [r7, #32]
 8012376:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012378:	2b0a      	cmp	r3, #10
 801237a:	f300 8125 	bgt.w	80125c8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801237e:	4b94      	ldr	r3, [pc, #592]	; (80125d0 <ip4_reass+0x300>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	633b      	str	r3, [r7, #48]	; 0x30
 8012384:	e015      	b.n	80123b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	695a      	ldr	r2, [r3, #20]
 801238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	429a      	cmp	r2, r3
 8012390:	d10c      	bne.n	80123ac <ip4_reass+0xdc>
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	699a      	ldr	r2, [r3, #24]
 8012396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012398:	691b      	ldr	r3, [r3, #16]
 801239a:	429a      	cmp	r2, r3
 801239c:	d106      	bne.n	80123ac <ip4_reass+0xdc>
 801239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a0:	899a      	ldrh	r2, [r3, #12]
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	889b      	ldrh	r3, [r3, #4]
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d006      	beq.n	80123ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	633b      	str	r3, [r7, #48]	; 0x30
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d1e6      	bne.n	8012386 <ip4_reass+0xb6>
 80123b8:	e000      	b.n	80123bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80123ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80123bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d109      	bne.n	80123d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80123c2:	8c3b      	ldrh	r3, [r7, #32]
 80123c4:	4619      	mov	r1, r3
 80123c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123c8:	f7ff fdb0 	bl	8011f2c <ip_reass_enqueue_new_datagram>
 80123cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d11c      	bne.n	801240e <ip4_reass+0x13e>
      goto nullreturn;
 80123d4:	e109      	b.n	80125ea <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d8:	88db      	ldrh	r3, [r3, #6]
 80123da:	b29b      	uxth	r3, r3
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fd fd7b 	bl	800fed8 <lwip_htons>
 80123e2:	4603      	mov	r3, r0
 80123e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d110      	bne.n	801240e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80123ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ee:	89db      	ldrh	r3, [r3, #14]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fd fd71 	bl	800fed8 <lwip_htons>
 80123f6:	4603      	mov	r3, r0
 80123f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d006      	beq.n	801240e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012402:	3308      	adds	r3, #8
 8012404:	2214      	movs	r2, #20
 8012406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012408:	4618      	mov	r0, r3
 801240a:	f00e fa9d 	bl	8020948 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	88db      	ldrh	r3, [r3, #6]
 8012412:	b29b      	uxth	r3, r3
 8012414:	f003 0320 	and.w	r3, r3, #32
 8012418:	2b00      	cmp	r3, #0
 801241a:	bf0c      	ite	eq
 801241c:	2301      	moveq	r3, #1
 801241e:	2300      	movne	r3, #0
 8012420:	b2db      	uxtb	r3, r3
 8012422:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00e      	beq.n	8012448 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801242a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801242c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801242e:	4413      	add	r3, r2
 8012430:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012432:	8b7a      	ldrh	r2, [r7, #26]
 8012434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012436:	429a      	cmp	r2, r3
 8012438:	f0c0 80a0 	bcc.w	801257c <ip4_reass+0x2ac>
 801243c:	8b7b      	ldrh	r3, [r7, #26]
 801243e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012442:	4293      	cmp	r3, r2
 8012444:	f200 809a 	bhi.w	801257c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012448:	69fa      	ldr	r2, [r7, #28]
 801244a:	6879      	ldr	r1, [r7, #4]
 801244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801244e:	f7ff fdd5 	bl	8011ffc <ip_reass_chain_frag_into_datagram_and_validate>
 8012452:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801245a:	f000 8091 	beq.w	8012580 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801245e:	4b5b      	ldr	r3, [pc, #364]	; (80125cc <ip4_reass+0x2fc>)
 8012460:	881a      	ldrh	r2, [r3, #0]
 8012462:	8c3b      	ldrh	r3, [r7, #32]
 8012464:	4413      	add	r3, r2
 8012466:	b29a      	uxth	r2, r3
 8012468:	4b58      	ldr	r3, [pc, #352]	; (80125cc <ip4_reass+0x2fc>)
 801246a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00d      	beq.n	801248e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012476:	4413      	add	r3, r2
 8012478:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	8a7a      	ldrh	r2, [r7, #18]
 801247e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	7f9b      	ldrb	r3, [r3, #30]
 8012484:	f043 0301 	orr.w	r3, r3, #1
 8012488:	b2da      	uxtb	r2, r3
 801248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d171      	bne.n	8012578 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012496:	8b9b      	ldrh	r3, [r3, #28]
 8012498:	3314      	adds	r3, #20
 801249a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	3308      	adds	r3, #8
 80124b2:	2214      	movs	r2, #20
 80124b4:	4619      	mov	r1, r3
 80124b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124b8:	f00e fa46 	bl	8020948 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80124bc:	8a3b      	ldrh	r3, [r7, #16]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fd fd0a 	bl	800fed8 <lwip_htons>
 80124c4:	4603      	mov	r3, r0
 80124c6:	461a      	mov	r2, r3
 80124c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	2200      	movs	r2, #0
 80124d0:	719a      	strb	r2, [r3, #6]
 80124d2:	2200      	movs	r2, #0
 80124d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d8:	2200      	movs	r2, #0
 80124da:	729a      	strb	r2, [r3, #10]
 80124dc:	2200      	movs	r2, #0
 80124de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80124e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80124e6:	e00d      	b.n	8012504 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80124e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80124ee:	2114      	movs	r1, #20
 80124f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80124f2:	f001 fde5 	bl	80140c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80124f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f001 ff67 	bl	80143cc <pbuf_cat>
      r = iprh->next_pbuf;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1ee      	bne.n	80124e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801250a:	4b31      	ldr	r3, [pc, #196]	; (80125d0 <ip4_reass+0x300>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012510:	429a      	cmp	r2, r3
 8012512:	d102      	bne.n	801251a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012514:	2300      	movs	r3, #0
 8012516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012518:	e010      	b.n	801253c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801251a:	4b2d      	ldr	r3, [pc, #180]	; (80125d0 <ip4_reass+0x300>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012520:	e007      	b.n	8012532 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012528:	429a      	cmp	r2, r3
 801252a:	d006      	beq.n	801253a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1f4      	bne.n	8012522 <ip4_reass+0x252>
 8012538:	e000      	b.n	801253c <ip4_reass+0x26c>
          break;
 801253a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801253c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801253e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012540:	f7ff fd2e 	bl	8011fa0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f001 ff01 	bl	801434c <pbuf_clen>
 801254a:	4603      	mov	r3, r0
 801254c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801254e:	4b1f      	ldr	r3, [pc, #124]	; (80125cc <ip4_reass+0x2fc>)
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	8c3a      	ldrh	r2, [r7, #32]
 8012554:	429a      	cmp	r2, r3
 8012556:	d906      	bls.n	8012566 <ip4_reass+0x296>
 8012558:	4b1e      	ldr	r3, [pc, #120]	; (80125d4 <ip4_reass+0x304>)
 801255a:	f240 229b 	movw	r2, #667	; 0x29b
 801255e:	491e      	ldr	r1, [pc, #120]	; (80125d8 <ip4_reass+0x308>)
 8012560:	481e      	ldr	r0, [pc, #120]	; (80125dc <ip4_reass+0x30c>)
 8012562:	f00e fe63 	bl	802122c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012566:	4b19      	ldr	r3, [pc, #100]	; (80125cc <ip4_reass+0x2fc>)
 8012568:	881a      	ldrh	r2, [r3, #0]
 801256a:	8c3b      	ldrh	r3, [r7, #32]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	b29a      	uxth	r2, r3
 8012570:	4b16      	ldr	r3, [pc, #88]	; (80125cc <ip4_reass+0x2fc>)
 8012572:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	e03c      	b.n	80125f2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012578:	2300      	movs	r3, #0
 801257a:	e03a      	b.n	80125f2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801257c:	bf00      	nop
 801257e:	e000      	b.n	8012582 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012580:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	2b00      	cmp	r3, #0
 8012586:	d106      	bne.n	8012596 <ip4_reass+0x2c6>
 8012588:	4b12      	ldr	r3, [pc, #72]	; (80125d4 <ip4_reass+0x304>)
 801258a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801258e:	4914      	ldr	r1, [pc, #80]	; (80125e0 <ip4_reass+0x310>)
 8012590:	4812      	ldr	r0, [pc, #72]	; (80125dc <ip4_reass+0x30c>)
 8012592:	f00e fe4b 	bl	802122c <iprintf>
  if (ipr->p == NULL) {
 8012596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d124      	bne.n	80125e8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801259e:	4b0c      	ldr	r3, [pc, #48]	; (80125d0 <ip4_reass+0x300>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d006      	beq.n	80125b6 <ip4_reass+0x2e6>
 80125a8:	4b0a      	ldr	r3, [pc, #40]	; (80125d4 <ip4_reass+0x304>)
 80125aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80125ae:	490d      	ldr	r1, [pc, #52]	; (80125e4 <ip4_reass+0x314>)
 80125b0:	480a      	ldr	r0, [pc, #40]	; (80125dc <ip4_reass+0x30c>)
 80125b2:	f00e fe3b 	bl	802122c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80125b6:	2100      	movs	r1, #0
 80125b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125ba:	f7ff fcf1 	bl	8011fa0 <ip_reass_dequeue_datagram>
 80125be:	e014      	b.n	80125ea <ip4_reass+0x31a>
    goto nullreturn;
 80125c0:	bf00      	nop
 80125c2:	e012      	b.n	80125ea <ip4_reass+0x31a>
    goto nullreturn;
 80125c4:	bf00      	nop
 80125c6:	e010      	b.n	80125ea <ip4_reass+0x31a>
      goto nullreturn;
 80125c8:	bf00      	nop
 80125ca:	e00e      	b.n	80125ea <ip4_reass+0x31a>
 80125cc:	240406d4 	.word	0x240406d4
 80125d0:	240406d0 	.word	0x240406d0
 80125d4:	0802465c 	.word	0x0802465c
 80125d8:	080247e8 	.word	0x080247e8
 80125dc:	080246c0 	.word	0x080246c0
 80125e0:	08024804 	.word	0x08024804
 80125e4:	08024810 	.word	0x08024810
  }

nullreturn:
 80125e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f001 fe20 	bl	8014230 <pbuf_free>
  return NULL;
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3738      	adds	r7, #56	; 0x38
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop

080125fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012600:	2005      	movs	r0, #5
 8012602:	f000 fe37 	bl	8013274 <memp_malloc>
 8012606:	4603      	mov	r3, r0
}
 8012608:	4618      	mov	r0, r3
 801260a:	bd80      	pop	{r7, pc}

0801260c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <ip_frag_free_pbuf_custom_ref+0x1c>
 801261a:	4b07      	ldr	r3, [pc, #28]	; (8012638 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801261c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012620:	4906      	ldr	r1, [pc, #24]	; (801263c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012622:	4807      	ldr	r0, [pc, #28]	; (8012640 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012624:	f00e fe02 	bl	802122c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012628:	6879      	ldr	r1, [r7, #4]
 801262a:	2005      	movs	r0, #5
 801262c:	f000 fe98 	bl	8013360 <memp_free>
}
 8012630:	bf00      	nop
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	0802465c 	.word	0x0802465c
 801263c:	08024830 	.word	0x08024830
 8012640:	080246c0 	.word	0x080246c0

08012644 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d106      	bne.n	8012664 <ipfrag_free_pbuf_custom+0x20>
 8012656:	4b11      	ldr	r3, [pc, #68]	; (801269c <ipfrag_free_pbuf_custom+0x58>)
 8012658:	f240 22ce 	movw	r2, #718	; 0x2ce
 801265c:	4910      	ldr	r1, [pc, #64]	; (80126a0 <ipfrag_free_pbuf_custom+0x5c>)
 801265e:	4811      	ldr	r0, [pc, #68]	; (80126a4 <ipfrag_free_pbuf_custom+0x60>)
 8012660:	f00e fde4 	bl	802122c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	429a      	cmp	r2, r3
 801266a:	d006      	beq.n	801267a <ipfrag_free_pbuf_custom+0x36>
 801266c:	4b0b      	ldr	r3, [pc, #44]	; (801269c <ipfrag_free_pbuf_custom+0x58>)
 801266e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012672:	490d      	ldr	r1, [pc, #52]	; (80126a8 <ipfrag_free_pbuf_custom+0x64>)
 8012674:	480b      	ldr	r0, [pc, #44]	; (80126a4 <ipfrag_free_pbuf_custom+0x60>)
 8012676:	f00e fdd9 	bl	802122c <iprintf>
  if (pcr->original != NULL) {
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	695b      	ldr	r3, [r3, #20]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d004      	beq.n	801268c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	695b      	ldr	r3, [r3, #20]
 8012686:	4618      	mov	r0, r3
 8012688:	f001 fdd2 	bl	8014230 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801268c:	68f8      	ldr	r0, [r7, #12]
 801268e:	f7ff ffbd 	bl	801260c <ip_frag_free_pbuf_custom_ref>
}
 8012692:	bf00      	nop
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	0802465c 	.word	0x0802465c
 80126a0:	0802483c 	.word	0x0802483c
 80126a4:	080246c0 	.word	0x080246c0
 80126a8:	08024848 	.word	0x08024848

080126ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b094      	sub	sp, #80	; 0x50
 80126b0:	af02      	add	r7, sp, #8
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80126c2:	3b14      	subs	r3, #20
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	da00      	bge.n	80126ca <ip4_frag+0x1e>
 80126c8:	3307      	adds	r3, #7
 80126ca:	10db      	asrs	r3, r3, #3
 80126cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80126ce:	2314      	movs	r3, #20
 80126d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80126d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126da:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80126dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	f003 030f 	and.w	r3, r3, #15
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	2b14      	cmp	r3, #20
 80126ec:	d002      	beq.n	80126f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80126ee:	f06f 0305 	mvn.w	r3, #5
 80126f2:	e110      	b.n	8012916 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	895b      	ldrh	r3, [r3, #10]
 80126f8:	2b13      	cmp	r3, #19
 80126fa:	d809      	bhi.n	8012710 <ip4_frag+0x64>
 80126fc:	4b88      	ldr	r3, [pc, #544]	; (8012920 <ip4_frag+0x274>)
 80126fe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012702:	4988      	ldr	r1, [pc, #544]	; (8012924 <ip4_frag+0x278>)
 8012704:	4888      	ldr	r0, [pc, #544]	; (8012928 <ip4_frag+0x27c>)
 8012706:	f00e fd91 	bl	802122c <iprintf>
 801270a:	f06f 0305 	mvn.w	r3, #5
 801270e:	e102      	b.n	8012916 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012712:	88db      	ldrh	r3, [r3, #6]
 8012714:	b29b      	uxth	r3, r3
 8012716:	4618      	mov	r0, r3
 8012718:	f7fd fbde 	bl	800fed8 <lwip_htons>
 801271c:	4603      	mov	r3, r0
 801271e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012720:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012722:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012726:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801272a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801272c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012730:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	891b      	ldrh	r3, [r3, #8]
 8012736:	3b14      	subs	r3, #20
 8012738:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801273c:	e0e1      	b.n	8012902 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801273e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012740:	00db      	lsls	r3, r3, #3
 8012742:	b29b      	uxth	r3, r3
 8012744:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012748:	4293      	cmp	r3, r2
 801274a:	bf28      	it	cs
 801274c:	4613      	movcs	r3, r2
 801274e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012750:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012754:	2114      	movs	r1, #20
 8012756:	200e      	movs	r0, #14
 8012758:	f001 fa54 	bl	8013c04 <pbuf_alloc>
 801275c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 80d5 	beq.w	8012910 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	895b      	ldrh	r3, [r3, #10]
 801276a:	2b13      	cmp	r3, #19
 801276c:	d806      	bhi.n	801277c <ip4_frag+0xd0>
 801276e:	4b6c      	ldr	r3, [pc, #432]	; (8012920 <ip4_frag+0x274>)
 8012770:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012774:	496d      	ldr	r1, [pc, #436]	; (801292c <ip4_frag+0x280>)
 8012776:	486c      	ldr	r0, [pc, #432]	; (8012928 <ip4_frag+0x27c>)
 8012778:	f00e fd58 	bl	802122c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	2214      	movs	r2, #20
 8012782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012784:	4618      	mov	r0, r3
 8012786:	f00e f8df 	bl	8020948 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012790:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012792:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012796:	e064      	b.n	8012862 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	895a      	ldrh	r2, [r3, #10]
 801279c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	895b      	ldrh	r3, [r3, #10]
 80127a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d906      	bls.n	80127ba <ip4_frag+0x10e>
 80127ac:	4b5c      	ldr	r3, [pc, #368]	; (8012920 <ip4_frag+0x274>)
 80127ae:	f240 322d 	movw	r2, #813	; 0x32d
 80127b2:	495f      	ldr	r1, [pc, #380]	; (8012930 <ip4_frag+0x284>)
 80127b4:	485c      	ldr	r0, [pc, #368]	; (8012928 <ip4_frag+0x27c>)
 80127b6:	f00e fd39 	bl	802122c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80127ba:	8bfa      	ldrh	r2, [r7, #30]
 80127bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80127c0:	4293      	cmp	r3, r2
 80127c2:	bf28      	it	cs
 80127c4:	4613      	movcs	r3, r2
 80127c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80127ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d105      	bne.n	80127de <ip4_frag+0x132>
        poff = 0;
 80127d2:	2300      	movs	r3, #0
 80127d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	60fb      	str	r3, [r7, #12]
        continue;
 80127dc:	e041      	b.n	8012862 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80127de:	f7ff ff0d 	bl	80125fc <ip_frag_alloc_pbuf_custom_ref>
 80127e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80127e4:	69bb      	ldr	r3, [r7, #24]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d103      	bne.n	80127f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80127ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127ec:	f001 fd20 	bl	8014230 <pbuf_free>
        goto memerr;
 80127f0:	e08f      	b.n	8012912 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80127f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127fa:	4413      	add	r3, r2
 80127fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012800:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012804:	9201      	str	r2, [sp, #4]
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	4603      	mov	r3, r0
 801280a:	2241      	movs	r2, #65	; 0x41
 801280c:	2000      	movs	r0, #0
 801280e:	f001 fb23 	bl	8013e58 <pbuf_alloced_custom>
 8012812:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801281a:	69b8      	ldr	r0, [r7, #24]
 801281c:	f7ff fef6 	bl	801260c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012822:	f001 fd05 	bl	8014230 <pbuf_free>
        goto memerr;
 8012826:	e074      	b.n	8012912 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	f001 fda7 	bl	801437c <pbuf_ref>
      pcr->original = p;
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	4a3f      	ldr	r2, [pc, #252]	; (8012934 <ip4_frag+0x288>)
 8012838:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801283a:	6979      	ldr	r1, [r7, #20]
 801283c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801283e:	f001 fdc5 	bl	80143cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012842:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012846:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012850:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012854:	2b00      	cmp	r3, #0
 8012856:	d004      	beq.n	8012862 <ip4_frag+0x1b6>
        poff = 0;
 8012858:	2300      	movs	r3, #0
 801285a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012862:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012866:	2b00      	cmp	r3, #0
 8012868:	d196      	bne.n	8012798 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801286a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801286c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012870:	4413      	add	r3, r2
 8012872:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012878:	f1a3 0213 	sub.w	r2, r3, #19
 801287c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012880:	429a      	cmp	r2, r3
 8012882:	bfcc      	ite	gt
 8012884:	2301      	movgt	r3, #1
 8012886:	2300      	movle	r3, #0
 8012888:	b2db      	uxtb	r3, r3
 801288a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801288c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012894:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <ip4_frag+0x1f6>
 801289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d003      	beq.n	80128aa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80128a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80128a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80128aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fd fb13 	bl	800fed8 <lwip_htons>
 80128b2:	4603      	mov	r3, r0
 80128b4:	461a      	mov	r2, r3
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80128ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80128bc:	3314      	adds	r3, #20
 80128be:	b29b      	uxth	r3, r3
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7fd fb09 	bl	800fed8 <lwip_htons>
 80128c6:	4603      	mov	r3, r0
 80128c8:	461a      	mov	r2, r3
 80128ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80128ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d0:	2200      	movs	r2, #0
 80128d2:	729a      	strb	r2, [r3, #10]
 80128d4:	2200      	movs	r2, #0
 80128d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	695b      	ldr	r3, [r3, #20]
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128e0:	68b8      	ldr	r0, [r7, #8]
 80128e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80128e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128e6:	f001 fca3 	bl	8014230 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80128ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80128ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80128f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80128fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80128fc:	4413      	add	r3, r2
 80128fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012906:	2b00      	cmp	r3, #0
 8012908:	f47f af19 	bne.w	801273e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801290c:	2300      	movs	r3, #0
 801290e:	e002      	b.n	8012916 <ip4_frag+0x26a>
      goto memerr;
 8012910:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012916:	4618      	mov	r0, r3
 8012918:	3748      	adds	r7, #72	; 0x48
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	0802465c 	.word	0x0802465c
 8012924:	08024854 	.word	0x08024854
 8012928:	080246c0 	.word	0x080246c0
 801292c:	08024870 	.word	0x08024870
 8012930:	08024890 	.word	0x08024890
 8012934:	08012645 	.word	0x08012645

08012938 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	4603      	mov	r3, r0
 8012940:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012942:	4b05      	ldr	r3, [pc, #20]	; (8012958 <ptr_to_mem+0x20>)
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	88fb      	ldrh	r3, [r7, #6]
 8012948:	4413      	add	r3, r2
}
 801294a:	4618      	mov	r0, r3
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	240406d8 	.word	0x240406d8

0801295c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801295c:	b480      	push	{r7}
 801295e:	b083      	sub	sp, #12
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012964:	4b05      	ldr	r3, [pc, #20]	; (801297c <mem_to_ptr+0x20>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	1ad3      	subs	r3, r2, r3
 801296c:	b29b      	uxth	r3, r3
}
 801296e:	4618      	mov	r0, r3
 8012970:	370c      	adds	r7, #12
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	240406d8 	.word	0x240406d8

08012980 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012980:	b590      	push	{r4, r7, lr}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012988:	4b47      	ldr	r3, [pc, #284]	; (8012aa8 <plug_holes+0x128>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	429a      	cmp	r2, r3
 8012990:	d206      	bcs.n	80129a0 <plug_holes+0x20>
 8012992:	4b46      	ldr	r3, [pc, #280]	; (8012aac <plug_holes+0x12c>)
 8012994:	f240 12df 	movw	r2, #479	; 0x1df
 8012998:	4945      	ldr	r1, [pc, #276]	; (8012ab0 <plug_holes+0x130>)
 801299a:	4846      	ldr	r0, [pc, #280]	; (8012ab4 <plug_holes+0x134>)
 801299c:	f00e fc46 	bl	802122c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80129a0:	4b45      	ldr	r3, [pc, #276]	; (8012ab8 <plug_holes+0x138>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d306      	bcc.n	80129b8 <plug_holes+0x38>
 80129aa:	4b40      	ldr	r3, [pc, #256]	; (8012aac <plug_holes+0x12c>)
 80129ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80129b0:	4942      	ldr	r1, [pc, #264]	; (8012abc <plug_holes+0x13c>)
 80129b2:	4840      	ldr	r0, [pc, #256]	; (8012ab4 <plug_holes+0x134>)
 80129b4:	f00e fc3a 	bl	802122c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	791b      	ldrb	r3, [r3, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d006      	beq.n	80129ce <plug_holes+0x4e>
 80129c0:	4b3a      	ldr	r3, [pc, #232]	; (8012aac <plug_holes+0x12c>)
 80129c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80129c6:	493e      	ldr	r1, [pc, #248]	; (8012ac0 <plug_holes+0x140>)
 80129c8:	483a      	ldr	r0, [pc, #232]	; (8012ab4 <plug_holes+0x134>)
 80129ca:	f00e fc2f 	bl	802122c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	881b      	ldrh	r3, [r3, #0]
 80129d2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d906      	bls.n	80129e8 <plug_holes+0x68>
 80129da:	4b34      	ldr	r3, [pc, #208]	; (8012aac <plug_holes+0x12c>)
 80129dc:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80129e0:	4938      	ldr	r1, [pc, #224]	; (8012ac4 <plug_holes+0x144>)
 80129e2:	4834      	ldr	r0, [pc, #208]	; (8012ab4 <plug_holes+0x134>)
 80129e4:	f00e fc22 	bl	802122c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	881b      	ldrh	r3, [r3, #0]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7ff ffa3 	bl	8012938 <ptr_to_mem>
 80129f2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d025      	beq.n	8012a48 <plug_holes+0xc8>
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	791b      	ldrb	r3, [r3, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d121      	bne.n	8012a48 <plug_holes+0xc8>
 8012a04:	4b2c      	ldr	r3, [pc, #176]	; (8012ab8 <plug_holes+0x138>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d01c      	beq.n	8012a48 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012a0e:	4b2e      	ldr	r3, [pc, #184]	; (8012ac8 <plug_holes+0x148>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	68fa      	ldr	r2, [r7, #12]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d102      	bne.n	8012a1e <plug_holes+0x9e>
      lfree = mem;
 8012a18:	4a2b      	ldr	r2, [pc, #172]	; (8012ac8 <plug_holes+0x148>)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	881a      	ldrh	r2, [r3, #0]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	d00a      	beq.n	8012a48 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7ff ff7e 	bl	8012938 <ptr_to_mem>
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff ff8c 	bl	801295c <mem_to_ptr>
 8012a44:	4603      	mov	r3, r0
 8012a46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	885b      	ldrh	r3, [r3, #2]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7ff ff73 	bl	8012938 <ptr_to_mem>
 8012a52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012a54:	68ba      	ldr	r2, [r7, #8]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d020      	beq.n	8012a9e <plug_holes+0x11e>
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	791b      	ldrb	r3, [r3, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d11c      	bne.n	8012a9e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012a64:	4b18      	ldr	r3, [pc, #96]	; (8012ac8 <plug_holes+0x148>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d102      	bne.n	8012a74 <plug_holes+0xf4>
      lfree = pmem;
 8012a6e:	4a16      	ldr	r2, [pc, #88]	; (8012ac8 <plug_holes+0x148>)
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	881a      	ldrh	r2, [r3, #0]
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	881b      	ldrh	r3, [r3, #0]
 8012a80:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012a84:	4293      	cmp	r3, r2
 8012a86:	d00a      	beq.n	8012a9e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	881b      	ldrh	r3, [r3, #0]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7ff ff53 	bl	8012938 <ptr_to_mem>
 8012a92:	4604      	mov	r4, r0
 8012a94:	68b8      	ldr	r0, [r7, #8]
 8012a96:	f7ff ff61 	bl	801295c <mem_to_ptr>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012a9e:	bf00      	nop
 8012aa0:	3714      	adds	r7, #20
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd90      	pop	{r4, r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	240406d8 	.word	0x240406d8
 8012aac:	080248a0 	.word	0x080248a0
 8012ab0:	080248ec 	.word	0x080248ec
 8012ab4:	08024904 	.word	0x08024904
 8012ab8:	240406dc 	.word	0x240406dc
 8012abc:	0802492c 	.word	0x0802492c
 8012ac0:	08024948 	.word	0x08024948
 8012ac4:	08024964 	.word	0x08024964
 8012ac8:	240406e4 	.word	0x240406e4

08012acc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012ad2:	4b1d      	ldr	r3, [pc, #116]	; (8012b48 <mem_init+0x7c>)
 8012ad4:	4a1d      	ldr	r2, [pc, #116]	; (8012b4c <mem_init+0x80>)
 8012ad6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012ad8:	4b1b      	ldr	r3, [pc, #108]	; (8012b48 <mem_init+0x7c>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012ae4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2200      	movs	r2, #0
 8012af0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012af2:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8012af6:	f7ff ff1f 	bl	8012938 <ptr_to_mem>
 8012afa:	4603      	mov	r3, r0
 8012afc:	4a14      	ldr	r2, [pc, #80]	; (8012b50 <mem_init+0x84>)
 8012afe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012b00:	4b13      	ldr	r3, [pc, #76]	; (8012b50 <mem_init+0x84>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2201      	movs	r2, #1
 8012b06:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012b08:	4b11      	ldr	r3, [pc, #68]	; (8012b50 <mem_init+0x84>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012b10:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012b12:	4b0f      	ldr	r3, [pc, #60]	; (8012b50 <mem_init+0x84>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012b1a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012b1c:	4b0a      	ldr	r3, [pc, #40]	; (8012b48 <mem_init+0x7c>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4a0c      	ldr	r2, [pc, #48]	; (8012b54 <mem_init+0x88>)
 8012b22:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012b24:	480c      	ldr	r0, [pc, #48]	; (8012b58 <mem_init+0x8c>)
 8012b26:	f003 f873 	bl	8015c10 <sys_mutex_new>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d006      	beq.n	8012b3e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012b30:	4b0a      	ldr	r3, [pc, #40]	; (8012b5c <mem_init+0x90>)
 8012b32:	f240 221f 	movw	r2, #543	; 0x21f
 8012b36:	490a      	ldr	r1, [pc, #40]	; (8012b60 <mem_init+0x94>)
 8012b38:	480a      	ldr	r0, [pc, #40]	; (8012b64 <mem_init+0x98>)
 8012b3a:	f00e fb77 	bl	802122c <iprintf>
  }
}
 8012b3e:	bf00      	nop
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	240406d8 	.word	0x240406d8
 8012b4c:	30044000 	.word	0x30044000
 8012b50:	240406dc 	.word	0x240406dc
 8012b54:	240406e4 	.word	0x240406e4
 8012b58:	240406e0 	.word	0x240406e0
 8012b5c:	080248a0 	.word	0x080248a0
 8012b60:	08024990 	.word	0x08024990
 8012b64:	08024904 	.word	0x08024904

08012b68 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7ff fef3 	bl	801295c <mem_to_ptr>
 8012b76:	4603      	mov	r3, r0
 8012b78:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	881b      	ldrh	r3, [r3, #0]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7ff feda 	bl	8012938 <ptr_to_mem>
 8012b84:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	885b      	ldrh	r3, [r3, #2]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7ff fed4 	bl	8012938 <ptr_to_mem>
 8012b90:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	d819      	bhi.n	8012bd2 <mem_link_valid+0x6a>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	885b      	ldrh	r3, [r3, #2]
 8012ba2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d813      	bhi.n	8012bd2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012bae:	8afa      	ldrh	r2, [r7, #22]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d004      	beq.n	8012bbe <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	881b      	ldrh	r3, [r3, #0]
 8012bb8:	8afa      	ldrh	r2, [r7, #22]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d109      	bne.n	8012bd2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012bbe:	4b08      	ldr	r3, [pc, #32]	; (8012be0 <mem_link_valid+0x78>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012bc2:	693a      	ldr	r2, [r7, #16]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d006      	beq.n	8012bd6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	885b      	ldrh	r3, [r3, #2]
 8012bcc:	8afa      	ldrh	r2, [r7, #22]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d001      	beq.n	8012bd6 <mem_link_valid+0x6e>
    return 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e000      	b.n	8012bd8 <mem_link_valid+0x70>
  }
  return 1;
 8012bd6:	2301      	movs	r3, #1
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	240406dc 	.word	0x240406dc

08012be4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b088      	sub	sp, #32
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d070      	beq.n	8012cd4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f003 0303 	and.w	r3, r3, #3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d00d      	beq.n	8012c18 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012bfc:	4b37      	ldr	r3, [pc, #220]	; (8012cdc <mem_free+0xf8>)
 8012bfe:	f240 2273 	movw	r2, #627	; 0x273
 8012c02:	4937      	ldr	r1, [pc, #220]	; (8012ce0 <mem_free+0xfc>)
 8012c04:	4837      	ldr	r0, [pc, #220]	; (8012ce4 <mem_free+0x100>)
 8012c06:	f00e fb11 	bl	802122c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c0a:	f003 f85f 	bl	8015ccc <sys_arch_protect>
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	68f8      	ldr	r0, [r7, #12]
 8012c12:	f003 f869 	bl	8015ce8 <sys_arch_unprotect>
    return;
 8012c16:	e05e      	b.n	8012cd6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3b08      	subs	r3, #8
 8012c1c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012c1e:	4b32      	ldr	r3, [pc, #200]	; (8012ce8 <mem_free+0x104>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	69fa      	ldr	r2, [r7, #28]
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d306      	bcc.n	8012c36 <mem_free+0x52>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f103 020c 	add.w	r2, r3, #12
 8012c2e:	4b2f      	ldr	r3, [pc, #188]	; (8012cec <mem_free+0x108>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d90d      	bls.n	8012c52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012c36:	4b29      	ldr	r3, [pc, #164]	; (8012cdc <mem_free+0xf8>)
 8012c38:	f240 227f 	movw	r2, #639	; 0x27f
 8012c3c:	492c      	ldr	r1, [pc, #176]	; (8012cf0 <mem_free+0x10c>)
 8012c3e:	4829      	ldr	r0, [pc, #164]	; (8012ce4 <mem_free+0x100>)
 8012c40:	f00e faf4 	bl	802122c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c44:	f003 f842 	bl	8015ccc <sys_arch_protect>
 8012c48:	6138      	str	r0, [r7, #16]
 8012c4a:	6938      	ldr	r0, [r7, #16]
 8012c4c:	f003 f84c 	bl	8015ce8 <sys_arch_unprotect>
    return;
 8012c50:	e041      	b.n	8012cd6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012c52:	4828      	ldr	r0, [pc, #160]	; (8012cf4 <mem_free+0x110>)
 8012c54:	f002 fff8 	bl	8015c48 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012c58:	69fb      	ldr	r3, [r7, #28]
 8012c5a:	791b      	ldrb	r3, [r3, #4]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d110      	bne.n	8012c82 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012c60:	4b1e      	ldr	r3, [pc, #120]	; (8012cdc <mem_free+0xf8>)
 8012c62:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012c66:	4924      	ldr	r1, [pc, #144]	; (8012cf8 <mem_free+0x114>)
 8012c68:	481e      	ldr	r0, [pc, #120]	; (8012ce4 <mem_free+0x100>)
 8012c6a:	f00e fadf 	bl	802122c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012c6e:	4821      	ldr	r0, [pc, #132]	; (8012cf4 <mem_free+0x110>)
 8012c70:	f002 fff9 	bl	8015c66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c74:	f003 f82a 	bl	8015ccc <sys_arch_protect>
 8012c78:	6178      	str	r0, [r7, #20]
 8012c7a:	6978      	ldr	r0, [r7, #20]
 8012c7c:	f003 f834 	bl	8015ce8 <sys_arch_unprotect>
    return;
 8012c80:	e029      	b.n	8012cd6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012c82:	69f8      	ldr	r0, [r7, #28]
 8012c84:	f7ff ff70 	bl	8012b68 <mem_link_valid>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d110      	bne.n	8012cb0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012c8e:	4b13      	ldr	r3, [pc, #76]	; (8012cdc <mem_free+0xf8>)
 8012c90:	f240 2295 	movw	r2, #661	; 0x295
 8012c94:	4919      	ldr	r1, [pc, #100]	; (8012cfc <mem_free+0x118>)
 8012c96:	4813      	ldr	r0, [pc, #76]	; (8012ce4 <mem_free+0x100>)
 8012c98:	f00e fac8 	bl	802122c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012c9c:	4815      	ldr	r0, [pc, #84]	; (8012cf4 <mem_free+0x110>)
 8012c9e:	f002 ffe2 	bl	8015c66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012ca2:	f003 f813 	bl	8015ccc <sys_arch_protect>
 8012ca6:	61b8      	str	r0, [r7, #24]
 8012ca8:	69b8      	ldr	r0, [r7, #24]
 8012caa:	f003 f81d 	bl	8015ce8 <sys_arch_unprotect>
    return;
 8012cae:	e012      	b.n	8012cd6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012cb6:	4b12      	ldr	r3, [pc, #72]	; (8012d00 <mem_free+0x11c>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	69fa      	ldr	r2, [r7, #28]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d202      	bcs.n	8012cc6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012cc0:	4a0f      	ldr	r2, [pc, #60]	; (8012d00 <mem_free+0x11c>)
 8012cc2:	69fb      	ldr	r3, [r7, #28]
 8012cc4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012cc6:	69f8      	ldr	r0, [r7, #28]
 8012cc8:	f7ff fe5a 	bl	8012980 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012ccc:	4809      	ldr	r0, [pc, #36]	; (8012cf4 <mem_free+0x110>)
 8012cce:	f002 ffca 	bl	8015c66 <sys_mutex_unlock>
 8012cd2:	e000      	b.n	8012cd6 <mem_free+0xf2>
    return;
 8012cd4:	bf00      	nop
}
 8012cd6:	3720      	adds	r7, #32
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	080248a0 	.word	0x080248a0
 8012ce0:	080249ac 	.word	0x080249ac
 8012ce4:	08024904 	.word	0x08024904
 8012ce8:	240406d8 	.word	0x240406d8
 8012cec:	240406dc 	.word	0x240406dc
 8012cf0:	080249d0 	.word	0x080249d0
 8012cf4:	240406e0 	.word	0x240406e0
 8012cf8:	080249ec 	.word	0x080249ec
 8012cfc:	08024a14 	.word	0x08024a14
 8012d00:	240406e4 	.word	0x240406e4

08012d04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b088      	sub	sp, #32
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012d10:	887b      	ldrh	r3, [r7, #2]
 8012d12:	3303      	adds	r3, #3
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	f023 0303 	bic.w	r3, r3, #3
 8012d1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012d1c:	8bfb      	ldrh	r3, [r7, #30]
 8012d1e:	2b0b      	cmp	r3, #11
 8012d20:	d801      	bhi.n	8012d26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012d22:	230c      	movs	r3, #12
 8012d24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012d26:	8bfb      	ldrh	r3, [r7, #30]
 8012d28:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d803      	bhi.n	8012d38 <mem_trim+0x34>
 8012d30:	8bfa      	ldrh	r2, [r7, #30]
 8012d32:	887b      	ldrh	r3, [r7, #2]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d201      	bcs.n	8012d3c <mem_trim+0x38>
    return NULL;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e0dc      	b.n	8012ef6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012d3c:	4b70      	ldr	r3, [pc, #448]	; (8012f00 <mem_trim+0x1fc>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d304      	bcc.n	8012d50 <mem_trim+0x4c>
 8012d46:	4b6f      	ldr	r3, [pc, #444]	; (8012f04 <mem_trim+0x200>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d306      	bcc.n	8012d5e <mem_trim+0x5a>
 8012d50:	4b6d      	ldr	r3, [pc, #436]	; (8012f08 <mem_trim+0x204>)
 8012d52:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012d56:	496d      	ldr	r1, [pc, #436]	; (8012f0c <mem_trim+0x208>)
 8012d58:	486d      	ldr	r0, [pc, #436]	; (8012f10 <mem_trim+0x20c>)
 8012d5a:	f00e fa67 	bl	802122c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012d5e:	4b68      	ldr	r3, [pc, #416]	; (8012f00 <mem_trim+0x1fc>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	687a      	ldr	r2, [r7, #4]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d304      	bcc.n	8012d72 <mem_trim+0x6e>
 8012d68:	4b66      	ldr	r3, [pc, #408]	; (8012f04 <mem_trim+0x200>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d307      	bcc.n	8012d82 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d72:	f002 ffab 	bl	8015ccc <sys_arch_protect>
 8012d76:	60b8      	str	r0, [r7, #8]
 8012d78:	68b8      	ldr	r0, [r7, #8]
 8012d7a:	f002 ffb5 	bl	8015ce8 <sys_arch_unprotect>
    return rmem;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	e0b9      	b.n	8012ef6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	3b08      	subs	r3, #8
 8012d86:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012d88:	69b8      	ldr	r0, [r7, #24]
 8012d8a:	f7ff fde7 	bl	801295c <mem_to_ptr>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012d92:	69bb      	ldr	r3, [r7, #24]
 8012d94:	881a      	ldrh	r2, [r3, #0]
 8012d96:	8afb      	ldrh	r3, [r7, #22]
 8012d98:	1ad3      	subs	r3, r2, r3
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	3b08      	subs	r3, #8
 8012d9e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012da0:	8bfa      	ldrh	r2, [r7, #30]
 8012da2:	8abb      	ldrh	r3, [r7, #20]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d906      	bls.n	8012db6 <mem_trim+0xb2>
 8012da8:	4b57      	ldr	r3, [pc, #348]	; (8012f08 <mem_trim+0x204>)
 8012daa:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012dae:	4959      	ldr	r1, [pc, #356]	; (8012f14 <mem_trim+0x210>)
 8012db0:	4857      	ldr	r0, [pc, #348]	; (8012f10 <mem_trim+0x20c>)
 8012db2:	f00e fa3b 	bl	802122c <iprintf>
  if (newsize > size) {
 8012db6:	8bfa      	ldrh	r2, [r7, #30]
 8012db8:	8abb      	ldrh	r3, [r7, #20]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d901      	bls.n	8012dc2 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	e099      	b.n	8012ef6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8012dc2:	8bfa      	ldrh	r2, [r7, #30]
 8012dc4:	8abb      	ldrh	r3, [r7, #20]
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d101      	bne.n	8012dce <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	e093      	b.n	8012ef6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012dce:	4852      	ldr	r0, [pc, #328]	; (8012f18 <mem_trim+0x214>)
 8012dd0:	f002 ff3a 	bl	8015c48 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7ff fdad 	bl	8012938 <ptr_to_mem>
 8012dde:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	791b      	ldrb	r3, [r3, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d141      	bne.n	8012e6c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	881b      	ldrh	r3, [r3, #0]
 8012dec:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d106      	bne.n	8012e02 <mem_trim+0xfe>
 8012df4:	4b44      	ldr	r3, [pc, #272]	; (8012f08 <mem_trim+0x204>)
 8012df6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012dfa:	4948      	ldr	r1, [pc, #288]	; (8012f1c <mem_trim+0x218>)
 8012dfc:	4844      	ldr	r0, [pc, #272]	; (8012f10 <mem_trim+0x20c>)
 8012dfe:	f00e fa15 	bl	802122c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012e08:	8afa      	ldrh	r2, [r7, #22]
 8012e0a:	8bfb      	ldrh	r3, [r7, #30]
 8012e0c:	4413      	add	r3, r2
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	3308      	adds	r3, #8
 8012e12:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012e14:	4b42      	ldr	r3, [pc, #264]	; (8012f20 <mem_trim+0x21c>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d106      	bne.n	8012e2c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8012e1e:	89fb      	ldrh	r3, [r7, #14]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7ff fd89 	bl	8012938 <ptr_to_mem>
 8012e26:	4603      	mov	r3, r0
 8012e28:	4a3d      	ldr	r2, [pc, #244]	; (8012f20 <mem_trim+0x21c>)
 8012e2a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012e2c:	89fb      	ldrh	r3, [r7, #14]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff fd82 	bl	8012938 <ptr_to_mem>
 8012e34:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	89ba      	ldrh	r2, [r7, #12]
 8012e40:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	8afa      	ldrh	r2, [r7, #22]
 8012e46:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	89fa      	ldrh	r2, [r7, #14]
 8012e4c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d049      	beq.n	8012eee <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7ff fd6a 	bl	8012938 <ptr_to_mem>
 8012e64:	4602      	mov	r2, r0
 8012e66:	89fb      	ldrh	r3, [r7, #14]
 8012e68:	8053      	strh	r3, [r2, #2]
 8012e6a:	e040      	b.n	8012eee <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012e6c:	8bfb      	ldrh	r3, [r7, #30]
 8012e6e:	f103 0214 	add.w	r2, r3, #20
 8012e72:	8abb      	ldrh	r3, [r7, #20]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d83a      	bhi.n	8012eee <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012e78:	8afa      	ldrh	r2, [r7, #22]
 8012e7a:	8bfb      	ldrh	r3, [r7, #30]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	3308      	adds	r3, #8
 8012e82:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012e84:	69bb      	ldr	r3, [r7, #24]
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d106      	bne.n	8012e9e <mem_trim+0x19a>
 8012e90:	4b1d      	ldr	r3, [pc, #116]	; (8012f08 <mem_trim+0x204>)
 8012e92:	f240 3216 	movw	r2, #790	; 0x316
 8012e96:	4921      	ldr	r1, [pc, #132]	; (8012f1c <mem_trim+0x218>)
 8012e98:	481d      	ldr	r0, [pc, #116]	; (8012f10 <mem_trim+0x20c>)
 8012e9a:	f00e f9c7 	bl	802122c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012e9e:	89fb      	ldrh	r3, [r7, #14]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff fd49 	bl	8012938 <ptr_to_mem>
 8012ea6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012ea8:	4b1d      	ldr	r3, [pc, #116]	; (8012f20 <mem_trim+0x21c>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	693a      	ldr	r2, [r7, #16]
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d202      	bcs.n	8012eb8 <mem_trim+0x1b4>
      lfree = mem2;
 8012eb2:	4a1b      	ldr	r2, [pc, #108]	; (8012f20 <mem_trim+0x21c>)
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	881a      	ldrh	r2, [r3, #0]
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	8afa      	ldrh	r2, [r7, #22]
 8012eca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	89fa      	ldrh	r2, [r7, #14]
 8012ed0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	881b      	ldrh	r3, [r3, #0]
 8012ed6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d007      	beq.n	8012eee <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7ff fd28 	bl	8012938 <ptr_to_mem>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	89fb      	ldrh	r3, [r7, #14]
 8012eec:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012eee:	480a      	ldr	r0, [pc, #40]	; (8012f18 <mem_trim+0x214>)
 8012ef0:	f002 feb9 	bl	8015c66 <sys_mutex_unlock>
  return rmem;
 8012ef4:	687b      	ldr	r3, [r7, #4]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3720      	adds	r7, #32
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	240406d8 	.word	0x240406d8
 8012f04:	240406dc 	.word	0x240406dc
 8012f08:	080248a0 	.word	0x080248a0
 8012f0c:	08024a48 	.word	0x08024a48
 8012f10:	08024904 	.word	0x08024904
 8012f14:	08024a60 	.word	0x08024a60
 8012f18:	240406e0 	.word	0x240406e0
 8012f1c:	08024a80 	.word	0x08024a80
 8012f20:	240406e4 	.word	0x240406e4

08012f24 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b088      	sub	sp, #32
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012f2e:	88fb      	ldrh	r3, [r7, #6]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d101      	bne.n	8012f38 <mem_malloc+0x14>
    return NULL;
 8012f34:	2300      	movs	r3, #0
 8012f36:	e0e6      	b.n	8013106 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012f38:	88fb      	ldrh	r3, [r7, #6]
 8012f3a:	3303      	adds	r3, #3
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	f023 0303 	bic.w	r3, r3, #3
 8012f42:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012f44:	8bbb      	ldrh	r3, [r7, #28]
 8012f46:	2b0b      	cmp	r3, #11
 8012f48:	d801      	bhi.n	8012f4e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012f4a:	230c      	movs	r3, #12
 8012f4c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012f4e:	8bbb      	ldrh	r3, [r7, #28]
 8012f50:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d803      	bhi.n	8012f60 <mem_malloc+0x3c>
 8012f58:	8bba      	ldrh	r2, [r7, #28]
 8012f5a:	88fb      	ldrh	r3, [r7, #6]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d201      	bcs.n	8012f64 <mem_malloc+0x40>
    return NULL;
 8012f60:	2300      	movs	r3, #0
 8012f62:	e0d0      	b.n	8013106 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012f64:	486a      	ldr	r0, [pc, #424]	; (8013110 <mem_malloc+0x1ec>)
 8012f66:	f002 fe6f 	bl	8015c48 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012f6a:	4b6a      	ldr	r3, [pc, #424]	; (8013114 <mem_malloc+0x1f0>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7ff fcf4 	bl	801295c <mem_to_ptr>
 8012f74:	4603      	mov	r3, r0
 8012f76:	83fb      	strh	r3, [r7, #30]
 8012f78:	e0b9      	b.n	80130ee <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012f7a:	8bfb      	ldrh	r3, [r7, #30]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7ff fcdb 	bl	8012938 <ptr_to_mem>
 8012f82:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	791b      	ldrb	r3, [r3, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f040 80a9 	bne.w	80130e0 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	461a      	mov	r2, r3
 8012f94:	8bfb      	ldrh	r3, [r7, #30]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	f1a3 0208 	sub.w	r2, r3, #8
 8012f9c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	f0c0 809e 	bcc.w	80130e0 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	881b      	ldrh	r3, [r3, #0]
 8012fa8:	461a      	mov	r2, r3
 8012faa:	8bfb      	ldrh	r3, [r7, #30]
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	f1a3 0208 	sub.w	r2, r3, #8
 8012fb2:	8bbb      	ldrh	r3, [r7, #28]
 8012fb4:	3314      	adds	r3, #20
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d335      	bcc.n	8013026 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012fba:	8bfa      	ldrh	r2, [r7, #30]
 8012fbc:	8bbb      	ldrh	r3, [r7, #28]
 8012fbe:	4413      	add	r3, r2
 8012fc0:	b29b      	uxth	r3, r3
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012fc6:	8a7b      	ldrh	r3, [r7, #18]
 8012fc8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	d106      	bne.n	8012fde <mem_malloc+0xba>
 8012fd0:	4b51      	ldr	r3, [pc, #324]	; (8013118 <mem_malloc+0x1f4>)
 8012fd2:	f240 3287 	movw	r2, #903	; 0x387
 8012fd6:	4951      	ldr	r1, [pc, #324]	; (801311c <mem_malloc+0x1f8>)
 8012fd8:	4851      	ldr	r0, [pc, #324]	; (8013120 <mem_malloc+0x1fc>)
 8012fda:	f00e f927 	bl	802122c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012fde:	8a7b      	ldrh	r3, [r7, #18]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7ff fca9 	bl	8012938 <ptr_to_mem>
 8012fe6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2200      	movs	r2, #0
 8012fec:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	881a      	ldrh	r2, [r3, #0]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	8bfa      	ldrh	r2, [r7, #30]
 8012ffa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	8a7a      	ldrh	r2, [r7, #18]
 8013000:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	2201      	movs	r2, #1
 8013006:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013010:	4293      	cmp	r3, r2
 8013012:	d00b      	beq.n	801302c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	4618      	mov	r0, r3
 801301a:	f7ff fc8d 	bl	8012938 <ptr_to_mem>
 801301e:	4602      	mov	r2, r0
 8013020:	8a7b      	ldrh	r3, [r7, #18]
 8013022:	8053      	strh	r3, [r2, #2]
 8013024:	e002      	b.n	801302c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	2201      	movs	r2, #1
 801302a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801302c:	4b39      	ldr	r3, [pc, #228]	; (8013114 <mem_malloc+0x1f0>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	697a      	ldr	r2, [r7, #20]
 8013032:	429a      	cmp	r2, r3
 8013034:	d127      	bne.n	8013086 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8013036:	4b37      	ldr	r3, [pc, #220]	; (8013114 <mem_malloc+0x1f0>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801303c:	e005      	b.n	801304a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	881b      	ldrh	r3, [r3, #0]
 8013042:	4618      	mov	r0, r3
 8013044:	f7ff fc78 	bl	8012938 <ptr_to_mem>
 8013048:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	791b      	ldrb	r3, [r3, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d004      	beq.n	801305c <mem_malloc+0x138>
 8013052:	4b34      	ldr	r3, [pc, #208]	; (8013124 <mem_malloc+0x200>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	69ba      	ldr	r2, [r7, #24]
 8013058:	429a      	cmp	r2, r3
 801305a:	d1f0      	bne.n	801303e <mem_malloc+0x11a>
          }
          lfree = cur;
 801305c:	4a2d      	ldr	r2, [pc, #180]	; (8013114 <mem_malloc+0x1f0>)
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013062:	4b2c      	ldr	r3, [pc, #176]	; (8013114 <mem_malloc+0x1f0>)
 8013064:	681a      	ldr	r2, [r3, #0]
 8013066:	4b2f      	ldr	r3, [pc, #188]	; (8013124 <mem_malloc+0x200>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	429a      	cmp	r2, r3
 801306c:	d00b      	beq.n	8013086 <mem_malloc+0x162>
 801306e:	4b29      	ldr	r3, [pc, #164]	; (8013114 <mem_malloc+0x1f0>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	791b      	ldrb	r3, [r3, #4]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d006      	beq.n	8013086 <mem_malloc+0x162>
 8013078:	4b27      	ldr	r3, [pc, #156]	; (8013118 <mem_malloc+0x1f4>)
 801307a:	f240 32b5 	movw	r2, #949	; 0x3b5
 801307e:	492a      	ldr	r1, [pc, #168]	; (8013128 <mem_malloc+0x204>)
 8013080:	4827      	ldr	r0, [pc, #156]	; (8013120 <mem_malloc+0x1fc>)
 8013082:	f00e f8d3 	bl	802122c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013086:	4822      	ldr	r0, [pc, #136]	; (8013110 <mem_malloc+0x1ec>)
 8013088:	f002 fded 	bl	8015c66 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801308c:	8bba      	ldrh	r2, [r7, #28]
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	4413      	add	r3, r2
 8013092:	3308      	adds	r3, #8
 8013094:	4a23      	ldr	r2, [pc, #140]	; (8013124 <mem_malloc+0x200>)
 8013096:	6812      	ldr	r2, [r2, #0]
 8013098:	4293      	cmp	r3, r2
 801309a:	d906      	bls.n	80130aa <mem_malloc+0x186>
 801309c:	4b1e      	ldr	r3, [pc, #120]	; (8013118 <mem_malloc+0x1f4>)
 801309e:	f240 32b9 	movw	r2, #953	; 0x3b9
 80130a2:	4922      	ldr	r1, [pc, #136]	; (801312c <mem_malloc+0x208>)
 80130a4:	481e      	ldr	r0, [pc, #120]	; (8013120 <mem_malloc+0x1fc>)
 80130a6:	f00e f8c1 	bl	802122c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	f003 0303 	and.w	r3, r3, #3
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d006      	beq.n	80130c2 <mem_malloc+0x19e>
 80130b4:	4b18      	ldr	r3, [pc, #96]	; (8013118 <mem_malloc+0x1f4>)
 80130b6:	f240 32bb 	movw	r2, #955	; 0x3bb
 80130ba:	491d      	ldr	r1, [pc, #116]	; (8013130 <mem_malloc+0x20c>)
 80130bc:	4818      	ldr	r0, [pc, #96]	; (8013120 <mem_malloc+0x1fc>)
 80130be:	f00e f8b5 	bl	802122c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	f003 0303 	and.w	r3, r3, #3
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d006      	beq.n	80130da <mem_malloc+0x1b6>
 80130cc:	4b12      	ldr	r3, [pc, #72]	; (8013118 <mem_malloc+0x1f4>)
 80130ce:	f240 32bd 	movw	r2, #957	; 0x3bd
 80130d2:	4918      	ldr	r1, [pc, #96]	; (8013134 <mem_malloc+0x210>)
 80130d4:	4812      	ldr	r0, [pc, #72]	; (8013120 <mem_malloc+0x1fc>)
 80130d6:	f00e f8a9 	bl	802122c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	3308      	adds	r3, #8
 80130de:	e012      	b.n	8013106 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 80130e0:	8bfb      	ldrh	r3, [r7, #30]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff fc28 	bl	8012938 <ptr_to_mem>
 80130e8:	4603      	mov	r3, r0
 80130ea:	881b      	ldrh	r3, [r3, #0]
 80130ec:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80130ee:	8bfa      	ldrh	r2, [r7, #30]
 80130f0:	8bb9      	ldrh	r1, [r7, #28]
 80130f2:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 80130f6:	1a5b      	subs	r3, r3, r1
 80130f8:	429a      	cmp	r2, r3
 80130fa:	f4ff af3e 	bcc.w	8012f7a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80130fe:	4804      	ldr	r0, [pc, #16]	; (8013110 <mem_malloc+0x1ec>)
 8013100:	f002 fdb1 	bl	8015c66 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013104:	2300      	movs	r3, #0
}
 8013106:	4618      	mov	r0, r3
 8013108:	3720      	adds	r7, #32
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	240406e0 	.word	0x240406e0
 8013114:	240406e4 	.word	0x240406e4
 8013118:	080248a0 	.word	0x080248a0
 801311c:	08024a80 	.word	0x08024a80
 8013120:	08024904 	.word	0x08024904
 8013124:	240406dc 	.word	0x240406dc
 8013128:	08024a94 	.word	0x08024a94
 801312c:	08024ab0 	.word	0x08024ab0
 8013130:	08024ae0 	.word	0x08024ae0
 8013134:	08024b10 	.word	0x08024b10

08013138 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	689b      	ldr	r3, [r3, #8]
 8013144:	2200      	movs	r2, #0
 8013146:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	3303      	adds	r3, #3
 801314e:	f023 0303 	bic.w	r3, r3, #3
 8013152:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013154:	2300      	movs	r3, #0
 8013156:	60fb      	str	r3, [r7, #12]
 8013158:	e011      	b.n	801317e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	689b      	ldr	r3, [r3, #8]
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	689b      	ldr	r3, [r3, #8]
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	881b      	ldrh	r3, [r3, #0]
 8013170:	461a      	mov	r2, r3
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	4413      	add	r3, r2
 8013176:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	3301      	adds	r3, #1
 801317c:	60fb      	str	r3, [r7, #12]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	885b      	ldrh	r3, [r3, #2]
 8013182:	461a      	mov	r2, r3
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	4293      	cmp	r3, r2
 8013188:	dbe7      	blt.n	801315a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801318a:	bf00      	nop
 801318c:	bf00      	nop
 801318e:	3714      	adds	r7, #20
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr

08013198 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801319e:	2300      	movs	r3, #0
 80131a0:	80fb      	strh	r3, [r7, #6]
 80131a2:	e009      	b.n	80131b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80131a4:	88fb      	ldrh	r3, [r7, #6]
 80131a6:	4a08      	ldr	r2, [pc, #32]	; (80131c8 <memp_init+0x30>)
 80131a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ff ffc3 	bl	8013138 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80131b2:	88fb      	ldrh	r3, [r7, #6]
 80131b4:	3301      	adds	r3, #1
 80131b6:	80fb      	strh	r3, [r7, #6]
 80131b8:	88fb      	ldrh	r3, [r7, #6]
 80131ba:	2b0c      	cmp	r3, #12
 80131bc:	d9f2      	bls.n	80131a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80131be:	bf00      	nop
 80131c0:	bf00      	nop
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	080275b8 	.word	0x080275b8

080131cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80131d4:	f002 fd7a 	bl	8015ccc <sys_arch_protect>
 80131d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d015      	beq.n	8013214 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	689b      	ldr	r3, [r3, #8]
 80131ec:	68ba      	ldr	r2, [r7, #8]
 80131ee:	6812      	ldr	r2, [r2, #0]
 80131f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	f003 0303 	and.w	r3, r3, #3
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d006      	beq.n	801320a <do_memp_malloc_pool+0x3e>
 80131fc:	4b09      	ldr	r3, [pc, #36]	; (8013224 <do_memp_malloc_pool+0x58>)
 80131fe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013202:	4909      	ldr	r1, [pc, #36]	; (8013228 <do_memp_malloc_pool+0x5c>)
 8013204:	4809      	ldr	r0, [pc, #36]	; (801322c <do_memp_malloc_pool+0x60>)
 8013206:	f00e f811 	bl	802122c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801320a:	68f8      	ldr	r0, [r7, #12]
 801320c:	f002 fd6c 	bl	8015ce8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	e003      	b.n	801321c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	f002 fd67 	bl	8015ce8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3710      	adds	r7, #16
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	08024b34 	.word	0x08024b34
 8013228:	08024b84 	.word	0x08024b84
 801322c:	08024ba8 	.word	0x08024ba8

08013230 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d106      	bne.n	801324c <memp_malloc_pool+0x1c>
 801323e:	4b0a      	ldr	r3, [pc, #40]	; (8013268 <memp_malloc_pool+0x38>)
 8013240:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8013244:	4909      	ldr	r1, [pc, #36]	; (801326c <memp_malloc_pool+0x3c>)
 8013246:	480a      	ldr	r0, [pc, #40]	; (8013270 <memp_malloc_pool+0x40>)
 8013248:	f00d fff0 	bl	802122c <iprintf>
  if (desc == NULL) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d101      	bne.n	8013256 <memp_malloc_pool+0x26>
    return NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	e003      	b.n	801325e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f7ff ffb8 	bl	80131cc <do_memp_malloc_pool>
 801325c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	08024b34 	.word	0x08024b34
 801326c:	08024bd0 	.word	0x08024bd0
 8013270:	08024ba8 	.word	0x08024ba8

08013274 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	4603      	mov	r3, r0
 801327c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801327e:	79fb      	ldrb	r3, [r7, #7]
 8013280:	2b0c      	cmp	r3, #12
 8013282:	d908      	bls.n	8013296 <memp_malloc+0x22>
 8013284:	4b0a      	ldr	r3, [pc, #40]	; (80132b0 <memp_malloc+0x3c>)
 8013286:	f240 1257 	movw	r2, #343	; 0x157
 801328a:	490a      	ldr	r1, [pc, #40]	; (80132b4 <memp_malloc+0x40>)
 801328c:	480a      	ldr	r0, [pc, #40]	; (80132b8 <memp_malloc+0x44>)
 801328e:	f00d ffcd 	bl	802122c <iprintf>
 8013292:	2300      	movs	r3, #0
 8013294:	e008      	b.n	80132a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013296:	79fb      	ldrb	r3, [r7, #7]
 8013298:	4a08      	ldr	r2, [pc, #32]	; (80132bc <memp_malloc+0x48>)
 801329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801329e:	4618      	mov	r0, r3
 80132a0:	f7ff ff94 	bl	80131cc <do_memp_malloc_pool>
 80132a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80132a6:	68fb      	ldr	r3, [r7, #12]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3710      	adds	r7, #16
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	08024b34 	.word	0x08024b34
 80132b4:	08024be4 	.word	0x08024be4
 80132b8:	08024ba8 	.word	0x08024ba8
 80132bc:	080275b8 	.word	0x080275b8

080132c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	f003 0303 	and.w	r3, r3, #3
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d006      	beq.n	80132e2 <do_memp_free_pool+0x22>
 80132d4:	4b0d      	ldr	r3, [pc, #52]	; (801330c <do_memp_free_pool+0x4c>)
 80132d6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80132da:	490d      	ldr	r1, [pc, #52]	; (8013310 <do_memp_free_pool+0x50>)
 80132dc:	480d      	ldr	r0, [pc, #52]	; (8013314 <do_memp_free_pool+0x54>)
 80132de:	f00d ffa5 	bl	802122c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80132e6:	f002 fcf1 	bl	8015ccc <sys_arch_protect>
 80132ea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80132fe:	68b8      	ldr	r0, [r7, #8]
 8013300:	f002 fcf2 	bl	8015ce8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013304:	bf00      	nop
 8013306:	3710      	adds	r7, #16
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	08024b34 	.word	0x08024b34
 8013310:	08024c04 	.word	0x08024c04
 8013314:	08024ba8 	.word	0x08024ba8

08013318 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d106      	bne.n	8013336 <memp_free_pool+0x1e>
 8013328:	4b0a      	ldr	r3, [pc, #40]	; (8013354 <memp_free_pool+0x3c>)
 801332a:	f240 1295 	movw	r2, #405	; 0x195
 801332e:	490a      	ldr	r1, [pc, #40]	; (8013358 <memp_free_pool+0x40>)
 8013330:	480a      	ldr	r0, [pc, #40]	; (801335c <memp_free_pool+0x44>)
 8013332:	f00d ff7b 	bl	802122c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d007      	beq.n	801334c <memp_free_pool+0x34>
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d004      	beq.n	801334c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013342:	6839      	ldr	r1, [r7, #0]
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff ffbb 	bl	80132c0 <do_memp_free_pool>
 801334a:	e000      	b.n	801334e <memp_free_pool+0x36>
    return;
 801334c:	bf00      	nop
}
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	08024b34 	.word	0x08024b34
 8013358:	08024bd0 	.word	0x08024bd0
 801335c:	08024ba8 	.word	0x08024ba8

08013360 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
 8013366:	4603      	mov	r3, r0
 8013368:	6039      	str	r1, [r7, #0]
 801336a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801336c:	79fb      	ldrb	r3, [r7, #7]
 801336e:	2b0c      	cmp	r3, #12
 8013370:	d907      	bls.n	8013382 <memp_free+0x22>
 8013372:	4b0c      	ldr	r3, [pc, #48]	; (80133a4 <memp_free+0x44>)
 8013374:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013378:	490b      	ldr	r1, [pc, #44]	; (80133a8 <memp_free+0x48>)
 801337a:	480c      	ldr	r0, [pc, #48]	; (80133ac <memp_free+0x4c>)
 801337c:	f00d ff56 	bl	802122c <iprintf>
 8013380:	e00c      	b.n	801339c <memp_free+0x3c>

  if (mem == NULL) {
 8013382:	683b      	ldr	r3, [r7, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d008      	beq.n	801339a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013388:	79fb      	ldrb	r3, [r7, #7]
 801338a:	4a09      	ldr	r2, [pc, #36]	; (80133b0 <memp_free+0x50>)
 801338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013390:	6839      	ldr	r1, [r7, #0]
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff ff94 	bl	80132c0 <do_memp_free_pool>
 8013398:	e000      	b.n	801339c <memp_free+0x3c>
    return;
 801339a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	08024b34 	.word	0x08024b34
 80133a8:	08024c24 	.word	0x08024c24
 80133ac:	08024ba8 	.word	0x08024ba8
 80133b0:	080275b8 	.word	0x080275b8

080133b4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d013      	beq.n	80133ea <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00b      	beq.n	80133e2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f000 ff2e 	bl	8014230 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	605a      	str	r2, [r3, #4]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	685a      	ldr	r2, [r3, #4]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80133e2:	6879      	ldr	r1, [r7, #4]
 80133e4:	2006      	movs	r0, #6
 80133e6:	f7ff ffbb 	bl	8013360 <memp_free>
  }
}
 80133ea:	bf00      	nop
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
	...

080133f4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d106      	bne.n	8013410 <netbuf_free+0x1c>
 8013402:	4b0d      	ldr	r3, [pc, #52]	; (8013438 <netbuf_free+0x44>)
 8013404:	2281      	movs	r2, #129	; 0x81
 8013406:	490d      	ldr	r1, [pc, #52]	; (801343c <netbuf_free+0x48>)
 8013408:	480d      	ldr	r0, [pc, #52]	; (8013440 <netbuf_free+0x4c>)
 801340a:	f00d ff0f 	bl	802122c <iprintf>
 801340e:	e00f      	b.n	8013430 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d004      	beq.n	8013422 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4618      	mov	r0, r3
 801341e:	f000 ff07 	bl	8014230 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2200      	movs	r2, #0
 8013426:	605a      	str	r2, [r3, #4]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	08024c40 	.word	0x08024c40
 801343c:	08024cf8 	.word	0x08024cf8
 8013440:	08024cac 	.word	0x08024cac

08013444 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	4613      	mov	r3, r2
 8013450:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d108      	bne.n	801346a <netbuf_ref+0x26>
 8013458:	4b1c      	ldr	r3, [pc, #112]	; (80134cc <netbuf_ref+0x88>)
 801345a:	2299      	movs	r2, #153	; 0x99
 801345c:	491c      	ldr	r1, [pc, #112]	; (80134d0 <netbuf_ref+0x8c>)
 801345e:	481d      	ldr	r0, [pc, #116]	; (80134d4 <netbuf_ref+0x90>)
 8013460:	f00d fee4 	bl	802122c <iprintf>
 8013464:	f06f 030f 	mvn.w	r3, #15
 8013468:	e02b      	b.n	80134c2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d004      	beq.n	801347c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	4618      	mov	r0, r3
 8013478:	f000 feda 	bl	8014230 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 801347c:	2241      	movs	r2, #65	; 0x41
 801347e:	2100      	movs	r1, #0
 8013480:	2036      	movs	r0, #54	; 0x36
 8013482:	f000 fbbf 	bl	8013c04 <pbuf_alloc>
 8013486:	4602      	mov	r2, r0
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d105      	bne.n	80134a0 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801349a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801349e:	e010      	b.n	80134c2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	68ba      	ldr	r2, [r7, #8]
 80134a6:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	88fa      	ldrh	r2, [r7, #6]
 80134ae:	811a      	strh	r2, [r3, #8]
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	6812      	ldr	r2, [r2, #0]
 80134b4:	891b      	ldrh	r3, [r3, #8]
 80134b6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80134c0:	2300      	movs	r3, #0
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3710      	adds	r7, #16
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	08024c40 	.word	0x08024c40
 80134d0:	08024d14 	.word	0x08024d14
 80134d4:	08024cac 	.word	0x08024cac

080134d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80134d8:	b480      	push	{r7}
 80134da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80134dc:	bf00      	nop
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
	...

080134e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	607a      	str	r2, [r7, #4]
 80134f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d108      	bne.n	801350e <netif_add+0x26>
 80134fc:	4b57      	ldr	r3, [pc, #348]	; (801365c <netif_add+0x174>)
 80134fe:	f240 1227 	movw	r2, #295	; 0x127
 8013502:	4957      	ldr	r1, [pc, #348]	; (8013660 <netif_add+0x178>)
 8013504:	4857      	ldr	r0, [pc, #348]	; (8013664 <netif_add+0x17c>)
 8013506:	f00d fe91 	bl	802122c <iprintf>
 801350a:	2300      	movs	r3, #0
 801350c:	e0a2      	b.n	8013654 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	2b00      	cmp	r3, #0
 8013512:	d108      	bne.n	8013526 <netif_add+0x3e>
 8013514:	4b51      	ldr	r3, [pc, #324]	; (801365c <netif_add+0x174>)
 8013516:	f44f 7294 	mov.w	r2, #296	; 0x128
 801351a:	4953      	ldr	r1, [pc, #332]	; (8013668 <netif_add+0x180>)
 801351c:	4851      	ldr	r0, [pc, #324]	; (8013664 <netif_add+0x17c>)
 801351e:	f00d fe85 	bl	802122c <iprintf>
 8013522:	2300      	movs	r3, #0
 8013524:	e096      	b.n	8013654 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d101      	bne.n	8013530 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801352c:	4b4f      	ldr	r3, [pc, #316]	; (801366c <netif_add+0x184>)
 801352e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013536:	4b4d      	ldr	r3, [pc, #308]	; (801366c <netif_add+0x184>)
 8013538:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013540:	4b4a      	ldr	r3, [pc, #296]	; (801366c <netif_add+0x184>)
 8013542:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2200      	movs	r2, #0
 8013548:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	2200      	movs	r2, #0
 801354e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2200      	movs	r2, #0
 8013554:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	4a45      	ldr	r2, [pc, #276]	; (8013670 <netif_add+0x188>)
 801355a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2200      	movs	r2, #0
 8013560:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2200      	movs	r2, #0
 8013566:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2200      	movs	r2, #0
 801356e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	6a3a      	ldr	r2, [r7, #32]
 8013574:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013576:	4b3f      	ldr	r3, [pc, #252]	; (8013674 <netif_add+0x18c>)
 8013578:	781a      	ldrb	r2, [r3, #0]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013584:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	68b9      	ldr	r1, [r7, #8]
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f000 f913 	bl	80137b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	4798      	blx	r3
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d001      	beq.n	80135a2 <netif_add+0xba>
    return NULL;
 801359e:	2300      	movs	r3, #0
 80135a0:	e058      	b.n	8013654 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135a8:	2bff      	cmp	r3, #255	; 0xff
 80135aa:	d103      	bne.n	80135b4 <netif_add+0xcc>
        netif->num = 0;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80135b8:	4b2f      	ldr	r3, [pc, #188]	; (8013678 <netif_add+0x190>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	617b      	str	r3, [r7, #20]
 80135be:	e02b      	b.n	8013618 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80135c0:	697a      	ldr	r2, [r7, #20]
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d106      	bne.n	80135d6 <netif_add+0xee>
 80135c8:	4b24      	ldr	r3, [pc, #144]	; (801365c <netif_add+0x174>)
 80135ca:	f240 128b 	movw	r2, #395	; 0x18b
 80135ce:	492b      	ldr	r1, [pc, #172]	; (801367c <netif_add+0x194>)
 80135d0:	4824      	ldr	r0, [pc, #144]	; (8013664 <netif_add+0x17c>)
 80135d2:	f00d fe2b 	bl	802122c <iprintf>
        num_netifs++;
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	3301      	adds	r3, #1
 80135da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	2bff      	cmp	r3, #255	; 0xff
 80135e0:	dd06      	ble.n	80135f0 <netif_add+0x108>
 80135e2:	4b1e      	ldr	r3, [pc, #120]	; (801365c <netif_add+0x174>)
 80135e4:	f240 128d 	movw	r2, #397	; 0x18d
 80135e8:	4925      	ldr	r1, [pc, #148]	; (8013680 <netif_add+0x198>)
 80135ea:	481e      	ldr	r0, [pc, #120]	; (8013664 <netif_add+0x17c>)
 80135ec:	f00d fe1e 	bl	802122c <iprintf>
        if (netif2->num == netif->num) {
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d108      	bne.n	8013612 <netif_add+0x12a>
          netif->num++;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013606:	3301      	adds	r3, #1
 8013608:	b2da      	uxtb	r2, r3
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8013610:	e005      	b.n	801361e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	617b      	str	r3, [r7, #20]
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d1d0      	bne.n	80135c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d1be      	bne.n	80135a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801362a:	2bfe      	cmp	r3, #254	; 0xfe
 801362c:	d103      	bne.n	8013636 <netif_add+0x14e>
    netif_num = 0;
 801362e:	4b11      	ldr	r3, [pc, #68]	; (8013674 <netif_add+0x18c>)
 8013630:	2200      	movs	r2, #0
 8013632:	701a      	strb	r2, [r3, #0]
 8013634:	e006      	b.n	8013644 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801363c:	3301      	adds	r3, #1
 801363e:	b2da      	uxtb	r2, r3
 8013640:	4b0c      	ldr	r3, [pc, #48]	; (8013674 <netif_add+0x18c>)
 8013642:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013644:	4b0c      	ldr	r3, [pc, #48]	; (8013678 <netif_add+0x190>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801364c:	4a0a      	ldr	r2, [pc, #40]	; (8013678 <netif_add+0x190>)
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013652:	68fb      	ldr	r3, [r7, #12]
}
 8013654:	4618      	mov	r0, r3
 8013656:	3718      	adds	r7, #24
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}
 801365c:	08024df4 	.word	0x08024df4
 8013660:	08024ea4 	.word	0x08024ea4
 8013664:	08024e60 	.word	0x08024e60
 8013668:	08024ec0 	.word	0x08024ec0
 801366c:	08027518 	.word	0x08027518
 8013670:	08013a93 	.word	0x08013a93
 8013674:	2404071c 	.word	0x2404071c
 8013678:	24048e74 	.word	0x24048e74
 801367c:	08024ee4 	.word	0x08024ee4
 8013680:	08024ef8 	.word	0x08024ef8

08013684 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801368e:	6839      	ldr	r1, [r7, #0]
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f004 f909 	bl	80178a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013696:	6839      	ldr	r1, [r7, #0]
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f009 fbef 	bl	801ce7c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801369e:	bf00      	nop
 80136a0:	3708      	adds	r7, #8
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
	...

080136a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b086      	sub	sp, #24
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d106      	bne.n	80136c8 <netif_do_set_ipaddr+0x20>
 80136ba:	4b1d      	ldr	r3, [pc, #116]	; (8013730 <netif_do_set_ipaddr+0x88>)
 80136bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80136c0:	491c      	ldr	r1, [pc, #112]	; (8013734 <netif_do_set_ipaddr+0x8c>)
 80136c2:	481d      	ldr	r0, [pc, #116]	; (8013738 <netif_do_set_ipaddr+0x90>)
 80136c4:	f00d fdb2 	bl	802122c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d106      	bne.n	80136dc <netif_do_set_ipaddr+0x34>
 80136ce:	4b18      	ldr	r3, [pc, #96]	; (8013730 <netif_do_set_ipaddr+0x88>)
 80136d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80136d4:	4917      	ldr	r1, [pc, #92]	; (8013734 <netif_do_set_ipaddr+0x8c>)
 80136d6:	4818      	ldr	r0, [pc, #96]	; (8013738 <netif_do_set_ipaddr+0x90>)
 80136d8:	f00d fda8 	bl	802122c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	3304      	adds	r3, #4
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d01c      	beq.n	8013724 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	3304      	adds	r3, #4
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80136fa:	f107 0314 	add.w	r3, r7, #20
 80136fe:	4619      	mov	r1, r3
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7ff ffbf 	bl	8013684 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <netif_do_set_ipaddr+0x6a>
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	e000      	b.n	8013714 <netif_do_set_ipaddr+0x6c>
 8013712:	2300      	movs	r3, #0
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013718:	2101      	movs	r1, #1
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f000 f8d2 	bl	80138c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013720:	2301      	movs	r3, #1
 8013722:	e000      	b.n	8013726 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3718      	adds	r7, #24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	08024df4 	.word	0x08024df4
 8013734:	08024f28 	.word	0x08024f28
 8013738:	08024e60 	.word	0x08024e60

0801373c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801373c:	b480      	push	{r7}
 801373e:	b085      	sub	sp, #20
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	3308      	adds	r3, #8
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	429a      	cmp	r2, r3
 8013754:	d00a      	beq.n	801376c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d002      	beq.n	8013762 <netif_do_set_netmask+0x26>
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	e000      	b.n	8013764 <netif_do_set_netmask+0x28>
 8013762:	2300      	movs	r3, #0
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013768:	2301      	movs	r3, #1
 801376a:	e000      	b.n	801376e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr

0801377a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801377a:	b480      	push	{r7}
 801377c:	b085      	sub	sp, #20
 801377e:	af00      	add	r7, sp, #0
 8013780:	60f8      	str	r0, [r7, #12]
 8013782:	60b9      	str	r1, [r7, #8]
 8013784:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	330c      	adds	r3, #12
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	429a      	cmp	r2, r3
 8013792:	d00a      	beq.n	80137aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d002      	beq.n	80137a0 <netif_do_set_gw+0x26>
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	e000      	b.n	80137a2 <netif_do_set_gw+0x28>
 80137a0:	2300      	movs	r3, #0
 80137a2:	68fa      	ldr	r2, [r7, #12]
 80137a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80137a6:	2301      	movs	r3, #1
 80137a8:	e000      	b.n	80137ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3714      	adds	r7, #20
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b088      	sub	sp, #32
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	607a      	str	r2, [r7, #4]
 80137c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80137c6:	2300      	movs	r3, #0
 80137c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80137ca:	2300      	movs	r3, #0
 80137cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d101      	bne.n	80137d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80137d4:	4b1c      	ldr	r3, [pc, #112]	; (8013848 <netif_set_addr+0x90>)
 80137d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d101      	bne.n	80137e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80137de:	4b1a      	ldr	r3, [pc, #104]	; (8013848 <netif_set_addr+0x90>)
 80137e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d101      	bne.n	80137ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80137e8:	4b17      	ldr	r3, [pc, #92]	; (8013848 <netif_set_addr+0x90>)
 80137ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d003      	beq.n	80137fa <netif_set_addr+0x42>
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d101      	bne.n	80137fe <netif_set_addr+0x46>
 80137fa:	2301      	movs	r3, #1
 80137fc:	e000      	b.n	8013800 <netif_set_addr+0x48>
 80137fe:	2300      	movs	r3, #0
 8013800:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d006      	beq.n	8013816 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013808:	f107 0310 	add.w	r3, r7, #16
 801380c:	461a      	mov	r2, r3
 801380e:	68b9      	ldr	r1, [r7, #8]
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f7ff ff49 	bl	80136a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013816:	69fa      	ldr	r2, [r7, #28]
 8013818:	6879      	ldr	r1, [r7, #4]
 801381a:	68f8      	ldr	r0, [r7, #12]
 801381c:	f7ff ff8e 	bl	801373c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013820:	69ba      	ldr	r2, [r7, #24]
 8013822:	6839      	ldr	r1, [r7, #0]
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	f7ff ffa8 	bl	801377a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d106      	bne.n	801383e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013830:	f107 0310 	add.w	r3, r7, #16
 8013834:	461a      	mov	r2, r3
 8013836:	68b9      	ldr	r1, [r7, #8]
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f7ff ff35 	bl	80136a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801383e:	bf00      	nop
 8013840:	3720      	adds	r7, #32
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	08027518 	.word	0x08027518

0801384c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013854:	4a04      	ldr	r2, [pc, #16]	; (8013868 <netif_set_default+0x1c>)
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801385a:	bf00      	nop
 801385c:	370c      	adds	r7, #12
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	24048e78 	.word	0x24048e78

0801386c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d107      	bne.n	801388a <netif_set_up+0x1e>
 801387a:	4b0f      	ldr	r3, [pc, #60]	; (80138b8 <netif_set_up+0x4c>)
 801387c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013880:	490e      	ldr	r1, [pc, #56]	; (80138bc <netif_set_up+0x50>)
 8013882:	480f      	ldr	r0, [pc, #60]	; (80138c0 <netif_set_up+0x54>)
 8013884:	f00d fcd2 	bl	802122c <iprintf>
 8013888:	e013      	b.n	80138b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013890:	f003 0301 	and.w	r3, r3, #1
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10c      	bne.n	80138b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801389e:	f043 0301 	orr.w	r3, r3, #1
 80138a2:	b2da      	uxtb	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80138aa:	2103      	movs	r1, #3
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f000 f809 	bl	80138c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80138b2:	3708      	adds	r7, #8
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	08024df4 	.word	0x08024df4
 80138bc:	08024f98 	.word	0x08024f98
 80138c0:	08024e60 	.word	0x08024e60

080138c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	460b      	mov	r3, r1
 80138ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d106      	bne.n	80138e4 <netif_issue_reports+0x20>
 80138d6:	4b18      	ldr	r3, [pc, #96]	; (8013938 <netif_issue_reports+0x74>)
 80138d8:	f240 326d 	movw	r2, #877	; 0x36d
 80138dc:	4917      	ldr	r1, [pc, #92]	; (801393c <netif_issue_reports+0x78>)
 80138de:	4818      	ldr	r0, [pc, #96]	; (8013940 <netif_issue_reports+0x7c>)
 80138e0:	f00d fca4 	bl	802122c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80138ea:	f003 0304 	and.w	r3, r3, #4
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d01e      	beq.n	8013930 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80138f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d017      	beq.n	8013930 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013900:	78fb      	ldrb	r3, [r7, #3]
 8013902:	f003 0301 	and.w	r3, r3, #1
 8013906:	2b00      	cmp	r3, #0
 8013908:	d013      	beq.n	8013932 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	3304      	adds	r3, #4
 801390e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013910:	2b00      	cmp	r3, #0
 8013912:	d00e      	beq.n	8013932 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801391a:	f003 0308 	and.w	r3, r3, #8
 801391e:	2b00      	cmp	r3, #0
 8013920:	d007      	beq.n	8013932 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	3304      	adds	r3, #4
 8013926:	4619      	mov	r1, r3
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7fd fa5b 	bl	8010de4 <etharp_request>
 801392e:	e000      	b.n	8013932 <netif_issue_reports+0x6e>
    return;
 8013930:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013932:	3708      	adds	r7, #8
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}
 8013938:	08024df4 	.word	0x08024df4
 801393c:	08024fb4 	.word	0x08024fb4
 8013940:	08024e60 	.word	0x08024e60

08013944 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d107      	bne.n	8013962 <netif_set_down+0x1e>
 8013952:	4b12      	ldr	r3, [pc, #72]	; (801399c <netif_set_down+0x58>)
 8013954:	f240 329b 	movw	r2, #923	; 0x39b
 8013958:	4911      	ldr	r1, [pc, #68]	; (80139a0 <netif_set_down+0x5c>)
 801395a:	4812      	ldr	r0, [pc, #72]	; (80139a4 <netif_set_down+0x60>)
 801395c:	f00d fc66 	bl	802122c <iprintf>
 8013960:	e019      	b.n	8013996 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013968:	f003 0301 	and.w	r3, r3, #1
 801396c:	2b00      	cmp	r3, #0
 801396e:	d012      	beq.n	8013996 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013976:	f023 0301 	bic.w	r3, r3, #1
 801397a:	b2da      	uxtb	r2, r3
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013988:	f003 0308 	and.w	r3, r3, #8
 801398c:	2b00      	cmp	r3, #0
 801398e:	d002      	beq.n	8013996 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7fc fde5 	bl	8010560 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}
 801399c:	08024df4 	.word	0x08024df4
 80139a0:	08024fd8 	.word	0x08024fd8
 80139a4:	08024e60 	.word	0x08024e60

080139a8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d107      	bne.n	80139c6 <netif_set_link_up+0x1e>
 80139b6:	4b13      	ldr	r3, [pc, #76]	; (8013a04 <netif_set_link_up+0x5c>)
 80139b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80139bc:	4912      	ldr	r1, [pc, #72]	; (8013a08 <netif_set_link_up+0x60>)
 80139be:	4813      	ldr	r0, [pc, #76]	; (8013a0c <netif_set_link_up+0x64>)
 80139c0:	f00d fc34 	bl	802122c <iprintf>
 80139c4:	e01b      	b.n	80139fe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139cc:	f003 0304 	and.w	r3, r3, #4
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d114      	bne.n	80139fe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139da:	f043 0304 	orr.w	r3, r3, #4
 80139de:	b2da      	uxtb	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80139e6:	2103      	movs	r1, #3
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7ff ff6b 	bl	80138c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	69db      	ldr	r3, [r3, #28]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d003      	beq.n	80139fe <netif_set_link_up+0x56>
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	69db      	ldr	r3, [r3, #28]
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	08024df4 	.word	0x08024df4
 8013a08:	08024ff8 	.word	0x08024ff8
 8013a0c:	08024e60 	.word	0x08024e60

08013a10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d107      	bne.n	8013a2e <netif_set_link_down+0x1e>
 8013a1e:	4b11      	ldr	r3, [pc, #68]	; (8013a64 <netif_set_link_down+0x54>)
 8013a20:	f240 4206 	movw	r2, #1030	; 0x406
 8013a24:	4910      	ldr	r1, [pc, #64]	; (8013a68 <netif_set_link_down+0x58>)
 8013a26:	4811      	ldr	r0, [pc, #68]	; (8013a6c <netif_set_link_down+0x5c>)
 8013a28:	f00d fc00 	bl	802122c <iprintf>
 8013a2c:	e017      	b.n	8013a5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a34:	f003 0304 	and.w	r3, r3, #4
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d010      	beq.n	8013a5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a42:	f023 0304 	bic.w	r3, r3, #4
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	69db      	ldr	r3, [r3, #28]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d003      	beq.n	8013a5e <netif_set_link_down+0x4e>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	69db      	ldr	r3, [r3, #28]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	08024df4 	.word	0x08024df4
 8013a68:	0802501c 	.word	0x0802501c
 8013a6c:	08024e60 	.word	0x08024e60

08013a70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	683a      	ldr	r2, [r7, #0]
 8013a84:	61da      	str	r2, [r3, #28]
  }
}
 8013a86:	bf00      	nop
 8013a88:	370c      	adds	r7, #12
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr

08013a92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013a92:	b480      	push	{r7}
 8013a94:	b085      	sub	sp, #20
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	60f8      	str	r0, [r7, #12]
 8013a9a:	60b9      	str	r1, [r7, #8]
 8013a9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013a9e:	f06f 030b 	mvn.w	r3, #11
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3714      	adds	r7, #20
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aac:	4770      	bx	lr
	...

08013ab0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b085      	sub	sp, #20
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013aba:	79fb      	ldrb	r3, [r7, #7]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d013      	beq.n	8013ae8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013ac0:	4b0d      	ldr	r3, [pc, #52]	; (8013af8 <netif_get_by_index+0x48>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	60fb      	str	r3, [r7, #12]
 8013ac6:	e00c      	b.n	8013ae2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ace:	3301      	adds	r3, #1
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	79fa      	ldrb	r2, [r7, #7]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d101      	bne.n	8013adc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	e006      	b.n	8013aea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	60fb      	str	r3, [r7, #12]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1ef      	bne.n	8013ac8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013ae8:	2300      	movs	r3, #0
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3714      	adds	r7, #20
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr
 8013af6:	bf00      	nop
 8013af8:	24048e74 	.word	0x24048e74

08013afc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013b02:	f002 f8e3 	bl	8015ccc <sys_arch_protect>
 8013b06:	6038      	str	r0, [r7, #0]
 8013b08:	4b0d      	ldr	r3, [pc, #52]	; (8013b40 <pbuf_free_ooseq+0x44>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	701a      	strb	r2, [r3, #0]
 8013b0e:	6838      	ldr	r0, [r7, #0]
 8013b10:	f002 f8ea 	bl	8015ce8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013b14:	4b0b      	ldr	r3, [pc, #44]	; (8013b44 <pbuf_free_ooseq+0x48>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	607b      	str	r3, [r7, #4]
 8013b1a:	e00a      	b.n	8013b32 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d003      	beq.n	8013b2c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f003 fefd 	bl	8017924 <tcp_free_ooseq>
      return;
 8013b2a:	e005      	b.n	8013b38 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	607b      	str	r3, [r7, #4]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d1f1      	bne.n	8013b1c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013b38:	3708      	adds	r7, #8
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	24048e7c 	.word	0x24048e7c
 8013b44:	24048e8c 	.word	0x24048e8c

08013b48 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013b50:	f7ff ffd4 	bl	8013afc <pbuf_free_ooseq>
}
 8013b54:	bf00      	nop
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013b62:	f002 f8b3 	bl	8015ccc <sys_arch_protect>
 8013b66:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013b68:	4b0f      	ldr	r3, [pc, #60]	; (8013ba8 <pbuf_pool_is_empty+0x4c>)
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013b6e:	4b0e      	ldr	r3, [pc, #56]	; (8013ba8 <pbuf_pool_is_empty+0x4c>)
 8013b70:	2201      	movs	r2, #1
 8013b72:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f002 f8b7 	bl	8015ce8 <sys_arch_unprotect>

  if (!queued) {
 8013b7a:	78fb      	ldrb	r3, [r7, #3]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d10f      	bne.n	8013ba0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013b80:	2100      	movs	r1, #0
 8013b82:	480a      	ldr	r0, [pc, #40]	; (8013bac <pbuf_pool_is_empty+0x50>)
 8013b84:	f008 f9ec 	bl	801bf60 <tcpip_try_callback>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d008      	beq.n	8013ba0 <pbuf_pool_is_empty+0x44>
 8013b8e:	f002 f89d 	bl	8015ccc <sys_arch_protect>
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	4b04      	ldr	r3, [pc, #16]	; (8013ba8 <pbuf_pool_is_empty+0x4c>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	701a      	strb	r2, [r3, #0]
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f002 f8a4 	bl	8015ce8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013ba0:	bf00      	nop
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	24048e7c 	.word	0x24048e7c
 8013bac:	08013b49 	.word	0x08013b49

08013bb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b085      	sub	sp, #20
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	4611      	mov	r1, r2
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	460b      	mov	r3, r1
 8013bc0:	80fb      	strh	r3, [r7, #6]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	68ba      	ldr	r2, [r7, #8]
 8013bd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	88fa      	ldrh	r2, [r7, #6]
 8013bd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	88ba      	ldrh	r2, [r7, #4]
 8013bdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013bde:	8b3b      	ldrh	r3, [r7, #24]
 8013be0:	b2da      	uxtb	r2, r3
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	7f3a      	ldrb	r2, [r7, #28]
 8013bea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	73da      	strb	r2, [r3, #15]
}
 8013bf8:	bf00      	nop
 8013bfa:	3714      	adds	r7, #20
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b08c      	sub	sp, #48	; 0x30
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	71fb      	strb	r3, [r7, #7]
 8013c0e:	460b      	mov	r3, r1
 8013c10:	80bb      	strh	r3, [r7, #4]
 8013c12:	4613      	mov	r3, r2
 8013c14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013c16:	79fb      	ldrb	r3, [r7, #7]
 8013c18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013c1a:	887b      	ldrh	r3, [r7, #2]
 8013c1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013c20:	d07f      	beq.n	8013d22 <pbuf_alloc+0x11e>
 8013c22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013c26:	f300 80c8 	bgt.w	8013dba <pbuf_alloc+0x1b6>
 8013c2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013c2e:	d010      	beq.n	8013c52 <pbuf_alloc+0x4e>
 8013c30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013c34:	f300 80c1 	bgt.w	8013dba <pbuf_alloc+0x1b6>
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d002      	beq.n	8013c42 <pbuf_alloc+0x3e>
 8013c3c:	2b41      	cmp	r3, #65	; 0x41
 8013c3e:	f040 80bc 	bne.w	8013dba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013c42:	887a      	ldrh	r2, [r7, #2]
 8013c44:	88bb      	ldrh	r3, [r7, #4]
 8013c46:	4619      	mov	r1, r3
 8013c48:	2000      	movs	r0, #0
 8013c4a:	f000 f8d1 	bl	8013df0 <pbuf_alloc_reference>
 8013c4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013c50:	e0bd      	b.n	8013dce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013c52:	2300      	movs	r3, #0
 8013c54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013c56:	2300      	movs	r3, #0
 8013c58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013c5a:	88bb      	ldrh	r3, [r7, #4]
 8013c5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013c5e:	200c      	movs	r0, #12
 8013c60:	f7ff fb08 	bl	8013274 <memp_malloc>
 8013c64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d109      	bne.n	8013c80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013c6c:	f7ff ff76 	bl	8013b5c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d002      	beq.n	8013c7c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c78:	f000 fada 	bl	8014230 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	e0a7      	b.n	8013dd0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c82:	3303      	adds	r3, #3
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	f023 0303 	bic.w	r3, r3, #3
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	8b7a      	ldrh	r2, [r7, #26]
 8013c94:	4293      	cmp	r3, r2
 8013c96:	bf28      	it	cs
 8013c98:	4613      	movcs	r3, r2
 8013c9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c9e:	3310      	adds	r3, #16
 8013ca0:	693a      	ldr	r2, [r7, #16]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	3303      	adds	r3, #3
 8013ca6:	f023 0303 	bic.w	r3, r3, #3
 8013caa:	4618      	mov	r0, r3
 8013cac:	89f9      	ldrh	r1, [r7, #14]
 8013cae:	8b7a      	ldrh	r2, [r7, #26]
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	887b      	ldrh	r3, [r7, #2]
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	460b      	mov	r3, r1
 8013cba:	4601      	mov	r1, r0
 8013cbc:	6938      	ldr	r0, [r7, #16]
 8013cbe:	f7ff ff77 	bl	8013bb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013cc2:	693b      	ldr	r3, [r7, #16]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	f003 0303 	and.w	r3, r3, #3
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d006      	beq.n	8013cdc <pbuf_alloc+0xd8>
 8013cce:	4b42      	ldr	r3, [pc, #264]	; (8013dd8 <pbuf_alloc+0x1d4>)
 8013cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013cd4:	4941      	ldr	r1, [pc, #260]	; (8013ddc <pbuf_alloc+0x1d8>)
 8013cd6:	4842      	ldr	r0, [pc, #264]	; (8013de0 <pbuf_alloc+0x1dc>)
 8013cd8:	f00d faa8 	bl	802122c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cde:	3303      	adds	r3, #3
 8013ce0:	f023 0303 	bic.w	r3, r3, #3
 8013ce4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013ce8:	d106      	bne.n	8013cf8 <pbuf_alloc+0xf4>
 8013cea:	4b3b      	ldr	r3, [pc, #236]	; (8013dd8 <pbuf_alloc+0x1d4>)
 8013cec:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013cf0:	493c      	ldr	r1, [pc, #240]	; (8013de4 <pbuf_alloc+0x1e0>)
 8013cf2:	483b      	ldr	r0, [pc, #236]	; (8013de0 <pbuf_alloc+0x1dc>)
 8013cf4:	f00d fa9a 	bl	802122c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d102      	bne.n	8013d04 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	627b      	str	r3, [r7, #36]	; 0x24
 8013d02:	e002      	b.n	8013d0a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	693a      	ldr	r2, [r7, #16]
 8013d08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013d0e:	8b7a      	ldrh	r2, [r7, #26]
 8013d10:	89fb      	ldrh	r3, [r7, #14]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013d1a:	8b7b      	ldrh	r3, [r7, #26]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d19e      	bne.n	8013c5e <pbuf_alloc+0x5a>
      break;
 8013d20:	e055      	b.n	8013dce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d24:	3303      	adds	r3, #3
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	f023 0303 	bic.w	r3, r3, #3
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	88bb      	ldrh	r3, [r7, #4]
 8013d30:	3303      	adds	r3, #3
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	f023 0303 	bic.w	r3, r3, #3
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	4413      	add	r3, r2
 8013d3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013d3e:	8b3b      	ldrh	r3, [r7, #24]
 8013d40:	3310      	adds	r3, #16
 8013d42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013d44:	8b3a      	ldrh	r2, [r7, #24]
 8013d46:	88bb      	ldrh	r3, [r7, #4]
 8013d48:	3303      	adds	r3, #3
 8013d4a:	f023 0303 	bic.w	r3, r3, #3
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d306      	bcc.n	8013d60 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013d52:	8afa      	ldrh	r2, [r7, #22]
 8013d54:	88bb      	ldrh	r3, [r7, #4]
 8013d56:	3303      	adds	r3, #3
 8013d58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d201      	bcs.n	8013d64 <pbuf_alloc+0x160>
        return NULL;
 8013d60:	2300      	movs	r3, #0
 8013d62:	e035      	b.n	8013dd0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013d64:	8afb      	ldrh	r3, [r7, #22]
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7ff f8dc 	bl	8012f24 <mem_malloc>
 8013d6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d101      	bne.n	8013d78 <pbuf_alloc+0x174>
        return NULL;
 8013d74:	2300      	movs	r3, #0
 8013d76:	e02b      	b.n	8013dd0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d7a:	3310      	adds	r3, #16
 8013d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d7e:	4413      	add	r3, r2
 8013d80:	3303      	adds	r3, #3
 8013d82:	f023 0303 	bic.w	r3, r3, #3
 8013d86:	4618      	mov	r0, r3
 8013d88:	88b9      	ldrh	r1, [r7, #4]
 8013d8a:	88ba      	ldrh	r2, [r7, #4]
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	887b      	ldrh	r3, [r7, #2]
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	460b      	mov	r3, r1
 8013d96:	4601      	mov	r1, r0
 8013d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d9a:	f7ff ff09 	bl	8013bb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	f003 0303 	and.w	r3, r3, #3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d010      	beq.n	8013dcc <pbuf_alloc+0x1c8>
 8013daa:	4b0b      	ldr	r3, [pc, #44]	; (8013dd8 <pbuf_alloc+0x1d4>)
 8013dac:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013db0:	490d      	ldr	r1, [pc, #52]	; (8013de8 <pbuf_alloc+0x1e4>)
 8013db2:	480b      	ldr	r0, [pc, #44]	; (8013de0 <pbuf_alloc+0x1dc>)
 8013db4:	f00d fa3a 	bl	802122c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013db8:	e008      	b.n	8013dcc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013dba:	4b07      	ldr	r3, [pc, #28]	; (8013dd8 <pbuf_alloc+0x1d4>)
 8013dbc:	f240 1227 	movw	r2, #295	; 0x127
 8013dc0:	490a      	ldr	r1, [pc, #40]	; (8013dec <pbuf_alloc+0x1e8>)
 8013dc2:	4807      	ldr	r0, [pc, #28]	; (8013de0 <pbuf_alloc+0x1dc>)
 8013dc4:	f00d fa32 	bl	802122c <iprintf>
      return NULL;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	e001      	b.n	8013dd0 <pbuf_alloc+0x1cc>
      break;
 8013dcc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3728      	adds	r7, #40	; 0x28
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	08025040 	.word	0x08025040
 8013ddc:	08025090 	.word	0x08025090
 8013de0:	080250c0 	.word	0x080250c0
 8013de4:	080250e8 	.word	0x080250e8
 8013de8:	0802511c 	.word	0x0802511c
 8013dec:	08025148 	.word	0x08025148

08013df0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b086      	sub	sp, #24
 8013df4:	af02      	add	r7, sp, #8
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	460b      	mov	r3, r1
 8013dfa:	807b      	strh	r3, [r7, #2]
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013e00:	883b      	ldrh	r3, [r7, #0]
 8013e02:	2b41      	cmp	r3, #65	; 0x41
 8013e04:	d009      	beq.n	8013e1a <pbuf_alloc_reference+0x2a>
 8013e06:	883b      	ldrh	r3, [r7, #0]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d006      	beq.n	8013e1a <pbuf_alloc_reference+0x2a>
 8013e0c:	4b0f      	ldr	r3, [pc, #60]	; (8013e4c <pbuf_alloc_reference+0x5c>)
 8013e0e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013e12:	490f      	ldr	r1, [pc, #60]	; (8013e50 <pbuf_alloc_reference+0x60>)
 8013e14:	480f      	ldr	r0, [pc, #60]	; (8013e54 <pbuf_alloc_reference+0x64>)
 8013e16:	f00d fa09 	bl	802122c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013e1a:	200b      	movs	r0, #11
 8013e1c:	f7ff fa2a 	bl	8013274 <memp_malloc>
 8013e20:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d101      	bne.n	8013e2c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e00b      	b.n	8013e44 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013e2c:	8879      	ldrh	r1, [r7, #2]
 8013e2e:	887a      	ldrh	r2, [r7, #2]
 8013e30:	2300      	movs	r3, #0
 8013e32:	9301      	str	r3, [sp, #4]
 8013e34:	883b      	ldrh	r3, [r7, #0]
 8013e36:	9300      	str	r3, [sp, #0]
 8013e38:	460b      	mov	r3, r1
 8013e3a:	6879      	ldr	r1, [r7, #4]
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f7ff feb7 	bl	8013bb0 <pbuf_init_alloced_pbuf>
  return p;
 8013e42:	68fb      	ldr	r3, [r7, #12]
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3710      	adds	r7, #16
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	08025040 	.word	0x08025040
 8013e50:	08025164 	.word	0x08025164
 8013e54:	080250c0 	.word	0x080250c0

08013e58 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b088      	sub	sp, #32
 8013e5c:	af02      	add	r7, sp, #8
 8013e5e:	607b      	str	r3, [r7, #4]
 8013e60:	4603      	mov	r3, r0
 8013e62:	73fb      	strb	r3, [r7, #15]
 8013e64:	460b      	mov	r3, r1
 8013e66:	81bb      	strh	r3, [r7, #12]
 8013e68:	4613      	mov	r3, r2
 8013e6a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013e6c:	7bfb      	ldrb	r3, [r7, #15]
 8013e6e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013e70:	8a7b      	ldrh	r3, [r7, #18]
 8013e72:	3303      	adds	r3, #3
 8013e74:	f023 0203 	bic.w	r2, r3, #3
 8013e78:	89bb      	ldrh	r3, [r7, #12]
 8013e7a:	441a      	add	r2, r3
 8013e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d901      	bls.n	8013e86 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013e82:	2300      	movs	r3, #0
 8013e84:	e018      	b.n	8013eb8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d007      	beq.n	8013e9c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013e8c:	8a7b      	ldrh	r3, [r7, #18]
 8013e8e:	3303      	adds	r3, #3
 8013e90:	f023 0303 	bic.w	r3, r3, #3
 8013e94:	6a3a      	ldr	r2, [r7, #32]
 8013e96:	4413      	add	r3, r2
 8013e98:	617b      	str	r3, [r7, #20]
 8013e9a:	e001      	b.n	8013ea0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	89b9      	ldrh	r1, [r7, #12]
 8013ea4:	89ba      	ldrh	r2, [r7, #12]
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	9301      	str	r3, [sp, #4]
 8013eaa:	897b      	ldrh	r3, [r7, #10]
 8013eac:	9300      	str	r3, [sp, #0]
 8013eae:	460b      	mov	r3, r1
 8013eb0:	6979      	ldr	r1, [r7, #20]
 8013eb2:	f7ff fe7d 	bl	8013bb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013eb6:	687b      	ldr	r3, [r7, #4]
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3718      	adds	r7, #24
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	460b      	mov	r3, r1
 8013eca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d106      	bne.n	8013ee0 <pbuf_realloc+0x20>
 8013ed2:	4b3a      	ldr	r3, [pc, #232]	; (8013fbc <pbuf_realloc+0xfc>)
 8013ed4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013ed8:	4939      	ldr	r1, [pc, #228]	; (8013fc0 <pbuf_realloc+0x100>)
 8013eda:	483a      	ldr	r0, [pc, #232]	; (8013fc4 <pbuf_realloc+0x104>)
 8013edc:	f00d f9a6 	bl	802122c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	891b      	ldrh	r3, [r3, #8]
 8013ee4:	887a      	ldrh	r2, [r7, #2]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d263      	bcs.n	8013fb2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	891a      	ldrh	r2, [r3, #8]
 8013eee:	887b      	ldrh	r3, [r7, #2]
 8013ef0:	1ad3      	subs	r3, r2, r3
 8013ef2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013ef4:	887b      	ldrh	r3, [r7, #2]
 8013ef6:	817b      	strh	r3, [r7, #10]
  q = p;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013efc:	e018      	b.n	8013f30 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	895b      	ldrh	r3, [r3, #10]
 8013f02:	897a      	ldrh	r2, [r7, #10]
 8013f04:	1ad3      	subs	r3, r2, r3
 8013f06:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	891a      	ldrh	r2, [r3, #8]
 8013f0c:	893b      	ldrh	r3, [r7, #8]
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d106      	bne.n	8013f30 <pbuf_realloc+0x70>
 8013f22:	4b26      	ldr	r3, [pc, #152]	; (8013fbc <pbuf_realloc+0xfc>)
 8013f24:	f240 12af 	movw	r2, #431	; 0x1af
 8013f28:	4927      	ldr	r1, [pc, #156]	; (8013fc8 <pbuf_realloc+0x108>)
 8013f2a:	4826      	ldr	r0, [pc, #152]	; (8013fc4 <pbuf_realloc+0x104>)
 8013f2c:	f00d f97e 	bl	802122c <iprintf>
  while (rem_len > q->len) {
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	895b      	ldrh	r3, [r3, #10]
 8013f34:	897a      	ldrh	r2, [r7, #10]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d8e1      	bhi.n	8013efe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	7b1b      	ldrb	r3, [r3, #12]
 8013f3e:	f003 030f 	and.w	r3, r3, #15
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d121      	bne.n	8013f8a <pbuf_realloc+0xca>
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	895b      	ldrh	r3, [r3, #10]
 8013f4a:	897a      	ldrh	r2, [r7, #10]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d01c      	beq.n	8013f8a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	7b5b      	ldrb	r3, [r3, #13]
 8013f54:	f003 0302 	and.w	r3, r3, #2
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d116      	bne.n	8013f8a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	685a      	ldr	r2, [r3, #4]
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	1ad3      	subs	r3, r2, r3
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	897b      	ldrh	r3, [r7, #10]
 8013f68:	4413      	add	r3, r2
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	f7fe fec8 	bl	8012d04 <mem_trim>
 8013f74:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <pbuf_realloc+0xca>
 8013f7c:	4b0f      	ldr	r3, [pc, #60]	; (8013fbc <pbuf_realloc+0xfc>)
 8013f7e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013f82:	4912      	ldr	r1, [pc, #72]	; (8013fcc <pbuf_realloc+0x10c>)
 8013f84:	480f      	ldr	r0, [pc, #60]	; (8013fc4 <pbuf_realloc+0x104>)
 8013f86:	f00d f951 	bl	802122c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	897a      	ldrh	r2, [r7, #10]
 8013f8e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	895a      	ldrh	r2, [r3, #10]
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d004      	beq.n	8013faa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f000 f943 	bl	8014230 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2200      	movs	r2, #0
 8013fae:	601a      	str	r2, [r3, #0]
 8013fb0:	e000      	b.n	8013fb4 <pbuf_realloc+0xf4>
    return;
 8013fb2:	bf00      	nop

}
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	08025040 	.word	0x08025040
 8013fc0:	08025178 	.word	0x08025178
 8013fc4:	080250c0 	.word	0x080250c0
 8013fc8:	08025190 	.word	0x08025190
 8013fcc:	080251a8 	.word	0x080251a8

08013fd0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b086      	sub	sp, #24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d106      	bne.n	8013ff2 <pbuf_add_header_impl+0x22>
 8013fe4:	4b2b      	ldr	r3, [pc, #172]	; (8014094 <pbuf_add_header_impl+0xc4>)
 8013fe6:	f240 12df 	movw	r2, #479	; 0x1df
 8013fea:	492b      	ldr	r1, [pc, #172]	; (8014098 <pbuf_add_header_impl+0xc8>)
 8013fec:	482b      	ldr	r0, [pc, #172]	; (801409c <pbuf_add_header_impl+0xcc>)
 8013fee:	f00d f91d 	bl	802122c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d003      	beq.n	8014000 <pbuf_add_header_impl+0x30>
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ffe:	d301      	bcc.n	8014004 <pbuf_add_header_impl+0x34>
    return 1;
 8014000:	2301      	movs	r3, #1
 8014002:	e043      	b.n	801408c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d101      	bne.n	801400e <pbuf_add_header_impl+0x3e>
    return 0;
 801400a:	2300      	movs	r3, #0
 801400c:	e03e      	b.n	801408c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	891a      	ldrh	r2, [r3, #8]
 8014016:	8a7b      	ldrh	r3, [r7, #18]
 8014018:	4413      	add	r3, r2
 801401a:	b29b      	uxth	r3, r3
 801401c:	8a7a      	ldrh	r2, [r7, #18]
 801401e:	429a      	cmp	r2, r3
 8014020:	d901      	bls.n	8014026 <pbuf_add_header_impl+0x56>
    return 1;
 8014022:	2301      	movs	r3, #1
 8014024:	e032      	b.n	801408c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	7b1b      	ldrb	r3, [r3, #12]
 801402a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801402c:	8a3b      	ldrh	r3, [r7, #16]
 801402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00c      	beq.n	8014050 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	685a      	ldr	r2, [r3, #4]
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	425b      	negs	r3, r3
 801403e:	4413      	add	r3, r2
 8014040:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	3310      	adds	r3, #16
 8014046:	697a      	ldr	r2, [r7, #20]
 8014048:	429a      	cmp	r2, r3
 801404a:	d20d      	bcs.n	8014068 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801404c:	2301      	movs	r3, #1
 801404e:	e01d      	b.n	801408c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014050:	79fb      	ldrb	r3, [r7, #7]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d006      	beq.n	8014064 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	685a      	ldr	r2, [r3, #4]
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	425b      	negs	r3, r3
 801405e:	4413      	add	r3, r2
 8014060:	617b      	str	r3, [r7, #20]
 8014062:	e001      	b.n	8014068 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014064:	2301      	movs	r3, #1
 8014066:	e011      	b.n	801408c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	697a      	ldr	r2, [r7, #20]
 801406c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	895a      	ldrh	r2, [r3, #10]
 8014072:	8a7b      	ldrh	r3, [r7, #18]
 8014074:	4413      	add	r3, r2
 8014076:	b29a      	uxth	r2, r3
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	891a      	ldrh	r2, [r3, #8]
 8014080:	8a7b      	ldrh	r3, [r7, #18]
 8014082:	4413      	add	r3, r2
 8014084:	b29a      	uxth	r2, r3
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	811a      	strh	r2, [r3, #8]


  return 0;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3718      	adds	r7, #24
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}
 8014094:	08025040 	.word	0x08025040
 8014098:	080251c4 	.word	0x080251c4
 801409c:	080250c0 	.word	0x080250c0

080140a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80140aa:	2200      	movs	r2, #0
 80140ac:	6839      	ldr	r1, [r7, #0]
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f7ff ff8e 	bl	8013fd0 <pbuf_add_header_impl>
 80140b4:	4603      	mov	r3, r0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3708      	adds	r7, #8
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
	...

080140c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d106      	bne.n	80140de <pbuf_remove_header+0x1e>
 80140d0:	4b20      	ldr	r3, [pc, #128]	; (8014154 <pbuf_remove_header+0x94>)
 80140d2:	f240 224b 	movw	r2, #587	; 0x24b
 80140d6:	4920      	ldr	r1, [pc, #128]	; (8014158 <pbuf_remove_header+0x98>)
 80140d8:	4820      	ldr	r0, [pc, #128]	; (801415c <pbuf_remove_header+0x9c>)
 80140da:	f00d f8a7 	bl	802122c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d003      	beq.n	80140ec <pbuf_remove_header+0x2c>
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140ea:	d301      	bcc.n	80140f0 <pbuf_remove_header+0x30>
    return 1;
 80140ec:	2301      	movs	r3, #1
 80140ee:	e02c      	b.n	801414a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d101      	bne.n	80140fa <pbuf_remove_header+0x3a>
    return 0;
 80140f6:	2300      	movs	r3, #0
 80140f8:	e027      	b.n	801414a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	895b      	ldrh	r3, [r3, #10]
 8014102:	89fa      	ldrh	r2, [r7, #14]
 8014104:	429a      	cmp	r2, r3
 8014106:	d908      	bls.n	801411a <pbuf_remove_header+0x5a>
 8014108:	4b12      	ldr	r3, [pc, #72]	; (8014154 <pbuf_remove_header+0x94>)
 801410a:	f240 2255 	movw	r2, #597	; 0x255
 801410e:	4914      	ldr	r1, [pc, #80]	; (8014160 <pbuf_remove_header+0xa0>)
 8014110:	4812      	ldr	r0, [pc, #72]	; (801415c <pbuf_remove_header+0x9c>)
 8014112:	f00d f88b 	bl	802122c <iprintf>
 8014116:	2301      	movs	r3, #1
 8014118:	e017      	b.n	801414a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	685b      	ldr	r3, [r3, #4]
 801411e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	685a      	ldr	r2, [r3, #4]
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	441a      	add	r2, r3
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	895a      	ldrh	r2, [r3, #10]
 8014130:	89fb      	ldrh	r3, [r7, #14]
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	b29a      	uxth	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	891a      	ldrh	r2, [r3, #8]
 801413e:	89fb      	ldrh	r3, [r7, #14]
 8014140:	1ad3      	subs	r3, r2, r3
 8014142:	b29a      	uxth	r2, r3
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3710      	adds	r7, #16
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	08025040 	.word	0x08025040
 8014158:	080251c4 	.word	0x080251c4
 801415c:	080250c0 	.word	0x080250c0
 8014160:	080251d0 	.word	0x080251d0

08014164 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	460b      	mov	r3, r1
 801416e:	807b      	strh	r3, [r7, #2]
 8014170:	4613      	mov	r3, r2
 8014172:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014178:	2b00      	cmp	r3, #0
 801417a:	da08      	bge.n	801418e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801417c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014180:	425b      	negs	r3, r3
 8014182:	4619      	mov	r1, r3
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f7ff ff9b 	bl	80140c0 <pbuf_remove_header>
 801418a:	4603      	mov	r3, r0
 801418c:	e007      	b.n	801419e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801418e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014192:	787a      	ldrb	r2, [r7, #1]
 8014194:	4619      	mov	r1, r3
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f7ff ff1a 	bl	8013fd0 <pbuf_add_header_impl>
 801419c:	4603      	mov	r3, r0
  }
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3708      	adds	r7, #8
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}

080141a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	b082      	sub	sp, #8
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
 80141ae:	460b      	mov	r3, r1
 80141b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80141b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80141b6:	2201      	movs	r2, #1
 80141b8:	4619      	mov	r1, r3
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f7ff ffd2 	bl	8014164 <pbuf_header_impl>
 80141c0:	4603      	mov	r3, r0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3708      	adds	r7, #8
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 80141ca:	b580      	push	{r7, lr}
 80141cc:	b086      	sub	sp, #24
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
 80141d2:	460b      	mov	r3, r1
 80141d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 80141da:	887b      	ldrh	r3, [r7, #2]
 80141dc:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80141de:	e01c      	b.n	801421a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 80141e0:	697b      	ldr	r3, [r7, #20]
 80141e2:	895b      	ldrh	r3, [r3, #10]
 80141e4:	8a7a      	ldrh	r2, [r7, #18]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d310      	bcc.n	801420c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	895b      	ldrh	r3, [r3, #10]
 80141f2:	8a7a      	ldrh	r2, [r7, #18]
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2200      	movs	r2, #0
 8014202:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f000 f813 	bl	8014230 <pbuf_free>
 801420a:	e006      	b.n	801421a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801420c:	8a7b      	ldrh	r3, [r7, #18]
 801420e:	4619      	mov	r1, r3
 8014210:	6978      	ldr	r0, [r7, #20]
 8014212:	f7ff ff55 	bl	80140c0 <pbuf_remove_header>
      free_left = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801421a:	8a7b      	ldrh	r3, [r7, #18]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d002      	beq.n	8014226 <pbuf_free_header+0x5c>
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d1dc      	bne.n	80141e0 <pbuf_free_header+0x16>
    }
  }
  return p;
 8014226:	697b      	ldr	r3, [r7, #20]
}
 8014228:	4618      	mov	r0, r3
 801422a:	3718      	adds	r7, #24
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b088      	sub	sp, #32
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d10b      	bne.n	8014256 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d106      	bne.n	8014252 <pbuf_free+0x22>
 8014244:	4b3b      	ldr	r3, [pc, #236]	; (8014334 <pbuf_free+0x104>)
 8014246:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801424a:	493b      	ldr	r1, [pc, #236]	; (8014338 <pbuf_free+0x108>)
 801424c:	483b      	ldr	r0, [pc, #236]	; (801433c <pbuf_free+0x10c>)
 801424e:	f00c ffed 	bl	802122c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014252:	2300      	movs	r3, #0
 8014254:	e069      	b.n	801432a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014256:	2300      	movs	r3, #0
 8014258:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801425a:	e062      	b.n	8014322 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801425c:	f001 fd36 	bl	8015ccc <sys_arch_protect>
 8014260:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	7b9b      	ldrb	r3, [r3, #14]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d106      	bne.n	8014278 <pbuf_free+0x48>
 801426a:	4b32      	ldr	r3, [pc, #200]	; (8014334 <pbuf_free+0x104>)
 801426c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014270:	4933      	ldr	r1, [pc, #204]	; (8014340 <pbuf_free+0x110>)
 8014272:	4832      	ldr	r0, [pc, #200]	; (801433c <pbuf_free+0x10c>)
 8014274:	f00c ffda 	bl	802122c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	7b9b      	ldrb	r3, [r3, #14]
 801427c:	3b01      	subs	r3, #1
 801427e:	b2da      	uxtb	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	739a      	strb	r2, [r3, #14]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	7b9b      	ldrb	r3, [r3, #14]
 8014288:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801428a:	69b8      	ldr	r0, [r7, #24]
 801428c:	f001 fd2c 	bl	8015ce8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014290:	7dfb      	ldrb	r3, [r7, #23]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d143      	bne.n	801431e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	7b1b      	ldrb	r3, [r3, #12]
 80142a0:	f003 030f 	and.w	r3, r3, #15
 80142a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	7b5b      	ldrb	r3, [r3, #13]
 80142aa:	f003 0302 	and.w	r3, r3, #2
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d011      	beq.n	80142d6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	691b      	ldr	r3, [r3, #16]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d106      	bne.n	80142cc <pbuf_free+0x9c>
 80142be:	4b1d      	ldr	r3, [pc, #116]	; (8014334 <pbuf_free+0x104>)
 80142c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80142c4:	491f      	ldr	r1, [pc, #124]	; (8014344 <pbuf_free+0x114>)
 80142c6:	481d      	ldr	r0, [pc, #116]	; (801433c <pbuf_free+0x10c>)
 80142c8:	f00c ffb0 	bl	802122c <iprintf>
        pc->custom_free_function(p);
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	691b      	ldr	r3, [r3, #16]
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	4798      	blx	r3
 80142d4:	e01d      	b.n	8014312 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80142d6:	7bfb      	ldrb	r3, [r7, #15]
 80142d8:	2b02      	cmp	r3, #2
 80142da:	d104      	bne.n	80142e6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80142dc:	6879      	ldr	r1, [r7, #4]
 80142de:	200c      	movs	r0, #12
 80142e0:	f7ff f83e 	bl	8013360 <memp_free>
 80142e4:	e015      	b.n	8014312 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80142e6:	7bfb      	ldrb	r3, [r7, #15]
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d104      	bne.n	80142f6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80142ec:	6879      	ldr	r1, [r7, #4]
 80142ee:	200b      	movs	r0, #11
 80142f0:	f7ff f836 	bl	8013360 <memp_free>
 80142f4:	e00d      	b.n	8014312 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80142f6:	7bfb      	ldrb	r3, [r7, #15]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d103      	bne.n	8014304 <pbuf_free+0xd4>
          mem_free(p);
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7fe fc71 	bl	8012be4 <mem_free>
 8014302:	e006      	b.n	8014312 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014304:	4b0b      	ldr	r3, [pc, #44]	; (8014334 <pbuf_free+0x104>)
 8014306:	f240 320f 	movw	r2, #783	; 0x30f
 801430a:	490f      	ldr	r1, [pc, #60]	; (8014348 <pbuf_free+0x118>)
 801430c:	480b      	ldr	r0, [pc, #44]	; (801433c <pbuf_free+0x10c>)
 801430e:	f00c ff8d 	bl	802122c <iprintf>
        }
      }
      count++;
 8014312:	7ffb      	ldrb	r3, [r7, #31]
 8014314:	3301      	adds	r3, #1
 8014316:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	607b      	str	r3, [r7, #4]
 801431c:	e001      	b.n	8014322 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801431e:	2300      	movs	r3, #0
 8014320:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d199      	bne.n	801425c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014328:	7ffb      	ldrb	r3, [r7, #31]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3720      	adds	r7, #32
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	08025040 	.word	0x08025040
 8014338:	080251c4 	.word	0x080251c4
 801433c:	080250c0 	.word	0x080250c0
 8014340:	080251f0 	.word	0x080251f0
 8014344:	08025208 	.word	0x08025208
 8014348:	0802522c 	.word	0x0802522c

0801434c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801434c:	b480      	push	{r7}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014354:	2300      	movs	r3, #0
 8014356:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014358:	e005      	b.n	8014366 <pbuf_clen+0x1a>
    ++len;
 801435a:	89fb      	ldrh	r3, [r7, #14]
 801435c:	3301      	adds	r3, #1
 801435e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d1f6      	bne.n	801435a <pbuf_clen+0xe>
  }
  return len;
 801436c:	89fb      	ldrh	r3, [r7, #14]
}
 801436e:	4618      	mov	r0, r3
 8014370:	3714      	adds	r7, #20
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr
	...

0801437c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d016      	beq.n	80143b8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801438a:	f001 fc9f 	bl	8015ccc <sys_arch_protect>
 801438e:	60f8      	str	r0, [r7, #12]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	7b9b      	ldrb	r3, [r3, #14]
 8014394:	3301      	adds	r3, #1
 8014396:	b2da      	uxtb	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	739a      	strb	r2, [r3, #14]
 801439c:	68f8      	ldr	r0, [r7, #12]
 801439e:	f001 fca3 	bl	8015ce8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	7b9b      	ldrb	r3, [r3, #14]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d106      	bne.n	80143b8 <pbuf_ref+0x3c>
 80143aa:	4b05      	ldr	r3, [pc, #20]	; (80143c0 <pbuf_ref+0x44>)
 80143ac:	f240 3242 	movw	r2, #834	; 0x342
 80143b0:	4904      	ldr	r1, [pc, #16]	; (80143c4 <pbuf_ref+0x48>)
 80143b2:	4805      	ldr	r0, [pc, #20]	; (80143c8 <pbuf_ref+0x4c>)
 80143b4:	f00c ff3a 	bl	802122c <iprintf>
  }
}
 80143b8:	bf00      	nop
 80143ba:	3710      	adds	r7, #16
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	08025040 	.word	0x08025040
 80143c4:	08025240 	.word	0x08025240
 80143c8:	080250c0 	.word	0x080250c0

080143cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d002      	beq.n	80143e2 <pbuf_cat+0x16>
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d107      	bne.n	80143f2 <pbuf_cat+0x26>
 80143e2:	4b20      	ldr	r3, [pc, #128]	; (8014464 <pbuf_cat+0x98>)
 80143e4:	f240 3259 	movw	r2, #857	; 0x359
 80143e8:	491f      	ldr	r1, [pc, #124]	; (8014468 <pbuf_cat+0x9c>)
 80143ea:	4820      	ldr	r0, [pc, #128]	; (801446c <pbuf_cat+0xa0>)
 80143ec:	f00c ff1e 	bl	802122c <iprintf>
 80143f0:	e034      	b.n	801445c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	60fb      	str	r3, [r7, #12]
 80143f6:	e00a      	b.n	801440e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	891a      	ldrh	r2, [r3, #8]
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	891b      	ldrh	r3, [r3, #8]
 8014400:	4413      	add	r3, r2
 8014402:	b29a      	uxth	r2, r3
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	60fb      	str	r3, [r7, #12]
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d1f0      	bne.n	80143f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	891a      	ldrh	r2, [r3, #8]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	895b      	ldrh	r3, [r3, #10]
 801441e:	429a      	cmp	r2, r3
 8014420:	d006      	beq.n	8014430 <pbuf_cat+0x64>
 8014422:	4b10      	ldr	r3, [pc, #64]	; (8014464 <pbuf_cat+0x98>)
 8014424:	f240 3262 	movw	r2, #866	; 0x362
 8014428:	4911      	ldr	r1, [pc, #68]	; (8014470 <pbuf_cat+0xa4>)
 801442a:	4810      	ldr	r0, [pc, #64]	; (801446c <pbuf_cat+0xa0>)
 801442c:	f00c fefe 	bl	802122c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d006      	beq.n	8014446 <pbuf_cat+0x7a>
 8014438:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <pbuf_cat+0x98>)
 801443a:	f240 3263 	movw	r2, #867	; 0x363
 801443e:	490d      	ldr	r1, [pc, #52]	; (8014474 <pbuf_cat+0xa8>)
 8014440:	480a      	ldr	r0, [pc, #40]	; (801446c <pbuf_cat+0xa0>)
 8014442:	f00c fef3 	bl	802122c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	891a      	ldrh	r2, [r3, #8]
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	891b      	ldrh	r3, [r3, #8]
 801444e:	4413      	add	r3, r2
 8014450:	b29a      	uxth	r2, r3
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	683a      	ldr	r2, [r7, #0]
 801445a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	08025040 	.word	0x08025040
 8014468:	08025254 	.word	0x08025254
 801446c:	080250c0 	.word	0x080250c0
 8014470:	0802528c 	.word	0x0802528c
 8014474:	080252bc 	.word	0x080252bc

08014478 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014482:	6839      	ldr	r1, [r7, #0]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7ff ffa1 	bl	80143cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801448a:	6838      	ldr	r0, [r7, #0]
 801448c:	f7ff ff76 	bl	801437c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014490:	bf00      	nop
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b086      	sub	sp, #24
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80144a2:	2300      	movs	r3, #0
 80144a4:	617b      	str	r3, [r7, #20]
 80144a6:	2300      	movs	r3, #0
 80144a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d008      	beq.n	80144c2 <pbuf_copy+0x2a>
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d005      	beq.n	80144c2 <pbuf_copy+0x2a>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	891a      	ldrh	r2, [r3, #8]
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	891b      	ldrh	r3, [r3, #8]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d209      	bcs.n	80144d6 <pbuf_copy+0x3e>
 80144c2:	4b57      	ldr	r3, [pc, #348]	; (8014620 <pbuf_copy+0x188>)
 80144c4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80144c8:	4956      	ldr	r1, [pc, #344]	; (8014624 <pbuf_copy+0x18c>)
 80144ca:	4857      	ldr	r0, [pc, #348]	; (8014628 <pbuf_copy+0x190>)
 80144cc:	f00c feae 	bl	802122c <iprintf>
 80144d0:	f06f 030f 	mvn.w	r3, #15
 80144d4:	e09f      	b.n	8014616 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	895b      	ldrh	r3, [r3, #10]
 80144da:	461a      	mov	r2, r3
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	1ad2      	subs	r2, r2, r3
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	895b      	ldrh	r3, [r3, #10]
 80144e4:	4619      	mov	r1, r3
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	1acb      	subs	r3, r1, r3
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d306      	bcc.n	80144fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	895b      	ldrh	r3, [r3, #10]
 80144f2:	461a      	mov	r2, r3
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	60fb      	str	r3, [r7, #12]
 80144fa:	e005      	b.n	8014508 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	895b      	ldrh	r3, [r3, #10]
 8014500:	461a      	mov	r2, r3
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	685a      	ldr	r2, [r3, #4]
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	18d0      	adds	r0, r2, r3
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	685a      	ldr	r2, [r3, #4]
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	4413      	add	r3, r2
 8014518:	68fa      	ldr	r2, [r7, #12]
 801451a:	4619      	mov	r1, r3
 801451c:	f00c fa14 	bl	8020948 <memcpy>
    offset_to += len;
 8014520:	697a      	ldr	r2, [r7, #20]
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	4413      	add	r3, r2
 8014526:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014528:	693a      	ldr	r2, [r7, #16]
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	4413      	add	r3, r2
 801452e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	895b      	ldrh	r3, [r3, #10]
 8014534:	461a      	mov	r2, r3
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	4293      	cmp	r3, r2
 801453a:	d906      	bls.n	801454a <pbuf_copy+0xb2>
 801453c:	4b38      	ldr	r3, [pc, #224]	; (8014620 <pbuf_copy+0x188>)
 801453e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014542:	493a      	ldr	r1, [pc, #232]	; (801462c <pbuf_copy+0x194>)
 8014544:	4838      	ldr	r0, [pc, #224]	; (8014628 <pbuf_copy+0x190>)
 8014546:	f00c fe71 	bl	802122c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	895b      	ldrh	r3, [r3, #10]
 801454e:	461a      	mov	r2, r3
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	4293      	cmp	r3, r2
 8014554:	d906      	bls.n	8014564 <pbuf_copy+0xcc>
 8014556:	4b32      	ldr	r3, [pc, #200]	; (8014620 <pbuf_copy+0x188>)
 8014558:	f240 32da 	movw	r2, #986	; 0x3da
 801455c:	4934      	ldr	r1, [pc, #208]	; (8014630 <pbuf_copy+0x198>)
 801455e:	4832      	ldr	r0, [pc, #200]	; (8014628 <pbuf_copy+0x190>)
 8014560:	f00c fe64 	bl	802122c <iprintf>
    if (offset_from >= p_from->len) {
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	895b      	ldrh	r3, [r3, #10]
 8014568:	461a      	mov	r2, r3
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	4293      	cmp	r3, r2
 801456e:	d304      	bcc.n	801457a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014570:	2300      	movs	r3, #0
 8014572:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	895b      	ldrh	r3, [r3, #10]
 801457e:	461a      	mov	r2, r3
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	4293      	cmp	r3, r2
 8014584:	d114      	bne.n	80145b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d10c      	bne.n	80145b0 <pbuf_copy+0x118>
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d009      	beq.n	80145b0 <pbuf_copy+0x118>
 801459c:	4b20      	ldr	r3, [pc, #128]	; (8014620 <pbuf_copy+0x188>)
 801459e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80145a2:	4924      	ldr	r1, [pc, #144]	; (8014634 <pbuf_copy+0x19c>)
 80145a4:	4820      	ldr	r0, [pc, #128]	; (8014628 <pbuf_copy+0x190>)
 80145a6:	f00c fe41 	bl	802122c <iprintf>
 80145aa:	f06f 030f 	mvn.w	r3, #15
 80145ae:	e032      	b.n	8014616 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d013      	beq.n	80145de <pbuf_copy+0x146>
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	895a      	ldrh	r2, [r3, #10]
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	891b      	ldrh	r3, [r3, #8]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d10d      	bne.n	80145de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d009      	beq.n	80145de <pbuf_copy+0x146>
 80145ca:	4b15      	ldr	r3, [pc, #84]	; (8014620 <pbuf_copy+0x188>)
 80145cc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80145d0:	4919      	ldr	r1, [pc, #100]	; (8014638 <pbuf_copy+0x1a0>)
 80145d2:	4815      	ldr	r0, [pc, #84]	; (8014628 <pbuf_copy+0x190>)
 80145d4:	f00c fe2a 	bl	802122c <iprintf>
 80145d8:	f06f 0305 	mvn.w	r3, #5
 80145dc:	e01b      	b.n	8014616 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d013      	beq.n	801460c <pbuf_copy+0x174>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	895a      	ldrh	r2, [r3, #10]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	891b      	ldrh	r3, [r3, #8]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d10d      	bne.n	801460c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d009      	beq.n	801460c <pbuf_copy+0x174>
 80145f8:	4b09      	ldr	r3, [pc, #36]	; (8014620 <pbuf_copy+0x188>)
 80145fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80145fe:	490e      	ldr	r1, [pc, #56]	; (8014638 <pbuf_copy+0x1a0>)
 8014600:	4809      	ldr	r0, [pc, #36]	; (8014628 <pbuf_copy+0x190>)
 8014602:	f00c fe13 	bl	802122c <iprintf>
 8014606:	f06f 0305 	mvn.w	r3, #5
 801460a:	e004      	b.n	8014616 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	f47f af61 	bne.w	80144d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014614:	2300      	movs	r3, #0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3718      	adds	r7, #24
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	08025040 	.word	0x08025040
 8014624:	08025308 	.word	0x08025308
 8014628:	080250c0 	.word	0x080250c0
 801462c:	08025338 	.word	0x08025338
 8014630:	08025350 	.word	0x08025350
 8014634:	0802536c 	.word	0x0802536c
 8014638:	0802537c 	.word	0x0802537c

0801463c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b088      	sub	sp, #32
 8014640:	af00      	add	r7, sp, #0
 8014642:	60f8      	str	r0, [r7, #12]
 8014644:	60b9      	str	r1, [r7, #8]
 8014646:	4611      	mov	r1, r2
 8014648:	461a      	mov	r2, r3
 801464a:	460b      	mov	r3, r1
 801464c:	80fb      	strh	r3, [r7, #6]
 801464e:	4613      	mov	r3, r2
 8014650:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014652:	2300      	movs	r3, #0
 8014654:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d108      	bne.n	8014672 <pbuf_copy_partial+0x36>
 8014660:	4b2b      	ldr	r3, [pc, #172]	; (8014710 <pbuf_copy_partial+0xd4>)
 8014662:	f240 420a 	movw	r2, #1034	; 0x40a
 8014666:	492b      	ldr	r1, [pc, #172]	; (8014714 <pbuf_copy_partial+0xd8>)
 8014668:	482b      	ldr	r0, [pc, #172]	; (8014718 <pbuf_copy_partial+0xdc>)
 801466a:	f00c fddf 	bl	802122c <iprintf>
 801466e:	2300      	movs	r3, #0
 8014670:	e04a      	b.n	8014708 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d108      	bne.n	801468a <pbuf_copy_partial+0x4e>
 8014678:	4b25      	ldr	r3, [pc, #148]	; (8014710 <pbuf_copy_partial+0xd4>)
 801467a:	f240 420b 	movw	r2, #1035	; 0x40b
 801467e:	4927      	ldr	r1, [pc, #156]	; (801471c <pbuf_copy_partial+0xe0>)
 8014680:	4825      	ldr	r0, [pc, #148]	; (8014718 <pbuf_copy_partial+0xdc>)
 8014682:	f00c fdd3 	bl	802122c <iprintf>
 8014686:	2300      	movs	r3, #0
 8014688:	e03e      	b.n	8014708 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	61fb      	str	r3, [r7, #28]
 801468e:	e034      	b.n	80146fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014690:	88bb      	ldrh	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <pbuf_copy_partial+0x70>
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	895b      	ldrh	r3, [r3, #10]
 801469a:	88ba      	ldrh	r2, [r7, #4]
 801469c:	429a      	cmp	r2, r3
 801469e:	d305      	bcc.n	80146ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	895b      	ldrh	r3, [r3, #10]
 80146a4:	88ba      	ldrh	r2, [r7, #4]
 80146a6:	1ad3      	subs	r3, r2, r3
 80146a8:	80bb      	strh	r3, [r7, #4]
 80146aa:	e023      	b.n	80146f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	895a      	ldrh	r2, [r3, #10]
 80146b0:	88bb      	ldrh	r3, [r7, #4]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80146b6:	8b3a      	ldrh	r2, [r7, #24]
 80146b8:	88fb      	ldrh	r3, [r7, #6]
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d901      	bls.n	80146c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80146be:	88fb      	ldrh	r3, [r7, #6]
 80146c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80146c2:	8b7b      	ldrh	r3, [r7, #26]
 80146c4:	68ba      	ldr	r2, [r7, #8]
 80146c6:	18d0      	adds	r0, r2, r3
 80146c8:	69fb      	ldr	r3, [r7, #28]
 80146ca:	685a      	ldr	r2, [r3, #4]
 80146cc:	88bb      	ldrh	r3, [r7, #4]
 80146ce:	4413      	add	r3, r2
 80146d0:	8b3a      	ldrh	r2, [r7, #24]
 80146d2:	4619      	mov	r1, r3
 80146d4:	f00c f938 	bl	8020948 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80146d8:	8afa      	ldrh	r2, [r7, #22]
 80146da:	8b3b      	ldrh	r3, [r7, #24]
 80146dc:	4413      	add	r3, r2
 80146de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80146e0:	8b7a      	ldrh	r2, [r7, #26]
 80146e2:	8b3b      	ldrh	r3, [r7, #24]
 80146e4:	4413      	add	r3, r2
 80146e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80146e8:	88fa      	ldrh	r2, [r7, #6]
 80146ea:	8b3b      	ldrh	r3, [r7, #24]
 80146ec:	1ad3      	subs	r3, r2, r3
 80146ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80146f0:	2300      	movs	r3, #0
 80146f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80146f4:	69fb      	ldr	r3, [r7, #28]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	61fb      	str	r3, [r7, #28]
 80146fa:	88fb      	ldrh	r3, [r7, #6]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d002      	beq.n	8014706 <pbuf_copy_partial+0xca>
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d1c4      	bne.n	8014690 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014706:	8afb      	ldrh	r3, [r7, #22]
}
 8014708:	4618      	mov	r0, r3
 801470a:	3720      	adds	r7, #32
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	08025040 	.word	0x08025040
 8014714:	080253a8 	.word	0x080253a8
 8014718:	080250c0 	.word	0x080250c0
 801471c:	080253c8 	.word	0x080253c8

08014720 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	4603      	mov	r3, r0
 8014728:	603a      	str	r2, [r7, #0]
 801472a:	71fb      	strb	r3, [r7, #7]
 801472c:	460b      	mov	r3, r1
 801472e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	8919      	ldrh	r1, [r3, #8]
 8014734:	88ba      	ldrh	r2, [r7, #4]
 8014736:	79fb      	ldrb	r3, [r7, #7]
 8014738:	4618      	mov	r0, r3
 801473a:	f7ff fa63 	bl	8013c04 <pbuf_alloc>
 801473e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d101      	bne.n	801474a <pbuf_clone+0x2a>
    return NULL;
 8014746:	2300      	movs	r3, #0
 8014748:	e011      	b.n	801476e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f7ff fea3 	bl	8014498 <pbuf_copy>
 8014752:	4603      	mov	r3, r0
 8014754:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014756:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d006      	beq.n	801476c <pbuf_clone+0x4c>
 801475e:	4b06      	ldr	r3, [pc, #24]	; (8014778 <pbuf_clone+0x58>)
 8014760:	f240 5224 	movw	r2, #1316	; 0x524
 8014764:	4905      	ldr	r1, [pc, #20]	; (801477c <pbuf_clone+0x5c>)
 8014766:	4806      	ldr	r0, [pc, #24]	; (8014780 <pbuf_clone+0x60>)
 8014768:	f00c fd60 	bl	802122c <iprintf>
  return q;
 801476c:	68fb      	ldr	r3, [r7, #12]
}
 801476e:	4618      	mov	r0, r3
 8014770:	3710      	adds	r7, #16
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop
 8014778:	08025040 	.word	0x08025040
 801477c:	080254d4 	.word	0x080254d4
 8014780:	080250c0 	.word	0x080250c0

08014784 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8014784:	b480      	push	{r7}
 8014786:	b085      	sub	sp, #20
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2b00      	cmp	r3, #0
 8014794:	db02      	blt.n	801479c <tryget_socket_unconn_nouse+0x18>
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2b03      	cmp	r3, #3
 801479a:	dd01      	ble.n	80147a0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 801479c:	2300      	movs	r3, #0
 801479e:	e003      	b.n	80147a8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	011b      	lsls	r3, r3, #4
 80147a4:	4a03      	ldr	r2, [pc, #12]	; (80147b4 <tryget_socket_unconn_nouse+0x30>)
 80147a6:	4413      	add	r3, r2
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3714      	adds	r7, #20
 80147ac:	46bd      	mov	sp, r7
 80147ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b2:	4770      	bx	lr
 80147b4:	24040720 	.word	0x24040720

080147b8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b084      	sub	sp, #16
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff ffdf 	bl	8014784 <tryget_socket_unconn_nouse>
 80147c6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80147c8:	68fb      	ldr	r3, [r7, #12]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3710      	adds	r7, #16
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b084      	sub	sp, #16
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7ff ffec 	bl	80147b8 <tryget_socket_unconn>
 80147e0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d005      	beq.n	80147f4 <tryget_socket+0x22>
    if (sock->conn) {
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d001      	beq.n	80147f4 <tryget_socket+0x22>
      return sock;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	e000      	b.n	80147f6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3710      	adds	r7, #16
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
	...

08014800 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7ff ffe2 	bl	80147d2 <tryget_socket>
 801480e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d104      	bne.n	8014820 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8014816:	4b05      	ldr	r3, [pc, #20]	; (801482c <get_socket+0x2c>)
 8014818:	2209      	movs	r2, #9
 801481a:	601a      	str	r2, [r3, #0]
    return NULL;
 801481c:	2300      	movs	r3, #0
 801481e:	e000      	b.n	8014822 <get_socket+0x22>
  }
  return sock;
 8014820:	68fb      	ldr	r3, [r7, #12]
}
 8014822:	4618      	mov	r0, r3
 8014824:	3710      	adds	r7, #16
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	24048e80 	.word	0x24048e80

08014830 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801483a:	2300      	movs	r3, #0
 801483c:	60fb      	str	r3, [r7, #12]
 801483e:	e052      	b.n	80148e6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8014840:	f001 fa44 	bl	8015ccc <sys_arch_protect>
 8014844:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8014846:	4a2c      	ldr	r2, [pc, #176]	; (80148f8 <alloc_socket+0xc8>)
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	011b      	lsls	r3, r3, #4
 801484c:	4413      	add	r3, r2
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d142      	bne.n	80148da <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8014854:	4a28      	ldr	r2, [pc, #160]	; (80148f8 <alloc_socket+0xc8>)
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	011b      	lsls	r3, r3, #4
 801485a:	4413      	add	r3, r2
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8014860:	68b8      	ldr	r0, [r7, #8]
 8014862:	f001 fa41 	bl	8015ce8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8014866:	4a24      	ldr	r2, [pc, #144]	; (80148f8 <alloc_socket+0xc8>)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	011b      	lsls	r3, r3, #4
 801486c:	4413      	add	r3, r2
 801486e:	3304      	adds	r3, #4
 8014870:	2200      	movs	r2, #0
 8014872:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8014874:	4a20      	ldr	r2, [pc, #128]	; (80148f8 <alloc_socket+0xc8>)
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	011b      	lsls	r3, r3, #4
 801487a:	4413      	add	r3, r2
 801487c:	330e      	adds	r3, #14
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d006      	beq.n	8014892 <alloc_socket+0x62>
 8014884:	4b1d      	ldr	r3, [pc, #116]	; (80148fc <alloc_socket+0xcc>)
 8014886:	f240 220e 	movw	r2, #526	; 0x20e
 801488a:	491d      	ldr	r1, [pc, #116]	; (8014900 <alloc_socket+0xd0>)
 801488c:	481d      	ldr	r0, [pc, #116]	; (8014904 <alloc_socket+0xd4>)
 801488e:	f00c fccd 	bl	802122c <iprintf>
      sockets[i].rcvevent   = 0;
 8014892:	4a19      	ldr	r2, [pc, #100]	; (80148f8 <alloc_socket+0xc8>)
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	011b      	lsls	r3, r3, #4
 8014898:	4413      	add	r3, r2
 801489a:	3308      	adds	r3, #8
 801489c:	2200      	movs	r2, #0
 801489e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80148a8:	2b10      	cmp	r3, #16
 80148aa:	d102      	bne.n	80148b2 <alloc_socket+0x82>
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d001      	beq.n	80148b6 <alloc_socket+0x86>
 80148b2:	2301      	movs	r3, #1
 80148b4:	e000      	b.n	80148b8 <alloc_socket+0x88>
 80148b6:	2300      	movs	r3, #0
 80148b8:	b299      	uxth	r1, r3
 80148ba:	4a0f      	ldr	r2, [pc, #60]	; (80148f8 <alloc_socket+0xc8>)
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	011b      	lsls	r3, r3, #4
 80148c0:	4413      	add	r3, r2
 80148c2:	330a      	adds	r3, #10
 80148c4:	460a      	mov	r2, r1
 80148c6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80148c8:	4a0b      	ldr	r2, [pc, #44]	; (80148f8 <alloc_socket+0xc8>)
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	011b      	lsls	r3, r3, #4
 80148ce:	4413      	add	r3, r2
 80148d0:	330c      	adds	r3, #12
 80148d2:	2200      	movs	r2, #0
 80148d4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	e00a      	b.n	80148f0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80148da:	68b8      	ldr	r0, [r7, #8]
 80148dc:	f001 fa04 	bl	8015ce8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	3301      	adds	r3, #1
 80148e4:	60fb      	str	r3, [r7, #12]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2b03      	cmp	r3, #3
 80148ea:	dda9      	ble.n	8014840 <alloc_socket+0x10>
  }
  return -1;
 80148ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	24040720 	.word	0x24040720
 80148fc:	080254e8 	.word	0x080254e8
 8014900:	08025538 	.word	0x08025538
 8014904:	08025558 	.word	0x08025558

08014908 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8014908:	b480      	push	{r7}
 801490a:	b085      	sub	sp, #20
 801490c:	af00      	add	r7, sp, #0
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	607a      	str	r2, [r7, #4]
 8014914:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	6852      	ldr	r2, [r2, #4]
 801491c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2200      	movs	r2, #0
 8014922:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2200      	movs	r2, #0
 8014930:	601a      	str	r2, [r3, #0]
  return 1;
 8014932:	2301      	movs	r3, #1
}
 8014934:	4618      	mov	r0, r3
 8014936:	3714      	adds	r7, #20
 8014938:	46bd      	mov	sp, r7
 801493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493e:	4770      	bx	lr

08014940 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d00d      	beq.n	8014970 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d005      	beq.n	8014966 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	4618      	mov	r0, r3
 8014960:	f7ff fc66 	bl	8014230 <pbuf_free>
 8014964:	e004      	b.n	8014970 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4618      	mov	r0, r3
 801496c:	f7fe fd22 	bl	80133b4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d002      	beq.n	801497c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8014976:	68b8      	ldr	r0, [r7, #8]
 8014978:	f7f9 fa0e 	bl	800dd98 <netconn_delete>
  }
}
 801497c:	bf00      	nop
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}

08014984 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 801498e:	f001 f99d 	bl	8015ccc <sys_arch_protect>
 8014992:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8014994:	f107 0308 	add.w	r3, r7, #8
 8014998:	f107 020c 	add.w	r2, r7, #12
 801499c:	6839      	ldr	r1, [r7, #0]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f7ff ffb2 	bl	8014908 <free_socket_locked>
 80149a4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80149a6:	6978      	ldr	r0, [r7, #20]
 80149a8:	f001 f99e 	bl	8015ce8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80149ac:	693b      	ldr	r3, [r7, #16]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d006      	beq.n	80149c0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f107 0208 	add.w	r2, r7, #8
 80149b8:	4619      	mov	r1, r3
 80149ba:	6838      	ldr	r0, [r7, #0]
 80149bc:	f7ff ffc0 	bl	8014940 <free_socket_free_elements>
  }
}
 80149c0:	bf00      	nop
 80149c2:	3718      	adds	r7, #24
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}

080149c8 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b086      	sub	sp, #24
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80149d0:	2300      	movs	r3, #0
 80149d2:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f7ff ff13 	bl	8014800 <get_socket>
 80149da:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d102      	bne.n	80149e8 <lwip_close+0x20>
    return -1;
 80149e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149e6:	e039      	b.n	8014a5c <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d00b      	beq.n	8014a08 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149fa:	2b10      	cmp	r3, #16
 80149fc:	bf0c      	ite	eq
 80149fe:	2301      	moveq	r3, #1
 8014a00:	2300      	movne	r3, #0
 8014a02:	b2db      	uxtb	r3, r3
 8014a04:	617b      	str	r3, [r7, #20]
 8014a06:	e00a      	b.n	8014a1e <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d006      	beq.n	8014a1e <lwip_close+0x56>
 8014a10:	4b14      	ldr	r3, [pc, #80]	; (8014a64 <lwip_close+0x9c>)
 8014a12:	f44f 7245 	mov.w	r2, #788	; 0x314
 8014a16:	4914      	ldr	r1, [pc, #80]	; (8014a68 <lwip_close+0xa0>)
 8014a18:	4814      	ldr	r0, [pc, #80]	; (8014a6c <lwip_close+0xa4>)
 8014a1a:	f00c fc07 	bl	802122c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7f9 f994 	bl	800dd50 <netconn_prepare_delete>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d00e      	beq.n	8014a52 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8014a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7fb fa7b 	bl	800ff34 <err_to_errno>
 8014a3e:	60b8      	str	r0, [r7, #8]
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d002      	beq.n	8014a4c <lwip_close+0x84>
 8014a46:	4a0a      	ldr	r2, [pc, #40]	; (8014a70 <lwip_close+0xa8>)
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8014a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a50:	e004      	b.n	8014a5c <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8014a52:	6979      	ldr	r1, [r7, #20]
 8014a54:	6938      	ldr	r0, [r7, #16]
 8014a56:	f7ff ff95 	bl	8014984 <free_socket>
  set_errno(0);
  return 0;
 8014a5a:	2300      	movs	r3, #0
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3718      	adds	r7, #24
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	080254e8 	.word	0x080254e8
 8014a68:	080255c4 	.word	0x080255c4
 8014a6c:	08025558 	.word	0x08025558
 8014a70:	24048e80 	.word	0x24048e80

08014a74 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b08c      	sub	sp, #48	; 0x30
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	60b9      	str	r1, [r7, #8]
 8014a7e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f7ff febd 	bl	8014800 <get_socket>
 8014a86:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8014a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d102      	bne.n	8014a94 <lwip_connect+0x20>
    return -1;
 8014a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a92:	e062      	b.n	8014b5a <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	785b      	ldrb	r3, [r3, #1]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d108      	bne.n	8014aae <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8014a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7f9 fa1f 	bl	800dee4 <netconn_disconnect>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014aac:	e039      	b.n	8014b22 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2b10      	cmp	r3, #16
 8014ab2:	d10c      	bne.n	8014ace <lwip_connect+0x5a>
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	785b      	ldrb	r3, [r3, #1]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d003      	beq.n	8014ac4 <lwip_connect+0x50>
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	785b      	ldrb	r3, [r3, #1]
 8014ac0:	2b02      	cmp	r3, #2
 8014ac2:	d104      	bne.n	8014ace <lwip_connect+0x5a>
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	f003 0303 	and.w	r3, r3, #3
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d014      	beq.n	8014af8 <lwip_connect+0x84>
 8014ace:	4b25      	ldr	r3, [pc, #148]	; (8014b64 <lwip_connect+0xf0>)
 8014ad0:	f240 3247 	movw	r2, #839	; 0x347
 8014ad4:	4924      	ldr	r1, [pc, #144]	; (8014b68 <lwip_connect+0xf4>)
 8014ad6:	4825      	ldr	r0, [pc, #148]	; (8014b6c <lwip_connect+0xf8>)
 8014ad8:	f00c fba8 	bl	802122c <iprintf>
 8014adc:	f06f 000f 	mvn.w	r0, #15
 8014ae0:	f7fb fa28 	bl	800ff34 <err_to_errno>
 8014ae4:	6238      	str	r0, [r7, #32]
 8014ae6:	6a3b      	ldr	r3, [r7, #32]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <lwip_connect+0x7e>
 8014aec:	4a20      	ldr	r2, [pc, #128]	; (8014b70 <lwip_connect+0xfc>)
 8014aee:	6a3b      	ldr	r3, [r7, #32]
 8014af0:	6013      	str	r3, [r2, #0]
 8014af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014af6:	e030      	b.n	8014b5a <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	617b      	str	r3, [r7, #20]
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	885b      	ldrh	r3, [r3, #2]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fb f9e8 	bl	800fed8 <lwip_htons>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8014b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014b12:	f107 0114 	add.w	r1, r7, #20
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7f9 f9ac 	bl	800de74 <netconn_connect>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8014b22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00e      	beq.n	8014b48 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8014b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fb fa00 	bl	800ff34 <err_to_errno>
 8014b34:	61b8      	str	r0, [r7, #24]
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d002      	beq.n	8014b42 <lwip_connect+0xce>
 8014b3c:	4a0c      	ldr	r2, [pc, #48]	; (8014b70 <lwip_connect+0xfc>)
 8014b3e:	69bb      	ldr	r3, [r7, #24]
 8014b40:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8014b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b46:	e008      	b.n	8014b5a <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8014b48:	2300      	movs	r3, #0
 8014b4a:	61fb      	str	r3, [r7, #28]
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d002      	beq.n	8014b58 <lwip_connect+0xe4>
 8014b52:	4a07      	ldr	r2, [pc, #28]	; (8014b70 <lwip_connect+0xfc>)
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8014b58:	2300      	movs	r3, #0
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3730      	adds	r7, #48	; 0x30
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	080254e8 	.word	0x080254e8
 8014b68:	080255dc 	.word	0x080255dc
 8014b6c:	08025558 	.word	0x08025558
 8014b70:	24048e80 	.word	0x24048e80

08014b74 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b08c      	sub	sp, #48	; 0x30
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8014b82:	2308      	movs	r3, #8
 8014b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	db01      	blt.n	8014b96 <lwip_recv_tcp+0x22>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	e001      	b.n	8014b9a <lwip_recv_tcp+0x26>
 8014b96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b9a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d106      	bne.n	8014bb0 <lwip_recv_tcp+0x3c>
 8014ba2:	4b74      	ldr	r3, [pc, #464]	; (8014d74 <lwip_recv_tcp+0x200>)
 8014ba4:	f240 329e 	movw	r2, #926	; 0x39e
 8014ba8:	4973      	ldr	r1, [pc, #460]	; (8014d78 <lwip_recv_tcp+0x204>)
 8014baa:	4874      	ldr	r0, [pc, #464]	; (8014d7c <lwip_recv_tcp+0x208>)
 8014bac:	f00c fb3e 	bl	802122c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014bba:	2b10      	cmp	r3, #16
 8014bbc:	d006      	beq.n	8014bcc <lwip_recv_tcp+0x58>
 8014bbe:	4b6d      	ldr	r3, [pc, #436]	; (8014d74 <lwip_recv_tcp+0x200>)
 8014bc0:	f240 329f 	movw	r2, #927	; 0x39f
 8014bc4:	496e      	ldr	r1, [pc, #440]	; (8014d80 <lwip_recv_tcp+0x20c>)
 8014bc6:	486d      	ldr	r0, [pc, #436]	; (8014d7c <lwip_recv_tcp+0x208>)
 8014bc8:	f00c fb30 	bl	802122c <iprintf>

  if (flags & MSG_DONTWAIT) {
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	f003 0308 	and.w	r3, r3, #8
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d005      	beq.n	8014be2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8014bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bda:	f043 0304 	orr.w	r3, r3, #4
 8014bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d003      	beq.n	8014bf2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	617b      	str	r3, [r7, #20]
 8014bf0:	e036      	b.n	8014c60 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014bfa:	f107 0114 	add.w	r1, r7, #20
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7f9 fb44 	bl	800e28c <netconn_recv_tcp_pbuf_flags>
 8014c04:	4603      	mov	r3, r0
 8014c06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8014c0a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d019      	beq.n	8014c46 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8014c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f300 808d 	bgt.w	8014d34 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8014c1a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7fb f988 	bl	800ff34 <err_to_errno>
 8014c24:	61f8      	str	r0, [r7, #28]
 8014c26:	69fb      	ldr	r3, [r7, #28]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <lwip_recv_tcp+0xbe>
 8014c2c:	4a55      	ldr	r2, [pc, #340]	; (8014d84 <lwip_recv_tcp+0x210>)
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8014c32:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8014c36:	f113 0f0f 	cmn.w	r3, #15
 8014c3a:	d101      	bne.n	8014c40 <lwip_recv_tcp+0xcc>
          return 0;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	e094      	b.n	8014d6a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8014c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c44:	e091      	b.n	8014d6a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d106      	bne.n	8014c5a <lwip_recv_tcp+0xe6>
 8014c4c:	4b49      	ldr	r3, [pc, #292]	; (8014d74 <lwip_recv_tcp+0x200>)
 8014c4e:	f240 32c5 	movw	r2, #965	; 0x3c5
 8014c52:	494d      	ldr	r1, [pc, #308]	; (8014d88 <lwip_recv_tcp+0x214>)
 8014c54:	4849      	ldr	r0, [pc, #292]	; (8014d7c <lwip_recv_tcp+0x208>)
 8014c56:	f00c fae9 	bl	802122c <iprintf>
      sock->lastdata.pbuf = p;
 8014c5a:	697a      	ldr	r2, [r7, #20]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	891b      	ldrh	r3, [r3, #8]
 8014c64:	461a      	mov	r2, r3
 8014c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	dd03      	ble.n	8014c74 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	891b      	ldrh	r3, [r3, #8]
 8014c70:	847b      	strh	r3, [r7, #34]	; 0x22
 8014c72:	e001      	b.n	8014c78 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8014c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c76:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8014c78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7c:	4413      	add	r3, r2
 8014c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c80:	429a      	cmp	r2, r3
 8014c82:	dd03      	ble.n	8014c8c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8014c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	43db      	mvns	r3, r3
 8014c8a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8014c8c:	6978      	ldr	r0, [r7, #20]
 8014c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c90:	68ba      	ldr	r2, [r7, #8]
 8014c92:	18d1      	adds	r1, r2, r3
 8014c94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c96:	2300      	movs	r3, #0
 8014c98:	f7ff fcd0 	bl	801463c <pbuf_copy_partial>

    recvd += copylen;
 8014c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ca0:	4413      	add	r3, r2
 8014ca2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8014ca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	da06      	bge.n	8014cba <lwip_recv_tcp+0x146>
 8014cac:	4b31      	ldr	r3, [pc, #196]	; (8014d74 <lwip_recv_tcp+0x200>)
 8014cae:	f240 32dd 	movw	r2, #989	; 0x3dd
 8014cb2:	4936      	ldr	r1, [pc, #216]	; (8014d8c <lwip_recv_tcp+0x218>)
 8014cb4:	4831      	ldr	r0, [pc, #196]	; (8014d7c <lwip_recv_tcp+0x208>)
 8014cb6:	f00c fab9 	bl	802122c <iprintf>
    recv_left -= copylen;
 8014cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	f003 0301 	and.w	r3, r3, #1
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d123      	bne.n	8014d14 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	891b      	ldrh	r3, [r3, #8]
 8014cd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d906      	bls.n	8014ce4 <lwip_recv_tcp+0x170>
 8014cd6:	4b27      	ldr	r3, [pc, #156]	; (8014d74 <lwip_recv_tcp+0x200>)
 8014cd8:	f240 32e3 	movw	r2, #995	; 0x3e3
 8014cdc:	492c      	ldr	r1, [pc, #176]	; (8014d90 <lwip_recv_tcp+0x21c>)
 8014cde:	4827      	ldr	r0, [pc, #156]	; (8014d7c <lwip_recv_tcp+0x208>)
 8014ce0:	f00c faa4 	bl	802122c <iprintf>
      if (p->tot_len - copylen > 0) {
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	891b      	ldrh	r3, [r3, #8]
 8014ce8:	461a      	mov	r2, r3
 8014cea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	dd09      	ble.n	8014d06 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014cf6:	4611      	mov	r1, r2
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f7ff fa66 	bl	80141ca <pbuf_free_header>
 8014cfe:	4602      	mov	r2, r0
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	605a      	str	r2, [r3, #4]
 8014d04:	e006      	b.n	8014d14 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7ff fa8e 	bl	8014230 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8014d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d18:	f043 0314 	orr.w	r3, r3, #20
 8014d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8014d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	dd08      	ble.n	8014d38 <lwip_recv_tcp+0x1c4>
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	f003 0301 	and.w	r3, r3, #1
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f43f af58 	beq.w	8014be2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8014d32:	e001      	b.n	8014d38 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8014d34:	bf00      	nop
 8014d36:	e000      	b.n	8014d3a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8014d38:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8014d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	dd0b      	ble.n	8014d58 <lwip_recv_tcp+0x1e4>
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d106      	bne.n	8014d58 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d50:	4611      	mov	r1, r2
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7f9 f9e8 	bl	800e128 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8014d58:	2300      	movs	r3, #0
 8014d5a:	61bb      	str	r3, [r7, #24]
 8014d5c:	69bb      	ldr	r3, [r7, #24]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d002      	beq.n	8014d68 <lwip_recv_tcp+0x1f4>
 8014d62:	4a08      	ldr	r2, [pc, #32]	; (8014d84 <lwip_recv_tcp+0x210>)
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	6013      	str	r3, [r2, #0]
  return recvd;
 8014d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3730      	adds	r7, #48	; 0x30
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	080254e8 	.word	0x080254e8
 8014d78:	080255fc 	.word	0x080255fc
 8014d7c:	08025558 	.word	0x08025558
 8014d80:	0802560c 	.word	0x0802560c
 8014d84:	24048e80 	.word	0x24048e80
 8014d88:	08025630 	.word	0x08025630
 8014d8c:	0802563c 	.word	0x0802563c
 8014d90:	08025664 	.word	0x08025664

08014d94 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8014d94:	b590      	push	{r4, r7, lr}
 8014d96:	b08b      	sub	sp, #44	; 0x2c
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	603b      	str	r3, [r7, #0]
 8014da0:	4613      	mov	r3, r2
 8014da2:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8014da4:	2300      	movs	r3, #0
 8014da6:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d106      	bne.n	8014dbc <lwip_sock_make_addr+0x28>
 8014dae:	4b2b      	ldr	r3, [pc, #172]	; (8014e5c <lwip_sock_make_addr+0xc8>)
 8014db0:	f240 4207 	movw	r2, #1031	; 0x407
 8014db4:	492a      	ldr	r1, [pc, #168]	; (8014e60 <lwip_sock_make_addr+0xcc>)
 8014db6:	482b      	ldr	r0, [pc, #172]	; (8014e64 <lwip_sock_make_addr+0xd0>)
 8014db8:	f00c fa38 	bl	802122c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d106      	bne.n	8014dd0 <lwip_sock_make_addr+0x3c>
 8014dc2:	4b26      	ldr	r3, [pc, #152]	; (8014e5c <lwip_sock_make_addr+0xc8>)
 8014dc4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8014dc8:	4927      	ldr	r1, [pc, #156]	; (8014e68 <lwip_sock_make_addr+0xd4>)
 8014dca:	4826      	ldr	r0, [pc, #152]	; (8014e64 <lwip_sock_make_addr+0xd0>)
 8014dcc:	f00c fa2e 	bl	802122c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8014dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d106      	bne.n	8014de4 <lwip_sock_make_addr+0x50>
 8014dd6:	4b21      	ldr	r3, [pc, #132]	; (8014e5c <lwip_sock_make_addr+0xc8>)
 8014dd8:	f240 4209 	movw	r2, #1033	; 0x409
 8014ddc:	4923      	ldr	r1, [pc, #140]	; (8014e6c <lwip_sock_make_addr+0xd8>)
 8014dde:	4821      	ldr	r0, [pc, #132]	; (8014e64 <lwip_sock_make_addr+0xd0>)
 8014de0:	f00c fa24 	bl	802122c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8014de4:	f107 0314 	add.w	r3, r7, #20
 8014de8:	2210      	movs	r2, #16
 8014dea:	701a      	strb	r2, [r3, #0]
 8014dec:	f107 0314 	add.w	r3, r7, #20
 8014df0:	2202      	movs	r2, #2
 8014df2:	705a      	strb	r2, [r3, #1]
 8014df4:	f107 0414 	add.w	r4, r7, #20
 8014df8:	88fb      	ldrh	r3, [r7, #6]
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7fb f86c 	bl	800fed8 <lwip_htons>
 8014e00:	4603      	mov	r3, r0
 8014e02:	8063      	strh	r3, [r4, #2]
 8014e04:	f107 0314 	add.w	r3, r7, #20
 8014e08:	68ba      	ldr	r2, [r7, #8]
 8014e0a:	6812      	ldr	r2, [r2, #0]
 8014e0c:	605a      	str	r2, [r3, #4]
 8014e0e:	f107 0314 	add.w	r3, r7, #20
 8014e12:	3308      	adds	r3, #8
 8014e14:	2208      	movs	r2, #8
 8014e16:	2100      	movs	r1, #0
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f00b fdbd 	bl	8020998 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8014e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	7d3a      	ldrb	r2, [r7, #20]
 8014e24:	4293      	cmp	r3, r2
 8014e26:	d202      	bcs.n	8014e2e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8014e2c:	e008      	b.n	8014e40 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8014e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	7d3a      	ldrb	r2, [r7, #20]
 8014e34:	4293      	cmp	r3, r2
 8014e36:	d903      	bls.n	8014e40 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8014e38:	7d3b      	ldrb	r3, [r7, #20]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e3e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8014e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	f107 0314 	add.w	r3, r7, #20
 8014e48:	4619      	mov	r1, r3
 8014e4a:	6838      	ldr	r0, [r7, #0]
 8014e4c:	f00b fd7c 	bl	8020948 <memcpy>
  return truncated;
 8014e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	372c      	adds	r7, #44	; 0x2c
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd90      	pop	{r4, r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	080254e8 	.word	0x080254e8
 8014e60:	08025674 	.word	0x08025674
 8014e64:	08025558 	.word	0x08025558
 8014e68:	08025688 	.word	0x08025688
 8014e6c:	08025698 	.word	0x08025698

08014e70 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b088      	sub	sp, #32
 8014e74:	af02      	add	r7, sp, #8
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
 8014e7c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d101      	bne.n	8014e88 <lwip_recv_tcp_from+0x18>
    return 0;
 8014e84:	2300      	movs	r3, #0
 8014e86:	e021      	b.n	8014ecc <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d01d      	beq.n	8014eca <lwip_recv_tcp_from+0x5a>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d01a      	beq.n	8014eca <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	6818      	ldr	r0, [r3, #0]
 8014e98:	f107 0216 	add.w	r2, r7, #22
 8014e9c:	f107 0110 	add.w	r1, r7, #16
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	f7f8 ff95 	bl	800ddd0 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00e      	beq.n	8014eca <lwip_recv_tcp_from+0x5a>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d00b      	beq.n	8014eca <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	6818      	ldr	r0, [r3, #0]
 8014eb6:	8afa      	ldrh	r2, [r7, #22]
 8014eb8:	f107 0110 	add.w	r1, r7, #16
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	f7ff ff67 	bl	8014d94 <lwip_sock_make_addr>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	e000      	b.n	8014ecc <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8014eca:	2300      	movs	r3, #0
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3718      	adds	r7, #24
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8014ed4:	b590      	push	{r4, r7, lr}
 8014ed6:	b08d      	sub	sp, #52	; 0x34
 8014ed8:	af02      	add	r7, sp, #8
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	60b9      	str	r1, [r7, #8]
 8014ede:	607a      	str	r2, [r7, #4]
 8014ee0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	689b      	ldr	r3, [r3, #8]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d10d      	bne.n	8014f06 <lwip_recvfrom_udp_raw+0x32>
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	dd09      	ble.n	8014f06 <lwip_recvfrom_udp_raw+0x32>
 8014ef2:	4b5e      	ldr	r3, [pc, #376]	; (801506c <lwip_recvfrom_udp_raw+0x198>)
 8014ef4:	f240 4249 	movw	r2, #1097	; 0x449
 8014ef8:	495d      	ldr	r1, [pc, #372]	; (8015070 <lwip_recvfrom_udp_raw+0x19c>)
 8014efa:	485e      	ldr	r0, [pc, #376]	; (8015074 <lwip_recvfrom_udp_raw+0x1a0>)
 8014efc:	f00c f996 	bl	802122c <iprintf>
 8014f00:	f06f 030f 	mvn.w	r3, #15
 8014f04:	e0ad      	b.n	8015062 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	f003 0308 	and.w	r3, r3, #8
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d003      	beq.n	8014f18 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8014f10:	2304      	movs	r3, #4
 8014f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f16:	e002      	b.n	8014f1e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d11e      	bne.n	8014f68 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014f32:	f107 0110 	add.w	r1, r7, #16
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7f9 f9d4 	bl	800e2e4 <netconn_recv_udp_raw_netbuf_flags>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8014f40:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d002      	beq.n	8014f4e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8014f48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014f4c:	e089      	b.n	8015062 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d106      	bne.n	8014f62 <lwip_recvfrom_udp_raw+0x8e>
 8014f54:	4b45      	ldr	r3, [pc, #276]	; (801506c <lwip_recvfrom_udp_raw+0x198>)
 8014f56:	f240 425e 	movw	r2, #1118	; 0x45e
 8014f5a:	4947      	ldr	r1, [pc, #284]	; (8015078 <lwip_recvfrom_udp_raw+0x1a4>)
 8014f5c:	4845      	ldr	r0, [pc, #276]	; (8015074 <lwip_recvfrom_udp_raw+0x1a0>)
 8014f5e:	f00c f965 	bl	802122c <iprintf>
    sock->lastdata.netbuf = buf;
 8014f62:	693a      	ldr	r2, [r7, #16]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	891b      	ldrh	r3, [r3, #8]
 8014f6e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8014f70:	2300      	movs	r3, #0
 8014f72:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8014f74:	2300      	movs	r3, #0
 8014f76:	61fb      	str	r3, [r7, #28]
 8014f78:	e029      	b.n	8014fce <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8014f7a:	8b3a      	ldrh	r2, [r7, #24]
 8014f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	689a      	ldr	r2, [r3, #8]
 8014f86:	69fb      	ldr	r3, [r7, #28]
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	4413      	add	r3, r2
 8014f8c:	685a      	ldr	r2, [r3, #4]
 8014f8e:	8afb      	ldrh	r3, [r7, #22]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d902      	bls.n	8014f9a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8014f94:	8afb      	ldrh	r3, [r7, #22]
 8014f96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014f98:	e006      	b.n	8014fa8 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	689a      	ldr	r2, [r3, #8]
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	00db      	lsls	r3, r3, #3
 8014fa2:	4413      	add	r3, r2
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	6818      	ldr	r0, [r3, #0]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	689a      	ldr	r2, [r3, #8]
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	00db      	lsls	r3, r3, #3
 8014fb4:	4413      	add	r3, r2
 8014fb6:	6819      	ldr	r1, [r3, #0]
 8014fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fbc:	f7ff fb3e 	bl	801463c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8014fc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014fc4:	4413      	add	r3, r2
 8014fc6:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	61fb      	str	r3, [r7, #28]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	69fa      	ldr	r2, [r7, #28]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	da03      	bge.n	8014fe0 <lwip_recvfrom_udp_raw+0x10c>
 8014fd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014fda:	8b3b      	ldrh	r3, [r7, #24]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d3cc      	bcc.n	8014f7a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d01a      	beq.n	801501e <lwip_recvfrom_udp_raw+0x14a>
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d016      	beq.n	801501e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d012      	beq.n	801501e <lwip_recvfrom_udp_raw+0x14a>
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d00e      	beq.n	801501e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	6818      	ldr	r0, [r3, #0]
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	f103 0108 	add.w	r1, r3, #8
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	3304      	adds	r3, #4
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	4623      	mov	r3, r4
 801501a:	f7ff febb 	bl	8014d94 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2200      	movs	r2, #0
 8015022:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	691b      	ldr	r3, [r3, #16]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d007      	beq.n	801503c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 801502c:	2300      	movs	r3, #0
 801502e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8015030:	7d7b      	ldrb	r3, [r7, #21]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d102      	bne.n	801503c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2200      	movs	r2, #0
 801503a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	f003 0301 	and.w	r3, r3, #1
 8015042:	2b00      	cmp	r3, #0
 8015044:	d106      	bne.n	8015054 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2200      	movs	r2, #0
 801504a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	4618      	mov	r0, r3
 8015050:	f7fe f9b0 	bl	80133b4 <netbuf_delete>
  }
  if (datagram_len) {
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d002      	beq.n	8015060 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	8b3a      	ldrh	r2, [r7, #24]
 801505e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8015060:	2300      	movs	r3, #0
}
 8015062:	4618      	mov	r0, r3
 8015064:	372c      	adds	r7, #44	; 0x2c
 8015066:	46bd      	mov	sp, r7
 8015068:	bd90      	pop	{r4, r7, pc}
 801506a:	bf00      	nop
 801506c:	080254e8 	.word	0x080254e8
 8015070:	080256a8 	.word	0x080256a8
 8015074:	08025558 	.word	0x08025558
 8015078:	080256d4 	.word	0x080256d4

0801507c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b096      	sub	sp, #88	; 0x58
 8015080:	af02      	add	r7, sp, #8
 8015082:	60f8      	str	r0, [r7, #12]
 8015084:	60b9      	str	r1, [r7, #8]
 8015086:	607a      	str	r2, [r7, #4]
 8015088:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 801508a:	68f8      	ldr	r0, [r7, #12]
 801508c:	f7ff fbb8 	bl	8014800 <get_socket>
 8015090:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 8015092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015094:	2b00      	cmp	r3, #0
 8015096:	d102      	bne.n	801509e <lwip_recvfrom+0x22>
    return -1;
 8015098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801509c:	e078      	b.n	8015190 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	781b      	ldrb	r3, [r3, #0]
 80150a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150a8:	2b10      	cmp	r3, #16
 80150aa:	d112      	bne.n	80150d2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	68b9      	ldr	r1, [r7, #8]
 80150b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80150b4:	f7ff fd5e 	bl	8014b74 <lwip_recv_tcp>
 80150b8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 80150ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	9300      	str	r3, [sp, #0]
 80150c2:	4b35      	ldr	r3, [pc, #212]	; (8015198 <lwip_recvfrom+0x11c>)
 80150c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80150c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80150c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80150ca:	f7ff fed1 	bl	8014e70 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 80150ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150d0:	e05e      	b.n	8015190 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 80150d2:	2300      	movs	r3, #0
 80150d4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 80150de:	2300      	movs	r3, #0
 80150e0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 80150e2:	2300      	movs	r3, #0
 80150e4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 80150e6:	2300      	movs	r3, #0
 80150e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 80150ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80150ee:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 80150f0:	2301      	movs	r3, #1
 80150f2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 80150f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80150f6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80150f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d002      	beq.n	8015104 <lwip_recvfrom+0x88>
 80150fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	e000      	b.n	8015106 <lwip_recvfrom+0x8a>
 8015104:	2300      	movs	r3, #0
 8015106:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8015108:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 801510c:	f107 0214 	add.w	r2, r7, #20
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	9300      	str	r3, [sp, #0]
 8015114:	460b      	mov	r3, r1
 8015116:	6839      	ldr	r1, [r7, #0]
 8015118:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801511a:	f7ff fedb 	bl	8014ed4 <lwip_recvfrom_udp_raw>
 801511e:	4603      	mov	r3, r0
 8015120:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 8015124:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8015128:	2b00      	cmp	r3, #0
 801512a:	d00e      	beq.n	801514a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 801512c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8015130:	4618      	mov	r0, r3
 8015132:	f7fa feff 	bl	800ff34 <err_to_errno>
 8015136:	63f8      	str	r0, [r7, #60]	; 0x3c
 8015138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801513a:	2b00      	cmp	r3, #0
 801513c:	d002      	beq.n	8015144 <lwip_recvfrom+0xc8>
 801513e:	4a17      	ldr	r2, [pc, #92]	; (801519c <lwip_recvfrom+0x120>)
 8015140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015142:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8015144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015148:	e022      	b.n	8015190 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 801514a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801514c:	461a      	mov	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	4293      	cmp	r3, r2
 8015152:	bf28      	it	cs
 8015154:	4613      	movcs	r3, r2
 8015156:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801515a:	4293      	cmp	r3, r2
 801515c:	d206      	bcs.n	801516c <lwip_recvfrom+0xf0>
 801515e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015160:	461a      	mov	r2, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4293      	cmp	r3, r2
 8015166:	bf28      	it	cs
 8015168:	4613      	movcs	r3, r2
 801516a:	e001      	b.n	8015170 <lwip_recvfrom+0xf4>
 801516c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015170:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8015172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015174:	2b00      	cmp	r3, #0
 8015176:	d002      	beq.n	801517e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8015178:	69ba      	ldr	r2, [r7, #24]
 801517a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801517c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 801517e:	2300      	movs	r3, #0
 8015180:	643b      	str	r3, [r7, #64]	; 0x40
 8015182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015184:	2b00      	cmp	r3, #0
 8015186:	d002      	beq.n	801518e <lwip_recvfrom+0x112>
 8015188:	4a04      	ldr	r2, [pc, #16]	; (801519c <lwip_recvfrom+0x120>)
 801518a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801518c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 801518e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015190:	4618      	mov	r0, r3
 8015192:	3750      	adds	r7, #80	; 0x50
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	080256e0 	.word	0x080256e0
 801519c:	24048e80 	.word	0x24048e80

080151a0 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b086      	sub	sp, #24
 80151a4:	af02      	add	r7, sp, #8
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	607a      	str	r2, [r7, #4]
 80151ac:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 80151ae:	2300      	movs	r3, #0
 80151b0:	9301      	str	r3, [sp, #4]
 80151b2:	2300      	movs	r3, #0
 80151b4:	9300      	str	r3, [sp, #0]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	687a      	ldr	r2, [r7, #4]
 80151ba:	68b9      	ldr	r1, [r7, #8]
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f7ff ff5d 	bl	801507c <lwip_recvfrom>
 80151c2:	4603      	mov	r3, r0
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b08a      	sub	sp, #40	; 0x28
 80151d0:	af02      	add	r7, sp, #8
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
 80151d8:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80151da:	68f8      	ldr	r0, [r7, #12]
 80151dc:	f7ff fb10 	bl	8014800 <get_socket>
 80151e0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80151e2:	69fb      	ldr	r3, [r7, #28]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d102      	bne.n	80151ee <lwip_send+0x22>
    return -1;
 80151e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151ec:	e046      	b.n	801527c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151f8:	2b10      	cmp	r3, #16
 80151fa:	d00b      	beq.n	8015214 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80151fc:	2300      	movs	r3, #0
 80151fe:	9301      	str	r3, [sp, #4]
 8015200:	2300      	movs	r3, #0
 8015202:	9300      	str	r3, [sp, #0]
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	68b9      	ldr	r1, [r7, #8]
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f000 f83c 	bl	8015288 <lwip_sendto>
 8015210:	4603      	mov	r3, r0
 8015212:	e033      	b.n	801527c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 801521a:	2b00      	cmp	r3, #0
 801521c:	d001      	beq.n	8015222 <lwip_send+0x56>
 801521e:	2203      	movs	r2, #3
 8015220:	e000      	b.n	8015224 <lwip_send+0x58>
 8015222:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	105b      	asrs	r3, r3, #1
 8015228:	b25b      	sxtb	r3, r3
 801522a:	f003 0304 	and.w	r3, r3, #4
 801522e:	b25b      	sxtb	r3, r3
 8015230:	4313      	orrs	r3, r2
 8015232:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8015234:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8015236:	2300      	movs	r3, #0
 8015238:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	6818      	ldr	r0, [r3, #0]
 801523e:	7efa      	ldrb	r2, [r7, #27]
 8015240:	f107 0310 	add.w	r3, r7, #16
 8015244:	9300      	str	r3, [sp, #0]
 8015246:	4613      	mov	r3, r2
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	68b9      	ldr	r1, [r7, #8]
 801524c:	f7f9 f8a4 	bl	800e398 <netconn_write_partly>
 8015250:	4603      	mov	r3, r0
 8015252:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8015254:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015258:	4618      	mov	r0, r3
 801525a:	f7fa fe6b 	bl	800ff34 <err_to_errno>
 801525e:	6178      	str	r0, [r7, #20]
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d002      	beq.n	801526c <lwip_send+0xa0>
 8015266:	4a07      	ldr	r2, [pc, #28]	; (8015284 <lwip_send+0xb8>)
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 801526c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d101      	bne.n	8015278 <lwip_send+0xac>
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	e001      	b.n	801527c <lwip_send+0xb0>
 8015278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801527c:	4618      	mov	r0, r3
 801527e:	3720      	adds	r7, #32
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}
 8015284:	24048e80 	.word	0x24048e80

08015288 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b08e      	sub	sp, #56	; 0x38
 801528c:	af00      	add	r7, sp, #0
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	60b9      	str	r1, [r7, #8]
 8015292:	607a      	str	r2, [r7, #4]
 8015294:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	f7ff fab2 	bl	8014800 <get_socket>
 801529c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 801529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d102      	bne.n	80152aa <lwip_sendto+0x22>
    return -1;
 80152a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152a8:	e093      	b.n	80153d2 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80152aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152b4:	2b10      	cmp	r3, #16
 80152b6:	d107      	bne.n	80152c8 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	68b9      	ldr	r1, [r7, #8]
 80152be:	68f8      	ldr	r0, [r7, #12]
 80152c0:	f7ff ff84 	bl	80151cc <lwip_send>
 80152c4:	4603      	mov	r3, r0
 80152c6:	e084      	b.n	80153d2 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152ce:	d30a      	bcc.n	80152e6 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80152d0:	235a      	movs	r3, #90	; 0x5a
 80152d2:	623b      	str	r3, [r7, #32]
 80152d4:	6a3b      	ldr	r3, [r7, #32]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d002      	beq.n	80152e0 <lwip_sendto+0x58>
 80152da:	4a40      	ldr	r2, [pc, #256]	; (80153dc <lwip_sendto+0x154>)
 80152dc:	6a3b      	ldr	r3, [r7, #32]
 80152de:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80152e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152e4:	e075      	b.n	80153d2 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80152ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d102      	bne.n	80152f6 <lwip_sendto+0x6e>
 80152f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d023      	beq.n	801533e <lwip_sendto+0xb6>
 80152f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152f8:	2b10      	cmp	r3, #16
 80152fa:	d10b      	bne.n	8015314 <lwip_sendto+0x8c>
 80152fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d008      	beq.n	8015314 <lwip_sendto+0x8c>
 8015302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015304:	785b      	ldrb	r3, [r3, #1]
 8015306:	2b02      	cmp	r3, #2
 8015308:	d104      	bne.n	8015314 <lwip_sendto+0x8c>
 801530a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801530c:	f003 0303 	and.w	r3, r3, #3
 8015310:	2b00      	cmp	r3, #0
 8015312:	d014      	beq.n	801533e <lwip_sendto+0xb6>
 8015314:	4b32      	ldr	r3, [pc, #200]	; (80153e0 <lwip_sendto+0x158>)
 8015316:	f240 6252 	movw	r2, #1618	; 0x652
 801531a:	4932      	ldr	r1, [pc, #200]	; (80153e4 <lwip_sendto+0x15c>)
 801531c:	4832      	ldr	r0, [pc, #200]	; (80153e8 <lwip_sendto+0x160>)
 801531e:	f00b ff85 	bl	802122c <iprintf>
 8015322:	f06f 000f 	mvn.w	r0, #15
 8015326:	f7fa fe05 	bl	800ff34 <err_to_errno>
 801532a:	62b8      	str	r0, [r7, #40]	; 0x28
 801532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532e:	2b00      	cmp	r3, #0
 8015330:	d002      	beq.n	8015338 <lwip_sendto+0xb0>
 8015332:	4a2a      	ldr	r2, [pc, #168]	; (80153dc <lwip_sendto+0x154>)
 8015334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015336:	6013      	str	r3, [r2, #0]
 8015338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801533c:	e049      	b.n	80153d2 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 801533e:	2300      	movs	r3, #0
 8015340:	617b      	str	r3, [r7, #20]
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8015346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015348:	2b00      	cmp	r3, #0
 801534a:	d00a      	beq.n	8015362 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 801534c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	61bb      	str	r3, [r7, #24]
 8015352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015354:	885b      	ldrh	r3, [r3, #2]
 8015356:	4618      	mov	r0, r3
 8015358:	f7fa fdbe 	bl	800fed8 <lwip_htons>
 801535c:	4603      	mov	r3, r0
 801535e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8015360:	e003      	b.n	801536a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8015362:	2300      	movs	r3, #0
 8015364:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8015366:	2300      	movs	r3, #0
 8015368:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 801536a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801536c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 801536e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015370:	f107 0310 	add.w	r3, r7, #16
 8015374:	68b9      	ldr	r1, [r7, #8]
 8015376:	4618      	mov	r0, r3
 8015378:	f7fe f864 	bl	8013444 <netbuf_ref>
 801537c:	4603      	mov	r3, r0
 801537e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8015382:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8015386:	2b00      	cmp	r3, #0
 8015388:	d10a      	bne.n	80153a0 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 801538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	f107 0210 	add.w	r2, r7, #16
 8015392:	4611      	mov	r1, r2
 8015394:	4618      	mov	r0, r3
 8015396:	f7f8 ffd1 	bl	800e33c <netconn_send>
 801539a:	4603      	mov	r3, r0
 801539c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 80153a0:	f107 0310 	add.w	r3, r7, #16
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fe f825 	bl	80133f4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 80153aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7fa fdc0 	bl	800ff34 <err_to_errno>
 80153b4:	6278      	str	r0, [r7, #36]	; 0x24
 80153b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d002      	beq.n	80153c2 <lwip_sendto+0x13a>
 80153bc:	4a07      	ldr	r2, [pc, #28]	; (80153dc <lwip_sendto+0x154>)
 80153be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 80153c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d101      	bne.n	80153ce <lwip_sendto+0x146>
 80153ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80153cc:	e001      	b.n	80153d2 <lwip_sendto+0x14a>
 80153ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3738      	adds	r7, #56	; 0x38
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	24048e80 	.word	0x24048e80
 80153e0:	080254e8 	.word	0x080254e8
 80153e4:	080257e4 	.word	0x080257e4
 80153e8:	08025558 	.word	0x08025558

080153ec <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b086      	sub	sp, #24
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	60b9      	str	r1, [r7, #8]
 80153f6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	2b03      	cmp	r3, #3
 80153fc:	d009      	beq.n	8015412 <lwip_socket+0x26>
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	2b03      	cmp	r3, #3
 8015402:	dc23      	bgt.n	801544c <lwip_socket+0x60>
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	2b01      	cmp	r3, #1
 8015408:	d019      	beq.n	801543e <lwip_socket+0x52>
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	2b02      	cmp	r3, #2
 801540e:	d009      	beq.n	8015424 <lwip_socket+0x38>
 8015410:	e01c      	b.n	801544c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	b2db      	uxtb	r3, r3
 8015416:	4a22      	ldr	r2, [pc, #136]	; (80154a0 <lwip_socket+0xb4>)
 8015418:	4619      	mov	r1, r3
 801541a:	2040      	movs	r0, #64	; 0x40
 801541c:	f7f8 fc1e 	bl	800dc5c <netconn_new_with_proto_and_callback>
 8015420:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8015422:	e019      	b.n	8015458 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2b88      	cmp	r3, #136	; 0x88
 8015428:	d101      	bne.n	801542e <lwip_socket+0x42>
 801542a:	2321      	movs	r3, #33	; 0x21
 801542c:	e000      	b.n	8015430 <lwip_socket+0x44>
 801542e:	2320      	movs	r3, #32
 8015430:	4a1b      	ldr	r2, [pc, #108]	; (80154a0 <lwip_socket+0xb4>)
 8015432:	2100      	movs	r1, #0
 8015434:	4618      	mov	r0, r3
 8015436:	f7f8 fc11 	bl	800dc5c <netconn_new_with_proto_and_callback>
 801543a:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801543c:	e00c      	b.n	8015458 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 801543e:	4a18      	ldr	r2, [pc, #96]	; (80154a0 <lwip_socket+0xb4>)
 8015440:	2100      	movs	r1, #0
 8015442:	2010      	movs	r0, #16
 8015444:	f7f8 fc0a 	bl	800dc5c <netconn_new_with_proto_and_callback>
 8015448:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801544a:	e005      	b.n	8015458 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 801544c:	4b15      	ldr	r3, [pc, #84]	; (80154a4 <lwip_socket+0xb8>)
 801544e:	2216      	movs	r2, #22
 8015450:	601a      	str	r2, [r3, #0]
      return -1;
 8015452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015456:	e01e      	b.n	8015496 <lwip_socket+0xaa>
  }

  if (!conn) {
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d105      	bne.n	801546a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 801545e:	4b11      	ldr	r3, [pc, #68]	; (80154a4 <lwip_socket+0xb8>)
 8015460:	2269      	movs	r2, #105	; 0x69
 8015462:	601a      	str	r2, [r3, #0]
    return -1;
 8015464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015468:	e015      	b.n	8015496 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 801546a:	2100      	movs	r1, #0
 801546c:	6978      	ldr	r0, [r7, #20]
 801546e:	f7ff f9df 	bl	8014830 <alloc_socket>
 8015472:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801547a:	d108      	bne.n	801548e <lwip_socket+0xa2>
    netconn_delete(conn);
 801547c:	6978      	ldr	r0, [r7, #20]
 801547e:	f7f8 fc8b 	bl	800dd98 <netconn_delete>
    set_errno(ENFILE);
 8015482:	4b08      	ldr	r3, [pc, #32]	; (80154a4 <lwip_socket+0xb8>)
 8015484:	2217      	movs	r2, #23
 8015486:	601a      	str	r2, [r3, #0]
    return -1;
 8015488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801548c:	e003      	b.n	8015496 <lwip_socket+0xaa>
  }
  conn->socket = i;
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	693a      	ldr	r2, [r7, #16]
 8015492:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8015494:	693b      	ldr	r3, [r7, #16]
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	08015531 	.word	0x08015531
 80154a4:	24048e80 	.word	0x24048e80

080154a8 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 80154a8:	b480      	push	{r7}
 80154aa:	b087      	sub	sp, #28
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	60f8      	str	r0, [r7, #12]
 80154b0:	60b9      	str	r1, [r7, #8]
 80154b2:	607a      	str	r2, [r7, #4]
 80154b4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80154b6:	2300      	movs	r3, #0
 80154b8:	617b      	str	r3, [r7, #20]
 80154ba:	e02c      	b.n	8015516 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	695a      	ldr	r2, [r3, #20]
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	4413      	add	r3, r2
 80154c6:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	68ba      	ldr	r2, [r7, #8]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d11e      	bne.n	8015510 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d009      	beq.n	80154ec <lwip_poll_should_wake+0x44>
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	f003 0301 	and.w	r3, r3, #1
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d001      	beq.n	80154ec <lwip_poll_should_wake+0x44>
        return 1;
 80154e8:	2301      	movs	r3, #1
 80154ea:	e01a      	b.n	8015522 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d009      	beq.n	8015506 <lwip_poll_should_wake+0x5e>
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	f003 0302 	and.w	r3, r3, #2
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d001      	beq.n	8015506 <lwip_poll_should_wake+0x5e>
        return 1;
 8015502:	2301      	movs	r3, #1
 8015504:	e00d      	b.n	8015522 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8015506:	6a3b      	ldr	r3, [r7, #32]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d001      	beq.n	8015510 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 801550c:	2301      	movs	r3, #1
 801550e:	e008      	b.n	8015522 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	3301      	adds	r3, #1
 8015514:	617b      	str	r3, [r7, #20]
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	699b      	ldr	r3, [r3, #24]
 801551a:	697a      	ldr	r2, [r7, #20]
 801551c:	429a      	cmp	r2, r3
 801551e:	d3cd      	bcc.n	80154bc <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8015520:	2300      	movs	r3, #0
}
 8015522:	4618      	mov	r0, r3
 8015524:	371c      	adds	r7, #28
 8015526:	46bd      	mov	sp, r7
 8015528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552c:	4770      	bx	lr
	...

08015530 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b08a      	sub	sp, #40	; 0x28
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	460b      	mov	r3, r1
 801553a:	70fb      	strb	r3, [r7, #3]
 801553c:	4613      	mov	r3, r2
 801553e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	f000 80a4 	beq.w	8015690 <event_callback+0x160>
    s = conn->socket;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	699b      	ldr	r3, [r3, #24]
 801554c:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 801554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015550:	2b00      	cmp	r3, #0
 8015552:	da18      	bge.n	8015586 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8015554:	f000 fbba 	bl	8015ccc <sys_arch_protect>
 8015558:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	699b      	ldr	r3, [r3, #24]
 801555e:	2b00      	cmp	r3, #0
 8015560:	da0b      	bge.n	801557a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8015562:	78fb      	ldrb	r3, [r7, #3]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d104      	bne.n	8015572 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	699b      	ldr	r3, [r3, #24]
 801556c:	1e5a      	subs	r2, r3, #1
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8015572:	69f8      	ldr	r0, [r7, #28]
 8015574:	f000 fbb8 	bl	8015ce8 <sys_arch_unprotect>
        return;
 8015578:	e08d      	b.n	8015696 <event_callback+0x166>
      }
      s = conn->socket;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	699b      	ldr	r3, [r3, #24]
 801557e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8015580:	69f8      	ldr	r0, [r7, #28]
 8015582:	f000 fbb1 	bl	8015ce8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8015586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015588:	f7ff f93a 	bl	8014800 <get_socket>
 801558c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d07f      	beq.n	8015694 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8015594:	2301      	movs	r3, #1
 8015596:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8015598:	f000 fb98 	bl	8015ccc <sys_arch_protect>
 801559c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 801559e:	78fb      	ldrb	r3, [r7, #3]
 80155a0:	2b04      	cmp	r3, #4
 80155a2:	d83e      	bhi.n	8015622 <event_callback+0xf2>
 80155a4:	a201      	add	r2, pc, #4	; (adr r2, 80155ac <event_callback+0x7c>)
 80155a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155aa:	bf00      	nop
 80155ac:	080155c1 	.word	0x080155c1
 80155b0:	080155e3 	.word	0x080155e3
 80155b4:	080155fb 	.word	0x080155fb
 80155b8:	0801560f 	.word	0x0801560f
 80155bc:	0801561b 	.word	0x0801561b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80155c0:	69bb      	ldr	r3, [r7, #24]
 80155c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	3301      	adds	r3, #1
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	b21a      	sxth	r2, r3
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	dd2a      	ble.n	8015632 <event_callback+0x102>
        check_waiters = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	623b      	str	r3, [r7, #32]
      }
      break;
 80155e0:	e027      	b.n	8015632 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	3b01      	subs	r3, #1
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	b21a      	sxth	r2, r3
 80155f0:	69bb      	ldr	r3, [r7, #24]
 80155f2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	623b      	str	r3, [r7, #32]
      break;
 80155f8:	e01c      	b.n	8015634 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	895b      	ldrh	r3, [r3, #10]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d001      	beq.n	8015606 <event_callback+0xd6>
        check_waiters = 0;
 8015602:	2300      	movs	r3, #0
 8015604:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8015606:	69bb      	ldr	r3, [r7, #24]
 8015608:	2201      	movs	r2, #1
 801560a:	815a      	strh	r2, [r3, #10]
      break;
 801560c:	e012      	b.n	8015634 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	2200      	movs	r2, #0
 8015612:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8015614:	2300      	movs	r3, #0
 8015616:	623b      	str	r3, [r7, #32]
      break;
 8015618:	e00c      	b.n	8015634 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	2201      	movs	r2, #1
 801561e:	819a      	strh	r2, [r3, #12]
      break;
 8015620:	e008      	b.n	8015634 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8015622:	4b1e      	ldr	r3, [pc, #120]	; (801569c <event_callback+0x16c>)
 8015624:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8015628:	491d      	ldr	r1, [pc, #116]	; (80156a0 <event_callback+0x170>)
 801562a:	481e      	ldr	r0, [pc, #120]	; (80156a4 <event_callback+0x174>)
 801562c:	f00b fdfe 	bl	802122c <iprintf>
      break;
 8015630:	e000      	b.n	8015634 <event_callback+0x104>
      break;
 8015632:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	7b9b      	ldrb	r3, [r3, #14]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d025      	beq.n	8015688 <event_callback+0x158>
 801563c:	6a3b      	ldr	r3, [r7, #32]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d022      	beq.n	8015688 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8015642:	69bb      	ldr	r3, [r7, #24]
 8015644:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015648:	2b00      	cmp	r3, #0
 801564a:	bfcc      	ite	gt
 801564c:	2301      	movgt	r3, #1
 801564e:	2300      	movle	r3, #0
 8015650:	b2db      	uxtb	r3, r3
 8015652:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	895b      	ldrh	r3, [r3, #10]
 8015658:	2b00      	cmp	r3, #0
 801565a:	bf14      	ite	ne
 801565c:	2301      	movne	r3, #1
 801565e:	2300      	moveq	r3, #0
 8015660:	b2db      	uxtb	r3, r3
 8015662:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8015664:	69bb      	ldr	r3, [r7, #24]
 8015666:	899b      	ldrh	r3, [r3, #12]
 8015668:	2b00      	cmp	r3, #0
 801566a:	bf14      	ite	ne
 801566c:	2301      	movne	r3, #1
 801566e:	2300      	moveq	r3, #0
 8015670:	b2db      	uxtb	r3, r3
 8015672:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8015674:	69f8      	ldr	r0, [r7, #28]
 8015676:	f000 fb37 	bl	8015ce8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	693a      	ldr	r2, [r7, #16]
 801567e:	6979      	ldr	r1, [r7, #20]
 8015680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015682:	f000 f811 	bl	80156a8 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8015686:	e006      	b.n	8015696 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8015688:	69f8      	ldr	r0, [r7, #28]
 801568a:	f000 fb2d 	bl	8015ce8 <sys_arch_unprotect>
 801568e:	e002      	b.n	8015696 <event_callback+0x166>
    return;
 8015690:	bf00      	nop
 8015692:	e000      	b.n	8015696 <event_callback+0x166>
      return;
 8015694:	bf00      	nop
  }
  done_socket(sock);
}
 8015696:	3728      	adds	r7, #40	; 0x28
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	080254e8 	.word	0x080254e8
 80156a0:	08025880 	.word	0x08025880
 80156a4:	08025558 	.word	0x08025558

080156a8 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b088      	sub	sp, #32
 80156ac:	af02      	add	r7, sp, #8
 80156ae:	60f8      	str	r0, [r7, #12]
 80156b0:	60b9      	str	r1, [r7, #8]
 80156b2:	607a      	str	r2, [r7, #4]
 80156b4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80156b6:	4b3e      	ldr	r3, [pc, #248]	; (80157b0 <select_check_waiters+0x108>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	617b      	str	r3, [r7, #20]
 80156bc:	e06f      	b.n	801579e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	69db      	ldr	r3, [r3, #28]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d168      	bne.n	8015798 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80156c6:	2300      	movs	r3, #0
 80156c8:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	695b      	ldr	r3, [r3, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d009      	beq.n	80156e6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	68ba      	ldr	r2, [r7, #8]
 80156da:	68f9      	ldr	r1, [r7, #12]
 80156dc:	6978      	ldr	r0, [r7, #20]
 80156de:	f7ff fee3 	bl	80154a8 <lwip_poll_should_wake>
 80156e2:	6138      	str	r0, [r7, #16]
 80156e4:	e04d      	b.n	8015782 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d014      	beq.n	8015716 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	689b      	ldr	r3, [r3, #8]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d010      	beq.n	8015716 <select_check_waiters+0x6e>
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	689b      	ldr	r3, [r3, #8]
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	0952      	lsrs	r2, r2, #5
 80156fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015700:	68fa      	ldr	r2, [r7, #12]
 8015702:	f002 021f 	and.w	r2, r2, #31
 8015706:	2101      	movs	r1, #1
 8015708:	fa01 f202 	lsl.w	r2, r1, r2
 801570c:	4013      	ands	r3, r2
 801570e:	2b00      	cmp	r3, #0
 8015710:	d001      	beq.n	8015716 <select_check_waiters+0x6e>
            do_signal = 1;
 8015712:	2301      	movs	r3, #1
 8015714:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d017      	beq.n	801574c <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d114      	bne.n	801574c <select_check_waiters+0xa4>
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	68db      	ldr	r3, [r3, #12]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d010      	beq.n	801574c <select_check_waiters+0xa4>
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	68db      	ldr	r3, [r3, #12]
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	0952      	lsrs	r2, r2, #5
 8015732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015736:	68fa      	ldr	r2, [r7, #12]
 8015738:	f002 021f 	and.w	r2, r2, #31
 801573c:	2101      	movs	r1, #1
 801573e:	fa01 f202 	lsl.w	r2, r1, r2
 8015742:	4013      	ands	r3, r2
 8015744:	2b00      	cmp	r3, #0
 8015746:	d001      	beq.n	801574c <select_check_waiters+0xa4>
            do_signal = 1;
 8015748:	2301      	movs	r3, #1
 801574a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d017      	beq.n	8015782 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d114      	bne.n	8015782 <select_check_waiters+0xda>
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	691b      	ldr	r3, [r3, #16]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d010      	beq.n	8015782 <select_check_waiters+0xda>
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	68fa      	ldr	r2, [r7, #12]
 8015766:	0952      	lsrs	r2, r2, #5
 8015768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801576c:	68fa      	ldr	r2, [r7, #12]
 801576e:	f002 021f 	and.w	r2, r2, #31
 8015772:	2101      	movs	r1, #1
 8015774:	fa01 f202 	lsl.w	r2, r1, r2
 8015778:	4013      	ands	r3, r2
 801577a:	2b00      	cmp	r3, #0
 801577c:	d001      	beq.n	8015782 <select_check_waiters+0xda>
            do_signal = 1;
 801577e:	2301      	movs	r3, #1
 8015780:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d007      	beq.n	8015798 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	2201      	movs	r2, #1
 801578c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	3320      	adds	r3, #32
 8015792:	4618      	mov	r0, r3
 8015794:	f000 f9f6 	bl	8015b84 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	617b      	str	r3, [r7, #20]
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d18c      	bne.n	80156be <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80157a4:	bf00      	nop
 80157a6:	bf00      	nop
 80157a8:	3718      	adds	r7, #24
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	24040760 	.word	0x24040760

080157b4 <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b08c      	sub	sp, #48	; 0x30
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	f7ff f81d 	bl	8014800 <get_socket>
 80157c6:	6278      	str	r0, [r7, #36]	; 0x24
  int ret = -1;
 80157c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int op_mode = 0;
 80157ce:	2300      	movs	r3, #0
 80157d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (!sock) {
 80157d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d102      	bne.n	80157de <lwip_fcntl+0x2a>
    return -1;
 80157d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157dc:	e08b      	b.n	80158f6 <lwip_fcntl+0x142>
  }

  switch (cmd) {
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	2b03      	cmp	r3, #3
 80157e2:	d003      	beq.n	80157ec <lwip_fcntl+0x38>
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b04      	cmp	r3, #4
 80157e8:	d043      	beq.n	8015872 <lwip_fcntl+0xbe>
 80157ea:	e077      	b.n	80158dc <lwip_fcntl+0x128>
    case F_GETFL:
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 80157ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	7f1b      	ldrb	r3, [r3, #28]
 80157f2:	105b      	asrs	r3, r3, #1
 80157f4:	f003 0301 	and.w	r3, r3, #1
 80157f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      sock_set_errno(sock, 0);
 80157fa:	2300      	movs	r3, #0
 80157fc:	61bb      	str	r3, [r7, #24]
 80157fe:	69bb      	ldr	r3, [r7, #24]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d002      	beq.n	801580a <lwip_fcntl+0x56>
 8015804:	4a3e      	ldr	r2, [pc, #248]	; (8015900 <lwip_fcntl+0x14c>)
 8015806:	69bb      	ldr	r3, [r7, #24]
 8015808:	6013      	str	r3, [r2, #0]

      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015814:	2b10      	cmp	r3, #16
 8015816:	d123      	bne.n	8015860 <lwip_fcntl+0xac>
#if LWIP_TCPIP_CORE_LOCKING
        LOCK_TCPIP_CORE();
 8015818:	483a      	ldr	r0, [pc, #232]	; (8015904 <lwip_fcntl+0x150>)
 801581a:	f000 fa15 	bl	8015c48 <sys_mutex_lock>
        /* the proper thing to do here would be to get into the tcpip_thread,
           but locking should be OK as well since we only *read* some flags */
        SYS_ARCH_PROTECT(lev);
#endif
#if LWIP_TCP
        if (sock->conn->pcb.tcp) {
 801581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	685b      	ldr	r3, [r3, #4]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d017      	beq.n	8015858 <lwip_fcntl+0xa4>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 8015828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	8b5b      	ldrh	r3, [r3, #26]
 8015830:	f003 0310 	and.w	r3, r3, #16
 8015834:	2b00      	cmp	r3, #0
 8015836:	d103      	bne.n	8015840 <lwip_fcntl+0x8c>
            op_mode |= O_RDONLY;
 8015838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583a:	f043 0302 	orr.w	r3, r3, #2
 801583e:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 8015840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	8b5b      	ldrh	r3, [r3, #26]
 8015848:	f003 0320 	and.w	r3, r3, #32
 801584c:	2b00      	cmp	r3, #0
 801584e:	d103      	bne.n	8015858 <lwip_fcntl+0xa4>
            op_mode |= O_WRONLY;
 8015850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015852:	f043 0304 	orr.w	r3, r3, #4
 8015856:	62bb      	str	r3, [r7, #40]	; 0x28
          }
        }
#endif
#if LWIP_TCPIP_CORE_LOCKING
        UNLOCK_TCPIP_CORE();
 8015858:	482a      	ldr	r0, [pc, #168]	; (8015904 <lwip_fcntl+0x150>)
 801585a:	f000 fa04 	bl	8015c66 <sys_mutex_unlock>
 801585e:	e003      	b.n	8015868 <lwip_fcntl+0xb4>
#else
        SYS_ARCH_UNPROTECT(lev);
#endif
      } else {
        op_mode |= O_RDWR;
 8015860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015862:	f043 0306 	orr.w	r3, r3, #6
 8015866:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 8015868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586c:	4313      	orrs	r3, r2
 801586e:	62fb      	str	r3, [r7, #44]	; 0x2c

      break;
 8015870:	e040      	b.n	80158f4 <lwip_fcntl+0x140>
    case F_SETFL:
      /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
      val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f023 0306 	bic.w	r3, r3, #6
 8015878:	607b      	str	r3, [r7, #4]
      if ((val & ~O_NONBLOCK) == 0) {
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f023 0301 	bic.w	r3, r3, #1
 8015880:	2b00      	cmp	r3, #0
 8015882:	d122      	bne.n	80158ca <lwip_fcntl+0x116>
        /* only O_NONBLOCK, all other bits are zero */
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f003 0301 	and.w	r3, r3, #1
 801588a:	2b00      	cmp	r3, #0
 801588c:	d009      	beq.n	80158a2 <lwip_fcntl+0xee>
 801588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	7f1a      	ldrb	r2, [r3, #28]
 8015894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f042 0202 	orr.w	r2, r2, #2
 801589c:	b2d2      	uxtb	r2, r2
 801589e:	771a      	strb	r2, [r3, #28]
 80158a0:	e008      	b.n	80158b4 <lwip_fcntl+0x100>
 80158a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	7f1a      	ldrb	r2, [r3, #28]
 80158a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	f022 0202 	bic.w	r2, r2, #2
 80158b0:	b2d2      	uxtb	r2, r2
 80158b2:	771a      	strb	r2, [r3, #28]
        ret = 0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        sock_set_errno(sock, 0);
 80158b8:	2300      	movs	r3, #0
 80158ba:	61fb      	str	r3, [r7, #28]
 80158bc:	69fb      	ldr	r3, [r7, #28]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d015      	beq.n	80158ee <lwip_fcntl+0x13a>
 80158c2:	4a0f      	ldr	r2, [pc, #60]	; (8015900 <lwip_fcntl+0x14c>)
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	6013      	str	r3, [r2, #0]
      } else {
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
 80158c8:	e011      	b.n	80158ee <lwip_fcntl+0x13a>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80158ca:	2326      	movs	r3, #38	; 0x26
 80158cc:	623b      	str	r3, [r7, #32]
 80158ce:	6a3b      	ldr	r3, [r7, #32]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d00c      	beq.n	80158ee <lwip_fcntl+0x13a>
 80158d4:	4a0a      	ldr	r2, [pc, #40]	; (8015900 <lwip_fcntl+0x14c>)
 80158d6:	6a3b      	ldr	r3, [r7, #32]
 80158d8:	6013      	str	r3, [r2, #0]
      break;
 80158da:	e008      	b.n	80158ee <lwip_fcntl+0x13a>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80158dc:	2326      	movs	r3, #38	; 0x26
 80158de:	617b      	str	r3, [r7, #20]
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d005      	beq.n	80158f2 <lwip_fcntl+0x13e>
 80158e6:	4a06      	ldr	r2, [pc, #24]	; (8015900 <lwip_fcntl+0x14c>)
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	6013      	str	r3, [r2, #0]
      break;
 80158ec:	e001      	b.n	80158f2 <lwip_fcntl+0x13e>
      break;
 80158ee:	bf00      	nop
 80158f0:	e000      	b.n	80158f4 <lwip_fcntl+0x140>
      break;
 80158f2:	bf00      	nop
  }
  done_socket(sock);
  return ret;
 80158f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3730      	adds	r7, #48	; 0x30
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop
 8015900:	24048e80 	.word	0x24048e80
 8015904:	24048ea4 	.word	0x24048ea4

08015908 <lwip_inet_pton>:
  return ret;
}

int
lwip_inet_pton(int af, const char *src, void *dst)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b086      	sub	sp, #24
 801590c:	af00      	add	r7, sp, #0
 801590e:	60f8      	str	r0, [r7, #12]
 8015910:	60b9      	str	r1, [r7, #8]
 8015912:	607a      	str	r2, [r7, #4]
  int err;
  switch (af) {
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2b02      	cmp	r3, #2
 8015918:	d105      	bne.n	8015926 <lwip_inet_pton+0x1e>
#if LWIP_IPV4
    case AF_INET:
      err = ip4addr_aton(src, (ip4_addr_t *)dst);
 801591a:	6879      	ldr	r1, [r7, #4]
 801591c:	68b8      	ldr	r0, [r7, #8]
 801591e:	f7fc f8a9 	bl	8011a74 <ip4addr_aton>
 8015922:	6178      	str	r0, [r7, #20]
      break;
 8015924:	e006      	b.n	8015934 <lwip_inet_pton+0x2c>
      }
      break;
    }
#endif
    default:
      err = -1;
 8015926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801592a:	617b      	str	r3, [r7, #20]
      set_errno(EAFNOSUPPORT);
 801592c:	4b04      	ldr	r3, [pc, #16]	; (8015940 <lwip_inet_pton+0x38>)
 801592e:	2261      	movs	r2, #97	; 0x61
 8015930:	601a      	str	r2, [r3, #0]
      break;
 8015932:	bf00      	nop
  }
  return err;
 8015934:	697b      	ldr	r3, [r7, #20]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3718      	adds	r7, #24
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	24048e80 	.word	0x24048e80

08015944 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b086      	sub	sp, #24
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	60bb      	str	r3, [r7, #8]
 8015952:	2304      	movs	r3, #4
 8015954:	60fb      	str	r3, [r7, #12]
 8015956:	2300      	movs	r3, #0
 8015958:	613b      	str	r3, [r7, #16]
 801595a:	2300      	movs	r3, #0
 801595c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801595e:	f107 0308 	add.w	r3, r7, #8
 8015962:	2100      	movs	r1, #0
 8015964:	4618      	mov	r0, r3
 8015966:	f7f5 faea 	bl	800af3e <osMessageCreate>
 801596a:	4602      	mov	r2, r0
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d102      	bne.n	801597e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801597c:	e000      	b.n	8015980 <sys_mbox_new+0x3c>

  return ERR_OK;
 801597e:	2300      	movs	r3, #0
}
 8015980:	4618      	mov	r0, r3
 8015982:	3718      	adds	r7, #24
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}

08015988 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4618      	mov	r0, r3
 8015996:	f7f5 fbaf 	bl	800b0f8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	4618      	mov	r0, r3
 80159a0:	f7f5 fbc0 	bl	800b124 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80159a4:	bf00      	nop
 80159a6:	3708      	adds	r7, #8
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	6839      	ldr	r1, [r7, #0]
 80159bc:	2200      	movs	r2, #0
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f5 fae6 	bl	800af90 <osMessagePut>
 80159c4:	4603      	mov	r3, r0
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d102      	bne.n	80159d0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80159ca:	2300      	movs	r3, #0
 80159cc:	73fb      	strb	r3, [r7, #15]
 80159ce:	e001      	b.n	80159d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80159d0:	23ff      	movs	r3, #255	; 0xff
 80159d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80159d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3710      	adds	r7, #16
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b08c      	sub	sp, #48	; 0x30
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	61f8      	str	r0, [r7, #28]
 80159e8:	61b9      	str	r1, [r7, #24]
 80159ea:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80159ec:	f7f5 f8d1 	bl	800ab92 <osKernelSysTick>
 80159f0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d017      	beq.n	8015a28 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	6819      	ldr	r1, [r3, #0]
 80159fc:	f107 0320 	add.w	r3, r7, #32
 8015a00:	697a      	ldr	r2, [r7, #20]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f5 fb04 	bl	800b010 <osMessageGet>

    if(event.status == osEventMessage)
 8015a08:	6a3b      	ldr	r3, [r7, #32]
 8015a0a:	2b10      	cmp	r3, #16
 8015a0c:	d109      	bne.n	8015a22 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a10:	461a      	mov	r2, r3
 8015a12:	69bb      	ldr	r3, [r7, #24]
 8015a14:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015a16:	f7f5 f8bc 	bl	800ab92 <osKernelSysTick>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1e:	1ad3      	subs	r3, r2, r3
 8015a20:	e019      	b.n	8015a56 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a26:	e016      	b.n	8015a56 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	6819      	ldr	r1, [r3, #0]
 8015a2c:	463b      	mov	r3, r7
 8015a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7f5 faec 	bl	800b010 <osMessageGet>
 8015a38:	f107 0320 	add.w	r3, r7, #32
 8015a3c:	463a      	mov	r2, r7
 8015a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a46:	461a      	mov	r2, r3
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015a4c:	f7f5 f8a1 	bl	800ab92 <osKernelSysTick>
 8015a50:	4602      	mov	r2, r0
 8015a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a54:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3730      	adds	r7, #48	; 0x30
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015a5e:	b580      	push	{r7, lr}
 8015a60:	b086      	sub	sp, #24
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
 8015a66:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6819      	ldr	r1, [r3, #0]
 8015a6c:	f107 030c 	add.w	r3, r7, #12
 8015a70:	2200      	movs	r2, #0
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7f5 facc 	bl	800b010 <osMessageGet>

  if(event.status == osEventMessage)
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2b10      	cmp	r3, #16
 8015a7c:	d105      	bne.n	8015a8a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	461a      	mov	r2, r3
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015a86:	2300      	movs	r3, #0
 8015a88:	e001      	b.n	8015a8e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3718      	adds	r7, #24
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015a96:	b480      	push	{r7}
 8015a98:	b083      	sub	sp, #12
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d101      	bne.n	8015aaa <sys_mbox_valid+0x14>
    return 0;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e000      	b.n	8015aac <sys_mbox_valid+0x16>
  else
    return 1;
 8015aaa:	2301      	movs	r3, #1
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr

08015ab8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b083      	sub	sp, #12
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	601a      	str	r2, [r3, #0]
}
 8015ac6:	bf00      	nop
 8015ac8:	370c      	adds	r7, #12
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr

08015ad2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b084      	sub	sp, #16
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
 8015ada:	460b      	mov	r3, r1
 8015adc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015ade:	2300      	movs	r3, #0
 8015ae0:	60bb      	str	r3, [r7, #8]
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015ae6:	f107 0308 	add.w	r3, r7, #8
 8015aea:	2101      	movs	r1, #1
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7f5 f95d 	bl	800adac <osSemaphoreCreate>
 8015af2:	4602      	mov	r2, r0
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d102      	bne.n	8015b06 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b04:	e009      	b.n	8015b1a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015b06:	78fb      	ldrb	r3, [r7, #3]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d105      	bne.n	8015b18 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	2100      	movs	r1, #0
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7f5 f97c 	bl	800ae10 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015b18:	2300      	movs	r3, #0
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3710      	adds	r7, #16
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}

08015b22 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015b22:	b580      	push	{r7, lr}
 8015b24:	b084      	sub	sp, #16
 8015b26:	af00      	add	r7, sp, #0
 8015b28:	6078      	str	r0, [r7, #4]
 8015b2a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015b2c:	f7f5 f831 	bl	800ab92 <osKernelSysTick>
 8015b30:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d011      	beq.n	8015b5c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	6839      	ldr	r1, [r7, #0]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f5 f966 	bl	800ae10 <osSemaphoreWait>
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d105      	bne.n	8015b56 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015b4a:	f7f5 f822 	bl	800ab92 <osKernelSysTick>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	e012      	b.n	8015b7c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b5a:	e00f      	b.n	8015b7c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015b5c:	bf00      	nop
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7f5 f952 	bl	800ae10 <osSemaphoreWait>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d1f5      	bne.n	8015b5e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015b72:	f7f5 f80e 	bl	800ab92 <osKernelSysTick>
 8015b76:	4602      	mov	r2, r0
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3710      	adds	r7, #16
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b082      	sub	sp, #8
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7f5 f98b 	bl	800aeac <osSemaphoreRelease>
}
 8015b96:	bf00      	nop
 8015b98:	3708      	adds	r7, #8
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b082      	sub	sp, #8
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f5 f9b4 	bl	800af18 <osSemaphoreDelete>
}
 8015bb0:	bf00      	nop
 8015bb2:	3708      	adds	r7, #8
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d101      	bne.n	8015bcc <sys_sem_valid+0x14>
    return 0;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	e000      	b.n	8015bce <sys_sem_valid+0x16>
  else
    return 1;
 8015bcc:	2301      	movs	r3, #1
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	370c      	adds	r7, #12
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd8:	4770      	bx	lr

08015bda <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015bda:	b480      	push	{r7}
 8015bdc:	b083      	sub	sp, #12
 8015bde:	af00      	add	r7, sp, #0
 8015be0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2200      	movs	r2, #0
 8015be6:	601a      	str	r2, [r3, #0]
}
 8015be8:	bf00      	nop
 8015bea:	370c      	adds	r7, #12
 8015bec:	46bd      	mov	sp, r7
 8015bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf2:	4770      	bx	lr

08015bf4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015bf8:	4803      	ldr	r0, [pc, #12]	; (8015c08 <sys_init+0x14>)
 8015bfa:	f7f5 f83a 	bl	800ac72 <osMutexCreate>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	4a02      	ldr	r2, [pc, #8]	; (8015c0c <sys_init+0x18>)
 8015c02:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015c04:	bf00      	nop
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	080275ec 	.word	0x080275ec
 8015c0c:	24048e84 	.word	0x24048e84

08015c10 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015c18:	2300      	movs	r3, #0
 8015c1a:	60bb      	str	r3, [r7, #8]
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015c20:	f107 0308 	add.w	r3, r7, #8
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7f5 f824 	bl	800ac72 <osMutexCreate>
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d102      	bne.n	8015c3e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c3c:	e000      	b.n	8015c40 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015c3e:	2300      	movs	r3, #0
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3710      	adds	r7, #16
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7f5 f823 	bl	800aca4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015c5e:	bf00      	nop
 8015c60:	3708      	adds	r7, #8
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b082      	sub	sp, #8
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7f5 f864 	bl	800ad40 <osMutexRelease>
}
 8015c78:	bf00      	nop
 8015c7a:	3708      	adds	r7, #8
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b08c      	sub	sp, #48	; 0x30
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	60b9      	str	r1, [r7, #8]
 8015c8a:	607a      	str	r2, [r7, #4]
 8015c8c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015c8e:	f107 0314 	add.w	r3, r7, #20
 8015c92:	2200      	movs	r2, #0
 8015c94:	601a      	str	r2, [r3, #0]
 8015c96:	605a      	str	r2, [r3, #4]
 8015c98:	609a      	str	r2, [r3, #8]
 8015c9a:	60da      	str	r2, [r3, #12]
 8015c9c:	611a      	str	r2, [r3, #16]
 8015c9e:	615a      	str	r2, [r3, #20]
 8015ca0:	619a      	str	r2, [r3, #24]
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	617b      	str	r3, [r7, #20]
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	61bb      	str	r3, [r7, #24]
 8015caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cac:	b21b      	sxth	r3, r3
 8015cae:	83bb      	strh	r3, [r7, #28]
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015cb4:	f107 0314 	add.w	r3, r7, #20
 8015cb8:	6879      	ldr	r1, [r7, #4]
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f7f4 ff79 	bl	800abb2 <osThreadCreate>
 8015cc0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3730      	adds	r7, #48	; 0x30
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
	...

08015ccc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015cd0:	4b04      	ldr	r3, [pc, #16]	; (8015ce4 <sys_arch_protect+0x18>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7f4 ffe3 	bl	800aca4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015cde:	2301      	movs	r3, #1
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	bd80      	pop	{r7, pc}
 8015ce4:	24048e84 	.word	0x24048e84

08015ce8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015cf0:	4b04      	ldr	r3, [pc, #16]	; (8015d04 <sys_arch_unprotect+0x1c>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7f5 f823 	bl	800ad40 <osMutexRelease>
}
 8015cfa:	bf00      	nop
 8015cfc:	3708      	adds	r7, #8
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	24048e84 	.word	0x24048e84

08015d08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015d0c:	f00b faa6 	bl	802125c <rand>
 8015d10:	4603      	mov	r3, r0
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	4b01      	ldr	r3, [pc, #4]	; (8015d28 <tcp_init+0x20>)
 8015d22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015d24:	bf00      	nop
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	24000028 	.word	0x24000028

08015d2c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	7d1b      	ldrb	r3, [r3, #20]
 8015d38:	2b01      	cmp	r3, #1
 8015d3a:	d105      	bne.n	8015d48 <tcp_free+0x1c>
 8015d3c:	4b06      	ldr	r3, [pc, #24]	; (8015d58 <tcp_free+0x2c>)
 8015d3e:	22d4      	movs	r2, #212	; 0xd4
 8015d40:	4906      	ldr	r1, [pc, #24]	; (8015d5c <tcp_free+0x30>)
 8015d42:	4807      	ldr	r0, [pc, #28]	; (8015d60 <tcp_free+0x34>)
 8015d44:	f00b fa72 	bl	802122c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015d48:	6879      	ldr	r1, [r7, #4]
 8015d4a:	2001      	movs	r0, #1
 8015d4c:	f7fd fb08 	bl	8013360 <memp_free>
}
 8015d50:	bf00      	nop
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	0802594c 	.word	0x0802594c
 8015d5c:	08025998 	.word	0x08025998
 8015d60:	080259ac 	.word	0x080259ac

08015d64 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b082      	sub	sp, #8
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	7d1b      	ldrb	r3, [r3, #20]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d105      	bne.n	8015d80 <tcp_free_listen+0x1c>
 8015d74:	4b06      	ldr	r3, [pc, #24]	; (8015d90 <tcp_free_listen+0x2c>)
 8015d76:	22df      	movs	r2, #223	; 0xdf
 8015d78:	4906      	ldr	r1, [pc, #24]	; (8015d94 <tcp_free_listen+0x30>)
 8015d7a:	4807      	ldr	r0, [pc, #28]	; (8015d98 <tcp_free_listen+0x34>)
 8015d7c:	f00b fa56 	bl	802122c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015d80:	6879      	ldr	r1, [r7, #4]
 8015d82:	2002      	movs	r0, #2
 8015d84:	f7fd faec 	bl	8013360 <memp_free>
}
 8015d88:	bf00      	nop
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}
 8015d90:	0802594c 	.word	0x0802594c
 8015d94:	080259d4 	.word	0x080259d4
 8015d98:	080259ac 	.word	0x080259ac

08015d9c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015da0:	f001 f85c 	bl	8016e5c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015da4:	4b07      	ldr	r3, [pc, #28]	; (8015dc4 <tcp_tmr+0x28>)
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	3301      	adds	r3, #1
 8015daa:	b2da      	uxtb	r2, r3
 8015dac:	4b05      	ldr	r3, [pc, #20]	; (8015dc4 <tcp_tmr+0x28>)
 8015dae:	701a      	strb	r2, [r3, #0]
 8015db0:	4b04      	ldr	r3, [pc, #16]	; (8015dc4 <tcp_tmr+0x28>)
 8015db2:	781b      	ldrb	r3, [r3, #0]
 8015db4:	f003 0301 	and.w	r3, r3, #1
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d001      	beq.n	8015dc0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015dbc:	f000 fd0e 	bl	80167dc <tcp_slowtmr>
  }
}
 8015dc0:	bf00      	nop
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	24040764 	.word	0x24040764

08015dc8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d105      	bne.n	8015de4 <tcp_remove_listener+0x1c>
 8015dd8:	4b0d      	ldr	r3, [pc, #52]	; (8015e10 <tcp_remove_listener+0x48>)
 8015dda:	22ff      	movs	r2, #255	; 0xff
 8015ddc:	490d      	ldr	r1, [pc, #52]	; (8015e14 <tcp_remove_listener+0x4c>)
 8015dde:	480e      	ldr	r0, [pc, #56]	; (8015e18 <tcp_remove_listener+0x50>)
 8015de0:	f00b fa24 	bl	802122c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	60fb      	str	r3, [r7, #12]
 8015de8:	e00a      	b.n	8015e00 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015dee:	683a      	ldr	r2, [r7, #0]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d102      	bne.n	8015dfa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	2200      	movs	r2, #0
 8015df8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	60fb      	str	r3, [r7, #12]
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d1f1      	bne.n	8015dea <tcp_remove_listener+0x22>
    }
  }
}
 8015e06:	bf00      	nop
 8015e08:	bf00      	nop
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	0802594c 	.word	0x0802594c
 8015e14:	080259f0 	.word	0x080259f0
 8015e18:	080259ac 	.word	0x080259ac

08015e1c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b084      	sub	sp, #16
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d106      	bne.n	8015e38 <tcp_listen_closed+0x1c>
 8015e2a:	4b14      	ldr	r3, [pc, #80]	; (8015e7c <tcp_listen_closed+0x60>)
 8015e2c:	f240 1211 	movw	r2, #273	; 0x111
 8015e30:	4913      	ldr	r1, [pc, #76]	; (8015e80 <tcp_listen_closed+0x64>)
 8015e32:	4814      	ldr	r0, [pc, #80]	; (8015e84 <tcp_listen_closed+0x68>)
 8015e34:	f00b f9fa 	bl	802122c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	7d1b      	ldrb	r3, [r3, #20]
 8015e3c:	2b01      	cmp	r3, #1
 8015e3e:	d006      	beq.n	8015e4e <tcp_listen_closed+0x32>
 8015e40:	4b0e      	ldr	r3, [pc, #56]	; (8015e7c <tcp_listen_closed+0x60>)
 8015e42:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015e46:	4910      	ldr	r1, [pc, #64]	; (8015e88 <tcp_listen_closed+0x6c>)
 8015e48:	480e      	ldr	r0, [pc, #56]	; (8015e84 <tcp_listen_closed+0x68>)
 8015e4a:	f00b f9ef 	bl	802122c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015e4e:	2301      	movs	r3, #1
 8015e50:	60fb      	str	r3, [r7, #12]
 8015e52:	e00b      	b.n	8015e6c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015e54:	4a0d      	ldr	r2, [pc, #52]	; (8015e8c <tcp_listen_closed+0x70>)
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	6879      	ldr	r1, [r7, #4]
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7ff ffb1 	bl	8015dc8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	3301      	adds	r3, #1
 8015e6a:	60fb      	str	r3, [r7, #12]
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	2b03      	cmp	r3, #3
 8015e70:	d9f0      	bls.n	8015e54 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015e72:	bf00      	nop
 8015e74:	bf00      	nop
 8015e76:	3710      	adds	r7, #16
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	0802594c 	.word	0x0802594c
 8015e80:	08025a18 	.word	0x08025a18
 8015e84:	080259ac 	.word	0x080259ac
 8015e88:	08025a24 	.word	0x08025a24
 8015e8c:	0802760c 	.word	0x0802760c

08015e90 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015e90:	b5b0      	push	{r4, r5, r7, lr}
 8015e92:	b088      	sub	sp, #32
 8015e94:	af04      	add	r7, sp, #16
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	460b      	mov	r3, r1
 8015e9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d106      	bne.n	8015eb0 <tcp_close_shutdown+0x20>
 8015ea2:	4b63      	ldr	r3, [pc, #396]	; (8016030 <tcp_close_shutdown+0x1a0>)
 8015ea4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015ea8:	4962      	ldr	r1, [pc, #392]	; (8016034 <tcp_close_shutdown+0x1a4>)
 8015eaa:	4863      	ldr	r0, [pc, #396]	; (8016038 <tcp_close_shutdown+0x1a8>)
 8015eac:	f00b f9be 	bl	802122c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015eb0:	78fb      	ldrb	r3, [r7, #3]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d066      	beq.n	8015f84 <tcp_close_shutdown+0xf4>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	7d1b      	ldrb	r3, [r3, #20]
 8015eba:	2b04      	cmp	r3, #4
 8015ebc:	d003      	beq.n	8015ec6 <tcp_close_shutdown+0x36>
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	7d1b      	ldrb	r3, [r3, #20]
 8015ec2:	2b07      	cmp	r3, #7
 8015ec4:	d15e      	bne.n	8015f84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d104      	bne.n	8015ed8 <tcp_close_shutdown+0x48>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ed2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015ed6:	d055      	beq.n	8015f84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	8b5b      	ldrh	r3, [r3, #26]
 8015edc:	f003 0310 	and.w	r3, r3, #16
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d106      	bne.n	8015ef2 <tcp_close_shutdown+0x62>
 8015ee4:	4b52      	ldr	r3, [pc, #328]	; (8016030 <tcp_close_shutdown+0x1a0>)
 8015ee6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015eea:	4954      	ldr	r1, [pc, #336]	; (801603c <tcp_close_shutdown+0x1ac>)
 8015eec:	4852      	ldr	r0, [pc, #328]	; (8016038 <tcp_close_shutdown+0x1a8>)
 8015eee:	f00b f99d 	bl	802122c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015efa:	687d      	ldr	r5, [r7, #4]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	3304      	adds	r3, #4
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	8ad2      	ldrh	r2, [r2, #22]
 8015f04:	6879      	ldr	r1, [r7, #4]
 8015f06:	8b09      	ldrh	r1, [r1, #24]
 8015f08:	9102      	str	r1, [sp, #8]
 8015f0a:	9201      	str	r2, [sp, #4]
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	462b      	mov	r3, r5
 8015f10:	4622      	mov	r2, r4
 8015f12:	4601      	mov	r1, r0
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f005 fd6d 	bl	801b9f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f001 fb4e 	bl	80175bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015f20:	4b47      	ldr	r3, [pc, #284]	; (8016040 <tcp_close_shutdown+0x1b0>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d105      	bne.n	8015f36 <tcp_close_shutdown+0xa6>
 8015f2a:	4b45      	ldr	r3, [pc, #276]	; (8016040 <tcp_close_shutdown+0x1b0>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	68db      	ldr	r3, [r3, #12]
 8015f30:	4a43      	ldr	r2, [pc, #268]	; (8016040 <tcp_close_shutdown+0x1b0>)
 8015f32:	6013      	str	r3, [r2, #0]
 8015f34:	e013      	b.n	8015f5e <tcp_close_shutdown+0xce>
 8015f36:	4b42      	ldr	r3, [pc, #264]	; (8016040 <tcp_close_shutdown+0x1b0>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	60fb      	str	r3, [r7, #12]
 8015f3c:	e00c      	b.n	8015f58 <tcp_close_shutdown+0xc8>
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	68db      	ldr	r3, [r3, #12]
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d104      	bne.n	8015f52 <tcp_close_shutdown+0xc2>
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	68da      	ldr	r2, [r3, #12]
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	60da      	str	r2, [r3, #12]
 8015f50:	e005      	b.n	8015f5e <tcp_close_shutdown+0xce>
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	68db      	ldr	r3, [r3, #12]
 8015f56:	60fb      	str	r3, [r7, #12]
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d1ef      	bne.n	8015f3e <tcp_close_shutdown+0xae>
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2200      	movs	r2, #0
 8015f62:	60da      	str	r2, [r3, #12]
 8015f64:	4b37      	ldr	r3, [pc, #220]	; (8016044 <tcp_close_shutdown+0x1b4>)
 8015f66:	2201      	movs	r2, #1
 8015f68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015f6a:	4b37      	ldr	r3, [pc, #220]	; (8016048 <tcp_close_shutdown+0x1b8>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d102      	bne.n	8015f7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015f74:	f003 ffe2 	bl	8019f3c <tcp_trigger_input_pcb_close>
 8015f78:	e002      	b.n	8015f80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f7ff fed6 	bl	8015d2c <tcp_free>
      }
      return ERR_OK;
 8015f80:	2300      	movs	r3, #0
 8015f82:	e050      	b.n	8016026 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	7d1b      	ldrb	r3, [r3, #20]
 8015f88:	2b02      	cmp	r3, #2
 8015f8a:	d03b      	beq.n	8016004 <tcp_close_shutdown+0x174>
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	dc44      	bgt.n	801601a <tcp_close_shutdown+0x18a>
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d002      	beq.n	8015f9a <tcp_close_shutdown+0x10a>
 8015f94:	2b01      	cmp	r3, #1
 8015f96:	d02a      	beq.n	8015fee <tcp_close_shutdown+0x15e>
 8015f98:	e03f      	b.n	801601a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	8adb      	ldrh	r3, [r3, #22]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d021      	beq.n	8015fe6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015fa2:	4b2a      	ldr	r3, [pc, #168]	; (801604c <tcp_close_shutdown+0x1bc>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d105      	bne.n	8015fb8 <tcp_close_shutdown+0x128>
 8015fac:	4b27      	ldr	r3, [pc, #156]	; (801604c <tcp_close_shutdown+0x1bc>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	4a26      	ldr	r2, [pc, #152]	; (801604c <tcp_close_shutdown+0x1bc>)
 8015fb4:	6013      	str	r3, [r2, #0]
 8015fb6:	e013      	b.n	8015fe0 <tcp_close_shutdown+0x150>
 8015fb8:	4b24      	ldr	r3, [pc, #144]	; (801604c <tcp_close_shutdown+0x1bc>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	60bb      	str	r3, [r7, #8]
 8015fbe:	e00c      	b.n	8015fda <tcp_close_shutdown+0x14a>
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	68db      	ldr	r3, [r3, #12]
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d104      	bne.n	8015fd4 <tcp_close_shutdown+0x144>
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	68da      	ldr	r2, [r3, #12]
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	60da      	str	r2, [r3, #12]
 8015fd2:	e005      	b.n	8015fe0 <tcp_close_shutdown+0x150>
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	68db      	ldr	r3, [r3, #12]
 8015fd8:	60bb      	str	r3, [r7, #8]
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d1ef      	bne.n	8015fc0 <tcp_close_shutdown+0x130>
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	f7ff fea0 	bl	8015d2c <tcp_free>
      break;
 8015fec:	e01a      	b.n	8016024 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7ff ff14 	bl	8015e1c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015ff4:	6879      	ldr	r1, [r7, #4]
 8015ff6:	4816      	ldr	r0, [pc, #88]	; (8016050 <tcp_close_shutdown+0x1c0>)
 8015ff8:	f001 fb30 	bl	801765c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7ff feb1 	bl	8015d64 <tcp_free_listen>
      break;
 8016002:	e00f      	b.n	8016024 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016004:	6879      	ldr	r1, [r7, #4]
 8016006:	480e      	ldr	r0, [pc, #56]	; (8016040 <tcp_close_shutdown+0x1b0>)
 8016008:	f001 fb28 	bl	801765c <tcp_pcb_remove>
 801600c:	4b0d      	ldr	r3, [pc, #52]	; (8016044 <tcp_close_shutdown+0x1b4>)
 801600e:	2201      	movs	r2, #1
 8016010:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f7ff fe8a 	bl	8015d2c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016018:	e004      	b.n	8016024 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f000 f81a 	bl	8016054 <tcp_close_shutdown_fin>
 8016020:	4603      	mov	r3, r0
 8016022:	e000      	b.n	8016026 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8016024:	2300      	movs	r3, #0
}
 8016026:	4618      	mov	r0, r3
 8016028:	3710      	adds	r7, #16
 801602a:	46bd      	mov	sp, r7
 801602c:	bdb0      	pop	{r4, r5, r7, pc}
 801602e:	bf00      	nop
 8016030:	0802594c 	.word	0x0802594c
 8016034:	08025a3c 	.word	0x08025a3c
 8016038:	080259ac 	.word	0x080259ac
 801603c:	08025a5c 	.word	0x08025a5c
 8016040:	24048e8c 	.word	0x24048e8c
 8016044:	24048e88 	.word	0x24048e88
 8016048:	24048ea0 	.word	0x24048ea0
 801604c:	24048e98 	.word	0x24048e98
 8016050:	24048e94 	.word	0x24048e94

08016054 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d106      	bne.n	8016070 <tcp_close_shutdown_fin+0x1c>
 8016062:	4b2e      	ldr	r3, [pc, #184]	; (801611c <tcp_close_shutdown_fin+0xc8>)
 8016064:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016068:	492d      	ldr	r1, [pc, #180]	; (8016120 <tcp_close_shutdown_fin+0xcc>)
 801606a:	482e      	ldr	r0, [pc, #184]	; (8016124 <tcp_close_shutdown_fin+0xd0>)
 801606c:	f00b f8de 	bl	802122c <iprintf>

  switch (pcb->state) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	7d1b      	ldrb	r3, [r3, #20]
 8016074:	2b07      	cmp	r3, #7
 8016076:	d020      	beq.n	80160ba <tcp_close_shutdown_fin+0x66>
 8016078:	2b07      	cmp	r3, #7
 801607a:	dc2b      	bgt.n	80160d4 <tcp_close_shutdown_fin+0x80>
 801607c:	2b03      	cmp	r3, #3
 801607e:	d002      	beq.n	8016086 <tcp_close_shutdown_fin+0x32>
 8016080:	2b04      	cmp	r3, #4
 8016082:	d00d      	beq.n	80160a0 <tcp_close_shutdown_fin+0x4c>
 8016084:	e026      	b.n	80160d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f004 fdc2 	bl	801ac10 <tcp_send_fin>
 801608c:	4603      	mov	r3, r0
 801608e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d11f      	bne.n	80160d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2205      	movs	r2, #5
 801609c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801609e:	e01b      	b.n	80160d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f004 fdb5 	bl	801ac10 <tcp_send_fin>
 80160a6:	4603      	mov	r3, r0
 80160a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80160aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d114      	bne.n	80160dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2205      	movs	r2, #5
 80160b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80160b8:	e010      	b.n	80160dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f004 fda8 	bl	801ac10 <tcp_send_fin>
 80160c0:	4603      	mov	r3, r0
 80160c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80160c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d109      	bne.n	80160e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2209      	movs	r2, #9
 80160d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80160d2:	e005      	b.n	80160e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80160d4:	2300      	movs	r3, #0
 80160d6:	e01c      	b.n	8016112 <tcp_close_shutdown_fin+0xbe>
      break;
 80160d8:	bf00      	nop
 80160da:	e002      	b.n	80160e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80160dc:	bf00      	nop
 80160de:	e000      	b.n	80160e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80160e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80160e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d103      	bne.n	80160f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f004 fece 	bl	801ae8c <tcp_output>
 80160f0:	e00d      	b.n	801610e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80160f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80160fa:	d108      	bne.n	801610e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	8b5b      	ldrh	r3, [r3, #26]
 8016100:	f043 0308 	orr.w	r3, r3, #8
 8016104:	b29a      	uxth	r2, r3
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801610a:	2300      	movs	r3, #0
 801610c:	e001      	b.n	8016112 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801610e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016112:	4618      	mov	r0, r3
 8016114:	3710      	adds	r7, #16
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}
 801611a:	bf00      	nop
 801611c:	0802594c 	.word	0x0802594c
 8016120:	08025a18 	.word	0x08025a18
 8016124:	080259ac 	.word	0x080259ac

08016128 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d109      	bne.n	801614a <tcp_close+0x22>
 8016136:	4b0f      	ldr	r3, [pc, #60]	; (8016174 <tcp_close+0x4c>)
 8016138:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801613c:	490e      	ldr	r1, [pc, #56]	; (8016178 <tcp_close+0x50>)
 801613e:	480f      	ldr	r0, [pc, #60]	; (801617c <tcp_close+0x54>)
 8016140:	f00b f874 	bl	802122c <iprintf>
 8016144:	f06f 030f 	mvn.w	r3, #15
 8016148:	e00f      	b.n	801616a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	7d1b      	ldrb	r3, [r3, #20]
 801614e:	2b01      	cmp	r3, #1
 8016150:	d006      	beq.n	8016160 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	8b5b      	ldrh	r3, [r3, #26]
 8016156:	f043 0310 	orr.w	r3, r3, #16
 801615a:	b29a      	uxth	r2, r3
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016160:	2101      	movs	r1, #1
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f7ff fe94 	bl	8015e90 <tcp_close_shutdown>
 8016168:	4603      	mov	r3, r0
}
 801616a:	4618      	mov	r0, r3
 801616c:	3708      	adds	r7, #8
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	0802594c 	.word	0x0802594c
 8016178:	08025a78 	.word	0x08025a78
 801617c:	080259ac 	.word	0x080259ac

08016180 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d109      	bne.n	80161a6 <tcp_shutdown+0x26>
 8016192:	4b26      	ldr	r3, [pc, #152]	; (801622c <tcp_shutdown+0xac>)
 8016194:	f240 2207 	movw	r2, #519	; 0x207
 8016198:	4925      	ldr	r1, [pc, #148]	; (8016230 <tcp_shutdown+0xb0>)
 801619a:	4826      	ldr	r0, [pc, #152]	; (8016234 <tcp_shutdown+0xb4>)
 801619c:	f00b f846 	bl	802122c <iprintf>
 80161a0:	f06f 030f 	mvn.w	r3, #15
 80161a4:	e03d      	b.n	8016222 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	7d1b      	ldrb	r3, [r3, #20]
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d102      	bne.n	80161b4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80161ae:	f06f 030a 	mvn.w	r3, #10
 80161b2:	e036      	b.n	8016222 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d01b      	beq.n	80161f2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	8b5b      	ldrh	r3, [r3, #26]
 80161be:	f043 0310 	orr.w	r3, r3, #16
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d005      	beq.n	80161da <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80161ce:	2101      	movs	r1, #1
 80161d0:	68f8      	ldr	r0, [r7, #12]
 80161d2:	f7ff fe5d 	bl	8015e90 <tcp_close_shutdown>
 80161d6:	4603      	mov	r3, r0
 80161d8:	e023      	b.n	8016222 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d007      	beq.n	80161f2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7fe f822 	bl	8014230 <pbuf_free>
      pcb->refused_data = NULL;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	2200      	movs	r2, #0
 80161f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d013      	beq.n	8016220 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	7d1b      	ldrb	r3, [r3, #20]
 80161fc:	2b04      	cmp	r3, #4
 80161fe:	dc02      	bgt.n	8016206 <tcp_shutdown+0x86>
 8016200:	2b03      	cmp	r3, #3
 8016202:	da02      	bge.n	801620a <tcp_shutdown+0x8a>
 8016204:	e009      	b.n	801621a <tcp_shutdown+0x9a>
 8016206:	2b07      	cmp	r3, #7
 8016208:	d107      	bne.n	801621a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	b2db      	uxtb	r3, r3
 801620e:	4619      	mov	r1, r3
 8016210:	68f8      	ldr	r0, [r7, #12]
 8016212:	f7ff fe3d 	bl	8015e90 <tcp_close_shutdown>
 8016216:	4603      	mov	r3, r0
 8016218:	e003      	b.n	8016222 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801621a:	f06f 030a 	mvn.w	r3, #10
 801621e:	e000      	b.n	8016222 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8016220:	2300      	movs	r3, #0
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	0802594c 	.word	0x0802594c
 8016230:	08025a90 	.word	0x08025a90
 8016234:	080259ac 	.word	0x080259ac

08016238 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b08e      	sub	sp, #56	; 0x38
 801623c:	af04      	add	r7, sp, #16
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d107      	bne.n	8016258 <tcp_abandon+0x20>
 8016248:	4b52      	ldr	r3, [pc, #328]	; (8016394 <tcp_abandon+0x15c>)
 801624a:	f240 223d 	movw	r2, #573	; 0x23d
 801624e:	4952      	ldr	r1, [pc, #328]	; (8016398 <tcp_abandon+0x160>)
 8016250:	4852      	ldr	r0, [pc, #328]	; (801639c <tcp_abandon+0x164>)
 8016252:	f00a ffeb 	bl	802122c <iprintf>
 8016256:	e099      	b.n	801638c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	7d1b      	ldrb	r3, [r3, #20]
 801625c:	2b01      	cmp	r3, #1
 801625e:	d106      	bne.n	801626e <tcp_abandon+0x36>
 8016260:	4b4c      	ldr	r3, [pc, #304]	; (8016394 <tcp_abandon+0x15c>)
 8016262:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016266:	494e      	ldr	r1, [pc, #312]	; (80163a0 <tcp_abandon+0x168>)
 8016268:	484c      	ldr	r0, [pc, #304]	; (801639c <tcp_abandon+0x164>)
 801626a:	f00a ffdf 	bl	802122c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	7d1b      	ldrb	r3, [r3, #20]
 8016272:	2b0a      	cmp	r3, #10
 8016274:	d107      	bne.n	8016286 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016276:	6879      	ldr	r1, [r7, #4]
 8016278:	484a      	ldr	r0, [pc, #296]	; (80163a4 <tcp_abandon+0x16c>)
 801627a:	f001 f9ef 	bl	801765c <tcp_pcb_remove>
    tcp_free(pcb);
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f7ff fd54 	bl	8015d2c <tcp_free>
 8016284:	e082      	b.n	801638c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016286:	2300      	movs	r3, #0
 8016288:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801628a:	2300      	movs	r3, #0
 801628c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016292:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016298:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	691b      	ldr	r3, [r3, #16]
 80162a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	7d1b      	ldrb	r3, [r3, #20]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d126      	bne.n	80162fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	8adb      	ldrh	r3, [r3, #22]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d02e      	beq.n	8016316 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80162b8:	4b3b      	ldr	r3, [pc, #236]	; (80163a8 <tcp_abandon+0x170>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	687a      	ldr	r2, [r7, #4]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d105      	bne.n	80162ce <tcp_abandon+0x96>
 80162c2:	4b39      	ldr	r3, [pc, #228]	; (80163a8 <tcp_abandon+0x170>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	4a37      	ldr	r2, [pc, #220]	; (80163a8 <tcp_abandon+0x170>)
 80162ca:	6013      	str	r3, [r2, #0]
 80162cc:	e013      	b.n	80162f6 <tcp_abandon+0xbe>
 80162ce:	4b36      	ldr	r3, [pc, #216]	; (80163a8 <tcp_abandon+0x170>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	61fb      	str	r3, [r7, #28]
 80162d4:	e00c      	b.n	80162f0 <tcp_abandon+0xb8>
 80162d6:	69fb      	ldr	r3, [r7, #28]
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d104      	bne.n	80162ea <tcp_abandon+0xb2>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	68da      	ldr	r2, [r3, #12]
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	60da      	str	r2, [r3, #12]
 80162e8:	e005      	b.n	80162f6 <tcp_abandon+0xbe>
 80162ea:	69fb      	ldr	r3, [r7, #28]
 80162ec:	68db      	ldr	r3, [r3, #12]
 80162ee:	61fb      	str	r3, [r7, #28]
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1ef      	bne.n	80162d6 <tcp_abandon+0x9e>
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2200      	movs	r2, #0
 80162fa:	60da      	str	r2, [r3, #12]
 80162fc:	e00b      	b.n	8016316 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	8adb      	ldrh	r3, [r3, #22]
 8016306:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016308:	6879      	ldr	r1, [r7, #4]
 801630a:	4828      	ldr	r0, [pc, #160]	; (80163ac <tcp_abandon+0x174>)
 801630c:	f001 f9a6 	bl	801765c <tcp_pcb_remove>
 8016310:	4b27      	ldr	r3, [pc, #156]	; (80163b0 <tcp_abandon+0x178>)
 8016312:	2201      	movs	r2, #1
 8016314:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801631a:	2b00      	cmp	r3, #0
 801631c:	d004      	beq.n	8016328 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016322:	4618      	mov	r0, r3
 8016324:	f000 fe7a 	bl	801701c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801632c:	2b00      	cmp	r3, #0
 801632e:	d004      	beq.n	801633a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016334:	4618      	mov	r0, r3
 8016336:	f000 fe71 	bl	801701c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801633e:	2b00      	cmp	r3, #0
 8016340:	d004      	beq.n	801634c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016346:	4618      	mov	r0, r3
 8016348:	f000 fe68 	bl	801701c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634e:	2b00      	cmp	r3, #0
 8016350:	d00e      	beq.n	8016370 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016352:	6879      	ldr	r1, [r7, #4]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	3304      	adds	r3, #4
 8016358:	687a      	ldr	r2, [r7, #4]
 801635a:	8b12      	ldrh	r2, [r2, #24]
 801635c:	9202      	str	r2, [sp, #8]
 801635e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016360:	9201      	str	r2, [sp, #4]
 8016362:	9300      	str	r3, [sp, #0]
 8016364:	460b      	mov	r3, r1
 8016366:	697a      	ldr	r2, [r7, #20]
 8016368:	69b9      	ldr	r1, [r7, #24]
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f005 fb42 	bl	801b9f4 <tcp_rst>
    }
    last_state = pcb->state;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	7d1b      	ldrb	r3, [r3, #20]
 8016374:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f7ff fcd8 	bl	8015d2c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801637c:	693b      	ldr	r3, [r7, #16]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d004      	beq.n	801638c <tcp_abandon+0x154>
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	f06f 010c 	mvn.w	r1, #12
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	4798      	blx	r3
  }
}
 801638c:	3728      	adds	r7, #40	; 0x28
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
 8016392:	bf00      	nop
 8016394:	0802594c 	.word	0x0802594c
 8016398:	08025aac 	.word	0x08025aac
 801639c:	080259ac 	.word	0x080259ac
 80163a0:	08025ac8 	.word	0x08025ac8
 80163a4:	24048e9c 	.word	0x24048e9c
 80163a8:	24048e98 	.word	0x24048e98
 80163ac:	24048e8c 	.word	0x24048e8c
 80163b0:	24048e88 	.word	0x24048e88

080163b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80163bc:	2101      	movs	r1, #1
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f7ff ff3a 	bl	8016238 <tcp_abandon>
}
 80163c4:	bf00      	nop
 80163c6:	3708      	adds	r7, #8
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d106      	bne.n	80163e8 <tcp_update_rcv_ann_wnd+0x1c>
 80163da:	4b25      	ldr	r3, [pc, #148]	; (8016470 <tcp_update_rcv_ann_wnd+0xa4>)
 80163dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80163e0:	4924      	ldr	r1, [pc, #144]	; (8016474 <tcp_update_rcv_ann_wnd+0xa8>)
 80163e2:	4825      	ldr	r0, [pc, #148]	; (8016478 <tcp_update_rcv_ann_wnd+0xac>)
 80163e4:	f00a ff22 	bl	802122c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80163f0:	4413      	add	r3, r2
 80163f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80163fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016400:	bf28      	it	cs
 8016402:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016406:	b292      	uxth	r2, r2
 8016408:	4413      	add	r3, r2
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	1ad3      	subs	r3, r2, r3
 801640e:	2b00      	cmp	r3, #0
 8016410:	db08      	blt.n	8016424 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801641e:	68fa      	ldr	r2, [r7, #12]
 8016420:	1ad3      	subs	r3, r2, r3
 8016422:	e020      	b.n	8016466 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801642c:	1ad3      	subs	r3, r2, r3
 801642e:	2b00      	cmp	r3, #0
 8016430:	dd03      	ble.n	801643a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2200      	movs	r2, #0
 8016436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016438:	e014      	b.n	8016464 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016442:	1ad3      	subs	r3, r2, r3
 8016444:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801644c:	d306      	bcc.n	801645c <tcp_update_rcv_ann_wnd+0x90>
 801644e:	4b08      	ldr	r3, [pc, #32]	; (8016470 <tcp_update_rcv_ann_wnd+0xa4>)
 8016450:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016454:	4909      	ldr	r1, [pc, #36]	; (801647c <tcp_update_rcv_ann_wnd+0xb0>)
 8016456:	4808      	ldr	r0, [pc, #32]	; (8016478 <tcp_update_rcv_ann_wnd+0xac>)
 8016458:	f00a fee8 	bl	802122c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	b29a      	uxth	r2, r3
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016464:	2300      	movs	r3, #0
  }
}
 8016466:	4618      	mov	r0, r3
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	0802594c 	.word	0x0802594c
 8016474:	08025bc4 	.word	0x08025bc4
 8016478:	080259ac 	.word	0x080259ac
 801647c:	08025be8 	.word	0x08025be8

08016480 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b084      	sub	sp, #16
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	460b      	mov	r3, r1
 801648a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d107      	bne.n	80164a2 <tcp_recved+0x22>
 8016492:	4b1f      	ldr	r3, [pc, #124]	; (8016510 <tcp_recved+0x90>)
 8016494:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016498:	491e      	ldr	r1, [pc, #120]	; (8016514 <tcp_recved+0x94>)
 801649a:	481f      	ldr	r0, [pc, #124]	; (8016518 <tcp_recved+0x98>)
 801649c:	f00a fec6 	bl	802122c <iprintf>
 80164a0:	e032      	b.n	8016508 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	7d1b      	ldrb	r3, [r3, #20]
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	d106      	bne.n	80164b8 <tcp_recved+0x38>
 80164aa:	4b19      	ldr	r3, [pc, #100]	; (8016510 <tcp_recved+0x90>)
 80164ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80164b0:	491a      	ldr	r1, [pc, #104]	; (801651c <tcp_recved+0x9c>)
 80164b2:	4819      	ldr	r0, [pc, #100]	; (8016518 <tcp_recved+0x98>)
 80164b4:	f00a feba 	bl	802122c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80164bc:	887b      	ldrh	r3, [r7, #2]
 80164be:	4413      	add	r3, r2
 80164c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80164c2:	89fb      	ldrh	r3, [r7, #14]
 80164c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80164c8:	d804      	bhi.n	80164d4 <tcp_recved+0x54>
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164ce:	89fa      	ldrh	r2, [r7, #14]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d204      	bcs.n	80164de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80164da:	851a      	strh	r2, [r3, #40]	; 0x28
 80164dc:	e002      	b.n	80164e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	89fa      	ldrh	r2, [r7, #14]
 80164e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f7ff ff71 	bl	80163cc <tcp_update_rcv_ann_wnd>
 80164ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80164f2:	d309      	bcc.n	8016508 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	8b5b      	ldrh	r3, [r3, #26]
 80164f8:	f043 0302 	orr.w	r3, r3, #2
 80164fc:	b29a      	uxth	r2, r3
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f004 fcc2 	bl	801ae8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016508:	3710      	adds	r7, #16
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	0802594c 	.word	0x0802594c
 8016514:	08025c04 	.word	0x08025c04
 8016518:	080259ac 	.word	0x080259ac
 801651c:	08025c1c 	.word	0x08025c1c

08016520 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016520:	b480      	push	{r7}
 8016522:	b083      	sub	sp, #12
 8016524:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016526:	2300      	movs	r3, #0
 8016528:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801652a:	4b1e      	ldr	r3, [pc, #120]	; (80165a4 <tcp_new_port+0x84>)
 801652c:	881b      	ldrh	r3, [r3, #0]
 801652e:	3301      	adds	r3, #1
 8016530:	b29a      	uxth	r2, r3
 8016532:	4b1c      	ldr	r3, [pc, #112]	; (80165a4 <tcp_new_port+0x84>)
 8016534:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016536:	4b1b      	ldr	r3, [pc, #108]	; (80165a4 <tcp_new_port+0x84>)
 8016538:	881b      	ldrh	r3, [r3, #0]
 801653a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801653e:	4293      	cmp	r3, r2
 8016540:	d103      	bne.n	801654a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016542:	4b18      	ldr	r3, [pc, #96]	; (80165a4 <tcp_new_port+0x84>)
 8016544:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016548:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801654a:	2300      	movs	r3, #0
 801654c:	71fb      	strb	r3, [r7, #7]
 801654e:	e01e      	b.n	801658e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016550:	79fb      	ldrb	r3, [r7, #7]
 8016552:	4a15      	ldr	r2, [pc, #84]	; (80165a8 <tcp_new_port+0x88>)
 8016554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	603b      	str	r3, [r7, #0]
 801655c:	e011      	b.n	8016582 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	8ada      	ldrh	r2, [r3, #22]
 8016562:	4b10      	ldr	r3, [pc, #64]	; (80165a4 <tcp_new_port+0x84>)
 8016564:	881b      	ldrh	r3, [r3, #0]
 8016566:	429a      	cmp	r2, r3
 8016568:	d108      	bne.n	801657c <tcp_new_port+0x5c>
        n++;
 801656a:	88bb      	ldrh	r3, [r7, #4]
 801656c:	3301      	adds	r3, #1
 801656e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016570:	88bb      	ldrh	r3, [r7, #4]
 8016572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016576:	d3d8      	bcc.n	801652a <tcp_new_port+0xa>
          return 0;
 8016578:	2300      	movs	r3, #0
 801657a:	e00d      	b.n	8016598 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	603b      	str	r3, [r7, #0]
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d1ea      	bne.n	801655e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016588:	79fb      	ldrb	r3, [r7, #7]
 801658a:	3301      	adds	r3, #1
 801658c:	71fb      	strb	r3, [r7, #7]
 801658e:	79fb      	ldrb	r3, [r7, #7]
 8016590:	2b03      	cmp	r3, #3
 8016592:	d9dd      	bls.n	8016550 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016594:	4b03      	ldr	r3, [pc, #12]	; (80165a4 <tcp_new_port+0x84>)
 8016596:	881b      	ldrh	r3, [r3, #0]
}
 8016598:	4618      	mov	r0, r3
 801659a:	370c      	adds	r7, #12
 801659c:	46bd      	mov	sp, r7
 801659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a2:	4770      	bx	lr
 80165a4:	24000028 	.word	0x24000028
 80165a8:	0802760c 	.word	0x0802760c

080165ac <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b08a      	sub	sp, #40	; 0x28
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	603b      	str	r3, [r7, #0]
 80165b8:	4613      	mov	r3, r2
 80165ba:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80165bc:	2300      	movs	r3, #0
 80165be:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d109      	bne.n	80165da <tcp_connect+0x2e>
 80165c6:	4b7d      	ldr	r3, [pc, #500]	; (80167bc <tcp_connect+0x210>)
 80165c8:	f240 4235 	movw	r2, #1077	; 0x435
 80165cc:	497c      	ldr	r1, [pc, #496]	; (80167c0 <tcp_connect+0x214>)
 80165ce:	487d      	ldr	r0, [pc, #500]	; (80167c4 <tcp_connect+0x218>)
 80165d0:	f00a fe2c 	bl	802122c <iprintf>
 80165d4:	f06f 030f 	mvn.w	r3, #15
 80165d8:	e0ec      	b.n	80167b4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80165da:	68bb      	ldr	r3, [r7, #8]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d109      	bne.n	80165f4 <tcp_connect+0x48>
 80165e0:	4b76      	ldr	r3, [pc, #472]	; (80167bc <tcp_connect+0x210>)
 80165e2:	f240 4236 	movw	r2, #1078	; 0x436
 80165e6:	4978      	ldr	r1, [pc, #480]	; (80167c8 <tcp_connect+0x21c>)
 80165e8:	4876      	ldr	r0, [pc, #472]	; (80167c4 <tcp_connect+0x218>)
 80165ea:	f00a fe1f 	bl	802122c <iprintf>
 80165ee:	f06f 030f 	mvn.w	r3, #15
 80165f2:	e0df      	b.n	80167b4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	7d1b      	ldrb	r3, [r3, #20]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d009      	beq.n	8016610 <tcp_connect+0x64>
 80165fc:	4b6f      	ldr	r3, [pc, #444]	; (80167bc <tcp_connect+0x210>)
 80165fe:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016602:	4972      	ldr	r1, [pc, #456]	; (80167cc <tcp_connect+0x220>)
 8016604:	486f      	ldr	r0, [pc, #444]	; (80167c4 <tcp_connect+0x218>)
 8016606:	f00a fe11 	bl	802122c <iprintf>
 801660a:	f06f 0309 	mvn.w	r3, #9
 801660e:	e0d1      	b.n	80167b4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d002      	beq.n	801661c <tcp_connect+0x70>
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	e000      	b.n	801661e <tcp_connect+0x72>
 801661c:	2300      	movs	r3, #0
 801661e:	68fa      	ldr	r2, [r7, #12]
 8016620:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	88fa      	ldrh	r2, [r7, #6]
 8016626:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	7a1b      	ldrb	r3, [r3, #8]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d006      	beq.n	801663e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	7a1b      	ldrb	r3, [r3, #8]
 8016634:	4618      	mov	r0, r3
 8016636:	f7fd fa3b 	bl	8013ab0 <netif_get_by_index>
 801663a:	6278      	str	r0, [r7, #36]	; 0x24
 801663c:	e005      	b.n	801664a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	3304      	adds	r3, #4
 8016642:	4618      	mov	r0, r3
 8016644:	f7fa ff3e 	bl	80114c4 <ip4_route>
 8016648:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801664c:	2b00      	cmp	r3, #0
 801664e:	d102      	bne.n	8016656 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016650:	f06f 0303 	mvn.w	r3, #3
 8016654:	e0ae      	b.n	80167b4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d003      	beq.n	8016664 <tcp_connect+0xb8>
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d111      	bne.n	8016688 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016666:	2b00      	cmp	r3, #0
 8016668:	d002      	beq.n	8016670 <tcp_connect+0xc4>
 801666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666c:	3304      	adds	r3, #4
 801666e:	e000      	b.n	8016672 <tcp_connect+0xc6>
 8016670:	2300      	movs	r3, #0
 8016672:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016674:	69fb      	ldr	r3, [r7, #28]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d102      	bne.n	8016680 <tcp_connect+0xd4>
      return ERR_RTE;
 801667a:	f06f 0303 	mvn.w	r3, #3
 801667e:	e099      	b.n	80167b4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	681a      	ldr	r2, [r3, #0]
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	8adb      	ldrh	r3, [r3, #22]
 801668c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	8adb      	ldrh	r3, [r3, #22]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d10c      	bne.n	80166b0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016696:	f7ff ff43 	bl	8016520 <tcp_new_port>
 801669a:	4603      	mov	r3, r0
 801669c:	461a      	mov	r2, r3
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	8adb      	ldrh	r3, [r3, #22]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d102      	bne.n	80166b0 <tcp_connect+0x104>
      return ERR_BUF;
 80166aa:	f06f 0301 	mvn.w	r3, #1
 80166ae:	e081      	b.n	80167b4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80166b0:	68f8      	ldr	r0, [r7, #12]
 80166b2:	f001 f867 	bl	8017784 <tcp_next_iss>
 80166b6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	2200      	movs	r2, #0
 80166bc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	697a      	ldr	r2, [r7, #20]
 80166c2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	1e5a      	subs	r2, r3, #1
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	1e5a      	subs	r2, r3, #1
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	1e5a      	subs	r2, r3, #1
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80166e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80166fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016704:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	3304      	adds	r3, #4
 801670e:	461a      	mov	r2, r3
 8016710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016712:	f001 f85d 	bl	80177d0 <tcp_eff_send_mss_netif>
 8016716:	4603      	mov	r3, r0
 8016718:	461a      	mov	r2, r3
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	2201      	movs	r2, #1
 8016722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	683a      	ldr	r2, [r7, #0]
 801672a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801672e:	2102      	movs	r1, #2
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f004 fabd 	bl	801acb0 <tcp_enqueue_flags>
 8016736:	4603      	mov	r3, r0
 8016738:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801673a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d136      	bne.n	80167b0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	2202      	movs	r2, #2
 8016746:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016748:	8b7b      	ldrh	r3, [r7, #26]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d021      	beq.n	8016792 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801674e:	4b20      	ldr	r3, [pc, #128]	; (80167d0 <tcp_connect+0x224>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	68fa      	ldr	r2, [r7, #12]
 8016754:	429a      	cmp	r2, r3
 8016756:	d105      	bne.n	8016764 <tcp_connect+0x1b8>
 8016758:	4b1d      	ldr	r3, [pc, #116]	; (80167d0 <tcp_connect+0x224>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	68db      	ldr	r3, [r3, #12]
 801675e:	4a1c      	ldr	r2, [pc, #112]	; (80167d0 <tcp_connect+0x224>)
 8016760:	6013      	str	r3, [r2, #0]
 8016762:	e013      	b.n	801678c <tcp_connect+0x1e0>
 8016764:	4b1a      	ldr	r3, [pc, #104]	; (80167d0 <tcp_connect+0x224>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	623b      	str	r3, [r7, #32]
 801676a:	e00c      	b.n	8016786 <tcp_connect+0x1da>
 801676c:	6a3b      	ldr	r3, [r7, #32]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	68fa      	ldr	r2, [r7, #12]
 8016772:	429a      	cmp	r2, r3
 8016774:	d104      	bne.n	8016780 <tcp_connect+0x1d4>
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	68da      	ldr	r2, [r3, #12]
 801677a:	6a3b      	ldr	r3, [r7, #32]
 801677c:	60da      	str	r2, [r3, #12]
 801677e:	e005      	b.n	801678c <tcp_connect+0x1e0>
 8016780:	6a3b      	ldr	r3, [r7, #32]
 8016782:	68db      	ldr	r3, [r3, #12]
 8016784:	623b      	str	r3, [r7, #32]
 8016786:	6a3b      	ldr	r3, [r7, #32]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d1ef      	bne.n	801676c <tcp_connect+0x1c0>
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2200      	movs	r2, #0
 8016790:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8016792:	4b10      	ldr	r3, [pc, #64]	; (80167d4 <tcp_connect+0x228>)
 8016794:	681a      	ldr	r2, [r3, #0]
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	60da      	str	r2, [r3, #12]
 801679a:	4a0e      	ldr	r2, [pc, #56]	; (80167d4 <tcp_connect+0x228>)
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	6013      	str	r3, [r2, #0]
 80167a0:	f005 fca2 	bl	801c0e8 <tcp_timer_needed>
 80167a4:	4b0c      	ldr	r3, [pc, #48]	; (80167d8 <tcp_connect+0x22c>)
 80167a6:	2201      	movs	r2, #1
 80167a8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80167aa:	68f8      	ldr	r0, [r7, #12]
 80167ac:	f004 fb6e 	bl	801ae8c <tcp_output>
  }
  return ret;
 80167b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3728      	adds	r7, #40	; 0x28
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	0802594c 	.word	0x0802594c
 80167c0:	08025c44 	.word	0x08025c44
 80167c4:	080259ac 	.word	0x080259ac
 80167c8:	08025c60 	.word	0x08025c60
 80167cc:	08025c7c 	.word	0x08025c7c
 80167d0:	24048e98 	.word	0x24048e98
 80167d4:	24048e8c 	.word	0x24048e8c
 80167d8:	24048e88 	.word	0x24048e88

080167dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80167dc:	b5b0      	push	{r4, r5, r7, lr}
 80167de:	b090      	sub	sp, #64	; 0x40
 80167e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80167e2:	2300      	movs	r3, #0
 80167e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80167e8:	4b94      	ldr	r3, [pc, #592]	; (8016a3c <tcp_slowtmr+0x260>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	3301      	adds	r3, #1
 80167ee:	4a93      	ldr	r2, [pc, #588]	; (8016a3c <tcp_slowtmr+0x260>)
 80167f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80167f2:	4b93      	ldr	r3, [pc, #588]	; (8016a40 <tcp_slowtmr+0x264>)
 80167f4:	781b      	ldrb	r3, [r3, #0]
 80167f6:	3301      	adds	r3, #1
 80167f8:	b2da      	uxtb	r2, r3
 80167fa:	4b91      	ldr	r3, [pc, #580]	; (8016a40 <tcp_slowtmr+0x264>)
 80167fc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80167fe:	2300      	movs	r3, #0
 8016800:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016802:	4b90      	ldr	r3, [pc, #576]	; (8016a44 <tcp_slowtmr+0x268>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016808:	e29d      	b.n	8016d46 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680c:	7d1b      	ldrb	r3, [r3, #20]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d106      	bne.n	8016820 <tcp_slowtmr+0x44>
 8016812:	4b8d      	ldr	r3, [pc, #564]	; (8016a48 <tcp_slowtmr+0x26c>)
 8016814:	f240 42be 	movw	r2, #1214	; 0x4be
 8016818:	498c      	ldr	r1, [pc, #560]	; (8016a4c <tcp_slowtmr+0x270>)
 801681a:	488d      	ldr	r0, [pc, #564]	; (8016a50 <tcp_slowtmr+0x274>)
 801681c:	f00a fd06 	bl	802122c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016822:	7d1b      	ldrb	r3, [r3, #20]
 8016824:	2b01      	cmp	r3, #1
 8016826:	d106      	bne.n	8016836 <tcp_slowtmr+0x5a>
 8016828:	4b87      	ldr	r3, [pc, #540]	; (8016a48 <tcp_slowtmr+0x26c>)
 801682a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801682e:	4989      	ldr	r1, [pc, #548]	; (8016a54 <tcp_slowtmr+0x278>)
 8016830:	4887      	ldr	r0, [pc, #540]	; (8016a50 <tcp_slowtmr+0x274>)
 8016832:	f00a fcfb 	bl	802122c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016838:	7d1b      	ldrb	r3, [r3, #20]
 801683a:	2b0a      	cmp	r3, #10
 801683c:	d106      	bne.n	801684c <tcp_slowtmr+0x70>
 801683e:	4b82      	ldr	r3, [pc, #520]	; (8016a48 <tcp_slowtmr+0x26c>)
 8016840:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016844:	4984      	ldr	r1, [pc, #528]	; (8016a58 <tcp_slowtmr+0x27c>)
 8016846:	4882      	ldr	r0, [pc, #520]	; (8016a50 <tcp_slowtmr+0x274>)
 8016848:	f00a fcf0 	bl	802122c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801684e:	7f9a      	ldrb	r2, [r3, #30]
 8016850:	4b7b      	ldr	r3, [pc, #492]	; (8016a40 <tcp_slowtmr+0x264>)
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	429a      	cmp	r2, r3
 8016856:	d105      	bne.n	8016864 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016862:	e270      	b.n	8016d46 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016864:	4b76      	ldr	r3, [pc, #472]	; (8016a40 <tcp_slowtmr+0x264>)
 8016866:	781a      	ldrb	r2, [r3, #0]
 8016868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801686c:	2300      	movs	r3, #0
 801686e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016872:	2300      	movs	r3, #0
 8016874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687a:	7d1b      	ldrb	r3, [r3, #20]
 801687c:	2b02      	cmp	r3, #2
 801687e:	d10a      	bne.n	8016896 <tcp_slowtmr+0xba>
 8016880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016886:	2b05      	cmp	r3, #5
 8016888:	d905      	bls.n	8016896 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801688a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801688e:	3301      	adds	r3, #1
 8016890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016894:	e11e      	b.n	8016ad4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801689c:	2b0b      	cmp	r3, #11
 801689e:	d905      	bls.n	80168ac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80168a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168a4:	3301      	adds	r3, #1
 80168a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80168aa:	e113      	b.n	8016ad4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80168ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d075      	beq.n	80169a2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80168b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d006      	beq.n	80168cc <tcp_slowtmr+0xf0>
 80168be:	4b62      	ldr	r3, [pc, #392]	; (8016a48 <tcp_slowtmr+0x26c>)
 80168c0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80168c4:	4965      	ldr	r1, [pc, #404]	; (8016a5c <tcp_slowtmr+0x280>)
 80168c6:	4862      	ldr	r0, [pc, #392]	; (8016a50 <tcp_slowtmr+0x274>)
 80168c8:	f00a fcb0 	bl	802122c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80168cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d106      	bne.n	80168e2 <tcp_slowtmr+0x106>
 80168d4:	4b5c      	ldr	r3, [pc, #368]	; (8016a48 <tcp_slowtmr+0x26c>)
 80168d6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80168da:	4961      	ldr	r1, [pc, #388]	; (8016a60 <tcp_slowtmr+0x284>)
 80168dc:	485c      	ldr	r0, [pc, #368]	; (8016a50 <tcp_slowtmr+0x274>)
 80168de:	f00a fca5 	bl	802122c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80168e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80168e8:	2b0b      	cmp	r3, #11
 80168ea:	d905      	bls.n	80168f8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80168ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168f0:	3301      	adds	r3, #1
 80168f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80168f6:	e0ed      	b.n	8016ad4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80168f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80168fe:	3b01      	subs	r3, #1
 8016900:	4a58      	ldr	r2, [pc, #352]	; (8016a64 <tcp_slowtmr+0x288>)
 8016902:	5cd3      	ldrb	r3, [r2, r3]
 8016904:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016908:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801690c:	7c7a      	ldrb	r2, [r7, #17]
 801690e:	429a      	cmp	r2, r3
 8016910:	d907      	bls.n	8016922 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016914:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016918:	3301      	adds	r3, #1
 801691a:	b2da      	uxtb	r2, r3
 801691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016924:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016928:	7c7a      	ldrb	r2, [r7, #17]
 801692a:	429a      	cmp	r2, r3
 801692c:	f200 80d2 	bhi.w	8016ad4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016930:	2301      	movs	r3, #1
 8016932:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801693a:	2b00      	cmp	r3, #0
 801693c:	d108      	bne.n	8016950 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801693e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016940:	f005 f94c 	bl	801bbdc <tcp_zero_window_probe>
 8016944:	4603      	mov	r3, r0
 8016946:	2b00      	cmp	r3, #0
 8016948:	d014      	beq.n	8016974 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801694a:	2300      	movs	r3, #0
 801694c:	623b      	str	r3, [r7, #32]
 801694e:	e011      	b.n	8016974 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016956:	4619      	mov	r1, r3
 8016958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801695a:	f004 f811 	bl	801a980 <tcp_split_unsent_seg>
 801695e:	4603      	mov	r3, r0
 8016960:	2b00      	cmp	r3, #0
 8016962:	d107      	bne.n	8016974 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016966:	f004 fa91 	bl	801ae8c <tcp_output>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d101      	bne.n	8016974 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016970:	2300      	movs	r3, #0
 8016972:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016974:	6a3b      	ldr	r3, [r7, #32]
 8016976:	2b00      	cmp	r3, #0
 8016978:	f000 80ac 	beq.w	8016ad4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801697e:	2200      	movs	r2, #0
 8016980:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016986:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801698a:	2b06      	cmp	r3, #6
 801698c:	f200 80a2 	bhi.w	8016ad4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016992:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016996:	3301      	adds	r3, #1
 8016998:	b2da      	uxtb	r2, r3
 801699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801699c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80169a0:	e098      	b.n	8016ad4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80169a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	db0f      	blt.n	80169cc <tcp_slowtmr+0x1f0>
 80169ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80169b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80169b6:	4293      	cmp	r3, r2
 80169b8:	d008      	beq.n	80169cc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80169ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80169c0:	b29b      	uxth	r3, r3
 80169c2:	3301      	adds	r3, #1
 80169c4:	b29b      	uxth	r3, r3
 80169c6:	b21a      	sxth	r2, r3
 80169c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80169cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80169d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80169d8:	429a      	cmp	r2, r3
 80169da:	db7b      	blt.n	8016ad4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80169dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169de:	f004 fd47 	bl	801b470 <tcp_rexmit_rto_prepare>
 80169e2:	4603      	mov	r3, r0
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d007      	beq.n	80169f8 <tcp_slowtmr+0x21c>
 80169e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d171      	bne.n	8016ad4 <tcp_slowtmr+0x2f8>
 80169f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d06d      	beq.n	8016ad4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80169f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169fa:	7d1b      	ldrb	r3, [r3, #20]
 80169fc:	2b02      	cmp	r3, #2
 80169fe:	d03a      	beq.n	8016a76 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016a06:	2b0c      	cmp	r3, #12
 8016a08:	bf28      	it	cs
 8016a0a:	230c      	movcs	r3, #12
 8016a0c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a14:	10db      	asrs	r3, r3, #3
 8016a16:	b21b      	sxth	r3, r3
 8016a18:	461a      	mov	r2, r3
 8016a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a20:	4413      	add	r3, r2
 8016a22:	7efa      	ldrb	r2, [r7, #27]
 8016a24:	4910      	ldr	r1, [pc, #64]	; (8016a68 <tcp_slowtmr+0x28c>)
 8016a26:	5c8a      	ldrb	r2, [r1, r2]
 8016a28:	4093      	lsls	r3, r2
 8016a2a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016a32:	4293      	cmp	r3, r2
 8016a34:	dc1a      	bgt.n	8016a6c <tcp_slowtmr+0x290>
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	b21a      	sxth	r2, r3
 8016a3a:	e019      	b.n	8016a70 <tcp_slowtmr+0x294>
 8016a3c:	24048e90 	.word	0x24048e90
 8016a40:	24040765 	.word	0x24040765
 8016a44:	24048e8c 	.word	0x24048e8c
 8016a48:	0802594c 	.word	0x0802594c
 8016a4c:	08025cac 	.word	0x08025cac
 8016a50:	080259ac 	.word	0x080259ac
 8016a54:	08025cd8 	.word	0x08025cd8
 8016a58:	08025d04 	.word	0x08025d04
 8016a5c:	08025d34 	.word	0x08025d34
 8016a60:	08025d68 	.word	0x08025d68
 8016a64:	08027604 	.word	0x08027604
 8016a68:	080275f4 	.word	0x080275f4
 8016a6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a78:	2200      	movs	r2, #0
 8016a7a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a88:	4293      	cmp	r3, r2
 8016a8a:	bf28      	it	cs
 8016a8c:	4613      	movcs	r3, r2
 8016a8e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016a90:	8a7b      	ldrh	r3, [r7, #18]
 8016a92:	085b      	lsrs	r3, r3, #1
 8016a94:	b29a      	uxth	r2, r3
 8016a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016aa6:	005b      	lsls	r3, r3, #1
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d206      	bcs.n	8016abc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	b29a      	uxth	r2, r3
 8016ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016abe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac8:	2200      	movs	r2, #0
 8016aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ad0:	f004 fd3e 	bl	801b550 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad6:	7d1b      	ldrb	r3, [r3, #20]
 8016ad8:	2b06      	cmp	r3, #6
 8016ada:	d111      	bne.n	8016b00 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ade:	8b5b      	ldrh	r3, [r3, #26]
 8016ae0:	f003 0310 	and.w	r3, r3, #16
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d00b      	beq.n	8016b00 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016ae8:	4b9c      	ldr	r3, [pc, #624]	; (8016d5c <tcp_slowtmr+0x580>)
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aee:	6a1b      	ldr	r3, [r3, #32]
 8016af0:	1ad3      	subs	r3, r2, r3
 8016af2:	2b28      	cmp	r3, #40	; 0x28
 8016af4:	d904      	bls.n	8016b00 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016afa:	3301      	adds	r3, #1
 8016afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b02:	7a5b      	ldrb	r3, [r3, #9]
 8016b04:	f003 0308 	and.w	r3, r3, #8
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d04a      	beq.n	8016ba2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016b10:	2b04      	cmp	r3, #4
 8016b12:	d003      	beq.n	8016b1c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016b18:	2b07      	cmp	r3, #7
 8016b1a:	d142      	bne.n	8016ba2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016b1c:	4b8f      	ldr	r3, [pc, #572]	; (8016d5c <tcp_slowtmr+0x580>)
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b22:	6a1b      	ldr	r3, [r3, #32]
 8016b24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b28:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016b2c:	4b8c      	ldr	r3, [pc, #560]	; (8016d60 <tcp_slowtmr+0x584>)
 8016b2e:	440b      	add	r3, r1
 8016b30:	498c      	ldr	r1, [pc, #560]	; (8016d64 <tcp_slowtmr+0x588>)
 8016b32:	fba1 1303 	umull	r1, r3, r1, r3
 8016b36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	d90a      	bls.n	8016b52 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b40:	3301      	adds	r3, #1
 8016b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016b50:	e027      	b.n	8016ba2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016b52:	4b82      	ldr	r3, [pc, #520]	; (8016d5c <tcp_slowtmr+0x580>)
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b58:	6a1b      	ldr	r3, [r3, #32]
 8016b5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016b68:	4618      	mov	r0, r3
 8016b6a:	4b7f      	ldr	r3, [pc, #508]	; (8016d68 <tcp_slowtmr+0x58c>)
 8016b6c:	fb03 f300 	mul.w	r3, r3, r0
 8016b70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016b72:	497c      	ldr	r1, [pc, #496]	; (8016d64 <tcp_slowtmr+0x588>)
 8016b74:	fba1 1303 	umull	r1, r3, r1, r3
 8016b78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d911      	bls.n	8016ba2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016b80:	f004 ffec 	bl	801bb5c <tcp_keepalive>
 8016b84:	4603      	mov	r3, r0
 8016b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016b8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d107      	bne.n	8016ba2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8016b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016b98:	3301      	adds	r3, #1
 8016b9a:	b2da      	uxtb	r2, r3
 8016b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d011      	beq.n	8016bce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016baa:	4b6c      	ldr	r3, [pc, #432]	; (8016d5c <tcp_slowtmr+0x580>)
 8016bac:	681a      	ldr	r2, [r3, #0]
 8016bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb0:	6a1b      	ldr	r3, [r3, #32]
 8016bb2:	1ad2      	subs	r2, r2, r3
 8016bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016bba:	4619      	mov	r1, r3
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	440b      	add	r3, r1
 8016bc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d302      	bcc.n	8016bce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016bca:	f000 feab 	bl	8017924 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd0:	7d1b      	ldrb	r3, [r3, #20]
 8016bd2:	2b03      	cmp	r3, #3
 8016bd4:	d10b      	bne.n	8016bee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016bd6:	4b61      	ldr	r3, [pc, #388]	; (8016d5c <tcp_slowtmr+0x580>)
 8016bd8:	681a      	ldr	r2, [r3, #0]
 8016bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bdc:	6a1b      	ldr	r3, [r3, #32]
 8016bde:	1ad3      	subs	r3, r2, r3
 8016be0:	2b28      	cmp	r3, #40	; 0x28
 8016be2:	d904      	bls.n	8016bee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016be8:	3301      	adds	r3, #1
 8016bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf0:	7d1b      	ldrb	r3, [r3, #20]
 8016bf2:	2b09      	cmp	r3, #9
 8016bf4:	d10b      	bne.n	8016c0e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016bf6:	4b59      	ldr	r3, [pc, #356]	; (8016d5c <tcp_slowtmr+0x580>)
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bfc:	6a1b      	ldr	r3, [r3, #32]
 8016bfe:	1ad3      	subs	r3, r2, r3
 8016c00:	2bf0      	cmp	r3, #240	; 0xf0
 8016c02:	d904      	bls.n	8016c0e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c08:	3301      	adds	r3, #1
 8016c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d060      	beq.n	8016cd8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c1c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c20:	f000 fccc 	bl	80175bc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d010      	beq.n	8016c4c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016c2a:	4b50      	ldr	r3, [pc, #320]	; (8016d6c <tcp_slowtmr+0x590>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d106      	bne.n	8016c42 <tcp_slowtmr+0x466>
 8016c34:	4b4e      	ldr	r3, [pc, #312]	; (8016d70 <tcp_slowtmr+0x594>)
 8016c36:	f240 526d 	movw	r2, #1389	; 0x56d
 8016c3a:	494e      	ldr	r1, [pc, #312]	; (8016d74 <tcp_slowtmr+0x598>)
 8016c3c:	484e      	ldr	r0, [pc, #312]	; (8016d78 <tcp_slowtmr+0x59c>)
 8016c3e:	f00a faf5 	bl	802122c <iprintf>
        prev->next = pcb->next;
 8016c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c44:	68da      	ldr	r2, [r3, #12]
 8016c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c48:	60da      	str	r2, [r3, #12]
 8016c4a:	e00f      	b.n	8016c6c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016c4c:	4b47      	ldr	r3, [pc, #284]	; (8016d6c <tcp_slowtmr+0x590>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d006      	beq.n	8016c64 <tcp_slowtmr+0x488>
 8016c56:	4b46      	ldr	r3, [pc, #280]	; (8016d70 <tcp_slowtmr+0x594>)
 8016c58:	f240 5271 	movw	r2, #1393	; 0x571
 8016c5c:	4947      	ldr	r1, [pc, #284]	; (8016d7c <tcp_slowtmr+0x5a0>)
 8016c5e:	4846      	ldr	r0, [pc, #280]	; (8016d78 <tcp_slowtmr+0x59c>)
 8016c60:	f00a fae4 	bl	802122c <iprintf>
        tcp_active_pcbs = pcb->next;
 8016c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c66:	68db      	ldr	r3, [r3, #12]
 8016c68:	4a40      	ldr	r2, [pc, #256]	; (8016d6c <tcp_slowtmr+0x590>)
 8016c6a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d013      	beq.n	8016c9c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016c7c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c80:	3304      	adds	r3, #4
 8016c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c84:	8ad2      	ldrh	r2, [r2, #22]
 8016c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c88:	8b09      	ldrh	r1, [r1, #24]
 8016c8a:	9102      	str	r1, [sp, #8]
 8016c8c:	9201      	str	r2, [sp, #4]
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	462b      	mov	r3, r5
 8016c92:	4622      	mov	r2, r4
 8016c94:	4601      	mov	r1, r0
 8016c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c98:	f004 feac 	bl	801b9f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9e:	691b      	ldr	r3, [r3, #16]
 8016ca0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca4:	7d1b      	ldrb	r3, [r3, #20]
 8016ca6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016caa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cae:	68db      	ldr	r3, [r3, #12]
 8016cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016cb2:	6838      	ldr	r0, [r7, #0]
 8016cb4:	f7ff f83a 	bl	8015d2c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016cb8:	4b31      	ldr	r3, [pc, #196]	; (8016d80 <tcp_slowtmr+0x5a4>)
 8016cba:	2200      	movs	r2, #0
 8016cbc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d004      	beq.n	8016cce <tcp_slowtmr+0x4f2>
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f06f 010c 	mvn.w	r1, #12
 8016cca:	68b8      	ldr	r0, [r7, #8]
 8016ccc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016cce:	4b2c      	ldr	r3, [pc, #176]	; (8016d80 <tcp_slowtmr+0x5a4>)
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d037      	beq.n	8016d46 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8016cd6:	e592      	b.n	80167fe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce4:	7f1b      	ldrb	r3, [r3, #28]
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	b2da      	uxtb	r2, r3
 8016cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf0:	7f1a      	ldrb	r2, [r3, #28]
 8016cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf4:	7f5b      	ldrb	r3, [r3, #29]
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	d325      	bcc.n	8016d46 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8016cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016d00:	4b1f      	ldr	r3, [pc, #124]	; (8016d80 <tcp_slowtmr+0x5a4>)
 8016d02:	2200      	movs	r2, #0
 8016d04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d00b      	beq.n	8016d28 <tcp_slowtmr+0x54c>
 8016d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d18:	6912      	ldr	r2, [r2, #16]
 8016d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d1c:	4610      	mov	r0, r2
 8016d1e:	4798      	blx	r3
 8016d20:	4603      	mov	r3, r0
 8016d22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8016d26:	e002      	b.n	8016d2e <tcp_slowtmr+0x552>
 8016d28:	2300      	movs	r3, #0
 8016d2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016d2e:	4b14      	ldr	r3, [pc, #80]	; (8016d80 <tcp_slowtmr+0x5a4>)
 8016d30:	781b      	ldrb	r3, [r3, #0]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d000      	beq.n	8016d38 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8016d36:	e562      	b.n	80167fe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016d38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d102      	bne.n	8016d46 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8016d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d42:	f004 f8a3 	bl	801ae8c <tcp_output>
  while (pcb != NULL) {
 8016d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f47f ad5e 	bne.w	801680a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8016d52:	4b0c      	ldr	r3, [pc, #48]	; (8016d84 <tcp_slowtmr+0x5a8>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016d58:	e069      	b.n	8016e2e <tcp_slowtmr+0x652>
 8016d5a:	bf00      	nop
 8016d5c:	24048e90 	.word	0x24048e90
 8016d60:	000a4cb8 	.word	0x000a4cb8
 8016d64:	10624dd3 	.word	0x10624dd3
 8016d68:	000124f8 	.word	0x000124f8
 8016d6c:	24048e8c 	.word	0x24048e8c
 8016d70:	0802594c 	.word	0x0802594c
 8016d74:	08025da0 	.word	0x08025da0
 8016d78:	080259ac 	.word	0x080259ac
 8016d7c:	08025dcc 	.word	0x08025dcc
 8016d80:	24048e88 	.word	0x24048e88
 8016d84:	24048e9c 	.word	0x24048e9c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8a:	7d1b      	ldrb	r3, [r3, #20]
 8016d8c:	2b0a      	cmp	r3, #10
 8016d8e:	d006      	beq.n	8016d9e <tcp_slowtmr+0x5c2>
 8016d90:	4b2b      	ldr	r3, [pc, #172]	; (8016e40 <tcp_slowtmr+0x664>)
 8016d92:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8016d96:	492b      	ldr	r1, [pc, #172]	; (8016e44 <tcp_slowtmr+0x668>)
 8016d98:	482b      	ldr	r0, [pc, #172]	; (8016e48 <tcp_slowtmr+0x66c>)
 8016d9a:	f00a fa47 	bl	802122c <iprintf>
    pcb_remove = 0;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016da4:	4b29      	ldr	r3, [pc, #164]	; (8016e4c <tcp_slowtmr+0x670>)
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016daa:	6a1b      	ldr	r3, [r3, #32]
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	2bf0      	cmp	r3, #240	; 0xf0
 8016db0:	d904      	bls.n	8016dbc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8016db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016db6:	3301      	adds	r3, #1
 8016db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d02f      	beq.n	8016e24 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016dc6:	f000 fbf9 	bl	80175bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d010      	beq.n	8016df2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016dd0:	4b1f      	ldr	r3, [pc, #124]	; (8016e50 <tcp_slowtmr+0x674>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016dd6:	429a      	cmp	r2, r3
 8016dd8:	d106      	bne.n	8016de8 <tcp_slowtmr+0x60c>
 8016dda:	4b19      	ldr	r3, [pc, #100]	; (8016e40 <tcp_slowtmr+0x664>)
 8016ddc:	f240 52af 	movw	r2, #1455	; 0x5af
 8016de0:	491c      	ldr	r1, [pc, #112]	; (8016e54 <tcp_slowtmr+0x678>)
 8016de2:	4819      	ldr	r0, [pc, #100]	; (8016e48 <tcp_slowtmr+0x66c>)
 8016de4:	f00a fa22 	bl	802122c <iprintf>
        prev->next = pcb->next;
 8016de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dea:	68da      	ldr	r2, [r3, #12]
 8016dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dee:	60da      	str	r2, [r3, #12]
 8016df0:	e00f      	b.n	8016e12 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016df2:	4b17      	ldr	r3, [pc, #92]	; (8016e50 <tcp_slowtmr+0x674>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	d006      	beq.n	8016e0a <tcp_slowtmr+0x62e>
 8016dfc:	4b10      	ldr	r3, [pc, #64]	; (8016e40 <tcp_slowtmr+0x664>)
 8016dfe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016e02:	4915      	ldr	r1, [pc, #84]	; (8016e58 <tcp_slowtmr+0x67c>)
 8016e04:	4810      	ldr	r0, [pc, #64]	; (8016e48 <tcp_slowtmr+0x66c>)
 8016e06:	f00a fa11 	bl	802122c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0c:	68db      	ldr	r3, [r3, #12]
 8016e0e:	4a10      	ldr	r2, [pc, #64]	; (8016e50 <tcp_slowtmr+0x674>)
 8016e10:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e14:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e18:	68db      	ldr	r3, [r3, #12]
 8016e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016e1c:	69f8      	ldr	r0, [r7, #28]
 8016e1e:	f7fe ff85 	bl	8015d2c <tcp_free>
 8016e22:	e004      	b.n	8016e2e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2a:	68db      	ldr	r3, [r3, #12]
 8016e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d1a9      	bne.n	8016d88 <tcp_slowtmr+0x5ac>
    }
  }
}
 8016e34:	bf00      	nop
 8016e36:	bf00      	nop
 8016e38:	3730      	adds	r7, #48	; 0x30
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	0802594c 	.word	0x0802594c
 8016e44:	08025df8 	.word	0x08025df8
 8016e48:	080259ac 	.word	0x080259ac
 8016e4c:	24048e90 	.word	0x24048e90
 8016e50:	24048e9c 	.word	0x24048e9c
 8016e54:	08025e28 	.word	0x08025e28
 8016e58:	08025e50 	.word	0x08025e50

08016e5c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b082      	sub	sp, #8
 8016e60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016e62:	4b2d      	ldr	r3, [pc, #180]	; (8016f18 <tcp_fasttmr+0xbc>)
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	3301      	adds	r3, #1
 8016e68:	b2da      	uxtb	r2, r3
 8016e6a:	4b2b      	ldr	r3, [pc, #172]	; (8016f18 <tcp_fasttmr+0xbc>)
 8016e6c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016e6e:	4b2b      	ldr	r3, [pc, #172]	; (8016f1c <tcp_fasttmr+0xc0>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016e74:	e048      	b.n	8016f08 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	7f9a      	ldrb	r2, [r3, #30]
 8016e7a:	4b27      	ldr	r3, [pc, #156]	; (8016f18 <tcp_fasttmr+0xbc>)
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	d03f      	beq.n	8016f02 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016e82:	4b25      	ldr	r3, [pc, #148]	; (8016f18 <tcp_fasttmr+0xbc>)
 8016e84:	781a      	ldrb	r2, [r3, #0]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	8b5b      	ldrh	r3, [r3, #26]
 8016e8e:	f003 0301 	and.w	r3, r3, #1
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d010      	beq.n	8016eb8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	8b5b      	ldrh	r3, [r3, #26]
 8016e9a:	f043 0302 	orr.w	r3, r3, #2
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f003 fff1 	bl	801ae8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	8b5b      	ldrh	r3, [r3, #26]
 8016eae:	f023 0303 	bic.w	r3, r3, #3
 8016eb2:	b29a      	uxth	r2, r3
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	8b5b      	ldrh	r3, [r3, #26]
 8016ebc:	f003 0308 	and.w	r3, r3, #8
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d009      	beq.n	8016ed8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	8b5b      	ldrh	r3, [r3, #26]
 8016ec8:	f023 0308 	bic.w	r3, r3, #8
 8016ecc:	b29a      	uxth	r2, r3
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f7ff f8be 	bl	8016054 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d00a      	beq.n	8016efc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016ee6:	4b0e      	ldr	r3, [pc, #56]	; (8016f20 <tcp_fasttmr+0xc4>)
 8016ee8:	2200      	movs	r2, #0
 8016eea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f000 f819 	bl	8016f24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016ef2:	4b0b      	ldr	r3, [pc, #44]	; (8016f20 <tcp_fasttmr+0xc4>)
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d000      	beq.n	8016efc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016efa:	e7b8      	b.n	8016e6e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	607b      	str	r3, [r7, #4]
 8016f00:	e002      	b.n	8016f08 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	68db      	ldr	r3, [r3, #12]
 8016f06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d1b3      	bne.n	8016e76 <tcp_fasttmr+0x1a>
    }
  }
}
 8016f0e:	bf00      	nop
 8016f10:	bf00      	nop
 8016f12:	3708      	adds	r7, #8
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}
 8016f18:	24040765 	.word	0x24040765
 8016f1c:	24048e8c 	.word	0x24048e8c
 8016f20:	24048e88 	.word	0x24048e88

08016f24 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016f24:	b590      	push	{r4, r7, lr}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d109      	bne.n	8016f46 <tcp_process_refused_data+0x22>
 8016f32:	4b37      	ldr	r3, [pc, #220]	; (8017010 <tcp_process_refused_data+0xec>)
 8016f34:	f240 6209 	movw	r2, #1545	; 0x609
 8016f38:	4936      	ldr	r1, [pc, #216]	; (8017014 <tcp_process_refused_data+0xf0>)
 8016f3a:	4837      	ldr	r0, [pc, #220]	; (8017018 <tcp_process_refused_data+0xf4>)
 8016f3c:	f00a f976 	bl	802122c <iprintf>
 8016f40:	f06f 030f 	mvn.w	r3, #15
 8016f44:	e060      	b.n	8017008 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f4a:	7b5b      	ldrb	r3, [r3, #13]
 8016f4c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f52:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2200      	movs	r2, #0
 8016f58:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d00b      	beq.n	8016f7c <tcp_process_refused_data+0x58>
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	6918      	ldr	r0, [r3, #16]
 8016f6e:	2300      	movs	r3, #0
 8016f70:	68ba      	ldr	r2, [r7, #8]
 8016f72:	6879      	ldr	r1, [r7, #4]
 8016f74:	47a0      	blx	r4
 8016f76:	4603      	mov	r3, r0
 8016f78:	73fb      	strb	r3, [r7, #15]
 8016f7a:	e007      	b.n	8016f8c <tcp_process_refused_data+0x68>
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	68ba      	ldr	r2, [r7, #8]
 8016f80:	6879      	ldr	r1, [r7, #4]
 8016f82:	2000      	movs	r0, #0
 8016f84:	f000 f8a4 	bl	80170d0 <tcp_recv_null>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d12a      	bne.n	8016fea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016f94:	7bbb      	ldrb	r3, [r7, #14]
 8016f96:	f003 0320 	and.w	r3, r3, #32
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d033      	beq.n	8017006 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016fa6:	d005      	beq.n	8016fb4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fac:	3301      	adds	r3, #1
 8016fae:	b29a      	uxth	r2, r3
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d00b      	beq.n	8016fd6 <tcp_process_refused_data+0xb2>
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6918      	ldr	r0, [r3, #16]
 8016fc8:	2300      	movs	r3, #0
 8016fca:	2200      	movs	r2, #0
 8016fcc:	6879      	ldr	r1, [r7, #4]
 8016fce:	47a0      	blx	r4
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	73fb      	strb	r3, [r7, #15]
 8016fd4:	e001      	b.n	8016fda <tcp_process_refused_data+0xb6>
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fde:	f113 0f0d 	cmn.w	r3, #13
 8016fe2:	d110      	bne.n	8017006 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016fe4:	f06f 030c 	mvn.w	r3, #12
 8016fe8:	e00e      	b.n	8017008 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fee:	f113 0f0d 	cmn.w	r3, #13
 8016ff2:	d102      	bne.n	8016ffa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016ff4:	f06f 030c 	mvn.w	r3, #12
 8016ff8:	e006      	b.n	8017008 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	68ba      	ldr	r2, [r7, #8]
 8016ffe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017000:	f06f 0304 	mvn.w	r3, #4
 8017004:	e000      	b.n	8017008 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017006:	2300      	movs	r3, #0
}
 8017008:	4618      	mov	r0, r3
 801700a:	3714      	adds	r7, #20
 801700c:	46bd      	mov	sp, r7
 801700e:	bd90      	pop	{r4, r7, pc}
 8017010:	0802594c 	.word	0x0802594c
 8017014:	08025e78 	.word	0x08025e78
 8017018:	080259ac 	.word	0x080259ac

0801701c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b084      	sub	sp, #16
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017024:	e007      	b.n	8017036 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f000 f80a 	bl	8017046 <tcp_seg_free>
    seg = next;
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d1f4      	bne.n	8017026 <tcp_segs_free+0xa>
  }
}
 801703c:	bf00      	nop
 801703e:	bf00      	nop
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}

08017046 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017046:	b580      	push	{r7, lr}
 8017048:	b082      	sub	sp, #8
 801704a:	af00      	add	r7, sp, #0
 801704c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00c      	beq.n	801706e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d004      	beq.n	8017066 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	4618      	mov	r0, r3
 8017062:	f7fd f8e5 	bl	8014230 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017066:	6879      	ldr	r1, [r7, #4]
 8017068:	2003      	movs	r0, #3
 801706a:	f7fc f979 	bl	8013360 <memp_free>
  }
}
 801706e:	bf00      	nop
 8017070:	3708      	adds	r7, #8
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
	...

08017078 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b084      	sub	sp, #16
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d106      	bne.n	8017094 <tcp_seg_copy+0x1c>
 8017086:	4b0f      	ldr	r3, [pc, #60]	; (80170c4 <tcp_seg_copy+0x4c>)
 8017088:	f240 6282 	movw	r2, #1666	; 0x682
 801708c:	490e      	ldr	r1, [pc, #56]	; (80170c8 <tcp_seg_copy+0x50>)
 801708e:	480f      	ldr	r0, [pc, #60]	; (80170cc <tcp_seg_copy+0x54>)
 8017090:	f00a f8cc 	bl	802122c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017094:	2003      	movs	r0, #3
 8017096:	f7fc f8ed 	bl	8013274 <memp_malloc>
 801709a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d101      	bne.n	80170a6 <tcp_seg_copy+0x2e>
    return NULL;
 80170a2:	2300      	movs	r3, #0
 80170a4:	e00a      	b.n	80170bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80170a6:	2210      	movs	r2, #16
 80170a8:	6879      	ldr	r1, [r7, #4]
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f009 fc4c 	bl	8020948 <memcpy>
  pbuf_ref(cseg->p);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7fd f961 	bl	801437c <pbuf_ref>
  return cseg;
 80170ba:	68fb      	ldr	r3, [r7, #12]
}
 80170bc:	4618      	mov	r0, r3
 80170be:	3710      	adds	r7, #16
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}
 80170c4:	0802594c 	.word	0x0802594c
 80170c8:	08025ebc 	.word	0x08025ebc
 80170cc:	080259ac 	.word	0x080259ac

080170d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	60f8      	str	r0, [r7, #12]
 80170d8:	60b9      	str	r1, [r7, #8]
 80170da:	607a      	str	r2, [r7, #4]
 80170dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d109      	bne.n	80170f8 <tcp_recv_null+0x28>
 80170e4:	4b12      	ldr	r3, [pc, #72]	; (8017130 <tcp_recv_null+0x60>)
 80170e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80170ea:	4912      	ldr	r1, [pc, #72]	; (8017134 <tcp_recv_null+0x64>)
 80170ec:	4812      	ldr	r0, [pc, #72]	; (8017138 <tcp_recv_null+0x68>)
 80170ee:	f00a f89d 	bl	802122c <iprintf>
 80170f2:	f06f 030f 	mvn.w	r3, #15
 80170f6:	e016      	b.n	8017126 <tcp_recv_null+0x56>

  if (p != NULL) {
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d009      	beq.n	8017112 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	891b      	ldrh	r3, [r3, #8]
 8017102:	4619      	mov	r1, r3
 8017104:	68b8      	ldr	r0, [r7, #8]
 8017106:	f7ff f9bb 	bl	8016480 <tcp_recved>
    pbuf_free(p);
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f7fd f890 	bl	8014230 <pbuf_free>
 8017110:	e008      	b.n	8017124 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d104      	bne.n	8017124 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801711a:	68b8      	ldr	r0, [r7, #8]
 801711c:	f7ff f804 	bl	8016128 <tcp_close>
 8017120:	4603      	mov	r3, r0
 8017122:	e000      	b.n	8017126 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017124:	2300      	movs	r3, #0
}
 8017126:	4618      	mov	r0, r3
 8017128:	3710      	adds	r7, #16
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	0802594c 	.word	0x0802594c
 8017134:	08025ed8 	.word	0x08025ed8
 8017138:	080259ac 	.word	0x080259ac

0801713c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b086      	sub	sp, #24
 8017140:	af00      	add	r7, sp, #0
 8017142:	4603      	mov	r3, r0
 8017144:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801714a:	2b00      	cmp	r3, #0
 801714c:	db01      	blt.n	8017152 <tcp_kill_prio+0x16>
 801714e:	79fb      	ldrb	r3, [r7, #7]
 8017150:	e000      	b.n	8017154 <tcp_kill_prio+0x18>
 8017152:	237f      	movs	r3, #127	; 0x7f
 8017154:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017156:	7afb      	ldrb	r3, [r7, #11]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d034      	beq.n	80171c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801715c:	7afb      	ldrb	r3, [r7, #11]
 801715e:	3b01      	subs	r3, #1
 8017160:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017162:	2300      	movs	r3, #0
 8017164:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017166:	2300      	movs	r3, #0
 8017168:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801716a:	4b19      	ldr	r3, [pc, #100]	; (80171d0 <tcp_kill_prio+0x94>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	617b      	str	r3, [r7, #20]
 8017170:	e01f      	b.n	80171b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	7d5b      	ldrb	r3, [r3, #21]
 8017176:	7afa      	ldrb	r2, [r7, #11]
 8017178:	429a      	cmp	r2, r3
 801717a:	d80c      	bhi.n	8017196 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017180:	7afa      	ldrb	r2, [r7, #11]
 8017182:	429a      	cmp	r2, r3
 8017184:	d112      	bne.n	80171ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017186:	4b13      	ldr	r3, [pc, #76]	; (80171d4 <tcp_kill_prio+0x98>)
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	6a1b      	ldr	r3, [r3, #32]
 801718e:	1ad3      	subs	r3, r2, r3
 8017190:	68fa      	ldr	r2, [r7, #12]
 8017192:	429a      	cmp	r2, r3
 8017194:	d80a      	bhi.n	80171ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017196:	4b0f      	ldr	r3, [pc, #60]	; (80171d4 <tcp_kill_prio+0x98>)
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	6a1b      	ldr	r3, [r3, #32]
 801719e:	1ad3      	subs	r3, r2, r3
 80171a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	7d5b      	ldrb	r3, [r3, #21]
 80171aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	68db      	ldr	r3, [r3, #12]
 80171b0:	617b      	str	r3, [r7, #20]
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d1dc      	bne.n	8017172 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d004      	beq.n	80171c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80171be:	6938      	ldr	r0, [r7, #16]
 80171c0:	f7ff f8f8 	bl	80163b4 <tcp_abort>
 80171c4:	e000      	b.n	80171c8 <tcp_kill_prio+0x8c>
    return;
 80171c6:	bf00      	nop
  }
}
 80171c8:	3718      	adds	r7, #24
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
 80171ce:	bf00      	nop
 80171d0:	24048e8c 	.word	0x24048e8c
 80171d4:	24048e90 	.word	0x24048e90

080171d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b086      	sub	sp, #24
 80171dc:	af00      	add	r7, sp, #0
 80171de:	4603      	mov	r3, r0
 80171e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80171e2:	79fb      	ldrb	r3, [r7, #7]
 80171e4:	2b08      	cmp	r3, #8
 80171e6:	d009      	beq.n	80171fc <tcp_kill_state+0x24>
 80171e8:	79fb      	ldrb	r3, [r7, #7]
 80171ea:	2b09      	cmp	r3, #9
 80171ec:	d006      	beq.n	80171fc <tcp_kill_state+0x24>
 80171ee:	4b1a      	ldr	r3, [pc, #104]	; (8017258 <tcp_kill_state+0x80>)
 80171f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80171f4:	4919      	ldr	r1, [pc, #100]	; (801725c <tcp_kill_state+0x84>)
 80171f6:	481a      	ldr	r0, [pc, #104]	; (8017260 <tcp_kill_state+0x88>)
 80171f8:	f00a f818 	bl	802122c <iprintf>

  inactivity = 0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017200:	2300      	movs	r3, #0
 8017202:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017204:	4b17      	ldr	r3, [pc, #92]	; (8017264 <tcp_kill_state+0x8c>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	617b      	str	r3, [r7, #20]
 801720a:	e017      	b.n	801723c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	7d1b      	ldrb	r3, [r3, #20]
 8017210:	79fa      	ldrb	r2, [r7, #7]
 8017212:	429a      	cmp	r2, r3
 8017214:	d10f      	bne.n	8017236 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017216:	4b14      	ldr	r3, [pc, #80]	; (8017268 <tcp_kill_state+0x90>)
 8017218:	681a      	ldr	r2, [r3, #0]
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	6a1b      	ldr	r3, [r3, #32]
 801721e:	1ad3      	subs	r3, r2, r3
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	429a      	cmp	r2, r3
 8017224:	d807      	bhi.n	8017236 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017226:	4b10      	ldr	r3, [pc, #64]	; (8017268 <tcp_kill_state+0x90>)
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	6a1b      	ldr	r3, [r3, #32]
 801722e:	1ad3      	subs	r3, r2, r3
 8017230:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	68db      	ldr	r3, [r3, #12]
 801723a:	617b      	str	r3, [r7, #20]
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d1e4      	bne.n	801720c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d003      	beq.n	8017250 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017248:	2100      	movs	r1, #0
 801724a:	6938      	ldr	r0, [r7, #16]
 801724c:	f7fe fff4 	bl	8016238 <tcp_abandon>
  }
}
 8017250:	bf00      	nop
 8017252:	3718      	adds	r7, #24
 8017254:	46bd      	mov	sp, r7
 8017256:	bd80      	pop	{r7, pc}
 8017258:	0802594c 	.word	0x0802594c
 801725c:	08025ef4 	.word	0x08025ef4
 8017260:	080259ac 	.word	0x080259ac
 8017264:	24048e8c 	.word	0x24048e8c
 8017268:	24048e90 	.word	0x24048e90

0801726c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017272:	2300      	movs	r3, #0
 8017274:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017276:	2300      	movs	r3, #0
 8017278:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801727a:	4b12      	ldr	r3, [pc, #72]	; (80172c4 <tcp_kill_timewait+0x58>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	60fb      	str	r3, [r7, #12]
 8017280:	e012      	b.n	80172a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017282:	4b11      	ldr	r3, [pc, #68]	; (80172c8 <tcp_kill_timewait+0x5c>)
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	6a1b      	ldr	r3, [r3, #32]
 801728a:	1ad3      	subs	r3, r2, r3
 801728c:	687a      	ldr	r2, [r7, #4]
 801728e:	429a      	cmp	r2, r3
 8017290:	d807      	bhi.n	80172a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017292:	4b0d      	ldr	r3, [pc, #52]	; (80172c8 <tcp_kill_timewait+0x5c>)
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	6a1b      	ldr	r3, [r3, #32]
 801729a:	1ad3      	subs	r3, r2, r3
 801729c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	68db      	ldr	r3, [r3, #12]
 80172a6:	60fb      	str	r3, [r7, #12]
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d1e9      	bne.n	8017282 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d002      	beq.n	80172ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80172b4:	68b8      	ldr	r0, [r7, #8]
 80172b6:	f7ff f87d 	bl	80163b4 <tcp_abort>
  }
}
 80172ba:	bf00      	nop
 80172bc:	3710      	adds	r7, #16
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	24048e9c 	.word	0x24048e9c
 80172c8:	24048e90 	.word	0x24048e90

080172cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80172d2:	4b10      	ldr	r3, [pc, #64]	; (8017314 <tcp_handle_closepend+0x48>)
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80172d8:	e014      	b.n	8017304 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	68db      	ldr	r3, [r3, #12]
 80172de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	8b5b      	ldrh	r3, [r3, #26]
 80172e4:	f003 0308 	and.w	r3, r3, #8
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d009      	beq.n	8017300 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	8b5b      	ldrh	r3, [r3, #26]
 80172f0:	f023 0308 	bic.w	r3, r3, #8
 80172f4:	b29a      	uxth	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f7fe feaa 	bl	8016054 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d1e7      	bne.n	80172da <tcp_handle_closepend+0xe>
  }
}
 801730a:	bf00      	nop
 801730c:	bf00      	nop
 801730e:	3708      	adds	r7, #8
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}
 8017314:	24048e8c 	.word	0x24048e8c

08017318 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017322:	2001      	movs	r0, #1
 8017324:	f7fb ffa6 	bl	8013274 <memp_malloc>
 8017328:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d126      	bne.n	801737e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017330:	f7ff ffcc 	bl	80172cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017334:	f7ff ff9a 	bl	801726c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017338:	2001      	movs	r0, #1
 801733a:	f7fb ff9b 	bl	8013274 <memp_malloc>
 801733e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d11b      	bne.n	801737e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017346:	2009      	movs	r0, #9
 8017348:	f7ff ff46 	bl	80171d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801734c:	2001      	movs	r0, #1
 801734e:	f7fb ff91 	bl	8013274 <memp_malloc>
 8017352:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d111      	bne.n	801737e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801735a:	2008      	movs	r0, #8
 801735c:	f7ff ff3c 	bl	80171d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017360:	2001      	movs	r0, #1
 8017362:	f7fb ff87 	bl	8013274 <memp_malloc>
 8017366:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d107      	bne.n	801737e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801736e:	79fb      	ldrb	r3, [r7, #7]
 8017370:	4618      	mov	r0, r3
 8017372:	f7ff fee3 	bl	801713c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017376:	2001      	movs	r0, #1
 8017378:	f7fb ff7c 	bl	8013274 <memp_malloc>
 801737c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d03f      	beq.n	8017404 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017384:	229c      	movs	r2, #156	; 0x9c
 8017386:	2100      	movs	r1, #0
 8017388:	68f8      	ldr	r0, [r7, #12]
 801738a:	f009 fb05 	bl	8020998 <memset>
    pcb->prio = prio;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	79fa      	ldrb	r2, [r7, #7]
 8017392:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801739a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80173a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	22ff      	movs	r2, #255	; 0xff
 80173b2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80173ba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	2206      	movs	r2, #6
 80173c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	2206      	movs	r2, #6
 80173c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173d0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2201      	movs	r2, #1
 80173d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80173da:	4b0d      	ldr	r3, [pc, #52]	; (8017410 <tcp_alloc+0xf8>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80173e2:	4b0c      	ldr	r3, [pc, #48]	; (8017414 <tcp_alloc+0xfc>)
 80173e4:	781a      	ldrb	r2, [r3, #0]
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80173f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	4a08      	ldr	r2, [pc, #32]	; (8017418 <tcp_alloc+0x100>)
 80173f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	4a07      	ldr	r2, [pc, #28]	; (801741c <tcp_alloc+0x104>)
 8017400:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017404:	68fb      	ldr	r3, [r7, #12]
}
 8017406:	4618      	mov	r0, r3
 8017408:	3710      	adds	r7, #16
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	24048e90 	.word	0x24048e90
 8017414:	24040765 	.word	0x24040765
 8017418:	080170d1 	.word	0x080170d1
 801741c:	006ddd00 	.word	0x006ddd00

08017420 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b084      	sub	sp, #16
 8017424:	af00      	add	r7, sp, #0
 8017426:	4603      	mov	r3, r0
 8017428:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801742a:	2040      	movs	r0, #64	; 0x40
 801742c:	f7ff ff74 	bl	8017318 <tcp_alloc>
 8017430:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017432:	68fb      	ldr	r3, [r7, #12]
}
 8017434:	4618      	mov	r0, r3
 8017436:	3710      	adds	r7, #16
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}

0801743c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d002      	beq.n	8017452 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	683a      	ldr	r2, [r7, #0]
 8017450:	611a      	str	r2, [r3, #16]
  }
}
 8017452:	bf00      	nop
 8017454:	370c      	adds	r7, #12
 8017456:	46bd      	mov	sp, r7
 8017458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745c:	4770      	bx	lr
	...

08017460 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b082      	sub	sp, #8
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d00e      	beq.n	801748e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	7d1b      	ldrb	r3, [r3, #20]
 8017474:	2b01      	cmp	r3, #1
 8017476:	d106      	bne.n	8017486 <tcp_recv+0x26>
 8017478:	4b07      	ldr	r3, [pc, #28]	; (8017498 <tcp_recv+0x38>)
 801747a:	f240 72df 	movw	r2, #2015	; 0x7df
 801747e:	4907      	ldr	r1, [pc, #28]	; (801749c <tcp_recv+0x3c>)
 8017480:	4807      	ldr	r0, [pc, #28]	; (80174a0 <tcp_recv+0x40>)
 8017482:	f009 fed3 	bl	802122c <iprintf>
    pcb->recv = recv;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	683a      	ldr	r2, [r7, #0]
 801748a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801748e:	bf00      	nop
 8017490:	3708      	adds	r7, #8
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}
 8017496:	bf00      	nop
 8017498:	0802594c 	.word	0x0802594c
 801749c:	08025f04 	.word	0x08025f04
 80174a0:	080259ac 	.word	0x080259ac

080174a4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d00e      	beq.n	80174d2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	7d1b      	ldrb	r3, [r3, #20]
 80174b8:	2b01      	cmp	r3, #1
 80174ba:	d106      	bne.n	80174ca <tcp_sent+0x26>
 80174bc:	4b07      	ldr	r3, [pc, #28]	; (80174dc <tcp_sent+0x38>)
 80174be:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80174c2:	4907      	ldr	r1, [pc, #28]	; (80174e0 <tcp_sent+0x3c>)
 80174c4:	4807      	ldr	r0, [pc, #28]	; (80174e4 <tcp_sent+0x40>)
 80174c6:	f009 feb1 	bl	802122c <iprintf>
    pcb->sent = sent;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	683a      	ldr	r2, [r7, #0]
 80174ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80174d2:	bf00      	nop
 80174d4:	3708      	adds	r7, #8
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	0802594c 	.word	0x0802594c
 80174e0:	08025f2c 	.word	0x08025f2c
 80174e4:	080259ac 	.word	0x080259ac

080174e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d00e      	beq.n	8017516 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	7d1b      	ldrb	r3, [r3, #20]
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	d106      	bne.n	801750e <tcp_err+0x26>
 8017500:	4b07      	ldr	r3, [pc, #28]	; (8017520 <tcp_err+0x38>)
 8017502:	f640 020d 	movw	r2, #2061	; 0x80d
 8017506:	4907      	ldr	r1, [pc, #28]	; (8017524 <tcp_err+0x3c>)
 8017508:	4807      	ldr	r0, [pc, #28]	; (8017528 <tcp_err+0x40>)
 801750a:	f009 fe8f 	bl	802122c <iprintf>
    pcb->errf = err;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	683a      	ldr	r2, [r7, #0]
 8017512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017516:	bf00      	nop
 8017518:	3708      	adds	r7, #8
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}
 801751e:	bf00      	nop
 8017520:	0802594c 	.word	0x0802594c
 8017524:	08025f54 	.word	0x08025f54
 8017528:	080259ac 	.word	0x080259ac

0801752c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801752c:	b480      	push	{r7}
 801752e:	b085      	sub	sp, #20
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d008      	beq.n	801754e <tcp_accept+0x22>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	7d1b      	ldrb	r3, [r3, #20]
 8017540:	2b01      	cmp	r3, #1
 8017542:	d104      	bne.n	801754e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	683a      	ldr	r2, [r7, #0]
 801754c:	619a      	str	r2, [r3, #24]
  }
}
 801754e:	bf00      	nop
 8017550:	3714      	adds	r7, #20
 8017552:	46bd      	mov	sp, r7
 8017554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017558:	4770      	bx	lr
	...

0801755c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	60f8      	str	r0, [r7, #12]
 8017564:	60b9      	str	r1, [r7, #8]
 8017566:	4613      	mov	r3, r2
 8017568:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d107      	bne.n	8017580 <tcp_poll+0x24>
 8017570:	4b0e      	ldr	r3, [pc, #56]	; (80175ac <tcp_poll+0x50>)
 8017572:	f640 023d 	movw	r2, #2109	; 0x83d
 8017576:	490e      	ldr	r1, [pc, #56]	; (80175b0 <tcp_poll+0x54>)
 8017578:	480e      	ldr	r0, [pc, #56]	; (80175b4 <tcp_poll+0x58>)
 801757a:	f009 fe57 	bl	802122c <iprintf>
 801757e:	e011      	b.n	80175a4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	7d1b      	ldrb	r3, [r3, #20]
 8017584:	2b01      	cmp	r3, #1
 8017586:	d106      	bne.n	8017596 <tcp_poll+0x3a>
 8017588:	4b08      	ldr	r3, [pc, #32]	; (80175ac <tcp_poll+0x50>)
 801758a:	f640 023e 	movw	r2, #2110	; 0x83e
 801758e:	490a      	ldr	r1, [pc, #40]	; (80175b8 <tcp_poll+0x5c>)
 8017590:	4808      	ldr	r0, [pc, #32]	; (80175b4 <tcp_poll+0x58>)
 8017592:	f009 fe4b 	bl	802122c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	68ba      	ldr	r2, [r7, #8]
 801759a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	79fa      	ldrb	r2, [r7, #7]
 80175a2:	775a      	strb	r2, [r3, #29]
}
 80175a4:	3710      	adds	r7, #16
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	0802594c 	.word	0x0802594c
 80175b0:	08025f7c 	.word	0x08025f7c
 80175b4:	080259ac 	.word	0x080259ac
 80175b8:	08025f94 	.word	0x08025f94

080175bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b082      	sub	sp, #8
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d107      	bne.n	80175da <tcp_pcb_purge+0x1e>
 80175ca:	4b21      	ldr	r3, [pc, #132]	; (8017650 <tcp_pcb_purge+0x94>)
 80175cc:	f640 0251 	movw	r2, #2129	; 0x851
 80175d0:	4920      	ldr	r1, [pc, #128]	; (8017654 <tcp_pcb_purge+0x98>)
 80175d2:	4821      	ldr	r0, [pc, #132]	; (8017658 <tcp_pcb_purge+0x9c>)
 80175d4:	f009 fe2a 	bl	802122c <iprintf>
 80175d8:	e037      	b.n	801764a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	7d1b      	ldrb	r3, [r3, #20]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d033      	beq.n	801764a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80175e6:	2b0a      	cmp	r3, #10
 80175e8:	d02f      	beq.n	801764a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80175ee:	2b01      	cmp	r3, #1
 80175f0:	d02b      	beq.n	801764a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d007      	beq.n	801760a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80175fe:	4618      	mov	r0, r3
 8017600:	f7fc fe16 	bl	8014230 <pbuf_free>
      pcb->refused_data = NULL;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2200      	movs	r2, #0
 8017608:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801760e:	2b00      	cmp	r3, #0
 8017610:	d002      	beq.n	8017618 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 f986 	bl	8017924 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801761e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017624:	4618      	mov	r0, r3
 8017626:	f7ff fcf9 	bl	801701c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801762e:	4618      	mov	r0, r3
 8017630:	f7ff fcf4 	bl	801701c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2200      	movs	r2, #0
 8017638:	66da      	str	r2, [r3, #108]	; 0x6c
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	2200      	movs	r2, #0
 8017646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801764a:	3708      	adds	r7, #8
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}
 8017650:	0802594c 	.word	0x0802594c
 8017654:	08025fb4 	.word	0x08025fb4
 8017658:	080259ac 	.word	0x080259ac

0801765c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d106      	bne.n	801767a <tcp_pcb_remove+0x1e>
 801766c:	4b3e      	ldr	r3, [pc, #248]	; (8017768 <tcp_pcb_remove+0x10c>)
 801766e:	f640 0283 	movw	r2, #2179	; 0x883
 8017672:	493e      	ldr	r1, [pc, #248]	; (801776c <tcp_pcb_remove+0x110>)
 8017674:	483e      	ldr	r0, [pc, #248]	; (8017770 <tcp_pcb_remove+0x114>)
 8017676:	f009 fdd9 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d106      	bne.n	801768e <tcp_pcb_remove+0x32>
 8017680:	4b39      	ldr	r3, [pc, #228]	; (8017768 <tcp_pcb_remove+0x10c>)
 8017682:	f640 0284 	movw	r2, #2180	; 0x884
 8017686:	493b      	ldr	r1, [pc, #236]	; (8017774 <tcp_pcb_remove+0x118>)
 8017688:	4839      	ldr	r0, [pc, #228]	; (8017770 <tcp_pcb_remove+0x114>)
 801768a:	f009 fdcf 	bl	802122c <iprintf>

  TCP_RMV(pcblist, pcb);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	683a      	ldr	r2, [r7, #0]
 8017694:	429a      	cmp	r2, r3
 8017696:	d105      	bne.n	80176a4 <tcp_pcb_remove+0x48>
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	68da      	ldr	r2, [r3, #12]
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	601a      	str	r2, [r3, #0]
 80176a2:	e013      	b.n	80176cc <tcp_pcb_remove+0x70>
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	60fb      	str	r3, [r7, #12]
 80176aa:	e00c      	b.n	80176c6 <tcp_pcb_remove+0x6a>
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	68db      	ldr	r3, [r3, #12]
 80176b0:	683a      	ldr	r2, [r7, #0]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d104      	bne.n	80176c0 <tcp_pcb_remove+0x64>
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	68da      	ldr	r2, [r3, #12]
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	60da      	str	r2, [r3, #12]
 80176be:	e005      	b.n	80176cc <tcp_pcb_remove+0x70>
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	68db      	ldr	r3, [r3, #12]
 80176c4:	60fb      	str	r3, [r7, #12]
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d1ef      	bne.n	80176ac <tcp_pcb_remove+0x50>
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	2200      	movs	r2, #0
 80176d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80176d2:	6838      	ldr	r0, [r7, #0]
 80176d4:	f7ff ff72 	bl	80175bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	7d1b      	ldrb	r3, [r3, #20]
 80176dc:	2b0a      	cmp	r3, #10
 80176de:	d013      	beq.n	8017708 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80176e4:	2b01      	cmp	r3, #1
 80176e6:	d00f      	beq.n	8017708 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	8b5b      	ldrh	r3, [r3, #26]
 80176ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d009      	beq.n	8017708 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80176f4:	683b      	ldr	r3, [r7, #0]
 80176f6:	8b5b      	ldrh	r3, [r3, #26]
 80176f8:	f043 0302 	orr.w	r3, r3, #2
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017702:	6838      	ldr	r0, [r7, #0]
 8017704:	f003 fbc2 	bl	801ae8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	7d1b      	ldrb	r3, [r3, #20]
 801770c:	2b01      	cmp	r3, #1
 801770e:	d020      	beq.n	8017752 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017710:	683b      	ldr	r3, [r7, #0]
 8017712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017714:	2b00      	cmp	r3, #0
 8017716:	d006      	beq.n	8017726 <tcp_pcb_remove+0xca>
 8017718:	4b13      	ldr	r3, [pc, #76]	; (8017768 <tcp_pcb_remove+0x10c>)
 801771a:	f640 0293 	movw	r2, #2195	; 0x893
 801771e:	4916      	ldr	r1, [pc, #88]	; (8017778 <tcp_pcb_remove+0x11c>)
 8017720:	4813      	ldr	r0, [pc, #76]	; (8017770 <tcp_pcb_remove+0x114>)
 8017722:	f009 fd83 	bl	802122c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801772a:	2b00      	cmp	r3, #0
 801772c:	d006      	beq.n	801773c <tcp_pcb_remove+0xe0>
 801772e:	4b0e      	ldr	r3, [pc, #56]	; (8017768 <tcp_pcb_remove+0x10c>)
 8017730:	f640 0294 	movw	r2, #2196	; 0x894
 8017734:	4911      	ldr	r1, [pc, #68]	; (801777c <tcp_pcb_remove+0x120>)
 8017736:	480e      	ldr	r0, [pc, #56]	; (8017770 <tcp_pcb_remove+0x114>)
 8017738:	f009 fd78 	bl	802122c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017740:	2b00      	cmp	r3, #0
 8017742:	d006      	beq.n	8017752 <tcp_pcb_remove+0xf6>
 8017744:	4b08      	ldr	r3, [pc, #32]	; (8017768 <tcp_pcb_remove+0x10c>)
 8017746:	f640 0296 	movw	r2, #2198	; 0x896
 801774a:	490d      	ldr	r1, [pc, #52]	; (8017780 <tcp_pcb_remove+0x124>)
 801774c:	4808      	ldr	r0, [pc, #32]	; (8017770 <tcp_pcb_remove+0x114>)
 801774e:	f009 fd6d 	bl	802122c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	2200      	movs	r2, #0
 8017756:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	2200      	movs	r2, #0
 801775c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801775e:	bf00      	nop
 8017760:	3710      	adds	r7, #16
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	0802594c 	.word	0x0802594c
 801776c:	08025fd0 	.word	0x08025fd0
 8017770:	080259ac 	.word	0x080259ac
 8017774:	08025fec 	.word	0x08025fec
 8017778:	0802600c 	.word	0x0802600c
 801777c:	08026024 	.word	0x08026024
 8017780:	08026040 	.word	0x08026040

08017784 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d106      	bne.n	80177a0 <tcp_next_iss+0x1c>
 8017792:	4b0a      	ldr	r3, [pc, #40]	; (80177bc <tcp_next_iss+0x38>)
 8017794:	f640 02af 	movw	r2, #2223	; 0x8af
 8017798:	4909      	ldr	r1, [pc, #36]	; (80177c0 <tcp_next_iss+0x3c>)
 801779a:	480a      	ldr	r0, [pc, #40]	; (80177c4 <tcp_next_iss+0x40>)
 801779c:	f009 fd46 	bl	802122c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80177a0:	4b09      	ldr	r3, [pc, #36]	; (80177c8 <tcp_next_iss+0x44>)
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	4b09      	ldr	r3, [pc, #36]	; (80177cc <tcp_next_iss+0x48>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	4413      	add	r3, r2
 80177aa:	4a07      	ldr	r2, [pc, #28]	; (80177c8 <tcp_next_iss+0x44>)
 80177ac:	6013      	str	r3, [r2, #0]
  return iss;
 80177ae:	4b06      	ldr	r3, [pc, #24]	; (80177c8 <tcp_next_iss+0x44>)
 80177b0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	3708      	adds	r7, #8
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}
 80177ba:	bf00      	nop
 80177bc:	0802594c 	.word	0x0802594c
 80177c0:	08026058 	.word	0x08026058
 80177c4:	080259ac 	.word	0x080259ac
 80177c8:	2400002c 	.word	0x2400002c
 80177cc:	24048e90 	.word	0x24048e90

080177d0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b086      	sub	sp, #24
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	4603      	mov	r3, r0
 80177d8:	60b9      	str	r1, [r7, #8]
 80177da:	607a      	str	r2, [r7, #4]
 80177dc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d106      	bne.n	80177f2 <tcp_eff_send_mss_netif+0x22>
 80177e4:	4b14      	ldr	r3, [pc, #80]	; (8017838 <tcp_eff_send_mss_netif+0x68>)
 80177e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80177ea:	4914      	ldr	r1, [pc, #80]	; (801783c <tcp_eff_send_mss_netif+0x6c>)
 80177ec:	4814      	ldr	r0, [pc, #80]	; (8017840 <tcp_eff_send_mss_netif+0x70>)
 80177ee:	f009 fd1d 	bl	802122c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d101      	bne.n	80177fc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80177f8:	89fb      	ldrh	r3, [r7, #14]
 80177fa:	e019      	b.n	8017830 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017800:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017802:	8afb      	ldrh	r3, [r7, #22]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d012      	beq.n	801782e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017808:	2328      	movs	r3, #40	; 0x28
 801780a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801780c:	8afa      	ldrh	r2, [r7, #22]
 801780e:	8abb      	ldrh	r3, [r7, #20]
 8017810:	429a      	cmp	r2, r3
 8017812:	d904      	bls.n	801781e <tcp_eff_send_mss_netif+0x4e>
 8017814:	8afa      	ldrh	r2, [r7, #22]
 8017816:	8abb      	ldrh	r3, [r7, #20]
 8017818:	1ad3      	subs	r3, r2, r3
 801781a:	b29b      	uxth	r3, r3
 801781c:	e000      	b.n	8017820 <tcp_eff_send_mss_netif+0x50>
 801781e:	2300      	movs	r3, #0
 8017820:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017822:	8a7a      	ldrh	r2, [r7, #18]
 8017824:	89fb      	ldrh	r3, [r7, #14]
 8017826:	4293      	cmp	r3, r2
 8017828:	bf28      	it	cs
 801782a:	4613      	movcs	r3, r2
 801782c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801782e:	89fb      	ldrh	r3, [r7, #14]
}
 8017830:	4618      	mov	r0, r3
 8017832:	3718      	adds	r7, #24
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	0802594c 	.word	0x0802594c
 801783c:	08026074 	.word	0x08026074
 8017840:	080259ac 	.word	0x080259ac

08017844 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d119      	bne.n	801788c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017858:	4b10      	ldr	r3, [pc, #64]	; (801789c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801785a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801785e:	4910      	ldr	r1, [pc, #64]	; (80178a0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017860:	4810      	ldr	r0, [pc, #64]	; (80178a4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017862:	f009 fce3 	bl	802122c <iprintf>

  while (pcb != NULL) {
 8017866:	e011      	b.n	801788c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	681a      	ldr	r2, [r3, #0]
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	429a      	cmp	r2, r3
 8017872:	d108      	bne.n	8017886 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	68db      	ldr	r3, [r3, #12]
 8017878:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801787a:	68f8      	ldr	r0, [r7, #12]
 801787c:	f7fe fd9a 	bl	80163b4 <tcp_abort>
      pcb = next;
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	60fb      	str	r3, [r7, #12]
 8017884:	e002      	b.n	801788c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	68db      	ldr	r3, [r3, #12]
 801788a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d1ea      	bne.n	8017868 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017892:	bf00      	nop
 8017894:	bf00      	nop
 8017896:	3710      	adds	r7, #16
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}
 801789c:	0802594c 	.word	0x0802594c
 80178a0:	0802609c 	.word	0x0802609c
 80178a4:	080259ac 	.word	0x080259ac

080178a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d02a      	beq.n	801790e <tcp_netif_ip_addr_changed+0x66>
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d026      	beq.n	801790e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80178c0:	4b15      	ldr	r3, [pc, #84]	; (8017918 <tcp_netif_ip_addr_changed+0x70>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4619      	mov	r1, r3
 80178c6:	6878      	ldr	r0, [r7, #4]
 80178c8:	f7ff ffbc 	bl	8017844 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80178cc:	4b13      	ldr	r3, [pc, #76]	; (801791c <tcp_netif_ip_addr_changed+0x74>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	4619      	mov	r1, r3
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	f7ff ffb6 	bl	8017844 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80178d8:	683b      	ldr	r3, [r7, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d017      	beq.n	801790e <tcp_netif_ip_addr_changed+0x66>
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d013      	beq.n	801790e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80178e6:	4b0e      	ldr	r3, [pc, #56]	; (8017920 <tcp_netif_ip_addr_changed+0x78>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	60fb      	str	r3, [r7, #12]
 80178ec:	e00c      	b.n	8017908 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	681a      	ldr	r2, [r3, #0]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d103      	bne.n	8017902 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	68db      	ldr	r3, [r3, #12]
 8017906:	60fb      	str	r3, [r7, #12]
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d1ef      	bne.n	80178ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801790e:	bf00      	nop
 8017910:	3710      	adds	r7, #16
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}
 8017916:	bf00      	nop
 8017918:	24048e8c 	.word	0x24048e8c
 801791c:	24048e98 	.word	0x24048e98
 8017920:	24048e94 	.word	0x24048e94

08017924 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017930:	2b00      	cmp	r3, #0
 8017932:	d007      	beq.n	8017944 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017938:	4618      	mov	r0, r3
 801793a:	f7ff fb6f 	bl	801701c <tcp_segs_free>
    pcb->ooseq = NULL;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2200      	movs	r2, #0
 8017942:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017944:	bf00      	nop
 8017946:	3708      	adds	r7, #8
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801794c:	b590      	push	{r4, r7, lr}
 801794e:	b08d      	sub	sp, #52	; 0x34
 8017950:	af04      	add	r7, sp, #16
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d105      	bne.n	8017968 <tcp_input+0x1c>
 801795c:	4b9b      	ldr	r3, [pc, #620]	; (8017bcc <tcp_input+0x280>)
 801795e:	2283      	movs	r2, #131	; 0x83
 8017960:	499b      	ldr	r1, [pc, #620]	; (8017bd0 <tcp_input+0x284>)
 8017962:	489c      	ldr	r0, [pc, #624]	; (8017bd4 <tcp_input+0x288>)
 8017964:	f009 fc62 	bl	802122c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	4a9a      	ldr	r2, [pc, #616]	; (8017bd8 <tcp_input+0x28c>)
 801796e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	895b      	ldrh	r3, [r3, #10]
 8017974:	2b13      	cmp	r3, #19
 8017976:	f240 83c4 	bls.w	8018102 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801797a:	4b98      	ldr	r3, [pc, #608]	; (8017bdc <tcp_input+0x290>)
 801797c:	695b      	ldr	r3, [r3, #20]
 801797e:	4a97      	ldr	r2, [pc, #604]	; (8017bdc <tcp_input+0x290>)
 8017980:	6812      	ldr	r2, [r2, #0]
 8017982:	4611      	mov	r1, r2
 8017984:	4618      	mov	r0, r3
 8017986:	f7fa f833 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 801798a:	4603      	mov	r3, r0
 801798c:	2b00      	cmp	r3, #0
 801798e:	f040 83ba 	bne.w	8018106 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017992:	4b92      	ldr	r3, [pc, #584]	; (8017bdc <tcp_input+0x290>)
 8017994:	695b      	ldr	r3, [r3, #20]
 8017996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801799a:	2be0      	cmp	r3, #224	; 0xe0
 801799c:	f000 83b3 	beq.w	8018106 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80179a0:	4b8d      	ldr	r3, [pc, #564]	; (8017bd8 <tcp_input+0x28c>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	899b      	ldrh	r3, [r3, #12]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7f8 fa95 	bl	800fed8 <lwip_htons>
 80179ae:	4603      	mov	r3, r0
 80179b0:	0b1b      	lsrs	r3, r3, #12
 80179b2:	b29b      	uxth	r3, r3
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80179ba:	7cbb      	ldrb	r3, [r7, #18]
 80179bc:	2b13      	cmp	r3, #19
 80179be:	f240 83a4 	bls.w	801810a <tcp_input+0x7be>
 80179c2:	7cbb      	ldrb	r3, [r7, #18]
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	891b      	ldrh	r3, [r3, #8]
 80179ca:	429a      	cmp	r2, r3
 80179cc:	f200 839d 	bhi.w	801810a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80179d0:	7cbb      	ldrb	r3, [r7, #18]
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	3b14      	subs	r3, #20
 80179d6:	b29a      	uxth	r2, r3
 80179d8:	4b81      	ldr	r3, [pc, #516]	; (8017be0 <tcp_input+0x294>)
 80179da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80179dc:	4b81      	ldr	r3, [pc, #516]	; (8017be4 <tcp_input+0x298>)
 80179de:	2200      	movs	r2, #0
 80179e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	895a      	ldrh	r2, [r3, #10]
 80179e6:	7cbb      	ldrb	r3, [r7, #18]
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d309      	bcc.n	8017a02 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80179ee:	4b7c      	ldr	r3, [pc, #496]	; (8017be0 <tcp_input+0x294>)
 80179f0:	881a      	ldrh	r2, [r3, #0]
 80179f2:	4b7d      	ldr	r3, [pc, #500]	; (8017be8 <tcp_input+0x29c>)
 80179f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80179f6:	7cbb      	ldrb	r3, [r7, #18]
 80179f8:	4619      	mov	r1, r3
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f7fc fb60 	bl	80140c0 <pbuf_remove_header>
 8017a00:	e04e      	b.n	8017aa0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d105      	bne.n	8017a16 <tcp_input+0xca>
 8017a0a:	4b70      	ldr	r3, [pc, #448]	; (8017bcc <tcp_input+0x280>)
 8017a0c:	22c2      	movs	r2, #194	; 0xc2
 8017a0e:	4977      	ldr	r1, [pc, #476]	; (8017bec <tcp_input+0x2a0>)
 8017a10:	4870      	ldr	r0, [pc, #448]	; (8017bd4 <tcp_input+0x288>)
 8017a12:	f009 fc0b 	bl	802122c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017a16:	2114      	movs	r1, #20
 8017a18:	6878      	ldr	r0, [r7, #4]
 8017a1a:	f7fc fb51 	bl	80140c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	895a      	ldrh	r2, [r3, #10]
 8017a22:	4b71      	ldr	r3, [pc, #452]	; (8017be8 <tcp_input+0x29c>)
 8017a24:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017a26:	4b6e      	ldr	r3, [pc, #440]	; (8017be0 <tcp_input+0x294>)
 8017a28:	881a      	ldrh	r2, [r3, #0]
 8017a2a:	4b6f      	ldr	r3, [pc, #444]	; (8017be8 <tcp_input+0x29c>)
 8017a2c:	881b      	ldrh	r3, [r3, #0]
 8017a2e:	1ad3      	subs	r3, r2, r3
 8017a30:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017a32:	4b6d      	ldr	r3, [pc, #436]	; (8017be8 <tcp_input+0x29c>)
 8017a34:	881b      	ldrh	r3, [r3, #0]
 8017a36:	4619      	mov	r1, r3
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7fc fb41 	bl	80140c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	895b      	ldrh	r3, [r3, #10]
 8017a44:	8a3a      	ldrh	r2, [r7, #16]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	f200 8361 	bhi.w	801810e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	4a64      	ldr	r2, [pc, #400]	; (8017be4 <tcp_input+0x298>)
 8017a54:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	8a3a      	ldrh	r2, [r7, #16]
 8017a5c:	4611      	mov	r1, r2
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7fc fb2e 	bl	80140c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	891a      	ldrh	r2, [r3, #8]
 8017a68:	8a3b      	ldrh	r3, [r7, #16]
 8017a6a:	1ad3      	subs	r3, r2, r3
 8017a6c:	b29a      	uxth	r2, r3
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	895b      	ldrh	r3, [r3, #10]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d005      	beq.n	8017a86 <tcp_input+0x13a>
 8017a7a:	4b54      	ldr	r3, [pc, #336]	; (8017bcc <tcp_input+0x280>)
 8017a7c:	22df      	movs	r2, #223	; 0xdf
 8017a7e:	495c      	ldr	r1, [pc, #368]	; (8017bf0 <tcp_input+0x2a4>)
 8017a80:	4854      	ldr	r0, [pc, #336]	; (8017bd4 <tcp_input+0x288>)
 8017a82:	f009 fbd3 	bl	802122c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	891a      	ldrh	r2, [r3, #8]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	891b      	ldrh	r3, [r3, #8]
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d005      	beq.n	8017aa0 <tcp_input+0x154>
 8017a94:	4b4d      	ldr	r3, [pc, #308]	; (8017bcc <tcp_input+0x280>)
 8017a96:	22e0      	movs	r2, #224	; 0xe0
 8017a98:	4956      	ldr	r1, [pc, #344]	; (8017bf4 <tcp_input+0x2a8>)
 8017a9a:	484e      	ldr	r0, [pc, #312]	; (8017bd4 <tcp_input+0x288>)
 8017a9c:	f009 fbc6 	bl	802122c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017aa0:	4b4d      	ldr	r3, [pc, #308]	; (8017bd8 <tcp_input+0x28c>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	881b      	ldrh	r3, [r3, #0]
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	4a4b      	ldr	r2, [pc, #300]	; (8017bd8 <tcp_input+0x28c>)
 8017aaa:	6814      	ldr	r4, [r2, #0]
 8017aac:	4618      	mov	r0, r3
 8017aae:	f7f8 fa13 	bl	800fed8 <lwip_htons>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017ab6:	4b48      	ldr	r3, [pc, #288]	; (8017bd8 <tcp_input+0x28c>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	885b      	ldrh	r3, [r3, #2]
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	4a46      	ldr	r2, [pc, #280]	; (8017bd8 <tcp_input+0x28c>)
 8017ac0:	6814      	ldr	r4, [r2, #0]
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f7f8 fa08 	bl	800fed8 <lwip_htons>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017acc:	4b42      	ldr	r3, [pc, #264]	; (8017bd8 <tcp_input+0x28c>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	4a41      	ldr	r2, [pc, #260]	; (8017bd8 <tcp_input+0x28c>)
 8017ad4:	6814      	ldr	r4, [r2, #0]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f8 fa13 	bl	800ff02 <lwip_htonl>
 8017adc:	4603      	mov	r3, r0
 8017ade:	6063      	str	r3, [r4, #4]
 8017ae0:	6863      	ldr	r3, [r4, #4]
 8017ae2:	4a45      	ldr	r2, [pc, #276]	; (8017bf8 <tcp_input+0x2ac>)
 8017ae4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017ae6:	4b3c      	ldr	r3, [pc, #240]	; (8017bd8 <tcp_input+0x28c>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	689b      	ldr	r3, [r3, #8]
 8017aec:	4a3a      	ldr	r2, [pc, #232]	; (8017bd8 <tcp_input+0x28c>)
 8017aee:	6814      	ldr	r4, [r2, #0]
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7f8 fa06 	bl	800ff02 <lwip_htonl>
 8017af6:	4603      	mov	r3, r0
 8017af8:	60a3      	str	r3, [r4, #8]
 8017afa:	68a3      	ldr	r3, [r4, #8]
 8017afc:	4a3f      	ldr	r2, [pc, #252]	; (8017bfc <tcp_input+0x2b0>)
 8017afe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017b00:	4b35      	ldr	r3, [pc, #212]	; (8017bd8 <tcp_input+0x28c>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	89db      	ldrh	r3, [r3, #14]
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	4a33      	ldr	r2, [pc, #204]	; (8017bd8 <tcp_input+0x28c>)
 8017b0a:	6814      	ldr	r4, [r2, #0]
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7f8 f9e3 	bl	800fed8 <lwip_htons>
 8017b12:	4603      	mov	r3, r0
 8017b14:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017b16:	4b30      	ldr	r3, [pc, #192]	; (8017bd8 <tcp_input+0x28c>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	899b      	ldrh	r3, [r3, #12]
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7f8 f9da 	bl	800fed8 <lwip_htons>
 8017b24:	4603      	mov	r3, r0
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b2c:	b2da      	uxtb	r2, r3
 8017b2e:	4b34      	ldr	r3, [pc, #208]	; (8017c00 <tcp_input+0x2b4>)
 8017b30:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	891a      	ldrh	r2, [r3, #8]
 8017b36:	4b33      	ldr	r3, [pc, #204]	; (8017c04 <tcp_input+0x2b8>)
 8017b38:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017b3a:	4b31      	ldr	r3, [pc, #196]	; (8017c00 <tcp_input+0x2b4>)
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	f003 0303 	and.w	r3, r3, #3
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d00c      	beq.n	8017b60 <tcp_input+0x214>
    tcplen++;
 8017b46:	4b2f      	ldr	r3, [pc, #188]	; (8017c04 <tcp_input+0x2b8>)
 8017b48:	881b      	ldrh	r3, [r3, #0]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	4b2d      	ldr	r3, [pc, #180]	; (8017c04 <tcp_input+0x2b8>)
 8017b50:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	891a      	ldrh	r2, [r3, #8]
 8017b56:	4b2b      	ldr	r3, [pc, #172]	; (8017c04 <tcp_input+0x2b8>)
 8017b58:	881b      	ldrh	r3, [r3, #0]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	f200 82d9 	bhi.w	8018112 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017b60:	2300      	movs	r3, #0
 8017b62:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b64:	4b28      	ldr	r3, [pc, #160]	; (8017c08 <tcp_input+0x2bc>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	61fb      	str	r3, [r7, #28]
 8017b6a:	e09d      	b.n	8017ca8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	7d1b      	ldrb	r3, [r3, #20]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d105      	bne.n	8017b80 <tcp_input+0x234>
 8017b74:	4b15      	ldr	r3, [pc, #84]	; (8017bcc <tcp_input+0x280>)
 8017b76:	22fb      	movs	r2, #251	; 0xfb
 8017b78:	4924      	ldr	r1, [pc, #144]	; (8017c0c <tcp_input+0x2c0>)
 8017b7a:	4816      	ldr	r0, [pc, #88]	; (8017bd4 <tcp_input+0x288>)
 8017b7c:	f009 fb56 	bl	802122c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	7d1b      	ldrb	r3, [r3, #20]
 8017b84:	2b0a      	cmp	r3, #10
 8017b86:	d105      	bne.n	8017b94 <tcp_input+0x248>
 8017b88:	4b10      	ldr	r3, [pc, #64]	; (8017bcc <tcp_input+0x280>)
 8017b8a:	22fc      	movs	r2, #252	; 0xfc
 8017b8c:	4920      	ldr	r1, [pc, #128]	; (8017c10 <tcp_input+0x2c4>)
 8017b8e:	4811      	ldr	r0, [pc, #68]	; (8017bd4 <tcp_input+0x288>)
 8017b90:	f009 fb4c 	bl	802122c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017b94:	69fb      	ldr	r3, [r7, #28]
 8017b96:	7d1b      	ldrb	r3, [r3, #20]
 8017b98:	2b01      	cmp	r3, #1
 8017b9a:	d105      	bne.n	8017ba8 <tcp_input+0x25c>
 8017b9c:	4b0b      	ldr	r3, [pc, #44]	; (8017bcc <tcp_input+0x280>)
 8017b9e:	22fd      	movs	r2, #253	; 0xfd
 8017ba0:	491c      	ldr	r1, [pc, #112]	; (8017c14 <tcp_input+0x2c8>)
 8017ba2:	480c      	ldr	r0, [pc, #48]	; (8017bd4 <tcp_input+0x288>)
 8017ba4:	f009 fb42 	bl	802122c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017ba8:	69fb      	ldr	r3, [r7, #28]
 8017baa:	7a1b      	ldrb	r3, [r3, #8]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d033      	beq.n	8017c18 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017bb0:	69fb      	ldr	r3, [r7, #28]
 8017bb2:	7a1a      	ldrb	r2, [r3, #8]
 8017bb4:	4b09      	ldr	r3, [pc, #36]	; (8017bdc <tcp_input+0x290>)
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017bbc:	3301      	adds	r3, #1
 8017bbe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	d029      	beq.n	8017c18 <tcp_input+0x2cc>
      prev = pcb;
 8017bc4:	69fb      	ldr	r3, [r7, #28]
 8017bc6:	61bb      	str	r3, [r7, #24]
      continue;
 8017bc8:	e06b      	b.n	8017ca2 <tcp_input+0x356>
 8017bca:	bf00      	nop
 8017bcc:	080260d0 	.word	0x080260d0
 8017bd0:	08026120 	.word	0x08026120
 8017bd4:	08026138 	.word	0x08026138
 8017bd8:	24040778 	.word	0x24040778
 8017bdc:	24045dc4 	.word	0x24045dc4
 8017be0:	2404077c 	.word	0x2404077c
 8017be4:	24040780 	.word	0x24040780
 8017be8:	2404077e 	.word	0x2404077e
 8017bec:	08026160 	.word	0x08026160
 8017bf0:	08026170 	.word	0x08026170
 8017bf4:	0802617c 	.word	0x0802617c
 8017bf8:	24040788 	.word	0x24040788
 8017bfc:	2404078c 	.word	0x2404078c
 8017c00:	24040794 	.word	0x24040794
 8017c04:	24040792 	.word	0x24040792
 8017c08:	24048e8c 	.word	0x24048e8c
 8017c0c:	0802619c 	.word	0x0802619c
 8017c10:	080261c4 	.word	0x080261c4
 8017c14:	080261f0 	.word	0x080261f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8017c18:	69fb      	ldr	r3, [r7, #28]
 8017c1a:	8b1a      	ldrh	r2, [r3, #24]
 8017c1c:	4b94      	ldr	r3, [pc, #592]	; (8017e70 <tcp_input+0x524>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	881b      	ldrh	r3, [r3, #0]
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d13a      	bne.n	8017c9e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017c28:	69fb      	ldr	r3, [r7, #28]
 8017c2a:	8ada      	ldrh	r2, [r3, #22]
 8017c2c:	4b90      	ldr	r3, [pc, #576]	; (8017e70 <tcp_input+0x524>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	885b      	ldrh	r3, [r3, #2]
 8017c32:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d132      	bne.n	8017c9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017c38:	69fb      	ldr	r3, [r7, #28]
 8017c3a:	685a      	ldr	r2, [r3, #4]
 8017c3c:	4b8d      	ldr	r3, [pc, #564]	; (8017e74 <tcp_input+0x528>)
 8017c3e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d12c      	bne.n	8017c9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017c44:	69fb      	ldr	r3, [r7, #28]
 8017c46:	681a      	ldr	r2, [r3, #0]
 8017c48:	4b8a      	ldr	r3, [pc, #552]	; (8017e74 <tcp_input+0x528>)
 8017c4a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d126      	bne.n	8017c9e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	68db      	ldr	r3, [r3, #12]
 8017c54:	69fa      	ldr	r2, [r7, #28]
 8017c56:	429a      	cmp	r2, r3
 8017c58:	d106      	bne.n	8017c68 <tcp_input+0x31c>
 8017c5a:	4b87      	ldr	r3, [pc, #540]	; (8017e78 <tcp_input+0x52c>)
 8017c5c:	f240 120d 	movw	r2, #269	; 0x10d
 8017c60:	4986      	ldr	r1, [pc, #536]	; (8017e7c <tcp_input+0x530>)
 8017c62:	4887      	ldr	r0, [pc, #540]	; (8017e80 <tcp_input+0x534>)
 8017c64:	f009 fae2 	bl	802122c <iprintf>
      if (prev != NULL) {
 8017c68:	69bb      	ldr	r3, [r7, #24]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d00a      	beq.n	8017c84 <tcp_input+0x338>
        prev->next = pcb->next;
 8017c6e:	69fb      	ldr	r3, [r7, #28]
 8017c70:	68da      	ldr	r2, [r3, #12]
 8017c72:	69bb      	ldr	r3, [r7, #24]
 8017c74:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017c76:	4b83      	ldr	r3, [pc, #524]	; (8017e84 <tcp_input+0x538>)
 8017c78:	681a      	ldr	r2, [r3, #0]
 8017c7a:	69fb      	ldr	r3, [r7, #28]
 8017c7c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017c7e:	4a81      	ldr	r2, [pc, #516]	; (8017e84 <tcp_input+0x538>)
 8017c80:	69fb      	ldr	r3, [r7, #28]
 8017c82:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017c84:	69fb      	ldr	r3, [r7, #28]
 8017c86:	68db      	ldr	r3, [r3, #12]
 8017c88:	69fa      	ldr	r2, [r7, #28]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d111      	bne.n	8017cb2 <tcp_input+0x366>
 8017c8e:	4b7a      	ldr	r3, [pc, #488]	; (8017e78 <tcp_input+0x52c>)
 8017c90:	f240 1215 	movw	r2, #277	; 0x115
 8017c94:	497c      	ldr	r1, [pc, #496]	; (8017e88 <tcp_input+0x53c>)
 8017c96:	487a      	ldr	r0, [pc, #488]	; (8017e80 <tcp_input+0x534>)
 8017c98:	f009 fac8 	bl	802122c <iprintf>
      break;
 8017c9c:	e009      	b.n	8017cb2 <tcp_input+0x366>
    }
    prev = pcb;
 8017c9e:	69fb      	ldr	r3, [r7, #28]
 8017ca0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ca2:	69fb      	ldr	r3, [r7, #28]
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	61fb      	str	r3, [r7, #28]
 8017ca8:	69fb      	ldr	r3, [r7, #28]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	f47f af5e 	bne.w	8017b6c <tcp_input+0x220>
 8017cb0:	e000      	b.n	8017cb4 <tcp_input+0x368>
      break;
 8017cb2:	bf00      	nop
  }

  if (pcb == NULL) {
 8017cb4:	69fb      	ldr	r3, [r7, #28]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	f040 8095 	bne.w	8017de6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017cbc:	4b73      	ldr	r3, [pc, #460]	; (8017e8c <tcp_input+0x540>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	61fb      	str	r3, [r7, #28]
 8017cc2:	e03f      	b.n	8017d44 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017cc4:	69fb      	ldr	r3, [r7, #28]
 8017cc6:	7d1b      	ldrb	r3, [r3, #20]
 8017cc8:	2b0a      	cmp	r3, #10
 8017cca:	d006      	beq.n	8017cda <tcp_input+0x38e>
 8017ccc:	4b6a      	ldr	r3, [pc, #424]	; (8017e78 <tcp_input+0x52c>)
 8017cce:	f240 121f 	movw	r2, #287	; 0x11f
 8017cd2:	496f      	ldr	r1, [pc, #444]	; (8017e90 <tcp_input+0x544>)
 8017cd4:	486a      	ldr	r0, [pc, #424]	; (8017e80 <tcp_input+0x534>)
 8017cd6:	f009 faa9 	bl	802122c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	7a1b      	ldrb	r3, [r3, #8]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d009      	beq.n	8017cf6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	7a1a      	ldrb	r2, [r3, #8]
 8017ce6:	4b63      	ldr	r3, [pc, #396]	; (8017e74 <tcp_input+0x528>)
 8017ce8:	685b      	ldr	r3, [r3, #4]
 8017cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017cee:	3301      	adds	r3, #1
 8017cf0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d122      	bne.n	8017d3c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017cf6:	69fb      	ldr	r3, [r7, #28]
 8017cf8:	8b1a      	ldrh	r2, [r3, #24]
 8017cfa:	4b5d      	ldr	r3, [pc, #372]	; (8017e70 <tcp_input+0x524>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	881b      	ldrh	r3, [r3, #0]
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d11b      	bne.n	8017d3e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017d06:	69fb      	ldr	r3, [r7, #28]
 8017d08:	8ada      	ldrh	r2, [r3, #22]
 8017d0a:	4b59      	ldr	r3, [pc, #356]	; (8017e70 <tcp_input+0x524>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	885b      	ldrh	r3, [r3, #2]
 8017d10:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d113      	bne.n	8017d3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017d16:	69fb      	ldr	r3, [r7, #28]
 8017d18:	685a      	ldr	r2, [r3, #4]
 8017d1a:	4b56      	ldr	r3, [pc, #344]	; (8017e74 <tcp_input+0x528>)
 8017d1c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d10d      	bne.n	8017d3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017d22:	69fb      	ldr	r3, [r7, #28]
 8017d24:	681a      	ldr	r2, [r3, #0]
 8017d26:	4b53      	ldr	r3, [pc, #332]	; (8017e74 <tcp_input+0x528>)
 8017d28:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d107      	bne.n	8017d3e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017d2e:	69f8      	ldr	r0, [r7, #28]
 8017d30:	f000 fb54 	bl	80183dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f7fc fa7b 	bl	8014230 <pbuf_free>
        return;
 8017d3a:	e1f0      	b.n	801811e <tcp_input+0x7d2>
        continue;
 8017d3c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d3e:	69fb      	ldr	r3, [r7, #28]
 8017d40:	68db      	ldr	r3, [r3, #12]
 8017d42:	61fb      	str	r3, [r7, #28]
 8017d44:	69fb      	ldr	r3, [r7, #28]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d1bc      	bne.n	8017cc4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017d4e:	4b51      	ldr	r3, [pc, #324]	; (8017e94 <tcp_input+0x548>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	617b      	str	r3, [r7, #20]
 8017d54:	e02a      	b.n	8017dac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	7a1b      	ldrb	r3, [r3, #8]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d00c      	beq.n	8017d78 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	7a1a      	ldrb	r2, [r3, #8]
 8017d62:	4b44      	ldr	r3, [pc, #272]	; (8017e74 <tcp_input+0x528>)
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d6a:	3301      	adds	r3, #1
 8017d6c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d002      	beq.n	8017d78 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	61bb      	str	r3, [r7, #24]
        continue;
 8017d76:	e016      	b.n	8017da6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	8ada      	ldrh	r2, [r3, #22]
 8017d7c:	4b3c      	ldr	r3, [pc, #240]	; (8017e70 <tcp_input+0x524>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	885b      	ldrh	r3, [r3, #2]
 8017d82:	b29b      	uxth	r3, r3
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d10c      	bne.n	8017da2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	4b39      	ldr	r3, [pc, #228]	; (8017e74 <tcp_input+0x528>)
 8017d8e:	695b      	ldr	r3, [r3, #20]
 8017d90:	429a      	cmp	r2, r3
 8017d92:	d00f      	beq.n	8017db4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d00d      	beq.n	8017db6 <tcp_input+0x46a>
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d009      	beq.n	8017db6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017da2:	697b      	ldr	r3, [r7, #20]
 8017da4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017da6:	697b      	ldr	r3, [r7, #20]
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	617b      	str	r3, [r7, #20]
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d1d1      	bne.n	8017d56 <tcp_input+0x40a>
 8017db2:	e000      	b.n	8017db6 <tcp_input+0x46a>
            break;
 8017db4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d014      	beq.n	8017de6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017dbc:	69bb      	ldr	r3, [r7, #24]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d00a      	beq.n	8017dd8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017dc2:	697b      	ldr	r3, [r7, #20]
 8017dc4:	68da      	ldr	r2, [r3, #12]
 8017dc6:	69bb      	ldr	r3, [r7, #24]
 8017dc8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017dca:	4b32      	ldr	r3, [pc, #200]	; (8017e94 <tcp_input+0x548>)
 8017dcc:	681a      	ldr	r2, [r3, #0]
 8017dce:	697b      	ldr	r3, [r7, #20]
 8017dd0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017dd2:	4a30      	ldr	r2, [pc, #192]	; (8017e94 <tcp_input+0x548>)
 8017dd4:	697b      	ldr	r3, [r7, #20]
 8017dd6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017dd8:	6978      	ldr	r0, [r7, #20]
 8017dda:	f000 fa01 	bl	80181e0 <tcp_listen_input>
      }
      pbuf_free(p);
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f7fc fa26 	bl	8014230 <pbuf_free>
      return;
 8017de4:	e19b      	b.n	801811e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017de6:	69fb      	ldr	r3, [r7, #28]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f000 8160 	beq.w	80180ae <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017dee:	4b2a      	ldr	r3, [pc, #168]	; (8017e98 <tcp_input+0x54c>)
 8017df0:	2200      	movs	r2, #0
 8017df2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	891a      	ldrh	r2, [r3, #8]
 8017df8:	4b27      	ldr	r3, [pc, #156]	; (8017e98 <tcp_input+0x54c>)
 8017dfa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017dfc:	4a26      	ldr	r2, [pc, #152]	; (8017e98 <tcp_input+0x54c>)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017e02:	4b1b      	ldr	r3, [pc, #108]	; (8017e70 <tcp_input+0x524>)
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	4a24      	ldr	r2, [pc, #144]	; (8017e98 <tcp_input+0x54c>)
 8017e08:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8017e0a:	4b24      	ldr	r3, [pc, #144]	; (8017e9c <tcp_input+0x550>)
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017e10:	4b23      	ldr	r3, [pc, #140]	; (8017ea0 <tcp_input+0x554>)
 8017e12:	2200      	movs	r2, #0
 8017e14:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017e16:	4b23      	ldr	r3, [pc, #140]	; (8017ea4 <tcp_input+0x558>)
 8017e18:	2200      	movs	r2, #0
 8017e1a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017e1c:	4b22      	ldr	r3, [pc, #136]	; (8017ea8 <tcp_input+0x55c>)
 8017e1e:	781b      	ldrb	r3, [r3, #0]
 8017e20:	f003 0308 	and.w	r3, r3, #8
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d006      	beq.n	8017e36 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	7b5b      	ldrb	r3, [r3, #13]
 8017e2c:	f043 0301 	orr.w	r3, r3, #1
 8017e30:	b2da      	uxtb	r2, r3
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017e36:	69fb      	ldr	r3, [r7, #28]
 8017e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d038      	beq.n	8017eb0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017e3e:	69f8      	ldr	r0, [r7, #28]
 8017e40:	f7ff f870 	bl	8016f24 <tcp_process_refused_data>
 8017e44:	4603      	mov	r3, r0
 8017e46:	f113 0f0d 	cmn.w	r3, #13
 8017e4a:	d007      	beq.n	8017e5c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017e4c:	69fb      	ldr	r3, [r7, #28]
 8017e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d02d      	beq.n	8017eb0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017e54:	4b15      	ldr	r3, [pc, #84]	; (8017eac <tcp_input+0x560>)
 8017e56:	881b      	ldrh	r3, [r3, #0]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d029      	beq.n	8017eb0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017e5c:	69fb      	ldr	r3, [r7, #28]
 8017e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f040 8104 	bne.w	801806e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017e66:	69f8      	ldr	r0, [r7, #28]
 8017e68:	f003 fe16 	bl	801ba98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017e6c:	e0ff      	b.n	801806e <tcp_input+0x722>
 8017e6e:	bf00      	nop
 8017e70:	24040778 	.word	0x24040778
 8017e74:	24045dc4 	.word	0x24045dc4
 8017e78:	080260d0 	.word	0x080260d0
 8017e7c:	08026218 	.word	0x08026218
 8017e80:	08026138 	.word	0x08026138
 8017e84:	24048e8c 	.word	0x24048e8c
 8017e88:	08026244 	.word	0x08026244
 8017e8c:	24048e9c 	.word	0x24048e9c
 8017e90:	08026270 	.word	0x08026270
 8017e94:	24048e94 	.word	0x24048e94
 8017e98:	24040768 	.word	0x24040768
 8017e9c:	24040798 	.word	0x24040798
 8017ea0:	24040795 	.word	0x24040795
 8017ea4:	24040790 	.word	0x24040790
 8017ea8:	24040794 	.word	0x24040794
 8017eac:	24040792 	.word	0x24040792
      }
    }
    tcp_input_pcb = pcb;
 8017eb0:	4a9c      	ldr	r2, [pc, #624]	; (8018124 <tcp_input+0x7d8>)
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017eb6:	69f8      	ldr	r0, [r7, #28]
 8017eb8:	f000 fb0a 	bl	80184d0 <tcp_process>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017ec0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017ec4:	f113 0f0d 	cmn.w	r3, #13
 8017ec8:	f000 80d3 	beq.w	8018072 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017ecc:	4b96      	ldr	r3, [pc, #600]	; (8018128 <tcp_input+0x7dc>)
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	f003 0308 	and.w	r3, r3, #8
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d015      	beq.n	8017f04 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d008      	beq.n	8017ef4 <tcp_input+0x5a8>
 8017ee2:	69fb      	ldr	r3, [r7, #28]
 8017ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ee8:	69fa      	ldr	r2, [r7, #28]
 8017eea:	6912      	ldr	r2, [r2, #16]
 8017eec:	f06f 010d 	mvn.w	r1, #13
 8017ef0:	4610      	mov	r0, r2
 8017ef2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017ef4:	69f9      	ldr	r1, [r7, #28]
 8017ef6:	488d      	ldr	r0, [pc, #564]	; (801812c <tcp_input+0x7e0>)
 8017ef8:	f7ff fbb0 	bl	801765c <tcp_pcb_remove>
        tcp_free(pcb);
 8017efc:	69f8      	ldr	r0, [r7, #28]
 8017efe:	f7fd ff15 	bl	8015d2c <tcp_free>
 8017f02:	e0c1      	b.n	8018088 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8017f04:	2300      	movs	r3, #0
 8017f06:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017f08:	4b89      	ldr	r3, [pc, #548]	; (8018130 <tcp_input+0x7e4>)
 8017f0a:	881b      	ldrh	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d01d      	beq.n	8017f4c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017f10:	4b87      	ldr	r3, [pc, #540]	; (8018130 <tcp_input+0x7e4>)
 8017f12:	881b      	ldrh	r3, [r3, #0]
 8017f14:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017f16:	69fb      	ldr	r3, [r7, #28]
 8017f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d00a      	beq.n	8017f36 <tcp_input+0x5ea>
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f26:	69fa      	ldr	r2, [r7, #28]
 8017f28:	6910      	ldr	r0, [r2, #16]
 8017f2a:	89fa      	ldrh	r2, [r7, #14]
 8017f2c:	69f9      	ldr	r1, [r7, #28]
 8017f2e:	4798      	blx	r3
 8017f30:	4603      	mov	r3, r0
 8017f32:	74fb      	strb	r3, [r7, #19]
 8017f34:	e001      	b.n	8017f3a <tcp_input+0x5ee>
 8017f36:	2300      	movs	r3, #0
 8017f38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017f3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017f3e:	f113 0f0d 	cmn.w	r3, #13
 8017f42:	f000 8098 	beq.w	8018076 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017f46:	4b7a      	ldr	r3, [pc, #488]	; (8018130 <tcp_input+0x7e4>)
 8017f48:	2200      	movs	r2, #0
 8017f4a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017f4c:	69f8      	ldr	r0, [r7, #28]
 8017f4e:	f000 f907 	bl	8018160 <tcp_input_delayed_close>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f040 8090 	bne.w	801807a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017f5a:	4b76      	ldr	r3, [pc, #472]	; (8018134 <tcp_input+0x7e8>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d041      	beq.n	8017fe6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d006      	beq.n	8017f78 <tcp_input+0x62c>
 8017f6a:	4b73      	ldr	r3, [pc, #460]	; (8018138 <tcp_input+0x7ec>)
 8017f6c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017f70:	4972      	ldr	r1, [pc, #456]	; (801813c <tcp_input+0x7f0>)
 8017f72:	4873      	ldr	r0, [pc, #460]	; (8018140 <tcp_input+0x7f4>)
 8017f74:	f009 f95a 	bl	802122c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	8b5b      	ldrh	r3, [r3, #26]
 8017f7c:	f003 0310 	and.w	r3, r3, #16
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d008      	beq.n	8017f96 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017f84:	4b6b      	ldr	r3, [pc, #428]	; (8018134 <tcp_input+0x7e8>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7fc f951 	bl	8014230 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017f8e:	69f8      	ldr	r0, [r7, #28]
 8017f90:	f7fe fa10 	bl	80163b4 <tcp_abort>
            goto aborted;
 8017f94:	e078      	b.n	8018088 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017f96:	69fb      	ldr	r3, [r7, #28]
 8017f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d00c      	beq.n	8017fba <tcp_input+0x66e>
 8017fa0:	69fb      	ldr	r3, [r7, #28]
 8017fa2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017fa6:	69fb      	ldr	r3, [r7, #28]
 8017fa8:	6918      	ldr	r0, [r3, #16]
 8017faa:	4b62      	ldr	r3, [pc, #392]	; (8018134 <tcp_input+0x7e8>)
 8017fac:	681a      	ldr	r2, [r3, #0]
 8017fae:	2300      	movs	r3, #0
 8017fb0:	69f9      	ldr	r1, [r7, #28]
 8017fb2:	47a0      	blx	r4
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	74fb      	strb	r3, [r7, #19]
 8017fb8:	e008      	b.n	8017fcc <tcp_input+0x680>
 8017fba:	4b5e      	ldr	r3, [pc, #376]	; (8018134 <tcp_input+0x7e8>)
 8017fbc:	681a      	ldr	r2, [r3, #0]
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	69f9      	ldr	r1, [r7, #28]
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	f7ff f884 	bl	80170d0 <tcp_recv_null>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017fd0:	f113 0f0d 	cmn.w	r3, #13
 8017fd4:	d053      	beq.n	801807e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d003      	beq.n	8017fe6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017fde:	4b55      	ldr	r3, [pc, #340]	; (8018134 <tcp_input+0x7e8>)
 8017fe0:	681a      	ldr	r2, [r3, #0]
 8017fe2:	69fb      	ldr	r3, [r7, #28]
 8017fe4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017fe6:	4b50      	ldr	r3, [pc, #320]	; (8018128 <tcp_input+0x7dc>)
 8017fe8:	781b      	ldrb	r3, [r3, #0]
 8017fea:	f003 0320 	and.w	r3, r3, #32
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d030      	beq.n	8018054 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d009      	beq.n	801800e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ffe:	7b5a      	ldrb	r2, [r3, #13]
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018004:	f042 0220 	orr.w	r2, r2, #32
 8018008:	b2d2      	uxtb	r2, r2
 801800a:	735a      	strb	r2, [r3, #13]
 801800c:	e022      	b.n	8018054 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801800e:	69fb      	ldr	r3, [r7, #28]
 8018010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018012:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018016:	d005      	beq.n	8018024 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018018:	69fb      	ldr	r3, [r7, #28]
 801801a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801801c:	3301      	adds	r3, #1
 801801e:	b29a      	uxth	r2, r3
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018024:	69fb      	ldr	r3, [r7, #28]
 8018026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801802a:	2b00      	cmp	r3, #0
 801802c:	d00b      	beq.n	8018046 <tcp_input+0x6fa>
 801802e:	69fb      	ldr	r3, [r7, #28]
 8018030:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	6918      	ldr	r0, [r3, #16]
 8018038:	2300      	movs	r3, #0
 801803a:	2200      	movs	r2, #0
 801803c:	69f9      	ldr	r1, [r7, #28]
 801803e:	47a0      	blx	r4
 8018040:	4603      	mov	r3, r0
 8018042:	74fb      	strb	r3, [r7, #19]
 8018044:	e001      	b.n	801804a <tcp_input+0x6fe>
 8018046:	2300      	movs	r3, #0
 8018048:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801804a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801804e:	f113 0f0d 	cmn.w	r3, #13
 8018052:	d016      	beq.n	8018082 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018054:	4b33      	ldr	r3, [pc, #204]	; (8018124 <tcp_input+0x7d8>)
 8018056:	2200      	movs	r2, #0
 8018058:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801805a:	69f8      	ldr	r0, [r7, #28]
 801805c:	f000 f880 	bl	8018160 <tcp_input_delayed_close>
 8018060:	4603      	mov	r3, r0
 8018062:	2b00      	cmp	r3, #0
 8018064:	d10f      	bne.n	8018086 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018066:	69f8      	ldr	r0, [r7, #28]
 8018068:	f002 ff10 	bl	801ae8c <tcp_output>
 801806c:	e00c      	b.n	8018088 <tcp_input+0x73c>
        goto aborted;
 801806e:	bf00      	nop
 8018070:	e00a      	b.n	8018088 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018072:	bf00      	nop
 8018074:	e008      	b.n	8018088 <tcp_input+0x73c>
              goto aborted;
 8018076:	bf00      	nop
 8018078:	e006      	b.n	8018088 <tcp_input+0x73c>
          goto aborted;
 801807a:	bf00      	nop
 801807c:	e004      	b.n	8018088 <tcp_input+0x73c>
            goto aborted;
 801807e:	bf00      	nop
 8018080:	e002      	b.n	8018088 <tcp_input+0x73c>
              goto aborted;
 8018082:	bf00      	nop
 8018084:	e000      	b.n	8018088 <tcp_input+0x73c>
          goto aborted;
 8018086:	bf00      	nop
    tcp_input_pcb = NULL;
 8018088:	4b26      	ldr	r3, [pc, #152]	; (8018124 <tcp_input+0x7d8>)
 801808a:	2200      	movs	r2, #0
 801808c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801808e:	4b29      	ldr	r3, [pc, #164]	; (8018134 <tcp_input+0x7e8>)
 8018090:	2200      	movs	r2, #0
 8018092:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018094:	4b2b      	ldr	r3, [pc, #172]	; (8018144 <tcp_input+0x7f8>)
 8018096:	685b      	ldr	r3, [r3, #4]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d03f      	beq.n	801811c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801809c:	4b29      	ldr	r3, [pc, #164]	; (8018144 <tcp_input+0x7f8>)
 801809e:	685b      	ldr	r3, [r3, #4]
 80180a0:	4618      	mov	r0, r3
 80180a2:	f7fc f8c5 	bl	8014230 <pbuf_free>
      inseg.p = NULL;
 80180a6:	4b27      	ldr	r3, [pc, #156]	; (8018144 <tcp_input+0x7f8>)
 80180a8:	2200      	movs	r2, #0
 80180aa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80180ac:	e036      	b.n	801811c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80180ae:	4b26      	ldr	r3, [pc, #152]	; (8018148 <tcp_input+0x7fc>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	899b      	ldrh	r3, [r3, #12]
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7f7 ff0e 	bl	800fed8 <lwip_htons>
 80180bc:	4603      	mov	r3, r0
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	f003 0304 	and.w	r3, r3, #4
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d118      	bne.n	80180fa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180c8:	4b20      	ldr	r3, [pc, #128]	; (801814c <tcp_input+0x800>)
 80180ca:	6819      	ldr	r1, [r3, #0]
 80180cc:	4b20      	ldr	r3, [pc, #128]	; (8018150 <tcp_input+0x804>)
 80180ce:	881b      	ldrh	r3, [r3, #0]
 80180d0:	461a      	mov	r2, r3
 80180d2:	4b20      	ldr	r3, [pc, #128]	; (8018154 <tcp_input+0x808>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80180d8:	4b1b      	ldr	r3, [pc, #108]	; (8018148 <tcp_input+0x7fc>)
 80180da:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180dc:	885b      	ldrh	r3, [r3, #2]
 80180de:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80180e0:	4a19      	ldr	r2, [pc, #100]	; (8018148 <tcp_input+0x7fc>)
 80180e2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180e4:	8812      	ldrh	r2, [r2, #0]
 80180e6:	b292      	uxth	r2, r2
 80180e8:	9202      	str	r2, [sp, #8]
 80180ea:	9301      	str	r3, [sp, #4]
 80180ec:	4b1a      	ldr	r3, [pc, #104]	; (8018158 <tcp_input+0x80c>)
 80180ee:	9300      	str	r3, [sp, #0]
 80180f0:	4b1a      	ldr	r3, [pc, #104]	; (801815c <tcp_input+0x810>)
 80180f2:	4602      	mov	r2, r0
 80180f4:	2000      	movs	r0, #0
 80180f6:	f003 fc7d 	bl	801b9f4 <tcp_rst>
    pbuf_free(p);
 80180fa:	6878      	ldr	r0, [r7, #4]
 80180fc:	f7fc f898 	bl	8014230 <pbuf_free>
  return;
 8018100:	e00c      	b.n	801811c <tcp_input+0x7d0>
    goto dropped;
 8018102:	bf00      	nop
 8018104:	e006      	b.n	8018114 <tcp_input+0x7c8>
    goto dropped;
 8018106:	bf00      	nop
 8018108:	e004      	b.n	8018114 <tcp_input+0x7c8>
    goto dropped;
 801810a:	bf00      	nop
 801810c:	e002      	b.n	8018114 <tcp_input+0x7c8>
      goto dropped;
 801810e:	bf00      	nop
 8018110:	e000      	b.n	8018114 <tcp_input+0x7c8>
      goto dropped;
 8018112:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f7fc f88b 	bl	8014230 <pbuf_free>
 801811a:	e000      	b.n	801811e <tcp_input+0x7d2>
  return;
 801811c:	bf00      	nop
}
 801811e:	3724      	adds	r7, #36	; 0x24
 8018120:	46bd      	mov	sp, r7
 8018122:	bd90      	pop	{r4, r7, pc}
 8018124:	24048ea0 	.word	0x24048ea0
 8018128:	24040795 	.word	0x24040795
 801812c:	24048e8c 	.word	0x24048e8c
 8018130:	24040790 	.word	0x24040790
 8018134:	24040798 	.word	0x24040798
 8018138:	080260d0 	.word	0x080260d0
 801813c:	080262a0 	.word	0x080262a0
 8018140:	08026138 	.word	0x08026138
 8018144:	24040768 	.word	0x24040768
 8018148:	24040778 	.word	0x24040778
 801814c:	2404078c 	.word	0x2404078c
 8018150:	24040792 	.word	0x24040792
 8018154:	24040788 	.word	0x24040788
 8018158:	24045dd4 	.word	0x24045dd4
 801815c:	24045dd8 	.word	0x24045dd8

08018160 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d106      	bne.n	801817c <tcp_input_delayed_close+0x1c>
 801816e:	4b17      	ldr	r3, [pc, #92]	; (80181cc <tcp_input_delayed_close+0x6c>)
 8018170:	f240 225a 	movw	r2, #602	; 0x25a
 8018174:	4916      	ldr	r1, [pc, #88]	; (80181d0 <tcp_input_delayed_close+0x70>)
 8018176:	4817      	ldr	r0, [pc, #92]	; (80181d4 <tcp_input_delayed_close+0x74>)
 8018178:	f009 f858 	bl	802122c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801817c:	4b16      	ldr	r3, [pc, #88]	; (80181d8 <tcp_input_delayed_close+0x78>)
 801817e:	781b      	ldrb	r3, [r3, #0]
 8018180:	f003 0310 	and.w	r3, r3, #16
 8018184:	2b00      	cmp	r3, #0
 8018186:	d01c      	beq.n	80181c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	8b5b      	ldrh	r3, [r3, #26]
 801818c:	f003 0310 	and.w	r3, r3, #16
 8018190:	2b00      	cmp	r3, #0
 8018192:	d10d      	bne.n	80181b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801819a:	2b00      	cmp	r3, #0
 801819c:	d008      	beq.n	80181b0 <tcp_input_delayed_close+0x50>
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181a4:	687a      	ldr	r2, [r7, #4]
 80181a6:	6912      	ldr	r2, [r2, #16]
 80181a8:	f06f 010e 	mvn.w	r1, #14
 80181ac:	4610      	mov	r0, r2
 80181ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80181b0:	6879      	ldr	r1, [r7, #4]
 80181b2:	480a      	ldr	r0, [pc, #40]	; (80181dc <tcp_input_delayed_close+0x7c>)
 80181b4:	f7ff fa52 	bl	801765c <tcp_pcb_remove>
    tcp_free(pcb);
 80181b8:	6878      	ldr	r0, [r7, #4]
 80181ba:	f7fd fdb7 	bl	8015d2c <tcp_free>
    return 1;
 80181be:	2301      	movs	r3, #1
 80181c0:	e000      	b.n	80181c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80181c2:	2300      	movs	r3, #0
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	3708      	adds	r7, #8
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}
 80181cc:	080260d0 	.word	0x080260d0
 80181d0:	080262bc 	.word	0x080262bc
 80181d4:	08026138 	.word	0x08026138
 80181d8:	24040795 	.word	0x24040795
 80181dc:	24048e8c 	.word	0x24048e8c

080181e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80181e0:	b590      	push	{r4, r7, lr}
 80181e2:	b08b      	sub	sp, #44	; 0x2c
 80181e4:	af04      	add	r7, sp, #16
 80181e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80181e8:	4b6f      	ldr	r3, [pc, #444]	; (80183a8 <tcp_listen_input+0x1c8>)
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	f003 0304 	and.w	r3, r3, #4
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	f040 80d2 	bne.w	801839a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d106      	bne.n	801820a <tcp_listen_input+0x2a>
 80181fc:	4b6b      	ldr	r3, [pc, #428]	; (80183ac <tcp_listen_input+0x1cc>)
 80181fe:	f240 2281 	movw	r2, #641	; 0x281
 8018202:	496b      	ldr	r1, [pc, #428]	; (80183b0 <tcp_listen_input+0x1d0>)
 8018204:	486b      	ldr	r0, [pc, #428]	; (80183b4 <tcp_listen_input+0x1d4>)
 8018206:	f009 f811 	bl	802122c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801820a:	4b67      	ldr	r3, [pc, #412]	; (80183a8 <tcp_listen_input+0x1c8>)
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	f003 0310 	and.w	r3, r3, #16
 8018212:	2b00      	cmp	r3, #0
 8018214:	d019      	beq.n	801824a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018216:	4b68      	ldr	r3, [pc, #416]	; (80183b8 <tcp_listen_input+0x1d8>)
 8018218:	6819      	ldr	r1, [r3, #0]
 801821a:	4b68      	ldr	r3, [pc, #416]	; (80183bc <tcp_listen_input+0x1dc>)
 801821c:	881b      	ldrh	r3, [r3, #0]
 801821e:	461a      	mov	r2, r3
 8018220:	4b67      	ldr	r3, [pc, #412]	; (80183c0 <tcp_listen_input+0x1e0>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018226:	4b67      	ldr	r3, [pc, #412]	; (80183c4 <tcp_listen_input+0x1e4>)
 8018228:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801822a:	885b      	ldrh	r3, [r3, #2]
 801822c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801822e:	4a65      	ldr	r2, [pc, #404]	; (80183c4 <tcp_listen_input+0x1e4>)
 8018230:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018232:	8812      	ldrh	r2, [r2, #0]
 8018234:	b292      	uxth	r2, r2
 8018236:	9202      	str	r2, [sp, #8]
 8018238:	9301      	str	r3, [sp, #4]
 801823a:	4b63      	ldr	r3, [pc, #396]	; (80183c8 <tcp_listen_input+0x1e8>)
 801823c:	9300      	str	r3, [sp, #0]
 801823e:	4b63      	ldr	r3, [pc, #396]	; (80183cc <tcp_listen_input+0x1ec>)
 8018240:	4602      	mov	r2, r0
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f003 fbd6 	bl	801b9f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018248:	e0a9      	b.n	801839e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801824a:	4b57      	ldr	r3, [pc, #348]	; (80183a8 <tcp_listen_input+0x1c8>)
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	f003 0302 	and.w	r3, r3, #2
 8018252:	2b00      	cmp	r3, #0
 8018254:	f000 80a3 	beq.w	801839e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	7d5b      	ldrb	r3, [r3, #21]
 801825c:	4618      	mov	r0, r3
 801825e:	f7ff f85b 	bl	8017318 <tcp_alloc>
 8018262:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d111      	bne.n	801828e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	699b      	ldr	r3, [r3, #24]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d00a      	beq.n	8018288 <tcp_listen_input+0xa8>
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	699b      	ldr	r3, [r3, #24]
 8018276:	687a      	ldr	r2, [r7, #4]
 8018278:	6910      	ldr	r0, [r2, #16]
 801827a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801827e:	2100      	movs	r1, #0
 8018280:	4798      	blx	r3
 8018282:	4603      	mov	r3, r0
 8018284:	73bb      	strb	r3, [r7, #14]
      return;
 8018286:	e08b      	b.n	80183a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018288:	23f0      	movs	r3, #240	; 0xf0
 801828a:	73bb      	strb	r3, [r7, #14]
      return;
 801828c:	e088      	b.n	80183a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801828e:	4b50      	ldr	r3, [pc, #320]	; (80183d0 <tcp_listen_input+0x1f0>)
 8018290:	695a      	ldr	r2, [r3, #20]
 8018292:	697b      	ldr	r3, [r7, #20]
 8018294:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018296:	4b4e      	ldr	r3, [pc, #312]	; (80183d0 <tcp_listen_input+0x1f0>)
 8018298:	691a      	ldr	r2, [r3, #16]
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	8ada      	ldrh	r2, [r3, #22]
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80182a6:	4b47      	ldr	r3, [pc, #284]	; (80183c4 <tcp_listen_input+0x1e4>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	881b      	ldrh	r3, [r3, #0]
 80182ac:	b29a      	uxth	r2, r3
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80182b2:	697b      	ldr	r3, [r7, #20]
 80182b4:	2203      	movs	r2, #3
 80182b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80182b8:	4b41      	ldr	r3, [pc, #260]	; (80183c0 <tcp_listen_input+0x1e0>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	1c5a      	adds	r2, r3, #1
 80182be:	697b      	ldr	r3, [r7, #20]
 80182c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80182ca:	6978      	ldr	r0, [r7, #20]
 80182cc:	f7ff fa5a 	bl	8017784 <tcp_next_iss>
 80182d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	693a      	ldr	r2, [r7, #16]
 80182d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	693a      	ldr	r2, [r7, #16]
 80182dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	693a      	ldr	r2, [r7, #16]
 80182e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80182e4:	697b      	ldr	r3, [r7, #20]
 80182e6:	693a      	ldr	r2, [r7, #16]
 80182e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80182ea:	4b35      	ldr	r3, [pc, #212]	; (80183c0 <tcp_listen_input+0x1e0>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	1e5a      	subs	r2, r3, #1
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	691a      	ldr	r2, [r3, #16]
 80182f8:	697b      	ldr	r3, [r7, #20]
 80182fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80182fc:	697b      	ldr	r3, [r7, #20]
 80182fe:	687a      	ldr	r2, [r7, #4]
 8018300:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	7a5b      	ldrb	r3, [r3, #9]
 8018306:	f003 030c 	and.w	r3, r3, #12
 801830a:	b2da      	uxtb	r2, r3
 801830c:	697b      	ldr	r3, [r7, #20]
 801830e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	7a1a      	ldrb	r2, [r3, #8]
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018318:	4b2e      	ldr	r3, [pc, #184]	; (80183d4 <tcp_listen_input+0x1f4>)
 801831a:	681a      	ldr	r2, [r3, #0]
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	60da      	str	r2, [r3, #12]
 8018320:	4a2c      	ldr	r2, [pc, #176]	; (80183d4 <tcp_listen_input+0x1f4>)
 8018322:	697b      	ldr	r3, [r7, #20]
 8018324:	6013      	str	r3, [r2, #0]
 8018326:	f003 fedf 	bl	801c0e8 <tcp_timer_needed>
 801832a:	4b2b      	ldr	r3, [pc, #172]	; (80183d8 <tcp_listen_input+0x1f8>)
 801832c:	2201      	movs	r2, #1
 801832e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018330:	6978      	ldr	r0, [r7, #20]
 8018332:	f001 fd8d 	bl	8019e50 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018336:	4b23      	ldr	r3, [pc, #140]	; (80183c4 <tcp_listen_input+0x1e4>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	89db      	ldrh	r3, [r3, #14]
 801833c:	b29a      	uxth	r2, r3
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801834a:	697b      	ldr	r3, [r7, #20]
 801834c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018350:	697b      	ldr	r3, [r7, #20]
 8018352:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018354:	697b      	ldr	r3, [r7, #20]
 8018356:	3304      	adds	r3, #4
 8018358:	4618      	mov	r0, r3
 801835a:	f7f9 f8b3 	bl	80114c4 <ip4_route>
 801835e:	4601      	mov	r1, r0
 8018360:	697b      	ldr	r3, [r7, #20]
 8018362:	3304      	adds	r3, #4
 8018364:	461a      	mov	r2, r3
 8018366:	4620      	mov	r0, r4
 8018368:	f7ff fa32 	bl	80177d0 <tcp_eff_send_mss_netif>
 801836c:	4603      	mov	r3, r0
 801836e:	461a      	mov	r2, r3
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018374:	2112      	movs	r1, #18
 8018376:	6978      	ldr	r0, [r7, #20]
 8018378:	f002 fc9a 	bl	801acb0 <tcp_enqueue_flags>
 801837c:	4603      	mov	r3, r0
 801837e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d004      	beq.n	8018392 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018388:	2100      	movs	r1, #0
 801838a:	6978      	ldr	r0, [r7, #20]
 801838c:	f7fd ff54 	bl	8016238 <tcp_abandon>
      return;
 8018390:	e006      	b.n	80183a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018392:	6978      	ldr	r0, [r7, #20]
 8018394:	f002 fd7a 	bl	801ae8c <tcp_output>
  return;
 8018398:	e001      	b.n	801839e <tcp_listen_input+0x1be>
    return;
 801839a:	bf00      	nop
 801839c:	e000      	b.n	80183a0 <tcp_listen_input+0x1c0>
  return;
 801839e:	bf00      	nop
}
 80183a0:	371c      	adds	r7, #28
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd90      	pop	{r4, r7, pc}
 80183a6:	bf00      	nop
 80183a8:	24040794 	.word	0x24040794
 80183ac:	080260d0 	.word	0x080260d0
 80183b0:	080262e4 	.word	0x080262e4
 80183b4:	08026138 	.word	0x08026138
 80183b8:	2404078c 	.word	0x2404078c
 80183bc:	24040792 	.word	0x24040792
 80183c0:	24040788 	.word	0x24040788
 80183c4:	24040778 	.word	0x24040778
 80183c8:	24045dd4 	.word	0x24045dd4
 80183cc:	24045dd8 	.word	0x24045dd8
 80183d0:	24045dc4 	.word	0x24045dc4
 80183d4:	24048e8c 	.word	0x24048e8c
 80183d8:	24048e88 	.word	0x24048e88

080183dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b086      	sub	sp, #24
 80183e0:	af04      	add	r7, sp, #16
 80183e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80183e4:	4b2f      	ldr	r3, [pc, #188]	; (80184a4 <tcp_timewait_input+0xc8>)
 80183e6:	781b      	ldrb	r3, [r3, #0]
 80183e8:	f003 0304 	and.w	r3, r3, #4
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d153      	bne.n	8018498 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d106      	bne.n	8018404 <tcp_timewait_input+0x28>
 80183f6:	4b2c      	ldr	r3, [pc, #176]	; (80184a8 <tcp_timewait_input+0xcc>)
 80183f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80183fc:	492b      	ldr	r1, [pc, #172]	; (80184ac <tcp_timewait_input+0xd0>)
 80183fe:	482c      	ldr	r0, [pc, #176]	; (80184b0 <tcp_timewait_input+0xd4>)
 8018400:	f008 ff14 	bl	802122c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018404:	4b27      	ldr	r3, [pc, #156]	; (80184a4 <tcp_timewait_input+0xc8>)
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	f003 0302 	and.w	r3, r3, #2
 801840c:	2b00      	cmp	r3, #0
 801840e:	d02a      	beq.n	8018466 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018410:	4b28      	ldr	r3, [pc, #160]	; (80184b4 <tcp_timewait_input+0xd8>)
 8018412:	681a      	ldr	r2, [r3, #0]
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018418:	1ad3      	subs	r3, r2, r3
 801841a:	2b00      	cmp	r3, #0
 801841c:	db2d      	blt.n	801847a <tcp_timewait_input+0x9e>
 801841e:	4b25      	ldr	r3, [pc, #148]	; (80184b4 <tcp_timewait_input+0xd8>)
 8018420:	681a      	ldr	r2, [r3, #0]
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018426:	6879      	ldr	r1, [r7, #4]
 8018428:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801842a:	440b      	add	r3, r1
 801842c:	1ad3      	subs	r3, r2, r3
 801842e:	2b00      	cmp	r3, #0
 8018430:	dc23      	bgt.n	801847a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018432:	4b21      	ldr	r3, [pc, #132]	; (80184b8 <tcp_timewait_input+0xdc>)
 8018434:	6819      	ldr	r1, [r3, #0]
 8018436:	4b21      	ldr	r3, [pc, #132]	; (80184bc <tcp_timewait_input+0xe0>)
 8018438:	881b      	ldrh	r3, [r3, #0]
 801843a:	461a      	mov	r2, r3
 801843c:	4b1d      	ldr	r3, [pc, #116]	; (80184b4 <tcp_timewait_input+0xd8>)
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018442:	4b1f      	ldr	r3, [pc, #124]	; (80184c0 <tcp_timewait_input+0xe4>)
 8018444:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018446:	885b      	ldrh	r3, [r3, #2]
 8018448:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801844a:	4a1d      	ldr	r2, [pc, #116]	; (80184c0 <tcp_timewait_input+0xe4>)
 801844c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801844e:	8812      	ldrh	r2, [r2, #0]
 8018450:	b292      	uxth	r2, r2
 8018452:	9202      	str	r2, [sp, #8]
 8018454:	9301      	str	r3, [sp, #4]
 8018456:	4b1b      	ldr	r3, [pc, #108]	; (80184c4 <tcp_timewait_input+0xe8>)
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	4b1b      	ldr	r3, [pc, #108]	; (80184c8 <tcp_timewait_input+0xec>)
 801845c:	4602      	mov	r2, r0
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f003 fac8 	bl	801b9f4 <tcp_rst>
      return;
 8018464:	e01b      	b.n	801849e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018466:	4b0f      	ldr	r3, [pc, #60]	; (80184a4 <tcp_timewait_input+0xc8>)
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	f003 0301 	and.w	r3, r3, #1
 801846e:	2b00      	cmp	r3, #0
 8018470:	d003      	beq.n	801847a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018472:	4b16      	ldr	r3, [pc, #88]	; (80184cc <tcp_timewait_input+0xf0>)
 8018474:	681a      	ldr	r2, [r3, #0]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801847a:	4b10      	ldr	r3, [pc, #64]	; (80184bc <tcp_timewait_input+0xe0>)
 801847c:	881b      	ldrh	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d00c      	beq.n	801849c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	8b5b      	ldrh	r3, [r3, #26]
 8018486:	f043 0302 	orr.w	r3, r3, #2
 801848a:	b29a      	uxth	r2, r3
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f002 fcfb 	bl	801ae8c <tcp_output>
  }
  return;
 8018496:	e001      	b.n	801849c <tcp_timewait_input+0xc0>
    return;
 8018498:	bf00      	nop
 801849a:	e000      	b.n	801849e <tcp_timewait_input+0xc2>
  return;
 801849c:	bf00      	nop
}
 801849e:	3708      	adds	r7, #8
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd80      	pop	{r7, pc}
 80184a4:	24040794 	.word	0x24040794
 80184a8:	080260d0 	.word	0x080260d0
 80184ac:	08026304 	.word	0x08026304
 80184b0:	08026138 	.word	0x08026138
 80184b4:	24040788 	.word	0x24040788
 80184b8:	2404078c 	.word	0x2404078c
 80184bc:	24040792 	.word	0x24040792
 80184c0:	24040778 	.word	0x24040778
 80184c4:	24045dd4 	.word	0x24045dd4
 80184c8:	24045dd8 	.word	0x24045dd8
 80184cc:	24048e90 	.word	0x24048e90

080184d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80184d0:	b590      	push	{r4, r7, lr}
 80184d2:	b08d      	sub	sp, #52	; 0x34
 80184d4:	af04      	add	r7, sp, #16
 80184d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80184d8:	2300      	movs	r3, #0
 80184da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80184dc:	2300      	movs	r3, #0
 80184de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d106      	bne.n	80184f4 <tcp_process+0x24>
 80184e6:	4ba5      	ldr	r3, [pc, #660]	; (801877c <tcp_process+0x2ac>)
 80184e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80184ec:	49a4      	ldr	r1, [pc, #656]	; (8018780 <tcp_process+0x2b0>)
 80184ee:	48a5      	ldr	r0, [pc, #660]	; (8018784 <tcp_process+0x2b4>)
 80184f0:	f008 fe9c 	bl	802122c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80184f4:	4ba4      	ldr	r3, [pc, #656]	; (8018788 <tcp_process+0x2b8>)
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	f003 0304 	and.w	r3, r3, #4
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d04e      	beq.n	801859e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	7d1b      	ldrb	r3, [r3, #20]
 8018504:	2b02      	cmp	r3, #2
 8018506:	d108      	bne.n	801851a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801850c:	4b9f      	ldr	r3, [pc, #636]	; (801878c <tcp_process+0x2bc>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	429a      	cmp	r2, r3
 8018512:	d123      	bne.n	801855c <tcp_process+0x8c>
        acceptable = 1;
 8018514:	2301      	movs	r3, #1
 8018516:	76fb      	strb	r3, [r7, #27]
 8018518:	e020      	b.n	801855c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801851e:	4b9c      	ldr	r3, [pc, #624]	; (8018790 <tcp_process+0x2c0>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	429a      	cmp	r2, r3
 8018524:	d102      	bne.n	801852c <tcp_process+0x5c>
        acceptable = 1;
 8018526:	2301      	movs	r3, #1
 8018528:	76fb      	strb	r3, [r7, #27]
 801852a:	e017      	b.n	801855c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801852c:	4b98      	ldr	r3, [pc, #608]	; (8018790 <tcp_process+0x2c0>)
 801852e:	681a      	ldr	r2, [r3, #0]
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018534:	1ad3      	subs	r3, r2, r3
 8018536:	2b00      	cmp	r3, #0
 8018538:	db10      	blt.n	801855c <tcp_process+0x8c>
 801853a:	4b95      	ldr	r3, [pc, #596]	; (8018790 <tcp_process+0x2c0>)
 801853c:	681a      	ldr	r2, [r3, #0]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018542:	6879      	ldr	r1, [r7, #4]
 8018544:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018546:	440b      	add	r3, r1
 8018548:	1ad3      	subs	r3, r2, r3
 801854a:	2b00      	cmp	r3, #0
 801854c:	dc06      	bgt.n	801855c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	8b5b      	ldrh	r3, [r3, #26]
 8018552:	f043 0302 	orr.w	r3, r3, #2
 8018556:	b29a      	uxth	r2, r3
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801855c:	7efb      	ldrb	r3, [r7, #27]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d01b      	beq.n	801859a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	7d1b      	ldrb	r3, [r3, #20]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d106      	bne.n	8018578 <tcp_process+0xa8>
 801856a:	4b84      	ldr	r3, [pc, #528]	; (801877c <tcp_process+0x2ac>)
 801856c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018570:	4988      	ldr	r1, [pc, #544]	; (8018794 <tcp_process+0x2c4>)
 8018572:	4884      	ldr	r0, [pc, #528]	; (8018784 <tcp_process+0x2b4>)
 8018574:	f008 fe5a 	bl	802122c <iprintf>
      recv_flags |= TF_RESET;
 8018578:	4b87      	ldr	r3, [pc, #540]	; (8018798 <tcp_process+0x2c8>)
 801857a:	781b      	ldrb	r3, [r3, #0]
 801857c:	f043 0308 	orr.w	r3, r3, #8
 8018580:	b2da      	uxtb	r2, r3
 8018582:	4b85      	ldr	r3, [pc, #532]	; (8018798 <tcp_process+0x2c8>)
 8018584:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	8b5b      	ldrh	r3, [r3, #26]
 801858a:	f023 0301 	bic.w	r3, r3, #1
 801858e:	b29a      	uxth	r2, r3
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018594:	f06f 030d 	mvn.w	r3, #13
 8018598:	e37a      	b.n	8018c90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801859a:	2300      	movs	r3, #0
 801859c:	e378      	b.n	8018c90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801859e:	4b7a      	ldr	r3, [pc, #488]	; (8018788 <tcp_process+0x2b8>)
 80185a0:	781b      	ldrb	r3, [r3, #0]
 80185a2:	f003 0302 	and.w	r3, r3, #2
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d010      	beq.n	80185cc <tcp_process+0xfc>
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	7d1b      	ldrb	r3, [r3, #20]
 80185ae:	2b02      	cmp	r3, #2
 80185b0:	d00c      	beq.n	80185cc <tcp_process+0xfc>
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	7d1b      	ldrb	r3, [r3, #20]
 80185b6:	2b03      	cmp	r3, #3
 80185b8:	d008      	beq.n	80185cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	8b5b      	ldrh	r3, [r3, #26]
 80185be:	f043 0302 	orr.w	r3, r3, #2
 80185c2:	b29a      	uxth	r2, r3
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80185c8:	2300      	movs	r3, #0
 80185ca:	e361      	b.n	8018c90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	8b5b      	ldrh	r3, [r3, #26]
 80185d0:	f003 0310 	and.w	r3, r3, #16
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d103      	bne.n	80185e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80185d8:	4b70      	ldr	r3, [pc, #448]	; (801879c <tcp_process+0x2cc>)
 80185da:	681a      	ldr	r2, [r3, #0]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	2200      	movs	r2, #0
 80185e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2200      	movs	r2, #0
 80185ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f001 fc2d 	bl	8019e50 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7d1b      	ldrb	r3, [r3, #20]
 80185fa:	3b02      	subs	r3, #2
 80185fc:	2b07      	cmp	r3, #7
 80185fe:	f200 8337 	bhi.w	8018c70 <tcp_process+0x7a0>
 8018602:	a201      	add	r2, pc, #4	; (adr r2, 8018608 <tcp_process+0x138>)
 8018604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018608:	08018629 	.word	0x08018629
 801860c:	08018859 	.word	0x08018859
 8018610:	080189d1 	.word	0x080189d1
 8018614:	080189fb 	.word	0x080189fb
 8018618:	08018b1f 	.word	0x08018b1f
 801861c:	080189d1 	.word	0x080189d1
 8018620:	08018bab 	.word	0x08018bab
 8018624:	08018c3b 	.word	0x08018c3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018628:	4b57      	ldr	r3, [pc, #348]	; (8018788 <tcp_process+0x2b8>)
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	f003 0310 	and.w	r3, r3, #16
 8018630:	2b00      	cmp	r3, #0
 8018632:	f000 80e4 	beq.w	80187fe <tcp_process+0x32e>
 8018636:	4b54      	ldr	r3, [pc, #336]	; (8018788 <tcp_process+0x2b8>)
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	f003 0302 	and.w	r3, r3, #2
 801863e:	2b00      	cmp	r3, #0
 8018640:	f000 80dd 	beq.w	80187fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018648:	1c5a      	adds	r2, r3, #1
 801864a:	4b50      	ldr	r3, [pc, #320]	; (801878c <tcp_process+0x2bc>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	429a      	cmp	r2, r3
 8018650:	f040 80d5 	bne.w	80187fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018654:	4b4e      	ldr	r3, [pc, #312]	; (8018790 <tcp_process+0x2c0>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	1c5a      	adds	r2, r3, #1
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018666:	4b49      	ldr	r3, [pc, #292]	; (801878c <tcp_process+0x2bc>)
 8018668:	681a      	ldr	r2, [r3, #0]
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801866e:	4b4c      	ldr	r3, [pc, #304]	; (80187a0 <tcp_process+0x2d0>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	89db      	ldrh	r3, [r3, #14]
 8018674:	b29a      	uxth	r2, r3
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018688:	4b41      	ldr	r3, [pc, #260]	; (8018790 <tcp_process+0x2c0>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	1e5a      	subs	r2, r3, #1
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	2204      	movs	r2, #4
 8018696:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	3304      	adds	r3, #4
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7f8 ff0f 	bl	80114c4 <ip4_route>
 80186a6:	4601      	mov	r1, r0
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	3304      	adds	r3, #4
 80186ac:	461a      	mov	r2, r3
 80186ae:	4620      	mov	r0, r4
 80186b0:	f7ff f88e 	bl	80177d0 <tcp_eff_send_mss_netif>
 80186b4:	4603      	mov	r3, r0
 80186b6:	461a      	mov	r2, r3
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186c0:	009a      	lsls	r2, r3, #2
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186c6:	005b      	lsls	r3, r3, #1
 80186c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80186cc:	428b      	cmp	r3, r1
 80186ce:	bf38      	it	cc
 80186d0:	460b      	movcc	r3, r1
 80186d2:	429a      	cmp	r2, r3
 80186d4:	d204      	bcs.n	80186e0 <tcp_process+0x210>
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	b29b      	uxth	r3, r3
 80186de:	e00d      	b.n	80186fc <tcp_process+0x22c>
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186e4:	005b      	lsls	r3, r3, #1
 80186e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80186ea:	4293      	cmp	r3, r2
 80186ec:	d904      	bls.n	80186f8 <tcp_process+0x228>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186f2:	005b      	lsls	r3, r3, #1
 80186f4:	b29b      	uxth	r3, r3
 80186f6:	e001      	b.n	80186fc <tcp_process+0x22c>
 80186f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80186fc:	687a      	ldr	r2, [r7, #4]
 80186fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018708:	2b00      	cmp	r3, #0
 801870a:	d106      	bne.n	801871a <tcp_process+0x24a>
 801870c:	4b1b      	ldr	r3, [pc, #108]	; (801877c <tcp_process+0x2ac>)
 801870e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018712:	4924      	ldr	r1, [pc, #144]	; (80187a4 <tcp_process+0x2d4>)
 8018714:	481b      	ldr	r0, [pc, #108]	; (8018784 <tcp_process+0x2b4>)
 8018716:	f008 fd89 	bl	802122c <iprintf>
        --pcb->snd_queuelen;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018720:	3b01      	subs	r3, #1
 8018722:	b29a      	uxth	r2, r3
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801872e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d111      	bne.n	801875a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801873a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d106      	bne.n	8018750 <tcp_process+0x280>
 8018742:	4b0e      	ldr	r3, [pc, #56]	; (801877c <tcp_process+0x2ac>)
 8018744:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018748:	4917      	ldr	r1, [pc, #92]	; (80187a8 <tcp_process+0x2d8>)
 801874a:	480e      	ldr	r0, [pc, #56]	; (8018784 <tcp_process+0x2b4>)
 801874c:	f008 fd6e 	bl	802122c <iprintf>
          pcb->unsent = rseg->next;
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	66da      	str	r2, [r3, #108]	; 0x6c
 8018758:	e003      	b.n	8018762 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801875a:	69fb      	ldr	r3, [r7, #28]
 801875c:	681a      	ldr	r2, [r3, #0]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018762:	69f8      	ldr	r0, [r7, #28]
 8018764:	f7fe fc6f 	bl	8017046 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801876c:	2b00      	cmp	r3, #0
 801876e:	d11d      	bne.n	80187ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018776:	861a      	strh	r2, [r3, #48]	; 0x30
 8018778:	e01f      	b.n	80187ba <tcp_process+0x2ea>
 801877a:	bf00      	nop
 801877c:	080260d0 	.word	0x080260d0
 8018780:	08026324 	.word	0x08026324
 8018784:	08026138 	.word	0x08026138
 8018788:	24040794 	.word	0x24040794
 801878c:	2404078c 	.word	0x2404078c
 8018790:	24040788 	.word	0x24040788
 8018794:	08026340 	.word	0x08026340
 8018798:	24040795 	.word	0x24040795
 801879c:	24048e90 	.word	0x24048e90
 80187a0:	24040778 	.word	0x24040778
 80187a4:	08026360 	.word	0x08026360
 80187a8:	08026378 	.word	0x08026378
        } else {
          pcb->rtime = 0;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2200      	movs	r2, #0
 80187b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	2200      	movs	r2, #0
 80187b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d00a      	beq.n	80187da <tcp_process+0x30a>
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80187ca:	687a      	ldr	r2, [r7, #4]
 80187cc:	6910      	ldr	r0, [r2, #16]
 80187ce:	2200      	movs	r2, #0
 80187d0:	6879      	ldr	r1, [r7, #4]
 80187d2:	4798      	blx	r3
 80187d4:	4603      	mov	r3, r0
 80187d6:	76bb      	strb	r3, [r7, #26]
 80187d8:	e001      	b.n	80187de <tcp_process+0x30e>
 80187da:	2300      	movs	r3, #0
 80187dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80187de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80187e2:	f113 0f0d 	cmn.w	r3, #13
 80187e6:	d102      	bne.n	80187ee <tcp_process+0x31e>
          return ERR_ABRT;
 80187e8:	f06f 030c 	mvn.w	r3, #12
 80187ec:	e250      	b.n	8018c90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	8b5b      	ldrh	r3, [r3, #26]
 80187f2:	f043 0302 	orr.w	r3, r3, #2
 80187f6:	b29a      	uxth	r2, r3
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80187fc:	e23a      	b.n	8018c74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80187fe:	4b9d      	ldr	r3, [pc, #628]	; (8018a74 <tcp_process+0x5a4>)
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	f003 0310 	and.w	r3, r3, #16
 8018806:	2b00      	cmp	r3, #0
 8018808:	f000 8234 	beq.w	8018c74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801880c:	4b9a      	ldr	r3, [pc, #616]	; (8018a78 <tcp_process+0x5a8>)
 801880e:	6819      	ldr	r1, [r3, #0]
 8018810:	4b9a      	ldr	r3, [pc, #616]	; (8018a7c <tcp_process+0x5ac>)
 8018812:	881b      	ldrh	r3, [r3, #0]
 8018814:	461a      	mov	r2, r3
 8018816:	4b9a      	ldr	r3, [pc, #616]	; (8018a80 <tcp_process+0x5b0>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801881c:	4b99      	ldr	r3, [pc, #612]	; (8018a84 <tcp_process+0x5b4>)
 801881e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018820:	885b      	ldrh	r3, [r3, #2]
 8018822:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018824:	4a97      	ldr	r2, [pc, #604]	; (8018a84 <tcp_process+0x5b4>)
 8018826:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018828:	8812      	ldrh	r2, [r2, #0]
 801882a:	b292      	uxth	r2, r2
 801882c:	9202      	str	r2, [sp, #8]
 801882e:	9301      	str	r3, [sp, #4]
 8018830:	4b95      	ldr	r3, [pc, #596]	; (8018a88 <tcp_process+0x5b8>)
 8018832:	9300      	str	r3, [sp, #0]
 8018834:	4b95      	ldr	r3, [pc, #596]	; (8018a8c <tcp_process+0x5bc>)
 8018836:	4602      	mov	r2, r0
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f003 f8db 	bl	801b9f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018844:	2b05      	cmp	r3, #5
 8018846:	f200 8215 	bhi.w	8018c74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2200      	movs	r2, #0
 801884e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	f002 fea5 	bl	801b5a0 <tcp_rexmit_rto>
      break;
 8018856:	e20d      	b.n	8018c74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018858:	4b86      	ldr	r3, [pc, #536]	; (8018a74 <tcp_process+0x5a4>)
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	f003 0310 	and.w	r3, r3, #16
 8018860:	2b00      	cmp	r3, #0
 8018862:	f000 80a1 	beq.w	80189a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018866:	4b84      	ldr	r3, [pc, #528]	; (8018a78 <tcp_process+0x5a8>)
 8018868:	681a      	ldr	r2, [r3, #0]
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801886e:	1ad3      	subs	r3, r2, r3
 8018870:	3b01      	subs	r3, #1
 8018872:	2b00      	cmp	r3, #0
 8018874:	db7e      	blt.n	8018974 <tcp_process+0x4a4>
 8018876:	4b80      	ldr	r3, [pc, #512]	; (8018a78 <tcp_process+0x5a8>)
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801887e:	1ad3      	subs	r3, r2, r3
 8018880:	2b00      	cmp	r3, #0
 8018882:	dc77      	bgt.n	8018974 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	2204      	movs	r2, #4
 8018888:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801888e:	2b00      	cmp	r3, #0
 8018890:	d102      	bne.n	8018898 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018892:	23fa      	movs	r3, #250	; 0xfa
 8018894:	76bb      	strb	r3, [r7, #26]
 8018896:	e01d      	b.n	80188d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801889c:	699b      	ldr	r3, [r3, #24]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d106      	bne.n	80188b0 <tcp_process+0x3e0>
 80188a2:	4b7b      	ldr	r3, [pc, #492]	; (8018a90 <tcp_process+0x5c0>)
 80188a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80188a8:	497a      	ldr	r1, [pc, #488]	; (8018a94 <tcp_process+0x5c4>)
 80188aa:	487b      	ldr	r0, [pc, #492]	; (8018a98 <tcp_process+0x5c8>)
 80188ac:	f008 fcbe 	bl	802122c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80188b4:	699b      	ldr	r3, [r3, #24]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d00a      	beq.n	80188d0 <tcp_process+0x400>
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80188be:	699b      	ldr	r3, [r3, #24]
 80188c0:	687a      	ldr	r2, [r7, #4]
 80188c2:	6910      	ldr	r0, [r2, #16]
 80188c4:	2200      	movs	r2, #0
 80188c6:	6879      	ldr	r1, [r7, #4]
 80188c8:	4798      	blx	r3
 80188ca:	4603      	mov	r3, r0
 80188cc:	76bb      	strb	r3, [r7, #26]
 80188ce:	e001      	b.n	80188d4 <tcp_process+0x404>
 80188d0:	23f0      	movs	r3, #240	; 0xf0
 80188d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80188d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d00a      	beq.n	80188f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80188dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80188e0:	f113 0f0d 	cmn.w	r3, #13
 80188e4:	d002      	beq.n	80188ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80188e6:	6878      	ldr	r0, [r7, #4]
 80188e8:	f7fd fd64 	bl	80163b4 <tcp_abort>
            }
            return ERR_ABRT;
 80188ec:	f06f 030c 	mvn.w	r3, #12
 80188f0:	e1ce      	b.n	8018c90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80188f2:	6878      	ldr	r0, [r7, #4]
 80188f4:	f000 fae0 	bl	8018eb8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80188f8:	4b68      	ldr	r3, [pc, #416]	; (8018a9c <tcp_process+0x5cc>)
 80188fa:	881b      	ldrh	r3, [r3, #0]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d005      	beq.n	801890c <tcp_process+0x43c>
            recv_acked--;
 8018900:	4b66      	ldr	r3, [pc, #408]	; (8018a9c <tcp_process+0x5cc>)
 8018902:	881b      	ldrh	r3, [r3, #0]
 8018904:	3b01      	subs	r3, #1
 8018906:	b29a      	uxth	r2, r3
 8018908:	4b64      	ldr	r3, [pc, #400]	; (8018a9c <tcp_process+0x5cc>)
 801890a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018910:	009a      	lsls	r2, r3, #2
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018916:	005b      	lsls	r3, r3, #1
 8018918:	f241 111c 	movw	r1, #4380	; 0x111c
 801891c:	428b      	cmp	r3, r1
 801891e:	bf38      	it	cc
 8018920:	460b      	movcc	r3, r1
 8018922:	429a      	cmp	r2, r3
 8018924:	d204      	bcs.n	8018930 <tcp_process+0x460>
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801892a:	009b      	lsls	r3, r3, #2
 801892c:	b29b      	uxth	r3, r3
 801892e:	e00d      	b.n	801894c <tcp_process+0x47c>
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018934:	005b      	lsls	r3, r3, #1
 8018936:	f241 121c 	movw	r2, #4380	; 0x111c
 801893a:	4293      	cmp	r3, r2
 801893c:	d904      	bls.n	8018948 <tcp_process+0x478>
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018942:	005b      	lsls	r3, r3, #1
 8018944:	b29b      	uxth	r3, r3
 8018946:	e001      	b.n	801894c <tcp_process+0x47c>
 8018948:	f241 131c 	movw	r3, #4380	; 0x111c
 801894c:	687a      	ldr	r2, [r7, #4]
 801894e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018952:	4b53      	ldr	r3, [pc, #332]	; (8018aa0 <tcp_process+0x5d0>)
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	f003 0320 	and.w	r3, r3, #32
 801895a:	2b00      	cmp	r3, #0
 801895c:	d037      	beq.n	80189ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	8b5b      	ldrh	r3, [r3, #26]
 8018962:	f043 0302 	orr.w	r3, r3, #2
 8018966:	b29a      	uxth	r2, r3
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2207      	movs	r2, #7
 8018970:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018972:	e02c      	b.n	80189ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018974:	4b40      	ldr	r3, [pc, #256]	; (8018a78 <tcp_process+0x5a8>)
 8018976:	6819      	ldr	r1, [r3, #0]
 8018978:	4b40      	ldr	r3, [pc, #256]	; (8018a7c <tcp_process+0x5ac>)
 801897a:	881b      	ldrh	r3, [r3, #0]
 801897c:	461a      	mov	r2, r3
 801897e:	4b40      	ldr	r3, [pc, #256]	; (8018a80 <tcp_process+0x5b0>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018984:	4b3f      	ldr	r3, [pc, #252]	; (8018a84 <tcp_process+0x5b4>)
 8018986:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018988:	885b      	ldrh	r3, [r3, #2]
 801898a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801898c:	4a3d      	ldr	r2, [pc, #244]	; (8018a84 <tcp_process+0x5b4>)
 801898e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018990:	8812      	ldrh	r2, [r2, #0]
 8018992:	b292      	uxth	r2, r2
 8018994:	9202      	str	r2, [sp, #8]
 8018996:	9301      	str	r3, [sp, #4]
 8018998:	4b3b      	ldr	r3, [pc, #236]	; (8018a88 <tcp_process+0x5b8>)
 801899a:	9300      	str	r3, [sp, #0]
 801899c:	4b3b      	ldr	r3, [pc, #236]	; (8018a8c <tcp_process+0x5bc>)
 801899e:	4602      	mov	r2, r0
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f003 f827 	bl	801b9f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80189a6:	e167      	b.n	8018c78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80189a8:	4b32      	ldr	r3, [pc, #200]	; (8018a74 <tcp_process+0x5a4>)
 80189aa:	781b      	ldrb	r3, [r3, #0]
 80189ac:	f003 0302 	and.w	r3, r3, #2
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f000 8161 	beq.w	8018c78 <tcp_process+0x7a8>
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ba:	1e5a      	subs	r2, r3, #1
 80189bc:	4b30      	ldr	r3, [pc, #192]	; (8018a80 <tcp_process+0x5b0>)
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	429a      	cmp	r2, r3
 80189c2:	f040 8159 	bne.w	8018c78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f002 fe0c 	bl	801b5e4 <tcp_rexmit>
      break;
 80189cc:	e154      	b.n	8018c78 <tcp_process+0x7a8>
 80189ce:	e153      	b.n	8018c78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f000 fa71 	bl	8018eb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80189d6:	4b32      	ldr	r3, [pc, #200]	; (8018aa0 <tcp_process+0x5d0>)
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	f003 0320 	and.w	r3, r3, #32
 80189de:	2b00      	cmp	r3, #0
 80189e0:	f000 814c 	beq.w	8018c7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	8b5b      	ldrh	r3, [r3, #26]
 80189e8:	f043 0302 	orr.w	r3, r3, #2
 80189ec:	b29a      	uxth	r2, r3
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2207      	movs	r2, #7
 80189f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80189f8:	e140      	b.n	8018c7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80189fa:	6878      	ldr	r0, [r7, #4]
 80189fc:	f000 fa5c 	bl	8018eb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018a00:	4b27      	ldr	r3, [pc, #156]	; (8018aa0 <tcp_process+0x5d0>)
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	f003 0320 	and.w	r3, r3, #32
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d071      	beq.n	8018af0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018a0c:	4b19      	ldr	r3, [pc, #100]	; (8018a74 <tcp_process+0x5a4>)
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	f003 0310 	and.w	r3, r3, #16
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d060      	beq.n	8018ada <tcp_process+0x60a>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018a1c:	4b16      	ldr	r3, [pc, #88]	; (8018a78 <tcp_process+0x5a8>)
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d15a      	bne.n	8018ada <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d156      	bne.n	8018ada <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	8b5b      	ldrh	r3, [r3, #26]
 8018a30:	f043 0302 	orr.w	r3, r3, #2
 8018a34:	b29a      	uxth	r2, r3
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f7fe fdbe 	bl	80175bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018a40:	4b18      	ldr	r3, [pc, #96]	; (8018aa4 <tcp_process+0x5d4>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	687a      	ldr	r2, [r7, #4]
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d105      	bne.n	8018a56 <tcp_process+0x586>
 8018a4a:	4b16      	ldr	r3, [pc, #88]	; (8018aa4 <tcp_process+0x5d4>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	68db      	ldr	r3, [r3, #12]
 8018a50:	4a14      	ldr	r2, [pc, #80]	; (8018aa4 <tcp_process+0x5d4>)
 8018a52:	6013      	str	r3, [r2, #0]
 8018a54:	e02e      	b.n	8018ab4 <tcp_process+0x5e4>
 8018a56:	4b13      	ldr	r3, [pc, #76]	; (8018aa4 <tcp_process+0x5d4>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	617b      	str	r3, [r7, #20]
 8018a5c:	e027      	b.n	8018aae <tcp_process+0x5de>
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	68db      	ldr	r3, [r3, #12]
 8018a62:	687a      	ldr	r2, [r7, #4]
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d11f      	bne.n	8018aa8 <tcp_process+0x5d8>
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	68da      	ldr	r2, [r3, #12]
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	60da      	str	r2, [r3, #12]
 8018a70:	e020      	b.n	8018ab4 <tcp_process+0x5e4>
 8018a72:	bf00      	nop
 8018a74:	24040794 	.word	0x24040794
 8018a78:	2404078c 	.word	0x2404078c
 8018a7c:	24040792 	.word	0x24040792
 8018a80:	24040788 	.word	0x24040788
 8018a84:	24040778 	.word	0x24040778
 8018a88:	24045dd4 	.word	0x24045dd4
 8018a8c:	24045dd8 	.word	0x24045dd8
 8018a90:	080260d0 	.word	0x080260d0
 8018a94:	0802638c 	.word	0x0802638c
 8018a98:	08026138 	.word	0x08026138
 8018a9c:	24040790 	.word	0x24040790
 8018aa0:	24040795 	.word	0x24040795
 8018aa4:	24048e8c 	.word	0x24048e8c
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	617b      	str	r3, [r7, #20]
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d1d4      	bne.n	8018a5e <tcp_process+0x58e>
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	60da      	str	r2, [r3, #12]
 8018aba:	4b77      	ldr	r3, [pc, #476]	; (8018c98 <tcp_process+0x7c8>)
 8018abc:	2201      	movs	r2, #1
 8018abe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	220a      	movs	r2, #10
 8018ac4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018ac6:	4b75      	ldr	r3, [pc, #468]	; (8018c9c <tcp_process+0x7cc>)
 8018ac8:	681a      	ldr	r2, [r3, #0]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	60da      	str	r2, [r3, #12]
 8018ace:	4a73      	ldr	r2, [pc, #460]	; (8018c9c <tcp_process+0x7cc>)
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6013      	str	r3, [r2, #0]
 8018ad4:	f003 fb08 	bl	801c0e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018ad8:	e0d2      	b.n	8018c80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	8b5b      	ldrh	r3, [r3, #26]
 8018ade:	f043 0302 	orr.w	r3, r3, #2
 8018ae2:	b29a      	uxth	r2, r3
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2208      	movs	r2, #8
 8018aec:	751a      	strb	r2, [r3, #20]
      break;
 8018aee:	e0c7      	b.n	8018c80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018af0:	4b6b      	ldr	r3, [pc, #428]	; (8018ca0 <tcp_process+0x7d0>)
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	f003 0310 	and.w	r3, r3, #16
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	f000 80c1 	beq.w	8018c80 <tcp_process+0x7b0>
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b02:	4b68      	ldr	r3, [pc, #416]	; (8018ca4 <tcp_process+0x7d4>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	429a      	cmp	r2, r3
 8018b08:	f040 80ba 	bne.w	8018c80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	f040 80b5 	bne.w	8018c80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2206      	movs	r2, #6
 8018b1a:	751a      	strb	r2, [r3, #20]
      break;
 8018b1c:	e0b0      	b.n	8018c80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f000 f9ca 	bl	8018eb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018b24:	4b60      	ldr	r3, [pc, #384]	; (8018ca8 <tcp_process+0x7d8>)
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	f003 0320 	and.w	r3, r3, #32
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	f000 80a9 	beq.w	8018c84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	8b5b      	ldrh	r3, [r3, #26]
 8018b36:	f043 0302 	orr.w	r3, r3, #2
 8018b3a:	b29a      	uxth	r2, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018b40:	6878      	ldr	r0, [r7, #4]
 8018b42:	f7fe fd3b 	bl	80175bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018b46:	4b59      	ldr	r3, [pc, #356]	; (8018cac <tcp_process+0x7dc>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	687a      	ldr	r2, [r7, #4]
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d105      	bne.n	8018b5c <tcp_process+0x68c>
 8018b50:	4b56      	ldr	r3, [pc, #344]	; (8018cac <tcp_process+0x7dc>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	68db      	ldr	r3, [r3, #12]
 8018b56:	4a55      	ldr	r2, [pc, #340]	; (8018cac <tcp_process+0x7dc>)
 8018b58:	6013      	str	r3, [r2, #0]
 8018b5a:	e013      	b.n	8018b84 <tcp_process+0x6b4>
 8018b5c:	4b53      	ldr	r3, [pc, #332]	; (8018cac <tcp_process+0x7dc>)
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	613b      	str	r3, [r7, #16]
 8018b62:	e00c      	b.n	8018b7e <tcp_process+0x6ae>
 8018b64:	693b      	ldr	r3, [r7, #16]
 8018b66:	68db      	ldr	r3, [r3, #12]
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	d104      	bne.n	8018b78 <tcp_process+0x6a8>
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	68da      	ldr	r2, [r3, #12]
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	60da      	str	r2, [r3, #12]
 8018b76:	e005      	b.n	8018b84 <tcp_process+0x6b4>
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	68db      	ldr	r3, [r3, #12]
 8018b7c:	613b      	str	r3, [r7, #16]
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d1ef      	bne.n	8018b64 <tcp_process+0x694>
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	2200      	movs	r2, #0
 8018b88:	60da      	str	r2, [r3, #12]
 8018b8a:	4b43      	ldr	r3, [pc, #268]	; (8018c98 <tcp_process+0x7c8>)
 8018b8c:	2201      	movs	r2, #1
 8018b8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	220a      	movs	r2, #10
 8018b94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018b96:	4b41      	ldr	r3, [pc, #260]	; (8018c9c <tcp_process+0x7cc>)
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	60da      	str	r2, [r3, #12]
 8018b9e:	4a3f      	ldr	r2, [pc, #252]	; (8018c9c <tcp_process+0x7cc>)
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	6013      	str	r3, [r2, #0]
 8018ba4:	f003 faa0 	bl	801c0e8 <tcp_timer_needed>
      }
      break;
 8018ba8:	e06c      	b.n	8018c84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018baa:	6878      	ldr	r0, [r7, #4]
 8018bac:	f000 f984 	bl	8018eb8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018bb0:	4b3b      	ldr	r3, [pc, #236]	; (8018ca0 <tcp_process+0x7d0>)
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	f003 0310 	and.w	r3, r3, #16
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d065      	beq.n	8018c88 <tcp_process+0x7b8>
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018bc0:	4b38      	ldr	r3, [pc, #224]	; (8018ca4 <tcp_process+0x7d4>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d15f      	bne.n	8018c88 <tcp_process+0x7b8>
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d15b      	bne.n	8018c88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018bd0:	6878      	ldr	r0, [r7, #4]
 8018bd2:	f7fe fcf3 	bl	80175bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018bd6:	4b35      	ldr	r3, [pc, #212]	; (8018cac <tcp_process+0x7dc>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	687a      	ldr	r2, [r7, #4]
 8018bdc:	429a      	cmp	r2, r3
 8018bde:	d105      	bne.n	8018bec <tcp_process+0x71c>
 8018be0:	4b32      	ldr	r3, [pc, #200]	; (8018cac <tcp_process+0x7dc>)
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	68db      	ldr	r3, [r3, #12]
 8018be6:	4a31      	ldr	r2, [pc, #196]	; (8018cac <tcp_process+0x7dc>)
 8018be8:	6013      	str	r3, [r2, #0]
 8018bea:	e013      	b.n	8018c14 <tcp_process+0x744>
 8018bec:	4b2f      	ldr	r3, [pc, #188]	; (8018cac <tcp_process+0x7dc>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	60fb      	str	r3, [r7, #12]
 8018bf2:	e00c      	b.n	8018c0e <tcp_process+0x73e>
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	687a      	ldr	r2, [r7, #4]
 8018bfa:	429a      	cmp	r2, r3
 8018bfc:	d104      	bne.n	8018c08 <tcp_process+0x738>
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	68da      	ldr	r2, [r3, #12]
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	60da      	str	r2, [r3, #12]
 8018c06:	e005      	b.n	8018c14 <tcp_process+0x744>
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	68db      	ldr	r3, [r3, #12]
 8018c0c:	60fb      	str	r3, [r7, #12]
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1ef      	bne.n	8018bf4 <tcp_process+0x724>
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2200      	movs	r2, #0
 8018c18:	60da      	str	r2, [r3, #12]
 8018c1a:	4b1f      	ldr	r3, [pc, #124]	; (8018c98 <tcp_process+0x7c8>)
 8018c1c:	2201      	movs	r2, #1
 8018c1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	220a      	movs	r2, #10
 8018c24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018c26:	4b1d      	ldr	r3, [pc, #116]	; (8018c9c <tcp_process+0x7cc>)
 8018c28:	681a      	ldr	r2, [r3, #0]
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	60da      	str	r2, [r3, #12]
 8018c2e:	4a1b      	ldr	r2, [pc, #108]	; (8018c9c <tcp_process+0x7cc>)
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	6013      	str	r3, [r2, #0]
 8018c34:	f003 fa58 	bl	801c0e8 <tcp_timer_needed>
      }
      break;
 8018c38:	e026      	b.n	8018c88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018c3a:	6878      	ldr	r0, [r7, #4]
 8018c3c:	f000 f93c 	bl	8018eb8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018c40:	4b17      	ldr	r3, [pc, #92]	; (8018ca0 <tcp_process+0x7d0>)
 8018c42:	781b      	ldrb	r3, [r3, #0]
 8018c44:	f003 0310 	and.w	r3, r3, #16
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d01f      	beq.n	8018c8c <tcp_process+0x7bc>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c50:	4b14      	ldr	r3, [pc, #80]	; (8018ca4 <tcp_process+0x7d4>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	429a      	cmp	r2, r3
 8018c56:	d119      	bne.n	8018c8c <tcp_process+0x7bc>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d115      	bne.n	8018c8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018c60:	4b11      	ldr	r3, [pc, #68]	; (8018ca8 <tcp_process+0x7d8>)
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	f043 0310 	orr.w	r3, r3, #16
 8018c68:	b2da      	uxtb	r2, r3
 8018c6a:	4b0f      	ldr	r3, [pc, #60]	; (8018ca8 <tcp_process+0x7d8>)
 8018c6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018c6e:	e00d      	b.n	8018c8c <tcp_process+0x7bc>
    default:
      break;
 8018c70:	bf00      	nop
 8018c72:	e00c      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c74:	bf00      	nop
 8018c76:	e00a      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c78:	bf00      	nop
 8018c7a:	e008      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c7c:	bf00      	nop
 8018c7e:	e006      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c80:	bf00      	nop
 8018c82:	e004      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c84:	bf00      	nop
 8018c86:	e002      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c88:	bf00      	nop
 8018c8a:	e000      	b.n	8018c8e <tcp_process+0x7be>
      break;
 8018c8c:	bf00      	nop
  }
  return ERR_OK;
 8018c8e:	2300      	movs	r3, #0
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	3724      	adds	r7, #36	; 0x24
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd90      	pop	{r4, r7, pc}
 8018c98:	24048e88 	.word	0x24048e88
 8018c9c:	24048e9c 	.word	0x24048e9c
 8018ca0:	24040794 	.word	0x24040794
 8018ca4:	2404078c 	.word	0x2404078c
 8018ca8:	24040795 	.word	0x24040795
 8018cac:	24048e8c 	.word	0x24048e8c

08018cb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018cb0:	b590      	push	{r4, r7, lr}
 8018cb2:	b085      	sub	sp, #20
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d106      	bne.n	8018cce <tcp_oos_insert_segment+0x1e>
 8018cc0:	4b3b      	ldr	r3, [pc, #236]	; (8018db0 <tcp_oos_insert_segment+0x100>)
 8018cc2:	f240 421f 	movw	r2, #1055	; 0x41f
 8018cc6:	493b      	ldr	r1, [pc, #236]	; (8018db4 <tcp_oos_insert_segment+0x104>)
 8018cc8:	483b      	ldr	r0, [pc, #236]	; (8018db8 <tcp_oos_insert_segment+0x108>)
 8018cca:	f008 faaf 	bl	802122c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	68db      	ldr	r3, [r3, #12]
 8018cd2:	899b      	ldrh	r3, [r3, #12]
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7f7 f8fe 	bl	800fed8 <lwip_htons>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	f003 0301 	and.w	r3, r3, #1
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d028      	beq.n	8018d3a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018ce8:	6838      	ldr	r0, [r7, #0]
 8018cea:	f7fe f997 	bl	801701c <tcp_segs_free>
    next = NULL;
 8018cee:	2300      	movs	r3, #0
 8018cf0:	603b      	str	r3, [r7, #0]
 8018cf2:	e056      	b.n	8018da2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	68db      	ldr	r3, [r3, #12]
 8018cf8:	899b      	ldrh	r3, [r3, #12]
 8018cfa:	b29b      	uxth	r3, r3
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	f7f7 f8eb 	bl	800fed8 <lwip_htons>
 8018d02:	4603      	mov	r3, r0
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	f003 0301 	and.w	r3, r3, #1
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d00d      	beq.n	8018d2a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	68db      	ldr	r3, [r3, #12]
 8018d12:	899b      	ldrh	r3, [r3, #12]
 8018d14:	b29c      	uxth	r4, r3
 8018d16:	2001      	movs	r0, #1
 8018d18:	f7f7 f8de 	bl	800fed8 <lwip_htons>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	461a      	mov	r2, r3
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	68db      	ldr	r3, [r3, #12]
 8018d24:	4322      	orrs	r2, r4
 8018d26:	b292      	uxth	r2, r2
 8018d28:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018d34:	68f8      	ldr	r0, [r7, #12]
 8018d36:	f7fe f986 	bl	8017046 <tcp_seg_free>
    while (next &&
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d00e      	beq.n	8018d5e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	891b      	ldrh	r3, [r3, #8]
 8018d44:	461a      	mov	r2, r3
 8018d46:	4b1d      	ldr	r3, [pc, #116]	; (8018dbc <tcp_oos_insert_segment+0x10c>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	441a      	add	r2, r3
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	68db      	ldr	r3, [r3, #12]
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	6839      	ldr	r1, [r7, #0]
 8018d54:	8909      	ldrh	r1, [r1, #8]
 8018d56:	440b      	add	r3, r1
 8018d58:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	daca      	bge.n	8018cf4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d01e      	beq.n	8018da2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	891b      	ldrh	r3, [r3, #8]
 8018d68:	461a      	mov	r2, r3
 8018d6a:	4b14      	ldr	r3, [pc, #80]	; (8018dbc <tcp_oos_insert_segment+0x10c>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	441a      	add	r2, r3
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	685b      	ldr	r3, [r3, #4]
 8018d76:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	dd12      	ble.n	8018da2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	68db      	ldr	r3, [r3, #12]
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	4b0d      	ldr	r3, [pc, #52]	; (8018dbc <tcp_oos_insert_segment+0x10c>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	b29b      	uxth	r3, r3
 8018d8a:	1ad3      	subs	r3, r2, r3
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	685a      	ldr	r2, [r3, #4]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	891b      	ldrh	r3, [r3, #8]
 8018d9a:	4619      	mov	r1, r3
 8018d9c:	4610      	mov	r0, r2
 8018d9e:	f7fb f88f 	bl	8013ec0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	683a      	ldr	r2, [r7, #0]
 8018da6:	601a      	str	r2, [r3, #0]
}
 8018da8:	bf00      	nop
 8018daa:	3714      	adds	r7, #20
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd90      	pop	{r4, r7, pc}
 8018db0:	080260d0 	.word	0x080260d0
 8018db4:	080263ac 	.word	0x080263ac
 8018db8:	08026138 	.word	0x08026138
 8018dbc:	24040788 	.word	0x24040788

08018dc0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018dc0:	b5b0      	push	{r4, r5, r7, lr}
 8018dc2:	b086      	sub	sp, #24
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	60f8      	str	r0, [r7, #12]
 8018dc8:	60b9      	str	r1, [r7, #8]
 8018dca:	607a      	str	r2, [r7, #4]
 8018dcc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018dce:	e03e      	b.n	8018e4e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018dd0:	68bb      	ldr	r3, [r7, #8]
 8018dd2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018dda:	697b      	ldr	r3, [r7, #20]
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7fb fab4 	bl	801434c <pbuf_clen>
 8018de4:	4603      	mov	r3, r0
 8018de6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018dee:	8a7a      	ldrh	r2, [r7, #18]
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d906      	bls.n	8018e02 <tcp_free_acked_segments+0x42>
 8018df4:	4b2a      	ldr	r3, [pc, #168]	; (8018ea0 <tcp_free_acked_segments+0xe0>)
 8018df6:	f240 4257 	movw	r2, #1111	; 0x457
 8018dfa:	492a      	ldr	r1, [pc, #168]	; (8018ea4 <tcp_free_acked_segments+0xe4>)
 8018dfc:	482a      	ldr	r0, [pc, #168]	; (8018ea8 <tcp_free_acked_segments+0xe8>)
 8018dfe:	f008 fa15 	bl	802122c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8018e08:	8a7b      	ldrh	r3, [r7, #18]
 8018e0a:	1ad3      	subs	r3, r2, r3
 8018e0c:	b29a      	uxth	r2, r3
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	891a      	ldrh	r2, [r3, #8]
 8018e18:	4b24      	ldr	r3, [pc, #144]	; (8018eac <tcp_free_acked_segments+0xec>)
 8018e1a:	881b      	ldrh	r3, [r3, #0]
 8018e1c:	4413      	add	r3, r2
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	4b22      	ldr	r3, [pc, #136]	; (8018eac <tcp_free_acked_segments+0xec>)
 8018e22:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018e24:	6978      	ldr	r0, [r7, #20]
 8018e26:	f7fe f90e 	bl	8017046 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d00c      	beq.n	8018e4e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d109      	bne.n	8018e4e <tcp_free_acked_segments+0x8e>
 8018e3a:	683b      	ldr	r3, [r7, #0]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d106      	bne.n	8018e4e <tcp_free_acked_segments+0x8e>
 8018e40:	4b17      	ldr	r3, [pc, #92]	; (8018ea0 <tcp_free_acked_segments+0xe0>)
 8018e42:	f240 4261 	movw	r2, #1121	; 0x461
 8018e46:	491a      	ldr	r1, [pc, #104]	; (8018eb0 <tcp_free_acked_segments+0xf0>)
 8018e48:	4817      	ldr	r0, [pc, #92]	; (8018ea8 <tcp_free_acked_segments+0xe8>)
 8018e4a:	f008 f9ef 	bl	802122c <iprintf>
  while (seg_list != NULL &&
 8018e4e:	68bb      	ldr	r3, [r7, #8]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d020      	beq.n	8018e96 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018e54:	68bb      	ldr	r3, [r7, #8]
 8018e56:	68db      	ldr	r3, [r3, #12]
 8018e58:	685b      	ldr	r3, [r3, #4]
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f7f7 f851 	bl	800ff02 <lwip_htonl>
 8018e60:	4604      	mov	r4, r0
 8018e62:	68bb      	ldr	r3, [r7, #8]
 8018e64:	891b      	ldrh	r3, [r3, #8]
 8018e66:	461d      	mov	r5, r3
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	68db      	ldr	r3, [r3, #12]
 8018e6c:	899b      	ldrh	r3, [r3, #12]
 8018e6e:	b29b      	uxth	r3, r3
 8018e70:	4618      	mov	r0, r3
 8018e72:	f7f7 f831 	bl	800fed8 <lwip_htons>
 8018e76:	4603      	mov	r3, r0
 8018e78:	b2db      	uxtb	r3, r3
 8018e7a:	f003 0303 	and.w	r3, r3, #3
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d001      	beq.n	8018e86 <tcp_free_acked_segments+0xc6>
 8018e82:	2301      	movs	r3, #1
 8018e84:	e000      	b.n	8018e88 <tcp_free_acked_segments+0xc8>
 8018e86:	2300      	movs	r3, #0
 8018e88:	442b      	add	r3, r5
 8018e8a:	18e2      	adds	r2, r4, r3
 8018e8c:	4b09      	ldr	r3, [pc, #36]	; (8018eb4 <tcp_free_acked_segments+0xf4>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	dd9c      	ble.n	8018dd0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018e96:	68bb      	ldr	r3, [r7, #8]
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3718      	adds	r7, #24
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8018ea0:	080260d0 	.word	0x080260d0
 8018ea4:	080263d4 	.word	0x080263d4
 8018ea8:	08026138 	.word	0x08026138
 8018eac:	24040790 	.word	0x24040790
 8018eb0:	080263fc 	.word	0x080263fc
 8018eb4:	2404078c 	.word	0x2404078c

08018eb8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018eb8:	b5b0      	push	{r4, r5, r7, lr}
 8018eba:	b094      	sub	sp, #80	; 0x50
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d106      	bne.n	8018ed8 <tcp_receive+0x20>
 8018eca:	4ba6      	ldr	r3, [pc, #664]	; (8019164 <tcp_receive+0x2ac>)
 8018ecc:	f240 427b 	movw	r2, #1147	; 0x47b
 8018ed0:	49a5      	ldr	r1, [pc, #660]	; (8019168 <tcp_receive+0x2b0>)
 8018ed2:	48a6      	ldr	r0, [pc, #664]	; (801916c <tcp_receive+0x2b4>)
 8018ed4:	f008 f9aa 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	7d1b      	ldrb	r3, [r3, #20]
 8018edc:	2b03      	cmp	r3, #3
 8018ede:	d806      	bhi.n	8018eee <tcp_receive+0x36>
 8018ee0:	4ba0      	ldr	r3, [pc, #640]	; (8019164 <tcp_receive+0x2ac>)
 8018ee2:	f240 427c 	movw	r2, #1148	; 0x47c
 8018ee6:	49a2      	ldr	r1, [pc, #648]	; (8019170 <tcp_receive+0x2b8>)
 8018ee8:	48a0      	ldr	r0, [pc, #640]	; (801916c <tcp_receive+0x2b4>)
 8018eea:	f008 f99f 	bl	802122c <iprintf>

  if (flags & TCP_ACK) {
 8018eee:	4ba1      	ldr	r3, [pc, #644]	; (8019174 <tcp_receive+0x2bc>)
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	f003 0310 	and.w	r3, r3, #16
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	f000 8263 	beq.w	80193c2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018f02:	461a      	mov	r2, r3
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f08:	4413      	add	r3, r2
 8018f0a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018f10:	4b99      	ldr	r3, [pc, #612]	; (8019178 <tcp_receive+0x2c0>)
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	1ad3      	subs	r3, r2, r3
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	db1b      	blt.n	8018f52 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018f1e:	4b96      	ldr	r3, [pc, #600]	; (8019178 <tcp_receive+0x2c0>)
 8018f20:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d106      	bne.n	8018f34 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018f2a:	4b94      	ldr	r3, [pc, #592]	; (801917c <tcp_receive+0x2c4>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	1ad3      	subs	r3, r2, r3
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	db0e      	blt.n	8018f52 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018f38:	4b90      	ldr	r3, [pc, #576]	; (801917c <tcp_receive+0x2c4>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d125      	bne.n	8018f8c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018f40:	4b8f      	ldr	r3, [pc, #572]	; (8019180 <tcp_receive+0x2c8>)
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	89db      	ldrh	r3, [r3, #14]
 8018f46:	b29a      	uxth	r2, r3
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018f4e:	429a      	cmp	r2, r3
 8018f50:	d91c      	bls.n	8018f8c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018f52:	4b8b      	ldr	r3, [pc, #556]	; (8019180 <tcp_receive+0x2c8>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	89db      	ldrh	r3, [r3, #14]
 8018f58:	b29a      	uxth	r2, r3
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d205      	bcs.n	8018f7c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018f7c:	4b7e      	ldr	r3, [pc, #504]	; (8019178 <tcp_receive+0x2c0>)
 8018f7e:	681a      	ldr	r2, [r3, #0]
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018f84:	4b7d      	ldr	r3, [pc, #500]	; (801917c <tcp_receive+0x2c4>)
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018f8c:	4b7b      	ldr	r3, [pc, #492]	; (801917c <tcp_receive+0x2c4>)
 8018f8e:	681a      	ldr	r2, [r3, #0]
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f94:	1ad3      	subs	r3, r2, r3
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	dc58      	bgt.n	801904c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018f9a:	4b7a      	ldr	r3, [pc, #488]	; (8019184 <tcp_receive+0x2cc>)
 8018f9c:	881b      	ldrh	r3, [r3, #0]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d14b      	bne.n	801903a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018fa6:	687a      	ldr	r2, [r7, #4]
 8018fa8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018fac:	4413      	add	r3, r2
 8018fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d142      	bne.n	801903a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	db3d      	blt.n	801903a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018fc2:	4b6e      	ldr	r3, [pc, #440]	; (801917c <tcp_receive+0x2c4>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	429a      	cmp	r2, r3
 8018fc8:	d137      	bne.n	801903a <tcp_receive+0x182>
              found_dupack = 1;
 8018fca:	2301      	movs	r3, #1
 8018fcc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018fd4:	2bff      	cmp	r3, #255	; 0xff
 8018fd6:	d007      	beq.n	8018fe8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018fde:	3301      	adds	r3, #1
 8018fe0:	b2da      	uxtb	r2, r3
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018fee:	2b03      	cmp	r3, #3
 8018ff0:	d91b      	bls.n	801902a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018ffc:	4413      	add	r3, r2
 8018ffe:	b29a      	uxth	r2, r3
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019006:	429a      	cmp	r2, r3
 8019008:	d30a      	bcc.n	8019020 <tcp_receive+0x168>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019014:	4413      	add	r3, r2
 8019016:	b29a      	uxth	r2, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801901e:	e004      	b.n	801902a <tcp_receive+0x172>
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019026:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019030:	2b02      	cmp	r3, #2
 8019032:	d902      	bls.n	801903a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f002 fb41 	bl	801b6bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801903a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801903c:	2b00      	cmp	r3, #0
 801903e:	f040 8160 	bne.w	8019302 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2200      	movs	r2, #0
 8019046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801904a:	e15a      	b.n	8019302 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801904c:	4b4b      	ldr	r3, [pc, #300]	; (801917c <tcp_receive+0x2c4>)
 801904e:	681a      	ldr	r2, [r3, #0]
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019054:	1ad3      	subs	r3, r2, r3
 8019056:	3b01      	subs	r3, #1
 8019058:	2b00      	cmp	r3, #0
 801905a:	f2c0 814d 	blt.w	80192f8 <tcp_receive+0x440>
 801905e:	4b47      	ldr	r3, [pc, #284]	; (801917c <tcp_receive+0x2c4>)
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019066:	1ad3      	subs	r3, r2, r3
 8019068:	2b00      	cmp	r3, #0
 801906a:	f300 8145 	bgt.w	80192f8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	8b5b      	ldrh	r3, [r3, #26]
 8019072:	f003 0304 	and.w	r3, r3, #4
 8019076:	2b00      	cmp	r3, #0
 8019078:	d010      	beq.n	801909c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	8b5b      	ldrh	r3, [r3, #26]
 801907e:	f023 0304 	bic.w	r3, r3, #4
 8019082:	b29a      	uxth	r2, r3
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2200      	movs	r2, #0
 8019098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	2200      	movs	r2, #0
 80190a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80190aa:	10db      	asrs	r3, r3, #3
 80190ac:	b21b      	sxth	r3, r3
 80190ae:	b29a      	uxth	r2, r3
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	4413      	add	r3, r2
 80190ba:	b29b      	uxth	r3, r3
 80190bc:	b21a      	sxth	r2, r3
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80190c4:	4b2d      	ldr	r3, [pc, #180]	; (801917c <tcp_receive+0x2c4>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	1ad3      	subs	r3, r2, r3
 80190d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	2200      	movs	r2, #0
 80190d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80190dc:	4b27      	ldr	r3, [pc, #156]	; (801917c <tcp_receive+0x2c4>)
 80190de:	681a      	ldr	r2, [r3, #0]
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	7d1b      	ldrb	r3, [r3, #20]
 80190e8:	2b03      	cmp	r3, #3
 80190ea:	f240 8096 	bls.w	801921a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80190fa:	429a      	cmp	r2, r3
 80190fc:	d244      	bcs.n	8019188 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	8b5b      	ldrh	r3, [r3, #26]
 8019102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019106:	2b00      	cmp	r3, #0
 8019108:	d001      	beq.n	801910e <tcp_receive+0x256>
 801910a:	2301      	movs	r3, #1
 801910c:	e000      	b.n	8019110 <tcp_receive+0x258>
 801910e:	2302      	movs	r3, #2
 8019110:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019114:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019118:	b29a      	uxth	r2, r3
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801911e:	fb12 f303 	smulbb	r3, r2, r3
 8019122:	b29b      	uxth	r3, r3
 8019124:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019126:	4293      	cmp	r3, r2
 8019128:	bf28      	it	cs
 801912a:	4613      	movcs	r3, r2
 801912c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019134:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019136:	4413      	add	r3, r2
 8019138:	b29a      	uxth	r2, r3
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019140:	429a      	cmp	r2, r3
 8019142:	d309      	bcc.n	8019158 <tcp_receive+0x2a0>
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801914a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801914c:	4413      	add	r3, r2
 801914e:	b29a      	uxth	r2, r3
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019156:	e060      	b.n	801921a <tcp_receive+0x362>
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801915e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019162:	e05a      	b.n	801921a <tcp_receive+0x362>
 8019164:	080260d0 	.word	0x080260d0
 8019168:	0802641c 	.word	0x0802641c
 801916c:	08026138 	.word	0x08026138
 8019170:	08026438 	.word	0x08026438
 8019174:	24040794 	.word	0x24040794
 8019178:	24040788 	.word	0x24040788
 801917c:	2404078c 	.word	0x2404078c
 8019180:	24040778 	.word	0x24040778
 8019184:	24040792 	.word	0x24040792
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801918e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019190:	4413      	add	r3, r2
 8019192:	b29a      	uxth	r2, r3
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801919a:	429a      	cmp	r2, r3
 801919c:	d309      	bcc.n	80191b2 <tcp_receive+0x2fa>
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80191a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80191a6:	4413      	add	r3, r2
 80191a8:	b29a      	uxth	r2, r3
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80191b0:	e004      	b.n	80191bc <tcp_receive+0x304>
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d326      	bcc.n	801921a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80191d8:	1ad3      	subs	r3, r2, r3
 80191da:	b29a      	uxth	r2, r3
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191ec:	4413      	add	r3, r2
 80191ee:	b29a      	uxth	r2, r3
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80191f6:	429a      	cmp	r2, r3
 80191f8:	d30a      	bcc.n	8019210 <tcp_receive+0x358>
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019204:	4413      	add	r3, r2
 8019206:	b29a      	uxth	r2, r3
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801920e:	e004      	b.n	801921a <tcp_receive+0x362>
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019222:	4a98      	ldr	r2, [pc, #608]	; (8019484 <tcp_receive+0x5cc>)
 8019224:	6878      	ldr	r0, [r7, #4]
 8019226:	f7ff fdcb 	bl	8018dc0 <tcp_free_acked_segments>
 801922a:	4602      	mov	r2, r0
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019238:	4a93      	ldr	r2, [pc, #588]	; (8019488 <tcp_receive+0x5d0>)
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f7ff fdc0 	bl	8018dc0 <tcp_free_acked_segments>
 8019240:	4602      	mov	r2, r0
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801924a:	2b00      	cmp	r3, #0
 801924c:	d104      	bne.n	8019258 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019254:	861a      	strh	r2, [r3, #48]	; 0x30
 8019256:	e002      	b.n	801925e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2200      	movs	r2, #0
 801925c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2200      	movs	r2, #0
 8019262:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019268:	2b00      	cmp	r3, #0
 801926a:	d103      	bne.n	8019274 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	2200      	movs	r2, #0
 8019270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801927a:	4b84      	ldr	r3, [pc, #528]	; (801948c <tcp_receive+0x5d4>)
 801927c:	881b      	ldrh	r3, [r3, #0]
 801927e:	4413      	add	r3, r2
 8019280:	b29a      	uxth	r2, r3
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	8b5b      	ldrh	r3, [r3, #26]
 801928c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019290:	2b00      	cmp	r3, #0
 8019292:	d035      	beq.n	8019300 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019298:	2b00      	cmp	r3, #0
 801929a:	d118      	bne.n	80192ce <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d00c      	beq.n	80192be <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192ac:	68db      	ldr	r3, [r3, #12]
 80192ae:	685b      	ldr	r3, [r3, #4]
 80192b0:	4618      	mov	r0, r3
 80192b2:	f7f6 fe26 	bl	800ff02 <lwip_htonl>
 80192b6:	4603      	mov	r3, r0
 80192b8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	dc20      	bgt.n	8019300 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	8b5b      	ldrh	r3, [r3, #26]
 80192c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80192c6:	b29a      	uxth	r2, r3
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80192cc:	e018      	b.n	8019300 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80192d6:	68db      	ldr	r3, [r3, #12]
 80192d8:	685b      	ldr	r3, [r3, #4]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7f6 fe11 	bl	800ff02 <lwip_htonl>
 80192e0:	4603      	mov	r3, r0
 80192e2:	1ae3      	subs	r3, r4, r3
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	dc0b      	bgt.n	8019300 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	8b5b      	ldrh	r3, [r3, #26]
 80192ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80192f0:	b29a      	uxth	r2, r3
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80192f6:	e003      	b.n	8019300 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80192f8:	6878      	ldr	r0, [r7, #4]
 80192fa:	f002 fbcd 	bl	801ba98 <tcp_send_empty_ack>
 80192fe:	e000      	b.n	8019302 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019300:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019306:	2b00      	cmp	r3, #0
 8019308:	d05b      	beq.n	80193c2 <tcp_receive+0x50a>
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801930e:	4b60      	ldr	r3, [pc, #384]	; (8019490 <tcp_receive+0x5d8>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	1ad3      	subs	r3, r2, r3
 8019314:	2b00      	cmp	r3, #0
 8019316:	da54      	bge.n	80193c2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019318:	4b5e      	ldr	r3, [pc, #376]	; (8019494 <tcp_receive+0x5dc>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	b29a      	uxth	r2, r3
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019322:	b29b      	uxth	r3, r3
 8019324:	1ad3      	subs	r3, r2, r3
 8019326:	b29b      	uxth	r3, r3
 8019328:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801932c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019336:	10db      	asrs	r3, r3, #3
 8019338:	b21b      	sxth	r3, r3
 801933a:	b29b      	uxth	r3, r3
 801933c:	1ad3      	subs	r3, r2, r3
 801933e:	b29b      	uxth	r3, r3
 8019340:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801934a:	b29a      	uxth	r2, r3
 801934c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019350:	4413      	add	r3, r2
 8019352:	b29b      	uxth	r3, r3
 8019354:	b21a      	sxth	r2, r3
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801935a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801935e:	2b00      	cmp	r3, #0
 8019360:	da05      	bge.n	801936e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019366:	425b      	negs	r3, r3
 8019368:	b29b      	uxth	r3, r3
 801936a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801936e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019378:	109b      	asrs	r3, r3, #2
 801937a:	b21b      	sxth	r3, r3
 801937c:	b29b      	uxth	r3, r3
 801937e:	1ad3      	subs	r3, r2, r3
 8019380:	b29b      	uxth	r3, r3
 8019382:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801938c:	b29a      	uxth	r2, r3
 801938e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019392:	4413      	add	r3, r2
 8019394:	b29b      	uxth	r3, r3
 8019396:	b21a      	sxth	r2, r3
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80193a2:	10db      	asrs	r3, r3, #3
 80193a4:	b21b      	sxth	r3, r3
 80193a6:	b29a      	uxth	r2, r3
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	4413      	add	r3, r2
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	b21a      	sxth	r2, r3
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2200      	movs	r2, #0
 80193c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80193c2:	4b35      	ldr	r3, [pc, #212]	; (8019498 <tcp_receive+0x5e0>)
 80193c4:	881b      	ldrh	r3, [r3, #0]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	f000 84e1 	beq.w	8019d8e <tcp_receive+0xed6>
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	7d1b      	ldrb	r3, [r3, #20]
 80193d0:	2b06      	cmp	r3, #6
 80193d2:	f200 84dc 	bhi.w	8019d8e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80193da:	4b30      	ldr	r3, [pc, #192]	; (801949c <tcp_receive+0x5e4>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	1ad3      	subs	r3, r2, r3
 80193e0:	3b01      	subs	r3, #1
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	f2c0 808e 	blt.w	8019504 <tcp_receive+0x64c>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80193ec:	4b2a      	ldr	r3, [pc, #168]	; (8019498 <tcp_receive+0x5e0>)
 80193ee:	881b      	ldrh	r3, [r3, #0]
 80193f0:	4619      	mov	r1, r3
 80193f2:	4b2a      	ldr	r3, [pc, #168]	; (801949c <tcp_receive+0x5e4>)
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	440b      	add	r3, r1
 80193f8:	1ad3      	subs	r3, r2, r3
 80193fa:	3301      	adds	r3, #1
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	f300 8081 	bgt.w	8019504 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019402:	4b27      	ldr	r3, [pc, #156]	; (80194a0 <tcp_receive+0x5e8>)
 8019404:	685b      	ldr	r3, [r3, #4]
 8019406:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801940c:	4b23      	ldr	r3, [pc, #140]	; (801949c <tcp_receive+0x5e4>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	1ad3      	subs	r3, r2, r3
 8019412:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019414:	4b22      	ldr	r3, [pc, #136]	; (80194a0 <tcp_receive+0x5e8>)
 8019416:	685b      	ldr	r3, [r3, #4]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d106      	bne.n	801942a <tcp_receive+0x572>
 801941c:	4b21      	ldr	r3, [pc, #132]	; (80194a4 <tcp_receive+0x5ec>)
 801941e:	f240 5294 	movw	r2, #1428	; 0x594
 8019422:	4921      	ldr	r1, [pc, #132]	; (80194a8 <tcp_receive+0x5f0>)
 8019424:	4821      	ldr	r0, [pc, #132]	; (80194ac <tcp_receive+0x5f4>)
 8019426:	f007 ff01 	bl	802122c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801942c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019430:	4293      	cmp	r3, r2
 8019432:	d906      	bls.n	8019442 <tcp_receive+0x58a>
 8019434:	4b1b      	ldr	r3, [pc, #108]	; (80194a4 <tcp_receive+0x5ec>)
 8019436:	f240 5295 	movw	r2, #1429	; 0x595
 801943a:	491d      	ldr	r1, [pc, #116]	; (80194b0 <tcp_receive+0x5f8>)
 801943c:	481b      	ldr	r0, [pc, #108]	; (80194ac <tcp_receive+0x5f4>)
 801943e:	f007 fef5 	bl	802122c <iprintf>
      off = (u16_t)off32;
 8019442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019448:	4b15      	ldr	r3, [pc, #84]	; (80194a0 <tcp_receive+0x5e8>)
 801944a:	685b      	ldr	r3, [r3, #4]
 801944c:	891b      	ldrh	r3, [r3, #8]
 801944e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019452:	429a      	cmp	r2, r3
 8019454:	d906      	bls.n	8019464 <tcp_receive+0x5ac>
 8019456:	4b13      	ldr	r3, [pc, #76]	; (80194a4 <tcp_receive+0x5ec>)
 8019458:	f240 5297 	movw	r2, #1431	; 0x597
 801945c:	4915      	ldr	r1, [pc, #84]	; (80194b4 <tcp_receive+0x5fc>)
 801945e:	4813      	ldr	r0, [pc, #76]	; (80194ac <tcp_receive+0x5f4>)
 8019460:	f007 fee4 	bl	802122c <iprintf>
      inseg.len -= off;
 8019464:	4b0e      	ldr	r3, [pc, #56]	; (80194a0 <tcp_receive+0x5e8>)
 8019466:	891a      	ldrh	r2, [r3, #8]
 8019468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801946c:	1ad3      	subs	r3, r2, r3
 801946e:	b29a      	uxth	r2, r3
 8019470:	4b0b      	ldr	r3, [pc, #44]	; (80194a0 <tcp_receive+0x5e8>)
 8019472:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019474:	4b0a      	ldr	r3, [pc, #40]	; (80194a0 <tcp_receive+0x5e8>)
 8019476:	685b      	ldr	r3, [r3, #4]
 8019478:	891a      	ldrh	r2, [r3, #8]
 801947a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801947e:	1ad3      	subs	r3, r2, r3
 8019480:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019482:	e029      	b.n	80194d8 <tcp_receive+0x620>
 8019484:	08026454 	.word	0x08026454
 8019488:	0802645c 	.word	0x0802645c
 801948c:	24040790 	.word	0x24040790
 8019490:	2404078c 	.word	0x2404078c
 8019494:	24048e90 	.word	0x24048e90
 8019498:	24040792 	.word	0x24040792
 801949c:	24040788 	.word	0x24040788
 80194a0:	24040768 	.word	0x24040768
 80194a4:	080260d0 	.word	0x080260d0
 80194a8:	08026464 	.word	0x08026464
 80194ac:	08026138 	.word	0x08026138
 80194b0:	08026474 	.word	0x08026474
 80194b4:	08026484 	.word	0x08026484
        off -= p->len;
 80194b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194ba:	895b      	ldrh	r3, [r3, #10]
 80194bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80194c0:	1ad3      	subs	r3, r2, r3
 80194c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80194c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80194ca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80194cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194ce:	2200      	movs	r2, #0
 80194d0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80194d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80194d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194da:	895b      	ldrh	r3, [r3, #10]
 80194dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80194e0:	429a      	cmp	r2, r3
 80194e2:	d8e9      	bhi.n	80194b8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80194e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194e8:	4619      	mov	r1, r3
 80194ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80194ec:	f7fa fde8 	bl	80140c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f4:	4a91      	ldr	r2, [pc, #580]	; (801973c <tcp_receive+0x884>)
 80194f6:	6013      	str	r3, [r2, #0]
 80194f8:	4b91      	ldr	r3, [pc, #580]	; (8019740 <tcp_receive+0x888>)
 80194fa:	68db      	ldr	r3, [r3, #12]
 80194fc:	4a8f      	ldr	r2, [pc, #572]	; (801973c <tcp_receive+0x884>)
 80194fe:	6812      	ldr	r2, [r2, #0]
 8019500:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019502:	e00d      	b.n	8019520 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019504:	4b8d      	ldr	r3, [pc, #564]	; (801973c <tcp_receive+0x884>)
 8019506:	681a      	ldr	r2, [r3, #0]
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801950c:	1ad3      	subs	r3, r2, r3
 801950e:	2b00      	cmp	r3, #0
 8019510:	da06      	bge.n	8019520 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	8b5b      	ldrh	r3, [r3, #26]
 8019516:	f043 0302 	orr.w	r3, r3, #2
 801951a:	b29a      	uxth	r2, r3
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019520:	4b86      	ldr	r3, [pc, #536]	; (801973c <tcp_receive+0x884>)
 8019522:	681a      	ldr	r2, [r3, #0]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019528:	1ad3      	subs	r3, r2, r3
 801952a:	2b00      	cmp	r3, #0
 801952c:	f2c0 842a 	blt.w	8019d84 <tcp_receive+0xecc>
 8019530:	4b82      	ldr	r3, [pc, #520]	; (801973c <tcp_receive+0x884>)
 8019532:	681a      	ldr	r2, [r3, #0]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019538:	6879      	ldr	r1, [r7, #4]
 801953a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801953c:	440b      	add	r3, r1
 801953e:	1ad3      	subs	r3, r2, r3
 8019540:	3301      	adds	r3, #1
 8019542:	2b00      	cmp	r3, #0
 8019544:	f300 841e 	bgt.w	8019d84 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801954c:	4b7b      	ldr	r3, [pc, #492]	; (801973c <tcp_receive+0x884>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	429a      	cmp	r2, r3
 8019552:	f040 829a 	bne.w	8019a8a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019556:	4b7a      	ldr	r3, [pc, #488]	; (8019740 <tcp_receive+0x888>)
 8019558:	891c      	ldrh	r4, [r3, #8]
 801955a:	4b79      	ldr	r3, [pc, #484]	; (8019740 <tcp_receive+0x888>)
 801955c:	68db      	ldr	r3, [r3, #12]
 801955e:	899b      	ldrh	r3, [r3, #12]
 8019560:	b29b      	uxth	r3, r3
 8019562:	4618      	mov	r0, r3
 8019564:	f7f6 fcb8 	bl	800fed8 <lwip_htons>
 8019568:	4603      	mov	r3, r0
 801956a:	b2db      	uxtb	r3, r3
 801956c:	f003 0303 	and.w	r3, r3, #3
 8019570:	2b00      	cmp	r3, #0
 8019572:	d001      	beq.n	8019578 <tcp_receive+0x6c0>
 8019574:	2301      	movs	r3, #1
 8019576:	e000      	b.n	801957a <tcp_receive+0x6c2>
 8019578:	2300      	movs	r3, #0
 801957a:	4423      	add	r3, r4
 801957c:	b29a      	uxth	r2, r3
 801957e:	4b71      	ldr	r3, [pc, #452]	; (8019744 <tcp_receive+0x88c>)
 8019580:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019586:	4b6f      	ldr	r3, [pc, #444]	; (8019744 <tcp_receive+0x88c>)
 8019588:	881b      	ldrh	r3, [r3, #0]
 801958a:	429a      	cmp	r2, r3
 801958c:	d275      	bcs.n	801967a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801958e:	4b6c      	ldr	r3, [pc, #432]	; (8019740 <tcp_receive+0x888>)
 8019590:	68db      	ldr	r3, [r3, #12]
 8019592:	899b      	ldrh	r3, [r3, #12]
 8019594:	b29b      	uxth	r3, r3
 8019596:	4618      	mov	r0, r3
 8019598:	f7f6 fc9e 	bl	800fed8 <lwip_htons>
 801959c:	4603      	mov	r3, r0
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	f003 0301 	and.w	r3, r3, #1
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d01f      	beq.n	80195e8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80195a8:	4b65      	ldr	r3, [pc, #404]	; (8019740 <tcp_receive+0x888>)
 80195aa:	68db      	ldr	r3, [r3, #12]
 80195ac:	899b      	ldrh	r3, [r3, #12]
 80195ae:	b29b      	uxth	r3, r3
 80195b0:	b21b      	sxth	r3, r3
 80195b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80195b6:	b21c      	sxth	r4, r3
 80195b8:	4b61      	ldr	r3, [pc, #388]	; (8019740 <tcp_receive+0x888>)
 80195ba:	68db      	ldr	r3, [r3, #12]
 80195bc:	899b      	ldrh	r3, [r3, #12]
 80195be:	b29b      	uxth	r3, r3
 80195c0:	4618      	mov	r0, r3
 80195c2:	f7f6 fc89 	bl	800fed8 <lwip_htons>
 80195c6:	4603      	mov	r3, r0
 80195c8:	b2db      	uxtb	r3, r3
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7f6 fc80 	bl	800fed8 <lwip_htons>
 80195d8:	4603      	mov	r3, r0
 80195da:	b21b      	sxth	r3, r3
 80195dc:	4323      	orrs	r3, r4
 80195de:	b21a      	sxth	r2, r3
 80195e0:	4b57      	ldr	r3, [pc, #348]	; (8019740 <tcp_receive+0x888>)
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	b292      	uxth	r2, r2
 80195e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80195ec:	4b54      	ldr	r3, [pc, #336]	; (8019740 <tcp_receive+0x888>)
 80195ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80195f0:	4b53      	ldr	r3, [pc, #332]	; (8019740 <tcp_receive+0x888>)
 80195f2:	68db      	ldr	r3, [r3, #12]
 80195f4:	899b      	ldrh	r3, [r3, #12]
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	4618      	mov	r0, r3
 80195fa:	f7f6 fc6d 	bl	800fed8 <lwip_htons>
 80195fe:	4603      	mov	r3, r0
 8019600:	b2db      	uxtb	r3, r3
 8019602:	f003 0302 	and.w	r3, r3, #2
 8019606:	2b00      	cmp	r3, #0
 8019608:	d005      	beq.n	8019616 <tcp_receive+0x75e>
            inseg.len -= 1;
 801960a:	4b4d      	ldr	r3, [pc, #308]	; (8019740 <tcp_receive+0x888>)
 801960c:	891b      	ldrh	r3, [r3, #8]
 801960e:	3b01      	subs	r3, #1
 8019610:	b29a      	uxth	r2, r3
 8019612:	4b4b      	ldr	r3, [pc, #300]	; (8019740 <tcp_receive+0x888>)
 8019614:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019616:	4b4a      	ldr	r3, [pc, #296]	; (8019740 <tcp_receive+0x888>)
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	4a49      	ldr	r2, [pc, #292]	; (8019740 <tcp_receive+0x888>)
 801961c:	8912      	ldrh	r2, [r2, #8]
 801961e:	4611      	mov	r1, r2
 8019620:	4618      	mov	r0, r3
 8019622:	f7fa fc4d 	bl	8013ec0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019626:	4b46      	ldr	r3, [pc, #280]	; (8019740 <tcp_receive+0x888>)
 8019628:	891c      	ldrh	r4, [r3, #8]
 801962a:	4b45      	ldr	r3, [pc, #276]	; (8019740 <tcp_receive+0x888>)
 801962c:	68db      	ldr	r3, [r3, #12]
 801962e:	899b      	ldrh	r3, [r3, #12]
 8019630:	b29b      	uxth	r3, r3
 8019632:	4618      	mov	r0, r3
 8019634:	f7f6 fc50 	bl	800fed8 <lwip_htons>
 8019638:	4603      	mov	r3, r0
 801963a:	b2db      	uxtb	r3, r3
 801963c:	f003 0303 	and.w	r3, r3, #3
 8019640:	2b00      	cmp	r3, #0
 8019642:	d001      	beq.n	8019648 <tcp_receive+0x790>
 8019644:	2301      	movs	r3, #1
 8019646:	e000      	b.n	801964a <tcp_receive+0x792>
 8019648:	2300      	movs	r3, #0
 801964a:	4423      	add	r3, r4
 801964c:	b29a      	uxth	r2, r3
 801964e:	4b3d      	ldr	r3, [pc, #244]	; (8019744 <tcp_receive+0x88c>)
 8019650:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019652:	4b3c      	ldr	r3, [pc, #240]	; (8019744 <tcp_receive+0x88c>)
 8019654:	881b      	ldrh	r3, [r3, #0]
 8019656:	461a      	mov	r2, r3
 8019658:	4b38      	ldr	r3, [pc, #224]	; (801973c <tcp_receive+0x884>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	441a      	add	r2, r3
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019662:	6879      	ldr	r1, [r7, #4]
 8019664:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019666:	440b      	add	r3, r1
 8019668:	429a      	cmp	r2, r3
 801966a:	d006      	beq.n	801967a <tcp_receive+0x7c2>
 801966c:	4b36      	ldr	r3, [pc, #216]	; (8019748 <tcp_receive+0x890>)
 801966e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019672:	4936      	ldr	r1, [pc, #216]	; (801974c <tcp_receive+0x894>)
 8019674:	4836      	ldr	r0, [pc, #216]	; (8019750 <tcp_receive+0x898>)
 8019676:	f007 fdd9 	bl	802122c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801967e:	2b00      	cmp	r3, #0
 8019680:	f000 80e7 	beq.w	8019852 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019684:	4b2e      	ldr	r3, [pc, #184]	; (8019740 <tcp_receive+0x888>)
 8019686:	68db      	ldr	r3, [r3, #12]
 8019688:	899b      	ldrh	r3, [r3, #12]
 801968a:	b29b      	uxth	r3, r3
 801968c:	4618      	mov	r0, r3
 801968e:	f7f6 fc23 	bl	800fed8 <lwip_htons>
 8019692:	4603      	mov	r3, r0
 8019694:	b2db      	uxtb	r3, r3
 8019696:	f003 0301 	and.w	r3, r3, #1
 801969a:	2b00      	cmp	r3, #0
 801969c:	d010      	beq.n	80196c0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801969e:	e00a      	b.n	80196b6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196aa:	681a      	ldr	r2, [r3, #0]
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80196b0:	68f8      	ldr	r0, [r7, #12]
 80196b2:	f7fd fcc8 	bl	8017046 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d1f0      	bne.n	80196a0 <tcp_receive+0x7e8>
 80196be:	e0c8      	b.n	8019852 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80196c6:	e052      	b.n	801976e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80196c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ca:	68db      	ldr	r3, [r3, #12]
 80196cc:	899b      	ldrh	r3, [r3, #12]
 80196ce:	b29b      	uxth	r3, r3
 80196d0:	4618      	mov	r0, r3
 80196d2:	f7f6 fc01 	bl	800fed8 <lwip_htons>
 80196d6:	4603      	mov	r3, r0
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	f003 0301 	and.w	r3, r3, #1
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d03d      	beq.n	801975e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80196e2:	4b17      	ldr	r3, [pc, #92]	; (8019740 <tcp_receive+0x888>)
 80196e4:	68db      	ldr	r3, [r3, #12]
 80196e6:	899b      	ldrh	r3, [r3, #12]
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7f6 fbf4 	bl	800fed8 <lwip_htons>
 80196f0:	4603      	mov	r3, r0
 80196f2:	b2db      	uxtb	r3, r3
 80196f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d130      	bne.n	801975e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80196fc:	4b10      	ldr	r3, [pc, #64]	; (8019740 <tcp_receive+0x888>)
 80196fe:	68db      	ldr	r3, [r3, #12]
 8019700:	899b      	ldrh	r3, [r3, #12]
 8019702:	b29c      	uxth	r4, r3
 8019704:	2001      	movs	r0, #1
 8019706:	f7f6 fbe7 	bl	800fed8 <lwip_htons>
 801970a:	4603      	mov	r3, r0
 801970c:	461a      	mov	r2, r3
 801970e:	4b0c      	ldr	r3, [pc, #48]	; (8019740 <tcp_receive+0x888>)
 8019710:	68db      	ldr	r3, [r3, #12]
 8019712:	4322      	orrs	r2, r4
 8019714:	b292      	uxth	r2, r2
 8019716:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019718:	4b09      	ldr	r3, [pc, #36]	; (8019740 <tcp_receive+0x888>)
 801971a:	891c      	ldrh	r4, [r3, #8]
 801971c:	4b08      	ldr	r3, [pc, #32]	; (8019740 <tcp_receive+0x888>)
 801971e:	68db      	ldr	r3, [r3, #12]
 8019720:	899b      	ldrh	r3, [r3, #12]
 8019722:	b29b      	uxth	r3, r3
 8019724:	4618      	mov	r0, r3
 8019726:	f7f6 fbd7 	bl	800fed8 <lwip_htons>
 801972a:	4603      	mov	r3, r0
 801972c:	b2db      	uxtb	r3, r3
 801972e:	f003 0303 	and.w	r3, r3, #3
 8019732:	2b00      	cmp	r3, #0
 8019734:	d00e      	beq.n	8019754 <tcp_receive+0x89c>
 8019736:	2301      	movs	r3, #1
 8019738:	e00d      	b.n	8019756 <tcp_receive+0x89e>
 801973a:	bf00      	nop
 801973c:	24040788 	.word	0x24040788
 8019740:	24040768 	.word	0x24040768
 8019744:	24040792 	.word	0x24040792
 8019748:	080260d0 	.word	0x080260d0
 801974c:	08026494 	.word	0x08026494
 8019750:	08026138 	.word	0x08026138
 8019754:	2300      	movs	r3, #0
 8019756:	4423      	add	r3, r4
 8019758:	b29a      	uxth	r2, r3
 801975a:	4b98      	ldr	r3, [pc, #608]	; (80199bc <tcp_receive+0xb04>)
 801975c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019760:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019768:	6938      	ldr	r0, [r7, #16]
 801976a:	f7fd fc6c 	bl	8017046 <tcp_seg_free>
            while (next &&
 801976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019770:	2b00      	cmp	r3, #0
 8019772:	d00e      	beq.n	8019792 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019774:	4b91      	ldr	r3, [pc, #580]	; (80199bc <tcp_receive+0xb04>)
 8019776:	881b      	ldrh	r3, [r3, #0]
 8019778:	461a      	mov	r2, r3
 801977a:	4b91      	ldr	r3, [pc, #580]	; (80199c0 <tcp_receive+0xb08>)
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	441a      	add	r2, r3
 8019780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019782:	68db      	ldr	r3, [r3, #12]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019788:	8909      	ldrh	r1, [r1, #8]
 801978a:	440b      	add	r3, r1
 801978c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801978e:	2b00      	cmp	r3, #0
 8019790:	da9a      	bge.n	80196c8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019794:	2b00      	cmp	r3, #0
 8019796:	d059      	beq.n	801984c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019798:	4b88      	ldr	r3, [pc, #544]	; (80199bc <tcp_receive+0xb04>)
 801979a:	881b      	ldrh	r3, [r3, #0]
 801979c:	461a      	mov	r2, r3
 801979e:	4b88      	ldr	r3, [pc, #544]	; (80199c0 <tcp_receive+0xb08>)
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	441a      	add	r2, r3
 80197a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197a6:	68db      	ldr	r3, [r3, #12]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	dd4d      	ble.n	801984c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80197b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197b2:	68db      	ldr	r3, [r3, #12]
 80197b4:	685b      	ldr	r3, [r3, #4]
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	4b81      	ldr	r3, [pc, #516]	; (80199c0 <tcp_receive+0xb08>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	b29b      	uxth	r3, r3
 80197be:	1ad3      	subs	r3, r2, r3
 80197c0:	b29a      	uxth	r2, r3
 80197c2:	4b80      	ldr	r3, [pc, #512]	; (80199c4 <tcp_receive+0xb0c>)
 80197c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80197c6:	4b7f      	ldr	r3, [pc, #508]	; (80199c4 <tcp_receive+0xb0c>)
 80197c8:	68db      	ldr	r3, [r3, #12]
 80197ca:	899b      	ldrh	r3, [r3, #12]
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	4618      	mov	r0, r3
 80197d0:	f7f6 fb82 	bl	800fed8 <lwip_htons>
 80197d4:	4603      	mov	r3, r0
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	f003 0302 	and.w	r3, r3, #2
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d005      	beq.n	80197ec <tcp_receive+0x934>
                inseg.len -= 1;
 80197e0:	4b78      	ldr	r3, [pc, #480]	; (80199c4 <tcp_receive+0xb0c>)
 80197e2:	891b      	ldrh	r3, [r3, #8]
 80197e4:	3b01      	subs	r3, #1
 80197e6:	b29a      	uxth	r2, r3
 80197e8:	4b76      	ldr	r3, [pc, #472]	; (80199c4 <tcp_receive+0xb0c>)
 80197ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80197ec:	4b75      	ldr	r3, [pc, #468]	; (80199c4 <tcp_receive+0xb0c>)
 80197ee:	685b      	ldr	r3, [r3, #4]
 80197f0:	4a74      	ldr	r2, [pc, #464]	; (80199c4 <tcp_receive+0xb0c>)
 80197f2:	8912      	ldrh	r2, [r2, #8]
 80197f4:	4611      	mov	r1, r2
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7fa fb62 	bl	8013ec0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80197fc:	4b71      	ldr	r3, [pc, #452]	; (80199c4 <tcp_receive+0xb0c>)
 80197fe:	891c      	ldrh	r4, [r3, #8]
 8019800:	4b70      	ldr	r3, [pc, #448]	; (80199c4 <tcp_receive+0xb0c>)
 8019802:	68db      	ldr	r3, [r3, #12]
 8019804:	899b      	ldrh	r3, [r3, #12]
 8019806:	b29b      	uxth	r3, r3
 8019808:	4618      	mov	r0, r3
 801980a:	f7f6 fb65 	bl	800fed8 <lwip_htons>
 801980e:	4603      	mov	r3, r0
 8019810:	b2db      	uxtb	r3, r3
 8019812:	f003 0303 	and.w	r3, r3, #3
 8019816:	2b00      	cmp	r3, #0
 8019818:	d001      	beq.n	801981e <tcp_receive+0x966>
 801981a:	2301      	movs	r3, #1
 801981c:	e000      	b.n	8019820 <tcp_receive+0x968>
 801981e:	2300      	movs	r3, #0
 8019820:	4423      	add	r3, r4
 8019822:	b29a      	uxth	r2, r3
 8019824:	4b65      	ldr	r3, [pc, #404]	; (80199bc <tcp_receive+0xb04>)
 8019826:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019828:	4b64      	ldr	r3, [pc, #400]	; (80199bc <tcp_receive+0xb04>)
 801982a:	881b      	ldrh	r3, [r3, #0]
 801982c:	461a      	mov	r2, r3
 801982e:	4b64      	ldr	r3, [pc, #400]	; (80199c0 <tcp_receive+0xb08>)
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	441a      	add	r2, r3
 8019834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	429a      	cmp	r2, r3
 801983c:	d006      	beq.n	801984c <tcp_receive+0x994>
 801983e:	4b62      	ldr	r3, [pc, #392]	; (80199c8 <tcp_receive+0xb10>)
 8019840:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019844:	4961      	ldr	r1, [pc, #388]	; (80199cc <tcp_receive+0xb14>)
 8019846:	4862      	ldr	r0, [pc, #392]	; (80199d0 <tcp_receive+0xb18>)
 8019848:	f007 fcf0 	bl	802122c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019850:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019852:	4b5a      	ldr	r3, [pc, #360]	; (80199bc <tcp_receive+0xb04>)
 8019854:	881b      	ldrh	r3, [r3, #0]
 8019856:	461a      	mov	r2, r3
 8019858:	4b59      	ldr	r3, [pc, #356]	; (80199c0 <tcp_receive+0xb08>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	441a      	add	r2, r3
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019866:	4b55      	ldr	r3, [pc, #340]	; (80199bc <tcp_receive+0xb04>)
 8019868:	881b      	ldrh	r3, [r3, #0]
 801986a:	429a      	cmp	r2, r3
 801986c:	d206      	bcs.n	801987c <tcp_receive+0x9c4>
 801986e:	4b56      	ldr	r3, [pc, #344]	; (80199c8 <tcp_receive+0xb10>)
 8019870:	f240 6207 	movw	r2, #1543	; 0x607
 8019874:	4957      	ldr	r1, [pc, #348]	; (80199d4 <tcp_receive+0xb1c>)
 8019876:	4856      	ldr	r0, [pc, #344]	; (80199d0 <tcp_receive+0xb18>)
 8019878:	f007 fcd8 	bl	802122c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019880:	4b4e      	ldr	r3, [pc, #312]	; (80199bc <tcp_receive+0xb04>)
 8019882:	881b      	ldrh	r3, [r3, #0]
 8019884:	1ad3      	subs	r3, r2, r3
 8019886:	b29a      	uxth	r2, r3
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f7fc fd9d 	bl	80163cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019892:	4b4c      	ldr	r3, [pc, #304]	; (80199c4 <tcp_receive+0xb0c>)
 8019894:	685b      	ldr	r3, [r3, #4]
 8019896:	891b      	ldrh	r3, [r3, #8]
 8019898:	2b00      	cmp	r3, #0
 801989a:	d006      	beq.n	80198aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801989c:	4b49      	ldr	r3, [pc, #292]	; (80199c4 <tcp_receive+0xb0c>)
 801989e:	685b      	ldr	r3, [r3, #4]
 80198a0:	4a4d      	ldr	r2, [pc, #308]	; (80199d8 <tcp_receive+0xb20>)
 80198a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80198a4:	4b47      	ldr	r3, [pc, #284]	; (80199c4 <tcp_receive+0xb0c>)
 80198a6:	2200      	movs	r2, #0
 80198a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80198aa:	4b46      	ldr	r3, [pc, #280]	; (80199c4 <tcp_receive+0xb0c>)
 80198ac:	68db      	ldr	r3, [r3, #12]
 80198ae:	899b      	ldrh	r3, [r3, #12]
 80198b0:	b29b      	uxth	r3, r3
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7f6 fb10 	bl	800fed8 <lwip_htons>
 80198b8:	4603      	mov	r3, r0
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	f003 0301 	and.w	r3, r3, #1
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	f000 80b8 	beq.w	8019a36 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80198c6:	4b45      	ldr	r3, [pc, #276]	; (80199dc <tcp_receive+0xb24>)
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	f043 0320 	orr.w	r3, r3, #32
 80198ce:	b2da      	uxtb	r2, r3
 80198d0:	4b42      	ldr	r3, [pc, #264]	; (80199dc <tcp_receive+0xb24>)
 80198d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80198d4:	e0af      	b.n	8019a36 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80198da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80198e0:	68db      	ldr	r3, [r3, #12]
 80198e2:	685b      	ldr	r3, [r3, #4]
 80198e4:	4a36      	ldr	r2, [pc, #216]	; (80199c0 <tcp_receive+0xb08>)
 80198e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	891b      	ldrh	r3, [r3, #8]
 80198ec:	461c      	mov	r4, r3
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	68db      	ldr	r3, [r3, #12]
 80198f2:	899b      	ldrh	r3, [r3, #12]
 80198f4:	b29b      	uxth	r3, r3
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7f6 faee 	bl	800fed8 <lwip_htons>
 80198fc:	4603      	mov	r3, r0
 80198fe:	b2db      	uxtb	r3, r3
 8019900:	f003 0303 	and.w	r3, r3, #3
 8019904:	2b00      	cmp	r3, #0
 8019906:	d001      	beq.n	801990c <tcp_receive+0xa54>
 8019908:	2301      	movs	r3, #1
 801990a:	e000      	b.n	801990e <tcp_receive+0xa56>
 801990c:	2300      	movs	r3, #0
 801990e:	191a      	adds	r2, r3, r4
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019914:	441a      	add	r2, r3
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801991e:	461c      	mov	r4, r3
 8019920:	68bb      	ldr	r3, [r7, #8]
 8019922:	891b      	ldrh	r3, [r3, #8]
 8019924:	461d      	mov	r5, r3
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	68db      	ldr	r3, [r3, #12]
 801992a:	899b      	ldrh	r3, [r3, #12]
 801992c:	b29b      	uxth	r3, r3
 801992e:	4618      	mov	r0, r3
 8019930:	f7f6 fad2 	bl	800fed8 <lwip_htons>
 8019934:	4603      	mov	r3, r0
 8019936:	b2db      	uxtb	r3, r3
 8019938:	f003 0303 	and.w	r3, r3, #3
 801993c:	2b00      	cmp	r3, #0
 801993e:	d001      	beq.n	8019944 <tcp_receive+0xa8c>
 8019940:	2301      	movs	r3, #1
 8019942:	e000      	b.n	8019946 <tcp_receive+0xa8e>
 8019944:	2300      	movs	r3, #0
 8019946:	442b      	add	r3, r5
 8019948:	429c      	cmp	r4, r3
 801994a:	d206      	bcs.n	801995a <tcp_receive+0xaa2>
 801994c:	4b1e      	ldr	r3, [pc, #120]	; (80199c8 <tcp_receive+0xb10>)
 801994e:	f240 622b 	movw	r2, #1579	; 0x62b
 8019952:	4923      	ldr	r1, [pc, #140]	; (80199e0 <tcp_receive+0xb28>)
 8019954:	481e      	ldr	r0, [pc, #120]	; (80199d0 <tcp_receive+0xb18>)
 8019956:	f007 fc69 	bl	802122c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	891b      	ldrh	r3, [r3, #8]
 801995e:	461c      	mov	r4, r3
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	68db      	ldr	r3, [r3, #12]
 8019964:	899b      	ldrh	r3, [r3, #12]
 8019966:	b29b      	uxth	r3, r3
 8019968:	4618      	mov	r0, r3
 801996a:	f7f6 fab5 	bl	800fed8 <lwip_htons>
 801996e:	4603      	mov	r3, r0
 8019970:	b2db      	uxtb	r3, r3
 8019972:	f003 0303 	and.w	r3, r3, #3
 8019976:	2b00      	cmp	r3, #0
 8019978:	d001      	beq.n	801997e <tcp_receive+0xac6>
 801997a:	2301      	movs	r3, #1
 801997c:	e000      	b.n	8019980 <tcp_receive+0xac8>
 801997e:	2300      	movs	r3, #0
 8019980:	1919      	adds	r1, r3, r4
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019986:	b28b      	uxth	r3, r1
 8019988:	1ad3      	subs	r3, r2, r3
 801998a:	b29a      	uxth	r2, r3
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f7fc fd1b 	bl	80163cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019996:	68bb      	ldr	r3, [r7, #8]
 8019998:	685b      	ldr	r3, [r3, #4]
 801999a:	891b      	ldrh	r3, [r3, #8]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d028      	beq.n	80199f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80199a0:	4b0d      	ldr	r3, [pc, #52]	; (80199d8 <tcp_receive+0xb20>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d01d      	beq.n	80199e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80199a8:	4b0b      	ldr	r3, [pc, #44]	; (80199d8 <tcp_receive+0xb20>)
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	685b      	ldr	r3, [r3, #4]
 80199b0:	4619      	mov	r1, r3
 80199b2:	4610      	mov	r0, r2
 80199b4:	f7fa fd0a 	bl	80143cc <pbuf_cat>
 80199b8:	e018      	b.n	80199ec <tcp_receive+0xb34>
 80199ba:	bf00      	nop
 80199bc:	24040792 	.word	0x24040792
 80199c0:	24040788 	.word	0x24040788
 80199c4:	24040768 	.word	0x24040768
 80199c8:	080260d0 	.word	0x080260d0
 80199cc:	080264cc 	.word	0x080264cc
 80199d0:	08026138 	.word	0x08026138
 80199d4:	08026508 	.word	0x08026508
 80199d8:	24040798 	.word	0x24040798
 80199dc:	24040795 	.word	0x24040795
 80199e0:	08026528 	.word	0x08026528
            } else {
              recv_data = cseg->p;
 80199e4:	68bb      	ldr	r3, [r7, #8]
 80199e6:	685b      	ldr	r3, [r3, #4]
 80199e8:	4a70      	ldr	r2, [pc, #448]	; (8019bac <tcp_receive+0xcf4>)
 80199ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80199ec:	68bb      	ldr	r3, [r7, #8]
 80199ee:	2200      	movs	r2, #0
 80199f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80199f2:	68bb      	ldr	r3, [r7, #8]
 80199f4:	68db      	ldr	r3, [r3, #12]
 80199f6:	899b      	ldrh	r3, [r3, #12]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	4618      	mov	r0, r3
 80199fc:	f7f6 fa6c 	bl	800fed8 <lwip_htons>
 8019a00:	4603      	mov	r3, r0
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	f003 0301 	and.w	r3, r3, #1
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d00d      	beq.n	8019a28 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019a0c:	4b68      	ldr	r3, [pc, #416]	; (8019bb0 <tcp_receive+0xcf8>)
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	f043 0320 	orr.w	r3, r3, #32
 8019a14:	b2da      	uxtb	r2, r3
 8019a16:	4b66      	ldr	r3, [pc, #408]	; (8019bb0 <tcp_receive+0xcf8>)
 8019a18:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	7d1b      	ldrb	r3, [r3, #20]
 8019a1e:	2b04      	cmp	r3, #4
 8019a20:	d102      	bne.n	8019a28 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2207      	movs	r2, #7
 8019a26:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019a28:	68bb      	ldr	r3, [r7, #8]
 8019a2a:	681a      	ldr	r2, [r3, #0]
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019a30:	68b8      	ldr	r0, [r7, #8]
 8019a32:	f7fd fb08 	bl	8017046 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d008      	beq.n	8019a50 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a42:	68db      	ldr	r3, [r3, #12]
 8019a44:	685a      	ldr	r2, [r3, #4]
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	f43f af43 	beq.w	80198d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	8b5b      	ldrh	r3, [r3, #26]
 8019a54:	f003 0301 	and.w	r3, r3, #1
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d00e      	beq.n	8019a7a <tcp_receive+0xbc2>
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	8b5b      	ldrh	r3, [r3, #26]
 8019a60:	f023 0301 	bic.w	r3, r3, #1
 8019a64:	b29a      	uxth	r2, r3
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	835a      	strh	r2, [r3, #26]
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	8b5b      	ldrh	r3, [r3, #26]
 8019a6e:	f043 0302 	orr.w	r3, r3, #2
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019a78:	e188      	b.n	8019d8c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	8b5b      	ldrh	r3, [r3, #26]
 8019a7e:	f043 0301 	orr.w	r3, r3, #1
 8019a82:	b29a      	uxth	r2, r3
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019a88:	e180      	b.n	8019d8c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d106      	bne.n	8019aa0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019a92:	4848      	ldr	r0, [pc, #288]	; (8019bb4 <tcp_receive+0xcfc>)
 8019a94:	f7fd faf0 	bl	8017078 <tcp_seg_copy>
 8019a98:	4602      	mov	r2, r0
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	675a      	str	r2, [r3, #116]	; 0x74
 8019a9e:	e16d      	b.n	8019d7c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8019aaa:	e157      	b.n	8019d5c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aae:	68db      	ldr	r3, [r3, #12]
 8019ab0:	685a      	ldr	r2, [r3, #4]
 8019ab2:	4b41      	ldr	r3, [pc, #260]	; (8019bb8 <tcp_receive+0xd00>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d11d      	bne.n	8019af6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019aba:	4b3e      	ldr	r3, [pc, #248]	; (8019bb4 <tcp_receive+0xcfc>)
 8019abc:	891a      	ldrh	r2, [r3, #8]
 8019abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ac0:	891b      	ldrh	r3, [r3, #8]
 8019ac2:	429a      	cmp	r2, r3
 8019ac4:	f240 814f 	bls.w	8019d66 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019ac8:	483a      	ldr	r0, [pc, #232]	; (8019bb4 <tcp_receive+0xcfc>)
 8019aca:	f7fd fad5 	bl	8017078 <tcp_seg_copy>
 8019ace:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	f000 8149 	beq.w	8019d6a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d003      	beq.n	8019ae6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ae0:	697a      	ldr	r2, [r7, #20]
 8019ae2:	601a      	str	r2, [r3, #0]
 8019ae4:	e002      	b.n	8019aec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	697a      	ldr	r2, [r7, #20]
 8019aea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019aec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019aee:	6978      	ldr	r0, [r7, #20]
 8019af0:	f7ff f8de 	bl	8018cb0 <tcp_oos_insert_segment>
                }
                break;
 8019af4:	e139      	b.n	8019d6a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d117      	bne.n	8019b2c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019afc:	4b2e      	ldr	r3, [pc, #184]	; (8019bb8 <tcp_receive+0xd00>)
 8019afe:	681a      	ldr	r2, [r3, #0]
 8019b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b02:	68db      	ldr	r3, [r3, #12]
 8019b04:	685b      	ldr	r3, [r3, #4]
 8019b06:	1ad3      	subs	r3, r2, r3
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	da57      	bge.n	8019bbc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019b0c:	4829      	ldr	r0, [pc, #164]	; (8019bb4 <tcp_receive+0xcfc>)
 8019b0e:	f7fd fab3 	bl	8017078 <tcp_seg_copy>
 8019b12:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	f000 8129 	beq.w	8019d6e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	69ba      	ldr	r2, [r7, #24]
 8019b20:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019b24:	69b8      	ldr	r0, [r7, #24]
 8019b26:	f7ff f8c3 	bl	8018cb0 <tcp_oos_insert_segment>
                  }
                  break;
 8019b2a:	e120      	b.n	8019d6e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019b2c:	4b22      	ldr	r3, [pc, #136]	; (8019bb8 <tcp_receive+0xd00>)
 8019b2e:	681a      	ldr	r2, [r3, #0]
 8019b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b32:	68db      	ldr	r3, [r3, #12]
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	1ad3      	subs	r3, r2, r3
 8019b38:	3b01      	subs	r3, #1
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	db3e      	blt.n	8019bbc <tcp_receive+0xd04>
 8019b3e:	4b1e      	ldr	r3, [pc, #120]	; (8019bb8 <tcp_receive+0xd00>)
 8019b40:	681a      	ldr	r2, [r3, #0]
 8019b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b44:	68db      	ldr	r3, [r3, #12]
 8019b46:	685b      	ldr	r3, [r3, #4]
 8019b48:	1ad3      	subs	r3, r2, r3
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	dc35      	bgt.n	8019bbc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019b50:	4818      	ldr	r0, [pc, #96]	; (8019bb4 <tcp_receive+0xcfc>)
 8019b52:	f7fd fa91 	bl	8017078 <tcp_seg_copy>
 8019b56:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019b58:	69fb      	ldr	r3, [r7, #28]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	f000 8109 	beq.w	8019d72 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b62:	68db      	ldr	r3, [r3, #12]
 8019b64:	685b      	ldr	r3, [r3, #4]
 8019b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019b68:	8912      	ldrh	r2, [r2, #8]
 8019b6a:	441a      	add	r2, r3
 8019b6c:	4b12      	ldr	r3, [pc, #72]	; (8019bb8 <tcp_receive+0xd00>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	1ad3      	subs	r3, r2, r3
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	dd12      	ble.n	8019b9c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019b76:	4b10      	ldr	r3, [pc, #64]	; (8019bb8 <tcp_receive+0xd00>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b7e:	68db      	ldr	r3, [r3, #12]
 8019b80:	685b      	ldr	r3, [r3, #4]
 8019b82:	b29b      	uxth	r3, r3
 8019b84:	1ad3      	subs	r3, r2, r3
 8019b86:	b29a      	uxth	r2, r3
 8019b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b8a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b8e:	685a      	ldr	r2, [r3, #4]
 8019b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b92:	891b      	ldrh	r3, [r3, #8]
 8019b94:	4619      	mov	r1, r3
 8019b96:	4610      	mov	r0, r2
 8019b98:	f7fa f992 	bl	8013ec0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b9e:	69fa      	ldr	r2, [r7, #28]
 8019ba0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019ba4:	69f8      	ldr	r0, [r7, #28]
 8019ba6:	f7ff f883 	bl	8018cb0 <tcp_oos_insert_segment>
                  }
                  break;
 8019baa:	e0e2      	b.n	8019d72 <tcp_receive+0xeba>
 8019bac:	24040798 	.word	0x24040798
 8019bb0:	24040795 	.word	0x24040795
 8019bb4:	24040768 	.word	0x24040768
 8019bb8:	24040788 	.word	0x24040788
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bbe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	f040 80c6 	bne.w	8019d56 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019bca:	4b80      	ldr	r3, [pc, #512]	; (8019dcc <tcp_receive+0xf14>)
 8019bcc:	681a      	ldr	r2, [r3, #0]
 8019bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bd0:	68db      	ldr	r3, [r3, #12]
 8019bd2:	685b      	ldr	r3, [r3, #4]
 8019bd4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	f340 80bd 	ble.w	8019d56 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bde:	68db      	ldr	r3, [r3, #12]
 8019be0:	899b      	ldrh	r3, [r3, #12]
 8019be2:	b29b      	uxth	r3, r3
 8019be4:	4618      	mov	r0, r3
 8019be6:	f7f6 f977 	bl	800fed8 <lwip_htons>
 8019bea:	4603      	mov	r3, r0
 8019bec:	b2db      	uxtb	r3, r3
 8019bee:	f003 0301 	and.w	r3, r3, #1
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	f040 80bf 	bne.w	8019d76 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019bf8:	4875      	ldr	r0, [pc, #468]	; (8019dd0 <tcp_receive+0xf18>)
 8019bfa:	f7fd fa3d 	bl	8017078 <tcp_seg_copy>
 8019bfe:	4602      	mov	r2, r0
 8019c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c02:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	f000 80b6 	beq.w	8019d7a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c10:	68db      	ldr	r3, [r3, #12]
 8019c12:	685b      	ldr	r3, [r3, #4]
 8019c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c16:	8912      	ldrh	r2, [r2, #8]
 8019c18:	441a      	add	r2, r3
 8019c1a:	4b6c      	ldr	r3, [pc, #432]	; (8019dcc <tcp_receive+0xf14>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	1ad3      	subs	r3, r2, r3
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	dd12      	ble.n	8019c4a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019c24:	4b69      	ldr	r3, [pc, #420]	; (8019dcc <tcp_receive+0xf14>)
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	b29a      	uxth	r2, r3
 8019c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c2c:	68db      	ldr	r3, [r3, #12]
 8019c2e:	685b      	ldr	r3, [r3, #4]
 8019c30:	b29b      	uxth	r3, r3
 8019c32:	1ad3      	subs	r3, r2, r3
 8019c34:	b29a      	uxth	r2, r3
 8019c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c3c:	685a      	ldr	r2, [r3, #4]
 8019c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c40:	891b      	ldrh	r3, [r3, #8]
 8019c42:	4619      	mov	r1, r3
 8019c44:	4610      	mov	r0, r2
 8019c46:	f7fa f93b 	bl	8013ec0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019c4a:	4b62      	ldr	r3, [pc, #392]	; (8019dd4 <tcp_receive+0xf1c>)
 8019c4c:	881b      	ldrh	r3, [r3, #0]
 8019c4e:	461a      	mov	r2, r3
 8019c50:	4b5e      	ldr	r3, [pc, #376]	; (8019dcc <tcp_receive+0xf14>)
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	441a      	add	r2, r3
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c5a:	6879      	ldr	r1, [r7, #4]
 8019c5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019c5e:	440b      	add	r3, r1
 8019c60:	1ad3      	subs	r3, r2, r3
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f340 8089 	ble.w	8019d7a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	68db      	ldr	r3, [r3, #12]
 8019c6e:	899b      	ldrh	r3, [r3, #12]
 8019c70:	b29b      	uxth	r3, r3
 8019c72:	4618      	mov	r0, r3
 8019c74:	f7f6 f930 	bl	800fed8 <lwip_htons>
 8019c78:	4603      	mov	r3, r0
 8019c7a:	b2db      	uxtb	r3, r3
 8019c7c:	f003 0301 	and.w	r3, r3, #1
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d022      	beq.n	8019cca <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	68db      	ldr	r3, [r3, #12]
 8019c8a:	899b      	ldrh	r3, [r3, #12]
 8019c8c:	b29b      	uxth	r3, r3
 8019c8e:	b21b      	sxth	r3, r3
 8019c90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019c94:	b21c      	sxth	r4, r3
 8019c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	68db      	ldr	r3, [r3, #12]
 8019c9c:	899b      	ldrh	r3, [r3, #12]
 8019c9e:	b29b      	uxth	r3, r3
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	f7f6 f919 	bl	800fed8 <lwip_htons>
 8019ca6:	4603      	mov	r3, r0
 8019ca8:	b2db      	uxtb	r3, r3
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7f6 f910 	bl	800fed8 <lwip_htons>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	b21b      	sxth	r3, r3
 8019cbc:	4323      	orrs	r3, r4
 8019cbe:	b21a      	sxth	r2, r3
 8019cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	68db      	ldr	r3, [r3, #12]
 8019cc6:	b292      	uxth	r2, r2
 8019cc8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cce:	b29a      	uxth	r2, r3
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019cd4:	4413      	add	r3, r2
 8019cd6:	b299      	uxth	r1, r3
 8019cd8:	4b3c      	ldr	r3, [pc, #240]	; (8019dcc <tcp_receive+0xf14>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	b29a      	uxth	r2, r3
 8019cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	1a8a      	subs	r2, r1, r2
 8019ce4:	b292      	uxth	r2, r2
 8019ce6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	685a      	ldr	r2, [r3, #4]
 8019cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	891b      	ldrh	r3, [r3, #8]
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	4610      	mov	r0, r2
 8019cf8:	f7fa f8e2 	bl	8013ec0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	891c      	ldrh	r4, [r3, #8]
 8019d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	68db      	ldr	r3, [r3, #12]
 8019d08:	899b      	ldrh	r3, [r3, #12]
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7f6 f8e3 	bl	800fed8 <lwip_htons>
 8019d12:	4603      	mov	r3, r0
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	f003 0303 	and.w	r3, r3, #3
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d001      	beq.n	8019d22 <tcp_receive+0xe6a>
 8019d1e:	2301      	movs	r3, #1
 8019d20:	e000      	b.n	8019d24 <tcp_receive+0xe6c>
 8019d22:	2300      	movs	r3, #0
 8019d24:	4423      	add	r3, r4
 8019d26:	b29a      	uxth	r2, r3
 8019d28:	4b2a      	ldr	r3, [pc, #168]	; (8019dd4 <tcp_receive+0xf1c>)
 8019d2a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019d2c:	4b29      	ldr	r3, [pc, #164]	; (8019dd4 <tcp_receive+0xf1c>)
 8019d2e:	881b      	ldrh	r3, [r3, #0]
 8019d30:	461a      	mov	r2, r3
 8019d32:	4b26      	ldr	r3, [pc, #152]	; (8019dcc <tcp_receive+0xf14>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	441a      	add	r2, r3
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d3c:	6879      	ldr	r1, [r7, #4]
 8019d3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019d40:	440b      	add	r3, r1
 8019d42:	429a      	cmp	r2, r3
 8019d44:	d019      	beq.n	8019d7a <tcp_receive+0xec2>
 8019d46:	4b24      	ldr	r3, [pc, #144]	; (8019dd8 <tcp_receive+0xf20>)
 8019d48:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8019d4c:	4923      	ldr	r1, [pc, #140]	; (8019ddc <tcp_receive+0xf24>)
 8019d4e:	4824      	ldr	r0, [pc, #144]	; (8019de0 <tcp_receive+0xf28>)
 8019d50:	f007 fa6c 	bl	802122c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019d54:	e011      	b.n	8019d7a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8019d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	f47f aea4 	bne.w	8019aac <tcp_receive+0xbf4>
 8019d64:	e00a      	b.n	8019d7c <tcp_receive+0xec4>
                break;
 8019d66:	bf00      	nop
 8019d68:	e008      	b.n	8019d7c <tcp_receive+0xec4>
                break;
 8019d6a:	bf00      	nop
 8019d6c:	e006      	b.n	8019d7c <tcp_receive+0xec4>
                  break;
 8019d6e:	bf00      	nop
 8019d70:	e004      	b.n	8019d7c <tcp_receive+0xec4>
                  break;
 8019d72:	bf00      	nop
 8019d74:	e002      	b.n	8019d7c <tcp_receive+0xec4>
                  break;
 8019d76:	bf00      	nop
 8019d78:	e000      	b.n	8019d7c <tcp_receive+0xec4>
                break;
 8019d7a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019d7c:	6878      	ldr	r0, [r7, #4]
 8019d7e:	f001 fe8b 	bl	801ba98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019d82:	e003      	b.n	8019d8c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019d84:	6878      	ldr	r0, [r7, #4]
 8019d86:	f001 fe87 	bl	801ba98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019d8a:	e01a      	b.n	8019dc2 <tcp_receive+0xf0a>
 8019d8c:	e019      	b.n	8019dc2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019d8e:	4b0f      	ldr	r3, [pc, #60]	; (8019dcc <tcp_receive+0xf14>)
 8019d90:	681a      	ldr	r2, [r3, #0]
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d96:	1ad3      	subs	r3, r2, r3
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	db0a      	blt.n	8019db2 <tcp_receive+0xefa>
 8019d9c:	4b0b      	ldr	r3, [pc, #44]	; (8019dcc <tcp_receive+0xf14>)
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da4:	6879      	ldr	r1, [r7, #4]
 8019da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019da8:	440b      	add	r3, r1
 8019daa:	1ad3      	subs	r3, r2, r3
 8019dac:	3301      	adds	r3, #1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	dd07      	ble.n	8019dc2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	8b5b      	ldrh	r3, [r3, #26]
 8019db6:	f043 0302 	orr.w	r3, r3, #2
 8019dba:	b29a      	uxth	r2, r3
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019dc0:	e7ff      	b.n	8019dc2 <tcp_receive+0xf0a>
 8019dc2:	bf00      	nop
 8019dc4:	3750      	adds	r7, #80	; 0x50
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8019dca:	bf00      	nop
 8019dcc:	24040788 	.word	0x24040788
 8019dd0:	24040768 	.word	0x24040768
 8019dd4:	24040792 	.word	0x24040792
 8019dd8:	080260d0 	.word	0x080260d0
 8019ddc:	08026494 	.word	0x08026494
 8019de0:	08026138 	.word	0x08026138

08019de4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019de4:	b480      	push	{r7}
 8019de6:	b083      	sub	sp, #12
 8019de8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019dea:	4b15      	ldr	r3, [pc, #84]	; (8019e40 <tcp_get_next_optbyte+0x5c>)
 8019dec:	881b      	ldrh	r3, [r3, #0]
 8019dee:	1c5a      	adds	r2, r3, #1
 8019df0:	b291      	uxth	r1, r2
 8019df2:	4a13      	ldr	r2, [pc, #76]	; (8019e40 <tcp_get_next_optbyte+0x5c>)
 8019df4:	8011      	strh	r1, [r2, #0]
 8019df6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019df8:	4b12      	ldr	r3, [pc, #72]	; (8019e44 <tcp_get_next_optbyte+0x60>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d004      	beq.n	8019e0a <tcp_get_next_optbyte+0x26>
 8019e00:	4b11      	ldr	r3, [pc, #68]	; (8019e48 <tcp_get_next_optbyte+0x64>)
 8019e02:	881b      	ldrh	r3, [r3, #0]
 8019e04:	88fa      	ldrh	r2, [r7, #6]
 8019e06:	429a      	cmp	r2, r3
 8019e08:	d208      	bcs.n	8019e1c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019e0a:	4b10      	ldr	r3, [pc, #64]	; (8019e4c <tcp_get_next_optbyte+0x68>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	3314      	adds	r3, #20
 8019e10:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019e12:	88fb      	ldrh	r3, [r7, #6]
 8019e14:	683a      	ldr	r2, [r7, #0]
 8019e16:	4413      	add	r3, r2
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	e00b      	b.n	8019e34 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019e1c:	88fb      	ldrh	r3, [r7, #6]
 8019e1e:	b2da      	uxtb	r2, r3
 8019e20:	4b09      	ldr	r3, [pc, #36]	; (8019e48 <tcp_get_next_optbyte+0x64>)
 8019e22:	881b      	ldrh	r3, [r3, #0]
 8019e24:	b2db      	uxtb	r3, r3
 8019e26:	1ad3      	subs	r3, r2, r3
 8019e28:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019e2a:	4b06      	ldr	r3, [pc, #24]	; (8019e44 <tcp_get_next_optbyte+0x60>)
 8019e2c:	681a      	ldr	r2, [r3, #0]
 8019e2e:	797b      	ldrb	r3, [r7, #5]
 8019e30:	4413      	add	r3, r2
 8019e32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	370c      	adds	r7, #12
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3e:	4770      	bx	lr
 8019e40:	24040784 	.word	0x24040784
 8019e44:	24040780 	.word	0x24040780
 8019e48:	2404077e 	.word	0x2404077e
 8019e4c:	24040778 	.word	0x24040778

08019e50 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b084      	sub	sp, #16
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d106      	bne.n	8019e6c <tcp_parseopt+0x1c>
 8019e5e:	4b32      	ldr	r3, [pc, #200]	; (8019f28 <tcp_parseopt+0xd8>)
 8019e60:	f240 727d 	movw	r2, #1917	; 0x77d
 8019e64:	4931      	ldr	r1, [pc, #196]	; (8019f2c <tcp_parseopt+0xdc>)
 8019e66:	4832      	ldr	r0, [pc, #200]	; (8019f30 <tcp_parseopt+0xe0>)
 8019e68:	f007 f9e0 	bl	802122c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019e6c:	4b31      	ldr	r3, [pc, #196]	; (8019f34 <tcp_parseopt+0xe4>)
 8019e6e:	881b      	ldrh	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d055      	beq.n	8019f20 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019e74:	4b30      	ldr	r3, [pc, #192]	; (8019f38 <tcp_parseopt+0xe8>)
 8019e76:	2200      	movs	r2, #0
 8019e78:	801a      	strh	r2, [r3, #0]
 8019e7a:	e045      	b.n	8019f08 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8019e7c:	f7ff ffb2 	bl	8019de4 <tcp_get_next_optbyte>
 8019e80:	4603      	mov	r3, r0
 8019e82:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019e84:	7bfb      	ldrb	r3, [r7, #15]
 8019e86:	2b02      	cmp	r3, #2
 8019e88:	d006      	beq.n	8019e98 <tcp_parseopt+0x48>
 8019e8a:	2b02      	cmp	r3, #2
 8019e8c:	dc2b      	bgt.n	8019ee6 <tcp_parseopt+0x96>
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d041      	beq.n	8019f16 <tcp_parseopt+0xc6>
 8019e92:	2b01      	cmp	r3, #1
 8019e94:	d127      	bne.n	8019ee6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8019e96:	e037      	b.n	8019f08 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019e98:	f7ff ffa4 	bl	8019de4 <tcp_get_next_optbyte>
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	2b04      	cmp	r3, #4
 8019ea0:	d13b      	bne.n	8019f1a <tcp_parseopt+0xca>
 8019ea2:	4b25      	ldr	r3, [pc, #148]	; (8019f38 <tcp_parseopt+0xe8>)
 8019ea4:	881b      	ldrh	r3, [r3, #0]
 8019ea6:	3301      	adds	r3, #1
 8019ea8:	4a22      	ldr	r2, [pc, #136]	; (8019f34 <tcp_parseopt+0xe4>)
 8019eaa:	8812      	ldrh	r2, [r2, #0]
 8019eac:	4293      	cmp	r3, r2
 8019eae:	da34      	bge.n	8019f1a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019eb0:	f7ff ff98 	bl	8019de4 <tcp_get_next_optbyte>
 8019eb4:	4603      	mov	r3, r0
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	021b      	lsls	r3, r3, #8
 8019eba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019ebc:	f7ff ff92 	bl	8019de4 <tcp_get_next_optbyte>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	89bb      	ldrh	r3, [r7, #12]
 8019ec6:	4313      	orrs	r3, r2
 8019ec8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019eca:	89bb      	ldrh	r3, [r7, #12]
 8019ecc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019ed0:	d804      	bhi.n	8019edc <tcp_parseopt+0x8c>
 8019ed2:	89bb      	ldrh	r3, [r7, #12]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d001      	beq.n	8019edc <tcp_parseopt+0x8c>
 8019ed8:	89ba      	ldrh	r2, [r7, #12]
 8019eda:	e001      	b.n	8019ee0 <tcp_parseopt+0x90>
 8019edc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019ee4:	e010      	b.n	8019f08 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019ee6:	f7ff ff7d 	bl	8019de4 <tcp_get_next_optbyte>
 8019eea:	4603      	mov	r3, r0
 8019eec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019eee:	7afb      	ldrb	r3, [r7, #11]
 8019ef0:	2b01      	cmp	r3, #1
 8019ef2:	d914      	bls.n	8019f1e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019ef4:	7afb      	ldrb	r3, [r7, #11]
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	4b0f      	ldr	r3, [pc, #60]	; (8019f38 <tcp_parseopt+0xe8>)
 8019efa:	881b      	ldrh	r3, [r3, #0]
 8019efc:	4413      	add	r3, r2
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	3b02      	subs	r3, #2
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	4b0c      	ldr	r3, [pc, #48]	; (8019f38 <tcp_parseopt+0xe8>)
 8019f06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019f08:	4b0b      	ldr	r3, [pc, #44]	; (8019f38 <tcp_parseopt+0xe8>)
 8019f0a:	881a      	ldrh	r2, [r3, #0]
 8019f0c:	4b09      	ldr	r3, [pc, #36]	; (8019f34 <tcp_parseopt+0xe4>)
 8019f0e:	881b      	ldrh	r3, [r3, #0]
 8019f10:	429a      	cmp	r2, r3
 8019f12:	d3b3      	bcc.n	8019e7c <tcp_parseopt+0x2c>
 8019f14:	e004      	b.n	8019f20 <tcp_parseopt+0xd0>
          return;
 8019f16:	bf00      	nop
 8019f18:	e002      	b.n	8019f20 <tcp_parseopt+0xd0>
            return;
 8019f1a:	bf00      	nop
 8019f1c:	e000      	b.n	8019f20 <tcp_parseopt+0xd0>
            return;
 8019f1e:	bf00      	nop
      }
    }
  }
}
 8019f20:	3710      	adds	r7, #16
 8019f22:	46bd      	mov	sp, r7
 8019f24:	bd80      	pop	{r7, pc}
 8019f26:	bf00      	nop
 8019f28:	080260d0 	.word	0x080260d0
 8019f2c:	08026550 	.word	0x08026550
 8019f30:	08026138 	.word	0x08026138
 8019f34:	2404077c 	.word	0x2404077c
 8019f38:	24040784 	.word	0x24040784

08019f3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019f40:	4b05      	ldr	r3, [pc, #20]	; (8019f58 <tcp_trigger_input_pcb_close+0x1c>)
 8019f42:	781b      	ldrb	r3, [r3, #0]
 8019f44:	f043 0310 	orr.w	r3, r3, #16
 8019f48:	b2da      	uxtb	r2, r3
 8019f4a:	4b03      	ldr	r3, [pc, #12]	; (8019f58 <tcp_trigger_input_pcb_close+0x1c>)
 8019f4c:	701a      	strb	r2, [r3, #0]
}
 8019f4e:	bf00      	nop
 8019f50:	46bd      	mov	sp, r7
 8019f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f56:	4770      	bx	lr
 8019f58:	24040795 	.word	0x24040795

08019f5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b084      	sub	sp, #16
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	60f8      	str	r0, [r7, #12]
 8019f64:	60b9      	str	r1, [r7, #8]
 8019f66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d00a      	beq.n	8019f84 <tcp_route+0x28>
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	7a1b      	ldrb	r3, [r3, #8]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d006      	beq.n	8019f84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	7a1b      	ldrb	r3, [r3, #8]
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7f9 fd98 	bl	8013ab0 <netif_get_by_index>
 8019f80:	4603      	mov	r3, r0
 8019f82:	e003      	b.n	8019f8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019f84:	6878      	ldr	r0, [r7, #4]
 8019f86:	f7f7 fa9d 	bl	80114c4 <ip4_route>
 8019f8a:	4603      	mov	r3, r0
  }
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	3710      	adds	r7, #16
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}

08019f94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019f94:	b590      	push	{r4, r7, lr}
 8019f96:	b087      	sub	sp, #28
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	60b9      	str	r1, [r7, #8]
 8019f9e:	603b      	str	r3, [r7, #0]
 8019fa0:	4613      	mov	r3, r2
 8019fa2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d105      	bne.n	8019fb6 <tcp_create_segment+0x22>
 8019faa:	4b44      	ldr	r3, [pc, #272]	; (801a0bc <tcp_create_segment+0x128>)
 8019fac:	22a3      	movs	r2, #163	; 0xa3
 8019fae:	4944      	ldr	r1, [pc, #272]	; (801a0c0 <tcp_create_segment+0x12c>)
 8019fb0:	4844      	ldr	r0, [pc, #272]	; (801a0c4 <tcp_create_segment+0x130>)
 8019fb2:	f007 f93b 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d105      	bne.n	8019fc8 <tcp_create_segment+0x34>
 8019fbc:	4b3f      	ldr	r3, [pc, #252]	; (801a0bc <tcp_create_segment+0x128>)
 8019fbe:	22a4      	movs	r2, #164	; 0xa4
 8019fc0:	4941      	ldr	r1, [pc, #260]	; (801a0c8 <tcp_create_segment+0x134>)
 8019fc2:	4840      	ldr	r0, [pc, #256]	; (801a0c4 <tcp_create_segment+0x130>)
 8019fc4:	f007 f932 	bl	802122c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019fcc:	009b      	lsls	r3, r3, #2
 8019fce:	b2db      	uxtb	r3, r3
 8019fd0:	f003 0304 	and.w	r3, r3, #4
 8019fd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019fd6:	2003      	movs	r0, #3
 8019fd8:	f7f9 f94c 	bl	8013274 <memp_malloc>
 8019fdc:	6138      	str	r0, [r7, #16]
 8019fde:	693b      	ldr	r3, [r7, #16]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d104      	bne.n	8019fee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019fe4:	68b8      	ldr	r0, [r7, #8]
 8019fe6:	f7fa f923 	bl	8014230 <pbuf_free>
    return NULL;
 8019fea:	2300      	movs	r3, #0
 8019fec:	e061      	b.n	801a0b2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8019fee:	693b      	ldr	r3, [r7, #16]
 8019ff0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019ff4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019ff6:	693b      	ldr	r3, [r7, #16]
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019ffc:	693b      	ldr	r3, [r7, #16]
 8019ffe:	68ba      	ldr	r2, [r7, #8]
 801a000:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	891a      	ldrh	r2, [r3, #8]
 801a006:	7dfb      	ldrb	r3, [r7, #23]
 801a008:	b29b      	uxth	r3, r3
 801a00a:	429a      	cmp	r2, r3
 801a00c:	d205      	bcs.n	801a01a <tcp_create_segment+0x86>
 801a00e:	4b2b      	ldr	r3, [pc, #172]	; (801a0bc <tcp_create_segment+0x128>)
 801a010:	22b0      	movs	r2, #176	; 0xb0
 801a012:	492e      	ldr	r1, [pc, #184]	; (801a0cc <tcp_create_segment+0x138>)
 801a014:	482b      	ldr	r0, [pc, #172]	; (801a0c4 <tcp_create_segment+0x130>)
 801a016:	f007 f909 	bl	802122c <iprintf>
  seg->len = p->tot_len - optlen;
 801a01a:	68bb      	ldr	r3, [r7, #8]
 801a01c:	891a      	ldrh	r2, [r3, #8]
 801a01e:	7dfb      	ldrb	r3, [r7, #23]
 801a020:	b29b      	uxth	r3, r3
 801a022:	1ad3      	subs	r3, r2, r3
 801a024:	b29a      	uxth	r2, r3
 801a026:	693b      	ldr	r3, [r7, #16]
 801a028:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a02a:	2114      	movs	r1, #20
 801a02c:	68b8      	ldr	r0, [r7, #8]
 801a02e:	f7fa f837 	bl	80140a0 <pbuf_add_header>
 801a032:	4603      	mov	r3, r0
 801a034:	2b00      	cmp	r3, #0
 801a036:	d004      	beq.n	801a042 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a038:	6938      	ldr	r0, [r7, #16]
 801a03a:	f7fd f804 	bl	8017046 <tcp_seg_free>
    return NULL;
 801a03e:	2300      	movs	r3, #0
 801a040:	e037      	b.n	801a0b2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a042:	693b      	ldr	r3, [r7, #16]
 801a044:	685b      	ldr	r3, [r3, #4]
 801a046:	685a      	ldr	r2, [r3, #4]
 801a048:	693b      	ldr	r3, [r7, #16]
 801a04a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	8ada      	ldrh	r2, [r3, #22]
 801a050:	693b      	ldr	r3, [r7, #16]
 801a052:	68dc      	ldr	r4, [r3, #12]
 801a054:	4610      	mov	r0, r2
 801a056:	f7f5 ff3f 	bl	800fed8 <lwip_htons>
 801a05a:	4603      	mov	r3, r0
 801a05c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	8b1a      	ldrh	r2, [r3, #24]
 801a062:	693b      	ldr	r3, [r7, #16]
 801a064:	68dc      	ldr	r4, [r3, #12]
 801a066:	4610      	mov	r0, r2
 801a068:	f7f5 ff36 	bl	800fed8 <lwip_htons>
 801a06c:	4603      	mov	r3, r0
 801a06e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a070:	693b      	ldr	r3, [r7, #16]
 801a072:	68dc      	ldr	r4, [r3, #12]
 801a074:	6838      	ldr	r0, [r7, #0]
 801a076:	f7f5 ff44 	bl	800ff02 <lwip_htonl>
 801a07a:	4603      	mov	r3, r0
 801a07c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a07e:	7dfb      	ldrb	r3, [r7, #23]
 801a080:	089b      	lsrs	r3, r3, #2
 801a082:	b2db      	uxtb	r3, r3
 801a084:	b29b      	uxth	r3, r3
 801a086:	3305      	adds	r3, #5
 801a088:	b29b      	uxth	r3, r3
 801a08a:	031b      	lsls	r3, r3, #12
 801a08c:	b29a      	uxth	r2, r3
 801a08e:	79fb      	ldrb	r3, [r7, #7]
 801a090:	b29b      	uxth	r3, r3
 801a092:	4313      	orrs	r3, r2
 801a094:	b29a      	uxth	r2, r3
 801a096:	693b      	ldr	r3, [r7, #16]
 801a098:	68dc      	ldr	r4, [r3, #12]
 801a09a:	4610      	mov	r0, r2
 801a09c:	f7f5 ff1c 	bl	800fed8 <lwip_htons>
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a0a4:	693b      	ldr	r3, [r7, #16]
 801a0a6:	68db      	ldr	r3, [r3, #12]
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	749a      	strb	r2, [r3, #18]
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	74da      	strb	r2, [r3, #19]
  return seg;
 801a0b0:	693b      	ldr	r3, [r7, #16]
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	371c      	adds	r7, #28
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd90      	pop	{r4, r7, pc}
 801a0ba:	bf00      	nop
 801a0bc:	0802656c 	.word	0x0802656c
 801a0c0:	080265bc 	.word	0x080265bc
 801a0c4:	080265dc 	.word	0x080265dc
 801a0c8:	08026604 	.word	0x08026604
 801a0cc:	08026628 	.word	0x08026628

0801a0d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b086      	sub	sp, #24
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	607b      	str	r3, [r7, #4]
 801a0d8:	4603      	mov	r3, r0
 801a0da:	73fb      	strb	r3, [r7, #15]
 801a0dc:	460b      	mov	r3, r1
 801a0de:	81bb      	strh	r3, [r7, #12]
 801a0e0:	4613      	mov	r3, r2
 801a0e2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a0e4:	89bb      	ldrh	r3, [r7, #12]
 801a0e6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d105      	bne.n	801a0fa <tcp_pbuf_prealloc+0x2a>
 801a0ee:	4b30      	ldr	r3, [pc, #192]	; (801a1b0 <tcp_pbuf_prealloc+0xe0>)
 801a0f0:	22e8      	movs	r2, #232	; 0xe8
 801a0f2:	4930      	ldr	r1, [pc, #192]	; (801a1b4 <tcp_pbuf_prealloc+0xe4>)
 801a0f4:	4830      	ldr	r0, [pc, #192]	; (801a1b8 <tcp_pbuf_prealloc+0xe8>)
 801a0f6:	f007 f899 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a0fa:	6a3b      	ldr	r3, [r7, #32]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d105      	bne.n	801a10c <tcp_pbuf_prealloc+0x3c>
 801a100:	4b2b      	ldr	r3, [pc, #172]	; (801a1b0 <tcp_pbuf_prealloc+0xe0>)
 801a102:	22e9      	movs	r2, #233	; 0xe9
 801a104:	492d      	ldr	r1, [pc, #180]	; (801a1bc <tcp_pbuf_prealloc+0xec>)
 801a106:	482c      	ldr	r0, [pc, #176]	; (801a1b8 <tcp_pbuf_prealloc+0xe8>)
 801a108:	f007 f890 	bl	802122c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a10c:	89ba      	ldrh	r2, [r7, #12]
 801a10e:	897b      	ldrh	r3, [r7, #10]
 801a110:	429a      	cmp	r2, r3
 801a112:	d221      	bcs.n	801a158 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a118:	f003 0302 	and.w	r3, r3, #2
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d111      	bne.n	801a144 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a120:	6a3b      	ldr	r3, [r7, #32]
 801a122:	8b5b      	ldrh	r3, [r3, #26]
 801a124:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d115      	bne.n	801a158 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a12c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a130:	2b00      	cmp	r3, #0
 801a132:	d007      	beq.n	801a144 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a134:	6a3b      	ldr	r3, [r7, #32]
 801a136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d103      	bne.n	801a144 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a13c:	6a3b      	ldr	r3, [r7, #32]
 801a13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a140:	2b00      	cmp	r3, #0
 801a142:	d009      	beq.n	801a158 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a144:	89bb      	ldrh	r3, [r7, #12]
 801a146:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a14a:	f023 0203 	bic.w	r2, r3, #3
 801a14e:	897b      	ldrh	r3, [r7, #10]
 801a150:	4293      	cmp	r3, r2
 801a152:	bf28      	it	cs
 801a154:	4613      	movcs	r3, r2
 801a156:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a158:	8af9      	ldrh	r1, [r7, #22]
 801a15a:	7bfb      	ldrb	r3, [r7, #15]
 801a15c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a160:	4618      	mov	r0, r3
 801a162:	f7f9 fd4f 	bl	8013c04 <pbuf_alloc>
 801a166:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a168:	693b      	ldr	r3, [r7, #16]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d101      	bne.n	801a172 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a16e:	2300      	movs	r3, #0
 801a170:	e019      	b.n	801a1a6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a172:	693b      	ldr	r3, [r7, #16]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d006      	beq.n	801a188 <tcp_pbuf_prealloc+0xb8>
 801a17a:	4b0d      	ldr	r3, [pc, #52]	; (801a1b0 <tcp_pbuf_prealloc+0xe0>)
 801a17c:	f240 120b 	movw	r2, #267	; 0x10b
 801a180:	490f      	ldr	r1, [pc, #60]	; (801a1c0 <tcp_pbuf_prealloc+0xf0>)
 801a182:	480d      	ldr	r0, [pc, #52]	; (801a1b8 <tcp_pbuf_prealloc+0xe8>)
 801a184:	f007 f852 	bl	802122c <iprintf>
  *oversize = p->len - length;
 801a188:	693b      	ldr	r3, [r7, #16]
 801a18a:	895a      	ldrh	r2, [r3, #10]
 801a18c:	89bb      	ldrh	r3, [r7, #12]
 801a18e:	1ad3      	subs	r3, r2, r3
 801a190:	b29a      	uxth	r2, r3
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a196:	693b      	ldr	r3, [r7, #16]
 801a198:	89ba      	ldrh	r2, [r7, #12]
 801a19a:	811a      	strh	r2, [r3, #8]
 801a19c:	693b      	ldr	r3, [r7, #16]
 801a19e:	891a      	ldrh	r2, [r3, #8]
 801a1a0:	693b      	ldr	r3, [r7, #16]
 801a1a2:	815a      	strh	r2, [r3, #10]
  return p;
 801a1a4:	693b      	ldr	r3, [r7, #16]
}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	3718      	adds	r7, #24
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}
 801a1ae:	bf00      	nop
 801a1b0:	0802656c 	.word	0x0802656c
 801a1b4:	08026640 	.word	0x08026640
 801a1b8:	080265dc 	.word	0x080265dc
 801a1bc:	08026664 	.word	0x08026664
 801a1c0:	08026684 	.word	0x08026684

0801a1c4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b082      	sub	sp, #8
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d106      	bne.n	801a1e4 <tcp_write_checks+0x20>
 801a1d6:	4b33      	ldr	r3, [pc, #204]	; (801a2a4 <tcp_write_checks+0xe0>)
 801a1d8:	f240 1233 	movw	r2, #307	; 0x133
 801a1dc:	4932      	ldr	r1, [pc, #200]	; (801a2a8 <tcp_write_checks+0xe4>)
 801a1de:	4833      	ldr	r0, [pc, #204]	; (801a2ac <tcp_write_checks+0xe8>)
 801a1e0:	f007 f824 	bl	802122c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	7d1b      	ldrb	r3, [r3, #20]
 801a1e8:	2b04      	cmp	r3, #4
 801a1ea:	d00e      	beq.n	801a20a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a1f0:	2b07      	cmp	r3, #7
 801a1f2:	d00a      	beq.n	801a20a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a1f8:	2b02      	cmp	r3, #2
 801a1fa:	d006      	beq.n	801a20a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a200:	2b03      	cmp	r3, #3
 801a202:	d002      	beq.n	801a20a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a204:	f06f 030a 	mvn.w	r3, #10
 801a208:	e048      	b.n	801a29c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a20a:	887b      	ldrh	r3, [r7, #2]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d101      	bne.n	801a214 <tcp_write_checks+0x50>
    return ERR_OK;
 801a210:	2300      	movs	r3, #0
 801a212:	e043      	b.n	801a29c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a21a:	887a      	ldrh	r2, [r7, #2]
 801a21c:	429a      	cmp	r2, r3
 801a21e:	d909      	bls.n	801a234 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	8b5b      	ldrh	r3, [r3, #26]
 801a224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a228:	b29a      	uxth	r2, r3
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a232:	e033      	b.n	801a29c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a23a:	2b08      	cmp	r3, #8
 801a23c:	d909      	bls.n	801a252 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	8b5b      	ldrh	r3, [r3, #26]
 801a242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a246:	b29a      	uxth	r2, r3
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a250:	e024      	b.n	801a29c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d00f      	beq.n	801a27c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a260:	2b00      	cmp	r3, #0
 801a262:	d11a      	bne.n	801a29a <tcp_write_checks+0xd6>
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d116      	bne.n	801a29a <tcp_write_checks+0xd6>
 801a26c:	4b0d      	ldr	r3, [pc, #52]	; (801a2a4 <tcp_write_checks+0xe0>)
 801a26e:	f240 1255 	movw	r2, #341	; 0x155
 801a272:	490f      	ldr	r1, [pc, #60]	; (801a2b0 <tcp_write_checks+0xec>)
 801a274:	480d      	ldr	r0, [pc, #52]	; (801a2ac <tcp_write_checks+0xe8>)
 801a276:	f006 ffd9 	bl	802122c <iprintf>
 801a27a:	e00e      	b.n	801a29a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a280:	2b00      	cmp	r3, #0
 801a282:	d103      	bne.n	801a28c <tcp_write_checks+0xc8>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d006      	beq.n	801a29a <tcp_write_checks+0xd6>
 801a28c:	4b05      	ldr	r3, [pc, #20]	; (801a2a4 <tcp_write_checks+0xe0>)
 801a28e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801a292:	4908      	ldr	r1, [pc, #32]	; (801a2b4 <tcp_write_checks+0xf0>)
 801a294:	4805      	ldr	r0, [pc, #20]	; (801a2ac <tcp_write_checks+0xe8>)
 801a296:	f006 ffc9 	bl	802122c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a29a:	2300      	movs	r3, #0
}
 801a29c:	4618      	mov	r0, r3
 801a29e:	3708      	adds	r7, #8
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	bd80      	pop	{r7, pc}
 801a2a4:	0802656c 	.word	0x0802656c
 801a2a8:	08026698 	.word	0x08026698
 801a2ac:	080265dc 	.word	0x080265dc
 801a2b0:	080266b8 	.word	0x080266b8
 801a2b4:	080266f4 	.word	0x080266f4

0801a2b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a2b8:	b590      	push	{r4, r7, lr}
 801a2ba:	b09b      	sub	sp, #108	; 0x6c
 801a2bc:	af04      	add	r7, sp, #16
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	4611      	mov	r1, r2
 801a2c4:	461a      	mov	r2, r3
 801a2c6:	460b      	mov	r3, r1
 801a2c8:	80fb      	strh	r3, [r7, #6]
 801a2ca:	4613      	mov	r3, r2
 801a2cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	653b      	str	r3, [r7, #80]	; 0x50
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a2da:	2300      	movs	r3, #0
 801a2dc:	64bb      	str	r3, [r7, #72]	; 0x48
 801a2de:	2300      	movs	r3, #0
 801a2e0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d109      	bne.n	801a314 <tcp_write+0x5c>
 801a300:	4ba4      	ldr	r3, [pc, #656]	; (801a594 <tcp_write+0x2dc>)
 801a302:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a306:	49a4      	ldr	r1, [pc, #656]	; (801a598 <tcp_write+0x2e0>)
 801a308:	48a4      	ldr	r0, [pc, #656]	; (801a59c <tcp_write+0x2e4>)
 801a30a:	f006 ff8f 	bl	802122c <iprintf>
 801a30e:	f06f 030f 	mvn.w	r3, #15
 801a312:	e32a      	b.n	801a96a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a31a:	085b      	lsrs	r3, r3, #1
 801a31c:	b29a      	uxth	r2, r3
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a322:	4293      	cmp	r3, r2
 801a324:	bf28      	it	cs
 801a326:	4613      	movcs	r3, r2
 801a328:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a32a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d102      	bne.n	801a336 <tcp_write+0x7e>
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a334:	e000      	b.n	801a338 <tcp_write+0x80>
 801a336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a338:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a33a:	68bb      	ldr	r3, [r7, #8]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d109      	bne.n	801a354 <tcp_write+0x9c>
 801a340:	4b94      	ldr	r3, [pc, #592]	; (801a594 <tcp_write+0x2dc>)
 801a342:	f240 12ad 	movw	r2, #429	; 0x1ad
 801a346:	4996      	ldr	r1, [pc, #600]	; (801a5a0 <tcp_write+0x2e8>)
 801a348:	4894      	ldr	r0, [pc, #592]	; (801a59c <tcp_write+0x2e4>)
 801a34a:	f006 ff6f 	bl	802122c <iprintf>
 801a34e:	f06f 030f 	mvn.w	r3, #15
 801a352:	e30a      	b.n	801a96a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a354:	88fb      	ldrh	r3, [r7, #6]
 801a356:	4619      	mov	r1, r3
 801a358:	68f8      	ldr	r0, [r7, #12]
 801a35a:	f7ff ff33 	bl	801a1c4 <tcp_write_checks>
 801a35e:	4603      	mov	r3, r0
 801a360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801a364:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d002      	beq.n	801a372 <tcp_write+0xba>
    return err;
 801a36c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a370:	e2fb      	b.n	801a96a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a378:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a37c:	2300      	movs	r3, #0
 801a37e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a386:	2b00      	cmp	r3, #0
 801a388:	f000 80f6 	beq.w	801a578 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a390:	653b      	str	r3, [r7, #80]	; 0x50
 801a392:	e002      	b.n	801a39a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801a394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d1f8      	bne.n	801a394 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3a4:	7a9b      	ldrb	r3, [r3, #10]
 801a3a6:	009b      	lsls	r3, r3, #2
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	f003 0304 	and.w	r3, r3, #4
 801a3ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a3b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3b4:	891b      	ldrh	r3, [r3, #8]
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	8c3b      	ldrh	r3, [r7, #32]
 801a3ba:	440b      	add	r3, r1
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	da06      	bge.n	801a3ce <tcp_write+0x116>
 801a3c0:	4b74      	ldr	r3, [pc, #464]	; (801a594 <tcp_write+0x2dc>)
 801a3c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a3c6:	4977      	ldr	r1, [pc, #476]	; (801a5a4 <tcp_write+0x2ec>)
 801a3c8:	4874      	ldr	r0, [pc, #464]	; (801a59c <tcp_write+0x2e4>)
 801a3ca:	f006 ff2f 	bl	802122c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3d0:	891a      	ldrh	r2, [r3, #8]
 801a3d2:	8c3b      	ldrh	r3, [r7, #32]
 801a3d4:	4413      	add	r3, r2
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3da:	1ad3      	subs	r3, r2, r3
 801a3dc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a3e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a3e6:	8a7b      	ldrh	r3, [r7, #18]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d026      	beq.n	801a43a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a3ec:	8a7b      	ldrh	r3, [r7, #18]
 801a3ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	d206      	bcs.n	801a402 <tcp_write+0x14a>
 801a3f4:	4b67      	ldr	r3, [pc, #412]	; (801a594 <tcp_write+0x2dc>)
 801a3f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a3fa:	496b      	ldr	r1, [pc, #428]	; (801a5a8 <tcp_write+0x2f0>)
 801a3fc:	4867      	ldr	r0, [pc, #412]	; (801a59c <tcp_write+0x2e4>)
 801a3fe:	f006 ff15 	bl	802122c <iprintf>
      seg = last_unsent;
 801a402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a404:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a406:	8a7b      	ldrh	r3, [r7, #18]
 801a408:	88fa      	ldrh	r2, [r7, #6]
 801a40a:	4293      	cmp	r3, r2
 801a40c:	bf28      	it	cs
 801a40e:	4613      	movcs	r3, r2
 801a410:	b29b      	uxth	r3, r3
 801a412:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a414:	4293      	cmp	r3, r2
 801a416:	bf28      	it	cs
 801a418:	4613      	movcs	r3, r2
 801a41a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a41c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a420:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a422:	4413      	add	r3, r2
 801a424:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a428:	8a7a      	ldrh	r2, [r7, #18]
 801a42a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a42c:	1ad3      	subs	r3, r2, r3
 801a42e:	b29b      	uxth	r3, r3
 801a430:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a432:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a434:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a436:	1ad3      	subs	r3, r2, r3
 801a438:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a43a:	8a7b      	ldrh	r3, [r7, #18]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d00b      	beq.n	801a458 <tcp_write+0x1a0>
 801a440:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a444:	88fb      	ldrh	r3, [r7, #6]
 801a446:	429a      	cmp	r2, r3
 801a448:	d006      	beq.n	801a458 <tcp_write+0x1a0>
 801a44a:	4b52      	ldr	r3, [pc, #328]	; (801a594 <tcp_write+0x2dc>)
 801a44c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a450:	4956      	ldr	r1, [pc, #344]	; (801a5ac <tcp_write+0x2f4>)
 801a452:	4852      	ldr	r0, [pc, #328]	; (801a59c <tcp_write+0x2e4>)
 801a454:	f006 feea 	bl	802122c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a45c:	88fb      	ldrh	r3, [r7, #6]
 801a45e:	429a      	cmp	r2, r3
 801a460:	f080 8167 	bcs.w	801a732 <tcp_write+0x47a>
 801a464:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a466:	2b00      	cmp	r3, #0
 801a468:	f000 8163 	beq.w	801a732 <tcp_write+0x47a>
 801a46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a46e:	891b      	ldrh	r3, [r3, #8]
 801a470:	2b00      	cmp	r3, #0
 801a472:	f000 815e 	beq.w	801a732 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a476:	88fa      	ldrh	r2, [r7, #6]
 801a478:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a47c:	1ad2      	subs	r2, r2, r3
 801a47e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a480:	4293      	cmp	r3, r2
 801a482:	bfa8      	it	ge
 801a484:	4613      	movge	r3, r2
 801a486:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a48a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a48c:	797b      	ldrb	r3, [r7, #5]
 801a48e:	f003 0301 	and.w	r3, r3, #1
 801a492:	2b00      	cmp	r3, #0
 801a494:	d027      	beq.n	801a4e6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a496:	f107 0012 	add.w	r0, r7, #18
 801a49a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a49c:	8bf9      	ldrh	r1, [r7, #30]
 801a49e:	2301      	movs	r3, #1
 801a4a0:	9302      	str	r3, [sp, #8]
 801a4a2:	797b      	ldrb	r3, [r7, #5]
 801a4a4:	9301      	str	r3, [sp, #4]
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	9300      	str	r3, [sp, #0]
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	2000      	movs	r0, #0
 801a4ae:	f7ff fe0f 	bl	801a0d0 <tcp_pbuf_prealloc>
 801a4b2:	6578      	str	r0, [r7, #84]	; 0x54
 801a4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	f000 8225 	beq.w	801a906 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a4bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4be:	6858      	ldr	r0, [r3, #4]
 801a4c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a4c4:	68ba      	ldr	r2, [r7, #8]
 801a4c6:	4413      	add	r3, r2
 801a4c8:	8bfa      	ldrh	r2, [r7, #30]
 801a4ca:	4619      	mov	r1, r3
 801a4cc:	f006 fa3c 	bl	8020948 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a4d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a4d2:	f7f9 ff3b 	bl	801434c <pbuf_clen>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	461a      	mov	r2, r3
 801a4da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a4de:	4413      	add	r3, r2
 801a4e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a4e4:	e041      	b.n	801a56a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4e8:	685b      	ldr	r3, [r3, #4]
 801a4ea:	637b      	str	r3, [r7, #52]	; 0x34
 801a4ec:	e002      	b.n	801a4f4 <tcp_write+0x23c>
 801a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	637b      	str	r3, [r7, #52]	; 0x34
 801a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d1f8      	bne.n	801a4ee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4fe:	7b1b      	ldrb	r3, [r3, #12]
 801a500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a504:	2b00      	cmp	r3, #0
 801a506:	d115      	bne.n	801a534 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a50a:	685b      	ldr	r3, [r3, #4]
 801a50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a50e:	8952      	ldrh	r2, [r2, #10]
 801a510:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a512:	68ba      	ldr	r2, [r7, #8]
 801a514:	429a      	cmp	r2, r3
 801a516:	d10d      	bne.n	801a534 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a518:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d006      	beq.n	801a52e <tcp_write+0x276>
 801a520:	4b1c      	ldr	r3, [pc, #112]	; (801a594 <tcp_write+0x2dc>)
 801a522:	f240 2231 	movw	r2, #561	; 0x231
 801a526:	4922      	ldr	r1, [pc, #136]	; (801a5b0 <tcp_write+0x2f8>)
 801a528:	481c      	ldr	r0, [pc, #112]	; (801a59c <tcp_write+0x2e4>)
 801a52a:	f006 fe7f 	bl	802122c <iprintf>
          extendlen = seglen;
 801a52e:	8bfb      	ldrh	r3, [r7, #30]
 801a530:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a532:	e01a      	b.n	801a56a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a534:	8bfb      	ldrh	r3, [r7, #30]
 801a536:	2201      	movs	r2, #1
 801a538:	4619      	mov	r1, r3
 801a53a:	2000      	movs	r0, #0
 801a53c:	f7f9 fb62 	bl	8013c04 <pbuf_alloc>
 801a540:	6578      	str	r0, [r7, #84]	; 0x54
 801a542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a544:	2b00      	cmp	r3, #0
 801a546:	f000 81e0 	beq.w	801a90a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a54a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a54e:	68ba      	ldr	r2, [r7, #8]
 801a550:	441a      	add	r2, r3
 801a552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a554:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a556:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a558:	f7f9 fef8 	bl	801434c <pbuf_clen>
 801a55c:	4603      	mov	r3, r0
 801a55e:	461a      	mov	r2, r3
 801a560:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a564:	4413      	add	r3, r2
 801a566:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a56a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a56e:	8bfb      	ldrh	r3, [r7, #30]
 801a570:	4413      	add	r3, r2
 801a572:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a576:	e0dc      	b.n	801a732 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a57e:	2b00      	cmp	r3, #0
 801a580:	f000 80d7 	beq.w	801a732 <tcp_write+0x47a>
 801a584:	4b03      	ldr	r3, [pc, #12]	; (801a594 <tcp_write+0x2dc>)
 801a586:	f240 224a 	movw	r2, #586	; 0x24a
 801a58a:	490a      	ldr	r1, [pc, #40]	; (801a5b4 <tcp_write+0x2fc>)
 801a58c:	4803      	ldr	r0, [pc, #12]	; (801a59c <tcp_write+0x2e4>)
 801a58e:	f006 fe4d 	bl	802122c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a592:	e0ce      	b.n	801a732 <tcp_write+0x47a>
 801a594:	0802656c 	.word	0x0802656c
 801a598:	08026728 	.word	0x08026728
 801a59c:	080265dc 	.word	0x080265dc
 801a5a0:	08026740 	.word	0x08026740
 801a5a4:	08026774 	.word	0x08026774
 801a5a8:	0802678c 	.word	0x0802678c
 801a5ac:	080267ac 	.word	0x080267ac
 801a5b0:	080267cc 	.word	0x080267cc
 801a5b4:	080267f8 	.word	0x080267f8
    struct pbuf *p;
    u16_t left = len - pos;
 801a5b8:	88fa      	ldrh	r2, [r7, #6]
 801a5ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5be:	1ad3      	subs	r3, r2, r3
 801a5c0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a5c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a5ca:	1ad3      	subs	r3, r2, r3
 801a5cc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a5ce:	8b7a      	ldrh	r2, [r7, #26]
 801a5d0:	8bbb      	ldrh	r3, [r7, #28]
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	bf28      	it	cs
 801a5d6:	4613      	movcs	r3, r2
 801a5d8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a5da:	797b      	ldrb	r3, [r7, #5]
 801a5dc:	f003 0301 	and.w	r3, r3, #1
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d036      	beq.n	801a652 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a5e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a5e8:	b29a      	uxth	r2, r3
 801a5ea:	8b3b      	ldrh	r3, [r7, #24]
 801a5ec:	4413      	add	r3, r2
 801a5ee:	b299      	uxth	r1, r3
 801a5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	bf0c      	ite	eq
 801a5f6:	2301      	moveq	r3, #1
 801a5f8:	2300      	movne	r3, #0
 801a5fa:	b2db      	uxtb	r3, r3
 801a5fc:	f107 0012 	add.w	r0, r7, #18
 801a600:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a602:	9302      	str	r3, [sp, #8]
 801a604:	797b      	ldrb	r3, [r7, #5]
 801a606:	9301      	str	r3, [sp, #4]
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	9300      	str	r3, [sp, #0]
 801a60c:	4603      	mov	r3, r0
 801a60e:	2036      	movs	r0, #54	; 0x36
 801a610:	f7ff fd5e 	bl	801a0d0 <tcp_pbuf_prealloc>
 801a614:	6338      	str	r0, [r7, #48]	; 0x30
 801a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f000 8178 	beq.w	801a90e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a620:	895b      	ldrh	r3, [r3, #10]
 801a622:	8b3a      	ldrh	r2, [r7, #24]
 801a624:	429a      	cmp	r2, r3
 801a626:	d906      	bls.n	801a636 <tcp_write+0x37e>
 801a628:	4b8c      	ldr	r3, [pc, #560]	; (801a85c <tcp_write+0x5a4>)
 801a62a:	f240 2266 	movw	r2, #614	; 0x266
 801a62e:	498c      	ldr	r1, [pc, #560]	; (801a860 <tcp_write+0x5a8>)
 801a630:	488c      	ldr	r0, [pc, #560]	; (801a864 <tcp_write+0x5ac>)
 801a632:	f006 fdfb 	bl	802122c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a638:	685a      	ldr	r2, [r3, #4]
 801a63a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a63e:	18d0      	adds	r0, r2, r3
 801a640:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a644:	68ba      	ldr	r2, [r7, #8]
 801a646:	4413      	add	r3, r2
 801a648:	8b3a      	ldrh	r2, [r7, #24]
 801a64a:	4619      	mov	r1, r3
 801a64c:	f006 f97c 	bl	8020948 <memcpy>
 801a650:	e02f      	b.n	801a6b2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a652:	8a7b      	ldrh	r3, [r7, #18]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d006      	beq.n	801a666 <tcp_write+0x3ae>
 801a658:	4b80      	ldr	r3, [pc, #512]	; (801a85c <tcp_write+0x5a4>)
 801a65a:	f240 2271 	movw	r2, #625	; 0x271
 801a65e:	4982      	ldr	r1, [pc, #520]	; (801a868 <tcp_write+0x5b0>)
 801a660:	4880      	ldr	r0, [pc, #512]	; (801a864 <tcp_write+0x5ac>)
 801a662:	f006 fde3 	bl	802122c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a666:	8b3b      	ldrh	r3, [r7, #24]
 801a668:	2201      	movs	r2, #1
 801a66a:	4619      	mov	r1, r3
 801a66c:	2036      	movs	r0, #54	; 0x36
 801a66e:	f7f9 fac9 	bl	8013c04 <pbuf_alloc>
 801a672:	6178      	str	r0, [r7, #20]
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	2b00      	cmp	r3, #0
 801a678:	f000 814b 	beq.w	801a912 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a67c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a680:	68ba      	ldr	r2, [r7, #8]
 801a682:	441a      	add	r2, r3
 801a684:	697b      	ldr	r3, [r7, #20]
 801a686:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a68c:	b29b      	uxth	r3, r3
 801a68e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a692:	4619      	mov	r1, r3
 801a694:	2036      	movs	r0, #54	; 0x36
 801a696:	f7f9 fab5 	bl	8013c04 <pbuf_alloc>
 801a69a:	6338      	str	r0, [r7, #48]	; 0x30
 801a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d103      	bne.n	801a6aa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a6a2:	6978      	ldr	r0, [r7, #20]
 801a6a4:	f7f9 fdc4 	bl	8014230 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a6a8:	e136      	b.n	801a918 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a6aa:	6979      	ldr	r1, [r7, #20]
 801a6ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6ae:	f7f9 fe8d 	bl	80143cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a6b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6b4:	f7f9 fe4a 	bl	801434c <pbuf_clen>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	461a      	mov	r2, r3
 801a6bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a6c0:	4413      	add	r3, r2
 801a6c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a6c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a6ca:	2b09      	cmp	r3, #9
 801a6cc:	d903      	bls.n	801a6d6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a6ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6d0:	f7f9 fdae 	bl	8014230 <pbuf_free>
      goto memerr;
 801a6d4:	e120      	b.n	801a918 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a6da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a6de:	441a      	add	r2, r3
 801a6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6e4:	9300      	str	r3, [sp, #0]
 801a6e6:	4613      	mov	r3, r2
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a6ec:	68f8      	ldr	r0, [r7, #12]
 801a6ee:	f7ff fc51 	bl	8019f94 <tcp_create_segment>
 801a6f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	f000 810d 	beq.w	801a916 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d102      	bne.n	801a708 <tcp_write+0x450>
      queue = seg;
 801a702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a704:	647b      	str	r3, [r7, #68]	; 0x44
 801a706:	e00c      	b.n	801a722 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d106      	bne.n	801a71c <tcp_write+0x464>
 801a70e:	4b53      	ldr	r3, [pc, #332]	; (801a85c <tcp_write+0x5a4>)
 801a710:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a714:	4955      	ldr	r1, [pc, #340]	; (801a86c <tcp_write+0x5b4>)
 801a716:	4853      	ldr	r0, [pc, #332]	; (801a864 <tcp_write+0x5ac>)
 801a718:	f006 fd88 	bl	802122c <iprintf>
      prev_seg->next = seg;
 801a71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a71e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a720:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a724:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a726:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a72a:	8b3b      	ldrh	r3, [r7, #24]
 801a72c:	4413      	add	r3, r2
 801a72e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801a732:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a736:	88fb      	ldrh	r3, [r7, #6]
 801a738:	429a      	cmp	r2, r3
 801a73a:	f4ff af3d 	bcc.w	801a5b8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a73e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a740:	2b00      	cmp	r3, #0
 801a742:	d02c      	beq.n	801a79e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a746:	685b      	ldr	r3, [r3, #4]
 801a748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a74a:	e01e      	b.n	801a78a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a74e:	891a      	ldrh	r2, [r3, #8]
 801a750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a752:	4413      	add	r3, r2
 801a754:	b29a      	uxth	r2, r3
 801a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a758:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d110      	bne.n	801a784 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a764:	685b      	ldr	r3, [r3, #4]
 801a766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a768:	8952      	ldrh	r2, [r2, #10]
 801a76a:	4413      	add	r3, r2
 801a76c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a76e:	68b9      	ldr	r1, [r7, #8]
 801a770:	4618      	mov	r0, r3
 801a772:	f006 f8e9 	bl	8020948 <memcpy>
        p->len += oversize_used;
 801a776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a778:	895a      	ldrh	r2, [r3, #10]
 801a77a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a77c:	4413      	add	r3, r2
 801a77e:	b29a      	uxth	r2, r3
 801a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a782:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d1dd      	bne.n	801a74c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801a790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a792:	891a      	ldrh	r2, [r3, #8]
 801a794:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a796:	4413      	add	r3, r2
 801a798:	b29a      	uxth	r2, r3
 801a79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a79c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a79e:	8a7a      	ldrh	r2, [r7, #18]
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d018      	beq.n	801a7de <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d106      	bne.n	801a7c0 <tcp_write+0x508>
 801a7b2:	4b2a      	ldr	r3, [pc, #168]	; (801a85c <tcp_write+0x5a4>)
 801a7b4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801a7b8:	492d      	ldr	r1, [pc, #180]	; (801a870 <tcp_write+0x5b8>)
 801a7ba:	482a      	ldr	r0, [pc, #168]	; (801a864 <tcp_write+0x5ac>)
 801a7bc:	f006 fd36 	bl	802122c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7c2:	685b      	ldr	r3, [r3, #4]
 801a7c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7f9 fe00 	bl	80143cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7ce:	891a      	ldrh	r2, [r3, #8]
 801a7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7d2:	891b      	ldrh	r3, [r3, #8]
 801a7d4:	4413      	add	r3, r2
 801a7d6:	b29a      	uxth	r2, r3
 801a7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7da:	811a      	strh	r2, [r3, #8]
 801a7dc:	e037      	b.n	801a84e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801a7de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d034      	beq.n	801a84e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d003      	beq.n	801a7f2 <tcp_write+0x53a>
 801a7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d106      	bne.n	801a800 <tcp_write+0x548>
 801a7f2:	4b1a      	ldr	r3, [pc, #104]	; (801a85c <tcp_write+0x5a4>)
 801a7f4:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a7f8:	491e      	ldr	r1, [pc, #120]	; (801a874 <tcp_write+0x5bc>)
 801a7fa:	481a      	ldr	r0, [pc, #104]	; (801a864 <tcp_write+0x5ac>)
 801a7fc:	f006 fd16 	bl	802122c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a802:	685b      	ldr	r3, [r3, #4]
 801a804:	62bb      	str	r3, [r7, #40]	; 0x28
 801a806:	e009      	b.n	801a81c <tcp_write+0x564>
      p->tot_len += extendlen;
 801a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a80a:	891a      	ldrh	r2, [r3, #8]
 801a80c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a80e:	4413      	add	r3, r2
 801a810:	b29a      	uxth	r2, r3
 801a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a814:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d1f1      	bne.n	801a808 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a826:	891a      	ldrh	r2, [r3, #8]
 801a828:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a82a:	4413      	add	r3, r2
 801a82c:	b29a      	uxth	r2, r3
 801a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a830:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a834:	895a      	ldrh	r2, [r3, #10]
 801a836:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a838:	4413      	add	r3, r2
 801a83a:	b29a      	uxth	r2, r3
 801a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a83e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a842:	891a      	ldrh	r2, [r3, #8]
 801a844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a846:	4413      	add	r3, r2
 801a848:	b29a      	uxth	r2, r3
 801a84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a84c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a850:	2b00      	cmp	r3, #0
 801a852:	d111      	bne.n	801a878 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a858:	66da      	str	r2, [r3, #108]	; 0x6c
 801a85a:	e010      	b.n	801a87e <tcp_write+0x5c6>
 801a85c:	0802656c 	.word	0x0802656c
 801a860:	08026828 	.word	0x08026828
 801a864:	080265dc 	.word	0x080265dc
 801a868:	08026868 	.word	0x08026868
 801a86c:	08026878 	.word	0x08026878
 801a870:	0802688c 	.word	0x0802688c
 801a874:	080268c4 	.word	0x080268c4
  } else {
    last_unsent->next = queue;
 801a878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a87a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a87c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a882:	88fb      	ldrh	r3, [r7, #6]
 801a884:	441a      	add	r2, r3
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a890:	88fb      	ldrh	r3, [r7, #6]
 801a892:	1ad3      	subs	r3, r2, r3
 801a894:	b29a      	uxth	r2, r3
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a8a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d00e      	beq.n	801a8ce <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d10a      	bne.n	801a8ce <tcp_write+0x616>
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d106      	bne.n	801a8ce <tcp_write+0x616>
 801a8c0:	4b2c      	ldr	r3, [pc, #176]	; (801a974 <tcp_write+0x6bc>)
 801a8c2:	f240 3212 	movw	r2, #786	; 0x312
 801a8c6:	492c      	ldr	r1, [pc, #176]	; (801a978 <tcp_write+0x6c0>)
 801a8c8:	482c      	ldr	r0, [pc, #176]	; (801a97c <tcp_write+0x6c4>)
 801a8ca:	f006 fcaf 	bl	802122c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d016      	beq.n	801a902 <tcp_write+0x64a>
 801a8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8d6:	68db      	ldr	r3, [r3, #12]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d012      	beq.n	801a902 <tcp_write+0x64a>
 801a8dc:	797b      	ldrb	r3, [r7, #5]
 801a8de:	f003 0302 	and.w	r3, r3, #2
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d10d      	bne.n	801a902 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8e8:	68db      	ldr	r3, [r3, #12]
 801a8ea:	899b      	ldrh	r3, [r3, #12]
 801a8ec:	b29c      	uxth	r4, r3
 801a8ee:	2008      	movs	r0, #8
 801a8f0:	f7f5 faf2 	bl	800fed8 <lwip_htons>
 801a8f4:	4603      	mov	r3, r0
 801a8f6:	461a      	mov	r2, r3
 801a8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8fa:	68db      	ldr	r3, [r3, #12]
 801a8fc:	4322      	orrs	r2, r4
 801a8fe:	b292      	uxth	r2, r2
 801a900:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a902:	2300      	movs	r3, #0
 801a904:	e031      	b.n	801a96a <tcp_write+0x6b2>
          goto memerr;
 801a906:	bf00      	nop
 801a908:	e006      	b.n	801a918 <tcp_write+0x660>
            goto memerr;
 801a90a:	bf00      	nop
 801a90c:	e004      	b.n	801a918 <tcp_write+0x660>
        goto memerr;
 801a90e:	bf00      	nop
 801a910:	e002      	b.n	801a918 <tcp_write+0x660>
        goto memerr;
 801a912:	bf00      	nop
 801a914:	e000      	b.n	801a918 <tcp_write+0x660>
      goto memerr;
 801a916:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	8b5b      	ldrh	r3, [r3, #26]
 801a91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a920:	b29a      	uxth	r2, r3
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d002      	beq.n	801a932 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801a92c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a92e:	f7f9 fc7f 	bl	8014230 <pbuf_free>
  }
  if (queue != NULL) {
 801a932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a934:	2b00      	cmp	r3, #0
 801a936:	d002      	beq.n	801a93e <tcp_write+0x686>
    tcp_segs_free(queue);
 801a938:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a93a:	f7fc fb6f 	bl	801701c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a944:	2b00      	cmp	r3, #0
 801a946:	d00e      	beq.n	801a966 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d10a      	bne.n	801a966 <tcp_write+0x6ae>
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a954:	2b00      	cmp	r3, #0
 801a956:	d106      	bne.n	801a966 <tcp_write+0x6ae>
 801a958:	4b06      	ldr	r3, [pc, #24]	; (801a974 <tcp_write+0x6bc>)
 801a95a:	f240 3227 	movw	r2, #807	; 0x327
 801a95e:	4906      	ldr	r1, [pc, #24]	; (801a978 <tcp_write+0x6c0>)
 801a960:	4806      	ldr	r0, [pc, #24]	; (801a97c <tcp_write+0x6c4>)
 801a962:	f006 fc63 	bl	802122c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	375c      	adds	r7, #92	; 0x5c
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd90      	pop	{r4, r7, pc}
 801a972:	bf00      	nop
 801a974:	0802656c 	.word	0x0802656c
 801a978:	080268fc 	.word	0x080268fc
 801a97c:	080265dc 	.word	0x080265dc

0801a980 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a980:	b590      	push	{r4, r7, lr}
 801a982:	b08b      	sub	sp, #44	; 0x2c
 801a984:	af02      	add	r7, sp, #8
 801a986:	6078      	str	r0, [r7, #4]
 801a988:	460b      	mov	r3, r1
 801a98a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a98c:	2300      	movs	r3, #0
 801a98e:	61fb      	str	r3, [r7, #28]
 801a990:	2300      	movs	r3, #0
 801a992:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a994:	2300      	movs	r3, #0
 801a996:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d106      	bne.n	801a9ac <tcp_split_unsent_seg+0x2c>
 801a99e:	4b95      	ldr	r3, [pc, #596]	; (801abf4 <tcp_split_unsent_seg+0x274>)
 801a9a0:	f240 324b 	movw	r2, #843	; 0x34b
 801a9a4:	4994      	ldr	r1, [pc, #592]	; (801abf8 <tcp_split_unsent_seg+0x278>)
 801a9a6:	4895      	ldr	r0, [pc, #596]	; (801abfc <tcp_split_unsent_seg+0x27c>)
 801a9a8:	f006 fc40 	bl	802122c <iprintf>

  useg = pcb->unsent;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a9b2:	697b      	ldr	r3, [r7, #20]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d102      	bne.n	801a9be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a9b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a9bc:	e116      	b.n	801abec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a9be:	887b      	ldrh	r3, [r7, #2]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d109      	bne.n	801a9d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a9c4:	4b8b      	ldr	r3, [pc, #556]	; (801abf4 <tcp_split_unsent_seg+0x274>)
 801a9c6:	f240 3253 	movw	r2, #851	; 0x353
 801a9ca:	498d      	ldr	r1, [pc, #564]	; (801ac00 <tcp_split_unsent_seg+0x280>)
 801a9cc:	488b      	ldr	r0, [pc, #556]	; (801abfc <tcp_split_unsent_seg+0x27c>)
 801a9ce:	f006 fc2d 	bl	802122c <iprintf>
    return ERR_VAL;
 801a9d2:	f06f 0305 	mvn.w	r3, #5
 801a9d6:	e109      	b.n	801abec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	891b      	ldrh	r3, [r3, #8]
 801a9dc:	887a      	ldrh	r2, [r7, #2]
 801a9de:	429a      	cmp	r2, r3
 801a9e0:	d301      	bcc.n	801a9e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	e102      	b.n	801abec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a9ea:	887a      	ldrh	r2, [r7, #2]
 801a9ec:	429a      	cmp	r2, r3
 801a9ee:	d906      	bls.n	801a9fe <tcp_split_unsent_seg+0x7e>
 801a9f0:	4b80      	ldr	r3, [pc, #512]	; (801abf4 <tcp_split_unsent_seg+0x274>)
 801a9f2:	f240 325b 	movw	r2, #859	; 0x35b
 801a9f6:	4983      	ldr	r1, [pc, #524]	; (801ac04 <tcp_split_unsent_seg+0x284>)
 801a9f8:	4880      	ldr	r0, [pc, #512]	; (801abfc <tcp_split_unsent_seg+0x27c>)
 801a9fa:	f006 fc17 	bl	802122c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a9fe:	697b      	ldr	r3, [r7, #20]
 801aa00:	891b      	ldrh	r3, [r3, #8]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d106      	bne.n	801aa14 <tcp_split_unsent_seg+0x94>
 801aa06:	4b7b      	ldr	r3, [pc, #492]	; (801abf4 <tcp_split_unsent_seg+0x274>)
 801aa08:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801aa0c:	497e      	ldr	r1, [pc, #504]	; (801ac08 <tcp_split_unsent_seg+0x288>)
 801aa0e:	487b      	ldr	r0, [pc, #492]	; (801abfc <tcp_split_unsent_seg+0x27c>)
 801aa10:	f006 fc0c 	bl	802122c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801aa14:	697b      	ldr	r3, [r7, #20]
 801aa16:	7a9b      	ldrb	r3, [r3, #10]
 801aa18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801aa1a:	7bfb      	ldrb	r3, [r7, #15]
 801aa1c:	009b      	lsls	r3, r3, #2
 801aa1e:	b2db      	uxtb	r3, r3
 801aa20:	f003 0304 	and.w	r3, r3, #4
 801aa24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801aa26:	697b      	ldr	r3, [r7, #20]
 801aa28:	891a      	ldrh	r2, [r3, #8]
 801aa2a:	887b      	ldrh	r3, [r7, #2]
 801aa2c:	1ad3      	subs	r3, r2, r3
 801aa2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801aa30:	7bbb      	ldrb	r3, [r7, #14]
 801aa32:	b29a      	uxth	r2, r3
 801aa34:	89bb      	ldrh	r3, [r7, #12]
 801aa36:	4413      	add	r3, r2
 801aa38:	b29b      	uxth	r3, r3
 801aa3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa3e:	4619      	mov	r1, r3
 801aa40:	2036      	movs	r0, #54	; 0x36
 801aa42:	f7f9 f8df 	bl	8013c04 <pbuf_alloc>
 801aa46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa48:	693b      	ldr	r3, [r7, #16]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	f000 80b7 	beq.w	801abbe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801aa50:	697b      	ldr	r3, [r7, #20]
 801aa52:	685b      	ldr	r3, [r3, #4]
 801aa54:	891a      	ldrh	r2, [r3, #8]
 801aa56:	697b      	ldr	r3, [r7, #20]
 801aa58:	891b      	ldrh	r3, [r3, #8]
 801aa5a:	1ad3      	subs	r3, r2, r3
 801aa5c:	b29a      	uxth	r2, r3
 801aa5e:	887b      	ldrh	r3, [r7, #2]
 801aa60:	4413      	add	r3, r2
 801aa62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801aa64:	697b      	ldr	r3, [r7, #20]
 801aa66:	6858      	ldr	r0, [r3, #4]
 801aa68:	693b      	ldr	r3, [r7, #16]
 801aa6a:	685a      	ldr	r2, [r3, #4]
 801aa6c:	7bbb      	ldrb	r3, [r7, #14]
 801aa6e:	18d1      	adds	r1, r2, r3
 801aa70:	897b      	ldrh	r3, [r7, #10]
 801aa72:	89ba      	ldrh	r2, [r7, #12]
 801aa74:	f7f9 fde2 	bl	801463c <pbuf_copy_partial>
 801aa78:	4603      	mov	r3, r0
 801aa7a:	461a      	mov	r2, r3
 801aa7c:	89bb      	ldrh	r3, [r7, #12]
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	f040 809f 	bne.w	801abc2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801aa84:	697b      	ldr	r3, [r7, #20]
 801aa86:	68db      	ldr	r3, [r3, #12]
 801aa88:	899b      	ldrh	r3, [r3, #12]
 801aa8a:	b29b      	uxth	r3, r3
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f7f5 fa23 	bl	800fed8 <lwip_htons>
 801aa92:	4603      	mov	r3, r0
 801aa94:	b2db      	uxtb	r3, r3
 801aa96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801aaa0:	7efb      	ldrb	r3, [r7, #27]
 801aaa2:	f003 0308 	and.w	r3, r3, #8
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d007      	beq.n	801aaba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801aaaa:	7efb      	ldrb	r3, [r7, #27]
 801aaac:	f023 0308 	bic.w	r3, r3, #8
 801aab0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801aab2:	7ebb      	ldrb	r3, [r7, #26]
 801aab4:	f043 0308 	orr.w	r3, r3, #8
 801aab8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801aaba:	7efb      	ldrb	r3, [r7, #27]
 801aabc:	f003 0301 	and.w	r3, r3, #1
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d007      	beq.n	801aad4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801aac4:	7efb      	ldrb	r3, [r7, #27]
 801aac6:	f023 0301 	bic.w	r3, r3, #1
 801aaca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801aacc:	7ebb      	ldrb	r3, [r7, #26]
 801aace:	f043 0301 	orr.w	r3, r3, #1
 801aad2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801aad4:	697b      	ldr	r3, [r7, #20]
 801aad6:	68db      	ldr	r3, [r3, #12]
 801aad8:	685b      	ldr	r3, [r3, #4]
 801aada:	4618      	mov	r0, r3
 801aadc:	f7f5 fa11 	bl	800ff02 <lwip_htonl>
 801aae0:	4602      	mov	r2, r0
 801aae2:	887b      	ldrh	r3, [r7, #2]
 801aae4:	18d1      	adds	r1, r2, r3
 801aae6:	7eba      	ldrb	r2, [r7, #26]
 801aae8:	7bfb      	ldrb	r3, [r7, #15]
 801aaea:	9300      	str	r3, [sp, #0]
 801aaec:	460b      	mov	r3, r1
 801aaee:	6939      	ldr	r1, [r7, #16]
 801aaf0:	6878      	ldr	r0, [r7, #4]
 801aaf2:	f7ff fa4f 	bl	8019f94 <tcp_create_segment>
 801aaf6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801aaf8:	69fb      	ldr	r3, [r7, #28]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d063      	beq.n	801abc6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801aafe:	697b      	ldr	r3, [r7, #20]
 801ab00:	685b      	ldr	r3, [r3, #4]
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7f9 fc22 	bl	801434c <pbuf_clen>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	461a      	mov	r2, r3
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab12:	1a9b      	subs	r3, r3, r2
 801ab14:	b29a      	uxth	r2, r3
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ab1c:	697b      	ldr	r3, [r7, #20]
 801ab1e:	6858      	ldr	r0, [r3, #4]
 801ab20:	697b      	ldr	r3, [r7, #20]
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	891a      	ldrh	r2, [r3, #8]
 801ab26:	89bb      	ldrh	r3, [r7, #12]
 801ab28:	1ad3      	subs	r3, r2, r3
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	4619      	mov	r1, r3
 801ab2e:	f7f9 f9c7 	bl	8013ec0 <pbuf_realloc>
  useg->len -= remainder;
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	891a      	ldrh	r2, [r3, #8]
 801ab36:	89bb      	ldrh	r3, [r7, #12]
 801ab38:	1ad3      	subs	r3, r2, r3
 801ab3a:	b29a      	uxth	r2, r3
 801ab3c:	697b      	ldr	r3, [r7, #20]
 801ab3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ab40:	697b      	ldr	r3, [r7, #20]
 801ab42:	68db      	ldr	r3, [r3, #12]
 801ab44:	899b      	ldrh	r3, [r3, #12]
 801ab46:	b29c      	uxth	r4, r3
 801ab48:	7efb      	ldrb	r3, [r7, #27]
 801ab4a:	b29b      	uxth	r3, r3
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f7f5 f9c3 	bl	800fed8 <lwip_htons>
 801ab52:	4603      	mov	r3, r0
 801ab54:	461a      	mov	r2, r3
 801ab56:	697b      	ldr	r3, [r7, #20]
 801ab58:	68db      	ldr	r3, [r3, #12]
 801ab5a:	4322      	orrs	r2, r4
 801ab5c:	b292      	uxth	r2, r2
 801ab5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ab60:	697b      	ldr	r3, [r7, #20]
 801ab62:	685b      	ldr	r3, [r3, #4]
 801ab64:	4618      	mov	r0, r3
 801ab66:	f7f9 fbf1 	bl	801434c <pbuf_clen>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab74:	4413      	add	r3, r2
 801ab76:	b29a      	uxth	r2, r3
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ab7e:	69fb      	ldr	r3, [r7, #28]
 801ab80:	685b      	ldr	r3, [r3, #4]
 801ab82:	4618      	mov	r0, r3
 801ab84:	f7f9 fbe2 	bl	801434c <pbuf_clen>
 801ab88:	4603      	mov	r3, r0
 801ab8a:	461a      	mov	r2, r3
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab92:	4413      	add	r3, r2
 801ab94:	b29a      	uxth	r2, r3
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	681a      	ldr	r2, [r3, #0]
 801aba0:	69fb      	ldr	r3, [r7, #28]
 801aba2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801aba4:	697b      	ldr	r3, [r7, #20]
 801aba6:	69fa      	ldr	r2, [r7, #28]
 801aba8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801abaa:	69fb      	ldr	r3, [r7, #28]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d103      	bne.n	801abba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	2200      	movs	r2, #0
 801abb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801abba:	2300      	movs	r3, #0
 801abbc:	e016      	b.n	801abec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801abbe:	bf00      	nop
 801abc0:	e002      	b.n	801abc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801abc2:	bf00      	nop
 801abc4:	e000      	b.n	801abc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801abc6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801abc8:	69fb      	ldr	r3, [r7, #28]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d006      	beq.n	801abdc <tcp_split_unsent_seg+0x25c>
 801abce:	4b09      	ldr	r3, [pc, #36]	; (801abf4 <tcp_split_unsent_seg+0x274>)
 801abd0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801abd4:	490d      	ldr	r1, [pc, #52]	; (801ac0c <tcp_split_unsent_seg+0x28c>)
 801abd6:	4809      	ldr	r0, [pc, #36]	; (801abfc <tcp_split_unsent_seg+0x27c>)
 801abd8:	f006 fb28 	bl	802122c <iprintf>
  if (p != NULL) {
 801abdc:	693b      	ldr	r3, [r7, #16]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d002      	beq.n	801abe8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801abe2:	6938      	ldr	r0, [r7, #16]
 801abe4:	f7f9 fb24 	bl	8014230 <pbuf_free>
  }

  return ERR_MEM;
 801abe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801abec:	4618      	mov	r0, r3
 801abee:	3724      	adds	r7, #36	; 0x24
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd90      	pop	{r4, r7, pc}
 801abf4:	0802656c 	.word	0x0802656c
 801abf8:	0802691c 	.word	0x0802691c
 801abfc:	080265dc 	.word	0x080265dc
 801ac00:	08026940 	.word	0x08026940
 801ac04:	08026964 	.word	0x08026964
 801ac08:	08026974 	.word	0x08026974
 801ac0c:	08026984 	.word	0x08026984

0801ac10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801ac10:	b590      	push	{r4, r7, lr}
 801ac12:	b085      	sub	sp, #20
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d106      	bne.n	801ac2c <tcp_send_fin+0x1c>
 801ac1e:	4b21      	ldr	r3, [pc, #132]	; (801aca4 <tcp_send_fin+0x94>)
 801ac20:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ac24:	4920      	ldr	r1, [pc, #128]	; (801aca8 <tcp_send_fin+0x98>)
 801ac26:	4821      	ldr	r0, [pc, #132]	; (801acac <tcp_send_fin+0x9c>)
 801ac28:	f006 fb00 	bl	802122c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d02e      	beq.n	801ac92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac38:	60fb      	str	r3, [r7, #12]
 801ac3a:	e002      	b.n	801ac42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d1f8      	bne.n	801ac3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	68db      	ldr	r3, [r3, #12]
 801ac4e:	899b      	ldrh	r3, [r3, #12]
 801ac50:	b29b      	uxth	r3, r3
 801ac52:	4618      	mov	r0, r3
 801ac54:	f7f5 f940 	bl	800fed8 <lwip_htons>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	b2db      	uxtb	r3, r3
 801ac5c:	f003 0307 	and.w	r3, r3, #7
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d116      	bne.n	801ac92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	68db      	ldr	r3, [r3, #12]
 801ac68:	899b      	ldrh	r3, [r3, #12]
 801ac6a:	b29c      	uxth	r4, r3
 801ac6c:	2001      	movs	r0, #1
 801ac6e:	f7f5 f933 	bl	800fed8 <lwip_htons>
 801ac72:	4603      	mov	r3, r0
 801ac74:	461a      	mov	r2, r3
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	68db      	ldr	r3, [r3, #12]
 801ac7a:	4322      	orrs	r2, r4
 801ac7c:	b292      	uxth	r2, r2
 801ac7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	8b5b      	ldrh	r3, [r3, #26]
 801ac84:	f043 0320 	orr.w	r3, r3, #32
 801ac88:	b29a      	uxth	r2, r3
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ac8e:	2300      	movs	r3, #0
 801ac90:	e004      	b.n	801ac9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ac92:	2101      	movs	r1, #1
 801ac94:	6878      	ldr	r0, [r7, #4]
 801ac96:	f000 f80b 	bl	801acb0 <tcp_enqueue_flags>
 801ac9a:	4603      	mov	r3, r0
}
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	3714      	adds	r7, #20
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd90      	pop	{r4, r7, pc}
 801aca4:	0802656c 	.word	0x0802656c
 801aca8:	08026990 	.word	0x08026990
 801acac:	080265dc 	.word	0x080265dc

0801acb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b08a      	sub	sp, #40	; 0x28
 801acb4:	af02      	add	r7, sp, #8
 801acb6:	6078      	str	r0, [r7, #4]
 801acb8:	460b      	mov	r3, r1
 801acba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801acbc:	2300      	movs	r3, #0
 801acbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801acc0:	2300      	movs	r3, #0
 801acc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801acc4:	78fb      	ldrb	r3, [r7, #3]
 801acc6:	f003 0303 	and.w	r3, r3, #3
 801acca:	2b00      	cmp	r3, #0
 801accc:	d106      	bne.n	801acdc <tcp_enqueue_flags+0x2c>
 801acce:	4b67      	ldr	r3, [pc, #412]	; (801ae6c <tcp_enqueue_flags+0x1bc>)
 801acd0:	f240 4211 	movw	r2, #1041	; 0x411
 801acd4:	4966      	ldr	r1, [pc, #408]	; (801ae70 <tcp_enqueue_flags+0x1c0>)
 801acd6:	4867      	ldr	r0, [pc, #412]	; (801ae74 <tcp_enqueue_flags+0x1c4>)
 801acd8:	f006 faa8 	bl	802122c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d106      	bne.n	801acf0 <tcp_enqueue_flags+0x40>
 801ace2:	4b62      	ldr	r3, [pc, #392]	; (801ae6c <tcp_enqueue_flags+0x1bc>)
 801ace4:	f240 4213 	movw	r2, #1043	; 0x413
 801ace8:	4963      	ldr	r1, [pc, #396]	; (801ae78 <tcp_enqueue_flags+0x1c8>)
 801acea:	4862      	ldr	r0, [pc, #392]	; (801ae74 <tcp_enqueue_flags+0x1c4>)
 801acec:	f006 fa9e 	bl	802122c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801acf0:	78fb      	ldrb	r3, [r7, #3]
 801acf2:	f003 0302 	and.w	r3, r3, #2
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d001      	beq.n	801acfe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801acfa:	2301      	movs	r3, #1
 801acfc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801acfe:	7ffb      	ldrb	r3, [r7, #31]
 801ad00:	009b      	lsls	r3, r3, #2
 801ad02:	b2db      	uxtb	r3, r3
 801ad04:	f003 0304 	and.w	r3, r3, #4
 801ad08:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ad0a:	7dfb      	ldrb	r3, [r7, #23]
 801ad0c:	b29b      	uxth	r3, r3
 801ad0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad12:	4619      	mov	r1, r3
 801ad14:	2036      	movs	r0, #54	; 0x36
 801ad16:	f7f8 ff75 	bl	8013c04 <pbuf_alloc>
 801ad1a:	6138      	str	r0, [r7, #16]
 801ad1c:	693b      	ldr	r3, [r7, #16]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d109      	bne.n	801ad36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	8b5b      	ldrh	r3, [r3, #26]
 801ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad2a:	b29a      	uxth	r2, r3
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ad30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad34:	e095      	b.n	801ae62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ad36:	693b      	ldr	r3, [r7, #16]
 801ad38:	895a      	ldrh	r2, [r3, #10]
 801ad3a:	7dfb      	ldrb	r3, [r7, #23]
 801ad3c:	b29b      	uxth	r3, r3
 801ad3e:	429a      	cmp	r2, r3
 801ad40:	d206      	bcs.n	801ad50 <tcp_enqueue_flags+0xa0>
 801ad42:	4b4a      	ldr	r3, [pc, #296]	; (801ae6c <tcp_enqueue_flags+0x1bc>)
 801ad44:	f240 4239 	movw	r2, #1081	; 0x439
 801ad48:	494c      	ldr	r1, [pc, #304]	; (801ae7c <tcp_enqueue_flags+0x1cc>)
 801ad4a:	484a      	ldr	r0, [pc, #296]	; (801ae74 <tcp_enqueue_flags+0x1c4>)
 801ad4c:	f006 fa6e 	bl	802122c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ad54:	78fa      	ldrb	r2, [r7, #3]
 801ad56:	7ffb      	ldrb	r3, [r7, #31]
 801ad58:	9300      	str	r3, [sp, #0]
 801ad5a:	460b      	mov	r3, r1
 801ad5c:	6939      	ldr	r1, [r7, #16]
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	f7ff f918 	bl	8019f94 <tcp_create_segment>
 801ad64:	60f8      	str	r0, [r7, #12]
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d109      	bne.n	801ad80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	8b5b      	ldrh	r3, [r3, #26]
 801ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ad7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad7e:	e070      	b.n	801ae62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	68db      	ldr	r3, [r3, #12]
 801ad84:	f003 0303 	and.w	r3, r3, #3
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d006      	beq.n	801ad9a <tcp_enqueue_flags+0xea>
 801ad8c:	4b37      	ldr	r3, [pc, #220]	; (801ae6c <tcp_enqueue_flags+0x1bc>)
 801ad8e:	f240 4242 	movw	r2, #1090	; 0x442
 801ad92:	493b      	ldr	r1, [pc, #236]	; (801ae80 <tcp_enqueue_flags+0x1d0>)
 801ad94:	4837      	ldr	r0, [pc, #220]	; (801ae74 <tcp_enqueue_flags+0x1c4>)
 801ad96:	f006 fa49 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	891b      	ldrh	r3, [r3, #8]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d006      	beq.n	801adb0 <tcp_enqueue_flags+0x100>
 801ada2:	4b32      	ldr	r3, [pc, #200]	; (801ae6c <tcp_enqueue_flags+0x1bc>)
 801ada4:	f240 4243 	movw	r2, #1091	; 0x443
 801ada8:	4936      	ldr	r1, [pc, #216]	; (801ae84 <tcp_enqueue_flags+0x1d4>)
 801adaa:	4832      	ldr	r0, [pc, #200]	; (801ae74 <tcp_enqueue_flags+0x1c4>)
 801adac:	f006 fa3e 	bl	802122c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d103      	bne.n	801adc0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	68fa      	ldr	r2, [r7, #12]
 801adbc:	66da      	str	r2, [r3, #108]	; 0x6c
 801adbe:	e00d      	b.n	801addc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adc4:	61bb      	str	r3, [r7, #24]
 801adc6:	e002      	b.n	801adce <tcp_enqueue_flags+0x11e>
 801adc8:	69bb      	ldr	r3, [r7, #24]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	61bb      	str	r3, [r7, #24]
 801adce:	69bb      	ldr	r3, [r7, #24]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d1f8      	bne.n	801adc8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	68fa      	ldr	r2, [r7, #12]
 801adda:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	2200      	movs	r2, #0
 801ade0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ade4:	78fb      	ldrb	r3, [r7, #3]
 801ade6:	f003 0302 	and.w	r3, r3, #2
 801adea:	2b00      	cmp	r3, #0
 801adec:	d104      	bne.n	801adf8 <tcp_enqueue_flags+0x148>
 801adee:	78fb      	ldrb	r3, [r7, #3]
 801adf0:	f003 0301 	and.w	r3, r3, #1
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d004      	beq.n	801ae02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801adfc:	1c5a      	adds	r2, r3, #1
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ae02:	78fb      	ldrb	r3, [r7, #3]
 801ae04:	f003 0301 	and.w	r3, r3, #1
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d006      	beq.n	801ae1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	8b5b      	ldrh	r3, [r3, #26]
 801ae10:	f043 0320 	orr.w	r3, r3, #32
 801ae14:	b29a      	uxth	r2, r3
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	685b      	ldr	r3, [r3, #4]
 801ae1e:	4618      	mov	r0, r3
 801ae20:	f7f9 fa94 	bl	801434c <pbuf_clen>
 801ae24:	4603      	mov	r3, r0
 801ae26:	461a      	mov	r2, r3
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae2e:	4413      	add	r3, r2
 801ae30:	b29a      	uxth	r2, r3
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d00e      	beq.n	801ae60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d10a      	bne.n	801ae60 <tcp_enqueue_flags+0x1b0>
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d106      	bne.n	801ae60 <tcp_enqueue_flags+0x1b0>
 801ae52:	4b06      	ldr	r3, [pc, #24]	; (801ae6c <tcp_enqueue_flags+0x1bc>)
 801ae54:	f240 4265 	movw	r2, #1125	; 0x465
 801ae58:	490b      	ldr	r1, [pc, #44]	; (801ae88 <tcp_enqueue_flags+0x1d8>)
 801ae5a:	4806      	ldr	r0, [pc, #24]	; (801ae74 <tcp_enqueue_flags+0x1c4>)
 801ae5c:	f006 f9e6 	bl	802122c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ae60:	2300      	movs	r3, #0
}
 801ae62:	4618      	mov	r0, r3
 801ae64:	3720      	adds	r7, #32
 801ae66:	46bd      	mov	sp, r7
 801ae68:	bd80      	pop	{r7, pc}
 801ae6a:	bf00      	nop
 801ae6c:	0802656c 	.word	0x0802656c
 801ae70:	080269ac 	.word	0x080269ac
 801ae74:	080265dc 	.word	0x080265dc
 801ae78:	08026a04 	.word	0x08026a04
 801ae7c:	08026a24 	.word	0x08026a24
 801ae80:	08026a60 	.word	0x08026a60
 801ae84:	08026a78 	.word	0x08026a78
 801ae88:	08026aa4 	.word	0x08026aa4

0801ae8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ae8c:	b5b0      	push	{r4, r5, r7, lr}
 801ae8e:	b08a      	sub	sp, #40	; 0x28
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d106      	bne.n	801aea8 <tcp_output+0x1c>
 801ae9a:	4b9e      	ldr	r3, [pc, #632]	; (801b114 <tcp_output+0x288>)
 801ae9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801aea0:	499d      	ldr	r1, [pc, #628]	; (801b118 <tcp_output+0x28c>)
 801aea2:	489e      	ldr	r0, [pc, #632]	; (801b11c <tcp_output+0x290>)
 801aea4:	f006 f9c2 	bl	802122c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	7d1b      	ldrb	r3, [r3, #20]
 801aeac:	2b01      	cmp	r3, #1
 801aeae:	d106      	bne.n	801aebe <tcp_output+0x32>
 801aeb0:	4b98      	ldr	r3, [pc, #608]	; (801b114 <tcp_output+0x288>)
 801aeb2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801aeb6:	499a      	ldr	r1, [pc, #616]	; (801b120 <tcp_output+0x294>)
 801aeb8:	4898      	ldr	r0, [pc, #608]	; (801b11c <tcp_output+0x290>)
 801aeba:	f006 f9b7 	bl	802122c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801aebe:	4b99      	ldr	r3, [pc, #612]	; (801b124 <tcp_output+0x298>)
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	687a      	ldr	r2, [r7, #4]
 801aec4:	429a      	cmp	r2, r3
 801aec6:	d101      	bne.n	801aecc <tcp_output+0x40>
    return ERR_OK;
 801aec8:	2300      	movs	r3, #0
 801aeca:	e1ce      	b.n	801b26a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aed8:	4293      	cmp	r3, r2
 801aeda:	bf28      	it	cs
 801aedc:	4613      	movcs	r3, r2
 801aede:	b29b      	uxth	r3, r3
 801aee0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aee6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d10b      	bne.n	801af06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	8b5b      	ldrh	r3, [r3, #26]
 801aef2:	f003 0302 	and.w	r3, r3, #2
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	f000 81aa 	beq.w	801b250 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801aefc:	6878      	ldr	r0, [r7, #4]
 801aefe:	f000 fdcb 	bl	801ba98 <tcp_send_empty_ack>
 801af02:	4603      	mov	r3, r0
 801af04:	e1b1      	b.n	801b26a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801af06:	6879      	ldr	r1, [r7, #4]
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	3304      	adds	r3, #4
 801af0c:	461a      	mov	r2, r3
 801af0e:	6878      	ldr	r0, [r7, #4]
 801af10:	f7ff f824 	bl	8019f5c <tcp_route>
 801af14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d102      	bne.n	801af22 <tcp_output+0x96>
    return ERR_RTE;
 801af1c:	f06f 0303 	mvn.w	r3, #3
 801af20:	e1a3      	b.n	801b26a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d003      	beq.n	801af30 <tcp_output+0xa4>
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d111      	bne.n	801af54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d002      	beq.n	801af3c <tcp_output+0xb0>
 801af36:	697b      	ldr	r3, [r7, #20]
 801af38:	3304      	adds	r3, #4
 801af3a:	e000      	b.n	801af3e <tcp_output+0xb2>
 801af3c:	2300      	movs	r3, #0
 801af3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801af40:	693b      	ldr	r3, [r7, #16]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d102      	bne.n	801af4c <tcp_output+0xc0>
      return ERR_RTE;
 801af46:	f06f 0303 	mvn.w	r3, #3
 801af4a:	e18e      	b.n	801b26a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801af4c:	693b      	ldr	r3, [r7, #16]
 801af4e:	681a      	ldr	r2, [r3, #0]
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af56:	68db      	ldr	r3, [r3, #12]
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	4618      	mov	r0, r3
 801af5c:	f7f4 ffd1 	bl	800ff02 <lwip_htonl>
 801af60:	4602      	mov	r2, r0
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af66:	1ad3      	subs	r3, r2, r3
 801af68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af6a:	8912      	ldrh	r2, [r2, #8]
 801af6c:	4413      	add	r3, r2
 801af6e:	69ba      	ldr	r2, [r7, #24]
 801af70:	429a      	cmp	r2, r3
 801af72:	d227      	bcs.n	801afc4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801af7a:	461a      	mov	r2, r3
 801af7c:	69bb      	ldr	r3, [r7, #24]
 801af7e:	4293      	cmp	r3, r2
 801af80:	d114      	bne.n	801afac <tcp_output+0x120>
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af86:	2b00      	cmp	r3, #0
 801af88:	d110      	bne.n	801afac <tcp_output+0x120>
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801af90:	2b00      	cmp	r3, #0
 801af92:	d10b      	bne.n	801afac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	2200      	movs	r2, #0
 801af98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	2201      	movs	r2, #1
 801afa0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	2200      	movs	r2, #0
 801afa8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	8b5b      	ldrh	r3, [r3, #26]
 801afb0:	f003 0302 	and.w	r3, r3, #2
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	f000 814d 	beq.w	801b254 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801afba:	6878      	ldr	r0, [r7, #4]
 801afbc:	f000 fd6c 	bl	801ba98 <tcp_send_empty_ack>
 801afc0:	4603      	mov	r3, r0
 801afc2:	e152      	b.n	801b26a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2200      	movs	r2, #0
 801afc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afd0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801afd2:	6a3b      	ldr	r3, [r7, #32]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	f000 811c 	beq.w	801b212 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801afda:	e002      	b.n	801afe2 <tcp_output+0x156>
 801afdc:	6a3b      	ldr	r3, [r7, #32]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	623b      	str	r3, [r7, #32]
 801afe2:	6a3b      	ldr	r3, [r7, #32]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d1f8      	bne.n	801afdc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801afea:	e112      	b.n	801b212 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afee:	68db      	ldr	r3, [r3, #12]
 801aff0:	899b      	ldrh	r3, [r3, #12]
 801aff2:	b29b      	uxth	r3, r3
 801aff4:	4618      	mov	r0, r3
 801aff6:	f7f4 ff6f 	bl	800fed8 <lwip_htons>
 801affa:	4603      	mov	r3, r0
 801affc:	b2db      	uxtb	r3, r3
 801affe:	f003 0304 	and.w	r3, r3, #4
 801b002:	2b00      	cmp	r3, #0
 801b004:	d006      	beq.n	801b014 <tcp_output+0x188>
 801b006:	4b43      	ldr	r3, [pc, #268]	; (801b114 <tcp_output+0x288>)
 801b008:	f240 5236 	movw	r2, #1334	; 0x536
 801b00c:	4946      	ldr	r1, [pc, #280]	; (801b128 <tcp_output+0x29c>)
 801b00e:	4843      	ldr	r0, [pc, #268]	; (801b11c <tcp_output+0x290>)
 801b010:	f006 f90c 	bl	802122c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d01f      	beq.n	801b05c <tcp_output+0x1d0>
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	8b5b      	ldrh	r3, [r3, #26]
 801b020:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b024:	2b00      	cmp	r3, #0
 801b026:	d119      	bne.n	801b05c <tcp_output+0x1d0>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d00b      	beq.n	801b048 <tcp_output+0x1bc>
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d110      	bne.n	801b05c <tcp_output+0x1d0>
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b03e:	891a      	ldrh	r2, [r3, #8]
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b044:	429a      	cmp	r2, r3
 801b046:	d209      	bcs.n	801b05c <tcp_output+0x1d0>
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d004      	beq.n	801b05c <tcp_output+0x1d0>
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b058:	2b08      	cmp	r3, #8
 801b05a:	d901      	bls.n	801b060 <tcp_output+0x1d4>
 801b05c:	2301      	movs	r3, #1
 801b05e:	e000      	b.n	801b062 <tcp_output+0x1d6>
 801b060:	2300      	movs	r3, #0
 801b062:	2b00      	cmp	r3, #0
 801b064:	d106      	bne.n	801b074 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	8b5b      	ldrh	r3, [r3, #26]
 801b06a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b06e:	2b00      	cmp	r3, #0
 801b070:	f000 80e4 	beq.w	801b23c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	7d1b      	ldrb	r3, [r3, #20]
 801b078:	2b02      	cmp	r3, #2
 801b07a:	d00d      	beq.n	801b098 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b07e:	68db      	ldr	r3, [r3, #12]
 801b080:	899b      	ldrh	r3, [r3, #12]
 801b082:	b29c      	uxth	r4, r3
 801b084:	2010      	movs	r0, #16
 801b086:	f7f4 ff27 	bl	800fed8 <lwip_htons>
 801b08a:	4603      	mov	r3, r0
 801b08c:	461a      	mov	r2, r3
 801b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b090:	68db      	ldr	r3, [r3, #12]
 801b092:	4322      	orrs	r2, r4
 801b094:	b292      	uxth	r2, r2
 801b096:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b098:	697a      	ldr	r2, [r7, #20]
 801b09a:	6879      	ldr	r1, [r7, #4]
 801b09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b09e:	f000 f909 	bl	801b2b4 <tcp_output_segment>
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d009      	beq.n	801b0c2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	8b5b      	ldrh	r3, [r3, #26]
 801b0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0b6:	b29a      	uxth	r2, r3
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	835a      	strh	r2, [r3, #26]
      return err;
 801b0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b0c0:	e0d3      	b.n	801b26a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0c4:	681a      	ldr	r2, [r3, #0]
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	7d1b      	ldrb	r3, [r3, #20]
 801b0ce:	2b02      	cmp	r3, #2
 801b0d0:	d006      	beq.n	801b0e0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	8b5b      	ldrh	r3, [r3, #26]
 801b0d6:	f023 0303 	bic.w	r3, r3, #3
 801b0da:	b29a      	uxth	r2, r3
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0e2:	68db      	ldr	r3, [r3, #12]
 801b0e4:	685b      	ldr	r3, [r3, #4]
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	f7f4 ff0b 	bl	800ff02 <lwip_htonl>
 801b0ec:	4604      	mov	r4, r0
 801b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f0:	891b      	ldrh	r3, [r3, #8]
 801b0f2:	461d      	mov	r5, r3
 801b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f6:	68db      	ldr	r3, [r3, #12]
 801b0f8:	899b      	ldrh	r3, [r3, #12]
 801b0fa:	b29b      	uxth	r3, r3
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7f4 feeb 	bl	800fed8 <lwip_htons>
 801b102:	4603      	mov	r3, r0
 801b104:	b2db      	uxtb	r3, r3
 801b106:	f003 0303 	and.w	r3, r3, #3
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d00e      	beq.n	801b12c <tcp_output+0x2a0>
 801b10e:	2301      	movs	r3, #1
 801b110:	e00d      	b.n	801b12e <tcp_output+0x2a2>
 801b112:	bf00      	nop
 801b114:	0802656c 	.word	0x0802656c
 801b118:	08026acc 	.word	0x08026acc
 801b11c:	080265dc 	.word	0x080265dc
 801b120:	08026ae4 	.word	0x08026ae4
 801b124:	24048ea0 	.word	0x24048ea0
 801b128:	08026b0c 	.word	0x08026b0c
 801b12c:	2300      	movs	r3, #0
 801b12e:	442b      	add	r3, r5
 801b130:	4423      	add	r3, r4
 801b132:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	1ad3      	subs	r3, r2, r3
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	da02      	bge.n	801b146 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	68ba      	ldr	r2, [r7, #8]
 801b144:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b148:	891b      	ldrh	r3, [r3, #8]
 801b14a:	461c      	mov	r4, r3
 801b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	899b      	ldrh	r3, [r3, #12]
 801b152:	b29b      	uxth	r3, r3
 801b154:	4618      	mov	r0, r3
 801b156:	f7f4 febf 	bl	800fed8 <lwip_htons>
 801b15a:	4603      	mov	r3, r0
 801b15c:	b2db      	uxtb	r3, r3
 801b15e:	f003 0303 	and.w	r3, r3, #3
 801b162:	2b00      	cmp	r3, #0
 801b164:	d001      	beq.n	801b16a <tcp_output+0x2de>
 801b166:	2301      	movs	r3, #1
 801b168:	e000      	b.n	801b16c <tcp_output+0x2e0>
 801b16a:	2300      	movs	r3, #0
 801b16c:	4423      	add	r3, r4
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d049      	beq.n	801b206 <tcp_output+0x37a>
      seg->next = NULL;
 801b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b174:	2200      	movs	r2, #0
 801b176:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d105      	bne.n	801b18c <tcp_output+0x300>
        pcb->unacked = seg;
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b184:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b188:	623b      	str	r3, [r7, #32]
 801b18a:	e03f      	b.n	801b20c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18e:	68db      	ldr	r3, [r3, #12]
 801b190:	685b      	ldr	r3, [r3, #4]
 801b192:	4618      	mov	r0, r3
 801b194:	f7f4 feb5 	bl	800ff02 <lwip_htonl>
 801b198:	4604      	mov	r4, r0
 801b19a:	6a3b      	ldr	r3, [r7, #32]
 801b19c:	68db      	ldr	r3, [r3, #12]
 801b19e:	685b      	ldr	r3, [r3, #4]
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7f4 feae 	bl	800ff02 <lwip_htonl>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	1ae3      	subs	r3, r4, r3
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	da24      	bge.n	801b1f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	3370      	adds	r3, #112	; 0x70
 801b1b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b1b4:	e002      	b.n	801b1bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b1b6:	69fb      	ldr	r3, [r7, #28]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b1bc:	69fb      	ldr	r3, [r7, #28]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d011      	beq.n	801b1e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b1c4:	69fb      	ldr	r3, [r7, #28]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	685b      	ldr	r3, [r3, #4]
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7f4 fe98 	bl	800ff02 <lwip_htonl>
 801b1d2:	4604      	mov	r4, r0
 801b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1d6:	68db      	ldr	r3, [r3, #12]
 801b1d8:	685b      	ldr	r3, [r3, #4]
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7f4 fe91 	bl	800ff02 <lwip_htonl>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	dbe6      	blt.n	801b1b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b1e8:	69fb      	ldr	r3, [r7, #28]
 801b1ea:	681a      	ldr	r2, [r3, #0]
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b1f0:	69fb      	ldr	r3, [r7, #28]
 801b1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b1f4:	601a      	str	r2, [r3, #0]
 801b1f6:	e009      	b.n	801b20c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b1f8:	6a3b      	ldr	r3, [r7, #32]
 801b1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b1fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b1fe:	6a3b      	ldr	r3, [r7, #32]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	623b      	str	r3, [r7, #32]
 801b204:	e002      	b.n	801b20c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b208:	f7fb ff1d 	bl	8017046 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b210:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b214:	2b00      	cmp	r3, #0
 801b216:	d012      	beq.n	801b23e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b21a:	68db      	ldr	r3, [r3, #12]
 801b21c:	685b      	ldr	r3, [r3, #4]
 801b21e:	4618      	mov	r0, r3
 801b220:	f7f4 fe6f 	bl	800ff02 <lwip_htonl>
 801b224:	4602      	mov	r2, r0
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b22a:	1ad3      	subs	r3, r2, r3
 801b22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b22e:	8912      	ldrh	r2, [r2, #8]
 801b230:	4413      	add	r3, r2
  while (seg != NULL &&
 801b232:	69ba      	ldr	r2, [r7, #24]
 801b234:	429a      	cmp	r2, r3
 801b236:	f4bf aed9 	bcs.w	801afec <tcp_output+0x160>
 801b23a:	e000      	b.n	801b23e <tcp_output+0x3b2>
      break;
 801b23c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b242:	2b00      	cmp	r3, #0
 801b244:	d108      	bne.n	801b258 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	2200      	movs	r2, #0
 801b24a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b24e:	e004      	b.n	801b25a <tcp_output+0x3ce>
    goto output_done;
 801b250:	bf00      	nop
 801b252:	e002      	b.n	801b25a <tcp_output+0x3ce>
    goto output_done;
 801b254:	bf00      	nop
 801b256:	e000      	b.n	801b25a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b258:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	8b5b      	ldrh	r3, [r3, #26]
 801b25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b262:	b29a      	uxth	r2, r3
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b268:	2300      	movs	r3, #0
}
 801b26a:	4618      	mov	r0, r3
 801b26c:	3728      	adds	r7, #40	; 0x28
 801b26e:	46bd      	mov	sp, r7
 801b270:	bdb0      	pop	{r4, r5, r7, pc}
 801b272:	bf00      	nop

0801b274 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b082      	sub	sp, #8
 801b278:	af00      	add	r7, sp, #0
 801b27a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d106      	bne.n	801b290 <tcp_output_segment_busy+0x1c>
 801b282:	4b09      	ldr	r3, [pc, #36]	; (801b2a8 <tcp_output_segment_busy+0x34>)
 801b284:	f240 529a 	movw	r2, #1434	; 0x59a
 801b288:	4908      	ldr	r1, [pc, #32]	; (801b2ac <tcp_output_segment_busy+0x38>)
 801b28a:	4809      	ldr	r0, [pc, #36]	; (801b2b0 <tcp_output_segment_busy+0x3c>)
 801b28c:	f005 ffce 	bl	802122c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	7b9b      	ldrb	r3, [r3, #14]
 801b296:	2b01      	cmp	r3, #1
 801b298:	d001      	beq.n	801b29e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b29a:	2301      	movs	r3, #1
 801b29c:	e000      	b.n	801b2a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b29e:	2300      	movs	r3, #0
}
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	3708      	adds	r7, #8
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd80      	pop	{r7, pc}
 801b2a8:	0802656c 	.word	0x0802656c
 801b2ac:	08026b24 	.word	0x08026b24
 801b2b0:	080265dc 	.word	0x080265dc

0801b2b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b2b4:	b5b0      	push	{r4, r5, r7, lr}
 801b2b6:	b08c      	sub	sp, #48	; 0x30
 801b2b8:	af04      	add	r7, sp, #16
 801b2ba:	60f8      	str	r0, [r7, #12]
 801b2bc:	60b9      	str	r1, [r7, #8]
 801b2be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d106      	bne.n	801b2d4 <tcp_output_segment+0x20>
 801b2c6:	4b63      	ldr	r3, [pc, #396]	; (801b454 <tcp_output_segment+0x1a0>)
 801b2c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b2cc:	4962      	ldr	r1, [pc, #392]	; (801b458 <tcp_output_segment+0x1a4>)
 801b2ce:	4863      	ldr	r0, [pc, #396]	; (801b45c <tcp_output_segment+0x1a8>)
 801b2d0:	f005 ffac 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b2d4:	68bb      	ldr	r3, [r7, #8]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d106      	bne.n	801b2e8 <tcp_output_segment+0x34>
 801b2da:	4b5e      	ldr	r3, [pc, #376]	; (801b454 <tcp_output_segment+0x1a0>)
 801b2dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b2e0:	495f      	ldr	r1, [pc, #380]	; (801b460 <tcp_output_segment+0x1ac>)
 801b2e2:	485e      	ldr	r0, [pc, #376]	; (801b45c <tcp_output_segment+0x1a8>)
 801b2e4:	f005 ffa2 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d106      	bne.n	801b2fc <tcp_output_segment+0x48>
 801b2ee:	4b59      	ldr	r3, [pc, #356]	; (801b454 <tcp_output_segment+0x1a0>)
 801b2f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b2f4:	495b      	ldr	r1, [pc, #364]	; (801b464 <tcp_output_segment+0x1b0>)
 801b2f6:	4859      	ldr	r0, [pc, #356]	; (801b45c <tcp_output_segment+0x1a8>)
 801b2f8:	f005 ff98 	bl	802122c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b2fc:	68f8      	ldr	r0, [r7, #12]
 801b2fe:	f7ff ffb9 	bl	801b274 <tcp_output_segment_busy>
 801b302:	4603      	mov	r3, r0
 801b304:	2b00      	cmp	r3, #0
 801b306:	d001      	beq.n	801b30c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b308:	2300      	movs	r3, #0
 801b30a:	e09f      	b.n	801b44c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	68dc      	ldr	r4, [r3, #12]
 801b314:	4610      	mov	r0, r2
 801b316:	f7f4 fdf4 	bl	800ff02 <lwip_htonl>
 801b31a:	4603      	mov	r3, r0
 801b31c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b31e:	68bb      	ldr	r3, [r7, #8]
 801b320:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	68dc      	ldr	r4, [r3, #12]
 801b326:	4610      	mov	r0, r2
 801b328:	f7f4 fdd6 	bl	800fed8 <lwip_htons>
 801b32c:	4603      	mov	r3, r0
 801b32e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b330:	68bb      	ldr	r3, [r7, #8]
 801b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b334:	68ba      	ldr	r2, [r7, #8]
 801b336:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b338:	441a      	add	r2, r3
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	68db      	ldr	r3, [r3, #12]
 801b342:	3314      	adds	r3, #20
 801b344:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	7a9b      	ldrb	r3, [r3, #10]
 801b34a:	f003 0301 	and.w	r3, r3, #1
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d015      	beq.n	801b37e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	3304      	adds	r3, #4
 801b356:	461a      	mov	r2, r3
 801b358:	6879      	ldr	r1, [r7, #4]
 801b35a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b35e:	f7fc fa37 	bl	80177d0 <tcp_eff_send_mss_netif>
 801b362:	4603      	mov	r3, r0
 801b364:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b366:	8b7b      	ldrh	r3, [r7, #26]
 801b368:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b36c:	4618      	mov	r0, r3
 801b36e:	f7f4 fdc8 	bl	800ff02 <lwip_htonl>
 801b372:	4602      	mov	r2, r0
 801b374:	69fb      	ldr	r3, [r7, #28]
 801b376:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b378:	69fb      	ldr	r3, [r7, #28]
 801b37a:	3304      	adds	r3, #4
 801b37c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b37e:	68bb      	ldr	r3, [r7, #8]
 801b380:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b384:	2b00      	cmp	r3, #0
 801b386:	da02      	bge.n	801b38e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b388:	68bb      	ldr	r3, [r7, #8]
 801b38a:	2200      	movs	r2, #0
 801b38c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b392:	2b00      	cmp	r3, #0
 801b394:	d10c      	bne.n	801b3b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b396:	4b34      	ldr	r3, [pc, #208]	; (801b468 <tcp_output_segment+0x1b4>)
 801b398:	681a      	ldr	r2, [r3, #0]
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	68db      	ldr	r3, [r3, #12]
 801b3a2:	685b      	ldr	r3, [r3, #4]
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	f7f4 fdac 	bl	800ff02 <lwip_htonl>
 801b3aa:	4602      	mov	r2, r0
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	68da      	ldr	r2, [r3, #12]
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	685b      	ldr	r3, [r3, #4]
 801b3b8:	685b      	ldr	r3, [r3, #4]
 801b3ba:	1ad3      	subs	r3, r2, r3
 801b3bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	685b      	ldr	r3, [r3, #4]
 801b3c2:	8959      	ldrh	r1, [r3, #10]
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	685b      	ldr	r3, [r3, #4]
 801b3c8:	8b3a      	ldrh	r2, [r7, #24]
 801b3ca:	1a8a      	subs	r2, r1, r2
 801b3cc:	b292      	uxth	r2, r2
 801b3ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	8919      	ldrh	r1, [r3, #8]
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	685b      	ldr	r3, [r3, #4]
 801b3da:	8b3a      	ldrh	r2, [r7, #24]
 801b3dc:	1a8a      	subs	r2, r1, r2
 801b3de:	b292      	uxth	r2, r2
 801b3e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	685b      	ldr	r3, [r3, #4]
 801b3e6:	68fa      	ldr	r2, [r7, #12]
 801b3e8:	68d2      	ldr	r2, [r2, #12]
 801b3ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	68db      	ldr	r3, [r3, #12]
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	741a      	strb	r2, [r3, #16]
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	68db      	ldr	r3, [r3, #12]
 801b3fc:	f103 0214 	add.w	r2, r3, #20
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	7a9b      	ldrb	r3, [r3, #10]
 801b404:	009b      	lsls	r3, r3, #2
 801b406:	f003 0304 	and.w	r3, r3, #4
 801b40a:	4413      	add	r3, r2
 801b40c:	69fa      	ldr	r2, [r7, #28]
 801b40e:	429a      	cmp	r2, r3
 801b410:	d006      	beq.n	801b420 <tcp_output_segment+0x16c>
 801b412:	4b10      	ldr	r3, [pc, #64]	; (801b454 <tcp_output_segment+0x1a0>)
 801b414:	f240 621c 	movw	r2, #1564	; 0x61c
 801b418:	4914      	ldr	r1, [pc, #80]	; (801b46c <tcp_output_segment+0x1b8>)
 801b41a:	4810      	ldr	r0, [pc, #64]	; (801b45c <tcp_output_segment+0x1a8>)
 801b41c:	f005 ff06 	bl	802122c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	6858      	ldr	r0, [r3, #4]
 801b424:	68b9      	ldr	r1, [r7, #8]
 801b426:	68bb      	ldr	r3, [r7, #8]
 801b428:	1d1c      	adds	r4, r3, #4
 801b42a:	68bb      	ldr	r3, [r7, #8]
 801b42c:	7add      	ldrb	r5, [r3, #11]
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	7a9b      	ldrb	r3, [r3, #10]
 801b432:	687a      	ldr	r2, [r7, #4]
 801b434:	9202      	str	r2, [sp, #8]
 801b436:	2206      	movs	r2, #6
 801b438:	9201      	str	r2, [sp, #4]
 801b43a:	9300      	str	r3, [sp, #0]
 801b43c:	462b      	mov	r3, r5
 801b43e:	4622      	mov	r2, r4
 801b440:	f7f6 f9fe 	bl	8011840 <ip4_output_if>
 801b444:	4603      	mov	r3, r0
 801b446:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b44c:	4618      	mov	r0, r3
 801b44e:	3720      	adds	r7, #32
 801b450:	46bd      	mov	sp, r7
 801b452:	bdb0      	pop	{r4, r5, r7, pc}
 801b454:	0802656c 	.word	0x0802656c
 801b458:	08026b4c 	.word	0x08026b4c
 801b45c:	080265dc 	.word	0x080265dc
 801b460:	08026b6c 	.word	0x08026b6c
 801b464:	08026b8c 	.word	0x08026b8c
 801b468:	24048e90 	.word	0x24048e90
 801b46c:	08026bb0 	.word	0x08026bb0

0801b470 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b470:	b5b0      	push	{r4, r5, r7, lr}
 801b472:	b084      	sub	sp, #16
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d106      	bne.n	801b48c <tcp_rexmit_rto_prepare+0x1c>
 801b47e:	4b31      	ldr	r3, [pc, #196]	; (801b544 <tcp_rexmit_rto_prepare+0xd4>)
 801b480:	f240 6263 	movw	r2, #1635	; 0x663
 801b484:	4930      	ldr	r1, [pc, #192]	; (801b548 <tcp_rexmit_rto_prepare+0xd8>)
 801b486:	4831      	ldr	r0, [pc, #196]	; (801b54c <tcp_rexmit_rto_prepare+0xdc>)
 801b488:	f005 fed0 	bl	802122c <iprintf>

  if (pcb->unacked == NULL) {
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b490:	2b00      	cmp	r3, #0
 801b492:	d102      	bne.n	801b49a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b494:	f06f 0305 	mvn.w	r3, #5
 801b498:	e050      	b.n	801b53c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b49e:	60fb      	str	r3, [r7, #12]
 801b4a0:	e00b      	b.n	801b4ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b4a2:	68f8      	ldr	r0, [r7, #12]
 801b4a4:	f7ff fee6 	bl	801b274 <tcp_output_segment_busy>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d002      	beq.n	801b4b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b4ae:	f06f 0305 	mvn.w	r3, #5
 801b4b2:	e043      	b.n	801b53c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	60fb      	str	r3, [r7, #12]
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d1ef      	bne.n	801b4a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b4c2:	68f8      	ldr	r0, [r7, #12]
 801b4c4:	f7ff fed6 	bl	801b274 <tcp_output_segment_busy>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d002      	beq.n	801b4d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b4ce:	f06f 0305 	mvn.w	r3, #5
 801b4d2:	e033      	b.n	801b53c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	8b5b      	ldrh	r3, [r3, #26]
 801b4ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b4f2:	b29a      	uxth	r2, r3
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	68db      	ldr	r3, [r3, #12]
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	4618      	mov	r0, r3
 801b500:	f7f4 fcff 	bl	800ff02 <lwip_htonl>
 801b504:	4604      	mov	r4, r0
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	891b      	ldrh	r3, [r3, #8]
 801b50a:	461d      	mov	r5, r3
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	68db      	ldr	r3, [r3, #12]
 801b510:	899b      	ldrh	r3, [r3, #12]
 801b512:	b29b      	uxth	r3, r3
 801b514:	4618      	mov	r0, r3
 801b516:	f7f4 fcdf 	bl	800fed8 <lwip_htons>
 801b51a:	4603      	mov	r3, r0
 801b51c:	b2db      	uxtb	r3, r3
 801b51e:	f003 0303 	and.w	r3, r3, #3
 801b522:	2b00      	cmp	r3, #0
 801b524:	d001      	beq.n	801b52a <tcp_rexmit_rto_prepare+0xba>
 801b526:	2301      	movs	r3, #1
 801b528:	e000      	b.n	801b52c <tcp_rexmit_rto_prepare+0xbc>
 801b52a:	2300      	movs	r3, #0
 801b52c:	442b      	add	r3, r5
 801b52e:	18e2      	adds	r2, r4, r3
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	2200      	movs	r2, #0
 801b538:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b53a:	2300      	movs	r3, #0
}
 801b53c:	4618      	mov	r0, r3
 801b53e:	3710      	adds	r7, #16
 801b540:	46bd      	mov	sp, r7
 801b542:	bdb0      	pop	{r4, r5, r7, pc}
 801b544:	0802656c 	.word	0x0802656c
 801b548:	08026bc4 	.word	0x08026bc4
 801b54c:	080265dc 	.word	0x080265dc

0801b550 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b550:	b580      	push	{r7, lr}
 801b552:	b082      	sub	sp, #8
 801b554:	af00      	add	r7, sp, #0
 801b556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d106      	bne.n	801b56c <tcp_rexmit_rto_commit+0x1c>
 801b55e:	4b0d      	ldr	r3, [pc, #52]	; (801b594 <tcp_rexmit_rto_commit+0x44>)
 801b560:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b564:	490c      	ldr	r1, [pc, #48]	; (801b598 <tcp_rexmit_rto_commit+0x48>)
 801b566:	480d      	ldr	r0, [pc, #52]	; (801b59c <tcp_rexmit_rto_commit+0x4c>)
 801b568:	f005 fe60 	bl	802122c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b572:	2bff      	cmp	r3, #255	; 0xff
 801b574:	d007      	beq.n	801b586 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b57c:	3301      	adds	r3, #1
 801b57e:	b2da      	uxtb	r2, r3
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b586:	6878      	ldr	r0, [r7, #4]
 801b588:	f7ff fc80 	bl	801ae8c <tcp_output>
}
 801b58c:	bf00      	nop
 801b58e:	3708      	adds	r7, #8
 801b590:	46bd      	mov	sp, r7
 801b592:	bd80      	pop	{r7, pc}
 801b594:	0802656c 	.word	0x0802656c
 801b598:	08026be8 	.word	0x08026be8
 801b59c:	080265dc 	.word	0x080265dc

0801b5a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b082      	sub	sp, #8
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d106      	bne.n	801b5bc <tcp_rexmit_rto+0x1c>
 801b5ae:	4b0a      	ldr	r3, [pc, #40]	; (801b5d8 <tcp_rexmit_rto+0x38>)
 801b5b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b5b4:	4909      	ldr	r1, [pc, #36]	; (801b5dc <tcp_rexmit_rto+0x3c>)
 801b5b6:	480a      	ldr	r0, [pc, #40]	; (801b5e0 <tcp_rexmit_rto+0x40>)
 801b5b8:	f005 fe38 	bl	802122c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f7ff ff57 	bl	801b470 <tcp_rexmit_rto_prepare>
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d102      	bne.n	801b5ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b5c8:	6878      	ldr	r0, [r7, #4]
 801b5ca:	f7ff ffc1 	bl	801b550 <tcp_rexmit_rto_commit>
  }
}
 801b5ce:	bf00      	nop
 801b5d0:	3708      	adds	r7, #8
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bd80      	pop	{r7, pc}
 801b5d6:	bf00      	nop
 801b5d8:	0802656c 	.word	0x0802656c
 801b5dc:	08026c0c 	.word	0x08026c0c
 801b5e0:	080265dc 	.word	0x080265dc

0801b5e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b5e4:	b590      	push	{r4, r7, lr}
 801b5e6:	b085      	sub	sp, #20
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d106      	bne.n	801b600 <tcp_rexmit+0x1c>
 801b5f2:	4b2f      	ldr	r3, [pc, #188]	; (801b6b0 <tcp_rexmit+0xcc>)
 801b5f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b5f8:	492e      	ldr	r1, [pc, #184]	; (801b6b4 <tcp_rexmit+0xd0>)
 801b5fa:	482f      	ldr	r0, [pc, #188]	; (801b6b8 <tcp_rexmit+0xd4>)
 801b5fc:	f005 fe16 	bl	802122c <iprintf>

  if (pcb->unacked == NULL) {
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b604:	2b00      	cmp	r3, #0
 801b606:	d102      	bne.n	801b60e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b608:	f06f 0305 	mvn.w	r3, #5
 801b60c:	e04c      	b.n	801b6a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b612:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b614:	68b8      	ldr	r0, [r7, #8]
 801b616:	f7ff fe2d 	bl	801b274 <tcp_output_segment_busy>
 801b61a:	4603      	mov	r3, r0
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d002      	beq.n	801b626 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b620:	f06f 0305 	mvn.w	r3, #5
 801b624:	e040      	b.n	801b6a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b626:	68bb      	ldr	r3, [r7, #8]
 801b628:	681a      	ldr	r2, [r3, #0]
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	336c      	adds	r3, #108	; 0x6c
 801b632:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b634:	e002      	b.n	801b63c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d011      	beq.n	801b668 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	68db      	ldr	r3, [r3, #12]
 801b64a:	685b      	ldr	r3, [r3, #4]
 801b64c:	4618      	mov	r0, r3
 801b64e:	f7f4 fc58 	bl	800ff02 <lwip_htonl>
 801b652:	4604      	mov	r4, r0
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	68db      	ldr	r3, [r3, #12]
 801b658:	685b      	ldr	r3, [r3, #4]
 801b65a:	4618      	mov	r0, r3
 801b65c:	f7f4 fc51 	bl	800ff02 <lwip_htonl>
 801b660:	4603      	mov	r3, r0
 801b662:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b664:	2b00      	cmp	r3, #0
 801b666:	dbe6      	blt.n	801b636 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	681a      	ldr	r2, [r3, #0]
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	68ba      	ldr	r2, [r7, #8]
 801b674:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b676:	68bb      	ldr	r3, [r7, #8]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d103      	bne.n	801b686 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	2200      	movs	r2, #0
 801b682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b68c:	2bff      	cmp	r3, #255	; 0xff
 801b68e:	d007      	beq.n	801b6a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b696:	3301      	adds	r3, #1
 801b698:	b2da      	uxtb	r2, r3
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b6a6:	2300      	movs	r3, #0
}
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	3714      	adds	r7, #20
 801b6ac:	46bd      	mov	sp, r7
 801b6ae:	bd90      	pop	{r4, r7, pc}
 801b6b0:	0802656c 	.word	0x0802656c
 801b6b4:	08026c28 	.word	0x08026c28
 801b6b8:	080265dc 	.word	0x080265dc

0801b6bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b082      	sub	sp, #8
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d106      	bne.n	801b6d8 <tcp_rexmit_fast+0x1c>
 801b6ca:	4b2a      	ldr	r3, [pc, #168]	; (801b774 <tcp_rexmit_fast+0xb8>)
 801b6cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b6d0:	4929      	ldr	r1, [pc, #164]	; (801b778 <tcp_rexmit_fast+0xbc>)
 801b6d2:	482a      	ldr	r0, [pc, #168]	; (801b77c <tcp_rexmit_fast+0xc0>)
 801b6d4:	f005 fdaa 	bl	802122c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d045      	beq.n	801b76c <tcp_rexmit_fast+0xb0>
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	8b5b      	ldrh	r3, [r3, #26]
 801b6e4:	f003 0304 	and.w	r3, r3, #4
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d13f      	bne.n	801b76c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b6ec:	6878      	ldr	r0, [r7, #4]
 801b6ee:	f7ff ff79 	bl	801b5e4 <tcp_rexmit>
 801b6f2:	4603      	mov	r3, r0
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d139      	bne.n	801b76c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b704:	4293      	cmp	r3, r2
 801b706:	bf28      	it	cs
 801b708:	4613      	movcs	r3, r2
 801b70a:	b29b      	uxth	r3, r3
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	da00      	bge.n	801b712 <tcp_rexmit_fast+0x56>
 801b710:	3301      	adds	r3, #1
 801b712:	105b      	asrs	r3, r3, #1
 801b714:	b29a      	uxth	r2, r3
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b722:	461a      	mov	r2, r3
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b728:	005b      	lsls	r3, r3, #1
 801b72a:	429a      	cmp	r2, r3
 801b72c:	d206      	bcs.n	801b73c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b732:	005b      	lsls	r3, r3, #1
 801b734:	b29a      	uxth	r2, r3
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b746:	4619      	mov	r1, r3
 801b748:	0049      	lsls	r1, r1, #1
 801b74a:	440b      	add	r3, r1
 801b74c:	b29b      	uxth	r3, r3
 801b74e:	4413      	add	r3, r2
 801b750:	b29a      	uxth	r2, r3
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	8b5b      	ldrh	r3, [r3, #26]
 801b75c:	f043 0304 	orr.w	r3, r3, #4
 801b760:	b29a      	uxth	r2, r3
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	2200      	movs	r2, #0
 801b76a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b76c:	bf00      	nop
 801b76e:	3708      	adds	r7, #8
 801b770:	46bd      	mov	sp, r7
 801b772:	bd80      	pop	{r7, pc}
 801b774:	0802656c 	.word	0x0802656c
 801b778:	08026c40 	.word	0x08026c40
 801b77c:	080265dc 	.word	0x080265dc

0801b780 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b780:	b580      	push	{r7, lr}
 801b782:	b086      	sub	sp, #24
 801b784:	af00      	add	r7, sp, #0
 801b786:	60f8      	str	r0, [r7, #12]
 801b788:	607b      	str	r3, [r7, #4]
 801b78a:	460b      	mov	r3, r1
 801b78c:	817b      	strh	r3, [r7, #10]
 801b78e:	4613      	mov	r3, r2
 801b790:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b792:	897a      	ldrh	r2, [r7, #10]
 801b794:	893b      	ldrh	r3, [r7, #8]
 801b796:	4413      	add	r3, r2
 801b798:	b29b      	uxth	r3, r3
 801b79a:	3314      	adds	r3, #20
 801b79c:	b29b      	uxth	r3, r3
 801b79e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	2022      	movs	r0, #34	; 0x22
 801b7a6:	f7f8 fa2d 	bl	8013c04 <pbuf_alloc>
 801b7aa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b7ac:	697b      	ldr	r3, [r7, #20]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d04d      	beq.n	801b84e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b7b2:	897b      	ldrh	r3, [r7, #10]
 801b7b4:	3313      	adds	r3, #19
 801b7b6:	697a      	ldr	r2, [r7, #20]
 801b7b8:	8952      	ldrh	r2, [r2, #10]
 801b7ba:	4293      	cmp	r3, r2
 801b7bc:	db06      	blt.n	801b7cc <tcp_output_alloc_header_common+0x4c>
 801b7be:	4b26      	ldr	r3, [pc, #152]	; (801b858 <tcp_output_alloc_header_common+0xd8>)
 801b7c0:	f240 7223 	movw	r2, #1827	; 0x723
 801b7c4:	4925      	ldr	r1, [pc, #148]	; (801b85c <tcp_output_alloc_header_common+0xdc>)
 801b7c6:	4826      	ldr	r0, [pc, #152]	; (801b860 <tcp_output_alloc_header_common+0xe0>)
 801b7c8:	f005 fd30 	bl	802122c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	685b      	ldr	r3, [r3, #4]
 801b7d0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b7d2:	8c3b      	ldrh	r3, [r7, #32]
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7f4 fb7f 	bl	800fed8 <lwip_htons>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	461a      	mov	r2, r3
 801b7de:	693b      	ldr	r3, [r7, #16]
 801b7e0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b7e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7f4 fb77 	bl	800fed8 <lwip_htons>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	461a      	mov	r2, r3
 801b7ee:	693b      	ldr	r3, [r7, #16]
 801b7f0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b7f2:	693b      	ldr	r3, [r7, #16]
 801b7f4:	687a      	ldr	r2, [r7, #4]
 801b7f6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b7f8:	68f8      	ldr	r0, [r7, #12]
 801b7fa:	f7f4 fb82 	bl	800ff02 <lwip_htonl>
 801b7fe:	4602      	mov	r2, r0
 801b800:	693b      	ldr	r3, [r7, #16]
 801b802:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b804:	897b      	ldrh	r3, [r7, #10]
 801b806:	089b      	lsrs	r3, r3, #2
 801b808:	b29b      	uxth	r3, r3
 801b80a:	3305      	adds	r3, #5
 801b80c:	b29b      	uxth	r3, r3
 801b80e:	031b      	lsls	r3, r3, #12
 801b810:	b29a      	uxth	r2, r3
 801b812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b816:	b29b      	uxth	r3, r3
 801b818:	4313      	orrs	r3, r2
 801b81a:	b29b      	uxth	r3, r3
 801b81c:	4618      	mov	r0, r3
 801b81e:	f7f4 fb5b 	bl	800fed8 <lwip_htons>
 801b822:	4603      	mov	r3, r0
 801b824:	461a      	mov	r2, r3
 801b826:	693b      	ldr	r3, [r7, #16]
 801b828:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b82a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b82c:	4618      	mov	r0, r3
 801b82e:	f7f4 fb53 	bl	800fed8 <lwip_htons>
 801b832:	4603      	mov	r3, r0
 801b834:	461a      	mov	r2, r3
 801b836:	693b      	ldr	r3, [r7, #16]
 801b838:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b83a:	693b      	ldr	r3, [r7, #16]
 801b83c:	2200      	movs	r2, #0
 801b83e:	741a      	strb	r2, [r3, #16]
 801b840:	2200      	movs	r2, #0
 801b842:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b844:	693b      	ldr	r3, [r7, #16]
 801b846:	2200      	movs	r2, #0
 801b848:	749a      	strb	r2, [r3, #18]
 801b84a:	2200      	movs	r2, #0
 801b84c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b84e:	697b      	ldr	r3, [r7, #20]
}
 801b850:	4618      	mov	r0, r3
 801b852:	3718      	adds	r7, #24
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}
 801b858:	0802656c 	.word	0x0802656c
 801b85c:	08026c60 	.word	0x08026c60
 801b860:	080265dc 	.word	0x080265dc

0801b864 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b864:	b5b0      	push	{r4, r5, r7, lr}
 801b866:	b08a      	sub	sp, #40	; 0x28
 801b868:	af04      	add	r7, sp, #16
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	607b      	str	r3, [r7, #4]
 801b86e:	460b      	mov	r3, r1
 801b870:	817b      	strh	r3, [r7, #10]
 801b872:	4613      	mov	r3, r2
 801b874:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d106      	bne.n	801b88a <tcp_output_alloc_header+0x26>
 801b87c:	4b15      	ldr	r3, [pc, #84]	; (801b8d4 <tcp_output_alloc_header+0x70>)
 801b87e:	f240 7242 	movw	r2, #1858	; 0x742
 801b882:	4915      	ldr	r1, [pc, #84]	; (801b8d8 <tcp_output_alloc_header+0x74>)
 801b884:	4815      	ldr	r0, [pc, #84]	; (801b8dc <tcp_output_alloc_header+0x78>)
 801b886:	f005 fcd1 	bl	802122c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	8adb      	ldrh	r3, [r3, #22]
 801b892:	68fa      	ldr	r2, [r7, #12]
 801b894:	8b12      	ldrh	r2, [r2, #24]
 801b896:	68f9      	ldr	r1, [r7, #12]
 801b898:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b89a:	893d      	ldrh	r5, [r7, #8]
 801b89c:	897c      	ldrh	r4, [r7, #10]
 801b89e:	9103      	str	r1, [sp, #12]
 801b8a0:	2110      	movs	r1, #16
 801b8a2:	9102      	str	r1, [sp, #8]
 801b8a4:	9201      	str	r2, [sp, #4]
 801b8a6:	9300      	str	r3, [sp, #0]
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	462a      	mov	r2, r5
 801b8ac:	4621      	mov	r1, r4
 801b8ae:	f7ff ff67 	bl	801b780 <tcp_output_alloc_header_common>
 801b8b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b8b4:	697b      	ldr	r3, [r7, #20]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d006      	beq.n	801b8c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8be:	68fa      	ldr	r2, [r7, #12]
 801b8c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b8c2:	441a      	add	r2, r3
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b8c8:	697b      	ldr	r3, [r7, #20]
}
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	3718      	adds	r7, #24
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	bdb0      	pop	{r4, r5, r7, pc}
 801b8d2:	bf00      	nop
 801b8d4:	0802656c 	.word	0x0802656c
 801b8d8:	08026c90 	.word	0x08026c90
 801b8dc:	080265dc 	.word	0x080265dc

0801b8e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b088      	sub	sp, #32
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	60f8      	str	r0, [r7, #12]
 801b8e8:	60b9      	str	r1, [r7, #8]
 801b8ea:	4611      	mov	r1, r2
 801b8ec:	461a      	mov	r2, r3
 801b8ee:	460b      	mov	r3, r1
 801b8f0:	71fb      	strb	r3, [r7, #7]
 801b8f2:	4613      	mov	r3, r2
 801b8f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b8fa:	68bb      	ldr	r3, [r7, #8]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d106      	bne.n	801b90e <tcp_output_fill_options+0x2e>
 801b900:	4b13      	ldr	r3, [pc, #76]	; (801b950 <tcp_output_fill_options+0x70>)
 801b902:	f240 7256 	movw	r2, #1878	; 0x756
 801b906:	4913      	ldr	r1, [pc, #76]	; (801b954 <tcp_output_fill_options+0x74>)
 801b908:	4813      	ldr	r0, [pc, #76]	; (801b958 <tcp_output_fill_options+0x78>)
 801b90a:	f005 fc8f 	bl	802122c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	685b      	ldr	r3, [r3, #4]
 801b912:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b914:	69bb      	ldr	r3, [r7, #24]
 801b916:	3314      	adds	r3, #20
 801b918:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b91a:	69bb      	ldr	r3, [r7, #24]
 801b91c:	f103 0214 	add.w	r2, r3, #20
 801b920:	8bfb      	ldrh	r3, [r7, #30]
 801b922:	009b      	lsls	r3, r3, #2
 801b924:	4619      	mov	r1, r3
 801b926:	79fb      	ldrb	r3, [r7, #7]
 801b928:	009b      	lsls	r3, r3, #2
 801b92a:	f003 0304 	and.w	r3, r3, #4
 801b92e:	440b      	add	r3, r1
 801b930:	4413      	add	r3, r2
 801b932:	697a      	ldr	r2, [r7, #20]
 801b934:	429a      	cmp	r2, r3
 801b936:	d006      	beq.n	801b946 <tcp_output_fill_options+0x66>
 801b938:	4b05      	ldr	r3, [pc, #20]	; (801b950 <tcp_output_fill_options+0x70>)
 801b93a:	f240 7275 	movw	r2, #1909	; 0x775
 801b93e:	4907      	ldr	r1, [pc, #28]	; (801b95c <tcp_output_fill_options+0x7c>)
 801b940:	4805      	ldr	r0, [pc, #20]	; (801b958 <tcp_output_fill_options+0x78>)
 801b942:	f005 fc73 	bl	802122c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b946:	bf00      	nop
 801b948:	3720      	adds	r7, #32
 801b94a:	46bd      	mov	sp, r7
 801b94c:	bd80      	pop	{r7, pc}
 801b94e:	bf00      	nop
 801b950:	0802656c 	.word	0x0802656c
 801b954:	08026cb8 	.word	0x08026cb8
 801b958:	080265dc 	.word	0x080265dc
 801b95c:	08026bb0 	.word	0x08026bb0

0801b960 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b08a      	sub	sp, #40	; 0x28
 801b964:	af04      	add	r7, sp, #16
 801b966:	60f8      	str	r0, [r7, #12]
 801b968:	60b9      	str	r1, [r7, #8]
 801b96a:	607a      	str	r2, [r7, #4]
 801b96c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d106      	bne.n	801b982 <tcp_output_control_segment+0x22>
 801b974:	4b1c      	ldr	r3, [pc, #112]	; (801b9e8 <tcp_output_control_segment+0x88>)
 801b976:	f240 7287 	movw	r2, #1927	; 0x787
 801b97a:	491c      	ldr	r1, [pc, #112]	; (801b9ec <tcp_output_control_segment+0x8c>)
 801b97c:	481c      	ldr	r0, [pc, #112]	; (801b9f0 <tcp_output_control_segment+0x90>)
 801b97e:	f005 fc55 	bl	802122c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b982:	683a      	ldr	r2, [r7, #0]
 801b984:	6879      	ldr	r1, [r7, #4]
 801b986:	68f8      	ldr	r0, [r7, #12]
 801b988:	f7fe fae8 	bl	8019f5c <tcp_route>
 801b98c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b98e:	693b      	ldr	r3, [r7, #16]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d102      	bne.n	801b99a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b994:	23fc      	movs	r3, #252	; 0xfc
 801b996:	75fb      	strb	r3, [r7, #23]
 801b998:	e01c      	b.n	801b9d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d006      	beq.n	801b9ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	7adb      	ldrb	r3, [r3, #11]
 801b9a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	7a9b      	ldrb	r3, [r3, #10]
 801b9aa:	757b      	strb	r3, [r7, #21]
 801b9ac:	e003      	b.n	801b9b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b9ae:	23ff      	movs	r3, #255	; 0xff
 801b9b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b9b6:	7dba      	ldrb	r2, [r7, #22]
 801b9b8:	693b      	ldr	r3, [r7, #16]
 801b9ba:	9302      	str	r3, [sp, #8]
 801b9bc:	2306      	movs	r3, #6
 801b9be:	9301      	str	r3, [sp, #4]
 801b9c0:	7d7b      	ldrb	r3, [r7, #21]
 801b9c2:	9300      	str	r3, [sp, #0]
 801b9c4:	4613      	mov	r3, r2
 801b9c6:	683a      	ldr	r2, [r7, #0]
 801b9c8:	6879      	ldr	r1, [r7, #4]
 801b9ca:	68b8      	ldr	r0, [r7, #8]
 801b9cc:	f7f5 ff38 	bl	8011840 <ip4_output_if>
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b9d4:	68b8      	ldr	r0, [r7, #8]
 801b9d6:	f7f8 fc2b 	bl	8014230 <pbuf_free>
  return err;
 801b9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b9de:	4618      	mov	r0, r3
 801b9e0:	3718      	adds	r7, #24
 801b9e2:	46bd      	mov	sp, r7
 801b9e4:	bd80      	pop	{r7, pc}
 801b9e6:	bf00      	nop
 801b9e8:	0802656c 	.word	0x0802656c
 801b9ec:	08026ce0 	.word	0x08026ce0
 801b9f0:	080265dc 	.word	0x080265dc

0801b9f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b9f4:	b590      	push	{r4, r7, lr}
 801b9f6:	b08b      	sub	sp, #44	; 0x2c
 801b9f8:	af04      	add	r7, sp, #16
 801b9fa:	60f8      	str	r0, [r7, #12]
 801b9fc:	60b9      	str	r1, [r7, #8]
 801b9fe:	607a      	str	r2, [r7, #4]
 801ba00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d106      	bne.n	801ba16 <tcp_rst+0x22>
 801ba08:	4b1f      	ldr	r3, [pc, #124]	; (801ba88 <tcp_rst+0x94>)
 801ba0a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ba0e:	491f      	ldr	r1, [pc, #124]	; (801ba8c <tcp_rst+0x98>)
 801ba10:	481f      	ldr	r0, [pc, #124]	; (801ba90 <tcp_rst+0x9c>)
 801ba12:	f005 fc0b 	bl	802122c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d106      	bne.n	801ba2a <tcp_rst+0x36>
 801ba1c:	4b1a      	ldr	r3, [pc, #104]	; (801ba88 <tcp_rst+0x94>)
 801ba1e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ba22:	491c      	ldr	r1, [pc, #112]	; (801ba94 <tcp_rst+0xa0>)
 801ba24:	481a      	ldr	r0, [pc, #104]	; (801ba90 <tcp_rst+0x9c>)
 801ba26:	f005 fc01 	bl	802122c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ba2e:	f246 0308 	movw	r3, #24584	; 0x6008
 801ba32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ba34:	7dfb      	ldrb	r3, [r7, #23]
 801ba36:	b29c      	uxth	r4, r3
 801ba38:	68b8      	ldr	r0, [r7, #8]
 801ba3a:	f7f4 fa62 	bl	800ff02 <lwip_htonl>
 801ba3e:	4602      	mov	r2, r0
 801ba40:	8abb      	ldrh	r3, [r7, #20]
 801ba42:	9303      	str	r3, [sp, #12]
 801ba44:	2314      	movs	r3, #20
 801ba46:	9302      	str	r3, [sp, #8]
 801ba48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ba4a:	9301      	str	r3, [sp, #4]
 801ba4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ba4e:	9300      	str	r3, [sp, #0]
 801ba50:	4613      	mov	r3, r2
 801ba52:	2200      	movs	r2, #0
 801ba54:	4621      	mov	r1, r4
 801ba56:	6878      	ldr	r0, [r7, #4]
 801ba58:	f7ff fe92 	bl	801b780 <tcp_output_alloc_header_common>
 801ba5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ba5e:	693b      	ldr	r3, [r7, #16]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d00c      	beq.n	801ba7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ba64:	7dfb      	ldrb	r3, [r7, #23]
 801ba66:	2200      	movs	r2, #0
 801ba68:	6939      	ldr	r1, [r7, #16]
 801ba6a:	68f8      	ldr	r0, [r7, #12]
 801ba6c:	f7ff ff38 	bl	801b8e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba72:	683a      	ldr	r2, [r7, #0]
 801ba74:	6939      	ldr	r1, [r7, #16]
 801ba76:	68f8      	ldr	r0, [r7, #12]
 801ba78:	f7ff ff72 	bl	801b960 <tcp_output_control_segment>
 801ba7c:	e000      	b.n	801ba80 <tcp_rst+0x8c>
    return;
 801ba7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ba80:	371c      	adds	r7, #28
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd90      	pop	{r4, r7, pc}
 801ba86:	bf00      	nop
 801ba88:	0802656c 	.word	0x0802656c
 801ba8c:	08026d0c 	.word	0x08026d0c
 801ba90:	080265dc 	.word	0x080265dc
 801ba94:	08026d28 	.word	0x08026d28

0801ba98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ba98:	b590      	push	{r4, r7, lr}
 801ba9a:	b087      	sub	sp, #28
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801baa0:	2300      	movs	r3, #0
 801baa2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801baa4:	2300      	movs	r3, #0
 801baa6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d106      	bne.n	801babc <tcp_send_empty_ack+0x24>
 801baae:	4b28      	ldr	r3, [pc, #160]	; (801bb50 <tcp_send_empty_ack+0xb8>)
 801bab0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801bab4:	4927      	ldr	r1, [pc, #156]	; (801bb54 <tcp_send_empty_ack+0xbc>)
 801bab6:	4828      	ldr	r0, [pc, #160]	; (801bb58 <tcp_send_empty_ack+0xc0>)
 801bab8:	f005 fbb8 	bl	802122c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801babc:	7dfb      	ldrb	r3, [r7, #23]
 801babe:	009b      	lsls	r3, r3, #2
 801bac0:	b2db      	uxtb	r3, r3
 801bac2:	f003 0304 	and.w	r3, r3, #4
 801bac6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bac8:	7d7b      	ldrb	r3, [r7, #21]
 801baca:	b29c      	uxth	r4, r3
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bad0:	4618      	mov	r0, r3
 801bad2:	f7f4 fa16 	bl	800ff02 <lwip_htonl>
 801bad6:	4603      	mov	r3, r0
 801bad8:	2200      	movs	r2, #0
 801bada:	4621      	mov	r1, r4
 801badc:	6878      	ldr	r0, [r7, #4]
 801bade:	f7ff fec1 	bl	801b864 <tcp_output_alloc_header>
 801bae2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d109      	bne.n	801bafe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	8b5b      	ldrh	r3, [r3, #26]
 801baee:	f043 0303 	orr.w	r3, r3, #3
 801baf2:	b29a      	uxth	r2, r3
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801baf8:	f06f 0301 	mvn.w	r3, #1
 801bafc:	e023      	b.n	801bb46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801bafe:	7dbb      	ldrb	r3, [r7, #22]
 801bb00:	7dfa      	ldrb	r2, [r7, #23]
 801bb02:	6939      	ldr	r1, [r7, #16]
 801bb04:	6878      	ldr	r0, [r7, #4]
 801bb06:	f7ff feeb 	bl	801b8e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bb0a:	687a      	ldr	r2, [r7, #4]
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	3304      	adds	r3, #4
 801bb10:	6939      	ldr	r1, [r7, #16]
 801bb12:	6878      	ldr	r0, [r7, #4]
 801bb14:	f7ff ff24 	bl	801b960 <tcp_output_control_segment>
 801bb18:	4603      	mov	r3, r0
 801bb1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801bb1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d007      	beq.n	801bb34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	8b5b      	ldrh	r3, [r3, #26]
 801bb28:	f043 0303 	orr.w	r3, r3, #3
 801bb2c:	b29a      	uxth	r2, r3
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	835a      	strh	r2, [r3, #26]
 801bb32:	e006      	b.n	801bb42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	8b5b      	ldrh	r3, [r3, #26]
 801bb38:	f023 0303 	bic.w	r3, r3, #3
 801bb3c:	b29a      	uxth	r2, r3
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801bb42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bb46:	4618      	mov	r0, r3
 801bb48:	371c      	adds	r7, #28
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd90      	pop	{r4, r7, pc}
 801bb4e:	bf00      	nop
 801bb50:	0802656c 	.word	0x0802656c
 801bb54:	08026d44 	.word	0x08026d44
 801bb58:	080265dc 	.word	0x080265dc

0801bb5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bb5c:	b590      	push	{r4, r7, lr}
 801bb5e:	b087      	sub	sp, #28
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bb64:	2300      	movs	r3, #0
 801bb66:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d106      	bne.n	801bb7c <tcp_keepalive+0x20>
 801bb6e:	4b18      	ldr	r3, [pc, #96]	; (801bbd0 <tcp_keepalive+0x74>)
 801bb70:	f640 0224 	movw	r2, #2084	; 0x824
 801bb74:	4917      	ldr	r1, [pc, #92]	; (801bbd4 <tcp_keepalive+0x78>)
 801bb76:	4818      	ldr	r0, [pc, #96]	; (801bbd8 <tcp_keepalive+0x7c>)
 801bb78:	f005 fb58 	bl	802122c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bb7c:	7dfb      	ldrb	r3, [r7, #23]
 801bb7e:	b29c      	uxth	r4, r3
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bb84:	3b01      	subs	r3, #1
 801bb86:	4618      	mov	r0, r3
 801bb88:	f7f4 f9bb 	bl	800ff02 <lwip_htonl>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	2200      	movs	r2, #0
 801bb90:	4621      	mov	r1, r4
 801bb92:	6878      	ldr	r0, [r7, #4]
 801bb94:	f7ff fe66 	bl	801b864 <tcp_output_alloc_header>
 801bb98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bb9a:	693b      	ldr	r3, [r7, #16]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d102      	bne.n	801bba6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801bba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bba4:	e010      	b.n	801bbc8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bba6:	7dfb      	ldrb	r3, [r7, #23]
 801bba8:	2200      	movs	r2, #0
 801bbaa:	6939      	ldr	r1, [r7, #16]
 801bbac:	6878      	ldr	r0, [r7, #4]
 801bbae:	f7ff fe97 	bl	801b8e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bbb2:	687a      	ldr	r2, [r7, #4]
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	3304      	adds	r3, #4
 801bbb8:	6939      	ldr	r1, [r7, #16]
 801bbba:	6878      	ldr	r0, [r7, #4]
 801bbbc:	f7ff fed0 	bl	801b960 <tcp_output_control_segment>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bbc8:	4618      	mov	r0, r3
 801bbca:	371c      	adds	r7, #28
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	bd90      	pop	{r4, r7, pc}
 801bbd0:	0802656c 	.word	0x0802656c
 801bbd4:	08026d64 	.word	0x08026d64
 801bbd8:	080265dc 	.word	0x080265dc

0801bbdc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bbdc:	b590      	push	{r4, r7, lr}
 801bbde:	b08b      	sub	sp, #44	; 0x2c
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d106      	bne.n	801bbfe <tcp_zero_window_probe+0x22>
 801bbf0:	4b4c      	ldr	r3, [pc, #304]	; (801bd24 <tcp_zero_window_probe+0x148>)
 801bbf2:	f640 024f 	movw	r2, #2127	; 0x84f
 801bbf6:	494c      	ldr	r1, [pc, #304]	; (801bd28 <tcp_zero_window_probe+0x14c>)
 801bbf8:	484c      	ldr	r0, [pc, #304]	; (801bd2c <tcp_zero_window_probe+0x150>)
 801bbfa:	f005 fb17 	bl	802122c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801bc04:	6a3b      	ldr	r3, [r7, #32]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d101      	bne.n	801bc0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	e086      	b.n	801bd1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bc14:	2bff      	cmp	r3, #255	; 0xff
 801bc16:	d007      	beq.n	801bc28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bc1e:	3301      	adds	r3, #1
 801bc20:	b2da      	uxtb	r2, r3
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bc28:	6a3b      	ldr	r3, [r7, #32]
 801bc2a:	68db      	ldr	r3, [r3, #12]
 801bc2c:	899b      	ldrh	r3, [r3, #12]
 801bc2e:	b29b      	uxth	r3, r3
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7f4 f951 	bl	800fed8 <lwip_htons>
 801bc36:	4603      	mov	r3, r0
 801bc38:	b2db      	uxtb	r3, r3
 801bc3a:	f003 0301 	and.w	r3, r3, #1
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d005      	beq.n	801bc4e <tcp_zero_window_probe+0x72>
 801bc42:	6a3b      	ldr	r3, [r7, #32]
 801bc44:	891b      	ldrh	r3, [r3, #8]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d101      	bne.n	801bc4e <tcp_zero_window_probe+0x72>
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	e000      	b.n	801bc50 <tcp_zero_window_probe+0x74>
 801bc4e:	2300      	movs	r3, #0
 801bc50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bc52:	7ffb      	ldrb	r3, [r7, #31]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	bf0c      	ite	eq
 801bc58:	2301      	moveq	r3, #1
 801bc5a:	2300      	movne	r3, #0
 801bc5c:	b2db      	uxtb	r3, r3
 801bc5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bc60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc64:	b299      	uxth	r1, r3
 801bc66:	6a3b      	ldr	r3, [r7, #32]
 801bc68:	68db      	ldr	r3, [r3, #12]
 801bc6a:	685b      	ldr	r3, [r3, #4]
 801bc6c:	8bba      	ldrh	r2, [r7, #28]
 801bc6e:	6878      	ldr	r0, [r7, #4]
 801bc70:	f7ff fdf8 	bl	801b864 <tcp_output_alloc_header>
 801bc74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801bc76:	69bb      	ldr	r3, [r7, #24]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d102      	bne.n	801bc82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc80:	e04c      	b.n	801bd1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bc82:	69bb      	ldr	r3, [r7, #24]
 801bc84:	685b      	ldr	r3, [r3, #4]
 801bc86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801bc88:	7ffb      	ldrb	r3, [r7, #31]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d011      	beq.n	801bcb2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	899b      	ldrh	r3, [r3, #12]
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	b21b      	sxth	r3, r3
 801bc96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bc9a:	b21c      	sxth	r4, r3
 801bc9c:	2011      	movs	r0, #17
 801bc9e:	f7f4 f91b 	bl	800fed8 <lwip_htons>
 801bca2:	4603      	mov	r3, r0
 801bca4:	b21b      	sxth	r3, r3
 801bca6:	4323      	orrs	r3, r4
 801bca8:	b21b      	sxth	r3, r3
 801bcaa:	b29a      	uxth	r2, r3
 801bcac:	697b      	ldr	r3, [r7, #20]
 801bcae:	819a      	strh	r2, [r3, #12]
 801bcb0:	e010      	b.n	801bcd4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801bcb2:	69bb      	ldr	r3, [r7, #24]
 801bcb4:	685b      	ldr	r3, [r3, #4]
 801bcb6:	3314      	adds	r3, #20
 801bcb8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bcba:	6a3b      	ldr	r3, [r7, #32]
 801bcbc:	6858      	ldr	r0, [r3, #4]
 801bcbe:	6a3b      	ldr	r3, [r7, #32]
 801bcc0:	685b      	ldr	r3, [r3, #4]
 801bcc2:	891a      	ldrh	r2, [r3, #8]
 801bcc4:	6a3b      	ldr	r3, [r7, #32]
 801bcc6:	891b      	ldrh	r3, [r3, #8]
 801bcc8:	1ad3      	subs	r3, r2, r3
 801bcca:	b29b      	uxth	r3, r3
 801bccc:	2201      	movs	r2, #1
 801bcce:	6939      	ldr	r1, [r7, #16]
 801bcd0:	f7f8 fcb4 	bl	801463c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bcd4:	6a3b      	ldr	r3, [r7, #32]
 801bcd6:	68db      	ldr	r3, [r3, #12]
 801bcd8:	685b      	ldr	r3, [r3, #4]
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f7f4 f911 	bl	800ff02 <lwip_htonl>
 801bce0:	4603      	mov	r3, r0
 801bce2:	3301      	adds	r3, #1
 801bce4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	1ad3      	subs	r3, r2, r3
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	da02      	bge.n	801bcf8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	68fa      	ldr	r2, [r7, #12]
 801bcf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bcf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	69b9      	ldr	r1, [r7, #24]
 801bd00:	6878      	ldr	r0, [r7, #4]
 801bd02:	f7ff fded 	bl	801b8e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bd06:	687a      	ldr	r2, [r7, #4]
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	3304      	adds	r3, #4
 801bd0c:	69b9      	ldr	r1, [r7, #24]
 801bd0e:	6878      	ldr	r0, [r7, #4]
 801bd10:	f7ff fe26 	bl	801b960 <tcp_output_control_segment>
 801bd14:	4603      	mov	r3, r0
 801bd16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bd18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	372c      	adds	r7, #44	; 0x2c
 801bd20:	46bd      	mov	sp, r7
 801bd22:	bd90      	pop	{r4, r7, pc}
 801bd24:	0802656c 	.word	0x0802656c
 801bd28:	08026d80 	.word	0x08026d80
 801bd2c:	080265dc 	.word	0x080265dc

0801bd30 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b084      	sub	sp, #16
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801bd3a:	f000 fb17 	bl	801c36c <sys_timeouts_sleeptime>
 801bd3e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bd46:	d10b      	bne.n	801bd60 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801bd48:	4813      	ldr	r0, [pc, #76]	; (801bd98 <tcpip_timeouts_mbox_fetch+0x68>)
 801bd4a:	f7f9 ff8c 	bl	8015c66 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801bd4e:	2200      	movs	r2, #0
 801bd50:	6839      	ldr	r1, [r7, #0]
 801bd52:	6878      	ldr	r0, [r7, #4]
 801bd54:	f7f9 fe44 	bl	80159e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801bd58:	480f      	ldr	r0, [pc, #60]	; (801bd98 <tcpip_timeouts_mbox_fetch+0x68>)
 801bd5a:	f7f9 ff75 	bl	8015c48 <sys_mutex_lock>
    return;
 801bd5e:	e018      	b.n	801bd92 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d102      	bne.n	801bd6c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801bd66:	f000 fac7 	bl	801c2f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801bd6a:	e7e6      	b.n	801bd3a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801bd6c:	480a      	ldr	r0, [pc, #40]	; (801bd98 <tcpip_timeouts_mbox_fetch+0x68>)
 801bd6e:	f7f9 ff7a 	bl	8015c66 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	6839      	ldr	r1, [r7, #0]
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f7f9 fe32 	bl	80159e0 <sys_arch_mbox_fetch>
 801bd7c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801bd7e:	4806      	ldr	r0, [pc, #24]	; (801bd98 <tcpip_timeouts_mbox_fetch+0x68>)
 801bd80:	f7f9 ff62 	bl	8015c48 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801bd84:	68bb      	ldr	r3, [r7, #8]
 801bd86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bd8a:	d102      	bne.n	801bd92 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801bd8c:	f000 fab4 	bl	801c2f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801bd90:	e7d3      	b.n	801bd3a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801bd92:	3710      	adds	r7, #16
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bd80      	pop	{r7, pc}
 801bd98:	24048ea4 	.word	0x24048ea4

0801bd9c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	b084      	sub	sp, #16
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801bda4:	4810      	ldr	r0, [pc, #64]	; (801bde8 <tcpip_thread+0x4c>)
 801bda6:	f7f9 ff4f 	bl	8015c48 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801bdaa:	4b10      	ldr	r3, [pc, #64]	; (801bdec <tcpip_thread+0x50>)
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d005      	beq.n	801bdbe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801bdb2:	4b0e      	ldr	r3, [pc, #56]	; (801bdec <tcpip_thread+0x50>)
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	4a0e      	ldr	r2, [pc, #56]	; (801bdf0 <tcpip_thread+0x54>)
 801bdb8:	6812      	ldr	r2, [r2, #0]
 801bdba:	4610      	mov	r0, r2
 801bdbc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801bdbe:	f107 030c 	add.w	r3, r7, #12
 801bdc2:	4619      	mov	r1, r3
 801bdc4:	480b      	ldr	r0, [pc, #44]	; (801bdf4 <tcpip_thread+0x58>)
 801bdc6:	f7ff ffb3 	bl	801bd30 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d106      	bne.n	801bdde <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801bdd0:	4b09      	ldr	r3, [pc, #36]	; (801bdf8 <tcpip_thread+0x5c>)
 801bdd2:	2291      	movs	r2, #145	; 0x91
 801bdd4:	4909      	ldr	r1, [pc, #36]	; (801bdfc <tcpip_thread+0x60>)
 801bdd6:	480a      	ldr	r0, [pc, #40]	; (801be00 <tcpip_thread+0x64>)
 801bdd8:	f005 fa28 	bl	802122c <iprintf>
      continue;
 801bddc:	e003      	b.n	801bde6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	4618      	mov	r0, r3
 801bde2:	f000 f80f 	bl	801be04 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801bde6:	e7ea      	b.n	801bdbe <tcpip_thread+0x22>
 801bde8:	24048ea4 	.word	0x24048ea4
 801bdec:	2404079c 	.word	0x2404079c
 801bdf0:	240407a0 	.word	0x240407a0
 801bdf4:	240407a4 	.word	0x240407a4
 801bdf8:	08026da4 	.word	0x08026da4
 801bdfc:	08026df4 	.word	0x08026df4
 801be00:	08026e14 	.word	0x08026e14

0801be04 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b082      	sub	sp, #8
 801be08:	af00      	add	r7, sp, #0
 801be0a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	781b      	ldrb	r3, [r3, #0]
 801be10:	2b02      	cmp	r3, #2
 801be12:	d026      	beq.n	801be62 <tcpip_thread_handle_msg+0x5e>
 801be14:	2b02      	cmp	r3, #2
 801be16:	dc2b      	bgt.n	801be70 <tcpip_thread_handle_msg+0x6c>
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d002      	beq.n	801be22 <tcpip_thread_handle_msg+0x1e>
 801be1c:	2b01      	cmp	r3, #1
 801be1e:	d015      	beq.n	801be4c <tcpip_thread_handle_msg+0x48>
 801be20:	e026      	b.n	801be70 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	68db      	ldr	r3, [r3, #12]
 801be26:	687a      	ldr	r2, [r7, #4]
 801be28:	6850      	ldr	r0, [r2, #4]
 801be2a:	687a      	ldr	r2, [r7, #4]
 801be2c:	6892      	ldr	r2, [r2, #8]
 801be2e:	4611      	mov	r1, r2
 801be30:	4798      	blx	r3
 801be32:	4603      	mov	r3, r0
 801be34:	2b00      	cmp	r3, #0
 801be36:	d004      	beq.n	801be42 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	685b      	ldr	r3, [r3, #4]
 801be3c:	4618      	mov	r0, r3
 801be3e:	f7f8 f9f7 	bl	8014230 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801be42:	6879      	ldr	r1, [r7, #4]
 801be44:	2009      	movs	r0, #9
 801be46:	f7f7 fa8b 	bl	8013360 <memp_free>
      break;
 801be4a:	e018      	b.n	801be7e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	685b      	ldr	r3, [r3, #4]
 801be50:	687a      	ldr	r2, [r7, #4]
 801be52:	6892      	ldr	r2, [r2, #8]
 801be54:	4610      	mov	r0, r2
 801be56:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801be58:	6879      	ldr	r1, [r7, #4]
 801be5a:	2008      	movs	r0, #8
 801be5c:	f7f7 fa80 	bl	8013360 <memp_free>
      break;
 801be60:	e00d      	b.n	801be7e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	685b      	ldr	r3, [r3, #4]
 801be66:	687a      	ldr	r2, [r7, #4]
 801be68:	6892      	ldr	r2, [r2, #8]
 801be6a:	4610      	mov	r0, r2
 801be6c:	4798      	blx	r3
      break;
 801be6e:	e006      	b.n	801be7e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801be70:	4b05      	ldr	r3, [pc, #20]	; (801be88 <tcpip_thread_handle_msg+0x84>)
 801be72:	22cf      	movs	r2, #207	; 0xcf
 801be74:	4905      	ldr	r1, [pc, #20]	; (801be8c <tcpip_thread_handle_msg+0x88>)
 801be76:	4806      	ldr	r0, [pc, #24]	; (801be90 <tcpip_thread_handle_msg+0x8c>)
 801be78:	f005 f9d8 	bl	802122c <iprintf>
      break;
 801be7c:	bf00      	nop
  }
}
 801be7e:	bf00      	nop
 801be80:	3708      	adds	r7, #8
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
 801be86:	bf00      	nop
 801be88:	08026da4 	.word	0x08026da4
 801be8c:	08026df4 	.word	0x08026df4
 801be90:	08026e14 	.word	0x08026e14

0801be94 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b086      	sub	sp, #24
 801be98:	af00      	add	r7, sp, #0
 801be9a:	60f8      	str	r0, [r7, #12]
 801be9c:	60b9      	str	r1, [r7, #8]
 801be9e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bea0:	481a      	ldr	r0, [pc, #104]	; (801bf0c <tcpip_inpkt+0x78>)
 801bea2:	f7f9 fdf8 	bl	8015a96 <sys_mbox_valid>
 801bea6:	4603      	mov	r3, r0
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d105      	bne.n	801beb8 <tcpip_inpkt+0x24>
 801beac:	4b18      	ldr	r3, [pc, #96]	; (801bf10 <tcpip_inpkt+0x7c>)
 801beae:	22fc      	movs	r2, #252	; 0xfc
 801beb0:	4918      	ldr	r1, [pc, #96]	; (801bf14 <tcpip_inpkt+0x80>)
 801beb2:	4819      	ldr	r0, [pc, #100]	; (801bf18 <tcpip_inpkt+0x84>)
 801beb4:	f005 f9ba 	bl	802122c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801beb8:	2009      	movs	r0, #9
 801beba:	f7f7 f9db 	bl	8013274 <memp_malloc>
 801bebe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801bec0:	697b      	ldr	r3, [r7, #20]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d102      	bne.n	801becc <tcpip_inpkt+0x38>
    return ERR_MEM;
 801bec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801beca:	e01a      	b.n	801bf02 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801becc:	697b      	ldr	r3, [r7, #20]
 801bece:	2200      	movs	r2, #0
 801bed0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801bed2:	697b      	ldr	r3, [r7, #20]
 801bed4:	68fa      	ldr	r2, [r7, #12]
 801bed6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801bed8:	697b      	ldr	r3, [r7, #20]
 801beda:	68ba      	ldr	r2, [r7, #8]
 801bedc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	687a      	ldr	r2, [r7, #4]
 801bee2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bee4:	6979      	ldr	r1, [r7, #20]
 801bee6:	4809      	ldr	r0, [pc, #36]	; (801bf0c <tcpip_inpkt+0x78>)
 801bee8:	f7f9 fd60 	bl	80159ac <sys_mbox_trypost>
 801beec:	4603      	mov	r3, r0
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d006      	beq.n	801bf00 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801bef2:	6979      	ldr	r1, [r7, #20]
 801bef4:	2009      	movs	r0, #9
 801bef6:	f7f7 fa33 	bl	8013360 <memp_free>
    return ERR_MEM;
 801befa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801befe:	e000      	b.n	801bf02 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801bf00:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801bf02:	4618      	mov	r0, r3
 801bf04:	3718      	adds	r7, #24
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bd80      	pop	{r7, pc}
 801bf0a:	bf00      	nop
 801bf0c:	240407a4 	.word	0x240407a4
 801bf10:	08026da4 	.word	0x08026da4
 801bf14:	08026e3c 	.word	0x08026e3c
 801bf18:	08026e14 	.word	0x08026e14

0801bf1c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	b082      	sub	sp, #8
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	6078      	str	r0, [r7, #4]
 801bf24:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801bf26:	683b      	ldr	r3, [r7, #0]
 801bf28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bf2c:	f003 0318 	and.w	r3, r3, #24
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d006      	beq.n	801bf42 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801bf34:	4a08      	ldr	r2, [pc, #32]	; (801bf58 <tcpip_input+0x3c>)
 801bf36:	6839      	ldr	r1, [r7, #0]
 801bf38:	6878      	ldr	r0, [r7, #4]
 801bf3a:	f7ff ffab 	bl	801be94 <tcpip_inpkt>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	e005      	b.n	801bf4e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801bf42:	4a06      	ldr	r2, [pc, #24]	; (801bf5c <tcpip_input+0x40>)
 801bf44:	6839      	ldr	r1, [r7, #0]
 801bf46:	6878      	ldr	r0, [r7, #4]
 801bf48:	f7ff ffa4 	bl	801be94 <tcpip_inpkt>
 801bf4c:	4603      	mov	r3, r0
}
 801bf4e:	4618      	mov	r0, r3
 801bf50:	3708      	adds	r7, #8
 801bf52:	46bd      	mov	sp, r7
 801bf54:	bd80      	pop	{r7, pc}
 801bf56:	bf00      	nop
 801bf58:	08010e09 	.word	0x08010e09
 801bf5c:	080115f9 	.word	0x080115f9

0801bf60 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b084      	sub	sp, #16
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
 801bf68:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bf6a:	4819      	ldr	r0, [pc, #100]	; (801bfd0 <tcpip_try_callback+0x70>)
 801bf6c:	f7f9 fd93 	bl	8015a96 <sys_mbox_valid>
 801bf70:	4603      	mov	r3, r0
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d106      	bne.n	801bf84 <tcpip_try_callback+0x24>
 801bf76:	4b17      	ldr	r3, [pc, #92]	; (801bfd4 <tcpip_try_callback+0x74>)
 801bf78:	f240 125d 	movw	r2, #349	; 0x15d
 801bf7c:	4916      	ldr	r1, [pc, #88]	; (801bfd8 <tcpip_try_callback+0x78>)
 801bf7e:	4817      	ldr	r0, [pc, #92]	; (801bfdc <tcpip_try_callback+0x7c>)
 801bf80:	f005 f954 	bl	802122c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801bf84:	2008      	movs	r0, #8
 801bf86:	f7f7 f975 	bl	8013274 <memp_malloc>
 801bf8a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801bf8c:	68fb      	ldr	r3, [r7, #12]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d102      	bne.n	801bf98 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801bf92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf96:	e017      	b.n	801bfc8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	2201      	movs	r2, #1
 801bf9c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	687a      	ldr	r2, [r7, #4]
 801bfa2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	683a      	ldr	r2, [r7, #0]
 801bfa8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bfaa:	68f9      	ldr	r1, [r7, #12]
 801bfac:	4808      	ldr	r0, [pc, #32]	; (801bfd0 <tcpip_try_callback+0x70>)
 801bfae:	f7f9 fcfd 	bl	80159ac <sys_mbox_trypost>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d006      	beq.n	801bfc6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801bfb8:	68f9      	ldr	r1, [r7, #12]
 801bfba:	2008      	movs	r0, #8
 801bfbc:	f7f7 f9d0 	bl	8013360 <memp_free>
    return ERR_MEM;
 801bfc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfc4:	e000      	b.n	801bfc8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801bfc6:	2300      	movs	r3, #0
}
 801bfc8:	4618      	mov	r0, r3
 801bfca:	3710      	adds	r7, #16
 801bfcc:	46bd      	mov	sp, r7
 801bfce:	bd80      	pop	{r7, pc}
 801bfd0:	240407a4 	.word	0x240407a4
 801bfd4:	08026da4 	.word	0x08026da4
 801bfd8:	08026e3c 	.word	0x08026e3c
 801bfdc:	08026e14 	.word	0x08026e14

0801bfe0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b084      	sub	sp, #16
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	60f8      	str	r0, [r7, #12]
 801bfe8:	60b9      	str	r1, [r7, #8]
 801bfea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801bfec:	4806      	ldr	r0, [pc, #24]	; (801c008 <tcpip_send_msg_wait_sem+0x28>)
 801bfee:	f7f9 fe2b 	bl	8015c48 <sys_mutex_lock>
  fn(apimsg);
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	68b8      	ldr	r0, [r7, #8]
 801bff6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801bff8:	4803      	ldr	r0, [pc, #12]	; (801c008 <tcpip_send_msg_wait_sem+0x28>)
 801bffa:	f7f9 fe34 	bl	8015c66 <sys_mutex_unlock>
  return ERR_OK;
 801bffe:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801c000:	4618      	mov	r0, r3
 801c002:	3710      	adds	r7, #16
 801c004:	46bd      	mov	sp, r7
 801c006:	bd80      	pop	{r7, pc}
 801c008:	24048ea4 	.word	0x24048ea4

0801c00c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801c00c:	b580      	push	{r7, lr}
 801c00e:	b084      	sub	sp, #16
 801c010:	af02      	add	r7, sp, #8
 801c012:	6078      	str	r0, [r7, #4]
 801c014:	6039      	str	r1, [r7, #0]
  lwip_init();
 801c016:	f7f5 fa3d 	bl	8011494 <lwip_init>

  tcpip_init_done = initfunc;
 801c01a:	4a17      	ldr	r2, [pc, #92]	; (801c078 <tcpip_init+0x6c>)
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801c020:	4a16      	ldr	r2, [pc, #88]	; (801c07c <tcpip_init+0x70>)
 801c022:	683b      	ldr	r3, [r7, #0]
 801c024:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801c026:	2106      	movs	r1, #6
 801c028:	4815      	ldr	r0, [pc, #84]	; (801c080 <tcpip_init+0x74>)
 801c02a:	f7f9 fc8b 	bl	8015944 <sys_mbox_new>
 801c02e:	4603      	mov	r3, r0
 801c030:	2b00      	cmp	r3, #0
 801c032:	d006      	beq.n	801c042 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801c034:	4b13      	ldr	r3, [pc, #76]	; (801c084 <tcpip_init+0x78>)
 801c036:	f240 2261 	movw	r2, #609	; 0x261
 801c03a:	4913      	ldr	r1, [pc, #76]	; (801c088 <tcpip_init+0x7c>)
 801c03c:	4813      	ldr	r0, [pc, #76]	; (801c08c <tcpip_init+0x80>)
 801c03e:	f005 f8f5 	bl	802122c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801c042:	4813      	ldr	r0, [pc, #76]	; (801c090 <tcpip_init+0x84>)
 801c044:	f7f9 fde4 	bl	8015c10 <sys_mutex_new>
 801c048:	4603      	mov	r3, r0
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d006      	beq.n	801c05c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801c04e:	4b0d      	ldr	r3, [pc, #52]	; (801c084 <tcpip_init+0x78>)
 801c050:	f240 2265 	movw	r2, #613	; 0x265
 801c054:	490f      	ldr	r1, [pc, #60]	; (801c094 <tcpip_init+0x88>)
 801c056:	480d      	ldr	r0, [pc, #52]	; (801c08c <tcpip_init+0x80>)
 801c058:	f005 f8e8 	bl	802122c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801c05c:	2300      	movs	r3, #0
 801c05e:	9300      	str	r3, [sp, #0]
 801c060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c064:	2200      	movs	r2, #0
 801c066:	490c      	ldr	r1, [pc, #48]	; (801c098 <tcpip_init+0x8c>)
 801c068:	480c      	ldr	r0, [pc, #48]	; (801c09c <tcpip_init+0x90>)
 801c06a:	f7f9 fe09 	bl	8015c80 <sys_thread_new>
}
 801c06e:	bf00      	nop
 801c070:	3708      	adds	r7, #8
 801c072:	46bd      	mov	sp, r7
 801c074:	bd80      	pop	{r7, pc}
 801c076:	bf00      	nop
 801c078:	2404079c 	.word	0x2404079c
 801c07c:	240407a0 	.word	0x240407a0
 801c080:	240407a4 	.word	0x240407a4
 801c084:	08026da4 	.word	0x08026da4
 801c088:	08026e4c 	.word	0x08026e4c
 801c08c:	08026e14 	.word	0x08026e14
 801c090:	24048ea4 	.word	0x24048ea4
 801c094:	08026e70 	.word	0x08026e70
 801c098:	0801bd9d 	.word	0x0801bd9d
 801c09c:	08026e94 	.word	0x08026e94

0801c0a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	b082      	sub	sp, #8
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c0a8:	f7f9 fe78 	bl	8015d9c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c0ac:	4b0a      	ldr	r3, [pc, #40]	; (801c0d8 <tcpip_tcp_timer+0x38>)
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d103      	bne.n	801c0bc <tcpip_tcp_timer+0x1c>
 801c0b4:	4b09      	ldr	r3, [pc, #36]	; (801c0dc <tcpip_tcp_timer+0x3c>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d005      	beq.n	801c0c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c0bc:	2200      	movs	r2, #0
 801c0be:	4908      	ldr	r1, [pc, #32]	; (801c0e0 <tcpip_tcp_timer+0x40>)
 801c0c0:	20fa      	movs	r0, #250	; 0xfa
 801c0c2:	f000 f8f3 	bl	801c2ac <sys_timeout>
 801c0c6:	e003      	b.n	801c0d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c0c8:	4b06      	ldr	r3, [pc, #24]	; (801c0e4 <tcpip_tcp_timer+0x44>)
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	601a      	str	r2, [r3, #0]
  }
}
 801c0ce:	bf00      	nop
 801c0d0:	bf00      	nop
 801c0d2:	3708      	adds	r7, #8
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}
 801c0d8:	24048e8c 	.word	0x24048e8c
 801c0dc:	24048e9c 	.word	0x24048e9c
 801c0e0:	0801c0a1 	.word	0x0801c0a1
 801c0e4:	240407b0 	.word	0x240407b0

0801c0e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c0ec:	4b0a      	ldr	r3, [pc, #40]	; (801c118 <tcp_timer_needed+0x30>)
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d10f      	bne.n	801c114 <tcp_timer_needed+0x2c>
 801c0f4:	4b09      	ldr	r3, [pc, #36]	; (801c11c <tcp_timer_needed+0x34>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d103      	bne.n	801c104 <tcp_timer_needed+0x1c>
 801c0fc:	4b08      	ldr	r3, [pc, #32]	; (801c120 <tcp_timer_needed+0x38>)
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d007      	beq.n	801c114 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c104:	4b04      	ldr	r3, [pc, #16]	; (801c118 <tcp_timer_needed+0x30>)
 801c106:	2201      	movs	r2, #1
 801c108:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c10a:	2200      	movs	r2, #0
 801c10c:	4905      	ldr	r1, [pc, #20]	; (801c124 <tcp_timer_needed+0x3c>)
 801c10e:	20fa      	movs	r0, #250	; 0xfa
 801c110:	f000 f8cc 	bl	801c2ac <sys_timeout>
  }
}
 801c114:	bf00      	nop
 801c116:	bd80      	pop	{r7, pc}
 801c118:	240407b0 	.word	0x240407b0
 801c11c:	24048e8c 	.word	0x24048e8c
 801c120:	24048e9c 	.word	0x24048e9c
 801c124:	0801c0a1 	.word	0x0801c0a1

0801c128 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b086      	sub	sp, #24
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	60f8      	str	r0, [r7, #12]
 801c130:	60b9      	str	r1, [r7, #8]
 801c132:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c134:	200a      	movs	r0, #10
 801c136:	f7f7 f89d 	bl	8013274 <memp_malloc>
 801c13a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c13c:	693b      	ldr	r3, [r7, #16]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d109      	bne.n	801c156 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c142:	693b      	ldr	r3, [r7, #16]
 801c144:	2b00      	cmp	r3, #0
 801c146:	d151      	bne.n	801c1ec <sys_timeout_abs+0xc4>
 801c148:	4b2a      	ldr	r3, [pc, #168]	; (801c1f4 <sys_timeout_abs+0xcc>)
 801c14a:	22be      	movs	r2, #190	; 0xbe
 801c14c:	492a      	ldr	r1, [pc, #168]	; (801c1f8 <sys_timeout_abs+0xd0>)
 801c14e:	482b      	ldr	r0, [pc, #172]	; (801c1fc <sys_timeout_abs+0xd4>)
 801c150:	f005 f86c 	bl	802122c <iprintf>
    return;
 801c154:	e04a      	b.n	801c1ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c156:	693b      	ldr	r3, [r7, #16]
 801c158:	2200      	movs	r2, #0
 801c15a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c15c:	693b      	ldr	r3, [r7, #16]
 801c15e:	68ba      	ldr	r2, [r7, #8]
 801c160:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c162:	693b      	ldr	r3, [r7, #16]
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c168:	693b      	ldr	r3, [r7, #16]
 801c16a:	68fa      	ldr	r2, [r7, #12]
 801c16c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c16e:	4b24      	ldr	r3, [pc, #144]	; (801c200 <sys_timeout_abs+0xd8>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	2b00      	cmp	r3, #0
 801c174:	d103      	bne.n	801c17e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c176:	4a22      	ldr	r2, [pc, #136]	; (801c200 <sys_timeout_abs+0xd8>)
 801c178:	693b      	ldr	r3, [r7, #16]
 801c17a:	6013      	str	r3, [r2, #0]
    return;
 801c17c:	e037      	b.n	801c1ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c17e:	693b      	ldr	r3, [r7, #16]
 801c180:	685a      	ldr	r2, [r3, #4]
 801c182:	4b1f      	ldr	r3, [pc, #124]	; (801c200 <sys_timeout_abs+0xd8>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	685b      	ldr	r3, [r3, #4]
 801c188:	1ad3      	subs	r3, r2, r3
 801c18a:	0fdb      	lsrs	r3, r3, #31
 801c18c:	f003 0301 	and.w	r3, r3, #1
 801c190:	b2db      	uxtb	r3, r3
 801c192:	2b00      	cmp	r3, #0
 801c194:	d007      	beq.n	801c1a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c196:	4b1a      	ldr	r3, [pc, #104]	; (801c200 <sys_timeout_abs+0xd8>)
 801c198:	681a      	ldr	r2, [r3, #0]
 801c19a:	693b      	ldr	r3, [r7, #16]
 801c19c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c19e:	4a18      	ldr	r2, [pc, #96]	; (801c200 <sys_timeout_abs+0xd8>)
 801c1a0:	693b      	ldr	r3, [r7, #16]
 801c1a2:	6013      	str	r3, [r2, #0]
 801c1a4:	e023      	b.n	801c1ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c1a6:	4b16      	ldr	r3, [pc, #88]	; (801c200 <sys_timeout_abs+0xd8>)
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	617b      	str	r3, [r7, #20]
 801c1ac:	e01a      	b.n	801c1e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c1ae:	697b      	ldr	r3, [r7, #20]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d00b      	beq.n	801c1ce <sys_timeout_abs+0xa6>
 801c1b6:	693b      	ldr	r3, [r7, #16]
 801c1b8:	685a      	ldr	r2, [r3, #4]
 801c1ba:	697b      	ldr	r3, [r7, #20]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	1ad3      	subs	r3, r2, r3
 801c1c2:	0fdb      	lsrs	r3, r3, #31
 801c1c4:	f003 0301 	and.w	r3, r3, #1
 801c1c8:	b2db      	uxtb	r3, r3
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d007      	beq.n	801c1de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	681a      	ldr	r2, [r3, #0]
 801c1d2:	693b      	ldr	r3, [r7, #16]
 801c1d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c1d6:	697b      	ldr	r3, [r7, #20]
 801c1d8:	693a      	ldr	r2, [r7, #16]
 801c1da:	601a      	str	r2, [r3, #0]
        break;
 801c1dc:	e007      	b.n	801c1ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c1de:	697b      	ldr	r3, [r7, #20]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	617b      	str	r3, [r7, #20]
 801c1e4:	697b      	ldr	r3, [r7, #20]
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d1e1      	bne.n	801c1ae <sys_timeout_abs+0x86>
 801c1ea:	e000      	b.n	801c1ee <sys_timeout_abs+0xc6>
    return;
 801c1ec:	bf00      	nop
      }
    }
  }
}
 801c1ee:	3718      	adds	r7, #24
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	bd80      	pop	{r7, pc}
 801c1f4:	08026ea4 	.word	0x08026ea4
 801c1f8:	08026ef8 	.word	0x08026ef8
 801c1fc:	08026f38 	.word	0x08026f38
 801c200:	240407a8 	.word	0x240407a8

0801c204 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c204:	b580      	push	{r7, lr}
 801c206:	b086      	sub	sp, #24
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c210:	697b      	ldr	r3, [r7, #20]
 801c212:	685b      	ldr	r3, [r3, #4]
 801c214:	4798      	blx	r3

  now = sys_now();
 801c216:	f7ee fbaf 	bl	800a978 <sys_now>
 801c21a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c21c:	697b      	ldr	r3, [r7, #20]
 801c21e:	681a      	ldr	r2, [r3, #0]
 801c220:	4b0f      	ldr	r3, [pc, #60]	; (801c260 <lwip_cyclic_timer+0x5c>)
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	4413      	add	r3, r2
 801c226:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c228:	68fa      	ldr	r2, [r7, #12]
 801c22a:	693b      	ldr	r3, [r7, #16]
 801c22c:	1ad3      	subs	r3, r2, r3
 801c22e:	0fdb      	lsrs	r3, r3, #31
 801c230:	f003 0301 	and.w	r3, r3, #1
 801c234:	b2db      	uxtb	r3, r3
 801c236:	2b00      	cmp	r3, #0
 801c238:	d009      	beq.n	801c24e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c23a:	697b      	ldr	r3, [r7, #20]
 801c23c:	681a      	ldr	r2, [r3, #0]
 801c23e:	693b      	ldr	r3, [r7, #16]
 801c240:	4413      	add	r3, r2
 801c242:	687a      	ldr	r2, [r7, #4]
 801c244:	4907      	ldr	r1, [pc, #28]	; (801c264 <lwip_cyclic_timer+0x60>)
 801c246:	4618      	mov	r0, r3
 801c248:	f7ff ff6e 	bl	801c128 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c24c:	e004      	b.n	801c258 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c24e:	687a      	ldr	r2, [r7, #4]
 801c250:	4904      	ldr	r1, [pc, #16]	; (801c264 <lwip_cyclic_timer+0x60>)
 801c252:	68f8      	ldr	r0, [r7, #12]
 801c254:	f7ff ff68 	bl	801c128 <sys_timeout_abs>
}
 801c258:	bf00      	nop
 801c25a:	3718      	adds	r7, #24
 801c25c:	46bd      	mov	sp, r7
 801c25e:	bd80      	pop	{r7, pc}
 801c260:	240407ac 	.word	0x240407ac
 801c264:	0801c205 	.word	0x0801c205

0801c268 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b082      	sub	sp, #8
 801c26c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c26e:	2301      	movs	r3, #1
 801c270:	607b      	str	r3, [r7, #4]
 801c272:	e00e      	b.n	801c292 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c274:	4a0b      	ldr	r2, [pc, #44]	; (801c2a4 <sys_timeouts_init+0x3c>)
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	00db      	lsls	r3, r3, #3
 801c280:	4a08      	ldr	r2, [pc, #32]	; (801c2a4 <sys_timeouts_init+0x3c>)
 801c282:	4413      	add	r3, r2
 801c284:	461a      	mov	r2, r3
 801c286:	4908      	ldr	r1, [pc, #32]	; (801c2a8 <sys_timeouts_init+0x40>)
 801c288:	f000 f810 	bl	801c2ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	3301      	adds	r3, #1
 801c290:	607b      	str	r3, [r7, #4]
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	2b02      	cmp	r3, #2
 801c296:	d9ed      	bls.n	801c274 <sys_timeouts_init+0xc>
  }
}
 801c298:	bf00      	nop
 801c29a:	bf00      	nop
 801c29c:	3708      	adds	r7, #8
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	bd80      	pop	{r7, pc}
 801c2a2:	bf00      	nop
 801c2a4:	0802761c 	.word	0x0802761c
 801c2a8:	0801c205 	.word	0x0801c205

0801c2ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b086      	sub	sp, #24
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	60f8      	str	r0, [r7, #12]
 801c2b4:	60b9      	str	r1, [r7, #8]
 801c2b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c2be:	d306      	bcc.n	801c2ce <sys_timeout+0x22>
 801c2c0:	4b0a      	ldr	r3, [pc, #40]	; (801c2ec <sys_timeout+0x40>)
 801c2c2:	f240 1229 	movw	r2, #297	; 0x129
 801c2c6:	490a      	ldr	r1, [pc, #40]	; (801c2f0 <sys_timeout+0x44>)
 801c2c8:	480a      	ldr	r0, [pc, #40]	; (801c2f4 <sys_timeout+0x48>)
 801c2ca:	f004 ffaf 	bl	802122c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c2ce:	f7ee fb53 	bl	800a978 <sys_now>
 801c2d2:	4602      	mov	r2, r0
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	4413      	add	r3, r2
 801c2d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c2da:	687a      	ldr	r2, [r7, #4]
 801c2dc:	68b9      	ldr	r1, [r7, #8]
 801c2de:	6978      	ldr	r0, [r7, #20]
 801c2e0:	f7ff ff22 	bl	801c128 <sys_timeout_abs>
#endif
}
 801c2e4:	bf00      	nop
 801c2e6:	3718      	adds	r7, #24
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}
 801c2ec:	08026ea4 	.word	0x08026ea4
 801c2f0:	08026f60 	.word	0x08026f60
 801c2f4:	08026f38 	.word	0x08026f38

0801c2f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b084      	sub	sp, #16
 801c2fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c2fe:	f7ee fb3b 	bl	800a978 <sys_now>
 801c302:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c304:	4b17      	ldr	r3, [pc, #92]	; (801c364 <sys_check_timeouts+0x6c>)
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d022      	beq.n	801c356 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c310:	68bb      	ldr	r3, [r7, #8]
 801c312:	685b      	ldr	r3, [r3, #4]
 801c314:	68fa      	ldr	r2, [r7, #12]
 801c316:	1ad3      	subs	r3, r2, r3
 801c318:	0fdb      	lsrs	r3, r3, #31
 801c31a:	f003 0301 	and.w	r3, r3, #1
 801c31e:	b2db      	uxtb	r3, r3
 801c320:	2b00      	cmp	r3, #0
 801c322:	d11a      	bne.n	801c35a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	4a0e      	ldr	r2, [pc, #56]	; (801c364 <sys_check_timeouts+0x6c>)
 801c32a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c32c:	68bb      	ldr	r3, [r7, #8]
 801c32e:	689b      	ldr	r3, [r3, #8]
 801c330:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c332:	68bb      	ldr	r3, [r7, #8]
 801c334:	68db      	ldr	r3, [r3, #12]
 801c336:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c338:	68bb      	ldr	r3, [r7, #8]
 801c33a:	685b      	ldr	r3, [r3, #4]
 801c33c:	4a0a      	ldr	r2, [pc, #40]	; (801c368 <sys_check_timeouts+0x70>)
 801c33e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c340:	68b9      	ldr	r1, [r7, #8]
 801c342:	200a      	movs	r0, #10
 801c344:	f7f7 f80c 	bl	8013360 <memp_free>
    if (handler != NULL) {
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d0da      	beq.n	801c304 <sys_check_timeouts+0xc>
      handler(arg);
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	6838      	ldr	r0, [r7, #0]
 801c352:	4798      	blx	r3
  do {
 801c354:	e7d6      	b.n	801c304 <sys_check_timeouts+0xc>
      return;
 801c356:	bf00      	nop
 801c358:	e000      	b.n	801c35c <sys_check_timeouts+0x64>
      return;
 801c35a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c35c:	3710      	adds	r7, #16
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}
 801c362:	bf00      	nop
 801c364:	240407a8 	.word	0x240407a8
 801c368:	240407ac 	.word	0x240407ac

0801c36c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b082      	sub	sp, #8
 801c370:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c372:	4b16      	ldr	r3, [pc, #88]	; (801c3cc <sys_timeouts_sleeptime+0x60>)
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d102      	bne.n	801c380 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c37e:	e020      	b.n	801c3c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c380:	f7ee fafa 	bl	800a978 <sys_now>
 801c384:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c386:	4b11      	ldr	r3, [pc, #68]	; (801c3cc <sys_timeouts_sleeptime+0x60>)
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	685a      	ldr	r2, [r3, #4]
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	1ad3      	subs	r3, r2, r3
 801c390:	0fdb      	lsrs	r3, r3, #31
 801c392:	f003 0301 	and.w	r3, r3, #1
 801c396:	b2db      	uxtb	r3, r3
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d001      	beq.n	801c3a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c39c:	2300      	movs	r3, #0
 801c39e:	e010      	b.n	801c3c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c3a0:	4b0a      	ldr	r3, [pc, #40]	; (801c3cc <sys_timeouts_sleeptime+0x60>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	685a      	ldr	r2, [r3, #4]
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	1ad3      	subs	r3, r2, r3
 801c3aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c3ac:	683b      	ldr	r3, [r7, #0]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	da06      	bge.n	801c3c0 <sys_timeouts_sleeptime+0x54>
 801c3b2:	4b07      	ldr	r3, [pc, #28]	; (801c3d0 <sys_timeouts_sleeptime+0x64>)
 801c3b4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c3b8:	4906      	ldr	r1, [pc, #24]	; (801c3d4 <sys_timeouts_sleeptime+0x68>)
 801c3ba:	4807      	ldr	r0, [pc, #28]	; (801c3d8 <sys_timeouts_sleeptime+0x6c>)
 801c3bc:	f004 ff36 	bl	802122c <iprintf>
    return ret;
 801c3c0:	683b      	ldr	r3, [r7, #0]
  }
}
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	3708      	adds	r7, #8
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}
 801c3ca:	bf00      	nop
 801c3cc:	240407a8 	.word	0x240407a8
 801c3d0:	08026ea4 	.word	0x08026ea4
 801c3d4:	08026f98 	.word	0x08026f98
 801c3d8:	08026f38 	.word	0x08026f38

0801c3dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c3dc:	b580      	push	{r7, lr}
 801c3de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c3e0:	f004 ff3c 	bl	802125c <rand>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c3ec:	b29b      	uxth	r3, r3
 801c3ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c3f2:	b29a      	uxth	r2, r3
 801c3f4:	4b01      	ldr	r3, [pc, #4]	; (801c3fc <udp_init+0x20>)
 801c3f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c3f8:	bf00      	nop
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	24000030 	.word	0x24000030

0801c400 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c400:	b480      	push	{r7}
 801c402:	b083      	sub	sp, #12
 801c404:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c406:	2300      	movs	r3, #0
 801c408:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c40a:	4b17      	ldr	r3, [pc, #92]	; (801c468 <udp_new_port+0x68>)
 801c40c:	881b      	ldrh	r3, [r3, #0]
 801c40e:	1c5a      	adds	r2, r3, #1
 801c410:	b291      	uxth	r1, r2
 801c412:	4a15      	ldr	r2, [pc, #84]	; (801c468 <udp_new_port+0x68>)
 801c414:	8011      	strh	r1, [r2, #0]
 801c416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c41a:	4293      	cmp	r3, r2
 801c41c:	d103      	bne.n	801c426 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c41e:	4b12      	ldr	r3, [pc, #72]	; (801c468 <udp_new_port+0x68>)
 801c420:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c424:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c426:	4b11      	ldr	r3, [pc, #68]	; (801c46c <udp_new_port+0x6c>)
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	603b      	str	r3, [r7, #0]
 801c42c:	e011      	b.n	801c452 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c42e:	683b      	ldr	r3, [r7, #0]
 801c430:	8a5a      	ldrh	r2, [r3, #18]
 801c432:	4b0d      	ldr	r3, [pc, #52]	; (801c468 <udp_new_port+0x68>)
 801c434:	881b      	ldrh	r3, [r3, #0]
 801c436:	429a      	cmp	r2, r3
 801c438:	d108      	bne.n	801c44c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c43a:	88fb      	ldrh	r3, [r7, #6]
 801c43c:	3301      	adds	r3, #1
 801c43e:	80fb      	strh	r3, [r7, #6]
 801c440:	88fb      	ldrh	r3, [r7, #6]
 801c442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c446:	d3e0      	bcc.n	801c40a <udp_new_port+0xa>
        return 0;
 801c448:	2300      	movs	r3, #0
 801c44a:	e007      	b.n	801c45c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c44c:	683b      	ldr	r3, [r7, #0]
 801c44e:	68db      	ldr	r3, [r3, #12]
 801c450:	603b      	str	r3, [r7, #0]
 801c452:	683b      	ldr	r3, [r7, #0]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d1ea      	bne.n	801c42e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c458:	4b03      	ldr	r3, [pc, #12]	; (801c468 <udp_new_port+0x68>)
 801c45a:	881b      	ldrh	r3, [r3, #0]
}
 801c45c:	4618      	mov	r0, r3
 801c45e:	370c      	adds	r7, #12
 801c460:	46bd      	mov	sp, r7
 801c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c466:	4770      	bx	lr
 801c468:	24000030 	.word	0x24000030
 801c46c:	24048ea8 	.word	0x24048ea8

0801c470 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b084      	sub	sp, #16
 801c474:	af00      	add	r7, sp, #0
 801c476:	60f8      	str	r0, [r7, #12]
 801c478:	60b9      	str	r1, [r7, #8]
 801c47a:	4613      	mov	r3, r2
 801c47c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d105      	bne.n	801c490 <udp_input_local_match+0x20>
 801c484:	4b27      	ldr	r3, [pc, #156]	; (801c524 <udp_input_local_match+0xb4>)
 801c486:	2287      	movs	r2, #135	; 0x87
 801c488:	4927      	ldr	r1, [pc, #156]	; (801c528 <udp_input_local_match+0xb8>)
 801c48a:	4828      	ldr	r0, [pc, #160]	; (801c52c <udp_input_local_match+0xbc>)
 801c48c:	f004 fece 	bl	802122c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c490:	68bb      	ldr	r3, [r7, #8]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d105      	bne.n	801c4a2 <udp_input_local_match+0x32>
 801c496:	4b23      	ldr	r3, [pc, #140]	; (801c524 <udp_input_local_match+0xb4>)
 801c498:	2288      	movs	r2, #136	; 0x88
 801c49a:	4925      	ldr	r1, [pc, #148]	; (801c530 <udp_input_local_match+0xc0>)
 801c49c:	4823      	ldr	r0, [pc, #140]	; (801c52c <udp_input_local_match+0xbc>)
 801c49e:	f004 fec5 	bl	802122c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	7a1b      	ldrb	r3, [r3, #8]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d00b      	beq.n	801c4c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	7a1a      	ldrb	r2, [r3, #8]
 801c4ae:	4b21      	ldr	r3, [pc, #132]	; (801c534 <udp_input_local_match+0xc4>)
 801c4b0:	685b      	ldr	r3, [r3, #4]
 801c4b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c4b6:	3301      	adds	r3, #1
 801c4b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c4ba:	429a      	cmp	r2, r3
 801c4bc:	d001      	beq.n	801c4c2 <udp_input_local_match+0x52>
    return 0;
 801c4be:	2300      	movs	r3, #0
 801c4c0:	e02b      	b.n	801c51a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c4c2:	79fb      	ldrb	r3, [r7, #7]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d018      	beq.n	801c4fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d013      	beq.n	801c4f6 <udp_input_local_match+0x86>
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d00f      	beq.n	801c4f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c4d6:	4b17      	ldr	r3, [pc, #92]	; (801c534 <udp_input_local_match+0xc4>)
 801c4d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c4de:	d00a      	beq.n	801c4f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	681a      	ldr	r2, [r3, #0]
 801c4e4:	4b13      	ldr	r3, [pc, #76]	; (801c534 <udp_input_local_match+0xc4>)
 801c4e6:	695b      	ldr	r3, [r3, #20]
 801c4e8:	405a      	eors	r2, r3
 801c4ea:	68bb      	ldr	r3, [r7, #8]
 801c4ec:	3308      	adds	r3, #8
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d110      	bne.n	801c518 <udp_input_local_match+0xa8>
          return 1;
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	e00f      	b.n	801c51a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d009      	beq.n	801c514 <udp_input_local_match+0xa4>
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d005      	beq.n	801c514 <udp_input_local_match+0xa4>
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	681a      	ldr	r2, [r3, #0]
 801c50c:	4b09      	ldr	r3, [pc, #36]	; (801c534 <udp_input_local_match+0xc4>)
 801c50e:	695b      	ldr	r3, [r3, #20]
 801c510:	429a      	cmp	r2, r3
 801c512:	d101      	bne.n	801c518 <udp_input_local_match+0xa8>
        return 1;
 801c514:	2301      	movs	r3, #1
 801c516:	e000      	b.n	801c51a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c518:	2300      	movs	r3, #0
}
 801c51a:	4618      	mov	r0, r3
 801c51c:	3710      	adds	r7, #16
 801c51e:	46bd      	mov	sp, r7
 801c520:	bd80      	pop	{r7, pc}
 801c522:	bf00      	nop
 801c524:	08026fac 	.word	0x08026fac
 801c528:	08026ff8 	.word	0x08026ff8
 801c52c:	0802701c 	.word	0x0802701c
 801c530:	08027044 	.word	0x08027044
 801c534:	24045dc4 	.word	0x24045dc4

0801c538 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c538:	b590      	push	{r4, r7, lr}
 801c53a:	b08d      	sub	sp, #52	; 0x34
 801c53c:	af02      	add	r7, sp, #8
 801c53e:	6078      	str	r0, [r7, #4]
 801c540:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c542:	2300      	movs	r3, #0
 801c544:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d105      	bne.n	801c558 <udp_input+0x20>
 801c54c:	4b7c      	ldr	r3, [pc, #496]	; (801c740 <udp_input+0x208>)
 801c54e:	22cf      	movs	r2, #207	; 0xcf
 801c550:	497c      	ldr	r1, [pc, #496]	; (801c744 <udp_input+0x20c>)
 801c552:	487d      	ldr	r0, [pc, #500]	; (801c748 <udp_input+0x210>)
 801c554:	f004 fe6a 	bl	802122c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c558:	683b      	ldr	r3, [r7, #0]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d105      	bne.n	801c56a <udp_input+0x32>
 801c55e:	4b78      	ldr	r3, [pc, #480]	; (801c740 <udp_input+0x208>)
 801c560:	22d0      	movs	r2, #208	; 0xd0
 801c562:	497a      	ldr	r1, [pc, #488]	; (801c74c <udp_input+0x214>)
 801c564:	4878      	ldr	r0, [pc, #480]	; (801c748 <udp_input+0x210>)
 801c566:	f004 fe61 	bl	802122c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	895b      	ldrh	r3, [r3, #10]
 801c56e:	2b07      	cmp	r3, #7
 801c570:	d803      	bhi.n	801c57a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c572:	6878      	ldr	r0, [r7, #4]
 801c574:	f7f7 fe5c 	bl	8014230 <pbuf_free>
    goto end;
 801c578:	e0de      	b.n	801c738 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	685b      	ldr	r3, [r3, #4]
 801c57e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c580:	4b73      	ldr	r3, [pc, #460]	; (801c750 <udp_input+0x218>)
 801c582:	695b      	ldr	r3, [r3, #20]
 801c584:	4a72      	ldr	r2, [pc, #456]	; (801c750 <udp_input+0x218>)
 801c586:	6812      	ldr	r2, [r2, #0]
 801c588:	4611      	mov	r1, r2
 801c58a:	4618      	mov	r0, r3
 801c58c:	f7f5 fa30 	bl	80119f0 <ip4_addr_isbroadcast_u32>
 801c590:	4603      	mov	r3, r0
 801c592:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c594:	697b      	ldr	r3, [r7, #20]
 801c596:	881b      	ldrh	r3, [r3, #0]
 801c598:	b29b      	uxth	r3, r3
 801c59a:	4618      	mov	r0, r3
 801c59c:	f7f3 fc9c 	bl	800fed8 <lwip_htons>
 801c5a0:	4603      	mov	r3, r0
 801c5a2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	885b      	ldrh	r3, [r3, #2]
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	4618      	mov	r0, r3
 801c5ac:	f7f3 fc94 	bl	800fed8 <lwip_htons>
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c5bc:	2300      	movs	r3, #0
 801c5be:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c5c0:	4b64      	ldr	r3, [pc, #400]	; (801c754 <udp_input+0x21c>)
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	627b      	str	r3, [r7, #36]	; 0x24
 801c5c6:	e054      	b.n	801c672 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5ca:	8a5b      	ldrh	r3, [r3, #18]
 801c5cc:	89fa      	ldrh	r2, [r7, #14]
 801c5ce:	429a      	cmp	r2, r3
 801c5d0:	d14a      	bne.n	801c668 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c5d2:	7cfb      	ldrb	r3, [r7, #19]
 801c5d4:	461a      	mov	r2, r3
 801c5d6:	6839      	ldr	r1, [r7, #0]
 801c5d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c5da:	f7ff ff49 	bl	801c470 <udp_input_local_match>
 801c5de:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d041      	beq.n	801c668 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5e6:	7c1b      	ldrb	r3, [r3, #16]
 801c5e8:	f003 0304 	and.w	r3, r3, #4
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d11d      	bne.n	801c62c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c5f0:	69fb      	ldr	r3, [r7, #28]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d102      	bne.n	801c5fc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5f8:	61fb      	str	r3, [r7, #28]
 801c5fa:	e017      	b.n	801c62c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c5fc:	7cfb      	ldrb	r3, [r7, #19]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d014      	beq.n	801c62c <udp_input+0xf4>
 801c602:	4b53      	ldr	r3, [pc, #332]	; (801c750 <udp_input+0x218>)
 801c604:	695b      	ldr	r3, [r3, #20]
 801c606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c60a:	d10f      	bne.n	801c62c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c60c:	69fb      	ldr	r3, [r7, #28]
 801c60e:	681a      	ldr	r2, [r3, #0]
 801c610:	683b      	ldr	r3, [r7, #0]
 801c612:	3304      	adds	r3, #4
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	429a      	cmp	r2, r3
 801c618:	d008      	beq.n	801c62c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c61c:	681a      	ldr	r2, [r3, #0]
 801c61e:	683b      	ldr	r3, [r7, #0]
 801c620:	3304      	adds	r3, #4
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	429a      	cmp	r2, r3
 801c626:	d101      	bne.n	801c62c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c62a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c62e:	8a9b      	ldrh	r3, [r3, #20]
 801c630:	8a3a      	ldrh	r2, [r7, #16]
 801c632:	429a      	cmp	r2, r3
 801c634:	d118      	bne.n	801c668 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c638:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d005      	beq.n	801c64a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c640:	685a      	ldr	r2, [r3, #4]
 801c642:	4b43      	ldr	r3, [pc, #268]	; (801c750 <udp_input+0x218>)
 801c644:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c646:	429a      	cmp	r2, r3
 801c648:	d10e      	bne.n	801c668 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c64a:	6a3b      	ldr	r3, [r7, #32]
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d014      	beq.n	801c67a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c652:	68da      	ldr	r2, [r3, #12]
 801c654:	6a3b      	ldr	r3, [r7, #32]
 801c656:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c658:	4b3e      	ldr	r3, [pc, #248]	; (801c754 <udp_input+0x21c>)
 801c65a:	681a      	ldr	r2, [r3, #0]
 801c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c65e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c660:	4a3c      	ldr	r2, [pc, #240]	; (801c754 <udp_input+0x21c>)
 801c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c664:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c666:	e008      	b.n	801c67a <udp_input+0x142>
      }
    }

    prev = pcb;
 801c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c66a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c66e:	68db      	ldr	r3, [r3, #12]
 801c670:	627b      	str	r3, [r7, #36]	; 0x24
 801c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c674:	2b00      	cmp	r3, #0
 801c676:	d1a7      	bne.n	801c5c8 <udp_input+0x90>
 801c678:	e000      	b.n	801c67c <udp_input+0x144>
        break;
 801c67a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d101      	bne.n	801c686 <udp_input+0x14e>
    pcb = uncon_pcb;
 801c682:	69fb      	ldr	r3, [r7, #28]
 801c684:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d002      	beq.n	801c692 <udp_input+0x15a>
    for_us = 1;
 801c68c:	2301      	movs	r3, #1
 801c68e:	76fb      	strb	r3, [r7, #27]
 801c690:	e00a      	b.n	801c6a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	3304      	adds	r3, #4
 801c696:	681a      	ldr	r2, [r3, #0]
 801c698:	4b2d      	ldr	r3, [pc, #180]	; (801c750 <udp_input+0x218>)
 801c69a:	695b      	ldr	r3, [r3, #20]
 801c69c:	429a      	cmp	r2, r3
 801c69e:	bf0c      	ite	eq
 801c6a0:	2301      	moveq	r3, #1
 801c6a2:	2300      	movne	r3, #0
 801c6a4:	b2db      	uxtb	r3, r3
 801c6a6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c6a8:	7efb      	ldrb	r3, [r7, #27]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d041      	beq.n	801c732 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c6ae:	2108      	movs	r1, #8
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f7f7 fd05 	bl	80140c0 <pbuf_remove_header>
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d00a      	beq.n	801c6d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c6bc:	4b20      	ldr	r3, [pc, #128]	; (801c740 <udp_input+0x208>)
 801c6be:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c6c2:	4925      	ldr	r1, [pc, #148]	; (801c758 <udp_input+0x220>)
 801c6c4:	4820      	ldr	r0, [pc, #128]	; (801c748 <udp_input+0x210>)
 801c6c6:	f004 fdb1 	bl	802122c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c6ca:	6878      	ldr	r0, [r7, #4]
 801c6cc:	f7f7 fdb0 	bl	8014230 <pbuf_free>
      goto end;
 801c6d0:	e032      	b.n	801c738 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d012      	beq.n	801c6fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6da:	699b      	ldr	r3, [r3, #24]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d00a      	beq.n	801c6f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6e2:	699c      	ldr	r4, [r3, #24]
 801c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6e6:	69d8      	ldr	r0, [r3, #28]
 801c6e8:	8a3b      	ldrh	r3, [r7, #16]
 801c6ea:	9300      	str	r3, [sp, #0]
 801c6ec:	4b1b      	ldr	r3, [pc, #108]	; (801c75c <udp_input+0x224>)
 801c6ee:	687a      	ldr	r2, [r7, #4]
 801c6f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c6f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c6f4:	e021      	b.n	801c73a <udp_input+0x202>
        pbuf_free(p);
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	f7f7 fd9a 	bl	8014230 <pbuf_free>
        goto end;
 801c6fc:	e01c      	b.n	801c738 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c6fe:	7cfb      	ldrb	r3, [r7, #19]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d112      	bne.n	801c72a <udp_input+0x1f2>
 801c704:	4b12      	ldr	r3, [pc, #72]	; (801c750 <udp_input+0x218>)
 801c706:	695b      	ldr	r3, [r3, #20]
 801c708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c70c:	2be0      	cmp	r3, #224	; 0xe0
 801c70e:	d00c      	beq.n	801c72a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c710:	4b0f      	ldr	r3, [pc, #60]	; (801c750 <udp_input+0x218>)
 801c712:	899b      	ldrh	r3, [r3, #12]
 801c714:	3308      	adds	r3, #8
 801c716:	b29b      	uxth	r3, r3
 801c718:	b21b      	sxth	r3, r3
 801c71a:	4619      	mov	r1, r3
 801c71c:	6878      	ldr	r0, [r7, #4]
 801c71e:	f7f7 fd42 	bl	80141a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c722:	2103      	movs	r1, #3
 801c724:	6878      	ldr	r0, [r7, #4]
 801c726:	f7f4 fd65 	bl	80111f4 <icmp_dest_unreach>
      pbuf_free(p);
 801c72a:	6878      	ldr	r0, [r7, #4]
 801c72c:	f7f7 fd80 	bl	8014230 <pbuf_free>
  return;
 801c730:	e003      	b.n	801c73a <udp_input+0x202>
    pbuf_free(p);
 801c732:	6878      	ldr	r0, [r7, #4]
 801c734:	f7f7 fd7c 	bl	8014230 <pbuf_free>
  return;
 801c738:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c73a:	372c      	adds	r7, #44	; 0x2c
 801c73c:	46bd      	mov	sp, r7
 801c73e:	bd90      	pop	{r4, r7, pc}
 801c740:	08026fac 	.word	0x08026fac
 801c744:	0802706c 	.word	0x0802706c
 801c748:	0802701c 	.word	0x0802701c
 801c74c:	08027084 	.word	0x08027084
 801c750:	24045dc4 	.word	0x24045dc4
 801c754:	24048ea8 	.word	0x24048ea8
 801c758:	080270a0 	.word	0x080270a0
 801c75c:	24045dd4 	.word	0x24045dd4

0801c760 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b082      	sub	sp, #8
 801c764:	af00      	add	r7, sp, #0
 801c766:	6078      	str	r0, [r7, #4]
 801c768:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d109      	bne.n	801c784 <udp_send+0x24>
 801c770:	4b11      	ldr	r3, [pc, #68]	; (801c7b8 <udp_send+0x58>)
 801c772:	f240 12d5 	movw	r2, #469	; 0x1d5
 801c776:	4911      	ldr	r1, [pc, #68]	; (801c7bc <udp_send+0x5c>)
 801c778:	4811      	ldr	r0, [pc, #68]	; (801c7c0 <udp_send+0x60>)
 801c77a:	f004 fd57 	bl	802122c <iprintf>
 801c77e:	f06f 030f 	mvn.w	r3, #15
 801c782:	e015      	b.n	801c7b0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801c784:	683b      	ldr	r3, [r7, #0]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d109      	bne.n	801c79e <udp_send+0x3e>
 801c78a:	4b0b      	ldr	r3, [pc, #44]	; (801c7b8 <udp_send+0x58>)
 801c78c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801c790:	490c      	ldr	r1, [pc, #48]	; (801c7c4 <udp_send+0x64>)
 801c792:	480b      	ldr	r0, [pc, #44]	; (801c7c0 <udp_send+0x60>)
 801c794:	f004 fd4a 	bl	802122c <iprintf>
 801c798:	f06f 030f 	mvn.w	r3, #15
 801c79c:	e008      	b.n	801c7b0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	1d1a      	adds	r2, r3, #4
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	8a9b      	ldrh	r3, [r3, #20]
 801c7a6:	6839      	ldr	r1, [r7, #0]
 801c7a8:	6878      	ldr	r0, [r7, #4]
 801c7aa:	f000 f80d 	bl	801c7c8 <udp_sendto>
 801c7ae:	4603      	mov	r3, r0
}
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	3708      	adds	r7, #8
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	bd80      	pop	{r7, pc}
 801c7b8:	08026fac 	.word	0x08026fac
 801c7bc:	080270bc 	.word	0x080270bc
 801c7c0:	0802701c 	.word	0x0802701c
 801c7c4:	080270d4 	.word	0x080270d4

0801c7c8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b088      	sub	sp, #32
 801c7cc:	af02      	add	r7, sp, #8
 801c7ce:	60f8      	str	r0, [r7, #12]
 801c7d0:	60b9      	str	r1, [r7, #8]
 801c7d2:	607a      	str	r2, [r7, #4]
 801c7d4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d109      	bne.n	801c7f0 <udp_sendto+0x28>
 801c7dc:	4b23      	ldr	r3, [pc, #140]	; (801c86c <udp_sendto+0xa4>)
 801c7de:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c7e2:	4923      	ldr	r1, [pc, #140]	; (801c870 <udp_sendto+0xa8>)
 801c7e4:	4823      	ldr	r0, [pc, #140]	; (801c874 <udp_sendto+0xac>)
 801c7e6:	f004 fd21 	bl	802122c <iprintf>
 801c7ea:	f06f 030f 	mvn.w	r3, #15
 801c7ee:	e038      	b.n	801c862 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c7f0:	68bb      	ldr	r3, [r7, #8]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d109      	bne.n	801c80a <udp_sendto+0x42>
 801c7f6:	4b1d      	ldr	r3, [pc, #116]	; (801c86c <udp_sendto+0xa4>)
 801c7f8:	f240 2219 	movw	r2, #537	; 0x219
 801c7fc:	491e      	ldr	r1, [pc, #120]	; (801c878 <udp_sendto+0xb0>)
 801c7fe:	481d      	ldr	r0, [pc, #116]	; (801c874 <udp_sendto+0xac>)
 801c800:	f004 fd14 	bl	802122c <iprintf>
 801c804:	f06f 030f 	mvn.w	r3, #15
 801c808:	e02b      	b.n	801c862 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d109      	bne.n	801c824 <udp_sendto+0x5c>
 801c810:	4b16      	ldr	r3, [pc, #88]	; (801c86c <udp_sendto+0xa4>)
 801c812:	f240 221a 	movw	r2, #538	; 0x21a
 801c816:	4919      	ldr	r1, [pc, #100]	; (801c87c <udp_sendto+0xb4>)
 801c818:	4816      	ldr	r0, [pc, #88]	; (801c874 <udp_sendto+0xac>)
 801c81a:	f004 fd07 	bl	802122c <iprintf>
 801c81e:	f06f 030f 	mvn.w	r3, #15
 801c822:	e01e      	b.n	801c862 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	7a1b      	ldrb	r3, [r3, #8]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d006      	beq.n	801c83a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	7a1b      	ldrb	r3, [r3, #8]
 801c830:	4618      	mov	r0, r3
 801c832:	f7f7 f93d 	bl	8013ab0 <netif_get_by_index>
 801c836:	6178      	str	r0, [r7, #20]
 801c838:	e003      	b.n	801c842 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c83a:	6878      	ldr	r0, [r7, #4]
 801c83c:	f7f4 fe42 	bl	80114c4 <ip4_route>
 801c840:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c842:	697b      	ldr	r3, [r7, #20]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d102      	bne.n	801c84e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801c848:	f06f 0303 	mvn.w	r3, #3
 801c84c:	e009      	b.n	801c862 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c84e:	887a      	ldrh	r2, [r7, #2]
 801c850:	697b      	ldr	r3, [r7, #20]
 801c852:	9300      	str	r3, [sp, #0]
 801c854:	4613      	mov	r3, r2
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	68b9      	ldr	r1, [r7, #8]
 801c85a:	68f8      	ldr	r0, [r7, #12]
 801c85c:	f000 f810 	bl	801c880 <udp_sendto_if>
 801c860:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c862:	4618      	mov	r0, r3
 801c864:	3718      	adds	r7, #24
 801c866:	46bd      	mov	sp, r7
 801c868:	bd80      	pop	{r7, pc}
 801c86a:	bf00      	nop
 801c86c:	08026fac 	.word	0x08026fac
 801c870:	080270ec 	.word	0x080270ec
 801c874:	0802701c 	.word	0x0802701c
 801c878:	08027104 	.word	0x08027104
 801c87c:	08027120 	.word	0x08027120

0801c880 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b088      	sub	sp, #32
 801c884:	af02      	add	r7, sp, #8
 801c886:	60f8      	str	r0, [r7, #12]
 801c888:	60b9      	str	r1, [r7, #8]
 801c88a:	607a      	str	r2, [r7, #4]
 801c88c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	2b00      	cmp	r3, #0
 801c892:	d109      	bne.n	801c8a8 <udp_sendto_if+0x28>
 801c894:	4b2e      	ldr	r3, [pc, #184]	; (801c950 <udp_sendto_if+0xd0>)
 801c896:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c89a:	492e      	ldr	r1, [pc, #184]	; (801c954 <udp_sendto_if+0xd4>)
 801c89c:	482e      	ldr	r0, [pc, #184]	; (801c958 <udp_sendto_if+0xd8>)
 801c89e:	f004 fcc5 	bl	802122c <iprintf>
 801c8a2:	f06f 030f 	mvn.w	r3, #15
 801c8a6:	e04f      	b.n	801c948 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c8a8:	68bb      	ldr	r3, [r7, #8]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d109      	bne.n	801c8c2 <udp_sendto_if+0x42>
 801c8ae:	4b28      	ldr	r3, [pc, #160]	; (801c950 <udp_sendto_if+0xd0>)
 801c8b0:	f240 2281 	movw	r2, #641	; 0x281
 801c8b4:	4929      	ldr	r1, [pc, #164]	; (801c95c <udp_sendto_if+0xdc>)
 801c8b6:	4828      	ldr	r0, [pc, #160]	; (801c958 <udp_sendto_if+0xd8>)
 801c8b8:	f004 fcb8 	bl	802122c <iprintf>
 801c8bc:	f06f 030f 	mvn.w	r3, #15
 801c8c0:	e042      	b.n	801c948 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d109      	bne.n	801c8dc <udp_sendto_if+0x5c>
 801c8c8:	4b21      	ldr	r3, [pc, #132]	; (801c950 <udp_sendto_if+0xd0>)
 801c8ca:	f240 2282 	movw	r2, #642	; 0x282
 801c8ce:	4924      	ldr	r1, [pc, #144]	; (801c960 <udp_sendto_if+0xe0>)
 801c8d0:	4821      	ldr	r0, [pc, #132]	; (801c958 <udp_sendto_if+0xd8>)
 801c8d2:	f004 fcab 	bl	802122c <iprintf>
 801c8d6:	f06f 030f 	mvn.w	r3, #15
 801c8da:	e035      	b.n	801c948 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c8dc:	6a3b      	ldr	r3, [r7, #32]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d109      	bne.n	801c8f6 <udp_sendto_if+0x76>
 801c8e2:	4b1b      	ldr	r3, [pc, #108]	; (801c950 <udp_sendto_if+0xd0>)
 801c8e4:	f240 2283 	movw	r2, #643	; 0x283
 801c8e8:	491e      	ldr	r1, [pc, #120]	; (801c964 <udp_sendto_if+0xe4>)
 801c8ea:	481b      	ldr	r0, [pc, #108]	; (801c958 <udp_sendto_if+0xd8>)
 801c8ec:	f004 fc9e 	bl	802122c <iprintf>
 801c8f0:	f06f 030f 	mvn.w	r3, #15
 801c8f4:	e028      	b.n	801c948 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d009      	beq.n	801c910 <udp_sendto_if+0x90>
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	2b00      	cmp	r3, #0
 801c902:	d005      	beq.n	801c910 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c90c:	2be0      	cmp	r3, #224	; 0xe0
 801c90e:	d103      	bne.n	801c918 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c910:	6a3b      	ldr	r3, [r7, #32]
 801c912:	3304      	adds	r3, #4
 801c914:	617b      	str	r3, [r7, #20]
 801c916:	e00b      	b.n	801c930 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	681a      	ldr	r2, [r3, #0]
 801c91c:	6a3b      	ldr	r3, [r7, #32]
 801c91e:	3304      	adds	r3, #4
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	429a      	cmp	r2, r3
 801c924:	d002      	beq.n	801c92c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c926:	f06f 0303 	mvn.w	r3, #3
 801c92a:	e00d      	b.n	801c948 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c930:	887a      	ldrh	r2, [r7, #2]
 801c932:	697b      	ldr	r3, [r7, #20]
 801c934:	9301      	str	r3, [sp, #4]
 801c936:	6a3b      	ldr	r3, [r7, #32]
 801c938:	9300      	str	r3, [sp, #0]
 801c93a:	4613      	mov	r3, r2
 801c93c:	687a      	ldr	r2, [r7, #4]
 801c93e:	68b9      	ldr	r1, [r7, #8]
 801c940:	68f8      	ldr	r0, [r7, #12]
 801c942:	f000 f811 	bl	801c968 <udp_sendto_if_src>
 801c946:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c948:	4618      	mov	r0, r3
 801c94a:	3718      	adds	r7, #24
 801c94c:	46bd      	mov	sp, r7
 801c94e:	bd80      	pop	{r7, pc}
 801c950:	08026fac 	.word	0x08026fac
 801c954:	0802713c 	.word	0x0802713c
 801c958:	0802701c 	.word	0x0802701c
 801c95c:	08027158 	.word	0x08027158
 801c960:	08027174 	.word	0x08027174
 801c964:	08027194 	.word	0x08027194

0801c968 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c968:	b580      	push	{r7, lr}
 801c96a:	b08c      	sub	sp, #48	; 0x30
 801c96c:	af04      	add	r7, sp, #16
 801c96e:	60f8      	str	r0, [r7, #12]
 801c970:	60b9      	str	r1, [r7, #8]
 801c972:	607a      	str	r2, [r7, #4]
 801c974:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d109      	bne.n	801c990 <udp_sendto_if_src+0x28>
 801c97c:	4b65      	ldr	r3, [pc, #404]	; (801cb14 <udp_sendto_if_src+0x1ac>)
 801c97e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c982:	4965      	ldr	r1, [pc, #404]	; (801cb18 <udp_sendto_if_src+0x1b0>)
 801c984:	4865      	ldr	r0, [pc, #404]	; (801cb1c <udp_sendto_if_src+0x1b4>)
 801c986:	f004 fc51 	bl	802122c <iprintf>
 801c98a:	f06f 030f 	mvn.w	r3, #15
 801c98e:	e0bc      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c990:	68bb      	ldr	r3, [r7, #8]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d109      	bne.n	801c9aa <udp_sendto_if_src+0x42>
 801c996:	4b5f      	ldr	r3, [pc, #380]	; (801cb14 <udp_sendto_if_src+0x1ac>)
 801c998:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c99c:	4960      	ldr	r1, [pc, #384]	; (801cb20 <udp_sendto_if_src+0x1b8>)
 801c99e:	485f      	ldr	r0, [pc, #380]	; (801cb1c <udp_sendto_if_src+0x1b4>)
 801c9a0:	f004 fc44 	bl	802122c <iprintf>
 801c9a4:	f06f 030f 	mvn.w	r3, #15
 801c9a8:	e0af      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d109      	bne.n	801c9c4 <udp_sendto_if_src+0x5c>
 801c9b0:	4b58      	ldr	r3, [pc, #352]	; (801cb14 <udp_sendto_if_src+0x1ac>)
 801c9b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c9b6:	495b      	ldr	r1, [pc, #364]	; (801cb24 <udp_sendto_if_src+0x1bc>)
 801c9b8:	4858      	ldr	r0, [pc, #352]	; (801cb1c <udp_sendto_if_src+0x1b4>)
 801c9ba:	f004 fc37 	bl	802122c <iprintf>
 801c9be:	f06f 030f 	mvn.w	r3, #15
 801c9c2:	e0a2      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d109      	bne.n	801c9de <udp_sendto_if_src+0x76>
 801c9ca:	4b52      	ldr	r3, [pc, #328]	; (801cb14 <udp_sendto_if_src+0x1ac>)
 801c9cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c9d0:	4955      	ldr	r1, [pc, #340]	; (801cb28 <udp_sendto_if_src+0x1c0>)
 801c9d2:	4852      	ldr	r0, [pc, #328]	; (801cb1c <udp_sendto_if_src+0x1b4>)
 801c9d4:	f004 fc2a 	bl	802122c <iprintf>
 801c9d8:	f06f 030f 	mvn.w	r3, #15
 801c9dc:	e095      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d109      	bne.n	801c9f8 <udp_sendto_if_src+0x90>
 801c9e4:	4b4b      	ldr	r3, [pc, #300]	; (801cb14 <udp_sendto_if_src+0x1ac>)
 801c9e6:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c9ea:	4950      	ldr	r1, [pc, #320]	; (801cb2c <udp_sendto_if_src+0x1c4>)
 801c9ec:	484b      	ldr	r0, [pc, #300]	; (801cb1c <udp_sendto_if_src+0x1b4>)
 801c9ee:	f004 fc1d 	bl	802122c <iprintf>
 801c9f2:	f06f 030f 	mvn.w	r3, #15
 801c9f6:	e088      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	8a5b      	ldrh	r3, [r3, #18]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d10f      	bne.n	801ca20 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ca00:	68f9      	ldr	r1, [r7, #12]
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	8a5b      	ldrh	r3, [r3, #18]
 801ca06:	461a      	mov	r2, r3
 801ca08:	68f8      	ldr	r0, [r7, #12]
 801ca0a:	f000 f893 	bl	801cb34 <udp_bind>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801ca12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d002      	beq.n	801ca20 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801ca1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ca1e:	e074      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801ca20:	68bb      	ldr	r3, [r7, #8]
 801ca22:	891b      	ldrh	r3, [r3, #8]
 801ca24:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801ca28:	4293      	cmp	r3, r2
 801ca2a:	d902      	bls.n	801ca32 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801ca2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca30:	e06b      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801ca32:	2108      	movs	r1, #8
 801ca34:	68b8      	ldr	r0, [r7, #8]
 801ca36:	f7f7 fb33 	bl	80140a0 <pbuf_add_header>
 801ca3a:	4603      	mov	r3, r0
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d015      	beq.n	801ca6c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801ca40:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ca44:	2108      	movs	r1, #8
 801ca46:	2022      	movs	r0, #34	; 0x22
 801ca48:	f7f7 f8dc 	bl	8013c04 <pbuf_alloc>
 801ca4c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801ca4e:	69fb      	ldr	r3, [r7, #28]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d102      	bne.n	801ca5a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801ca54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca58:	e057      	b.n	801cb0a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801ca5a:	68bb      	ldr	r3, [r7, #8]
 801ca5c:	891b      	ldrh	r3, [r3, #8]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d006      	beq.n	801ca70 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801ca62:	68b9      	ldr	r1, [r7, #8]
 801ca64:	69f8      	ldr	r0, [r7, #28]
 801ca66:	f7f7 fd07 	bl	8014478 <pbuf_chain>
 801ca6a:	e001      	b.n	801ca70 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801ca6c:	68bb      	ldr	r3, [r7, #8]
 801ca6e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801ca70:	69fb      	ldr	r3, [r7, #28]
 801ca72:	895b      	ldrh	r3, [r3, #10]
 801ca74:	2b07      	cmp	r3, #7
 801ca76:	d806      	bhi.n	801ca86 <udp_sendto_if_src+0x11e>
 801ca78:	4b26      	ldr	r3, [pc, #152]	; (801cb14 <udp_sendto_if_src+0x1ac>)
 801ca7a:	f240 320d 	movw	r2, #781	; 0x30d
 801ca7e:	492c      	ldr	r1, [pc, #176]	; (801cb30 <udp_sendto_if_src+0x1c8>)
 801ca80:	4826      	ldr	r0, [pc, #152]	; (801cb1c <udp_sendto_if_src+0x1b4>)
 801ca82:	f004 fbd3 	bl	802122c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801ca86:	69fb      	ldr	r3, [r7, #28]
 801ca88:	685b      	ldr	r3, [r3, #4]
 801ca8a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	8a5b      	ldrh	r3, [r3, #18]
 801ca90:	4618      	mov	r0, r3
 801ca92:	f7f3 fa21 	bl	800fed8 <lwip_htons>
 801ca96:	4603      	mov	r3, r0
 801ca98:	461a      	mov	r2, r3
 801ca9a:	697b      	ldr	r3, [r7, #20]
 801ca9c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801ca9e:	887b      	ldrh	r3, [r7, #2]
 801caa0:	4618      	mov	r0, r3
 801caa2:	f7f3 fa19 	bl	800fed8 <lwip_htons>
 801caa6:	4603      	mov	r3, r0
 801caa8:	461a      	mov	r2, r3
 801caaa:	697b      	ldr	r3, [r7, #20]
 801caac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801caae:	697b      	ldr	r3, [r7, #20]
 801cab0:	2200      	movs	r2, #0
 801cab2:	719a      	strb	r2, [r3, #6]
 801cab4:	2200      	movs	r2, #0
 801cab6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801cab8:	69fb      	ldr	r3, [r7, #28]
 801caba:	891b      	ldrh	r3, [r3, #8]
 801cabc:	4618      	mov	r0, r3
 801cabe:	f7f3 fa0b 	bl	800fed8 <lwip_htons>
 801cac2:	4603      	mov	r3, r0
 801cac4:	461a      	mov	r2, r3
 801cac6:	697b      	ldr	r3, [r7, #20]
 801cac8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801caca:	2311      	movs	r3, #17
 801cacc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	7adb      	ldrb	r3, [r3, #11]
 801cad2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	7a9b      	ldrb	r3, [r3, #10]
 801cad8:	7cb9      	ldrb	r1, [r7, #18]
 801cada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cadc:	9202      	str	r2, [sp, #8]
 801cade:	7cfa      	ldrb	r2, [r7, #19]
 801cae0:	9201      	str	r2, [sp, #4]
 801cae2:	9300      	str	r3, [sp, #0]
 801cae4:	460b      	mov	r3, r1
 801cae6:	687a      	ldr	r2, [r7, #4]
 801cae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801caea:	69f8      	ldr	r0, [r7, #28]
 801caec:	f7f4 fed2 	bl	8011894 <ip4_output_if_src>
 801caf0:	4603      	mov	r3, r0
 801caf2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801caf4:	69fa      	ldr	r2, [r7, #28]
 801caf6:	68bb      	ldr	r3, [r7, #8]
 801caf8:	429a      	cmp	r2, r3
 801cafa:	d004      	beq.n	801cb06 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801cafc:	69f8      	ldr	r0, [r7, #28]
 801cafe:	f7f7 fb97 	bl	8014230 <pbuf_free>
    q = NULL;
 801cb02:	2300      	movs	r3, #0
 801cb04:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801cb06:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	3720      	adds	r7, #32
 801cb0e:	46bd      	mov	sp, r7
 801cb10:	bd80      	pop	{r7, pc}
 801cb12:	bf00      	nop
 801cb14:	08026fac 	.word	0x08026fac
 801cb18:	080271b4 	.word	0x080271b4
 801cb1c:	0802701c 	.word	0x0802701c
 801cb20:	080271d4 	.word	0x080271d4
 801cb24:	080271f4 	.word	0x080271f4
 801cb28:	08027218 	.word	0x08027218
 801cb2c:	0802723c 	.word	0x0802723c
 801cb30:	08027260 	.word	0x08027260

0801cb34 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b086      	sub	sp, #24
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	60f8      	str	r0, [r7, #12]
 801cb3c:	60b9      	str	r1, [r7, #8]
 801cb3e:	4613      	mov	r3, r2
 801cb40:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801cb42:	68bb      	ldr	r3, [r7, #8]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d101      	bne.n	801cb4c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801cb48:	4b39      	ldr	r3, [pc, #228]	; (801cc30 <udp_bind+0xfc>)
 801cb4a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d109      	bne.n	801cb66 <udp_bind+0x32>
 801cb52:	4b38      	ldr	r3, [pc, #224]	; (801cc34 <udp_bind+0x100>)
 801cb54:	f240 32b7 	movw	r2, #951	; 0x3b7
 801cb58:	4937      	ldr	r1, [pc, #220]	; (801cc38 <udp_bind+0x104>)
 801cb5a:	4838      	ldr	r0, [pc, #224]	; (801cc3c <udp_bind+0x108>)
 801cb5c:	f004 fb66 	bl	802122c <iprintf>
 801cb60:	f06f 030f 	mvn.w	r3, #15
 801cb64:	e060      	b.n	801cc28 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801cb66:	2300      	movs	r3, #0
 801cb68:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cb6a:	4b35      	ldr	r3, [pc, #212]	; (801cc40 <udp_bind+0x10c>)
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	617b      	str	r3, [r7, #20]
 801cb70:	e009      	b.n	801cb86 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801cb72:	68fa      	ldr	r2, [r7, #12]
 801cb74:	697b      	ldr	r3, [r7, #20]
 801cb76:	429a      	cmp	r2, r3
 801cb78:	d102      	bne.n	801cb80 <udp_bind+0x4c>
      rebind = 1;
 801cb7a:	2301      	movs	r3, #1
 801cb7c:	74fb      	strb	r3, [r7, #19]
      break;
 801cb7e:	e005      	b.n	801cb8c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cb80:	697b      	ldr	r3, [r7, #20]
 801cb82:	68db      	ldr	r3, [r3, #12]
 801cb84:	617b      	str	r3, [r7, #20]
 801cb86:	697b      	ldr	r3, [r7, #20]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d1f2      	bne.n	801cb72 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801cb8c:	88fb      	ldrh	r3, [r7, #6]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d109      	bne.n	801cba6 <udp_bind+0x72>
    port = udp_new_port();
 801cb92:	f7ff fc35 	bl	801c400 <udp_new_port>
 801cb96:	4603      	mov	r3, r0
 801cb98:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801cb9a:	88fb      	ldrh	r3, [r7, #6]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d12c      	bne.n	801cbfa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801cba0:	f06f 0307 	mvn.w	r3, #7
 801cba4:	e040      	b.n	801cc28 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cba6:	4b26      	ldr	r3, [pc, #152]	; (801cc40 <udp_bind+0x10c>)
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	617b      	str	r3, [r7, #20]
 801cbac:	e022      	b.n	801cbf4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801cbae:	68fa      	ldr	r2, [r7, #12]
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	429a      	cmp	r2, r3
 801cbb4:	d01b      	beq.n	801cbee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801cbb6:	697b      	ldr	r3, [r7, #20]
 801cbb8:	8a5b      	ldrh	r3, [r3, #18]
 801cbba:	88fa      	ldrh	r2, [r7, #6]
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	d116      	bne.n	801cbee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cbc0:	697b      	ldr	r3, [r7, #20]
 801cbc2:	681a      	ldr	r2, [r3, #0]
 801cbc4:	68bb      	ldr	r3, [r7, #8]
 801cbc6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801cbc8:	429a      	cmp	r2, r3
 801cbca:	d00d      	beq.n	801cbe8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cbcc:	68bb      	ldr	r3, [r7, #8]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d00a      	beq.n	801cbe8 <udp_bind+0xb4>
 801cbd2:	68bb      	ldr	r3, [r7, #8]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d006      	beq.n	801cbe8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cbda:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d003      	beq.n	801cbe8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d102      	bne.n	801cbee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801cbe8:	f06f 0307 	mvn.w	r3, #7
 801cbec:	e01c      	b.n	801cc28 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cbee:	697b      	ldr	r3, [r7, #20]
 801cbf0:	68db      	ldr	r3, [r3, #12]
 801cbf2:	617b      	str	r3, [r7, #20]
 801cbf4:	697b      	ldr	r3, [r7, #20]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d1d9      	bne.n	801cbae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801cbfa:	68bb      	ldr	r3, [r7, #8]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d002      	beq.n	801cc06 <udp_bind+0xd2>
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	e000      	b.n	801cc08 <udp_bind+0xd4>
 801cc06:	2300      	movs	r3, #0
 801cc08:	68fa      	ldr	r2, [r7, #12]
 801cc0a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	88fa      	ldrh	r2, [r7, #6]
 801cc10:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801cc12:	7cfb      	ldrb	r3, [r7, #19]
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d106      	bne.n	801cc26 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801cc18:	4b09      	ldr	r3, [pc, #36]	; (801cc40 <udp_bind+0x10c>)
 801cc1a:	681a      	ldr	r2, [r3, #0]
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801cc20:	4a07      	ldr	r2, [pc, #28]	; (801cc40 <udp_bind+0x10c>)
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801cc26:	2300      	movs	r3, #0
}
 801cc28:	4618      	mov	r0, r3
 801cc2a:	3718      	adds	r7, #24
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}
 801cc30:	08027518 	.word	0x08027518
 801cc34:	08026fac 	.word	0x08026fac
 801cc38:	08027290 	.word	0x08027290
 801cc3c:	0802701c 	.word	0x0802701c
 801cc40:	24048ea8 	.word	0x24048ea8

0801cc44 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b086      	sub	sp, #24
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	60f8      	str	r0, [r7, #12]
 801cc4c:	60b9      	str	r1, [r7, #8]
 801cc4e:	4613      	mov	r3, r2
 801cc50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d109      	bne.n	801cc6c <udp_connect+0x28>
 801cc58:	4b2c      	ldr	r3, [pc, #176]	; (801cd0c <udp_connect+0xc8>)
 801cc5a:	f240 4235 	movw	r2, #1077	; 0x435
 801cc5e:	492c      	ldr	r1, [pc, #176]	; (801cd10 <udp_connect+0xcc>)
 801cc60:	482c      	ldr	r0, [pc, #176]	; (801cd14 <udp_connect+0xd0>)
 801cc62:	f004 fae3 	bl	802122c <iprintf>
 801cc66:	f06f 030f 	mvn.w	r3, #15
 801cc6a:	e04b      	b.n	801cd04 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cc6c:	68bb      	ldr	r3, [r7, #8]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d109      	bne.n	801cc86 <udp_connect+0x42>
 801cc72:	4b26      	ldr	r3, [pc, #152]	; (801cd0c <udp_connect+0xc8>)
 801cc74:	f240 4236 	movw	r2, #1078	; 0x436
 801cc78:	4927      	ldr	r1, [pc, #156]	; (801cd18 <udp_connect+0xd4>)
 801cc7a:	4826      	ldr	r0, [pc, #152]	; (801cd14 <udp_connect+0xd0>)
 801cc7c:	f004 fad6 	bl	802122c <iprintf>
 801cc80:	f06f 030f 	mvn.w	r3, #15
 801cc84:	e03e      	b.n	801cd04 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	8a5b      	ldrh	r3, [r3, #18]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d10f      	bne.n	801ccae <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cc8e:	68f9      	ldr	r1, [r7, #12]
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	8a5b      	ldrh	r3, [r3, #18]
 801cc94:	461a      	mov	r2, r3
 801cc96:	68f8      	ldr	r0, [r7, #12]
 801cc98:	f7ff ff4c 	bl	801cb34 <udp_bind>
 801cc9c:	4603      	mov	r3, r0
 801cc9e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801cca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d002      	beq.n	801ccae <udp_connect+0x6a>
      return err;
 801cca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ccac:	e02a      	b.n	801cd04 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d002      	beq.n	801ccba <udp_connect+0x76>
 801ccb4:	68bb      	ldr	r3, [r7, #8]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	e000      	b.n	801ccbc <udp_connect+0x78>
 801ccba:	2300      	movs	r3, #0
 801ccbc:	68fa      	ldr	r2, [r7, #12]
 801ccbe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	88fa      	ldrh	r2, [r7, #6]
 801ccc4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	7c1b      	ldrb	r3, [r3, #16]
 801ccca:	f043 0304 	orr.w	r3, r3, #4
 801ccce:	b2da      	uxtb	r2, r3
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ccd4:	4b11      	ldr	r3, [pc, #68]	; (801cd1c <udp_connect+0xd8>)
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	617b      	str	r3, [r7, #20]
 801ccda:	e008      	b.n	801ccee <udp_connect+0xaa>
    if (pcb == ipcb) {
 801ccdc:	68fa      	ldr	r2, [r7, #12]
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	429a      	cmp	r2, r3
 801cce2:	d101      	bne.n	801cce8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801cce4:	2300      	movs	r3, #0
 801cce6:	e00d      	b.n	801cd04 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cce8:	697b      	ldr	r3, [r7, #20]
 801ccea:	68db      	ldr	r3, [r3, #12]
 801ccec:	617b      	str	r3, [r7, #20]
 801ccee:	697b      	ldr	r3, [r7, #20]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d1f3      	bne.n	801ccdc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801ccf4:	4b09      	ldr	r3, [pc, #36]	; (801cd1c <udp_connect+0xd8>)
 801ccf6:	681a      	ldr	r2, [r3, #0]
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801ccfc:	4a07      	ldr	r2, [pc, #28]	; (801cd1c <udp_connect+0xd8>)
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801cd02:	2300      	movs	r3, #0
}
 801cd04:	4618      	mov	r0, r3
 801cd06:	3718      	adds	r7, #24
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}
 801cd0c:	08026fac 	.word	0x08026fac
 801cd10:	080272a8 	.word	0x080272a8
 801cd14:	0802701c 	.word	0x0802701c
 801cd18:	080272c4 	.word	0x080272c4
 801cd1c:	24048ea8 	.word	0x24048ea8

0801cd20 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b082      	sub	sp, #8
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d107      	bne.n	801cd3e <udp_disconnect+0x1e>
 801cd2e:	4b0d      	ldr	r3, [pc, #52]	; (801cd64 <udp_disconnect+0x44>)
 801cd30:	f240 426a 	movw	r2, #1130	; 0x46a
 801cd34:	490c      	ldr	r1, [pc, #48]	; (801cd68 <udp_disconnect+0x48>)
 801cd36:	480d      	ldr	r0, [pc, #52]	; (801cd6c <udp_disconnect+0x4c>)
 801cd38:	f004 fa78 	bl	802122c <iprintf>
 801cd3c:	e00f      	b.n	801cd5e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	2200      	movs	r2, #0
 801cd42:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	2200      	movs	r2, #0
 801cd48:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	7c1b      	ldrb	r3, [r3, #16]
 801cd54:	f023 0304 	bic.w	r3, r3, #4
 801cd58:	b2da      	uxtb	r2, r3
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	741a      	strb	r2, [r3, #16]
}
 801cd5e:	3708      	adds	r7, #8
 801cd60:	46bd      	mov	sp, r7
 801cd62:	bd80      	pop	{r7, pc}
 801cd64:	08026fac 	.word	0x08026fac
 801cd68:	080272e0 	.word	0x080272e0
 801cd6c:	0802701c 	.word	0x0802701c

0801cd70 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b084      	sub	sp, #16
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	60f8      	str	r0, [r7, #12]
 801cd78:	60b9      	str	r1, [r7, #8]
 801cd7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d107      	bne.n	801cd92 <udp_recv+0x22>
 801cd82:	4b08      	ldr	r3, [pc, #32]	; (801cda4 <udp_recv+0x34>)
 801cd84:	f240 428a 	movw	r2, #1162	; 0x48a
 801cd88:	4907      	ldr	r1, [pc, #28]	; (801cda8 <udp_recv+0x38>)
 801cd8a:	4808      	ldr	r0, [pc, #32]	; (801cdac <udp_recv+0x3c>)
 801cd8c:	f004 fa4e 	bl	802122c <iprintf>
 801cd90:	e005      	b.n	801cd9e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	68ba      	ldr	r2, [r7, #8]
 801cd96:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	687a      	ldr	r2, [r7, #4]
 801cd9c:	61da      	str	r2, [r3, #28]
}
 801cd9e:	3710      	adds	r7, #16
 801cda0:	46bd      	mov	sp, r7
 801cda2:	bd80      	pop	{r7, pc}
 801cda4:	08026fac 	.word	0x08026fac
 801cda8:	080272fc 	.word	0x080272fc
 801cdac:	0802701c 	.word	0x0802701c

0801cdb0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	b084      	sub	sp, #16
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d107      	bne.n	801cdce <udp_remove+0x1e>
 801cdbe:	4b19      	ldr	r3, [pc, #100]	; (801ce24 <udp_remove+0x74>)
 801cdc0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801cdc4:	4918      	ldr	r1, [pc, #96]	; (801ce28 <udp_remove+0x78>)
 801cdc6:	4819      	ldr	r0, [pc, #100]	; (801ce2c <udp_remove+0x7c>)
 801cdc8:	f004 fa30 	bl	802122c <iprintf>
 801cdcc:	e026      	b.n	801ce1c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801cdce:	4b18      	ldr	r3, [pc, #96]	; (801ce30 <udp_remove+0x80>)
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	687a      	ldr	r2, [r7, #4]
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d105      	bne.n	801cde4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801cdd8:	4b15      	ldr	r3, [pc, #84]	; (801ce30 <udp_remove+0x80>)
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	68db      	ldr	r3, [r3, #12]
 801cdde:	4a14      	ldr	r2, [pc, #80]	; (801ce30 <udp_remove+0x80>)
 801cde0:	6013      	str	r3, [r2, #0]
 801cde2:	e017      	b.n	801ce14 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cde4:	4b12      	ldr	r3, [pc, #72]	; (801ce30 <udp_remove+0x80>)
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	60fb      	str	r3, [r7, #12]
 801cdea:	e010      	b.n	801ce0e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801cdec:	68fb      	ldr	r3, [r7, #12]
 801cdee:	68db      	ldr	r3, [r3, #12]
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d009      	beq.n	801ce08 <udp_remove+0x58>
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	687a      	ldr	r2, [r7, #4]
 801cdfa:	429a      	cmp	r2, r3
 801cdfc:	d104      	bne.n	801ce08 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	68da      	ldr	r2, [r3, #12]
 801ce02:	68fb      	ldr	r3, [r7, #12]
 801ce04:	60da      	str	r2, [r3, #12]
        break;
 801ce06:	e005      	b.n	801ce14 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	68db      	ldr	r3, [r3, #12]
 801ce0c:	60fb      	str	r3, [r7, #12]
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d1eb      	bne.n	801cdec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ce14:	6879      	ldr	r1, [r7, #4]
 801ce16:	2000      	movs	r0, #0
 801ce18:	f7f6 faa2 	bl	8013360 <memp_free>
}
 801ce1c:	3710      	adds	r7, #16
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	bd80      	pop	{r7, pc}
 801ce22:	bf00      	nop
 801ce24:	08026fac 	.word	0x08026fac
 801ce28:	08027314 	.word	0x08027314
 801ce2c:	0802701c 	.word	0x0802701c
 801ce30:	24048ea8 	.word	0x24048ea8

0801ce34 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b082      	sub	sp, #8
 801ce38:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ce3a:	2000      	movs	r0, #0
 801ce3c:	f7f6 fa1a 	bl	8013274 <memp_malloc>
 801ce40:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d007      	beq.n	801ce58 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ce48:	2220      	movs	r2, #32
 801ce4a:	2100      	movs	r1, #0
 801ce4c:	6878      	ldr	r0, [r7, #4]
 801ce4e:	f003 fda3 	bl	8020998 <memset>
    pcb->ttl = UDP_TTL;
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	22ff      	movs	r2, #255	; 0xff
 801ce56:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ce58:	687b      	ldr	r3, [r7, #4]
}
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	3708      	adds	r7, #8
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	bd80      	pop	{r7, pc}

0801ce62 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ce62:	b580      	push	{r7, lr}
 801ce64:	b084      	sub	sp, #16
 801ce66:	af00      	add	r7, sp, #0
 801ce68:	4603      	mov	r3, r0
 801ce6a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801ce6c:	f7ff ffe2 	bl	801ce34 <udp_new>
 801ce70:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ce72:	68fb      	ldr	r3, [r7, #12]
}
 801ce74:	4618      	mov	r0, r3
 801ce76:	3710      	adds	r7, #16
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bd80      	pop	{r7, pc}

0801ce7c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ce7c:	b480      	push	{r7}
 801ce7e:	b085      	sub	sp, #20
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
 801ce84:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d01e      	beq.n	801ceca <udp_netif_ip_addr_changed+0x4e>
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d01a      	beq.n	801ceca <udp_netif_ip_addr_changed+0x4e>
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d017      	beq.n	801ceca <udp_netif_ip_addr_changed+0x4e>
 801ce9a:	683b      	ldr	r3, [r7, #0]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d013      	beq.n	801ceca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cea2:	4b0d      	ldr	r3, [pc, #52]	; (801ced8 <udp_netif_ip_addr_changed+0x5c>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	60fb      	str	r3, [r7, #12]
 801cea8:	e00c      	b.n	801cec4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	681a      	ldr	r2, [r3, #0]
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	429a      	cmp	r2, r3
 801ceb4:	d103      	bne.n	801cebe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	681a      	ldr	r2, [r3, #0]
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	68db      	ldr	r3, [r3, #12]
 801cec2:	60fb      	str	r3, [r7, #12]
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d1ef      	bne.n	801ceaa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ceca:	bf00      	nop
 801cecc:	3714      	adds	r7, #20
 801cece:	46bd      	mov	sp, r7
 801ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced4:	4770      	bx	lr
 801ced6:	bf00      	nop
 801ced8:	24048ea8 	.word	0x24048ea8

0801cedc <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 801cedc:	b580      	push	{r7, lr}
 801cede:	b082      	sub	sp, #8
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	6078      	str	r0, [r7, #4]
 801cee4:	6039      	str	r1, [r7, #0]
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	683a      	ldr	r2, [r7, #0]
 801ceea:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	683a      	ldr	r2, [r7, #0]
 801cef0:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 801cef2:	2103      	movs	r1, #3
 801cef4:	4805      	ldr	r0, [pc, #20]	; (801cf0c <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 801cef6:	f7ed ff59 	bl	800adac <osSemaphoreCreate>
 801cefa:	4602      	mov	r2, r0
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	605a      	str	r2, [r3, #4]
}
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	4618      	mov	r0, r3
 801cf04:	3708      	adds	r7, #8
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd80      	pop	{r7, pc}
 801cf0a:	bf00      	nop
 801cf0c:	08027634 	.word	0x08027634

0801cf10 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b084      	sub	sp, #16
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	60f8      	str	r0, [r7, #12]
 801cf18:	60b9      	str	r1, [r7, #8]
 801cf1a:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 801cf1c:	2002      	movs	r0, #2
 801cf1e:	f7e9 f803 	bl	8005f28 <HAL_HSEM_IsSemTaken>
 801cf22:	4603      	mov	r3, r0
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	bf14      	ite	ne
 801cf28:	2301      	movne	r3, #1
 801cf2a:	2300      	moveq	r3, #0
 801cf2c:	b2db      	uxtb	r3, r3
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d000      	beq.n	801cf34 <_ZN7Console8transmitEPhm+0x24>
 801cf32:	e7f3      	b.n	801cf1c <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 801cf34:	2102      	movs	r1, #2
 801cf36:	2002      	movs	r0, #2
 801cf38:	f7e8 ffba 	bl	8005eb0 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	6818      	ldr	r0, [r3, #0]
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	b29a      	uxth	r2, r3
 801cf44:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801cf48:	68b9      	ldr	r1, [r7, #8]
 801cf4a:	f7ec f8f1 	bl	8009130 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 801cf4e:	2102      	movs	r1, #2
 801cf50:	2002      	movs	r0, #2
 801cf52:	f7e8 ffff 	bl	8005f54 <HAL_HSEM_Release>
}
 801cf56:	bf00      	nop
 801cf58:	3710      	adds	r7, #16
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	bd80      	pop	{r7, pc}

0801cf5e <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 801cf5e:	b580      	push	{r7, lr}
 801cf60:	b082      	sub	sp, #8
 801cf62:	af00      	add	r7, sp, #0
 801cf64:	6078      	str	r0, [r7, #4]
 801cf66:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 801cf68:	6838      	ldr	r0, [r7, #0]
 801cf6a:	f7e3 fa13 	bl	8000394 <strlen>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	461a      	mov	r2, r3
 801cf72:	6839      	ldr	r1, [r7, #0]
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f7ff ffcb 	bl	801cf10 <_ZN7Console8transmitEPhm>
}
 801cf7a:	bf00      	nop
 801cf7c:	3708      	adds	r7, #8
 801cf7e:	46bd      	mov	sp, r7
 801cf80:	bd80      	pop	{r7, pc}

0801cf82 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 801cf82:	b40e      	push	{r1, r2, r3}
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b085      	sub	sp, #20
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 801cf8c:	f107 0320 	add.w	r3, r7, #32
 801cf90:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	3308      	adds	r3, #8
 801cf96:	68fa      	ldr	r2, [r7, #12]
 801cf98:	69f9      	ldr	r1, [r7, #28]
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	f004 fa18 	bl	80213d0 <vsiprintf>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	bfcc      	ite	gt
 801cfa6:	2301      	movgt	r3, #1
 801cfa8:	2300      	movle	r3, #0
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d005      	beq.n	801cfbc <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	3308      	adds	r3, #8
 801cfb4:	4619      	mov	r1, r3
 801cfb6:	6878      	ldr	r0, [r7, #4]
 801cfb8:	f7ff ffd1 	bl	801cf5e <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 801cfbc:	bf00      	nop
 801cfbe:	3714      	adds	r7, #20
 801cfc0:	46bd      	mov	sp, r7
 801cfc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cfc6:	b003      	add	sp, #12
 801cfc8:	4770      	bx	lr
	...

0801cfcc <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b082      	sub	sp, #8
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
 801cfd4:	6039      	str	r1, [r7, #0]
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	2b01      	cmp	r3, #1
 801cfda:	d108      	bne.n	801cfee <_Z41__static_initialization_and_destruction_0ii+0x22>
 801cfdc:	683b      	ldr	r3, [r7, #0]
 801cfde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cfe2:	4293      	cmp	r3, r2
 801cfe4:	d103      	bne.n	801cfee <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 801cfe6:	4904      	ldr	r1, [pc, #16]	; (801cff8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801cfe8:	4804      	ldr	r0, [pc, #16]	; (801cffc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801cfea:	f7ff ff77 	bl	801cedc <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 801cfee:	bf00      	nop
 801cff0:	3708      	adds	r7, #8
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	24045768 	.word	0x24045768
 801cffc:	240407b4 	.word	0x240407b4

0801d000 <_GLOBAL__sub_I_console>:
 801d000:	b580      	push	{r7, lr}
 801d002:	af00      	add	r7, sp, #0
 801d004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d008:	2001      	movs	r0, #1
 801d00a:	f7ff ffdf 	bl	801cfcc <_Z41__static_initialization_and_destruction_0ii>
 801d00e:	bd80      	pop	{r7, pc}

0801d010 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
 801d010:	b480      	push	{r7}
 801d012:	b083      	sub	sp, #12
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
 801d018:	4a04      	ldr	r2, [pc, #16]	; (801d02c <_ZN6ThreadD1Ev+0x1c>)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	601a      	str	r2, [r3, #0]
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	4618      	mov	r0, r3
 801d022:	370c      	adds	r7, #12
 801d024:	46bd      	mov	sp, r7
 801d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d02a:	4770      	bx	lr
 801d02c:	08027644 	.word	0x08027644

0801d030 <_ZN6ThreadD0Ev>:
 801d030:	b580      	push	{r7, lr}
 801d032:	b082      	sub	sp, #8
 801d034:	af00      	add	r7, sp, #0
 801d036:	6078      	str	r0, [r7, #4]
 801d038:	6878      	ldr	r0, [r7, #4]
 801d03a:	f7ff ffe9 	bl	801d010 <_ZN6ThreadD1Ev>
 801d03e:	2110      	movs	r1, #16
 801d040:	6878      	ldr	r0, [r7, #4]
 801d042:	f003 f851 	bl	80200e8 <_ZdlPvj>
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	4618      	mov	r0, r3
 801d04a:	3708      	adds	r7, #8
 801d04c:	46bd      	mov	sp, r7
 801d04e:	bd80      	pop	{r7, pc}

0801d050 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 801d050:	b580      	push	{r7, lr}
 801d052:	b082      	sub	sp, #8
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 801d058:	6878      	ldr	r0, [r7, #4]
 801d05a:	f7ee f877 	bl	800b14c <pvPortMalloc>
 801d05e:	4603      	mov	r3, r0
}
 801d060:	4618      	mov	r0, r3
 801d062:	3708      	adds	r7, #8
 801d064:	46bd      	mov	sp, r7
 801d066:	bd80      	pop	{r7, pc}

0801d068 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 801d068:	b580      	push	{r7, lr}
 801d06a:	b082      	sub	sp, #8
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f7ee f92f 	bl	800b2d4 <vPortFree>
}
 801d076:	bf00      	nop
 801d078:	3708      	adds	r7, #8
 801d07a:	46bd      	mov	sp, r7
 801d07c:	bd80      	pop	{r7, pc}

0801d07e <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 801d07e:	b480      	push	{r7}
 801d080:	b083      	sub	sp, #12
 801d082:	af00      	add	r7, sp, #0
 801d084:	6078      	str	r0, [r7, #4]
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	2200      	movs	r2, #0
 801d08a:	609a      	str	r2, [r3, #8]
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	4618      	mov	r0, r3
 801d090:	370c      	adds	r7, #12
 801d092:	46bd      	mov	sp, r7
 801d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d098:	4770      	bx	lr

0801d09a <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 801d09a:	b580      	push	{r7, lr}
 801d09c:	b082      	sub	sp, #8
 801d09e:	af00      	add	r7, sp, #0
 801d0a0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	689b      	ldr	r3, [r3, #8]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d005      	beq.n	801d0b6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	689b      	ldr	r3, [r3, #8]
 801d0ae:	6878      	ldr	r0, [r7, #4]
 801d0b0:	6879      	ldr	r1, [r7, #4]
 801d0b2:	2203      	movs	r2, #3
 801d0b4:	4798      	blx	r3
    }
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	3708      	adds	r7, #8
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}

0801d0c0 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 801d0c0:	b480      	push	{r7}
 801d0c2:	b083      	sub	sp, #12
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6078      	str	r0, [r7, #4]
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	689b      	ldr	r3, [r3, #8]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	bf0c      	ite	eq
 801d0d0:	2301      	moveq	r3, #1
 801d0d2:	2300      	movne	r3, #0
 801d0d4:	b2db      	uxtb	r3, r3
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	370c      	adds	r7, #12
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0e0:	4770      	bx	lr
	...

0801d0e4 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 801d0e4:	b480      	push	{r7}
 801d0e6:	b083      	sub	sp, #12
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
 801d0ec:	4a04      	ldr	r2, [pc, #16]	; (801d100 <_ZN8IODriverD1Ev+0x1c>)
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	601a      	str	r2, [r3, #0]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	370c      	adds	r7, #12
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0fe:	4770      	bx	lr
 801d100:	08027684 	.word	0x08027684

0801d104 <_ZN8IODriverD0Ev>:
 801d104:	b580      	push	{r7, lr}
 801d106:	b082      	sub	sp, #8
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
 801d10c:	6878      	ldr	r0, [r7, #4]
 801d10e:	f7ff ffe9 	bl	801d0e4 <_ZN8IODriverD1Ev>
 801d112:	2104      	movs	r1, #4
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f002 ffe7 	bl	80200e8 <_ZdlPvj>
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	4618      	mov	r0, r3
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}

0801d124 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 801d124:	b580      	push	{r7, lr}
 801d126:	b082      	sub	sp, #8
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	4618      	mov	r0, r3
 801d130:	f7ff ffb3 	bl	801d09a <_ZNSt14_Function_baseD1Ev>
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	4618      	mov	r0, r3
 801d138:	3708      	adds	r7, #8
 801d13a:	46bd      	mov	sp, r7
 801d13c:	bd80      	pop	{r7, pc}
	...

0801d140 <_ZN8IODriverC1Ev>:
class IODriver {
 801d140:	b480      	push	{r7}
 801d142:	b083      	sub	sp, #12
 801d144:	af00      	add	r7, sp, #0
 801d146:	6078      	str	r0, [r7, #4]
 801d148:	4a04      	ldr	r2, [pc, #16]	; (801d15c <_ZN8IODriverC1Ev+0x1c>)
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	601a      	str	r2, [r3, #0]
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	4618      	mov	r0, r3
 801d152:	370c      	adds	r7, #12
 801d154:	46bd      	mov	sp, r7
 801d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d15a:	4770      	bx	lr
 801d15c:	08027684 	.word	0x08027684

0801d160 <_ZN16BufferedIODriverC1EPVhS1_j>:
#include <cstring>

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length) : bufferStorage(bufferStorage), bufferControl(bufferControl), bufferLength(length), readIndex(0), receiverFunc(nullptr) {
 801d160:	b580      	push	{r7, lr}
 801d162:	b084      	sub	sp, #16
 801d164:	af00      	add	r7, sp, #0
 801d166:	60f8      	str	r0, [r7, #12]
 801d168:	60b9      	str	r1, [r7, #8]
 801d16a:	607a      	str	r2, [r7, #4]
 801d16c:	603b      	str	r3, [r7, #0]
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	4618      	mov	r0, r3
 801d172:	f7ff ffe5 	bl	801d140 <_ZN8IODriverC1Ev>
 801d176:	4a11      	ldr	r2, [pc, #68]	; (801d1bc <_ZN16BufferedIODriverC1EPVhS1_j+0x5c>)
 801d178:	68fb      	ldr	r3, [r7, #12]
 801d17a:	601a      	str	r2, [r3, #0]
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	68ba      	ldr	r2, [r7, #8]
 801d180:	609a      	str	r2, [r3, #8]
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	687a      	ldr	r2, [r7, #4]
 801d186:	60da      	str	r2, [r3, #12]
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	683a      	ldr	r2, [r7, #0]
 801d18c:	611a      	str	r2, [r3, #16]
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	2200      	movs	r2, #0
 801d192:	829a      	strh	r2, [r3, #20]
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	3318      	adds	r3, #24
 801d198:	2100      	movs	r1, #0
 801d19a:	4618      	mov	r0, r3
 801d19c:	f000 f910 	bl	801d3c0 <_ZNSt8functionIFvhPhmEEC1EDn>
	semaphore = xSemaphoreCreateMutex();
 801d1a0:	2001      	movs	r0, #1
 801d1a2:	f7ee fe0a 	bl	800bdba <xQueueCreateMutex>
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	605a      	str	r2, [r3, #4]
	*bufferControl = 0;
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	701a      	strb	r2, [r3, #0]
}
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	3710      	adds	r7, #16
 801d1b8:	46bd      	mov	sp, r7
 801d1ba:	bd80      	pop	{r7, pc}
 801d1bc:	0802766c 	.word	0x0802766c

0801d1c0 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 801d1c0:	b580      	push	{r7, lr}
 801d1c2:	b082      	sub	sp, #8
 801d1c4:	af00      	add	r7, sp, #0
 801d1c6:	6078      	str	r0, [r7, #4]
 801d1c8:	6039      	str	r1, [r7, #0]
	receiverFunc = receiver;
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	3318      	adds	r3, #24
 801d1ce:	6839      	ldr	r1, [r7, #0]
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	f000 f903 	bl	801d3dc <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 801d1d6:	bf00      	nop
 801d1d8:	3708      	adds	r7, #8
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bd80      	pop	{r7, pc}

0801d1de <_ZN16BufferedIODriver8transmitEPhm>:
/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 * Assumes there is no overrun
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 801d1de:	b580      	push	{r7, lr}
 801d1e0:	b088      	sub	sp, #32
 801d1e2:	af00      	add	r7, sp, #0
 801d1e4:	60f8      	str	r0, [r7, #12]
 801d1e6:	60b9      	str	r1, [r7, #8]
 801d1e8:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	685b      	ldr	r3, [r3, #4]
 801d1ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7ef f918 	bl	800c428 <xQueueSemaphoreTake>
 801d1f8:	4603      	mov	r3, r0
 801d1fa:	2b01      	cmp	r3, #1
 801d1fc:	bf0c      	ite	eq
 801d1fe:	2301      	moveq	r3, #1
 801d200:	2300      	movne	r3, #0
 801d202:	b2db      	uxtb	r3, r3
 801d204:	2b00      	cmp	r3, #0
 801d206:	d056      	beq.n	801d2b6 <_ZN16BufferedIODriver8transmitEPhm+0xd8>
		while(HAL_HSEM_Take(1, 1) != HAL_OK);
 801d208:	2101      	movs	r1, #1
 801d20a:	2001      	movs	r0, #1
 801d20c:	f7e8 fe50 	bl	8005eb0 <HAL_HSEM_Take>
 801d210:	4603      	mov	r3, r0
 801d212:	2b00      	cmp	r3, #0
 801d214:	bf14      	ite	ne
 801d216:	2301      	movne	r3, #1
 801d218:	2300      	moveq	r3, #0
 801d21a:	b2db      	uxtb	r3, r3
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d000      	beq.n	801d222 <_ZN16BufferedIODriver8transmitEPhm+0x44>
 801d220:	e7f2      	b.n	801d208 <_ZN16BufferedIODriver8transmitEPhm+0x2a>

		uint8_t writeIndex = *bufferControl;
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	68db      	ldr	r3, [r3, #12]
 801d226:	781b      	ldrb	r3, [r3, #0]
 801d228:	77fb      	strb	r3, [r7, #31]
		uint8_t* buffer = (uint8_t*) bufferStorage;
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	689b      	ldr	r3, [r3, #8]
 801d22e:	61bb      	str	r3, [r7, #24]

		if(writeIndex + length < bufferLength) {
 801d230:	7ffa      	ldrb	r2, [r7, #31]
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	441a      	add	r2, r3
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	691b      	ldr	r3, [r3, #16]
 801d23a:	429a      	cmp	r2, r3
 801d23c:	d20d      	bcs.n	801d25a <_ZN16BufferedIODriver8transmitEPhm+0x7c>
			memcpy(buffer + writeIndex, data, length);
 801d23e:	7ffb      	ldrb	r3, [r7, #31]
 801d240:	69ba      	ldr	r2, [r7, #24]
 801d242:	4413      	add	r3, r2
 801d244:	687a      	ldr	r2, [r7, #4]
 801d246:	68b9      	ldr	r1, [r7, #8]
 801d248:	4618      	mov	r0, r3
 801d24a:	f003 fb7d 	bl	8020948 <memcpy>
			writeIndex += length;
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	b2da      	uxtb	r2, r3
 801d252:	7ffb      	ldrb	r3, [r7, #31]
 801d254:	4413      	add	r3, r2
 801d256:	77fb      	strb	r3, [r7, #31]
 801d258:	e01e      	b.n	801d298 <_ZN16BufferedIODriver8transmitEPhm+0xba>
		} else {
			uint16_t firstSize = bufferLength - writeIndex;
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	691b      	ldr	r3, [r3, #16]
 801d25e:	b29a      	uxth	r2, r3
 801d260:	7ffb      	ldrb	r3, [r7, #31]
 801d262:	b29b      	uxth	r3, r3
 801d264:	1ad3      	subs	r3, r2, r3
 801d266:	82fb      	strh	r3, [r7, #22]
			memcpy(buffer + writeIndex, data, firstSize);
 801d268:	7ffb      	ldrb	r3, [r7, #31]
 801d26a:	69ba      	ldr	r2, [r7, #24]
 801d26c:	4413      	add	r3, r2
 801d26e:	8afa      	ldrh	r2, [r7, #22]
 801d270:	68b9      	ldr	r1, [r7, #8]
 801d272:	4618      	mov	r0, r3
 801d274:	f003 fb68 	bl	8020948 <memcpy>
			memcpy(buffer, data + firstSize, length - firstSize);
 801d278:	8afb      	ldrh	r3, [r7, #22]
 801d27a:	68ba      	ldr	r2, [r7, #8]
 801d27c:	18d1      	adds	r1, r2, r3
 801d27e:	8afb      	ldrh	r3, [r7, #22]
 801d280:	687a      	ldr	r2, [r7, #4]
 801d282:	1ad3      	subs	r3, r2, r3
 801d284:	461a      	mov	r2, r3
 801d286:	69b8      	ldr	r0, [r7, #24]
 801d288:	f003 fb5e 	bl	8020948 <memcpy>
			writeIndex = length - firstSize;
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	b2da      	uxtb	r2, r3
 801d290:	8afb      	ldrh	r3, [r7, #22]
 801d292:	b2db      	uxtb	r3, r3
 801d294:	1ad3      	subs	r3, r2, r3
 801d296:	77fb      	strb	r3, [r7, #31]
		}

		*bufferControl = writeIndex;
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	68db      	ldr	r3, [r3, #12]
 801d29c:	7ffa      	ldrb	r2, [r7, #31]
 801d29e:	701a      	strb	r2, [r3, #0]

		HAL_HSEM_Release(1, 1);
 801d2a0:	2101      	movs	r1, #1
 801d2a2:	2001      	movs	r0, #1
 801d2a4:	f7e8 fe56 	bl	8005f54 <HAL_HSEM_Release>
		xSemaphoreGive(semaphore);
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	6858      	ldr	r0, [r3, #4]
 801d2ac:	2300      	movs	r3, #0
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	2100      	movs	r1, #0
 801d2b2:	f7ee fdb5 	bl	800be20 <xQueueGenericSend>
	}
}
 801d2b6:	bf00      	nop
 801d2b8:	3720      	adds	r7, #32
 801d2ba:	46bd      	mov	sp, r7
 801d2bc:	bd80      	pop	{r7, pc}

0801d2be <_ZN16BufferedIODriver5flushEP8IODriver>:
/*
 * Passes the buffered data to the real IODriver
 * The flush function must be called from the thread designed to transmit the data
 */

void BufferedIODriver::flush(IODriver* driver) {
 801d2be:	b580      	push	{r7, lr}
 801d2c0:	b086      	sub	sp, #24
 801d2c2:	af00      	add	r7, sp, #0
 801d2c4:	6078      	str	r0, [r7, #4]
 801d2c6:	6039      	str	r1, [r7, #0]
	uint8_t writeIndex = *bufferControl; // Atomic operation
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	68db      	ldr	r3, [r3, #12]
 801d2cc:	781b      	ldrb	r3, [r3, #0]
 801d2ce:	75fb      	strb	r3, [r7, #23]
	uint8_t* buffer = (uint8_t*) bufferStorage;
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	689b      	ldr	r3, [r3, #8]
 801d2d4:	613b      	str	r3, [r7, #16]

	if(readIndex < writeIndex) {
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	8a9a      	ldrh	r2, [r3, #20]
 801d2da:	7dfb      	ldrb	r3, [r7, #23]
 801d2dc:	b29b      	uxth	r3, r3
 801d2de:	429a      	cmp	r2, r3
 801d2e0:	d210      	bcs.n	801d304 <_ZN16BufferedIODriver5flushEP8IODriver+0x46>
		driver->transmit(buffer + readIndex, writeIndex - readIndex);
 801d2e2:	683b      	ldr	r3, [r7, #0]
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	330c      	adds	r3, #12
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	687a      	ldr	r2, [r7, #4]
 801d2ec:	8a92      	ldrh	r2, [r2, #20]
 801d2ee:	4611      	mov	r1, r2
 801d2f0:	693a      	ldr	r2, [r7, #16]
 801d2f2:	1850      	adds	r0, r2, r1
 801d2f4:	7dfa      	ldrb	r2, [r7, #23]
 801d2f6:	6879      	ldr	r1, [r7, #4]
 801d2f8:	8a89      	ldrh	r1, [r1, #20]
 801d2fa:	1a52      	subs	r2, r2, r1
 801d2fc:	4601      	mov	r1, r0
 801d2fe:	6838      	ldr	r0, [r7, #0]
 801d300:	4798      	blx	r3
 801d302:	e033      	b.n	801d36c <_ZN16BufferedIODriver5flushEP8IODriver+0xae>
	} else if(readIndex > writeIndex) {
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	8a9a      	ldrh	r2, [r3, #20]
 801d308:	7dfb      	ldrb	r3, [r7, #23]
 801d30a:	b29b      	uxth	r3, r3
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d92d      	bls.n	801d36c <_ZN16BufferedIODriver5flushEP8IODriver+0xae>
		uint16_t firstSize = bufferLength - readIndex;
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	691b      	ldr	r3, [r3, #16]
 801d314:	b29a      	uxth	r2, r3
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	8a9b      	ldrh	r3, [r3, #20]
 801d31a:	1ad3      	subs	r3, r2, r3
 801d31c:	81fb      	strh	r3, [r7, #14]
		uint16_t totalSize = firstSize + writeIndex;
 801d31e:	7dfb      	ldrb	r3, [r7, #23]
 801d320:	b29a      	uxth	r2, r3
 801d322:	89fb      	ldrh	r3, [r7, #14]
 801d324:	4413      	add	r3, r2
 801d326:	81bb      	strh	r3, [r7, #12]
		uint8_t* temp = (uint8_t*) pvPortMalloc(totalSize);
 801d328:	89bb      	ldrh	r3, [r7, #12]
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7ed ff0e 	bl	800b14c <pvPortMalloc>
 801d330:	60b8      	str	r0, [r7, #8]

		memcpy(temp, buffer + readIndex, firstSize);
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	8a9b      	ldrh	r3, [r3, #20]
 801d336:	461a      	mov	r2, r3
 801d338:	693b      	ldr	r3, [r7, #16]
 801d33a:	4413      	add	r3, r2
 801d33c:	89fa      	ldrh	r2, [r7, #14]
 801d33e:	4619      	mov	r1, r3
 801d340:	68b8      	ldr	r0, [r7, #8]
 801d342:	f003 fb01 	bl	8020948 <memcpy>
		memcpy(temp + firstSize, buffer, writeIndex);
 801d346:	89fb      	ldrh	r3, [r7, #14]
 801d348:	68ba      	ldr	r2, [r7, #8]
 801d34a:	4413      	add	r3, r2
 801d34c:	7dfa      	ldrb	r2, [r7, #23]
 801d34e:	6939      	ldr	r1, [r7, #16]
 801d350:	4618      	mov	r0, r3
 801d352:	f003 faf9 	bl	8020948 <memcpy>
		driver->transmit(temp, totalSize);
 801d356:	683b      	ldr	r3, [r7, #0]
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	330c      	adds	r3, #12
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	89ba      	ldrh	r2, [r7, #12]
 801d360:	68b9      	ldr	r1, [r7, #8]
 801d362:	6838      	ldr	r0, [r7, #0]
 801d364:	4798      	blx	r3

		vPortFree(temp);
 801d366:	68b8      	ldr	r0, [r7, #8]
 801d368:	f7ed ffb4 	bl	800b2d4 <vPortFree>
	}

	readIndex = writeIndex;
 801d36c:	7dfb      	ldrb	r3, [r7, #23]
 801d36e:	b29a      	uxth	r2, r3
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	829a      	strh	r2, [r3, #20]
}
 801d374:	bf00      	nop
 801d376:	3718      	adds	r7, #24
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd80      	pop	{r7, pc}

0801d37c <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b082      	sub	sp, #8
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
 801d384:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	4618      	mov	r0, r3
 801d38a:	f7ff fe78 	bl	801d07e <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 801d38e:	6838      	ldr	r0, [r7, #0]
 801d390:	f000 f83f 	bl	801d412 <_ZNKSt8functionIFvhPhmEEcvbEv>
 801d394:	4603      	mov	r3, r0
 801d396:	2b00      	cmp	r3, #0
 801d398:	d00d      	beq.n	801d3b6 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 801d39a:	683b      	ldr	r3, [r7, #0]
 801d39c:	689b      	ldr	r3, [r3, #8]
 801d39e:	6878      	ldr	r0, [r7, #4]
 801d3a0:	6839      	ldr	r1, [r7, #0]
 801d3a2:	2202      	movs	r2, #2
 801d3a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801d3a6:	683b      	ldr	r3, [r7, #0]
 801d3a8:	68da      	ldr	r2, [r3, #12]
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	689a      	ldr	r2, [r3, #8]
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	609a      	str	r2, [r3, #8]
	}
    }
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	3708      	adds	r7, #8
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	bd80      	pop	{r7, pc}

0801d3c0 <_ZNSt8functionIFvhPhmEEC1EDn>:
      function(nullptr_t) noexcept
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b082      	sub	sp, #8
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
 801d3c8:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	f7ff fe56 	bl	801d07e <_ZNSt14_Function_baseC1Ev>
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	3708      	adds	r7, #8
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	bd80      	pop	{r7, pc}

0801d3dc <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b086      	sub	sp, #24
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
 801d3e4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 801d3e6:	f107 0308 	add.w	r3, r7, #8
 801d3ea:	6839      	ldr	r1, [r7, #0]
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	f7ff ffc5 	bl	801d37c <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 801d3f2:	f107 0308 	add.w	r3, r7, #8
 801d3f6:	6879      	ldr	r1, [r7, #4]
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f000 f81a 	bl	801d432 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 801d3fe:	f107 0308 	add.w	r3, r7, #8
 801d402:	4618      	mov	r0, r3
 801d404:	f7ff fe8e 	bl	801d124 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 801d408:	687b      	ldr	r3, [r7, #4]
      }
 801d40a:	4618      	mov	r0, r3
 801d40c:	3718      	adds	r7, #24
 801d40e:	46bd      	mov	sp, r7
 801d410:	bd80      	pop	{r7, pc}

0801d412 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 801d412:	b580      	push	{r7, lr}
 801d414:	b082      	sub	sp, #8
 801d416:	af00      	add	r7, sp, #0
 801d418:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7ff fe4f 	bl	801d0c0 <_ZNKSt14_Function_base8_M_emptyEv>
 801d422:	4603      	mov	r3, r0
 801d424:	f083 0301 	eor.w	r3, r3, #1
 801d428:	b2db      	uxtb	r3, r3
 801d42a:	4618      	mov	r0, r3
 801d42c:	3708      	adds	r7, #8
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}

0801d432 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 801d432:	b580      	push	{r7, lr}
 801d434:	b082      	sub	sp, #8
 801d436:	af00      	add	r7, sp, #0
 801d438:	6078      	str	r0, [r7, #4]
 801d43a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	683a      	ldr	r2, [r7, #0]
 801d440:	4611      	mov	r1, r2
 801d442:	4618      	mov	r0, r3
 801d444:	f000 f821 	bl	801d48a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	f103 0208 	add.w	r2, r3, #8
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	3308      	adds	r3, #8
 801d452:	4619      	mov	r1, r3
 801d454:	4610      	mov	r0, r2
 801d456:	f000 f84a 	bl	801d4ee <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	f103 020c 	add.w	r2, r3, #12
 801d460:	683b      	ldr	r3, [r7, #0]
 801d462:	330c      	adds	r3, #12
 801d464:	4619      	mov	r1, r3
 801d466:	4610      	mov	r0, r2
 801d468:	f000 f86b 	bl	801d542 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 801d46c:	bf00      	nop
 801d46e:	3708      	adds	r7, #8
 801d470:	46bd      	mov	sp, r7
 801d472:	bd80      	pop	{r7, pc}

0801d474 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 801d474:	b480      	push	{r7}
 801d476:	b083      	sub	sp, #12
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	4618      	mov	r0, r3
 801d480:	370c      	adds	r7, #12
 801d482:	46bd      	mov	sp, r7
 801d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d488:	4770      	bx	lr

0801d48a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 801d48a:	b580      	push	{r7, lr}
 801d48c:	b084      	sub	sp, #16
 801d48e:	af00      	add	r7, sp, #0
 801d490:	6078      	str	r0, [r7, #4]
 801d492:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801d494:	6878      	ldr	r0, [r7, #4]
 801d496:	f7ff ffed 	bl	801d474 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801d49a:	4602      	mov	r2, r0
 801d49c:	f107 0308 	add.w	r3, r7, #8
 801d4a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d4a4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 801d4a8:	6838      	ldr	r0, [r7, #0]
 801d4aa:	f7ff ffe3 	bl	801d474 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801d4ae:	4602      	mov	r2, r0
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d4b6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801d4ba:	f107 0308 	add.w	r3, r7, #8
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f7ff ffd8 	bl	801d474 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801d4c4:	4602      	mov	r2, r0
 801d4c6:	683b      	ldr	r3, [r7, #0]
 801d4c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d4cc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801d4d0:	bf00      	nop
 801d4d2:	3710      	adds	r7, #16
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd80      	pop	{r7, pc}

0801d4d8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801d4d8:	b480      	push	{r7}
 801d4da:	b083      	sub	sp, #12
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	370c      	adds	r7, #12
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ec:	4770      	bx	lr

0801d4ee <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 801d4ee:	b580      	push	{r7, lr}
 801d4f0:	b084      	sub	sp, #16
 801d4f2:	af00      	add	r7, sp, #0
 801d4f4:	6078      	str	r0, [r7, #4]
 801d4f6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801d4f8:	6878      	ldr	r0, [r7, #4]
 801d4fa:	f7ff ffed 	bl	801d4d8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801d4fe:	4603      	mov	r3, r0
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801d504:	6838      	ldr	r0, [r7, #0]
 801d506:	f7ff ffe7 	bl	801d4d8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801d50a:	4603      	mov	r3, r0
 801d50c:	681a      	ldr	r2, [r3, #0]
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801d512:	f107 030c 	add.w	r3, r7, #12
 801d516:	4618      	mov	r0, r3
 801d518:	f7ff ffde 	bl	801d4d8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801d51c:	4603      	mov	r3, r0
 801d51e:	681a      	ldr	r2, [r3, #0]
 801d520:	683b      	ldr	r3, [r7, #0]
 801d522:	601a      	str	r2, [r3, #0]
    }
 801d524:	bf00      	nop
 801d526:	3710      	adds	r7, #16
 801d528:	46bd      	mov	sp, r7
 801d52a:	bd80      	pop	{r7, pc}

0801d52c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801d52c:	b480      	push	{r7}
 801d52e:	b083      	sub	sp, #12
 801d530:	af00      	add	r7, sp, #0
 801d532:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	4618      	mov	r0, r3
 801d538:	370c      	adds	r7, #12
 801d53a:	46bd      	mov	sp, r7
 801d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d540:	4770      	bx	lr

0801d542 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 801d542:	b580      	push	{r7, lr}
 801d544:	b084      	sub	sp, #16
 801d546:	af00      	add	r7, sp, #0
 801d548:	6078      	str	r0, [r7, #4]
 801d54a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801d54c:	6878      	ldr	r0, [r7, #4]
 801d54e:	f7ff ffed 	bl	801d52c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801d552:	4603      	mov	r3, r0
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801d558:	6838      	ldr	r0, [r7, #0]
 801d55a:	f7ff ffe7 	bl	801d52c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801d55e:	4603      	mov	r3, r0
 801d560:	681a      	ldr	r2, [r3, #0]
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801d566:	f107 030c 	add.w	r3, r7, #12
 801d56a:	4618      	mov	r0, r3
 801d56c:	f7ff ffde 	bl	801d52c <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801d570:	4603      	mov	r3, r0
 801d572:	681a      	ldr	r2, [r3, #0]
 801d574:	683b      	ldr	r3, [r7, #0]
 801d576:	601a      	str	r2, [r3, #0]
    }
 801d578:	bf00      	nop
 801d57a:	3710      	adds	r7, #16
 801d57c:	46bd      	mov	sp, r7
 801d57e:	bd80      	pop	{r7, pc}

0801d580 <_ZN16BufferedIODriverD1Ev>:
#include <cstdint>
#include <functional>



class BufferedIODriver : public IODriver {
 801d580:	b580      	push	{r7, lr}
 801d582:	b082      	sub	sp, #8
 801d584:	af00      	add	r7, sp, #0
 801d586:	6078      	str	r0, [r7, #4]
 801d588:	4a08      	ldr	r2, [pc, #32]	; (801d5ac <_ZN16BufferedIODriverD1Ev+0x2c>)
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	601a      	str	r2, [r3, #0]
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	3318      	adds	r3, #24
 801d592:	4618      	mov	r0, r3
 801d594:	f7ff fdc6 	bl	801d124 <_ZNSt8functionIFvhPhmEED1Ev>
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	4618      	mov	r0, r3
 801d59c:	f7ff fda2 	bl	801d0e4 <_ZN8IODriverD1Ev>
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	4618      	mov	r0, r3
 801d5a4:	3708      	adds	r7, #8
 801d5a6:	46bd      	mov	sp, r7
 801d5a8:	bd80      	pop	{r7, pc}
 801d5aa:	bf00      	nop
 801d5ac:	0802766c 	.word	0x0802766c

0801d5b0 <_ZN16BufferedIODriverD0Ev>:
 801d5b0:	b580      	push	{r7, lr}
 801d5b2:	b082      	sub	sp, #8
 801d5b4:	af00      	add	r7, sp, #0
 801d5b6:	6078      	str	r0, [r7, #4]
 801d5b8:	6878      	ldr	r0, [r7, #4]
 801d5ba:	f7ff ffe1 	bl	801d580 <_ZN16BufferedIODriverD1Ev>
 801d5be:	2128      	movs	r1, #40	; 0x28
 801d5c0:	6878      	ldr	r0, [r7, #4]
 801d5c2:	f002 fd91 	bl	80200e8 <_ZdlPvj>
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	3708      	adds	r7, #8
 801d5cc:	46bd      	mov	sp, r7
 801d5ce:	bd80      	pop	{r7, pc}

0801d5d0 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 801d5d0:	b480      	push	{r7}
 801d5d2:	b083      	sub	sp, #12
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
 801d5d8:	4a04      	ldr	r2, [pc, #16]	; (801d5ec <_ZN10MessageBusD1Ev+0x1c>)
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	601a      	str	r2, [r3, #0]
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	370c      	adds	r7, #12
 801d5e4:	46bd      	mov	sp, r7
 801d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ea:	4770      	bx	lr
 801d5ec:	080276e8 	.word	0x080276e8

0801d5f0 <_ZN10MessageBusD0Ev>:
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b082      	sub	sp, #8
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	6078      	str	r0, [r7, #4]
 801d5f8:	6878      	ldr	r0, [r7, #4]
 801d5fa:	f7ff ffe9 	bl	801d5d0 <_ZN10MessageBusD1Ev>
 801d5fe:	f644 0104 	movw	r1, #18436	; 0x4804
 801d602:	6878      	ldr	r0, [r7, #4]
 801d604:	f002 fd70 	bl	80200e8 <_ZdlPvj>
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	4618      	mov	r0, r3
 801d60c:	3708      	adds	r7, #8
 801d60e:	46bd      	mov	sp, r7
 801d610:	bd80      	pop	{r7, pc}

0801d612 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 801d612:	b480      	push	{r7}
 801d614:	b083      	sub	sp, #12
 801d616:	af00      	add	r7, sp, #0
 801d618:	6078      	str	r0, [r7, #4]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	4618      	mov	r0, r3
 801d61e:	370c      	adds	r7, #12
 801d620:	46bd      	mov	sp, r7
 801d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d626:	4770      	bx	lr

0801d628 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 801d628:	b480      	push	{r7}
 801d62a:	b083      	sub	sp, #12
 801d62c:	af00      	add	r7, sp, #0
 801d62e:	6078      	str	r0, [r7, #4]
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	4618      	mov	r0, r3
 801d634:	370c      	adds	r7, #12
 801d636:	46bd      	mov	sp, r7
 801d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d63c:	4770      	bx	lr
	...

0801d640 <_ZN10MessageBusC1Ev>:
class MessageBus {
 801d640:	b480      	push	{r7}
 801d642:	b083      	sub	sp, #12
 801d644:	af00      	add	r7, sp, #0
 801d646:	6078      	str	r0, [r7, #4]
 801d648:	4a04      	ldr	r2, [pc, #16]	; (801d65c <_ZN10MessageBusC1Ev+0x1c>)
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	601a      	str	r2, [r3, #0]
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	4618      	mov	r0, r3
 801d652:	370c      	adds	r7, #12
 801d654:	46bd      	mov	sp, r7
 801d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d65a:	4770      	bx	lr
 801d65c:	080276e8 	.word	0x080276e8

0801d660 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 801d660:	b590      	push	{r4, r7, lr}
 801d662:	b091      	sub	sp, #68	; 0x44
 801d664:	af02      	add	r7, sp, #8
 801d666:	60f8      	str	r0, [r7, #12]
 801d668:	60b9      	str	r1, [r7, #8]
 801d66a:	607a      	str	r2, [r7, #4]
 801d66c:	603b      	str	r3, [r7, #0]
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	4618      	mov	r0, r3
 801d672:	f7ff ffe5 	bl	801d640 <_ZN10MessageBusC1Ev>
 801d676:	4a24      	ldr	r2, [pc, #144]	; (801d708 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 801d67c:	68fa      	ldr	r2, [r7, #12]
 801d67e:	f644 0304 	movw	r3, #18436	; 0x4804
 801d682:	4413      	add	r3, r2
 801d684:	68ba      	ldr	r2, [r7, #8]
 801d686:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 801d688:	68fa      	ldr	r2, [r7, #12]
 801d68a:	f644 0308 	movw	r3, #18440	; 0x4808
 801d68e:	4413      	add	r3, r2
 801d690:	687a      	ldr	r2, [r7, #4]
 801d692:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 801d694:	68fa      	ldr	r2, [r7, #12]
 801d696:	f644 030c 	movw	r3, #18444	; 0x480c
 801d69a:	4413      	add	r3, r2
 801d69c:	683a      	ldr	r2, [r7, #0]
 801d69e:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 801d6a0:	68fa      	ldr	r2, [r7, #12]
 801d6a2:	f644 0310 	movw	r3, #18448	; 0x4810
 801d6a6:	4413      	add	r3, r2
 801d6a8:	2200      	movs	r2, #0
 801d6aa:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 801d6ac:	68bb      	ldr	r3, [r7, #8]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	3308      	adds	r3, #8
 801d6b2:	681c      	ldr	r4, [r3, #0]
 801d6b4:	4b15      	ldr	r3, [pc, #84]	; (801d70c <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 801d6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	633b      	str	r3, [r7, #48]	; 0x30
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	637b      	str	r3, [r7, #52]	; 0x34
 801d6c0:	f107 0020 	add.w	r0, r7, #32
 801d6c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801d6c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801d6cc:	4b10      	ldr	r3, [pc, #64]	; (801d710 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 801d6ce:	9301      	str	r3, [sp, #4]
 801d6d0:	4b10      	ldr	r3, [pc, #64]	; (801d714 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 801d6d2:	9300      	str	r3, [sp, #0]
 801d6d4:	4b10      	ldr	r3, [pc, #64]	; (801d718 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 801d6d6:	f000 f8ba 	bl	801d84e <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 801d6da:	f107 0220 	add.w	r2, r7, #32
 801d6de:	f107 0310 	add.w	r3, r7, #16
 801d6e2:	4611      	mov	r1, r2
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f000 f90d 	bl	801d904 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 801d6ea:	f107 0310 	add.w	r3, r7, #16
 801d6ee:	4619      	mov	r1, r3
 801d6f0:	68b8      	ldr	r0, [r7, #8]
 801d6f2:	47a0      	blx	r4
 801d6f4:	f107 0310 	add.w	r3, r7, #16
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f7ff fd13 	bl	801d124 <_ZNSt8functionIFvhPhmEED1Ev>
}
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	4618      	mov	r0, r3
 801d702:	373c      	adds	r7, #60	; 0x3c
 801d704:	46bd      	mov	sp, r7
 801d706:	bd90      	pop	{r4, r7, pc}
 801d708:	080276d0 	.word	0x080276d0
 801d70c:	0801d71d 	.word	0x0801d71d
 801d710:	08027b82 	.word	0x08027b82
 801d714:	08027b81 	.word	0x08027b81
 801d718:	08027b80 	.word	0x08027b80

0801d71c <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b084      	sub	sp, #16
 801d720:	af00      	add	r7, sp, #0
 801d722:	60f8      	str	r0, [r7, #12]
 801d724:	607a      	str	r2, [r7, #4]
 801d726:	603b      	str	r3, [r7, #0]
 801d728:	460b      	mov	r3, r1
 801d72a:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 801d72c:	68fa      	ldr	r2, [r7, #12]
 801d72e:	f644 030c 	movw	r3, #18444	; 0x480c
 801d732:	4413      	add	r3, r2
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	683a      	ldr	r2, [r7, #0]
 801d738:	429a      	cmp	r2, r3
 801d73a:	d91a      	bls.n	801d772 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 801d73c:	68f8      	ldr	r0, [r7, #12]
 801d73e:	68fa      	ldr	r2, [r7, #12]
 801d740:	f644 030c 	movw	r3, #18444	; 0x480c
 801d744:	4413      	add	r3, r2
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	7af9      	ldrb	r1, [r7, #11]
 801d74a:	687a      	ldr	r2, [r7, #4]
 801d74c:	f001 ffb4 	bl	801f6b8 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 801d750:	68fa      	ldr	r2, [r7, #12]
 801d752:	f644 030c 	movw	r3, #18444	; 0x480c
 801d756:	4413      	add	r3, r2
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	683a      	ldr	r2, [r7, #0]
 801d75c:	1ad3      	subs	r3, r2, r3
 801d75e:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 801d760:	68fa      	ldr	r2, [r7, #12]
 801d762:	f644 030c 	movw	r3, #18444	; 0x480c
 801d766:	4413      	add	r3, r2
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	687a      	ldr	r2, [r7, #4]
 801d76c:	4413      	add	r3, r2
 801d76e:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 801d770:	e7dc      	b.n	801d72c <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 801d772:	68f8      	ldr	r0, [r7, #12]
 801d774:	7af9      	ldrb	r1, [r7, #11]
 801d776:	683b      	ldr	r3, [r7, #0]
 801d778:	687a      	ldr	r2, [r7, #4]
 801d77a:	f001 ff9d 	bl	801f6b8 <_ZN10MessageBus7receiveEhPhm>
}
 801d77e:	bf00      	nop
 801d780:	3710      	adds	r7, #16
 801d782:	46bd      	mov	sp, r7
 801d784:	bd80      	pop	{r7, pc}

0801d786 <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 801d786:	b580      	push	{r7, lr}
 801d788:	b086      	sub	sp, #24
 801d78a:	af00      	add	r7, sp, #0
 801d78c:	60f8      	str	r0, [r7, #12]
 801d78e:	60b9      	str	r1, [r7, #8]
 801d790:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 801d792:	68fa      	ldr	r2, [r7, #12]
 801d794:	f644 030c 	movw	r3, #18444	; 0x480c
 801d798:	4413      	add	r3, r2
 801d79a:	681a      	ldr	r2, [r3, #0]
 801d79c:	68f9      	ldr	r1, [r7, #12]
 801d79e:	f644 0310 	movw	r3, #18448	; 0x4810
 801d7a2:	440b      	add	r3, r1
 801d7a4:	781b      	ldrb	r3, [r3, #0]
 801d7a6:	1ad3      	subs	r3, r2, r3
 801d7a8:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 801d7aa:	687a      	ldr	r2, [r7, #4]
 801d7ac:	697b      	ldr	r3, [r7, #20]
 801d7ae:	429a      	cmp	r2, r3
 801d7b0:	d901      	bls.n	801d7b6 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 801d7b2:	697b      	ldr	r3, [r7, #20]
 801d7b4:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 801d7b6:	68fa      	ldr	r2, [r7, #12]
 801d7b8:	f644 0308 	movw	r3, #18440	; 0x4808
 801d7bc:	4413      	add	r3, r2
 801d7be:	681a      	ldr	r2, [r3, #0]
 801d7c0:	68f9      	ldr	r1, [r7, #12]
 801d7c2:	f644 0310 	movw	r3, #18448	; 0x4810
 801d7c6:	440b      	add	r3, r1
 801d7c8:	781b      	ldrb	r3, [r3, #0]
 801d7ca:	4413      	add	r3, r2
 801d7cc:	687a      	ldr	r2, [r7, #4]
 801d7ce:	68b9      	ldr	r1, [r7, #8]
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f003 f8b9 	bl	8020948 <memcpy>

	buffer_index += length;
 801d7d6:	68fa      	ldr	r2, [r7, #12]
 801d7d8:	f644 0310 	movw	r3, #18448	; 0x4810
 801d7dc:	4413      	add	r3, r2
 801d7de:	781a      	ldrb	r2, [r3, #0]
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	b2db      	uxtb	r3, r3
 801d7e4:	4413      	add	r3, r2
 801d7e6:	b2d9      	uxtb	r1, r3
 801d7e8:	68fa      	ldr	r2, [r7, #12]
 801d7ea:	f644 0310 	movw	r3, #18448	; 0x4810
 801d7ee:	4413      	add	r3, r2
 801d7f0:	460a      	mov	r2, r1
 801d7f2:	701a      	strb	r2, [r3, #0]


	return length;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	b2db      	uxtb	r3, r3
}
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	3718      	adds	r7, #24
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	bd80      	pop	{r7, pc}

0801d800 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 801d800:	b590      	push	{r4, r7, lr}
 801d802:	b083      	sub	sp, #12
 801d804:	af00      	add	r7, sp, #0
 801d806:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 801d808:	687a      	ldr	r2, [r7, #4]
 801d80a:	f644 0304 	movw	r3, #18436	; 0x4804
 801d80e:	4413      	add	r3, r2
 801d810:	6818      	ldr	r0, [r3, #0]
 801d812:	687a      	ldr	r2, [r7, #4]
 801d814:	f644 0304 	movw	r3, #18436	; 0x4804
 801d818:	4413      	add	r3, r2
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	330c      	adds	r3, #12
 801d820:	681c      	ldr	r4, [r3, #0]
 801d822:	687a      	ldr	r2, [r7, #4]
 801d824:	f644 0308 	movw	r3, #18440	; 0x4808
 801d828:	4413      	add	r3, r2
 801d82a:	6819      	ldr	r1, [r3, #0]
 801d82c:	687a      	ldr	r2, [r7, #4]
 801d82e:	f644 0310 	movw	r3, #18448	; 0x4810
 801d832:	4413      	add	r3, r2
 801d834:	781b      	ldrb	r3, [r3, #0]
 801d836:	461a      	mov	r2, r3
 801d838:	47a0      	blx	r4
	buffer_index = 0;
 801d83a:	687a      	ldr	r2, [r7, #4]
 801d83c:	f644 0310 	movw	r3, #18448	; 0x4810
 801d840:	4413      	add	r3, r2
 801d842:	2200      	movs	r2, #0
 801d844:	701a      	strb	r2, [r3, #0]
}
 801d846:	bf00      	nop
 801d848:	370c      	adds	r7, #12
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd90      	pop	{r4, r7, pc}

0801d84e <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 801d84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d852:	b086      	sub	sp, #24
 801d854:	af02      	add	r7, sp, #8
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	607a      	str	r2, [r7, #4]
 801d85c:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 801d85e:	68b8      	ldr	r0, [r7, #8]
 801d860:	f000 f878 	bl	801d954 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d864:	4605      	mov	r5, r0
 801d866:	6878      	ldr	r0, [r7, #4]
 801d868:	f000 f87f 	bl	801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801d86c:	4606      	mov	r6, r0
 801d86e:	6838      	ldr	r0, [r7, #0]
 801d870:	f000 f886 	bl	801d980 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d874:	4680      	mov	r8, r0
 801d876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d878:	f000 f88d 	bl	801d996 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d87c:	4604      	mov	r4, r0
 801d87e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d880:	f000 f894 	bl	801d9ac <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d884:	4603      	mov	r3, r0
 801d886:	9301      	str	r3, [sp, #4]
 801d888:	9400      	str	r4, [sp, #0]
 801d88a:	4643      	mov	r3, r8
 801d88c:	4632      	mov	r2, r6
 801d88e:	4629      	mov	r1, r5
 801d890:	68f8      	ldr	r0, [r7, #12]
 801d892:	f000 f896 	bl	801d9c2 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 801d896:	68f8      	ldr	r0, [r7, #12]
 801d898:	3710      	adds	r7, #16
 801d89a:	46bd      	mov	sp, r7
 801d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8a0 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 801d8a0:	b580      	push	{r7, lr}
 801d8a2:	b082      	sub	sp, #8
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	6078      	str	r0, [r7, #4]
 801d8a8:	6039      	str	r1, [r7, #0]
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	683a      	ldr	r2, [r7, #0]
 801d8ae:	4611      	mov	r1, r2
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	f000 f8cd 	bl	801da50 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	3708      	adds	r7, #8
 801d8bc:	46bd      	mov	sp, r7
 801d8be:	bd80      	pop	{r7, pc}

0801d8c0 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 801d8c0:	b590      	push	{r4, r7, lr}
 801d8c2:	b083      	sub	sp, #12
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	6078      	str	r0, [r7, #4]
 801d8c8:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 801d8ca:	683b      	ldr	r3, [r7, #0]
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	f000 f8a9 	bl	801da24 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 801d8d2:	4602      	mov	r2, r0
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d8da:	e883 0003 	stmia.w	r3, {r0, r1}
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	f103 0408 	add.w	r4, r3, #8
 801d8e4:	683b      	ldr	r3, [r7, #0]
 801d8e6:	3308      	adds	r3, #8
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	f000 f8a6 	bl	801da3a <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	4619      	mov	r1, r3
 801d8f2:	4620      	mov	r0, r4
 801d8f4:	f7ff ffd4 	bl	801d8a0 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	370c      	adds	r7, #12
 801d8fe:	46bd      	mov	sp, r7
 801d900:	bd90      	pop	{r4, r7, pc}
	...

0801d904 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 801d904:	b590      	push	{r4, r7, lr}
 801d906:	b083      	sub	sp, #12
 801d908:	af00      	add	r7, sp, #0
 801d90a:	6078      	str	r0, [r7, #4]
 801d90c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	4618      	mov	r0, r3
 801d912:	f7ff fbb4 	bl	801d07e <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 801d916:	6838      	ldr	r0, [r7, #0]
 801d918:	f000 f8bd 	bl	801da96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 801d91c:	4603      	mov	r3, r0
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d00e      	beq.n	801d940 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 801d922:	687c      	ldr	r4, [r7, #4]
 801d924:	6838      	ldr	r0, [r7, #0]
 801d926:	f000 f8c1 	bl	801daac <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801d92a:	4603      	mov	r3, r0
 801d92c:	4619      	mov	r1, r3
 801d92e:	4620      	mov	r0, r4
 801d930:	f000 f8c7 	bl	801dac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	4a05      	ldr	r2, [pc, #20]	; (801d94c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 801d938:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	4a04      	ldr	r2, [pc, #16]	; (801d950 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 801d93e:	609a      	str	r2, [r3, #8]
	  }
      }
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	4618      	mov	r0, r3
 801d944:	370c      	adds	r7, #12
 801d946:	46bd      	mov	sp, r7
 801d948:	bd90      	pop	{r4, r7, pc}
 801d94a:	bf00      	nop
 801d94c:	0801dae7 	.word	0x0801dae7
 801d950:	0801db29 	.word	0x0801db29

0801d954 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d954:	b480      	push	{r7}
 801d956:	b083      	sub	sp, #12
 801d958:	af00      	add	r7, sp, #0
 801d95a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	4618      	mov	r0, r3
 801d960:	370c      	adds	r7, #12
 801d962:	46bd      	mov	sp, r7
 801d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d968:	4770      	bx	lr

0801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d96a:	b480      	push	{r7}
 801d96c:	b083      	sub	sp, #12
 801d96e:	af00      	add	r7, sp, #0
 801d970:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	4618      	mov	r0, r3
 801d976:	370c      	adds	r7, #12
 801d978:	46bd      	mov	sp, r7
 801d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d97e:	4770      	bx	lr

0801d980 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d980:	b480      	push	{r7}
 801d982:	b083      	sub	sp, #12
 801d984:	af00      	add	r7, sp, #0
 801d986:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	4618      	mov	r0, r3
 801d98c:	370c      	adds	r7, #12
 801d98e:	46bd      	mov	sp, r7
 801d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d994:	4770      	bx	lr

0801d996 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d996:	b480      	push	{r7}
 801d998:	b083      	sub	sp, #12
 801d99a:	af00      	add	r7, sp, #0
 801d99c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	4618      	mov	r0, r3
 801d9a2:	370c      	adds	r7, #12
 801d9a4:	46bd      	mov	sp, r7
 801d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9aa:	4770      	bx	lr

0801d9ac <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801d9ac:	b480      	push	{r7}
 801d9ae:	b083      	sub	sp, #12
 801d9b0:	af00      	add	r7, sp, #0
 801d9b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	370c      	adds	r7, #12
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9c0:	4770      	bx	lr

0801d9c2 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 801d9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9c6:	b086      	sub	sp, #24
 801d9c8:	af02      	add	r7, sp, #8
 801d9ca:	60f8      	str	r0, [r7, #12]
 801d9cc:	60b9      	str	r1, [r7, #8]
 801d9ce:	607a      	str	r2, [r7, #4]
 801d9d0:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 801d9d2:	68b8      	ldr	r0, [r7, #8]
 801d9d4:	f000 f826 	bl	801da24 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 801d9d8:	4602      	mov	r2, r0
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d9e0:	e883 0003 	stmia.w	r3, {r0, r1}
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	f103 0408 	add.w	r4, r3, #8
 801d9ea:	6878      	ldr	r0, [r7, #4]
 801d9ec:	f7ff ffbd 	bl	801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801d9f0:	4605      	mov	r5, r0
 801d9f2:	6838      	ldr	r0, [r7, #0]
 801d9f4:	f7ff ffc4 	bl	801d980 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d9f8:	4606      	mov	r6, r0
 801d9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9fc:	f7ff ffcb 	bl	801d996 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801da00:	4680      	mov	r8, r0
 801da02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801da04:	f7ff ffd2 	bl	801d9ac <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801da08:	4603      	mov	r3, r0
 801da0a:	9300      	str	r3, [sp, #0]
 801da0c:	4643      	mov	r3, r8
 801da0e:	4632      	mov	r2, r6
 801da10:	4629      	mov	r1, r5
 801da12:	4620      	mov	r0, r4
 801da14:	f000 f8c2 	bl	801db9c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	4618      	mov	r0, r3
 801da1c:	3710      	adds	r7, #16
 801da1e:	46bd      	mov	sp, r7
 801da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801da24 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801da24:	b480      	push	{r7}
 801da26:	b083      	sub	sp, #12
 801da28:	af00      	add	r7, sp, #0
 801da2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	4618      	mov	r0, r3
 801da30:	370c      	adds	r7, #12
 801da32:	46bd      	mov	sp, r7
 801da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da38:	4770      	bx	lr

0801da3a <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 801da3a:	b480      	push	{r7}
 801da3c:	b083      	sub	sp, #12
 801da3e:	af00      	add	r7, sp, #0
 801da40:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	4618      	mov	r0, r3
 801da46:	370c      	adds	r7, #12
 801da48:	46bd      	mov	sp, r7
 801da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da4e:	4770      	bx	lr

0801da50 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801da50:	b590      	push	{r4, r7, lr}
 801da52:	b083      	sub	sp, #12
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
 801da58:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801da5a:	6838      	ldr	r0, [r7, #0]
 801da5c:	f000 f8c4 	bl	801dbe8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 801da60:	4603      	mov	r3, r0
 801da62:	4618      	mov	r0, r3
 801da64:	f000 f8cb 	bl	801dbfe <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801da68:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801da6a:	4619      	mov	r1, r3
 801da6c:	6878      	ldr	r0, [r7, #4]
 801da6e:	f000 f8de 	bl	801dc2e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 801da72:	687c      	ldr	r4, [r7, #4]
 801da74:	6838      	ldr	r0, [r7, #0]
 801da76:	f000 f8cd 	bl	801dc14 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801da7a:	4603      	mov	r3, r0
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7ff ff74 	bl	801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801da82:	4603      	mov	r3, r0
 801da84:	4619      	mov	r1, r3
 801da86:	4620      	mov	r0, r4
 801da88:	f000 f8f3 	bl	801dc72 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	4618      	mov	r0, r3
 801da90:	370c      	adds	r7, #12
 801da92:	46bd      	mov	sp, r7
 801da94:	bd90      	pop	{r4, r7, pc}

0801da96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 801da96:	b480      	push	{r7}
 801da98:	b083      	sub	sp, #12
 801da9a:	af00      	add	r7, sp, #0
 801da9c:	6078      	str	r0, [r7, #4]
	  { return true; }
 801da9e:	2301      	movs	r3, #1
 801daa0:	4618      	mov	r0, r3
 801daa2:	370c      	adds	r7, #12
 801daa4:	46bd      	mov	sp, r7
 801daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daaa:	4770      	bx	lr

0801daac <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 801daac:	b480      	push	{r7}
 801daae:	b083      	sub	sp, #12
 801dab0:	af00      	add	r7, sp, #0
 801dab2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	4618      	mov	r0, r3
 801dab8:	370c      	adds	r7, #12
 801daba:	46bd      	mov	sp, r7
 801dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac0:	4770      	bx	lr

0801dac2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801dac2:	b590      	push	{r4, r7, lr}
 801dac4:	b085      	sub	sp, #20
 801dac6:	af00      	add	r7, sp, #0
 801dac8:	6078      	str	r0, [r7, #4]
 801daca:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 801dacc:	6838      	ldr	r0, [r7, #0]
 801dace:	f7ff ffed 	bl	801daac <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801dad2:	4603      	mov	r3, r0
 801dad4:	4622      	mov	r2, r4
 801dad6:	4619      	mov	r1, r3
 801dad8:	6878      	ldr	r0, [r7, #4]
 801dada:	f000 f8db 	bl	801dc94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 801dade:	bf00      	nop
 801dae0:	3714      	adds	r7, #20
 801dae2:	46bd      	mov	sp, r7
 801dae4:	bd90      	pop	{r4, r7, pc}

0801dae6 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801dae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dae8:	b085      	sub	sp, #20
 801daea:	af00      	add	r7, sp, #0
 801daec:	60f8      	str	r0, [r7, #12]
 801daee:	60b9      	str	r1, [r7, #8]
 801daf0:	607a      	str	r2, [r7, #4]
 801daf2:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 801daf4:	68f8      	ldr	r0, [r7, #12]
 801daf6:	f000 f8e9 	bl	801dccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801dafa:	4604      	mov	r4, r0
 801dafc:	68b8      	ldr	r0, [r7, #8]
 801dafe:	f000 f8f2 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801db02:	4605      	mov	r5, r0
 801db04:	6878      	ldr	r0, [r7, #4]
 801db06:	f000 f8f9 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801db0a:	4606      	mov	r6, r0
 801db0c:	6838      	ldr	r0, [r7, #0]
 801db0e:	f000 f900 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801db12:	4603      	mov	r3, r0
 801db14:	4632      	mov	r2, r6
 801db16:	4629      	mov	r1, r5
 801db18:	4620      	mov	r0, r4
 801db1a:	f000 f905 	bl	801dd28 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 801db1e:	bf00      	nop
 801db20:	3714      	adds	r7, #20
 801db22:	46bd      	mov	sp, r7
 801db24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801db28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801db28:	b5b0      	push	{r4, r5, r7, lr}
 801db2a:	b086      	sub	sp, #24
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	60f8      	str	r0, [r7, #12]
 801db30:	60b9      	str	r1, [r7, #8]
 801db32:	4613      	mov	r3, r2
 801db34:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801db36:	79fb      	ldrb	r3, [r7, #7]
 801db38:	2b03      	cmp	r3, #3
 801db3a:	d827      	bhi.n	801db8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 801db3c:	a201      	add	r2, pc, #4	; (adr r2, 801db44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 801db3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db42:	bf00      	nop
 801db44:	0801db55 	.word	0x0801db55
 801db48:	0801db63 	.word	0x0801db63
 801db4c:	0801db77 	.word	0x0801db77
 801db50:	0801db83 	.word	0x0801db83
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 801db54:	68f8      	ldr	r0, [r7, #12]
 801db56:	f000 f90a 	bl	801dd6e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 801db5a:	4603      	mov	r3, r0
 801db5c:	4a0e      	ldr	r2, [pc, #56]	; (801db98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 801db5e:	601a      	str	r2, [r3, #0]
	      break;
 801db60:	e014      	b.n	801db8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801db62:	68f8      	ldr	r0, [r7, #12]
 801db64:	f000 f90f 	bl	801dd86 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801db68:	4604      	mov	r4, r0
 801db6a:	68b8      	ldr	r0, [r7, #8]
 801db6c:	f000 f8ae 	bl	801dccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801db70:	4603      	mov	r3, r0
 801db72:	6023      	str	r3, [r4, #0]
	      break;
 801db74:	e00a      	b.n	801db8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 801db76:	462a      	mov	r2, r5
 801db78:	68b9      	ldr	r1, [r7, #8]
 801db7a:	68f8      	ldr	r0, [r7, #12]
 801db7c:	f000 f90f 	bl	801dd9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 801db80:	e004      	b.n	801db8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 801db82:	4621      	mov	r1, r4
 801db84:	68f8      	ldr	r0, [r7, #12]
 801db86:	f000 f928 	bl	801ddda <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 801db8a:	bf00      	nop
	  return false;
 801db8c:	2300      	movs	r3, #0
	}
 801db8e:	4618      	mov	r0, r3
 801db90:	3718      	adds	r7, #24
 801db92:	46bd      	mov	sp, r7
 801db94:	bdb0      	pop	{r4, r5, r7, pc}
 801db96:	bf00      	nop
 801db98:	080276f8 	.word	0x080276f8

0801db9c <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801db9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dba0:	b086      	sub	sp, #24
 801dba2:	af02      	add	r7, sp, #8
 801dba4:	60f8      	str	r0, [r7, #12]
 801dba6:	60b9      	str	r1, [r7, #8]
 801dba8:	607a      	str	r2, [r7, #4]
 801dbaa:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801dbac:	68fc      	ldr	r4, [r7, #12]
 801dbae:	68b8      	ldr	r0, [r7, #8]
 801dbb0:	f7ff fedb 	bl	801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801dbb4:	4605      	mov	r5, r0
 801dbb6:	6878      	ldr	r0, [r7, #4]
 801dbb8:	f7ff fee2 	bl	801d980 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dbbc:	4606      	mov	r6, r0
 801dbbe:	6838      	ldr	r0, [r7, #0]
 801dbc0:	f7ff fee9 	bl	801d996 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dbc4:	4680      	mov	r8, r0
 801dbc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dbc8:	f7ff fef0 	bl	801d9ac <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dbcc:	4603      	mov	r3, r0
 801dbce:	9300      	str	r3, [sp, #0]
 801dbd0:	4643      	mov	r3, r8
 801dbd2:	4632      	mov	r2, r6
 801dbd4:	4629      	mov	r1, r5
 801dbd6:	4620      	mov	r0, r4
 801dbd8:	f000 f913 	bl	801de02 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 801dbdc:	68fb      	ldr	r3, [r7, #12]
 801dbde:	4618      	mov	r0, r3
 801dbe0:	3710      	adds	r7, #16
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dbe8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801dbe8:	b480      	push	{r7}
 801dbea:	b083      	sub	sp, #12
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	6078      	str	r0, [r7, #4]
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	370c      	adds	r7, #12
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbfc:	4770      	bx	lr

0801dbfe <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801dbfe:	b480      	push	{r7}
 801dc00:	b083      	sub	sp, #12
 801dc02:	af00      	add	r7, sp, #0
 801dc04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	4618      	mov	r0, r3
 801dc0a:	370c      	adds	r7, #12
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc12:	4770      	bx	lr

0801dc14 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801dc14:	b580      	push	{r7, lr}
 801dc16:	b082      	sub	sp, #8
 801dc18:	af00      	add	r7, sp, #0
 801dc1a:	6078      	str	r0, [r7, #4]
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f000 f915 	bl	801de4e <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 801dc24:	4603      	mov	r3, r0
 801dc26:	4618      	mov	r0, r3
 801dc28:	3708      	adds	r7, #8
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	bd80      	pop	{r7, pc}

0801dc2e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801dc2e:	b580      	push	{r7, lr}
 801dc30:	b082      	sub	sp, #8
 801dc32:	af00      	add	r7, sp, #0
 801dc34:	6078      	str	r0, [r7, #4]
 801dc36:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801dc38:	6838      	ldr	r0, [r7, #0]
 801dc3a:	f000 f913 	bl	801de64 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 801dc3e:	4603      	mov	r3, r0
 801dc40:	4618      	mov	r0, r3
 801dc42:	f000 f91a 	bl	801de7a <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 801dc46:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801dc48:	4619      	mov	r1, r3
 801dc4a:	6878      	ldr	r0, [r7, #4]
 801dc4c:	f000 f937 	bl	801debe <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 801dc50:	6838      	ldr	r0, [r7, #0]
 801dc52:	f000 f91d 	bl	801de90 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801dc56:	4603      	mov	r3, r0
 801dc58:	4618      	mov	r0, r3
 801dc5a:	f000 f925 	bl	801dea8 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801dc5e:	4603      	mov	r3, r0
 801dc60:	4619      	mov	r1, r3
 801dc62:	6878      	ldr	r0, [r7, #4]
 801dc64:	f000 f94d 	bl	801df02 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	3708      	adds	r7, #8
 801dc6e:	46bd      	mov	sp, r7
 801dc70:	bd80      	pop	{r7, pc}

0801dc72 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801dc72:	b580      	push	{r7, lr}
 801dc74:	b082      	sub	sp, #8
 801dc76:	af00      	add	r7, sp, #0
 801dc78:	6078      	str	r0, [r7, #4]
 801dc7a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801dc7c:	6838      	ldr	r0, [r7, #0]
 801dc7e:	f7ff fe74 	bl	801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801dc82:	4603      	mov	r3, r0
 801dc84:	681a      	ldr	r2, [r3, #0]
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	601a      	str	r2, [r3, #0]
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	3708      	adds	r7, #8
 801dc90:	46bd      	mov	sp, r7
 801dc92:	bd80      	pop	{r7, pc}

0801dc94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 801dc94:	b5b0      	push	{r4, r5, r7, lr}
 801dc96:	b084      	sub	sp, #16
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	60f8      	str	r0, [r7, #12]
 801dc9c:	60b9      	str	r1, [r7, #8]
 801dc9e:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801dca0:	68b8      	ldr	r0, [r7, #8]
 801dca2:	f7ff ff03 	bl	801daac <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801dca6:	4605      	mov	r5, r0
 801dca8:	200c      	movs	r0, #12
 801dcaa:	f7ff f9d1 	bl	801d050 <_Znwj>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	461c      	mov	r4, r3
 801dcb2:	4629      	mov	r1, r5
 801dcb4:	4620      	mov	r0, r4
 801dcb6:	f7ff fe03 	bl	801d8c0 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 801dcba:	68f8      	ldr	r0, [r7, #12]
 801dcbc:	f000 f863 	bl	801dd86 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	601c      	str	r4, [r3, #0]
 801dcc4:	bf00      	nop
 801dcc6:	3710      	adds	r7, #16
 801dcc8:	46bd      	mov	sp, r7
 801dcca:	bdb0      	pop	{r4, r5, r7, pc}

0801dccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b082      	sub	sp, #8
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 801dcd4:	6878      	ldr	r0, [r7, #4]
 801dcd6:	f000 f921 	bl	801df1c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801dcda:	4603      	mov	r3, r0
 801dcdc:	681b      	ldr	r3, [r3, #0]
	}
 801dcde:	4618      	mov	r0, r3
 801dce0:	3708      	adds	r7, #8
 801dce2:	46bd      	mov	sp, r7
 801dce4:	bd80      	pop	{r7, pc}

0801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801dce6:	b480      	push	{r7}
 801dce8:	b083      	sub	sp, #12
 801dcea:	af00      	add	r7, sp, #0
 801dcec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	370c      	adds	r7, #12
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcfa:	4770      	bx	lr

0801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801dcfc:	b480      	push	{r7}
 801dcfe:	b083      	sub	sp, #12
 801dd00:	af00      	add	r7, sp, #0
 801dd02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	4618      	mov	r0, r3
 801dd08:	370c      	adds	r7, #12
 801dd0a:	46bd      	mov	sp, r7
 801dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd10:	4770      	bx	lr

0801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801dd12:	b480      	push	{r7}
 801dd14:	b083      	sub	sp, #12
 801dd16:	af00      	add	r7, sp, #0
 801dd18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	370c      	adds	r7, #12
 801dd20:	46bd      	mov	sp, r7
 801dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd26:	4770      	bx	lr

0801dd28 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 801dd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd2a:	b089      	sub	sp, #36	; 0x24
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	60f8      	str	r0, [r7, #12]
 801dd30:	60b9      	str	r1, [r7, #8]
 801dd32:	607a      	str	r2, [r7, #4]
 801dd34:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 801dd36:	68b8      	ldr	r0, [r7, #8]
 801dd38:	f7ff ffd5 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801dd3c:	4604      	mov	r4, r0
 801dd3e:	6878      	ldr	r0, [r7, #4]
 801dd40:	f7ff ffdc 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801dd44:	4605      	mov	r5, r0
 801dd46:	6838      	ldr	r0, [r7, #0]
 801dd48:	f7ff ffe3 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	f107 0010 	add.w	r0, r7, #16
 801dd52:	462a      	mov	r2, r5
 801dd54:	4621      	mov	r1, r4
 801dd56:	f000 f8ed 	bl	801df34 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 801dd5a:	f107 0310 	add.w	r3, r7, #16
 801dd5e:	4632      	mov	r2, r6
 801dd60:	4619      	mov	r1, r3
 801dd62:	68f8      	ldr	r0, [r7, #12]
 801dd64:	f000 f902 	bl	801df6c <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 801dd68:	3724      	adds	r7, #36	; 0x24
 801dd6a:	46bd      	mov	sp, r7
 801dd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dd6e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 801dd6e:	b580      	push	{r7, lr}
 801dd70:	b082      	sub	sp, #8
 801dd72:	af00      	add	r7, sp, #0
 801dd74:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801dd76:	6878      	ldr	r0, [r7, #4]
 801dd78:	f7ff fc4b 	bl	801d612 <_ZNSt9_Any_data9_M_accessEv>
 801dd7c:	4603      	mov	r3, r0
 801dd7e:	4618      	mov	r0, r3
 801dd80:	3708      	adds	r7, #8
 801dd82:	46bd      	mov	sp, r7
 801dd84:	bd80      	pop	{r7, pc}

0801dd86 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 801dd86:	b580      	push	{r7, lr}
 801dd88:	b082      	sub	sp, #8
 801dd8a:	af00      	add	r7, sp, #0
 801dd8c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801dd8e:	6878      	ldr	r0, [r7, #4]
 801dd90:	f7ff fc3f 	bl	801d612 <_ZNSt9_Any_data9_M_accessEv>
 801dd94:	4603      	mov	r3, r0
 801dd96:	4618      	mov	r0, r3
 801dd98:	3708      	adds	r7, #8
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	bd80      	pop	{r7, pc}

0801dd9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 801dd9e:	b5b0      	push	{r4, r5, r7, lr}
 801dda0:	b084      	sub	sp, #16
 801dda2:	af00      	add	r7, sp, #0
 801dda4:	60f8      	str	r0, [r7, #12]
 801dda6:	60b9      	str	r1, [r7, #8]
 801dda8:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 801ddaa:	68b8      	ldr	r0, [r7, #8]
 801ddac:	f000 f926 	bl	801dffc <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801ddb0:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 801ddb2:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 801ddb4:	200c      	movs	r0, #12
 801ddb6:	f7ff f94b 	bl	801d050 <_Znwj>
 801ddba:	4603      	mov	r3, r0
 801ddbc:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 801ddbe:	4623      	mov	r3, r4
 801ddc0:	462a      	mov	r2, r5
 801ddc2:	ca07      	ldmia	r2, {r0, r1, r2}
 801ddc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ddc8:	68f8      	ldr	r0, [r7, #12]
 801ddca:	f7ff ffdc 	bl	801dd86 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	601c      	str	r4, [r3, #0]
	}
 801ddd2:	bf00      	nop
 801ddd4:	3710      	adds	r7, #16
 801ddd6:	46bd      	mov	sp, r7
 801ddd8:	bdb0      	pop	{r4, r5, r7, pc}

0801ddda <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 801ddda:	b580      	push	{r7, lr}
 801dddc:	b082      	sub	sp, #8
 801ddde:	af00      	add	r7, sp, #0
 801dde0:	6078      	str	r0, [r7, #4]
 801dde2:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 801dde4:	6878      	ldr	r0, [r7, #4]
 801dde6:	f7ff ffce 	bl	801dd86 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801ddea:	4603      	mov	r3, r0
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d003      	beq.n	801ddfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 801ddf2:	210c      	movs	r1, #12
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f002 f977 	bl	80200e8 <_ZdlPvj>
	}
 801ddfa:	bf00      	nop
 801ddfc:	3708      	adds	r7, #8
 801ddfe:	46bd      	mov	sp, r7
 801de00:	bd80      	pop	{r7, pc}

0801de02 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801de02:	b5b0      	push	{r4, r5, r7, lr}
 801de04:	b084      	sub	sp, #16
 801de06:	af00      	add	r7, sp, #0
 801de08:	60f8      	str	r0, [r7, #12]
 801de0a:	60b9      	str	r1, [r7, #8]
 801de0c:	607a      	str	r2, [r7, #4]
 801de0e:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801de10:	6878      	ldr	r0, [r7, #4]
 801de12:	f7ff fdb5 	bl	801d980 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801de16:	4604      	mov	r4, r0
 801de18:	6838      	ldr	r0, [r7, #0]
 801de1a:	f7ff fdbc 	bl	801d996 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801de1e:	4605      	mov	r5, r0
 801de20:	6a38      	ldr	r0, [r7, #32]
 801de22:	f7ff fdc3 	bl	801d9ac <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801de26:	4603      	mov	r3, r0
 801de28:	462a      	mov	r2, r5
 801de2a:	4621      	mov	r1, r4
 801de2c:	68f8      	ldr	r0, [r7, #12]
 801de2e:	f000 f8f1 	bl	801e014 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 801de32:	68fc      	ldr	r4, [r7, #12]
 801de34:	68b8      	ldr	r0, [r7, #8]
 801de36:	f7ff fd98 	bl	801d96a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801de3a:	4603      	mov	r3, r0
 801de3c:	4619      	mov	r1, r3
 801de3e:	4620      	mov	r0, r4
 801de40:	f7ff ff17 	bl	801dc72 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	4618      	mov	r0, r3
 801de48:	3710      	adds	r7, #16
 801de4a:	46bd      	mov	sp, r7
 801de4c:	bdb0      	pop	{r4, r5, r7, pc}

0801de4e <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801de4e:	b480      	push	{r7}
 801de50:	b083      	sub	sp, #12
 801de52:	af00      	add	r7, sp, #0
 801de54:	6078      	str	r0, [r7, #4]
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	4618      	mov	r0, r3
 801de5a:	370c      	adds	r7, #12
 801de5c:	46bd      	mov	sp, r7
 801de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de62:	4770      	bx	lr

0801de64 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801de64:	b480      	push	{r7}
 801de66:	b083      	sub	sp, #12
 801de68:	af00      	add	r7, sp, #0
 801de6a:	6078      	str	r0, [r7, #4]
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	4618      	mov	r0, r3
 801de70:	370c      	adds	r7, #12
 801de72:	46bd      	mov	sp, r7
 801de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de78:	4770      	bx	lr

0801de7a <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801de7a:	b480      	push	{r7}
 801de7c:	b083      	sub	sp, #12
 801de7e:	af00      	add	r7, sp, #0
 801de80:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	4618      	mov	r0, r3
 801de86:	370c      	adds	r7, #12
 801de88:	46bd      	mov	sp, r7
 801de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8e:	4770      	bx	lr

0801de90 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801de90:	b580      	push	{r7, lr}
 801de92:	b082      	sub	sp, #8
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
 801de98:	6878      	ldr	r0, [r7, #4]
 801de9a:	f000 f8d0 	bl	801e03e <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 801de9e:	4603      	mov	r3, r0
 801dea0:	4618      	mov	r0, r3
 801dea2:	3708      	adds	r7, #8
 801dea4:	46bd      	mov	sp, r7
 801dea6:	bd80      	pop	{r7, pc}

0801dea8 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801dea8:	b480      	push	{r7}
 801deaa:	b083      	sub	sp, #12
 801deac:	af00      	add	r7, sp, #0
 801deae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	4618      	mov	r0, r3
 801deb4:	370c      	adds	r7, #12
 801deb6:	46bd      	mov	sp, r7
 801deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801debc:	4770      	bx	lr

0801debe <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801debe:	b580      	push	{r7, lr}
 801dec0:	b082      	sub	sp, #8
 801dec2:	af00      	add	r7, sp, #0
 801dec4:	6078      	str	r0, [r7, #4]
 801dec6:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801dec8:	6838      	ldr	r0, [r7, #0]
 801deca:	f000 f8c3 	bl	801e054 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 801dece:	4603      	mov	r3, r0
 801ded0:	4618      	mov	r0, r3
 801ded2:	f000 f8ca 	bl	801e06a <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 801ded6:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801ded8:	4619      	mov	r1, r3
 801deda:	6878      	ldr	r0, [r7, #4]
 801dedc:	f000 f8e7 	bl	801e0ae <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 801dee0:	6838      	ldr	r0, [r7, #0]
 801dee2:	f000 f8cd 	bl	801e080 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801dee6:	4603      	mov	r3, r0
 801dee8:	4618      	mov	r0, r3
 801deea:	f000 f8d5 	bl	801e098 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801deee:	4603      	mov	r3, r0
 801def0:	4619      	mov	r1, r3
 801def2:	6878      	ldr	r0, [r7, #4]
 801def4:	f000 f8f1 	bl	801e0da <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	4618      	mov	r0, r3
 801defc:	3708      	adds	r7, #8
 801defe:	46bd      	mov	sp, r7
 801df00:	bd80      	pop	{r7, pc}

0801df02 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801df02:	b580      	push	{r7, lr}
 801df04:	b082      	sub	sp, #8
 801df06:	af00      	add	r7, sp, #0
 801df08:	6078      	str	r0, [r7, #4]
 801df0a:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801df0c:	6838      	ldr	r0, [r7, #0]
 801df0e:	f7ff ffcb 	bl	801dea8 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	4618      	mov	r0, r3
 801df16:	3708      	adds	r7, #8
 801df18:	46bd      	mov	sp, r7
 801df1a:	bd80      	pop	{r7, pc}

0801df1c <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 801df1c:	b580      	push	{r7, lr}
 801df1e:	b082      	sub	sp, #8
 801df20:	af00      	add	r7, sp, #0
 801df22:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801df24:	6878      	ldr	r0, [r7, #4]
 801df26:	f7ff fb7f 	bl	801d628 <_ZNKSt9_Any_data9_M_accessEv>
 801df2a:	4603      	mov	r3, r0
 801df2c:	4618      	mov	r0, r3
 801df2e:	3708      	adds	r7, #8
 801df30:	46bd      	mov	sp, r7
 801df32:	bd80      	pop	{r7, pc}

0801df34 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 801df34:	b5b0      	push	{r4, r5, r7, lr}
 801df36:	b084      	sub	sp, #16
 801df38:	af00      	add	r7, sp, #0
 801df3a:	60f8      	str	r0, [r7, #12]
 801df3c:	60b9      	str	r1, [r7, #8]
 801df3e:	607a      	str	r2, [r7, #4]
 801df40:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801df42:	68b8      	ldr	r0, [r7, #8]
 801df44:	f7ff fecf 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801df48:	4604      	mov	r4, r0
 801df4a:	6878      	ldr	r0, [r7, #4]
 801df4c:	f7ff fed6 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801df50:	4605      	mov	r5, r0
 801df52:	6838      	ldr	r0, [r7, #0]
 801df54:	f7ff fedd 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801df58:	4603      	mov	r3, r0
 801df5a:	462a      	mov	r2, r5
 801df5c:	4621      	mov	r1, r4
 801df5e:	68f8      	ldr	r0, [r7, #12]
 801df60:	f000 f8c8 	bl	801e0f4 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 801df64:	68f8      	ldr	r0, [r7, #12]
 801df66:	3710      	adds	r7, #16
 801df68:	46bd      	mov	sp, r7
 801df6a:	bdb0      	pop	{r4, r5, r7, pc}

0801df6c <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 801df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df70:	b08a      	sub	sp, #40	; 0x28
 801df72:	af02      	add	r7, sp, #8
 801df74:	60f8      	str	r0, [r7, #12]
 801df76:	60b9      	str	r1, [r7, #8]
 801df78:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 801df7a:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	3308      	adds	r3, #8
 801df80:	4618      	mov	r0, r3
 801df82:	f000 f8d5 	bl	801e130 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801df86:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801df88:	f107 0310 	add.w	r3, r7, #16
 801df8c:	68ba      	ldr	r2, [r7, #8]
 801df8e:	4618      	mov	r0, r3
 801df90:	f000 f8db 	bl	801e14a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 801df94:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801df96:	68fb      	ldr	r3, [r7, #12]
 801df98:	3308      	adds	r3, #8
 801df9a:	4618      	mov	r0, r3
 801df9c:	f000 f8e3 	bl	801e166 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801dfa0:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801dfa2:	f107 0314 	add.w	r3, r7, #20
 801dfa6:	68ba      	ldr	r2, [r7, #8]
 801dfa8:	4618      	mov	r0, r3
 801dfaa:	f000 f8e8 	bl	801e17e <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 801dfae:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	3308      	adds	r3, #8
 801dfb4:	4618      	mov	r0, r3
 801dfb6:	f000 f8f4 	bl	801e1a2 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801dfba:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801dfbc:	f107 0318 	add.w	r3, r7, #24
 801dfc0:	68ba      	ldr	r2, [r7, #8]
 801dfc2:	4618      	mov	r0, r3
 801dfc4:	f000 f8f9 	bl	801e1ba <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 801dfc8:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	3308      	adds	r3, #8
 801dfce:	4618      	mov	r0, r3
 801dfd0:	f000 f905 	bl	801e1de <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801dfd4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801dfd6:	f107 031c 	add.w	r3, r7, #28
 801dfda:	68ba      	ldr	r2, [r7, #8]
 801dfdc:	4618      	mov	r0, r3
 801dfde:	f000 f90a 	bl	801e1f6 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 801dfe2:	4603      	mov	r3, r0
 801dfe4:	9300      	str	r3, [sp, #0]
 801dfe6:	4643      	mov	r3, r8
 801dfe8:	4632      	mov	r2, r6
 801dfea:	4629      	mov	r1, r5
 801dfec:	4620      	mov	r0, r4
 801dfee:	f000 f914 	bl	801e21a <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 801dff2:	bf00      	nop
	}
 801dff4:	3720      	adds	r7, #32
 801dff6:	46bd      	mov	sp, r7
 801dff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dffc <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b082      	sub	sp, #8
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801e004:	6878      	ldr	r0, [r7, #4]
 801e006:	f7ff fb0f 	bl	801d628 <_ZNKSt9_Any_data9_M_accessEv>
 801e00a:	4603      	mov	r3, r0
 801e00c:	4618      	mov	r0, r3
 801e00e:	3708      	adds	r7, #8
 801e010:	46bd      	mov	sp, r7
 801e012:	bd80      	pop	{r7, pc}

0801e014 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 801e014:	b580      	push	{r7, lr}
 801e016:	b084      	sub	sp, #16
 801e018:	af00      	add	r7, sp, #0
 801e01a:	60f8      	str	r0, [r7, #12]
 801e01c:	60b9      	str	r1, [r7, #8]
 801e01e:	607a      	str	r2, [r7, #4]
 801e020:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 801e022:	683a      	ldr	r2, [r7, #0]
 801e024:	6879      	ldr	r1, [r7, #4]
 801e026:	68f8      	ldr	r0, [r7, #12]
 801e028:	f000 f920 	bl	801e26c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 801e02c:	68b9      	ldr	r1, [r7, #8]
 801e02e:	68f8      	ldr	r0, [r7, #12]
 801e030:	f000 f92f 	bl	801e292 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	4618      	mov	r0, r3
 801e038:	3710      	adds	r7, #16
 801e03a:	46bd      	mov	sp, r7
 801e03c:	bd80      	pop	{r7, pc}

0801e03e <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801e03e:	b480      	push	{r7}
 801e040:	b083      	sub	sp, #12
 801e042:	af00      	add	r7, sp, #0
 801e044:	6078      	str	r0, [r7, #4]
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	4618      	mov	r0, r3
 801e04a:	370c      	adds	r7, #12
 801e04c:	46bd      	mov	sp, r7
 801e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e052:	4770      	bx	lr

0801e054 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801e054:	b480      	push	{r7}
 801e056:	b083      	sub	sp, #12
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	4618      	mov	r0, r3
 801e060:	370c      	adds	r7, #12
 801e062:	46bd      	mov	sp, r7
 801e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e068:	4770      	bx	lr

0801e06a <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801e06a:	b480      	push	{r7}
 801e06c:	b083      	sub	sp, #12
 801e06e:	af00      	add	r7, sp, #0
 801e070:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	4618      	mov	r0, r3
 801e076:	370c      	adds	r7, #12
 801e078:	46bd      	mov	sp, r7
 801e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e07e:	4770      	bx	lr

0801e080 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e080:	b580      	push	{r7, lr}
 801e082:	b082      	sub	sp, #8
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
 801e088:	6878      	ldr	r0, [r7, #4]
 801e08a:	f000 f90e 	bl	801e2aa <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 801e08e:	4603      	mov	r3, r0
 801e090:	4618      	mov	r0, r3
 801e092:	3708      	adds	r7, #8
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}

0801e098 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e098:	b480      	push	{r7}
 801e09a:	b083      	sub	sp, #12
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	370c      	adds	r7, #12
 801e0a6:	46bd      	mov	sp, r7
 801e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0ac:	4770      	bx	lr

0801e0ae <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801e0ae:	b580      	push	{r7, lr}
 801e0b0:	b082      	sub	sp, #8
 801e0b2:	af00      	add	r7, sp, #0
 801e0b4:	6078      	str	r0, [r7, #4]
 801e0b6:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801e0b8:	6838      	ldr	r0, [r7, #0]
 801e0ba:	f000 f901 	bl	801e2c0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 801e0be:	4603      	mov	r3, r0
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	f000 f909 	bl	801e2d8 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e0c6:	4603      	mov	r3, r0
 801e0c8:	4619      	mov	r1, r3
 801e0ca:	6878      	ldr	r0, [r7, #4]
 801e0cc:	f000 f90f 	bl	801e2ee <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	4618      	mov	r0, r3
 801e0d4:	3708      	adds	r7, #8
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	bd80      	pop	{r7, pc}

0801e0da <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e0da:	b580      	push	{r7, lr}
 801e0dc:	b082      	sub	sp, #8
 801e0de:	af00      	add	r7, sp, #0
 801e0e0:	6078      	str	r0, [r7, #4]
 801e0e2:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801e0e4:	6838      	ldr	r0, [r7, #0]
 801e0e6:	f7ff ffd7 	bl	801e098 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	4618      	mov	r0, r3
 801e0ee:	3708      	adds	r7, #8
 801e0f0:	46bd      	mov	sp, r7
 801e0f2:	bd80      	pop	{r7, pc}

0801e0f4 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801e0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0f6:	b085      	sub	sp, #20
 801e0f8:	af00      	add	r7, sp, #0
 801e0fa:	60f8      	str	r0, [r7, #12]
 801e0fc:	60b9      	str	r1, [r7, #8]
 801e0fe:	607a      	str	r2, [r7, #4]
 801e100:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801e102:	68fc      	ldr	r4, [r7, #12]
 801e104:	68b8      	ldr	r0, [r7, #8]
 801e106:	f7ff fdee 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e10a:	4605      	mov	r5, r0
 801e10c:	6878      	ldr	r0, [r7, #4]
 801e10e:	f7ff fdf5 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e112:	4606      	mov	r6, r0
 801e114:	6838      	ldr	r0, [r7, #0]
 801e116:	f7ff fdfc 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e11a:	4603      	mov	r3, r0
 801e11c:	4632      	mov	r2, r6
 801e11e:	4629      	mov	r1, r5
 801e120:	4620      	mov	r0, r4
 801e122:	f000 f8f1 	bl	801e308 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	4618      	mov	r0, r3
 801e12a:	3714      	adds	r7, #20
 801e12c:	46bd      	mov	sp, r7
 801e12e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e130 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e130:	b580      	push	{r7, lr}
 801e132:	b082      	sub	sp, #8
 801e134:	af00      	add	r7, sp, #0
 801e136:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	4618      	mov	r0, r3
 801e13c:	f000 f932 	bl	801e3a4 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801e140:	4603      	mov	r3, r0
 801e142:	4618      	mov	r0, r3
 801e144:	3708      	adds	r7, #8
 801e146:	46bd      	mov	sp, r7
 801e148:	bd80      	pop	{r7, pc}

0801e14a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 801e14a:	b580      	push	{r7, lr}
 801e14c:	b084      	sub	sp, #16
 801e14e:	af00      	add	r7, sp, #0
 801e150:	60f8      	str	r0, [r7, #12]
 801e152:	60b9      	str	r1, [r7, #8]
 801e154:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 801e156:	68b8      	ldr	r0, [r7, #8]
 801e158:	f000 f930 	bl	801e3bc <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801e15c:	4603      	mov	r3, r0
 801e15e:	4618      	mov	r0, r3
 801e160:	3710      	adds	r7, #16
 801e162:	46bd      	mov	sp, r7
 801e164:	bd80      	pop	{r7, pc}

0801e166 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e166:	b580      	push	{r7, lr}
 801e168:	b082      	sub	sp, #8
 801e16a:	af00      	add	r7, sp, #0
 801e16c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e16e:	6878      	ldr	r0, [r7, #4]
 801e170:	f000 f92f 	bl	801e3d2 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801e174:	4603      	mov	r3, r0
 801e176:	4618      	mov	r0, r3
 801e178:	3708      	adds	r7, #8
 801e17a:	46bd      	mov	sp, r7
 801e17c:	bd80      	pop	{r7, pc}

0801e17e <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801e17e:	b580      	push	{r7, lr}
 801e180:	b084      	sub	sp, #16
 801e182:	af00      	add	r7, sp, #0
 801e184:	60f8      	str	r0, [r7, #12]
 801e186:	60b9      	str	r1, [r7, #8]
 801e188:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801e18a:	6878      	ldr	r0, [r7, #4]
 801e18c:	f000 f92d 	bl	801e3ea <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e190:	4603      	mov	r3, r0
 801e192:	4618      	mov	r0, r3
 801e194:	f000 f934 	bl	801e400 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801e198:	4603      	mov	r3, r0
	}
 801e19a:	4618      	mov	r0, r3
 801e19c:	3710      	adds	r7, #16
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	bd80      	pop	{r7, pc}

0801e1a2 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e1a2:	b580      	push	{r7, lr}
 801e1a4:	b082      	sub	sp, #8
 801e1a6:	af00      	add	r7, sp, #0
 801e1a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e1aa:	6878      	ldr	r0, [r7, #4]
 801e1ac:	f000 f938 	bl	801e420 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801e1b0:	4603      	mov	r3, r0
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	3708      	adds	r7, #8
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	bd80      	pop	{r7, pc}

0801e1ba <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801e1ba:	b580      	push	{r7, lr}
 801e1bc:	b084      	sub	sp, #16
 801e1be:	af00      	add	r7, sp, #0
 801e1c0:	60f8      	str	r0, [r7, #12]
 801e1c2:	60b9      	str	r1, [r7, #8]
 801e1c4:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801e1c6:	6878      	ldr	r0, [r7, #4]
 801e1c8:	f000 f90f 	bl	801e3ea <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e1cc:	4603      	mov	r3, r0
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	f000 f932 	bl	801e438 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801e1d4:	4603      	mov	r3, r0
	}
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	3710      	adds	r7, #16
 801e1da:	46bd      	mov	sp, r7
 801e1dc:	bd80      	pop	{r7, pc}

0801e1de <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801e1de:	b580      	push	{r7, lr}
 801e1e0:	b082      	sub	sp, #8
 801e1e2:	af00      	add	r7, sp, #0
 801e1e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e1e6:	6878      	ldr	r0, [r7, #4]
 801e1e8:	f000 f936 	bl	801e458 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	3708      	adds	r7, #8
 801e1f2:	46bd      	mov	sp, r7
 801e1f4:	bd80      	pop	{r7, pc}

0801e1f6 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801e1f6:	b580      	push	{r7, lr}
 801e1f8:	b084      	sub	sp, #16
 801e1fa:	af00      	add	r7, sp, #0
 801e1fc:	60f8      	str	r0, [r7, #12]
 801e1fe:	60b9      	str	r1, [r7, #8]
 801e200:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801e202:	6878      	ldr	r0, [r7, #4]
 801e204:	f000 f8f1 	bl	801e3ea <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e208:	4603      	mov	r3, r0
 801e20a:	4618      	mov	r0, r3
 801e20c:	f000 f930 	bl	801e470 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801e210:	4603      	mov	r3, r0
	}
 801e212:	4618      	mov	r0, r3
 801e214:	3710      	adds	r7, #16
 801e216:	46bd      	mov	sp, r7
 801e218:	bd80      	pop	{r7, pc}

0801e21a <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 801e21a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e21e:	b089      	sub	sp, #36	; 0x24
 801e220:	af02      	add	r7, sp, #8
 801e222:	60f8      	str	r0, [r7, #12]
 801e224:	60b9      	str	r1, [r7, #8]
 801e226:	607a      	str	r2, [r7, #4]
 801e228:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801e22a:	68f8      	ldr	r0, [r7, #12]
 801e22c:	f000 f930 	bl	801e490 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801e230:	4605      	mov	r5, r0
 801e232:	68b8      	ldr	r0, [r7, #8]
 801e234:	f000 f8c2 	bl	801e3bc <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801e238:	4606      	mov	r6, r0
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f7ff fd53 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e240:	4680      	mov	r8, r0
 801e242:	6838      	ldr	r0, [r7, #0]
 801e244:	f7ff fd5a 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e248:	4604      	mov	r4, r0
 801e24a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e24c:	f7ff fd61 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e250:	4603      	mov	r3, r0
 801e252:	9301      	str	r3, [sp, #4]
 801e254:	9400      	str	r4, [sp, #0]
 801e256:	4643      	mov	r3, r8
 801e258:	4632      	mov	r2, r6
 801e25a:	4629      	mov	r1, r5
 801e25c:	4648      	mov	r0, r9
 801e25e:	f000 f922 	bl	801e4a6 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 801e262:	bf00      	nop
    }
 801e264:	371c      	adds	r7, #28
 801e266:	46bd      	mov	sp, r7
 801e268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e26c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 801e26c:	b580      	push	{r7, lr}
 801e26e:	b084      	sub	sp, #16
 801e270:	af00      	add	r7, sp, #0
 801e272:	60f8      	str	r0, [r7, #12]
 801e274:	60b9      	str	r1, [r7, #8]
 801e276:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 801e278:	6879      	ldr	r1, [r7, #4]
 801e27a:	68f8      	ldr	r0, [r7, #12]
 801e27c:	f000 f94d 	bl	801e51a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 801e280:	68b9      	ldr	r1, [r7, #8]
 801e282:	68f8      	ldr	r0, [r7, #12]
 801e284:	f000 f957 	bl	801e536 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	4618      	mov	r0, r3
 801e28c:	3710      	adds	r7, #16
 801e28e:	46bd      	mov	sp, r7
 801e290:	bd80      	pop	{r7, pc}

0801e292 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801e292:	b480      	push	{r7}
 801e294:	b083      	sub	sp, #12
 801e296:	af00      	add	r7, sp, #0
 801e298:	6078      	str	r0, [r7, #4]
 801e29a:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	4618      	mov	r0, r3
 801e2a0:	370c      	adds	r7, #12
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2a8:	4770      	bx	lr

0801e2aa <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801e2aa:	b480      	push	{r7}
 801e2ac:	b083      	sub	sp, #12
 801e2ae:	af00      	add	r7, sp, #0
 801e2b0:	6078      	str	r0, [r7, #4]
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	370c      	adds	r7, #12
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2be:	4770      	bx	lr

0801e2c0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	b082      	sub	sp, #8
 801e2c4:	af00      	add	r7, sp, #0
 801e2c6:	6078      	str	r0, [r7, #4]
 801e2c8:	6878      	ldr	r0, [r7, #4]
 801e2ca:	f000 f940 	bl	801e54e <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 801e2ce:	4603      	mov	r3, r0
 801e2d0:	4618      	mov	r0, r3
 801e2d2:	3708      	adds	r7, #8
 801e2d4:	46bd      	mov	sp, r7
 801e2d6:	bd80      	pop	{r7, pc}

0801e2d8 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e2d8:	b480      	push	{r7}
 801e2da:	b083      	sub	sp, #12
 801e2dc:	af00      	add	r7, sp, #0
 801e2de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	4618      	mov	r0, r3
 801e2e4:	370c      	adds	r7, #12
 801e2e6:	46bd      	mov	sp, r7
 801e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2ec:	4770      	bx	lr

0801e2ee <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e2ee:	b580      	push	{r7, lr}
 801e2f0:	b082      	sub	sp, #8
 801e2f2:	af00      	add	r7, sp, #0
 801e2f4:	6078      	str	r0, [r7, #4]
 801e2f6:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801e2f8:	6838      	ldr	r0, [r7, #0]
 801e2fa:	f7ff ffed 	bl	801e2d8 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	4618      	mov	r0, r3
 801e302:	3708      	adds	r7, #8
 801e304:	46bd      	mov	sp, r7
 801e306:	bd80      	pop	{r7, pc}

0801e308 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801e308:	b5b0      	push	{r4, r5, r7, lr}
 801e30a:	b084      	sub	sp, #16
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	60f8      	str	r0, [r7, #12]
 801e310:	60b9      	str	r1, [r7, #8]
 801e312:	607a      	str	r2, [r7, #4]
 801e314:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801e316:	68fc      	ldr	r4, [r7, #12]
 801e318:	6878      	ldr	r0, [r7, #4]
 801e31a:	f7ff fcef 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e31e:	4605      	mov	r5, r0
 801e320:	6838      	ldr	r0, [r7, #0]
 801e322:	f7ff fcf6 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e326:	4603      	mov	r3, r0
 801e328:	461a      	mov	r2, r3
 801e32a:	4629      	mov	r1, r5
 801e32c:	4620      	mov	r0, r4
 801e32e:	f000 f919 	bl	801e564 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	f103 0408 	add.w	r4, r3, #8
 801e338:	68b8      	ldr	r0, [r7, #8]
 801e33a:	f7ff fcd4 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e33e:	4603      	mov	r3, r0
 801e340:	4619      	mov	r1, r3
 801e342:	4620      	mov	r0, r4
 801e344:	f000 f81e 	bl	801e384 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	4618      	mov	r0, r3
 801e34c:	3710      	adds	r7, #16
 801e34e:	46bd      	mov	sp, r7
 801e350:	bdb0      	pop	{r4, r5, r7, pc}

0801e352 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e352:	b580      	push	{r7, lr}
 801e354:	b082      	sub	sp, #8
 801e356:	af00      	add	r7, sp, #0
 801e358:	6078      	str	r0, [r7, #4]
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	3308      	adds	r3, #8
 801e35e:	4618      	mov	r0, r3
 801e360:	f000 f91e 	bl	801e5a0 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 801e364:	4603      	mov	r3, r0
 801e366:	4618      	mov	r0, r3
 801e368:	3708      	adds	r7, #8
 801e36a:	46bd      	mov	sp, r7
 801e36c:	bd80      	pop	{r7, pc}

0801e36e <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e36e:	b480      	push	{r7}
 801e370:	b083      	sub	sp, #12
 801e372:	af00      	add	r7, sp, #0
 801e374:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	4618      	mov	r0, r3
 801e37a:	370c      	adds	r7, #12
 801e37c:	46bd      	mov	sp, r7
 801e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e382:	4770      	bx	lr

0801e384 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e384:	b580      	push	{r7, lr}
 801e386:	b082      	sub	sp, #8
 801e388:	af00      	add	r7, sp, #0
 801e38a:	6078      	str	r0, [r7, #4]
 801e38c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801e38e:	6838      	ldr	r0, [r7, #0]
 801e390:	f7ff fca9 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e394:	4602      	mov	r2, r0
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	601a      	str	r2, [r3, #0]
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	4618      	mov	r0, r3
 801e39e:	3708      	adds	r7, #8
 801e3a0:	46bd      	mov	sp, r7
 801e3a2:	bd80      	pop	{r7, pc}

0801e3a4 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e3a4:	b580      	push	{r7, lr}
 801e3a6:	b082      	sub	sp, #8
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e3ac:	6878      	ldr	r0, [r7, #4]
 801e3ae:	f7ff fc31 	bl	801dc14 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801e3b2:	4603      	mov	r3, r0
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	3708      	adds	r7, #8
 801e3b8:	46bd      	mov	sp, r7
 801e3ba:	bd80      	pop	{r7, pc}

0801e3bc <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e3bc:	b480      	push	{r7}
 801e3be:	b083      	sub	sp, #12
 801e3c0:	af00      	add	r7, sp, #0
 801e3c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	370c      	adds	r7, #12
 801e3ca:	46bd      	mov	sp, r7
 801e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d0:	4770      	bx	lr

0801e3d2 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e3d2:	b580      	push	{r7, lr}
 801e3d4:	b082      	sub	sp, #8
 801e3d6:	af00      	add	r7, sp, #0
 801e3d8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e3da:	6878      	ldr	r0, [r7, #4]
 801e3dc:	f7ff fd58 	bl	801de90 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801e3e0:	4603      	mov	r3, r0
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	3708      	adds	r7, #8
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	bd80      	pop	{r7, pc}

0801e3ea <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801e3ea:	b480      	push	{r7}
 801e3ec:	b083      	sub	sp, #12
 801e3ee:	af00      	add	r7, sp, #0
 801e3f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	4618      	mov	r0, r3
 801e3f6:	370c      	adds	r7, #12
 801e3f8:	46bd      	mov	sp, r7
 801e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3fe:	4770      	bx	lr

0801e400 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801e400:	b580      	push	{r7, lr}
 801e402:	b082      	sub	sp, #8
 801e404:	af00      	add	r7, sp, #0
 801e406:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801e408:	6878      	ldr	r0, [r7, #4]
 801e40a:	f000 f8fe 	bl	801e60a <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801e40e:	4603      	mov	r3, r0
 801e410:	4618      	mov	r0, r3
 801e412:	f7ff ffac 	bl	801e36e <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e416:	4603      	mov	r3, r0
    }
 801e418:	4618      	mov	r0, r3
 801e41a:	3708      	adds	r7, #8
 801e41c:	46bd      	mov	sp, r7
 801e41e:	bd80      	pop	{r7, pc}

0801e420 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e420:	b580      	push	{r7, lr}
 801e422:	b082      	sub	sp, #8
 801e424:	af00      	add	r7, sp, #0
 801e426:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e428:	6878      	ldr	r0, [r7, #4]
 801e42a:	f7ff fe29 	bl	801e080 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801e42e:	4603      	mov	r3, r0
 801e430:	4618      	mov	r0, r3
 801e432:	3708      	adds	r7, #8
 801e434:	46bd      	mov	sp, r7
 801e436:	bd80      	pop	{r7, pc}

0801e438 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801e438:	b580      	push	{r7, lr}
 801e43a:	b082      	sub	sp, #8
 801e43c:	af00      	add	r7, sp, #0
 801e43e:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801e440:	6878      	ldr	r0, [r7, #4]
 801e442:	f000 f8ef 	bl	801e624 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801e446:	4603      	mov	r3, r0
 801e448:	4618      	mov	r0, r3
 801e44a:	f000 f8c3 	bl	801e5d4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 801e44e:	4603      	mov	r3, r0
    }
 801e450:	4618      	mov	r0, r3
 801e452:	3708      	adds	r7, #8
 801e454:	46bd      	mov	sp, r7
 801e456:	bd80      	pop	{r7, pc}

0801e458 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e458:	b580      	push	{r7, lr}
 801e45a:	b082      	sub	sp, #8
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e460:	6878      	ldr	r0, [r7, #4]
 801e462:	f7ff ff2d 	bl	801e2c0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 801e466:	4603      	mov	r3, r0
 801e468:	4618      	mov	r0, r3
 801e46a:	3708      	adds	r7, #8
 801e46c:	46bd      	mov	sp, r7
 801e46e:	bd80      	pop	{r7, pc}

0801e470 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801e470:	b580      	push	{r7, lr}
 801e472:	b082      	sub	sp, #8
 801e474:	af00      	add	r7, sp, #0
 801e476:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801e478:	6878      	ldr	r0, [r7, #4]
 801e47a:	f000 f8e0 	bl	801e63e <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801e47e:	4603      	mov	r3, r0
 801e480:	4618      	mov	r0, r3
 801e482:	f000 f8e9 	bl	801e658 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 801e486:	4603      	mov	r3, r0
    }
 801e488:	4618      	mov	r0, r3
 801e48a:	3708      	adds	r7, #8
 801e48c:	46bd      	mov	sp, r7
 801e48e:	bd80      	pop	{r7, pc}

0801e490 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e490:	b480      	push	{r7}
 801e492:	b083      	sub	sp, #12
 801e494:	af00      	add	r7, sp, #0
 801e496:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	4618      	mov	r0, r3
 801e49c:	370c      	adds	r7, #12
 801e49e:	46bd      	mov	sp, r7
 801e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a4:	4770      	bx	lr

0801e4a6 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 801e4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4a8:	b087      	sub	sp, #28
 801e4aa:	af00      	add	r7, sp, #0
 801e4ac:	7538      	strb	r0, [r7, #20]
 801e4ae:	6139      	str	r1, [r7, #16]
 801e4b0:	60fa      	str	r2, [r7, #12]
 801e4b2:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 801e4b4:	68f8      	ldr	r0, [r7, #12]
 801e4b6:	f7ff ff81 	bl	801e3bc <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	693a      	ldr	r2, [r7, #16]
 801e4c0:	6852      	ldr	r2, [r2, #4]
 801e4c2:	1052      	asrs	r2, r2, #1
 801e4c4:	189d      	adds	r5, r3, r2
 801e4c6:	693a      	ldr	r2, [r7, #16]
 801e4c8:	6852      	ldr	r2, [r2, #4]
 801e4ca:	f002 0201 	and.w	r2, r2, #1
 801e4ce:	2a00      	cmp	r2, #0
 801e4d0:	d102      	bne.n	801e4d8 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 801e4d2:	693b      	ldr	r3, [r7, #16]
 801e4d4:	681c      	ldr	r4, [r3, #0]
 801e4d6:	e008      	b.n	801e4ea <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 801e4d8:	693a      	ldr	r2, [r7, #16]
 801e4da:	6852      	ldr	r2, [r2, #4]
 801e4dc:	1052      	asrs	r2, r2, #1
 801e4de:	4413      	add	r3, r2
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	693a      	ldr	r2, [r7, #16]
 801e4e4:	6812      	ldr	r2, [r2, #0]
 801e4e6:	4413      	add	r3, r2
 801e4e8:	681c      	ldr	r4, [r3, #0]
 801e4ea:	68b8      	ldr	r0, [r7, #8]
 801e4ec:	f7ff fbfb 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	781e      	ldrb	r6, [r3, #0]
 801e4f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e4f6:	f7ff fc01 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e4fa:	4603      	mov	r3, r0
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	607b      	str	r3, [r7, #4]
 801e500:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e502:	f7ff fc06 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e506:	4603      	mov	r3, r0
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	687a      	ldr	r2, [r7, #4]
 801e50c:	4631      	mov	r1, r6
 801e50e:	4628      	mov	r0, r5
 801e510:	47a0      	blx	r4
 801e512:	bf00      	nop
    }
 801e514:	371c      	adds	r7, #28
 801e516:	46bd      	mov	sp, r7
 801e518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e51a <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 801e51a:	b580      	push	{r7, lr}
 801e51c:	b082      	sub	sp, #8
 801e51e:	af00      	add	r7, sp, #0
 801e520:	6078      	str	r0, [r7, #4]
 801e522:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801e524:	6839      	ldr	r1, [r7, #0]
 801e526:	6878      	ldr	r0, [r7, #4]
 801e528:	f000 f8a1 	bl	801e66e <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	4618      	mov	r0, r3
 801e530:	3708      	adds	r7, #8
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}

0801e536 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801e536:	b480      	push	{r7}
 801e538:	b083      	sub	sp, #12
 801e53a:	af00      	add	r7, sp, #0
 801e53c:	6078      	str	r0, [r7, #4]
 801e53e:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	4618      	mov	r0, r3
 801e544:	370c      	adds	r7, #12
 801e546:	46bd      	mov	sp, r7
 801e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e54c:	4770      	bx	lr

0801e54e <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801e54e:	b480      	push	{r7}
 801e550:	b083      	sub	sp, #12
 801e552:	af00      	add	r7, sp, #0
 801e554:	6078      	str	r0, [r7, #4]
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	4618      	mov	r0, r3
 801e55a:	370c      	adds	r7, #12
 801e55c:	46bd      	mov	sp, r7
 801e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e562:	4770      	bx	lr

0801e564 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801e564:	b590      	push	{r4, r7, lr}
 801e566:	b085      	sub	sp, #20
 801e568:	af00      	add	r7, sp, #0
 801e56a:	60f8      	str	r0, [r7, #12]
 801e56c:	60b9      	str	r1, [r7, #8]
 801e56e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801e570:	68fc      	ldr	r4, [r7, #12]
 801e572:	6878      	ldr	r0, [r7, #4]
 801e574:	f7ff fbcd 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e578:	4603      	mov	r3, r0
 801e57a:	4619      	mov	r1, r3
 801e57c:	4620      	mov	r0, r4
 801e57e:	f000 f882 	bl	801e686 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	1d1c      	adds	r4, r3, #4
 801e586:	68b8      	ldr	r0, [r7, #8]
 801e588:	f7ff fbb8 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e58c:	4603      	mov	r3, r0
 801e58e:	4619      	mov	r1, r3
 801e590:	4620      	mov	r0, r4
 801e592:	f000 f82a 	bl	801e5ea <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 801e596:	68fb      	ldr	r3, [r7, #12]
 801e598:	4618      	mov	r0, r3
 801e59a:	3714      	adds	r7, #20
 801e59c:	46bd      	mov	sp, r7
 801e59e:	bd90      	pop	{r4, r7, pc}

0801e5a0 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801e5a0:	b480      	push	{r7}
 801e5a2:	b083      	sub	sp, #12
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	6078      	str	r0, [r7, #4]
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	4618      	mov	r0, r3
 801e5ae:	370c      	adds	r7, #12
 801e5b0:	46bd      	mov	sp, r7
 801e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5b6:	4770      	bx	lr

0801e5b8 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	b082      	sub	sp, #8
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	6078      	str	r0, [r7, #4]
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	3304      	adds	r3, #4
 801e5c4:	4618      	mov	r0, r3
 801e5c6:	f000 f871 	bl	801e6ac <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 801e5ca:	4603      	mov	r3, r0
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	3708      	adds	r7, #8
 801e5d0:	46bd      	mov	sp, r7
 801e5d2:	bd80      	pop	{r7, pc}

0801e5d4 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e5d4:	b480      	push	{r7}
 801e5d6:	b083      	sub	sp, #12
 801e5d8:	af00      	add	r7, sp, #0
 801e5da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	4618      	mov	r0, r3
 801e5e0:	370c      	adds	r7, #12
 801e5e2:	46bd      	mov	sp, r7
 801e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5e8:	4770      	bx	lr

0801e5ea <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e5ea:	b580      	push	{r7, lr}
 801e5ec:	b082      	sub	sp, #8
 801e5ee:	af00      	add	r7, sp, #0
 801e5f0:	6078      	str	r0, [r7, #4]
 801e5f2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801e5f4:	6838      	ldr	r0, [r7, #0]
 801e5f6:	f7ff fb81 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e5fa:	4602      	mov	r2, r0
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	601a      	str	r2, [r3, #0]
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	4618      	mov	r0, r3
 801e604:	3708      	adds	r7, #8
 801e606:	46bd      	mov	sp, r7
 801e608:	bd80      	pop	{r7, pc}

0801e60a <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801e60a:	b580      	push	{r7, lr}
 801e60c:	b082      	sub	sp, #8
 801e60e:	af00      	add	r7, sp, #0
 801e610:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	4618      	mov	r0, r3
 801e616:	f000 f872 	bl	801e6fe <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801e61a:	4603      	mov	r3, r0
 801e61c:	4618      	mov	r0, r3
 801e61e:	3708      	adds	r7, #8
 801e620:	46bd      	mov	sp, r7
 801e622:	bd80      	pop	{r7, pc}

0801e624 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801e624:	b580      	push	{r7, lr}
 801e626:	b082      	sub	sp, #8
 801e628:	af00      	add	r7, sp, #0
 801e62a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	4618      	mov	r0, r3
 801e630:	f000 f871 	bl	801e716 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801e634:	4603      	mov	r3, r0
 801e636:	4618      	mov	r0, r3
 801e638:	3708      	adds	r7, #8
 801e63a:	46bd      	mov	sp, r7
 801e63c:	bd80      	pop	{r7, pc}

0801e63e <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801e63e:	b580      	push	{r7, lr}
 801e640:	b082      	sub	sp, #8
 801e642:	af00      	add	r7, sp, #0
 801e644:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	4618      	mov	r0, r3
 801e64a:	f000 f870 	bl	801e72e <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 801e64e:	4603      	mov	r3, r0
 801e650:	4618      	mov	r0, r3
 801e652:	3708      	adds	r7, #8
 801e654:	46bd      	mov	sp, r7
 801e656:	bd80      	pop	{r7, pc}

0801e658 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e658:	b480      	push	{r7}
 801e65a:	b083      	sub	sp, #12
 801e65c:	af00      	add	r7, sp, #0
 801e65e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	4618      	mov	r0, r3
 801e664:	370c      	adds	r7, #12
 801e666:	46bd      	mov	sp, r7
 801e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e66c:	4770      	bx	lr

0801e66e <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801e66e:	b480      	push	{r7}
 801e670:	b083      	sub	sp, #12
 801e672:	af00      	add	r7, sp, #0
 801e674:	6078      	str	r0, [r7, #4]
 801e676:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	4618      	mov	r0, r3
 801e67c:	370c      	adds	r7, #12
 801e67e:	46bd      	mov	sp, r7
 801e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e684:	4770      	bx	lr

0801e686 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 801e686:	b590      	push	{r4, r7, lr}
 801e688:	b083      	sub	sp, #12
 801e68a:	af00      	add	r7, sp, #0
 801e68c:	6078      	str	r0, [r7, #4]
 801e68e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801e690:	687c      	ldr	r4, [r7, #4]
 801e692:	6838      	ldr	r0, [r7, #0]
 801e694:	f7ff fb3d 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e698:	4603      	mov	r3, r0
 801e69a:	4619      	mov	r1, r3
 801e69c:	4620      	mov	r0, r4
 801e69e:	f000 f81e 	bl	801e6de <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	370c      	adds	r7, #12
 801e6a8:	46bd      	mov	sp, r7
 801e6aa:	bd90      	pop	{r4, r7, pc}

0801e6ac <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801e6ac:	b480      	push	{r7}
 801e6ae:	b083      	sub	sp, #12
 801e6b0:	af00      	add	r7, sp, #0
 801e6b2:	6078      	str	r0, [r7, #4]
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	370c      	adds	r7, #12
 801e6bc:	46bd      	mov	sp, r7
 801e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6c2:	4770      	bx	lr

0801e6c4 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e6c4:	b580      	push	{r7, lr}
 801e6c6:	b082      	sub	sp, #8
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	6078      	str	r0, [r7, #4]
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	4618      	mov	r0, r3
 801e6d0:	f000 f839 	bl	801e746 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 801e6d4:	4603      	mov	r3, r0
 801e6d6:	4618      	mov	r0, r3
 801e6d8:	3708      	adds	r7, #8
 801e6da:	46bd      	mov	sp, r7
 801e6dc:	bd80      	pop	{r7, pc}

0801e6de <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e6de:	b580      	push	{r7, lr}
 801e6e0:	b082      	sub	sp, #8
 801e6e2:	af00      	add	r7, sp, #0
 801e6e4:	6078      	str	r0, [r7, #4]
 801e6e6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801e6e8:	6838      	ldr	r0, [r7, #0]
 801e6ea:	f7ff fb12 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e6ee:	4602      	mov	r2, r0
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	601a      	str	r2, [r3, #0]
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	3708      	adds	r7, #8
 801e6fa:	46bd      	mov	sp, r7
 801e6fc:	bd80      	pop	{r7, pc}

0801e6fe <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e6fe:	b580      	push	{r7, lr}
 801e700:	b082      	sub	sp, #8
 801e702:	af00      	add	r7, sp, #0
 801e704:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e706:	6878      	ldr	r0, [r7, #4]
 801e708:	f7ff fe23 	bl	801e352 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 801e70c:	4603      	mov	r3, r0
 801e70e:	4618      	mov	r0, r3
 801e710:	3708      	adds	r7, #8
 801e712:	46bd      	mov	sp, r7
 801e714:	bd80      	pop	{r7, pc}

0801e716 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e716:	b580      	push	{r7, lr}
 801e718:	b082      	sub	sp, #8
 801e71a:	af00      	add	r7, sp, #0
 801e71c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e71e:	6878      	ldr	r0, [r7, #4]
 801e720:	f7ff ff4a 	bl	801e5b8 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 801e724:	4603      	mov	r3, r0
 801e726:	4618      	mov	r0, r3
 801e728:	3708      	adds	r7, #8
 801e72a:	46bd      	mov	sp, r7
 801e72c:	bd80      	pop	{r7, pc}

0801e72e <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801e72e:	b580      	push	{r7, lr}
 801e730:	b082      	sub	sp, #8
 801e732:	af00      	add	r7, sp, #0
 801e734:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801e736:	6878      	ldr	r0, [r7, #4]
 801e738:	f7ff ffc4 	bl	801e6c4 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 801e73c:	4603      	mov	r3, r0
 801e73e:	4618      	mov	r0, r3
 801e740:	3708      	adds	r7, #8
 801e742:	46bd      	mov	sp, r7
 801e744:	bd80      	pop	{r7, pc}

0801e746 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801e746:	b480      	push	{r7}
 801e748:	b083      	sub	sp, #12
 801e74a:	af00      	add	r7, sp, #0
 801e74c:	6078      	str	r0, [r7, #4]
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	4618      	mov	r0, r3
 801e754:	370c      	adds	r7, #12
 801e756:	46bd      	mov	sp, r7
 801e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e75c:	4770      	bx	lr
	...

0801e760 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 801e760:	b580      	push	{r7, lr}
 801e762:	b082      	sub	sp, #8
 801e764:	af00      	add	r7, sp, #0
 801e766:	6078      	str	r0, [r7, #4]
 801e768:	4a05      	ldr	r2, [pc, #20]	; (801e780 <_ZN5IOBusD1Ev+0x20>)
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	601a      	str	r2, [r3, #0]
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	4618      	mov	r0, r3
 801e772:	f7fe ff2d 	bl	801d5d0 <_ZN10MessageBusD1Ev>
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	4618      	mov	r0, r3
 801e77a:	3708      	adds	r7, #8
 801e77c:	46bd      	mov	sp, r7
 801e77e:	bd80      	pop	{r7, pc}
 801e780:	080276d0 	.word	0x080276d0

0801e784 <_ZN5IOBusD0Ev>:
 801e784:	b580      	push	{r7, lr}
 801e786:	b082      	sub	sp, #8
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
 801e78c:	6878      	ldr	r0, [r7, #4]
 801e78e:	f7ff ffe7 	bl	801e760 <_ZN5IOBusD1Ev>
 801e792:	f644 0114 	movw	r1, #18452	; 0x4814
 801e796:	6878      	ldr	r0, [r7, #4]
 801e798:	f001 fca6 	bl	80200e8 <_ZdlPvj>
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	4618      	mov	r0, r3
 801e7a0:	3708      	adds	r7, #8
 801e7a2:	46bd      	mov	sp, r7
 801e7a4:	bd80      	pop	{r7, pc}
	...

0801e7a8 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

/*
 * Creates an IODriver interface using the given port number.
 * This constructor invocation is a light operation.
 */
LWIPClientIO::LWIPClientIO(std::string address_str, uint16_t port) : address_str(address_str) {
 801e7a8:	b580      	push	{r7, lr}
 801e7aa:	b084      	sub	sp, #16
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	60f8      	str	r0, [r7, #12]
 801e7b0:	60b9      	str	r1, [r7, #8]
 801e7b2:	4613      	mov	r3, r2
 801e7b4:	80fb      	strh	r3, [r7, #6]
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	f7fe fcc1 	bl	801d140 <_ZN8IODriverC1Ev>
 801e7be:	4a19      	ldr	r2, [pc, #100]	; (801e824 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x7c>)
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	601a      	str	r2, [r3, #0]
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	3304      	adds	r3, #4
 801e7c8:	68b9      	ldr	r1, [r7, #8]
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	f002 f818 	bl	8020800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	3334      	adds	r3, #52	; 0x34
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	f000 f9a5 	bl	801eb24 <_ZNSt8functionIFvhPhmEEC1Ev>
	this->address = { 0 };
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	331c      	adds	r3, #28
 801e7de:	2200      	movs	r2, #0
 801e7e0:	601a      	str	r2, [r3, #0]
 801e7e2:	605a      	str	r2, [r3, #4]
 801e7e4:	609a      	str	r2, [r3, #8]
 801e7e6:	60da      	str	r2, [r3, #12]
	this->socket_id = 0;
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	2200      	movs	r2, #0
 801e7ec:	62da      	str	r2, [r3, #44]	; 0x2c
	this->connected = false;
 801e7ee:	68fb      	ldr	r3, [r7, #12]
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->receiver = nullptr;
 801e7f6:	68fb      	ldr	r3, [r7, #12]
 801e7f8:	3334      	adds	r3, #52	; 0x34
 801e7fa:	2100      	movs	r1, #0
 801e7fc:	4618      	mov	r0, r3
 801e7fe:	f000 f99e 	bl	801eb3e <_ZNSt8functionIFvhPhmEEaSEDn>

	address.sin_family = AF_INET;
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	2202      	movs	r2, #2
 801e806:	775a      	strb	r2, [r3, #29]
	address.sin_port = htons(port);
 801e808:	88fb      	ldrh	r3, [r7, #6]
 801e80a:	4618      	mov	r0, r3
 801e80c:	f7f1 fb64 	bl	800fed8 <lwip_htons>
 801e810:	4603      	mov	r3, r0
 801e812:	461a      	mov	r2, r3
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	83da      	strh	r2, [r3, #30]
}
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	4618      	mov	r0, r3
 801e81c:	3710      	adds	r7, #16
 801e81e:	46bd      	mov	sp, r7
 801e820:	bd80      	pop	{r7, pc}
 801e822:	bf00      	nop
 801e824:	080277f0 	.word	0x080277f0

0801e828 <_ZN12LWIPClientIOD1Ev>:

/*
 * Releases IO resources
 */
LWIPClientIO::~LWIPClientIO() {
 801e828:	b580      	push	{r7, lr}
 801e82a:	b082      	sub	sp, #8
 801e82c:	af00      	add	r7, sp, #0
 801e82e:	6078      	str	r0, [r7, #4]
 801e830:	4a0c      	ldr	r2, [pc, #48]	; (801e864 <_ZN12LWIPClientIOD1Ev+0x3c>)
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	601a      	str	r2, [r3, #0]
	disconnectClient();
 801e836:	6878      	ldr	r0, [r7, #4]
 801e838:	f000 f896 	bl	801e968 <_ZN12LWIPClientIO16disconnectClientEv>
LWIPClientIO::~LWIPClientIO() {
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	3334      	adds	r3, #52	; 0x34
 801e840:	4618      	mov	r0, r3
 801e842:	f7fe fc6f 	bl	801d124 <_ZNSt8functionIFvhPhmEED1Ev>
 801e846:	687b      	ldr	r3, [r7, #4]
 801e848:	3304      	adds	r3, #4
 801e84a:	4618      	mov	r0, r3
 801e84c:	f001 ffab 	bl	80207a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	4618      	mov	r0, r3
 801e854:	f7fe fc46 	bl	801d0e4 <_ZN8IODriverD1Ev>
}
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	4618      	mov	r0, r3
 801e85c:	3708      	adds	r7, #8
 801e85e:	46bd      	mov	sp, r7
 801e860:	bd80      	pop	{r7, pc}
 801e862:	bf00      	nop
 801e864:	080277f0 	.word	0x080277f0

0801e868 <_ZN12LWIPClientIOD0Ev>:
LWIPClientIO::~LWIPClientIO() {
 801e868:	b580      	push	{r7, lr}
 801e86a:	b082      	sub	sp, #8
 801e86c:	af00      	add	r7, sp, #0
 801e86e:	6078      	str	r0, [r7, #4]
}
 801e870:	6878      	ldr	r0, [r7, #4]
 801e872:	f7ff ffd9 	bl	801e828 <_ZN12LWIPClientIOD1Ev>
 801e876:	2144      	movs	r1, #68	; 0x44
 801e878:	6878      	ldr	r0, [r7, #4]
 801e87a:	f001 fc35 	bl	80200e8 <_ZdlPvj>
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	4618      	mov	r0, r3
 801e882:	3708      	adds	r7, #8
 801e884:	46bd      	mov	sp, r7
 801e886:	bd80      	pop	{r7, pc}

0801e888 <_ZN12LWIPClientIO13connectClientEv>:
 * Creates a client socket and connects it to a remote server
 * through the ip address and port specified by the constructor.
 * This operation is heavy and may fail.
 * Check the returned error code and set breakpoints accordingly if needed.
 */
int8_t LWIPClientIO::connectClient() {
 801e888:	b590      	push	{r4, r7, lr}
 801e88a:	b085      	sub	sp, #20
 801e88c:	af00      	add	r7, sp, #0
 801e88e:	6078      	str	r0, [r7, #4]

	if(connected) {
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e896:	2b00      	cmp	r3, #0
 801e898:	d002      	beq.n	801e8a0 <_ZN12LWIPClientIO13connectClientEv+0x18>
		return -1; // Server already connected
 801e89a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e89e:	e05b      	b.n	801e958 <_ZN12LWIPClientIO13connectClientEv+0xd0>
	}

	int32_t result;

	// Creates the socket instance
	socket_id = lwip_socket(AF_INET, SOCK_STREAM, 0);
 801e8a0:	2200      	movs	r2, #0
 801e8a2:	2101      	movs	r1, #1
 801e8a4:	2002      	movs	r0, #2
 801e8a6:	f7f6 fda1 	bl	80153ec <lwip_socket>
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	461a      	mov	r2, r3
 801e8ae:	687b      	ldr	r3, [r7, #4]
 801e8b0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(socket_id < 0) {
		return -2;
	}

	//adds destination IP address to the remote socket's address
	if(inet_pton(AF_INET, address_str.c_str(), &address.sin_addr) <= 0) {
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	3304      	adds	r3, #4
 801e8b6:	4618      	mov	r0, r3
 801e8b8:	f001 ff7b 	bl	80207b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801e8bc:	4601      	mov	r1, r0
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	3320      	adds	r3, #32
 801e8c2:	461a      	mov	r2, r3
 801e8c4:	2002      	movs	r0, #2
 801e8c6:	f7f7 f81f 	bl	8015908 <lwip_inet_pton>
 801e8ca:	4603      	mov	r3, r0
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	bfd4      	ite	le
 801e8d0:	2301      	movle	r3, #1
 801e8d2:	2300      	movgt	r3, #0
 801e8d4:	b2db      	uxtb	r3, r3
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d007      	beq.n	801e8ea <_ZN12LWIPClientIO13connectClientEv+0x62>
		lwip_close(socket_id);
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e8de:	4618      	mov	r0, r3
 801e8e0:	f7f6 f872 	bl	80149c8 <lwip_close>
		return -3;
 801e8e4:	f06f 0302 	mvn.w	r3, #2
 801e8e8:	e036      	b.n	801e958 <_ZN12LWIPClientIO13connectClientEv+0xd0>
	}

	// Binds the client socket to the remote server socket
	result = lwip_connect(socket_id, (sockaddr*) &address, sizeof(address));
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e8ee:	4618      	mov	r0, r3
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	331c      	adds	r3, #28
 801e8f4:	2210      	movs	r2, #16
 801e8f6:	4619      	mov	r1, r3
 801e8f8:	f7f6 f8bc 	bl	8014a74 <lwip_connect>
 801e8fc:	60f8      	str	r0, [r7, #12]
	if(result < 0) {
 801e8fe:	68fb      	ldr	r3, [r7, #12]
 801e900:	2b00      	cmp	r3, #0
 801e902:	da07      	bge.n	801e914 <_ZN12LWIPClientIO13connectClientEv+0x8c>
		lwip_close(socket_id);
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e908:	4618      	mov	r0, r3
 801e90a:	f7f6 f85d 	bl	80149c8 <lwip_close>
		return -4;
 801e90e:	f06f 0303 	mvn.w	r3, #3
 801e912:	e021      	b.n	801e958 <_ZN12LWIPClientIO13connectClientEv+0xd0>
	}


	lwip_fcntl(socket_id, F_SETFL, lwip_fcntl(socket_id, F_GETFL, 0) | O_NONBLOCK);
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e918:	461c      	mov	r4, r3
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e91e:	2200      	movs	r2, #0
 801e920:	2103      	movs	r1, #3
 801e922:	4618      	mov	r0, r3
 801e924:	f7f6 ff46 	bl	80157b4 <lwip_fcntl>
 801e928:	4603      	mov	r3, r0
 801e92a:	f043 0301 	orr.w	r3, r3, #1
 801e92e:	461a      	mov	r2, r3
 801e930:	2104      	movs	r1, #4
 801e932:	4620      	mov	r0, r4
 801e934:	f7f6 ff3e 	bl	80157b4 <lwip_fcntl>

	this->connected = true;
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	2201      	movs	r2, #1
 801e93c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	console.printf("[RoCo] [Client@%d] Client connected\r\n", ntohs(address.sin_port));
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	8bdb      	ldrh	r3, [r3, #30]
 801e944:	4618      	mov	r0, r3
 801e946:	f7f1 fac7 	bl	800fed8 <lwip_htons>
 801e94a:	4603      	mov	r3, r0
 801e94c:	461a      	mov	r2, r3
 801e94e:	4904      	ldr	r1, [pc, #16]	; (801e960 <_ZN12LWIPClientIO13connectClientEv+0xd8>)
 801e950:	4804      	ldr	r0, [pc, #16]	; (801e964 <_ZN12LWIPClientIO13connectClientEv+0xdc>)
 801e952:	f7fe fb16 	bl	801cf82 <_ZN7Console6printfEPKcz>


	return 0;
 801e956:	2300      	movs	r3, #0
}
 801e958:	4618      	mov	r0, r3
 801e95a:	3714      	adds	r7, #20
 801e95c:	46bd      	mov	sp, r7
 801e95e:	bd90      	pop	{r4, r7, pc}
 801e960:	0802732c 	.word	0x0802732c
 801e964:	240407b4 	.word	0x240407b4

0801e968 <_ZN12LWIPClientIO16disconnectClientEv>:
/*
 * Disconnects the driver instance.
 * In particular, this function resets the IODriver to an initial state and closes all used IO resources.
 * Make sure the disconnect member function is only called in the reception thread.
 */
void LWIPClientIO::disconnectClient() {
 801e968:	b580      	push	{r7, lr}
 801e96a:	b082      	sub	sp, #8
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	6078      	str	r0, [r7, #4]
	if(connected) {
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e976:	2b00      	cmp	r3, #0
 801e978:	d011      	beq.n	801e99e <_ZN12LWIPClientIO16disconnectClientEv+0x36>
		this->connected = false;
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	2200      	movs	r2, #0
 801e97e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		closeSocket();
 801e982:	6878      	ldr	r0, [r7, #4]
 801e984:	f000 f814 	bl	801e9b0 <_ZN12LWIPClientIO11closeSocketEv>
		console.printf("[RoCo] [Client@%d] Client disconnected\r\n", ntohs(address.sin_port));
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	8bdb      	ldrh	r3, [r3, #30]
 801e98c:	4618      	mov	r0, r3
 801e98e:	f7f1 faa3 	bl	800fed8 <lwip_htons>
 801e992:	4603      	mov	r3, r0
 801e994:	461a      	mov	r2, r3
 801e996:	4904      	ldr	r1, [pc, #16]	; (801e9a8 <_ZN12LWIPClientIO16disconnectClientEv+0x40>)
 801e998:	4804      	ldr	r0, [pc, #16]	; (801e9ac <_ZN12LWIPClientIO16disconnectClientEv+0x44>)
 801e99a:	f7fe faf2 	bl	801cf82 <_ZN7Console6printfEPKcz>
	}
}
 801e99e:	bf00      	nop
 801e9a0:	3708      	adds	r7, #8
 801e9a2:	46bd      	mov	sp, r7
 801e9a4:	bd80      	pop	{r7, pc}
 801e9a6:	bf00      	nop
 801e9a8:	08027354 	.word	0x08027354
 801e9ac:	240407b4 	.word	0x240407b4

0801e9b0 <_ZN12LWIPClientIO11closeSocketEv>:

/*
 * Closes all used IO resources
 */
void LWIPClientIO::closeSocket() {
 801e9b0:	b580      	push	{r7, lr}
 801e9b2:	b082      	sub	sp, #8
 801e9b4:	af00      	add	r7, sp, #0
 801e9b6:	6078      	str	r0, [r7, #4]
	lwip_close(socket_id);
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9bc:	4618      	mov	r0, r3
 801e9be:	f7f6 f803 	bl	80149c8 <lwip_close>
}
 801e9c2:	bf00      	nop
 801e9c4:	3708      	adds	r7, #8
 801e9c6:	46bd      	mov	sp, r7
 801e9c8:	bd80      	pop	{r7, pc}
	...

0801e9cc <_ZN12LWIPClientIO6updateEv>:

/*
 * Processes input from the server and passes it to the reception handler.
 */
void LWIPClientIO::update() {
 801e9cc:	b580      	push	{r7, lr}
 801e9ce:	b084      	sub	sp, #16
 801e9d0:	af00      	add	r7, sp, #0
 801e9d2:	6078      	str	r0, [r7, #4]
	if(connected) {
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d04c      	beq.n	801ea78 <_ZN12LWIPClientIO6updateEv+0xac>

		//receive buffer
		static uint8_t buffer[256];

		// New data from client
		if((result = lwip_recv(socket_id, buffer, sizeof(buffer), 0)) >= 0) {
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9e2:	4618      	mov	r0, r3
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e9ea:	4925      	ldr	r1, [pc, #148]	; (801ea80 <_ZN12LWIPClientIO6updateEv+0xb4>)
 801e9ec:	f7f6 fbd8 	bl	80151a0 <lwip_recv>
 801e9f0:	60f8      	str	r0, [r7, #12]
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	43db      	mvns	r3, r3
 801e9f6:	0fdb      	lsrs	r3, r3, #31
 801e9f8:	b2db      	uxtb	r3, r3
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	d03c      	beq.n	801ea78 <_ZN12LWIPClientIO6updateEv+0xac>
			if(result != 0) {
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	d02a      	beq.n	801ea5a <_ZN12LWIPClientIO6updateEv+0x8e>
				if(receiver != nullptr) {
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	3334      	adds	r3, #52	; 0x34
 801ea08:	2100      	movs	r1, #0
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f000 f8b1 	bl	801eb72 <_ZStneIvJhPhmEEbRKSt8functionIFT_DpT0_EEDn>
 801ea10:	4603      	mov	r3, r0
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d030      	beq.n	801ea78 <_ZN12LWIPClientIO6updateEv+0xac>
					if(ntohs(address.sin_port) == PORT_A) {
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	8bdb      	ldrh	r3, [r3, #30]
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	f7f1 fa5c 	bl	800fed8 <lwip_htons>
 801ea20:	4603      	mov	r3, r0
 801ea22:	461a      	mov	r2, r3
 801ea24:	f24a 63aa 	movw	r3, #42666	; 0xa6aa
 801ea28:	429a      	cmp	r2, r3
 801ea2a:	bf0c      	ite	eq
 801ea2c:	2301      	moveq	r3, #1
 801ea2e:	2300      	movne	r3, #0
 801ea30:	b2db      	uxtb	r3, r3
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d008      	beq.n	801ea48 <_ZN12LWIPClientIO6updateEv+0x7c>
						receiver(0b10000000, buffer, result); // Sender ID marked as external
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	4a10      	ldr	r2, [pc, #64]	; (801ea80 <_ZN12LWIPClientIO6updateEv+0xb4>)
 801ea40:	2180      	movs	r1, #128	; 0x80
 801ea42:	f000 f8a3 	bl	801eb8c <_ZNKSt8functionIFvhPhmEEclEhS0_m>
				this->connected = false;
				// Do not decrement the num_sockets field since our IDs are not linear
			}
		}
	}
}
 801ea46:	e017      	b.n	801ea78 <_ZN12LWIPClientIO6updateEv+0xac>
						receiver(0b11000000, buffer, result); // Sender ID marked as internal
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801ea4e:	68fb      	ldr	r3, [r7, #12]
 801ea50:	4a0b      	ldr	r2, [pc, #44]	; (801ea80 <_ZN12LWIPClientIO6updateEv+0xb4>)
 801ea52:	21c0      	movs	r1, #192	; 0xc0
 801ea54:	f000 f89a 	bl	801eb8c <_ZNKSt8functionIFvhPhmEEclEhS0_m>
}
 801ea58:	e00e      	b.n	801ea78 <_ZN12LWIPClientIO6updateEv+0xac>
				console.printf("[RoCo] [Client@%d] Client disconnected by server\r\n", ntohs(address.sin_port));
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	8bdb      	ldrh	r3, [r3, #30]
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7f1 fa3a 	bl	800fed8 <lwip_htons>
 801ea64:	4603      	mov	r3, r0
 801ea66:	461a      	mov	r2, r3
 801ea68:	4906      	ldr	r1, [pc, #24]	; (801ea84 <_ZN12LWIPClientIO6updateEv+0xb8>)
 801ea6a:	4807      	ldr	r0, [pc, #28]	; (801ea88 <_ZN12LWIPClientIO6updateEv+0xbc>)
 801ea6c:	f7fe fa89 	bl	801cf82 <_ZN7Console6printfEPKcz>
				this->connected = false;
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	2200      	movs	r2, #0
 801ea74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 801ea78:	bf00      	nop
 801ea7a:	3710      	adds	r7, #16
 801ea7c:	46bd      	mov	sp, r7
 801ea7e:	bd80      	pop	{r7, pc}
 801ea80:	240408bc 	.word	0x240408bc
 801ea84:	08027380 	.word	0x08027380
 801ea88:	240407b4 	.word	0x240407b4

0801ea8c <_ZN12LWIPClientIO7receiveERKSt8functionIFvhPhmEE>:

/*
 * Sets the receiver callback function
 */
void LWIPClientIO::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 801ea8c:	b580      	push	{r7, lr}
 801ea8e:	b082      	sub	sp, #8
 801ea90:	af00      	add	r7, sp, #0
 801ea92:	6078      	str	r0, [r7, #4]
 801ea94:	6039      	str	r1, [r7, #0]
	this->receiver = receiver;
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	3334      	adds	r3, #52	; 0x34
 801ea9a:	6839      	ldr	r1, [r7, #0]
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7fe fc9d 	bl	801d3dc <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 801eaa2:	bf00      	nop
 801eaa4:	3708      	adds	r7, #8
 801eaa6:	46bd      	mov	sp, r7
 801eaa8:	bd80      	pop	{r7, pc}
	...

0801eaac <_ZN12LWIPClientIO8transmitEPhm>:

/*
 * Transmits the given data to the server
 * Warning: this function must be thread safe in a multithreaded environment
 */
void LWIPClientIO::transmit(uint8_t* buffer, uint32_t length) {
 801eaac:	b580      	push	{r7, lr}
 801eaae:	b086      	sub	sp, #24
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	60f8      	str	r0, [r7, #12]
 801eab4:	60b9      	str	r1, [r7, #8]
 801eab6:	607a      	str	r2, [r7, #4]
	if(connected) {
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d027      	beq.n	801eb12 <_ZN12LWIPClientIO8transmitEPhm+0x66>
		int32_t result;

		while((result = lwip_send(socket_id, buffer, length, 0)) > 0) {
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eac6:	4618      	mov	r0, r3
 801eac8:	2300      	movs	r3, #0
 801eaca:	687a      	ldr	r2, [r7, #4]
 801eacc:	68b9      	ldr	r1, [r7, #8]
 801eace:	f7f6 fb7d 	bl	80151cc <lwip_send>
 801ead2:	6178      	str	r0, [r7, #20]
 801ead4:	697b      	ldr	r3, [r7, #20]
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	bfcc      	ite	gt
 801eada:	2301      	movgt	r3, #1
 801eadc:	2300      	movle	r3, #0
 801eade:	b2db      	uxtb	r3, r3
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	d004      	beq.n	801eaee <_ZN12LWIPClientIO8transmitEPhm+0x42>
			length -= result;
 801eae4:	697b      	ldr	r3, [r7, #20]
 801eae6:	687a      	ldr	r2, [r7, #4]
 801eae8:	1ad3      	subs	r3, r2, r3
 801eaea:	607b      	str	r3, [r7, #4]
		while((result = lwip_send(socket_id, buffer, length, 0)) > 0) {
 801eaec:	e7e9      	b.n	801eac2 <_ZN12LWIPClientIO8transmitEPhm+0x16>
		}

		if(length != 0) {
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d00e      	beq.n	801eb12 <_ZN12LWIPClientIO8transmitEPhm+0x66>
			console.printf("[RoCo] [Client@%d] Client disconnected by server\r\n", ntohs(address.sin_port));
 801eaf4:	68fb      	ldr	r3, [r7, #12]
 801eaf6:	8bdb      	ldrh	r3, [r3, #30]
 801eaf8:	4618      	mov	r0, r3
 801eafa:	f7f1 f9ed 	bl	800fed8 <lwip_htons>
 801eafe:	4603      	mov	r3, r0
 801eb00:	461a      	mov	r2, r3
 801eb02:	4906      	ldr	r1, [pc, #24]	; (801eb1c <_ZN12LWIPClientIO8transmitEPhm+0x70>)
 801eb04:	4806      	ldr	r0, [pc, #24]	; (801eb20 <_ZN12LWIPClientIO8transmitEPhm+0x74>)
 801eb06:	f7fe fa3c 	bl	801cf82 <_ZN7Console6printfEPKcz>
			this->connected = false;
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
 801eb12:	bf00      	nop
 801eb14:	3718      	adds	r7, #24
 801eb16:	46bd      	mov	sp, r7
 801eb18:	bd80      	pop	{r7, pc}
 801eb1a:	bf00      	nop
 801eb1c:	08027380 	.word	0x08027380
 801eb20:	240407b4 	.word	0x240407b4

0801eb24 <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
 801eb24:	b580      	push	{r7, lr}
 801eb26:	b082      	sub	sp, #8
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	4618      	mov	r0, r3
 801eb30:	f7fe faa5 	bl	801d07e <_ZNSt14_Function_baseC1Ev>
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	4618      	mov	r0, r3
 801eb38:	3708      	adds	r7, #8
 801eb3a:	46bd      	mov	sp, r7
 801eb3c:	bd80      	pop	{r7, pc}

0801eb3e <_ZNSt8functionIFvhPhmEEaSEDn>:
      operator=(nullptr_t) noexcept
 801eb3e:	b580      	push	{r7, lr}
 801eb40:	b082      	sub	sp, #8
 801eb42:	af00      	add	r7, sp, #0
 801eb44:	6078      	str	r0, [r7, #4]
 801eb46:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	689b      	ldr	r3, [r3, #8]
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d00b      	beq.n	801eb68 <_ZNSt8functionIFvhPhmEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	689b      	ldr	r3, [r3, #8]
 801eb54:	6878      	ldr	r0, [r7, #4]
 801eb56:	6879      	ldr	r1, [r7, #4]
 801eb58:	2203      	movs	r2, #3
 801eb5a:	4798      	blx	r3
	    _M_manager = nullptr;
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	2200      	movs	r2, #0
 801eb60:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	2200      	movs	r2, #0
 801eb66:	60da      	str	r2, [r3, #12]
	return *this;
 801eb68:	687b      	ldr	r3, [r7, #4]
      }
 801eb6a:	4618      	mov	r0, r3
 801eb6c:	3708      	adds	r7, #8
 801eb6e:	46bd      	mov	sp, r7
 801eb70:	bd80      	pop	{r7, pc}

0801eb72 <_ZStneIvJhPhmEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 801eb72:	b580      	push	{r7, lr}
 801eb74:	b082      	sub	sp, #8
 801eb76:	af00      	add	r7, sp, #0
 801eb78:	6078      	str	r0, [r7, #4]
 801eb7a:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 801eb7c:	6878      	ldr	r0, [r7, #4]
 801eb7e:	f7fe fc48 	bl	801d412 <_ZNKSt8functionIFvhPhmEEcvbEv>
 801eb82:	4603      	mov	r3, r0
 801eb84:	4618      	mov	r0, r3
 801eb86:	3708      	adds	r7, #8
 801eb88:	46bd      	mov	sp, r7
 801eb8a:	bd80      	pop	{r7, pc}

0801eb8c <_ZNKSt8functionIFvhPhmEEclEhS0_m>:
    function<_Res(_ArgTypes...)>::
 801eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb90:	b084      	sub	sp, #16
 801eb92:	af00      	add	r7, sp, #0
 801eb94:	60f8      	str	r0, [r7, #12]
 801eb96:	607a      	str	r2, [r7, #4]
 801eb98:	603b      	str	r3, [r7, #0]
 801eb9a:	460b      	mov	r3, r1
 801eb9c:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	4618      	mov	r0, r3
 801eba2:	f7fe fa8d 	bl	801d0c0 <_ZNKSt14_Function_base8_M_emptyEv>
 801eba6:	4603      	mov	r3, r0
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d001      	beq.n	801ebb0 <_ZNKSt8functionIFvhPhmEEclEhS0_m+0x24>
	__throw_bad_function_call();
 801ebac:	f001 fdb6 	bl	802071c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	68dc      	ldr	r4, [r3, #12]
 801ebb4:	68fd      	ldr	r5, [r7, #12]
 801ebb6:	f107 030b 	add.w	r3, r7, #11
 801ebba:	4618      	mov	r0, r3
 801ebbc:	f7ff f893 	bl	801dce6 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801ebc0:	4606      	mov	r6, r0
 801ebc2:	1d3b      	adds	r3, r7, #4
 801ebc4:	4618      	mov	r0, r3
 801ebc6:	f7ff f899 	bl	801dcfc <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801ebca:	4680      	mov	r8, r0
 801ebcc:	463b      	mov	r3, r7
 801ebce:	4618      	mov	r0, r3
 801ebd0:	f7ff f89f 	bl	801dd12 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801ebd4:	4603      	mov	r3, r0
 801ebd6:	4642      	mov	r2, r8
 801ebd8:	4631      	mov	r1, r6
 801ebda:	4628      	mov	r0, r5
 801ebdc:	47a0      	blx	r4
 801ebde:	bf00      	nop
    }
 801ebe0:	3710      	adds	r7, #16
 801ebe2:	46bd      	mov	sp, r7
 801ebe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ebe8 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 801ebe8:	b480      	push	{r7}
 801ebea:	b083      	sub	sp, #12
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	685b      	ldr	r3, [r3, #4]
 801ebf4:	781b      	ldrb	r3, [r3, #0]
 801ebf6:	2b2a      	cmp	r3, #42	; 0x2a
 801ebf8:	d103      	bne.n	801ec02 <_ZNKSt9type_info4nameEv+0x1a>
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	685b      	ldr	r3, [r3, #4]
 801ebfe:	3301      	adds	r3, #1
 801ec00:	e001      	b.n	801ec06 <_ZNKSt9type_info4nameEv+0x1e>
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	685b      	ldr	r3, [r3, #4]
 801ec06:	4618      	mov	r0, r3
 801ec08:	370c      	adds	r7, #12
 801ec0a:	46bd      	mov	sp, r7
 801ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec10:	4770      	bx	lr
	...

0801ec14 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 801ec14:	b590      	push	{r4, r7, lr}
 801ec16:	b083      	sub	sp, #12
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 801ec1c:	6878      	ldr	r0, [r7, #4]
 801ec1e:	f7ff ffe3 	bl	801ebe8 <_ZNKSt9type_info4nameEv>
 801ec22:	4604      	mov	r4, r0
 801ec24:	6878      	ldr	r0, [r7, #4]
 801ec26:	f7ff ffdf 	bl	801ebe8 <_ZNKSt9type_info4nameEv>
 801ec2a:	4603      	mov	r3, r0
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	f7e1 fbb1 	bl	8000394 <strlen>
 801ec32:	4603      	mov	r3, r0
 801ec34:	4a04      	ldr	r2, [pc, #16]	; (801ec48 <_ZNKSt9type_info9hash_codeEv+0x34>)
 801ec36:	4619      	mov	r1, r3
 801ec38:	4620      	mov	r0, r4
 801ec3a:	f001 fa67 	bl	802010c <_ZSt11_Hash_bytesPKvjj>
 801ec3e:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 801ec40:	4618      	mov	r0, r3
 801ec42:	370c      	adds	r7, #12
 801ec44:	46bd      	mov	sp, r7
 801ec46:	bd90      	pop	{r4, r7, pc}
 801ec48:	c70f6907 	.word	0xc70f6907

0801ec4c <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ec4c:	b580      	push	{r7, lr}
 801ec4e:	b086      	sub	sp, #24
 801ec50:	af00      	add	r7, sp, #0
 801ec52:	6078      	str	r0, [r7, #4]
 801ec54:	460b      	mov	r3, r1
 801ec56:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ec58:	2308      	movs	r3, #8
 801ec5a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ec5c:	4829      	ldr	r0, [pc, #164]	; (801ed04 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 801ec5e:	f7ff ffd9 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801ec62:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	b2db      	uxtb	r3, r3
 801ec68:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ec6a:	78fb      	ldrb	r3, [r7, #3]
 801ec6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ec70:	687a      	ldr	r2, [r7, #4]
 801ec72:	00db      	lsls	r3, r3, #3
 801ec74:	4413      	add	r3, r2
 801ec76:	689b      	ldr	r3, [r3, #8]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d001      	beq.n	801ec80 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	e03c      	b.n	801ecfa <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 801ec80:	693b      	ldr	r3, [r7, #16]
 801ec82:	2bff      	cmp	r3, #255	; 0xff
 801ec84:	d901      	bls.n	801ec8a <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 801ec86:	2300      	movs	r3, #0
 801ec88:	e037      	b.n	801ecfa <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 801ec8a:	687a      	ldr	r2, [r7, #4]
 801ec8c:	697b      	ldr	r3, [r7, #20]
 801ec8e:	3380      	adds	r3, #128	; 0x80
 801ec90:	009b      	lsls	r3, r3, #2
 801ec92:	4413      	add	r3, r2
 801ec94:	685b      	ldr	r3, [r3, #4]
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d015      	beq.n	801ecc6 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ec9a:	687a      	ldr	r2, [r7, #4]
 801ec9c:	697b      	ldr	r3, [r7, #20]
 801ec9e:	3380      	adds	r3, #128	; 0x80
 801eca0:	009b      	lsls	r3, r3, #2
 801eca2:	4413      	add	r3, r2
 801eca4:	685b      	ldr	r3, [r3, #4]
 801eca6:	685b      	ldr	r3, [r3, #4]
 801eca8:	68fa      	ldr	r2, [r7, #12]
 801ecaa:	429a      	cmp	r2, r3
 801ecac:	d101      	bne.n	801ecb2 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 801ecae:	2300      	movs	r3, #0
 801ecb0:	e023      	b.n	801ecfa <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 801ecb2:	697b      	ldr	r3, [r7, #20]
 801ecb4:	3301      	adds	r3, #1
 801ecb6:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 801ecb8:	697b      	ldr	r3, [r7, #20]
 801ecba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ecbe:	d1e4      	bne.n	801ec8a <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ecc4:	e7e1      	b.n	801ec8a <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ecc6:	78fb      	ldrb	r3, [r7, #3]
 801ecc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eccc:	00db      	lsls	r3, r3, #3
 801ecce:	687a      	ldr	r2, [r7, #4]
 801ecd0:	4413      	add	r3, r2
 801ecd2:	3304      	adds	r3, #4
 801ecd4:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 801ecd6:	68bb      	ldr	r3, [r7, #8]
 801ecd8:	78fa      	ldrb	r2, [r7, #3]
 801ecda:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ecdc:	693b      	ldr	r3, [r7, #16]
 801ecde:	b2da      	uxtb	r2, r3
 801ece0:	68bb      	ldr	r3, [r7, #8]
 801ece2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ece4:	68bb      	ldr	r3, [r7, #8]
 801ece6:	68fa      	ldr	r2, [r7, #12]
 801ece8:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 801ecea:	687a      	ldr	r2, [r7, #4]
 801ecec:	697b      	ldr	r3, [r7, #20]
 801ecee:	3380      	adds	r3, #128	; 0x80
 801ecf0:	009b      	lsls	r3, r3, #2
 801ecf2:	4413      	add	r3, r2
 801ecf4:	68ba      	ldr	r2, [r7, #8]
 801ecf6:	605a      	str	r2, [r3, #4]

	return true;
 801ecf8:	2301      	movs	r3, #1
}
 801ecfa:	4618      	mov	r0, r3
 801ecfc:	3718      	adds	r7, #24
 801ecfe:	46bd      	mov	sp, r7
 801ed00:	bd80      	pop	{r7, pc}
 801ed02:	bf00      	nop
 801ed04:	08027988 	.word	0x08027988

0801ed08 <_ZN10MessageBus7forwardI10PingPacketEEbPS_>:
 *
 * Every time a packet matching to given type is received, forwards it to the other message bus.
 *
 * Warning: this method is not thread-safe.
 */
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 801ed08:	b580      	push	{r7, lr}
 801ed0a:	b086      	sub	sp, #24
 801ed0c:	af00      	add	r7, sp, #0
 801ed0e:	6078      	str	r0, [r7, #4]
 801ed10:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 801ed12:	4814      	ldr	r0, [pc, #80]	; (801ed64 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x5c>)
 801ed14:	f7ff ff7e 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801ed18:	6178      	str	r0, [r7, #20]

	PacketDefinition* def = retrieve(hash);
 801ed1a:	6979      	ldr	r1, [r7, #20]
 801ed1c:	6878      	ldr	r0, [r7, #4]
 801ed1e:	f000 fd51 	bl	801f7c4 <_ZN10MessageBus8retrieveEj>
 801ed22:	6138      	str	r0, [r7, #16]

	if(def != nullptr) {
 801ed24:	693b      	ldr	r3, [r7, #16]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d017      	beq.n	801ed5a <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x52>
		uint8_t packetID = def->id;
 801ed2a:	693b      	ldr	r3, [r7, #16]
 801ed2c:	781b      	ldrb	r3, [r3, #0]
 801ed2e:	73fb      	strb	r3, [r7, #15]

		if(forwarders[packetID] != nullptr) {
 801ed30:	7bfb      	ldrb	r3, [r7, #15]
 801ed32:	687a      	ldr	r2, [r7, #4]
 801ed34:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801ed38:	009b      	lsls	r3, r3, #2
 801ed3a:	4413      	add	r3, r2
 801ed3c:	685b      	ldr	r3, [r3, #4]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d001      	beq.n	801ed46 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x3e>
			return false; // A handler is already registered for this packet type
 801ed42:	2300      	movs	r3, #0
 801ed44:	e00a      	b.n	801ed5c <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x54>
		}

		forwarders[packetID] = bus;
 801ed46:	7bfb      	ldrb	r3, [r7, #15]
 801ed48:	687a      	ldr	r2, [r7, #4]
 801ed4a:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801ed4e:	009b      	lsls	r3, r3, #2
 801ed50:	4413      	add	r3, r2
 801ed52:	683a      	ldr	r2, [r7, #0]
 801ed54:	605a      	str	r2, [r3, #4]

		return true;
 801ed56:	2301      	movs	r3, #1
 801ed58:	e000      	b.n	801ed5c <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x54>
	}

	return false;
 801ed5a:	2300      	movs	r3, #0
}
 801ed5c:	4618      	mov	r0, r3
 801ed5e:	3718      	adds	r7, #24
 801ed60:	46bd      	mov	sp, r7
 801ed62:	bd80      	pop	{r7, pc}
 801ed64:	08027988 	.word	0x08027988

0801ed68 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ed68:	b580      	push	{r7, lr}
 801ed6a:	b086      	sub	sp, #24
 801ed6c:	af00      	add	r7, sp, #0
 801ed6e:	6078      	str	r0, [r7, #4]
 801ed70:	460b      	mov	r3, r1
 801ed72:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ed74:	2308      	movs	r3, #8
 801ed76:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ed78:	4829      	ldr	r0, [pc, #164]	; (801ee20 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 801ed7a:	f7ff ff4b 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801ed7e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	b2db      	uxtb	r3, r3
 801ed84:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ed86:	78fb      	ldrb	r3, [r7, #3]
 801ed88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ed8c:	687a      	ldr	r2, [r7, #4]
 801ed8e:	00db      	lsls	r3, r3, #3
 801ed90:	4413      	add	r3, r2
 801ed92:	689b      	ldr	r3, [r3, #8]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d001      	beq.n	801ed9c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ed98:	2300      	movs	r3, #0
 801ed9a:	e03c      	b.n	801ee16 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ed9c:	693b      	ldr	r3, [r7, #16]
 801ed9e:	2bff      	cmp	r3, #255	; 0xff
 801eda0:	d901      	bls.n	801eda6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 801eda2:	2300      	movs	r3, #0
 801eda4:	e037      	b.n	801ee16 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801eda6:	687a      	ldr	r2, [r7, #4]
 801eda8:	697b      	ldr	r3, [r7, #20]
 801edaa:	3380      	adds	r3, #128	; 0x80
 801edac:	009b      	lsls	r3, r3, #2
 801edae:	4413      	add	r3, r2
 801edb0:	685b      	ldr	r3, [r3, #4]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	d015      	beq.n	801ede2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801edb6:	687a      	ldr	r2, [r7, #4]
 801edb8:	697b      	ldr	r3, [r7, #20]
 801edba:	3380      	adds	r3, #128	; 0x80
 801edbc:	009b      	lsls	r3, r3, #2
 801edbe:	4413      	add	r3, r2
 801edc0:	685b      	ldr	r3, [r3, #4]
 801edc2:	685b      	ldr	r3, [r3, #4]
 801edc4:	68fa      	ldr	r2, [r7, #12]
 801edc6:	429a      	cmp	r2, r3
 801edc8:	d101      	bne.n	801edce <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 801edca:	2300      	movs	r3, #0
 801edcc:	e023      	b.n	801ee16 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 801edce:	697b      	ldr	r3, [r7, #20]
 801edd0:	3301      	adds	r3, #1
 801edd2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801edd4:	697b      	ldr	r3, [r7, #20]
 801edd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801edda:	d1e4      	bne.n	801eda6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 801eddc:	2300      	movs	r3, #0
 801edde:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ede0:	e7e1      	b.n	801eda6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ede2:	78fb      	ldrb	r3, [r7, #3]
 801ede4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ede8:	00db      	lsls	r3, r3, #3
 801edea:	687a      	ldr	r2, [r7, #4]
 801edec:	4413      	add	r3, r2
 801edee:	3304      	adds	r3, #4
 801edf0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801edf2:	68bb      	ldr	r3, [r7, #8]
 801edf4:	78fa      	ldrb	r2, [r7, #3]
 801edf6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801edf8:	693b      	ldr	r3, [r7, #16]
 801edfa:	b2da      	uxtb	r2, r3
 801edfc:	68bb      	ldr	r3, [r7, #8]
 801edfe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ee00:	68bb      	ldr	r3, [r7, #8]
 801ee02:	68fa      	ldr	r2, [r7, #12]
 801ee04:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ee06:	687a      	ldr	r2, [r7, #4]
 801ee08:	697b      	ldr	r3, [r7, #20]
 801ee0a:	3380      	adds	r3, #128	; 0x80
 801ee0c:	009b      	lsls	r3, r3, #2
 801ee0e:	4413      	add	r3, r2
 801ee10:	68ba      	ldr	r2, [r7, #8]
 801ee12:	605a      	str	r2, [r3, #4]
	return true;
 801ee14:	2301      	movs	r3, #1
}
 801ee16:	4618      	mov	r0, r3
 801ee18:	3718      	adds	r7, #24
 801ee1a:	46bd      	mov	sp, r7
 801ee1c:	bd80      	pop	{r7, pc}
 801ee1e:	bf00      	nop
 801ee20:	08027970 	.word	0x08027970

0801ee24 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ee24:	b580      	push	{r7, lr}
 801ee26:	b086      	sub	sp, #24
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
 801ee2c:	460b      	mov	r3, r1
 801ee2e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ee30:	2308      	movs	r3, #8
 801ee32:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ee34:	4829      	ldr	r0, [pc, #164]	; (801eedc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 801ee36:	f7ff feed 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801ee3a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	b2db      	uxtb	r3, r3
 801ee40:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ee42:	78fb      	ldrb	r3, [r7, #3]
 801ee44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ee48:	687a      	ldr	r2, [r7, #4]
 801ee4a:	00db      	lsls	r3, r3, #3
 801ee4c:	4413      	add	r3, r2
 801ee4e:	689b      	ldr	r3, [r3, #8]
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d001      	beq.n	801ee58 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 801ee54:	2300      	movs	r3, #0
 801ee56:	e03c      	b.n	801eed2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ee58:	693b      	ldr	r3, [r7, #16]
 801ee5a:	2bff      	cmp	r3, #255	; 0xff
 801ee5c:	d901      	bls.n	801ee62 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 801ee5e:	2300      	movs	r3, #0
 801ee60:	e037      	b.n	801eed2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ee62:	687a      	ldr	r2, [r7, #4]
 801ee64:	697b      	ldr	r3, [r7, #20]
 801ee66:	3380      	adds	r3, #128	; 0x80
 801ee68:	009b      	lsls	r3, r3, #2
 801ee6a:	4413      	add	r3, r2
 801ee6c:	685b      	ldr	r3, [r3, #4]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d015      	beq.n	801ee9e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ee72:	687a      	ldr	r2, [r7, #4]
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	3380      	adds	r3, #128	; 0x80
 801ee78:	009b      	lsls	r3, r3, #2
 801ee7a:	4413      	add	r3, r2
 801ee7c:	685b      	ldr	r3, [r3, #4]
 801ee7e:	685b      	ldr	r3, [r3, #4]
 801ee80:	68fa      	ldr	r2, [r7, #12]
 801ee82:	429a      	cmp	r2, r3
 801ee84:	d101      	bne.n	801ee8a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 801ee86:	2300      	movs	r3, #0
 801ee88:	e023      	b.n	801eed2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 801ee8a:	697b      	ldr	r3, [r7, #20]
 801ee8c:	3301      	adds	r3, #1
 801ee8e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ee90:	697b      	ldr	r3, [r7, #20]
 801ee92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ee96:	d1e4      	bne.n	801ee62 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 801ee98:	2300      	movs	r3, #0
 801ee9a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ee9c:	e7e1      	b.n	801ee62 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ee9e:	78fb      	ldrb	r3, [r7, #3]
 801eea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eea4:	00db      	lsls	r3, r3, #3
 801eea6:	687a      	ldr	r2, [r7, #4]
 801eea8:	4413      	add	r3, r2
 801eeaa:	3304      	adds	r3, #4
 801eeac:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801eeae:	68bb      	ldr	r3, [r7, #8]
 801eeb0:	78fa      	ldrb	r2, [r7, #3]
 801eeb2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801eeb4:	693b      	ldr	r3, [r7, #16]
 801eeb6:	b2da      	uxtb	r2, r3
 801eeb8:	68bb      	ldr	r3, [r7, #8]
 801eeba:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801eebc:	68bb      	ldr	r3, [r7, #8]
 801eebe:	68fa      	ldr	r2, [r7, #12]
 801eec0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801eec2:	687a      	ldr	r2, [r7, #4]
 801eec4:	697b      	ldr	r3, [r7, #20]
 801eec6:	3380      	adds	r3, #128	; 0x80
 801eec8:	009b      	lsls	r3, r3, #2
 801eeca:	4413      	add	r3, r2
 801eecc:	68ba      	ldr	r2, [r7, #8]
 801eece:	605a      	str	r2, [r3, #4]
	return true;
 801eed0:	2301      	movs	r3, #1
}
 801eed2:	4618      	mov	r0, r3
 801eed4:	3718      	adds	r7, #24
 801eed6:	46bd      	mov	sp, r7
 801eed8:	bd80      	pop	{r7, pc}
 801eeda:	bf00      	nop
 801eedc:	08027954 	.word	0x08027954

0801eee0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801eee0:	b580      	push	{r7, lr}
 801eee2:	b086      	sub	sp, #24
 801eee4:	af00      	add	r7, sp, #0
 801eee6:	6078      	str	r0, [r7, #4]
 801eee8:	460b      	mov	r3, r1
 801eeea:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801eeec:	2305      	movs	r3, #5
 801eeee:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801eef0:	4829      	ldr	r0, [pc, #164]	; (801ef98 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 801eef2:	f7ff fe8f 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801eef6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	b2db      	uxtb	r3, r3
 801eefc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801eefe:	78fb      	ldrb	r3, [r7, #3]
 801ef00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ef04:	687a      	ldr	r2, [r7, #4]
 801ef06:	00db      	lsls	r3, r3, #3
 801ef08:	4413      	add	r3, r2
 801ef0a:	689b      	ldr	r3, [r3, #8]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d001      	beq.n	801ef14 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 801ef10:	2300      	movs	r3, #0
 801ef12:	e03c      	b.n	801ef8e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ef14:	693b      	ldr	r3, [r7, #16]
 801ef16:	2bff      	cmp	r3, #255	; 0xff
 801ef18:	d901      	bls.n	801ef1e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 801ef1a:	2300      	movs	r3, #0
 801ef1c:	e037      	b.n	801ef8e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ef1e:	687a      	ldr	r2, [r7, #4]
 801ef20:	697b      	ldr	r3, [r7, #20]
 801ef22:	3380      	adds	r3, #128	; 0x80
 801ef24:	009b      	lsls	r3, r3, #2
 801ef26:	4413      	add	r3, r2
 801ef28:	685b      	ldr	r3, [r3, #4]
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	d015      	beq.n	801ef5a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ef2e:	687a      	ldr	r2, [r7, #4]
 801ef30:	697b      	ldr	r3, [r7, #20]
 801ef32:	3380      	adds	r3, #128	; 0x80
 801ef34:	009b      	lsls	r3, r3, #2
 801ef36:	4413      	add	r3, r2
 801ef38:	685b      	ldr	r3, [r3, #4]
 801ef3a:	685b      	ldr	r3, [r3, #4]
 801ef3c:	68fa      	ldr	r2, [r7, #12]
 801ef3e:	429a      	cmp	r2, r3
 801ef40:	d101      	bne.n	801ef46 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 801ef42:	2300      	movs	r3, #0
 801ef44:	e023      	b.n	801ef8e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 801ef46:	697b      	ldr	r3, [r7, #20]
 801ef48:	3301      	adds	r3, #1
 801ef4a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ef4c:	697b      	ldr	r3, [r7, #20]
 801ef4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ef52:	d1e4      	bne.n	801ef1e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 801ef54:	2300      	movs	r3, #0
 801ef56:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ef58:	e7e1      	b.n	801ef1e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ef5a:	78fb      	ldrb	r3, [r7, #3]
 801ef5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ef60:	00db      	lsls	r3, r3, #3
 801ef62:	687a      	ldr	r2, [r7, #4]
 801ef64:	4413      	add	r3, r2
 801ef66:	3304      	adds	r3, #4
 801ef68:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801ef6a:	68bb      	ldr	r3, [r7, #8]
 801ef6c:	78fa      	ldrb	r2, [r7, #3]
 801ef6e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ef70:	693b      	ldr	r3, [r7, #16]
 801ef72:	b2da      	uxtb	r2, r3
 801ef74:	68bb      	ldr	r3, [r7, #8]
 801ef76:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ef78:	68bb      	ldr	r3, [r7, #8]
 801ef7a:	68fa      	ldr	r2, [r7, #12]
 801ef7c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ef7e:	687a      	ldr	r2, [r7, #4]
 801ef80:	697b      	ldr	r3, [r7, #20]
 801ef82:	3380      	adds	r3, #128	; 0x80
 801ef84:	009b      	lsls	r3, r3, #2
 801ef86:	4413      	add	r3, r2
 801ef88:	68ba      	ldr	r2, [r7, #8]
 801ef8a:	605a      	str	r2, [r3, #4]
	return true;
 801ef8c:	2301      	movs	r3, #1
}
 801ef8e:	4618      	mov	r0, r3
 801ef90:	3718      	adds	r7, #24
 801ef92:	46bd      	mov	sp, r7
 801ef94:	bd80      	pop	{r7, pc}
 801ef96:	bf00      	nop
 801ef98:	08027938 	.word	0x08027938

0801ef9c <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ef9c:	b580      	push	{r7, lr}
 801ef9e:	b086      	sub	sp, #24
 801efa0:	af00      	add	r7, sp, #0
 801efa2:	6078      	str	r0, [r7, #4]
 801efa4:	460b      	mov	r3, r1
 801efa6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801efa8:	2304      	movs	r3, #4
 801efaa:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801efac:	4829      	ldr	r0, [pc, #164]	; (801f054 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 801efae:	f7ff fe31 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801efb2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801efb4:	68fb      	ldr	r3, [r7, #12]
 801efb6:	b2db      	uxtb	r3, r3
 801efb8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801efba:	78fb      	ldrb	r3, [r7, #3]
 801efbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801efc0:	687a      	ldr	r2, [r7, #4]
 801efc2:	00db      	lsls	r3, r3, #3
 801efc4:	4413      	add	r3, r2
 801efc6:	689b      	ldr	r3, [r3, #8]
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d001      	beq.n	801efd0 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 801efcc:	2300      	movs	r3, #0
 801efce:	e03c      	b.n	801f04a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801efd0:	693b      	ldr	r3, [r7, #16]
 801efd2:	2bff      	cmp	r3, #255	; 0xff
 801efd4:	d901      	bls.n	801efda <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 801efd6:	2300      	movs	r3, #0
 801efd8:	e037      	b.n	801f04a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801efda:	687a      	ldr	r2, [r7, #4]
 801efdc:	697b      	ldr	r3, [r7, #20]
 801efde:	3380      	adds	r3, #128	; 0x80
 801efe0:	009b      	lsls	r3, r3, #2
 801efe2:	4413      	add	r3, r2
 801efe4:	685b      	ldr	r3, [r3, #4]
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d015      	beq.n	801f016 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801efea:	687a      	ldr	r2, [r7, #4]
 801efec:	697b      	ldr	r3, [r7, #20]
 801efee:	3380      	adds	r3, #128	; 0x80
 801eff0:	009b      	lsls	r3, r3, #2
 801eff2:	4413      	add	r3, r2
 801eff4:	685b      	ldr	r3, [r3, #4]
 801eff6:	685b      	ldr	r3, [r3, #4]
 801eff8:	68fa      	ldr	r2, [r7, #12]
 801effa:	429a      	cmp	r2, r3
 801effc:	d101      	bne.n	801f002 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 801effe:	2300      	movs	r3, #0
 801f000:	e023      	b.n	801f04a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 801f002:	697b      	ldr	r3, [r7, #20]
 801f004:	3301      	adds	r3, #1
 801f006:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f008:	697b      	ldr	r3, [r7, #20]
 801f00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f00e:	d1e4      	bne.n	801efda <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 801f010:	2300      	movs	r3, #0
 801f012:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f014:	e7e1      	b.n	801efda <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f016:	78fb      	ldrb	r3, [r7, #3]
 801f018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f01c:	00db      	lsls	r3, r3, #3
 801f01e:	687a      	ldr	r2, [r7, #4]
 801f020:	4413      	add	r3, r2
 801f022:	3304      	adds	r3, #4
 801f024:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f026:	68bb      	ldr	r3, [r7, #8]
 801f028:	78fa      	ldrb	r2, [r7, #3]
 801f02a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f02c:	693b      	ldr	r3, [r7, #16]
 801f02e:	b2da      	uxtb	r2, r3
 801f030:	68bb      	ldr	r3, [r7, #8]
 801f032:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f034:	68bb      	ldr	r3, [r7, #8]
 801f036:	68fa      	ldr	r2, [r7, #12]
 801f038:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f03a:	687a      	ldr	r2, [r7, #4]
 801f03c:	697b      	ldr	r3, [r7, #20]
 801f03e:	3380      	adds	r3, #128	; 0x80
 801f040:	009b      	lsls	r3, r3, #2
 801f042:	4413      	add	r3, r2
 801f044:	68ba      	ldr	r2, [r7, #8]
 801f046:	605a      	str	r2, [r3, #4]
	return true;
 801f048:	2301      	movs	r3, #1
}
 801f04a:	4618      	mov	r0, r3
 801f04c:	3718      	adds	r7, #24
 801f04e:	46bd      	mov	sp, r7
 801f050:	bd80      	pop	{r7, pc}
 801f052:	bf00      	nop
 801f054:	08027920 	.word	0x08027920

0801f058 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f058:	b580      	push	{r7, lr}
 801f05a:	b086      	sub	sp, #24
 801f05c:	af00      	add	r7, sp, #0
 801f05e:	6078      	str	r0, [r7, #4]
 801f060:	460b      	mov	r3, r1
 801f062:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f064:	2301      	movs	r3, #1
 801f066:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f068:	4829      	ldr	r0, [pc, #164]	; (801f110 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 801f06a:	f7ff fdd3 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f06e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	b2db      	uxtb	r3, r3
 801f074:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f076:	78fb      	ldrb	r3, [r7, #3]
 801f078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f07c:	687a      	ldr	r2, [r7, #4]
 801f07e:	00db      	lsls	r3, r3, #3
 801f080:	4413      	add	r3, r2
 801f082:	689b      	ldr	r3, [r3, #8]
 801f084:	2b00      	cmp	r3, #0
 801f086:	d001      	beq.n	801f08c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f088:	2300      	movs	r3, #0
 801f08a:	e03c      	b.n	801f106 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f08c:	693b      	ldr	r3, [r7, #16]
 801f08e:	2bff      	cmp	r3, #255	; 0xff
 801f090:	d901      	bls.n	801f096 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 801f092:	2300      	movs	r3, #0
 801f094:	e037      	b.n	801f106 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f096:	687a      	ldr	r2, [r7, #4]
 801f098:	697b      	ldr	r3, [r7, #20]
 801f09a:	3380      	adds	r3, #128	; 0x80
 801f09c:	009b      	lsls	r3, r3, #2
 801f09e:	4413      	add	r3, r2
 801f0a0:	685b      	ldr	r3, [r3, #4]
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d015      	beq.n	801f0d2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f0a6:	687a      	ldr	r2, [r7, #4]
 801f0a8:	697b      	ldr	r3, [r7, #20]
 801f0aa:	3380      	adds	r3, #128	; 0x80
 801f0ac:	009b      	lsls	r3, r3, #2
 801f0ae:	4413      	add	r3, r2
 801f0b0:	685b      	ldr	r3, [r3, #4]
 801f0b2:	685b      	ldr	r3, [r3, #4]
 801f0b4:	68fa      	ldr	r2, [r7, #12]
 801f0b6:	429a      	cmp	r2, r3
 801f0b8:	d101      	bne.n	801f0be <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 801f0ba:	2300      	movs	r3, #0
 801f0bc:	e023      	b.n	801f106 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 801f0be:	697b      	ldr	r3, [r7, #20]
 801f0c0:	3301      	adds	r3, #1
 801f0c2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f0c4:	697b      	ldr	r3, [r7, #20]
 801f0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f0ca:	d1e4      	bne.n	801f096 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 801f0cc:	2300      	movs	r3, #0
 801f0ce:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f0d0:	e7e1      	b.n	801f096 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f0d2:	78fb      	ldrb	r3, [r7, #3]
 801f0d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f0d8:	00db      	lsls	r3, r3, #3
 801f0da:	687a      	ldr	r2, [r7, #4]
 801f0dc:	4413      	add	r3, r2
 801f0de:	3304      	adds	r3, #4
 801f0e0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f0e2:	68bb      	ldr	r3, [r7, #8]
 801f0e4:	78fa      	ldrb	r2, [r7, #3]
 801f0e6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f0e8:	693b      	ldr	r3, [r7, #16]
 801f0ea:	b2da      	uxtb	r2, r3
 801f0ec:	68bb      	ldr	r3, [r7, #8]
 801f0ee:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f0f0:	68bb      	ldr	r3, [r7, #8]
 801f0f2:	68fa      	ldr	r2, [r7, #12]
 801f0f4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f0f6:	687a      	ldr	r2, [r7, #4]
 801f0f8:	697b      	ldr	r3, [r7, #20]
 801f0fa:	3380      	adds	r3, #128	; 0x80
 801f0fc:	009b      	lsls	r3, r3, #2
 801f0fe:	4413      	add	r3, r2
 801f100:	68ba      	ldr	r2, [r7, #8]
 801f102:	605a      	str	r2, [r3, #4]
	return true;
 801f104:	2301      	movs	r3, #1
}
 801f106:	4618      	mov	r0, r3
 801f108:	3718      	adds	r7, #24
 801f10a:	46bd      	mov	sp, r7
 801f10c:	bd80      	pop	{r7, pc}
 801f10e:	bf00      	nop
 801f110:	08027908 	.word	0x08027908

0801f114 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f114:	b580      	push	{r7, lr}
 801f116:	b086      	sub	sp, #24
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
 801f11c:	460b      	mov	r3, r1
 801f11e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f120:	2308      	movs	r3, #8
 801f122:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f124:	4829      	ldr	r0, [pc, #164]	; (801f1cc <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 801f126:	f7ff fd75 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f12a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f12c:	68fb      	ldr	r3, [r7, #12]
 801f12e:	b2db      	uxtb	r3, r3
 801f130:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f132:	78fb      	ldrb	r3, [r7, #3]
 801f134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f138:	687a      	ldr	r2, [r7, #4]
 801f13a:	00db      	lsls	r3, r3, #3
 801f13c:	4413      	add	r3, r2
 801f13e:	689b      	ldr	r3, [r3, #8]
 801f140:	2b00      	cmp	r3, #0
 801f142:	d001      	beq.n	801f148 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f144:	2300      	movs	r3, #0
 801f146:	e03c      	b.n	801f1c2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f148:	693b      	ldr	r3, [r7, #16]
 801f14a:	2bff      	cmp	r3, #255	; 0xff
 801f14c:	d901      	bls.n	801f152 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 801f14e:	2300      	movs	r3, #0
 801f150:	e037      	b.n	801f1c2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f152:	687a      	ldr	r2, [r7, #4]
 801f154:	697b      	ldr	r3, [r7, #20]
 801f156:	3380      	adds	r3, #128	; 0x80
 801f158:	009b      	lsls	r3, r3, #2
 801f15a:	4413      	add	r3, r2
 801f15c:	685b      	ldr	r3, [r3, #4]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d015      	beq.n	801f18e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f162:	687a      	ldr	r2, [r7, #4]
 801f164:	697b      	ldr	r3, [r7, #20]
 801f166:	3380      	adds	r3, #128	; 0x80
 801f168:	009b      	lsls	r3, r3, #2
 801f16a:	4413      	add	r3, r2
 801f16c:	685b      	ldr	r3, [r3, #4]
 801f16e:	685b      	ldr	r3, [r3, #4]
 801f170:	68fa      	ldr	r2, [r7, #12]
 801f172:	429a      	cmp	r2, r3
 801f174:	d101      	bne.n	801f17a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 801f176:	2300      	movs	r3, #0
 801f178:	e023      	b.n	801f1c2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 801f17a:	697b      	ldr	r3, [r7, #20]
 801f17c:	3301      	adds	r3, #1
 801f17e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f180:	697b      	ldr	r3, [r7, #20]
 801f182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f186:	d1e4      	bne.n	801f152 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 801f188:	2300      	movs	r3, #0
 801f18a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f18c:	e7e1      	b.n	801f152 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f18e:	78fb      	ldrb	r3, [r7, #3]
 801f190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f194:	00db      	lsls	r3, r3, #3
 801f196:	687a      	ldr	r2, [r7, #4]
 801f198:	4413      	add	r3, r2
 801f19a:	3304      	adds	r3, #4
 801f19c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f19e:	68bb      	ldr	r3, [r7, #8]
 801f1a0:	78fa      	ldrb	r2, [r7, #3]
 801f1a2:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f1a4:	693b      	ldr	r3, [r7, #16]
 801f1a6:	b2da      	uxtb	r2, r3
 801f1a8:	68bb      	ldr	r3, [r7, #8]
 801f1aa:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f1ac:	68bb      	ldr	r3, [r7, #8]
 801f1ae:	68fa      	ldr	r2, [r7, #12]
 801f1b0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f1b2:	687a      	ldr	r2, [r7, #4]
 801f1b4:	697b      	ldr	r3, [r7, #20]
 801f1b6:	3380      	adds	r3, #128	; 0x80
 801f1b8:	009b      	lsls	r3, r3, #2
 801f1ba:	4413      	add	r3, r2
 801f1bc:	68ba      	ldr	r2, [r7, #8]
 801f1be:	605a      	str	r2, [r3, #4]
	return true;
 801f1c0:	2301      	movs	r3, #1
}
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	3718      	adds	r7, #24
 801f1c6:	46bd      	mov	sp, r7
 801f1c8:	bd80      	pop	{r7, pc}
 801f1ca:	bf00      	nop
 801f1cc:	080278e4 	.word	0x080278e4

0801f1d0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f1d0:	b580      	push	{r7, lr}
 801f1d2:	b086      	sub	sp, #24
 801f1d4:	af00      	add	r7, sp, #0
 801f1d6:	6078      	str	r0, [r7, #4]
 801f1d8:	460b      	mov	r3, r1
 801f1da:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f1dc:	2324      	movs	r3, #36	; 0x24
 801f1de:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f1e0:	4829      	ldr	r0, [pc, #164]	; (801f288 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 801f1e2:	f7ff fd17 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f1e6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	b2db      	uxtb	r3, r3
 801f1ec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f1ee:	78fb      	ldrb	r3, [r7, #3]
 801f1f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f1f4:	687a      	ldr	r2, [r7, #4]
 801f1f6:	00db      	lsls	r3, r3, #3
 801f1f8:	4413      	add	r3, r2
 801f1fa:	689b      	ldr	r3, [r3, #8]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d001      	beq.n	801f204 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f200:	2300      	movs	r3, #0
 801f202:	e03c      	b.n	801f27e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f204:	693b      	ldr	r3, [r7, #16]
 801f206:	2bff      	cmp	r3, #255	; 0xff
 801f208:	d901      	bls.n	801f20e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 801f20a:	2300      	movs	r3, #0
 801f20c:	e037      	b.n	801f27e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f20e:	687a      	ldr	r2, [r7, #4]
 801f210:	697b      	ldr	r3, [r7, #20]
 801f212:	3380      	adds	r3, #128	; 0x80
 801f214:	009b      	lsls	r3, r3, #2
 801f216:	4413      	add	r3, r2
 801f218:	685b      	ldr	r3, [r3, #4]
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d015      	beq.n	801f24a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f21e:	687a      	ldr	r2, [r7, #4]
 801f220:	697b      	ldr	r3, [r7, #20]
 801f222:	3380      	adds	r3, #128	; 0x80
 801f224:	009b      	lsls	r3, r3, #2
 801f226:	4413      	add	r3, r2
 801f228:	685b      	ldr	r3, [r3, #4]
 801f22a:	685b      	ldr	r3, [r3, #4]
 801f22c:	68fa      	ldr	r2, [r7, #12]
 801f22e:	429a      	cmp	r2, r3
 801f230:	d101      	bne.n	801f236 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 801f232:	2300      	movs	r3, #0
 801f234:	e023      	b.n	801f27e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 801f236:	697b      	ldr	r3, [r7, #20]
 801f238:	3301      	adds	r3, #1
 801f23a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f23c:	697b      	ldr	r3, [r7, #20]
 801f23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f242:	d1e4      	bne.n	801f20e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 801f244:	2300      	movs	r3, #0
 801f246:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f248:	e7e1      	b.n	801f20e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f24a:	78fb      	ldrb	r3, [r7, #3]
 801f24c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f250:	00db      	lsls	r3, r3, #3
 801f252:	687a      	ldr	r2, [r7, #4]
 801f254:	4413      	add	r3, r2
 801f256:	3304      	adds	r3, #4
 801f258:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f25a:	68bb      	ldr	r3, [r7, #8]
 801f25c:	78fa      	ldrb	r2, [r7, #3]
 801f25e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f260:	693b      	ldr	r3, [r7, #16]
 801f262:	b2da      	uxtb	r2, r3
 801f264:	68bb      	ldr	r3, [r7, #8]
 801f266:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f268:	68bb      	ldr	r3, [r7, #8]
 801f26a:	68fa      	ldr	r2, [r7, #12]
 801f26c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f26e:	687a      	ldr	r2, [r7, #4]
 801f270:	697b      	ldr	r3, [r7, #20]
 801f272:	3380      	adds	r3, #128	; 0x80
 801f274:	009b      	lsls	r3, r3, #2
 801f276:	4413      	add	r3, r2
 801f278:	68ba      	ldr	r2, [r7, #8]
 801f27a:	605a      	str	r2, [r3, #4]
	return true;
 801f27c:	2301      	movs	r3, #1
}
 801f27e:	4618      	mov	r0, r3
 801f280:	3718      	adds	r7, #24
 801f282:	46bd      	mov	sp, r7
 801f284:	bd80      	pop	{r7, pc}
 801f286:	bf00      	nop
 801f288:	080278c0 	.word	0x080278c0

0801f28c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f28c:	b580      	push	{r7, lr}
 801f28e:	b086      	sub	sp, #24
 801f290:	af00      	add	r7, sp, #0
 801f292:	6078      	str	r0, [r7, #4]
 801f294:	460b      	mov	r3, r1
 801f296:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f298:	2304      	movs	r3, #4
 801f29a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f29c:	4829      	ldr	r0, [pc, #164]	; (801f344 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 801f29e:	f7ff fcb9 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f2a2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f2a4:	68fb      	ldr	r3, [r7, #12]
 801f2a6:	b2db      	uxtb	r3, r3
 801f2a8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f2aa:	78fb      	ldrb	r3, [r7, #3]
 801f2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f2b0:	687a      	ldr	r2, [r7, #4]
 801f2b2:	00db      	lsls	r3, r3, #3
 801f2b4:	4413      	add	r3, r2
 801f2b6:	689b      	ldr	r3, [r3, #8]
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d001      	beq.n	801f2c0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f2bc:	2300      	movs	r3, #0
 801f2be:	e03c      	b.n	801f33a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f2c0:	693b      	ldr	r3, [r7, #16]
 801f2c2:	2bff      	cmp	r3, #255	; 0xff
 801f2c4:	d901      	bls.n	801f2ca <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 801f2c6:	2300      	movs	r3, #0
 801f2c8:	e037      	b.n	801f33a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f2ca:	687a      	ldr	r2, [r7, #4]
 801f2cc:	697b      	ldr	r3, [r7, #20]
 801f2ce:	3380      	adds	r3, #128	; 0x80
 801f2d0:	009b      	lsls	r3, r3, #2
 801f2d2:	4413      	add	r3, r2
 801f2d4:	685b      	ldr	r3, [r3, #4]
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d015      	beq.n	801f306 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f2da:	687a      	ldr	r2, [r7, #4]
 801f2dc:	697b      	ldr	r3, [r7, #20]
 801f2de:	3380      	adds	r3, #128	; 0x80
 801f2e0:	009b      	lsls	r3, r3, #2
 801f2e2:	4413      	add	r3, r2
 801f2e4:	685b      	ldr	r3, [r3, #4]
 801f2e6:	685b      	ldr	r3, [r3, #4]
 801f2e8:	68fa      	ldr	r2, [r7, #12]
 801f2ea:	429a      	cmp	r2, r3
 801f2ec:	d101      	bne.n	801f2f2 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 801f2ee:	2300      	movs	r3, #0
 801f2f0:	e023      	b.n	801f33a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 801f2f2:	697b      	ldr	r3, [r7, #20]
 801f2f4:	3301      	adds	r3, #1
 801f2f6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f2f8:	697b      	ldr	r3, [r7, #20]
 801f2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f2fe:	d1e4      	bne.n	801f2ca <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 801f300:	2300      	movs	r3, #0
 801f302:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f304:	e7e1      	b.n	801f2ca <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f306:	78fb      	ldrb	r3, [r7, #3]
 801f308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f30c:	00db      	lsls	r3, r3, #3
 801f30e:	687a      	ldr	r2, [r7, #4]
 801f310:	4413      	add	r3, r2
 801f312:	3304      	adds	r3, #4
 801f314:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f316:	68bb      	ldr	r3, [r7, #8]
 801f318:	78fa      	ldrb	r2, [r7, #3]
 801f31a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f31c:	693b      	ldr	r3, [r7, #16]
 801f31e:	b2da      	uxtb	r2, r3
 801f320:	68bb      	ldr	r3, [r7, #8]
 801f322:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	68fa      	ldr	r2, [r7, #12]
 801f328:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f32a:	687a      	ldr	r2, [r7, #4]
 801f32c:	697b      	ldr	r3, [r7, #20]
 801f32e:	3380      	adds	r3, #128	; 0x80
 801f330:	009b      	lsls	r3, r3, #2
 801f332:	4413      	add	r3, r2
 801f334:	68ba      	ldr	r2, [r7, #8]
 801f336:	605a      	str	r2, [r3, #4]
	return true;
 801f338:	2301      	movs	r3, #1
}
 801f33a:	4618      	mov	r0, r3
 801f33c:	3718      	adds	r7, #24
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}
 801f342:	bf00      	nop
 801f344:	0802789c 	.word	0x0802789c

0801f348 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f348:	b580      	push	{r7, lr}
 801f34a:	b086      	sub	sp, #24
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
 801f350:	460b      	mov	r3, r1
 801f352:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f354:	2310      	movs	r3, #16
 801f356:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f358:	4829      	ldr	r0, [pc, #164]	; (801f400 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 801f35a:	f7ff fc5b 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f35e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f360:	68fb      	ldr	r3, [r7, #12]
 801f362:	b2db      	uxtb	r3, r3
 801f364:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f366:	78fb      	ldrb	r3, [r7, #3]
 801f368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f36c:	687a      	ldr	r2, [r7, #4]
 801f36e:	00db      	lsls	r3, r3, #3
 801f370:	4413      	add	r3, r2
 801f372:	689b      	ldr	r3, [r3, #8]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d001      	beq.n	801f37c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 801f378:	2300      	movs	r3, #0
 801f37a:	e03c      	b.n	801f3f6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f37c:	693b      	ldr	r3, [r7, #16]
 801f37e:	2bff      	cmp	r3, #255	; 0xff
 801f380:	d901      	bls.n	801f386 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 801f382:	2300      	movs	r3, #0
 801f384:	e037      	b.n	801f3f6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f386:	687a      	ldr	r2, [r7, #4]
 801f388:	697b      	ldr	r3, [r7, #20]
 801f38a:	3380      	adds	r3, #128	; 0x80
 801f38c:	009b      	lsls	r3, r3, #2
 801f38e:	4413      	add	r3, r2
 801f390:	685b      	ldr	r3, [r3, #4]
 801f392:	2b00      	cmp	r3, #0
 801f394:	d015      	beq.n	801f3c2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f396:	687a      	ldr	r2, [r7, #4]
 801f398:	697b      	ldr	r3, [r7, #20]
 801f39a:	3380      	adds	r3, #128	; 0x80
 801f39c:	009b      	lsls	r3, r3, #2
 801f39e:	4413      	add	r3, r2
 801f3a0:	685b      	ldr	r3, [r3, #4]
 801f3a2:	685b      	ldr	r3, [r3, #4]
 801f3a4:	68fa      	ldr	r2, [r7, #12]
 801f3a6:	429a      	cmp	r2, r3
 801f3a8:	d101      	bne.n	801f3ae <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 801f3aa:	2300      	movs	r3, #0
 801f3ac:	e023      	b.n	801f3f6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 801f3ae:	697b      	ldr	r3, [r7, #20]
 801f3b0:	3301      	adds	r3, #1
 801f3b2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f3b4:	697b      	ldr	r3, [r7, #20]
 801f3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f3ba:	d1e4      	bne.n	801f386 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 801f3bc:	2300      	movs	r3, #0
 801f3be:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f3c0:	e7e1      	b.n	801f386 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f3c2:	78fb      	ldrb	r3, [r7, #3]
 801f3c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f3c8:	00db      	lsls	r3, r3, #3
 801f3ca:	687a      	ldr	r2, [r7, #4]
 801f3cc:	4413      	add	r3, r2
 801f3ce:	3304      	adds	r3, #4
 801f3d0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f3d2:	68bb      	ldr	r3, [r7, #8]
 801f3d4:	78fa      	ldrb	r2, [r7, #3]
 801f3d6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f3d8:	693b      	ldr	r3, [r7, #16]
 801f3da:	b2da      	uxtb	r2, r3
 801f3dc:	68bb      	ldr	r3, [r7, #8]
 801f3de:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f3e0:	68bb      	ldr	r3, [r7, #8]
 801f3e2:	68fa      	ldr	r2, [r7, #12]
 801f3e4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f3e6:	687a      	ldr	r2, [r7, #4]
 801f3e8:	697b      	ldr	r3, [r7, #20]
 801f3ea:	3380      	adds	r3, #128	; 0x80
 801f3ec:	009b      	lsls	r3, r3, #2
 801f3ee:	4413      	add	r3, r2
 801f3f0:	68ba      	ldr	r2, [r7, #8]
 801f3f2:	605a      	str	r2, [r3, #4]
	return true;
 801f3f4:	2301      	movs	r3, #1
}
 801f3f6:	4618      	mov	r0, r3
 801f3f8:	3718      	adds	r7, #24
 801f3fa:	46bd      	mov	sp, r7
 801f3fc:	bd80      	pop	{r7, pc}
 801f3fe:	bf00      	nop
 801f400:	0802787c 	.word	0x0802787c

0801f404 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f404:	b580      	push	{r7, lr}
 801f406:	b086      	sub	sp, #24
 801f408:	af00      	add	r7, sp, #0
 801f40a:	6078      	str	r0, [r7, #4]
 801f40c:	460b      	mov	r3, r1
 801f40e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f410:	2310      	movs	r3, #16
 801f412:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f414:	4829      	ldr	r0, [pc, #164]	; (801f4bc <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 801f416:	f7ff fbfd 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f41a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f41c:	68fb      	ldr	r3, [r7, #12]
 801f41e:	b2db      	uxtb	r3, r3
 801f420:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f422:	78fb      	ldrb	r3, [r7, #3]
 801f424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f428:	687a      	ldr	r2, [r7, #4]
 801f42a:	00db      	lsls	r3, r3, #3
 801f42c:	4413      	add	r3, r2
 801f42e:	689b      	ldr	r3, [r3, #8]
 801f430:	2b00      	cmp	r3, #0
 801f432:	d001      	beq.n	801f438 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f434:	2300      	movs	r3, #0
 801f436:	e03c      	b.n	801f4b2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f438:	693b      	ldr	r3, [r7, #16]
 801f43a:	2bff      	cmp	r3, #255	; 0xff
 801f43c:	d901      	bls.n	801f442 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 801f43e:	2300      	movs	r3, #0
 801f440:	e037      	b.n	801f4b2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f442:	687a      	ldr	r2, [r7, #4]
 801f444:	697b      	ldr	r3, [r7, #20]
 801f446:	3380      	adds	r3, #128	; 0x80
 801f448:	009b      	lsls	r3, r3, #2
 801f44a:	4413      	add	r3, r2
 801f44c:	685b      	ldr	r3, [r3, #4]
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d015      	beq.n	801f47e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f452:	687a      	ldr	r2, [r7, #4]
 801f454:	697b      	ldr	r3, [r7, #20]
 801f456:	3380      	adds	r3, #128	; 0x80
 801f458:	009b      	lsls	r3, r3, #2
 801f45a:	4413      	add	r3, r2
 801f45c:	685b      	ldr	r3, [r3, #4]
 801f45e:	685b      	ldr	r3, [r3, #4]
 801f460:	68fa      	ldr	r2, [r7, #12]
 801f462:	429a      	cmp	r2, r3
 801f464:	d101      	bne.n	801f46a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 801f466:	2300      	movs	r3, #0
 801f468:	e023      	b.n	801f4b2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 801f46a:	697b      	ldr	r3, [r7, #20]
 801f46c:	3301      	adds	r3, #1
 801f46e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f470:	697b      	ldr	r3, [r7, #20]
 801f472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f476:	d1e4      	bne.n	801f442 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 801f478:	2300      	movs	r3, #0
 801f47a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f47c:	e7e1      	b.n	801f442 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f47e:	78fb      	ldrb	r3, [r7, #3]
 801f480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f484:	00db      	lsls	r3, r3, #3
 801f486:	687a      	ldr	r2, [r7, #4]
 801f488:	4413      	add	r3, r2
 801f48a:	3304      	adds	r3, #4
 801f48c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f48e:	68bb      	ldr	r3, [r7, #8]
 801f490:	78fa      	ldrb	r2, [r7, #3]
 801f492:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f494:	693b      	ldr	r3, [r7, #16]
 801f496:	b2da      	uxtb	r2, r3
 801f498:	68bb      	ldr	r3, [r7, #8]
 801f49a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f49c:	68bb      	ldr	r3, [r7, #8]
 801f49e:	68fa      	ldr	r2, [r7, #12]
 801f4a0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f4a2:	687a      	ldr	r2, [r7, #4]
 801f4a4:	697b      	ldr	r3, [r7, #20]
 801f4a6:	3380      	adds	r3, #128	; 0x80
 801f4a8:	009b      	lsls	r3, r3, #2
 801f4aa:	4413      	add	r3, r2
 801f4ac:	68ba      	ldr	r2, [r7, #8]
 801f4ae:	605a      	str	r2, [r3, #4]
	return true;
 801f4b0:	2301      	movs	r3, #1
}
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	3718      	adds	r7, #24
 801f4b6:	46bd      	mov	sp, r7
 801f4b8:	bd80      	pop	{r7, pc}
 801f4ba:	bf00      	nop
 801f4bc:	0802785c 	.word	0x0802785c

0801f4c0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f4c0:	b580      	push	{r7, lr}
 801f4c2:	b086      	sub	sp, #24
 801f4c4:	af00      	add	r7, sp, #0
 801f4c6:	6078      	str	r0, [r7, #4]
 801f4c8:	460b      	mov	r3, r1
 801f4ca:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f4cc:	2305      	movs	r3, #5
 801f4ce:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f4d0:	4829      	ldr	r0, [pc, #164]	; (801f578 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 801f4d2:	f7ff fb9f 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f4d6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f4d8:	68fb      	ldr	r3, [r7, #12]
 801f4da:	b2db      	uxtb	r3, r3
 801f4dc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f4de:	78fb      	ldrb	r3, [r7, #3]
 801f4e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f4e4:	687a      	ldr	r2, [r7, #4]
 801f4e6:	00db      	lsls	r3, r3, #3
 801f4e8:	4413      	add	r3, r2
 801f4ea:	689b      	ldr	r3, [r3, #8]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d001      	beq.n	801f4f4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	e03c      	b.n	801f56e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f4f4:	693b      	ldr	r3, [r7, #16]
 801f4f6:	2bff      	cmp	r3, #255	; 0xff
 801f4f8:	d901      	bls.n	801f4fe <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 801f4fa:	2300      	movs	r3, #0
 801f4fc:	e037      	b.n	801f56e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f4fe:	687a      	ldr	r2, [r7, #4]
 801f500:	697b      	ldr	r3, [r7, #20]
 801f502:	3380      	adds	r3, #128	; 0x80
 801f504:	009b      	lsls	r3, r3, #2
 801f506:	4413      	add	r3, r2
 801f508:	685b      	ldr	r3, [r3, #4]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d015      	beq.n	801f53a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f50e:	687a      	ldr	r2, [r7, #4]
 801f510:	697b      	ldr	r3, [r7, #20]
 801f512:	3380      	adds	r3, #128	; 0x80
 801f514:	009b      	lsls	r3, r3, #2
 801f516:	4413      	add	r3, r2
 801f518:	685b      	ldr	r3, [r3, #4]
 801f51a:	685b      	ldr	r3, [r3, #4]
 801f51c:	68fa      	ldr	r2, [r7, #12]
 801f51e:	429a      	cmp	r2, r3
 801f520:	d101      	bne.n	801f526 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 801f522:	2300      	movs	r3, #0
 801f524:	e023      	b.n	801f56e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	3301      	adds	r3, #1
 801f52a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f52c:	697b      	ldr	r3, [r7, #20]
 801f52e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f532:	d1e4      	bne.n	801f4fe <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 801f534:	2300      	movs	r3, #0
 801f536:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f538:	e7e1      	b.n	801f4fe <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f53a:	78fb      	ldrb	r3, [r7, #3]
 801f53c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f540:	00db      	lsls	r3, r3, #3
 801f542:	687a      	ldr	r2, [r7, #4]
 801f544:	4413      	add	r3, r2
 801f546:	3304      	adds	r3, #4
 801f548:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f54a:	68bb      	ldr	r3, [r7, #8]
 801f54c:	78fa      	ldrb	r2, [r7, #3]
 801f54e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f550:	693b      	ldr	r3, [r7, #16]
 801f552:	b2da      	uxtb	r2, r3
 801f554:	68bb      	ldr	r3, [r7, #8]
 801f556:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f558:	68bb      	ldr	r3, [r7, #8]
 801f55a:	68fa      	ldr	r2, [r7, #12]
 801f55c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f55e:	687a      	ldr	r2, [r7, #4]
 801f560:	697b      	ldr	r3, [r7, #20]
 801f562:	3380      	adds	r3, #128	; 0x80
 801f564:	009b      	lsls	r3, r3, #2
 801f566:	4413      	add	r3, r2
 801f568:	68ba      	ldr	r2, [r7, #8]
 801f56a:	605a      	str	r2, [r3, #4]
	return true;
 801f56c:	2301      	movs	r3, #1
}
 801f56e:	4618      	mov	r0, r3
 801f570:	3718      	adds	r7, #24
 801f572:	46bd      	mov	sp, r7
 801f574:	bd80      	pop	{r7, pc}
 801f576:	bf00      	nop
 801f578:	0802783c 	.word	0x0802783c

0801f57c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f57c:	b580      	push	{r7, lr}
 801f57e:	b086      	sub	sp, #24
 801f580:	af00      	add	r7, sp, #0
 801f582:	6078      	str	r0, [r7, #4]
 801f584:	460b      	mov	r3, r1
 801f586:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f588:	2304      	movs	r3, #4
 801f58a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f58c:	4829      	ldr	r0, [pc, #164]	; (801f634 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 801f58e:	f7ff fb41 	bl	801ec14 <_ZNKSt9type_info9hash_codeEv>
 801f592:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	b2db      	uxtb	r3, r3
 801f598:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f59a:	78fb      	ldrb	r3, [r7, #3]
 801f59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f5a0:	687a      	ldr	r2, [r7, #4]
 801f5a2:	00db      	lsls	r3, r3, #3
 801f5a4:	4413      	add	r3, r2
 801f5a6:	689b      	ldr	r3, [r3, #8]
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d001      	beq.n	801f5b0 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 801f5ac:	2300      	movs	r3, #0
 801f5ae:	e03c      	b.n	801f62a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f5b0:	693b      	ldr	r3, [r7, #16]
 801f5b2:	2bff      	cmp	r3, #255	; 0xff
 801f5b4:	d901      	bls.n	801f5ba <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	e037      	b.n	801f62a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f5ba:	687a      	ldr	r2, [r7, #4]
 801f5bc:	697b      	ldr	r3, [r7, #20]
 801f5be:	3380      	adds	r3, #128	; 0x80
 801f5c0:	009b      	lsls	r3, r3, #2
 801f5c2:	4413      	add	r3, r2
 801f5c4:	685b      	ldr	r3, [r3, #4]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d015      	beq.n	801f5f6 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f5ca:	687a      	ldr	r2, [r7, #4]
 801f5cc:	697b      	ldr	r3, [r7, #20]
 801f5ce:	3380      	adds	r3, #128	; 0x80
 801f5d0:	009b      	lsls	r3, r3, #2
 801f5d2:	4413      	add	r3, r2
 801f5d4:	685b      	ldr	r3, [r3, #4]
 801f5d6:	685b      	ldr	r3, [r3, #4]
 801f5d8:	68fa      	ldr	r2, [r7, #12]
 801f5da:	429a      	cmp	r2, r3
 801f5dc:	d101      	bne.n	801f5e2 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 801f5de:	2300      	movs	r3, #0
 801f5e0:	e023      	b.n	801f62a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 801f5e2:	697b      	ldr	r3, [r7, #20]
 801f5e4:	3301      	adds	r3, #1
 801f5e6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f5e8:	697b      	ldr	r3, [r7, #20]
 801f5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f5ee:	d1e4      	bne.n	801f5ba <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 801f5f0:	2300      	movs	r3, #0
 801f5f2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f5f4:	e7e1      	b.n	801f5ba <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f5f6:	78fb      	ldrb	r3, [r7, #3]
 801f5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f5fc:	00db      	lsls	r3, r3, #3
 801f5fe:	687a      	ldr	r2, [r7, #4]
 801f600:	4413      	add	r3, r2
 801f602:	3304      	adds	r3, #4
 801f604:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f606:	68bb      	ldr	r3, [r7, #8]
 801f608:	78fa      	ldrb	r2, [r7, #3]
 801f60a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f60c:	693b      	ldr	r3, [r7, #16]
 801f60e:	b2da      	uxtb	r2, r3
 801f610:	68bb      	ldr	r3, [r7, #8]
 801f612:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f614:	68bb      	ldr	r3, [r7, #8]
 801f616:	68fa      	ldr	r2, [r7, #12]
 801f618:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f61a:	687a      	ldr	r2, [r7, #4]
 801f61c:	697b      	ldr	r3, [r7, #20]
 801f61e:	3380      	adds	r3, #128	; 0x80
 801f620:	009b      	lsls	r3, r3, #2
 801f622:	4413      	add	r3, r2
 801f624:	68ba      	ldr	r2, [r7, #8]
 801f626:	605a      	str	r2, [r3, #4]
	return true;
 801f628:	2301      	movs	r3, #1
}
 801f62a:	4618      	mov	r0, r3
 801f62c:	3718      	adds	r7, #24
 801f62e:	46bd      	mov	sp, r7
 801f630:	bd80      	pop	{r7, pc}
 801f632:	bf00      	nop
 801f634:	0802781c 	.word	0x0802781c

0801f638 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
	PacketDefinition* def = retrieve(hash);

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 801f638:	b580      	push	{r7, lr}
 801f63a:	b086      	sub	sp, #24
 801f63c:	af00      	add	r7, sp, #0
 801f63e:	60f8      	str	r0, [r7, #12]
 801f640:	60b9      	str	r1, [r7, #8]
 801f642:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 801f644:	68bb      	ldr	r3, [r7, #8]
 801f646:	2b00      	cmp	r3, #0
 801f648:	d031      	beq.n	801f6ae <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 801f64a:	2300      	movs	r3, #0
 801f64c:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 801f64e:	68bb      	ldr	r3, [r7, #8]
 801f650:	785b      	ldrb	r3, [r3, #1]
 801f652:	461a      	mov	r2, r3
 801f654:	697b      	ldr	r3, [r7, #20]
 801f656:	4293      	cmp	r3, r2
 801f658:	d227      	bcs.n	801f6aa <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 801f65a:	68fb      	ldr	r3, [r7, #12]
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	3308      	adds	r3, #8
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	68b9      	ldr	r1, [r7, #8]
 801f664:	2201      	movs	r2, #1
 801f666:	68f8      	ldr	r0, [r7, #12]
 801f668:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 801f66a:	68fb      	ldr	r3, [r7, #12]
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	3308      	adds	r3, #8
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	6879      	ldr	r1, [r7, #4]
 801f674:	697a      	ldr	r2, [r7, #20]
 801f676:	4411      	add	r1, r2
 801f678:	68ba      	ldr	r2, [r7, #8]
 801f67a:	7852      	ldrb	r2, [r2, #1]
 801f67c:	4610      	mov	r0, r2
 801f67e:	697a      	ldr	r2, [r7, #20]
 801f680:	1a82      	subs	r2, r0, r2
 801f682:	68f8      	ldr	r0, [r7, #12]
 801f684:	4798      	blx	r3
 801f686:	4603      	mov	r3, r0
 801f688:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 801f68a:	693b      	ldr	r3, [r7, #16]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d101      	bne.n	801f694 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 801f690:	2300      	movs	r3, #0
 801f692:	e00d      	b.n	801f6b0 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	330c      	adds	r3, #12
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	68f8      	ldr	r0, [r7, #12]
 801f69e:	4798      	blx	r3
				data_bytes_written += new_bytes;
 801f6a0:	697a      	ldr	r2, [r7, #20]
 801f6a2:	693b      	ldr	r3, [r7, #16]
 801f6a4:	4413      	add	r3, r2
 801f6a6:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 801f6a8:	e7d1      	b.n	801f64e <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 801f6aa:	2301      	movs	r3, #1
 801f6ac:	e000      	b.n	801f6b0 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 801f6ae:	2300      	movs	r3, #0
}
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	3718      	adds	r7, #24
 801f6b4:	46bd      	mov	sp, r7
 801f6b6:	bd80      	pop	{r7, pc}

0801f6b8 <_ZN10MessageBus7receiveEhPhm>:
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
#include "Debug/Debug.h"
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 801f6b8:	b580      	push	{r7, lr}
 801f6ba:	b088      	sub	sp, #32
 801f6bc:	af00      	add	r7, sp, #0
 801f6be:	60f8      	str	r0, [r7, #12]
 801f6c0:	607a      	str	r2, [r7, #4]
 801f6c2:	603b      	str	r3, [r7, #0]
 801f6c4:	460b      	mov	r3, r1
 801f6c6:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 801f6c8:	683b      	ldr	r3, [r7, #0]
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d077      	beq.n	801f7be <_ZN10MessageBus7receiveEhPhm+0x106>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	1c5a      	adds	r2, r3, #1
 801f6d2:	607a      	str	r2, [r7, #4]
 801f6d4:	781b      	ldrb	r3, [r3, #0]
 801f6d6:	777b      	strb	r3, [r7, #29]


		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 801f6d8:	7f7b      	ldrb	r3, [r7, #29]
 801f6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f6de:	00db      	lsls	r3, r3, #3
 801f6e0:	68fa      	ldr	r2, [r7, #12]
 801f6e2:	4413      	add	r3, r2
 801f6e4:	3304      	adds	r3, #4
 801f6e6:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 801f6e8:	7afb      	ldrb	r3, [r7, #11]
 801f6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f6ee:	3306      	adds	r3, #6
 801f6f0:	021b      	lsls	r3, r3, #8
 801f6f2:	68fa      	ldr	r2, [r7, #12]
 801f6f4:	4413      	add	r3, r2
 801f6f6:	3304      	adds	r3, #4
 801f6f8:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 801f6fa:	697b      	ldr	r3, [r7, #20]
 801f6fc:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 801f700:	461a      	mov	r2, r3
 801f702:	683b      	ldr	r3, [r7, #0]
 801f704:	4413      	add	r3, r2
 801f706:	2bff      	cmp	r3, #255	; 0xff
 801f708:	d904      	bls.n	801f714 <_ZN10MessageBus7receiveEhPhm+0x5c>
			indexable_buffer->index = 0; // Corrupted packet
 801f70a:	697b      	ldr	r3, [r7, #20]
 801f70c:	2200      	movs	r2, #0
 801f70e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 801f712:	e054      	b.n	801f7be <_ZN10MessageBus7receiveEhPhm+0x106>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 801f714:	2300      	movs	r3, #0
 801f716:	83fb      	strh	r3, [r7, #30]
 801f718:	8bfa      	ldrh	r2, [r7, #30]
 801f71a:	683b      	ldr	r3, [r7, #0]
 801f71c:	3b01      	subs	r3, #1
 801f71e:	429a      	cmp	r2, r3
 801f720:	d211      	bcs.n	801f746 <_ZN10MessageBus7receiveEhPhm+0x8e>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	1c5a      	adds	r2, r3, #1
 801f726:	607a      	str	r2, [r7, #4]
 801f728:	697a      	ldr	r2, [r7, #20]
 801f72a:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 801f72e:	1c51      	adds	r1, r2, #1
 801f730:	b2c8      	uxtb	r0, r1
 801f732:	6979      	ldr	r1, [r7, #20]
 801f734:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 801f738:	7819      	ldrb	r1, [r3, #0]
 801f73a:	697b      	ldr	r3, [r7, #20]
 801f73c:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 801f73e:	8bfb      	ldrh	r3, [r7, #30]
 801f740:	3301      	adds	r3, #1
 801f742:	83fb      	strh	r3, [r7, #30]
 801f744:	e7e8      	b.n	801f718 <_ZN10MessageBus7receiveEhPhm+0x60>
		}

		if(indexable_buffer->index >= def->size) {
 801f746:	697b      	ldr	r3, [r7, #20]
 801f748:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 801f74c:	69bb      	ldr	r3, [r7, #24]
 801f74e:	785b      	ldrb	r3, [r3, #1]
 801f750:	429a      	cmp	r2, r3
 801f752:	d334      	bcc.n	801f7be <_ZN10MessageBus7receiveEhPhm+0x106>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 801f754:	7f7b      	ldrb	r3, [r7, #29]
 801f756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f75a:	68fa      	ldr	r2, [r7, #12]
 801f75c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 801f760:	009b      	lsls	r3, r3, #2
 801f762:	4413      	add	r3, r2
 801f764:	685b      	ldr	r3, [r3, #4]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d00c      	beq.n	801f784 <_ZN10MessageBus7receiveEhPhm+0xcc>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 801f76a:	7f7b      	ldrb	r3, [r7, #29]
 801f76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f770:	68fa      	ldr	r2, [r7, #12]
 801f772:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 801f776:	009b      	lsls	r3, r3, #2
 801f778:	4413      	add	r3, r2
 801f77a:	685b      	ldr	r3, [r3, #4]
 801f77c:	6979      	ldr	r1, [r7, #20]
 801f77e:	7afa      	ldrb	r2, [r7, #11]
 801f780:	4610      	mov	r0, r2
 801f782:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 801f784:	7f7b      	ldrb	r3, [r7, #29]
 801f786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f78a:	68fa      	ldr	r2, [r7, #12]
 801f78c:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801f790:	009b      	lsls	r3, r3, #2
 801f792:	4413      	add	r3, r2
 801f794:	685b      	ldr	r3, [r3, #4]
 801f796:	2b00      	cmp	r3, #0
 801f798:	d00d      	beq.n	801f7b6 <_ZN10MessageBus7receiveEhPhm+0xfe>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 801f79a:	7f7b      	ldrb	r3, [r7, #29]
 801f79c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f7a0:	68fa      	ldr	r2, [r7, #12]
 801f7a2:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 801f7a6:	009b      	lsls	r3, r3, #2
 801f7a8:	4413      	add	r3, r2
 801f7aa:	685b      	ldr	r3, [r3, #4]
 801f7ac:	697a      	ldr	r2, [r7, #20]
 801f7ae:	69b9      	ldr	r1, [r7, #24]
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	f7ff ff41 	bl	801f638 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 801f7b6:	697b      	ldr	r3, [r7, #20]
 801f7b8:	2200      	movs	r2, #0
 801f7ba:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 801f7be:	3720      	adds	r7, #32
 801f7c0:	46bd      	mov	sp, r7
 801f7c2:	bd80      	pop	{r7, pc}

0801f7c4 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 801f7c4:	b480      	push	{r7}
 801f7c6:	b085      	sub	sp, #20
 801f7c8:	af00      	add	r7, sp, #0
 801f7ca:	6078      	str	r0, [r7, #4]
 801f7cc:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	b2db      	uxtb	r3, r3
 801f7d2:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 801f7d4:	68fb      	ldr	r3, [r7, #12]
 801f7d6:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 801f7d8:	687a      	ldr	r2, [r7, #4]
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	3380      	adds	r3, #128	; 0x80
 801f7de:	009b      	lsls	r3, r3, #2
 801f7e0:	4413      	add	r3, r2
 801f7e2:	685b      	ldr	r3, [r3, #4]
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d01f      	beq.n	801f828 <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 801f7e8:	687a      	ldr	r2, [r7, #4]
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	3380      	adds	r3, #128	; 0x80
 801f7ee:	009b      	lsls	r3, r3, #2
 801f7f0:	4413      	add	r3, r2
 801f7f2:	685b      	ldr	r3, [r3, #4]
 801f7f4:	685b      	ldr	r3, [r3, #4]
 801f7f6:	683a      	ldr	r2, [r7, #0]
 801f7f8:	429a      	cmp	r2, r3
 801f7fa:	d106      	bne.n	801f80a <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 801f7fc:	687a      	ldr	r2, [r7, #4]
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	3380      	adds	r3, #128	; 0x80
 801f802:	009b      	lsls	r3, r3, #2
 801f804:	4413      	add	r3, r2
 801f806:	685b      	ldr	r3, [r3, #4]
 801f808:	e00f      	b.n	801f82a <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	3301      	adds	r3, #1
 801f80e:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 801f810:	68fb      	ldr	r3, [r7, #12]
 801f812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f816:	d101      	bne.n	801f81c <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 801f818:	2300      	movs	r3, #0
 801f81a:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 801f81c:	68ba      	ldr	r2, [r7, #8]
 801f81e:	68fb      	ldr	r3, [r7, #12]
 801f820:	429a      	cmp	r2, r3
 801f822:	d000      	beq.n	801f826 <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 801f824:	e7d8      	b.n	801f7d8 <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 801f826:	bf00      	nop
		}
	}

	return nullptr;
 801f828:	2300      	movs	r3, #0
}
 801f82a:	4618      	mov	r0, r3
 801f82c:	3714      	adds	r7, #20
 801f82e:	46bd      	mov	sp, r7
 801f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f834:	4770      	bx	lr
	...

0801f838 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 801f838:	b580      	push	{r7, lr}
 801f83a:	b082      	sub	sp, #8
 801f83c:	af00      	add	r7, sp, #0
 801f83e:	6078      	str	r0, [r7, #4]
 801f840:	6039      	str	r1, [r7, #0]
 801f842:	6878      	ldr	r0, [r7, #4]
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	f644 0211 	movw	r2, #18449	; 0x4811
 801f84a:	441a      	add	r2, r3
 801f84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801f850:	6839      	ldr	r1, [r7, #0]
 801f852:	f7fd ff05 	bl	801d660 <_ZN5IOBusC1EP8IODriverPhm>
 801f856:	4a24      	ldr	r2, [pc, #144]	; (801f8e8 <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	2100      	movs	r1, #0
 801f860:	4618      	mov	r0, r3
 801f862:	f7ff f9f3 	bl	801ec4c <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<RequestPacket>(1);
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	2101      	movs	r1, #1
 801f86a:	4618      	mov	r0, r3
 801f86c:	f7ff fa7c 	bl	801ed68 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(2);
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	2102      	movs	r1, #2
 801f874:	4618      	mov	r0, r3
 801f876:	f7ff fad5 	bl	801ee24 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(3);
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	2103      	movs	r1, #3
 801f87e:	4618      	mov	r0, r3
 801f880:	f7ff fb2e 	bl	801eee0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(4);
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	2104      	movs	r1, #4
 801f888:	4618      	mov	r0, r3
 801f88a:	f7ff fb87 	bl	801ef9c <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<Avionics_BaroTempPacket>(5);
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	2105      	movs	r1, #5
 801f892:	4618      	mov	r0, r3
 801f894:	f7ff fc3e 	bl	801f114 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(6);
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	2106      	movs	r1, #6
 801f89c:	4618      	mov	r0, r3
 801f89e:	f7ff fc97 	bl	801f1d0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Handling_GripperPacket>(7);
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	2107      	movs	r1, #7
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f7ff fcf0 	bl	801f28c <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
	define<Power_VoltagePacket>(8);
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	2108      	movs	r1, #8
 801f8b0:	4618      	mov	r0, r3
 801f8b2:	f7ff fd49 	bl	801f348 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(9);
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	2109      	movs	r1, #9
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	f7ff fda2 	bl	801f404 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Power_SystemPacket>(10);
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	210a      	movs	r1, #10
 801f8c4:	4618      	mov	r0, r3
 801f8c6:	f7ff fdfb 	bl	801f4c0 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Science_MeasurePacket>(11);
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	210b      	movs	r1, #11
 801f8ce:	4618      	mov	r0, r3
 801f8d0:	f7ff fe54 	bl	801f57c <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
	define<ErrorPacket>(63);
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	213f      	movs	r1, #63	; 0x3f
 801f8d8:	4618      	mov	r0, r3
 801f8da:	f7ff fbbd 	bl	801f058 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	4618      	mov	r0, r3
 801f8e2:	3708      	adds	r7, #8
 801f8e4:	46bd      	mov	sp, r7
 801f8e6:	bd80      	pop	{r7, pc}
 801f8e8:	080279a8 	.word	0x080279a8

0801f8ec <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 801f8ec:	b580      	push	{r7, lr}
 801f8ee:	b082      	sub	sp, #8
 801f8f0:	af00      	add	r7, sp, #0
 801f8f2:	6078      	str	r0, [r7, #4]
 801f8f4:	4a05      	ldr	r2, [pc, #20]	; (801f90c <_ZN10NetworkBusD1Ev+0x20>)
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	601a      	str	r2, [r3, #0]
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	4618      	mov	r0, r3
 801f8fe:	f7fe ff2f 	bl	801e760 <_ZN5IOBusD1Ev>
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	4618      	mov	r0, r3
 801f906:	3708      	adds	r7, #8
 801f908:	46bd      	mov	sp, r7
 801f90a:	bd80      	pop	{r7, pc}
 801f90c:	080279a8 	.word	0x080279a8

0801f910 <_ZN10NetworkBusD0Ev>:
 801f910:	b580      	push	{r7, lr}
 801f912:	b082      	sub	sp, #8
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
 801f918:	6878      	ldr	r0, [r7, #4]
 801f91a:	f7ff ffe7 	bl	801f8ec <_ZN10NetworkBusD1Ev>
 801f91e:	f644 1114 	movw	r1, #18708	; 0x4914
 801f922:	6878      	ldr	r0, [r7, #4]
 801f924:	f000 fbe0 	bl	80200e8 <_ZdlPvj>
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	4618      	mov	r0, r3
 801f92c:	3708      	adds	r7, #8
 801f92e:	46bd      	mov	sp, r7
 801f930:	bd80      	pop	{r7, pc}

0801f932 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 801f932:	b480      	push	{r7}
 801f934:	b083      	sub	sp, #12
 801f936:	af00      	add	r7, sp, #0
 801f938:	6078      	str	r0, [r7, #4]

}
 801f93a:	bf00      	nop
 801f93c:	370c      	adds	r7, #12
 801f93e:	46bd      	mov	sp, r7
 801f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f944:	4770      	bx	lr

0801f946 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 801f946:	b580      	push	{r7, lr}
 801f948:	b082      	sub	sp, #8
 801f94a:	af00      	add	r7, sp, #0
 801f94c:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	691b      	ldr	r3, [r3, #16]
 801f952:	4618      	mov	r0, r3
 801f954:	f7e6 fc5e 	bl	8006214 <HAL_IWDG_Refresh>
	osDelay(100 / portTICK_PERIOD_MS);
 801f958:	2064      	movs	r0, #100	; 0x64
 801f95a:	f7eb f976 	bl	800ac4a <osDelay>
}
 801f95e:	bf00      	nop
 801f960:	3708      	adds	r7, #8
 801f962:	46bd      	mov	sp, r7
 801f964:	bd80      	pop	{r7, pc}
	...

0801f968 <_ZN14WatchdogThreadD1Ev>:
#ifndef MISC_WATCHDOGTHREAD_H_
#define MISC_WATCHDOGTHREAD_H_

#include "../Thread.h"

class WatchdogThread : Thread {
 801f968:	b580      	push	{r7, lr}
 801f96a:	b082      	sub	sp, #8
 801f96c:	af00      	add	r7, sp, #0
 801f96e:	6078      	str	r0, [r7, #4]
 801f970:	4a05      	ldr	r2, [pc, #20]	; (801f988 <_ZN14WatchdogThreadD1Ev+0x20>)
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	601a      	str	r2, [r3, #0]
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	4618      	mov	r0, r3
 801f97a:	f7fd fb49 	bl	801d010 <_ZN6ThreadD1Ev>
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	4618      	mov	r0, r3
 801f982:	3708      	adds	r7, #8
 801f984:	46bd      	mov	sp, r7
 801f986:	bd80      	pop	{r7, pc}
 801f988:	080279dc 	.word	0x080279dc

0801f98c <_ZN14WatchdogThreadD0Ev>:
 801f98c:	b580      	push	{r7, lr}
 801f98e:	b082      	sub	sp, #8
 801f990:	af00      	add	r7, sp, #0
 801f992:	6078      	str	r0, [r7, #4]
 801f994:	6878      	ldr	r0, [r7, #4]
 801f996:	f7ff ffe7 	bl	801f968 <_ZN14WatchdogThreadD1Ev>
 801f99a:	2114      	movs	r1, #20
 801f99c:	6878      	ldr	r0, [r7, #4]
 801f99e:	f000 fba3 	bl	80200e8 <_ZdlPvj>
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	4618      	mov	r0, r3
 801f9a6:	3708      	adds	r7, #8
 801f9a8:	46bd      	mov	sp, r7
 801f9aa:	bd80      	pop	{r7, pc}

0801f9ac <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 801f9ac:	b580      	push	{r7, lr}
 801f9ae:	b082      	sub	sp, #8
 801f9b0:	af00      	add	r7, sp, #0
 801f9b2:	6078      	str	r0, [r7, #4]
 801f9b4:	6039      	str	r1, [r7, #0]
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	4907      	ldr	r1, [pc, #28]	; (801f9d8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 801f9ba:	4618      	mov	r0, r3
 801f9bc:	f000 f90a 	bl	801fbd4 <_ZN6ThreadC1EPKc>
 801f9c0:	4a06      	ldr	r2, [pc, #24]	; (801f9dc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	601a      	str	r2, [r3, #0]
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	683a      	ldr	r2, [r7, #0]
 801f9ca:	611a      	str	r2, [r3, #16]
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	3708      	adds	r7, #8
 801f9d2:	46bd      	mov	sp, r7
 801f9d4:	bd80      	pop	{r7, pc}
 801f9d6:	bf00      	nop
 801f9d8:	080273b4 	.word	0x080273b4
 801f9dc:	080279dc 	.word	0x080279dc

0801f9e0 <__tcf_0>:
#include "i2c.h"
#include "Telemetry.h"
void initCortexM7() {
	MX_I2C1_Init();

	static WatchdogThread watchdog(&hiwdg1);
 801f9e0:	b580      	push	{r7, lr}
 801f9e2:	af00      	add	r7, sp, #0
 801f9e4:	4801      	ldr	r0, [pc, #4]	; (801f9ec <__tcf_0+0xc>)
 801f9e6:	f7ff ffbf 	bl	801f968 <_ZN14WatchdogThreadD1Ev>
 801f9ea:	bd80      	pop	{r7, pc}
 801f9ec:	240409bc 	.word	0x240409bc

0801f9f0 <__tcf_1>:
	static LWIPThread lwip("192.168.1.2", 42666);
 801f9f0:	b580      	push	{r7, lr}
 801f9f2:	af00      	add	r7, sp, #0
 801f9f4:	4801      	ldr	r0, [pc, #4]	; (801f9fc <__tcf_1+0xc>)
 801f9f6:	f000 f9ef 	bl	801fdd8 <_ZN10LWIPThreadD1Ev>
 801f9fa:	bd80      	pop	{r7, pc}
 801f9fc:	240409d4 	.word	0x240409d4

0801fa00 <initCortexM7>:
void initCortexM7() {
 801fa00:	b580      	push	{r7, lr}
 801fa02:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 801fa04:	f7e1 f826 	bl	8000a54 <MX_I2C1_Init>
	static WatchdogThread watchdog(&hiwdg1);
 801fa08:	4b25      	ldr	r3, [pc, #148]	; (801faa0 <initCortexM7+0xa0>)
 801fa0a:	781b      	ldrb	r3, [r3, #0]
 801fa0c:	f3bf 8f5b 	dmb	ish
 801fa10:	b2db      	uxtb	r3, r3
 801fa12:	f003 0301 	and.w	r3, r3, #1
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	bf0c      	ite	eq
 801fa1a:	2301      	moveq	r3, #1
 801fa1c:	2300      	movne	r3, #0
 801fa1e:	b2db      	uxtb	r3, r3
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d014      	beq.n	801fa4e <initCortexM7+0x4e>
 801fa24:	481e      	ldr	r0, [pc, #120]	; (801faa0 <initCortexM7+0xa0>)
 801fa26:	f000 fb61 	bl	80200ec <__cxa_guard_acquire>
 801fa2a:	4603      	mov	r3, r0
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	bf14      	ite	ne
 801fa30:	2301      	movne	r3, #1
 801fa32:	2300      	moveq	r3, #0
 801fa34:	b2db      	uxtb	r3, r3
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	d009      	beq.n	801fa4e <initCortexM7+0x4e>
 801fa3a:	491a      	ldr	r1, [pc, #104]	; (801faa4 <initCortexM7+0xa4>)
 801fa3c:	481a      	ldr	r0, [pc, #104]	; (801faa8 <initCortexM7+0xa8>)
 801fa3e:	f7ff ffb5 	bl	801f9ac <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 801fa42:	4817      	ldr	r0, [pc, #92]	; (801faa0 <initCortexM7+0xa0>)
 801fa44:	f000 fb5e 	bl	8020104 <__cxa_guard_release>
 801fa48:	4818      	ldr	r0, [pc, #96]	; (801faac <initCortexM7+0xac>)
 801fa4a:	f000 ff44 	bl	80208d6 <atexit>
	static LWIPThread lwip("192.168.1.2", 42666);
 801fa4e:	4b18      	ldr	r3, [pc, #96]	; (801fab0 <initCortexM7+0xb0>)
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	f3bf 8f5b 	dmb	ish
 801fa56:	b2db      	uxtb	r3, r3
 801fa58:	f003 0301 	and.w	r3, r3, #1
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	bf0c      	ite	eq
 801fa60:	2301      	moveq	r3, #1
 801fa62:	2300      	movne	r3, #0
 801fa64:	b2db      	uxtb	r3, r3
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d016      	beq.n	801fa98 <initCortexM7+0x98>
 801fa6a:	4811      	ldr	r0, [pc, #68]	; (801fab0 <initCortexM7+0xb0>)
 801fa6c:	f000 fb3e 	bl	80200ec <__cxa_guard_acquire>
 801fa70:	4603      	mov	r3, r0
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	bf14      	ite	ne
 801fa76:	2301      	movne	r3, #1
 801fa78:	2300      	moveq	r3, #0
 801fa7a:	b2db      	uxtb	r3, r3
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	d00b      	beq.n	801fa98 <initCortexM7+0x98>
 801fa80:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 801fa84:	490b      	ldr	r1, [pc, #44]	; (801fab4 <initCortexM7+0xb4>)
 801fa86:	480c      	ldr	r0, [pc, #48]	; (801fab8 <initCortexM7+0xb8>)
 801fa88:	f000 f964 	bl	801fd54 <_ZN10LWIPThreadC1EPKct>
 801fa8c:	4808      	ldr	r0, [pc, #32]	; (801fab0 <initCortexM7+0xb0>)
 801fa8e:	f000 fb39 	bl	8020104 <__cxa_guard_release>
 801fa92:	480a      	ldr	r0, [pc, #40]	; (801fabc <initCortexM7+0xbc>)
 801fa94:	f000 ff1f 	bl	80208d6 <atexit>

	setupTelemtry();
 801fa98:	f000 f816 	bl	801fac8 <_Z13setupTelemtryv>
}
 801fa9c:	bf00      	nop
 801fa9e:	bd80      	pop	{r7, pc}
 801faa0:	240409d0 	.word	0x240409d0
 801faa4:	24045580 	.word	0x24045580
 801faa8:	240409bc 	.word	0x240409bc
 801faac:	0801f9e1 	.word	0x0801f9e1
 801fab0:	240409e4 	.word	0x240409e4
 801fab4:	080273c0 	.word	0x080273c0
 801fab8:	240409d4 	.word	0x240409d4
 801fabc:	0801f9f1 	.word	0x0801f9f1

0801fac0 <vApplicationStackOverflowHook>:
#endif

extern "C" {

void vApplicationStackOverflowHook() {
 801fac0:	b480      	push	{r7}
 801fac2:	af00      	add	r7, sp, #0
	while(1);
 801fac4:	e7fe      	b.n	801fac4 <vApplicationStackOverflowHook+0x4>
	...

0801fac8 <_Z13setupTelemtryv>:
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
NetworkBus network(&telemetryDriver);



void setupTelemtry() {
 801fac8:	b580      	push	{r7, lr}
 801faca:	af00      	add	r7, sp, #0
	network.forward<PingPacket>(&network);
 801facc:	4902      	ldr	r1, [pc, #8]	; (801fad8 <_Z13setupTelemtryv+0x10>)
 801face:	4802      	ldr	r0, [pc, #8]	; (801fad8 <_Z13setupTelemtryv+0x10>)
 801fad0:	f7ff f91a 	bl	801ed08 <_ZN10MessageBus7forwardI10PingPacketEEbPS_>
}
 801fad4:	bf00      	nop
 801fad6:	bd80      	pop	{r7, pc}
 801fad8:	24040a10 	.word	0x24040a10

0801fadc <_Z41__static_initialization_and_destruction_0ii>:
 801fadc:	b580      	push	{r7, lr}
 801fade:	b082      	sub	sp, #8
 801fae0:	af00      	add	r7, sp, #0
 801fae2:	6078      	str	r0, [r7, #4]
 801fae4:	6039      	str	r1, [r7, #0]
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	2b01      	cmp	r3, #1
 801faea:	d111      	bne.n	801fb10 <_Z41__static_initialization_and_destruction_0ii+0x34>
 801faec:	683b      	ldr	r3, [r7, #0]
 801faee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801faf2:	4293      	cmp	r3, r2
 801faf4:	d10c      	bne.n	801fb10 <_Z41__static_initialization_and_destruction_0ii+0x34>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 801faf6:	4b0f      	ldr	r3, [pc, #60]	; (801fb34 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801faf8:	6819      	ldr	r1, [r3, #0]
 801fafa:	4b0f      	ldr	r3, [pc, #60]	; (801fb38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801fafc:	681a      	ldr	r2, [r3, #0]
 801fafe:	f44f 7380 	mov.w	r3, #256	; 0x100
 801fb02:	480e      	ldr	r0, [pc, #56]	; (801fb3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801fb04:	f7fd fb2c 	bl	801d160 <_ZN16BufferedIODriverC1EPVhS1_j>
NetworkBus network(&telemetryDriver);
 801fb08:	490c      	ldr	r1, [pc, #48]	; (801fb3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801fb0a:	480d      	ldr	r0, [pc, #52]	; (801fb40 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801fb0c:	f7ff fe94 	bl	801f838 <_ZN10NetworkBusC1EP8IODriver>
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d10a      	bne.n	801fb2c <_Z41__static_initialization_and_destruction_0ii+0x50>
 801fb16:	683b      	ldr	r3, [r7, #0]
 801fb18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fb1c:	4293      	cmp	r3, r2
 801fb1e:	d105      	bne.n	801fb2c <_Z41__static_initialization_and_destruction_0ii+0x50>
 801fb20:	4807      	ldr	r0, [pc, #28]	; (801fb40 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801fb22:	f7ff fee3 	bl	801f8ec <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage, control, 256); // Point to RAM D3
 801fb26:	4805      	ldr	r0, [pc, #20]	; (801fb3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801fb28:	f7fd fd2a 	bl	801d580 <_ZN16BufferedIODriverD1Ev>
}
 801fb2c:	bf00      	nop
 801fb2e:	3708      	adds	r7, #8
 801fb30:	46bd      	mov	sp, r7
 801fb32:	bd80      	pop	{r7, pc}
 801fb34:	24000038 	.word	0x24000038
 801fb38:	24000034 	.word	0x24000034
 801fb3c:	240409e8 	.word	0x240409e8
 801fb40:	24040a10 	.word	0x24040a10

0801fb44 <_GLOBAL__sub_I_telemetryDriver>:
 801fb44:	b580      	push	{r7, lr}
 801fb46:	af00      	add	r7, sp, #0
 801fb48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fb4c:	2001      	movs	r0, #1
 801fb4e:	f7ff ffc5 	bl	801fadc <_Z41__static_initialization_and_destruction_0ii>
 801fb52:	bd80      	pop	{r7, pc}

0801fb54 <_GLOBAL__sub_D_telemetryDriver>:
 801fb54:	b580      	push	{r7, lr}
 801fb56:	af00      	add	r7, sp, #0
 801fb58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fb5c:	2000      	movs	r0, #0
 801fb5e:	f7ff ffbd 	bl	801fadc <_Z41__static_initialization_and_destruction_0ii>
 801fb62:	bd80      	pop	{r7, pc}

0801fb64 <_ZN6Thread9isRunningEv>:
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
	virtual void init() = 0;
	virtual void loop() = 0;
	osThreadId getHandle();
	bool isRunning() { return running; }
 801fb64:	b480      	push	{r7}
 801fb66:	b083      	sub	sp, #12
 801fb68:	af00      	add	r7, sp, #0
 801fb6a:	6078      	str	r0, [r7, #4]
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	7b1b      	ldrb	r3, [r3, #12]
 801fb70:	4618      	mov	r0, r3
 801fb72:	370c      	adds	r7, #12
 801fb74:	46bd      	mov	sp, r7
 801fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb7a:	4770      	bx	lr

0801fb7c <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (512) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 801fb7c:	b580      	push	{r7, lr}
 801fb7e:	b084      	sub	sp, #16
 801fb80:	af00      	add	r7, sp, #0
 801fb82:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	60fb      	str	r3, [r7, #12]

	osDelay(100);
 801fb88:	2064      	movs	r0, #100	; 0x64
 801fb8a:	f7eb f85e 	bl	800ac4a <osDelay>

	thread->init();
 801fb8e:	68fb      	ldr	r3, [r7, #12]
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	3308      	adds	r3, #8
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	68f8      	ldr	r0, [r7, #12]
 801fb98:	4798      	blx	r3

	while(thread->isRunning()) {
 801fb9a:	68f8      	ldr	r0, [r7, #12]
 801fb9c:	f7ff ffe2 	bl	801fb64 <_ZN6Thread9isRunningEv>
 801fba0:	4603      	mov	r3, r0
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d006      	beq.n	801fbb4 <_Z10__task_runPKv+0x38>
		thread->loop();
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	330c      	adds	r3, #12
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	68f8      	ldr	r0, [r7, #12]
 801fbb0:	4798      	blx	r3
	while(thread->isRunning()) {
 801fbb2:	e7f2      	b.n	801fb9a <_Z10__task_runPKv+0x1e>
	}

	delete thread;
 801fbb4:	68fb      	ldr	r3, [r7, #12]
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d004      	beq.n	801fbc4 <_Z10__task_runPKv+0x48>
 801fbba:	681a      	ldr	r2, [r3, #0]
 801fbbc:	3204      	adds	r2, #4
 801fbbe:	6812      	ldr	r2, [r2, #0]
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	4790      	blx	r2

	vTaskDelete(nullptr);
 801fbc4:	2000      	movs	r0, #0
 801fbc6:	f7ed f901 	bl	800cdcc <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 801fbca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fbce:	f7eb f83c 	bl	800ac4a <osDelay>
 801fbd2:	e7fa      	b.n	801fbca <_Z10__task_runPKv+0x4e>

0801fbd4 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 801fbd4:	b580      	push	{r7, lr}
 801fbd6:	b082      	sub	sp, #8
 801fbd8:	af00      	add	r7, sp, #0
 801fbda:	6078      	str	r0, [r7, #4]
 801fbdc:	6039      	str	r1, [r7, #0]
 801fbde:	2200      	movs	r2, #0
 801fbe0:	6839      	ldr	r1, [r7, #0]
 801fbe2:	6878      	ldr	r0, [r7, #4]
 801fbe4:	f000 f805 	bl	801fbf2 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	4618      	mov	r0, r3
 801fbec:	3708      	adds	r7, #8
 801fbee:	46bd      	mov	sp, r7
 801fbf0:	bd80      	pop	{r7, pc}

0801fbf2 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 801fbf2:	b580      	push	{r7, lr}
 801fbf4:	b084      	sub	sp, #16
 801fbf6:	af00      	add	r7, sp, #0
 801fbf8:	60f8      	str	r0, [r7, #12]
 801fbfa:	60b9      	str	r1, [r7, #8]
 801fbfc:	4613      	mov	r3, r2
 801fbfe:	80fb      	strh	r3, [r7, #6]
 801fc00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801fc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fc08:	68b9      	ldr	r1, [r7, #8]
 801fc0a:	68f8      	ldr	r0, [r7, #12]
 801fc0c:	f000 f816 	bl	801fc3c <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 801fc10:	68fb      	ldr	r3, [r7, #12]
 801fc12:	4618      	mov	r0, r3
 801fc14:	3710      	adds	r7, #16
 801fc16:	46bd      	mov	sp, r7
 801fc18:	bd80      	pop	{r7, pc}

0801fc1a <_ZN6ThreadC1EPKcm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 801fc1a:	b580      	push	{r7, lr}
 801fc1c:	b084      	sub	sp, #16
 801fc1e:	af00      	add	r7, sp, #0
 801fc20:	60f8      	str	r0, [r7, #12]
 801fc22:	60b9      	str	r1, [r7, #8]
 801fc24:	607a      	str	r2, [r7, #4]
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	2200      	movs	r2, #0
 801fc2a:	68b9      	ldr	r1, [r7, #8]
 801fc2c:	68f8      	ldr	r0, [r7, #12]
 801fc2e:	f000 f805 	bl	801fc3c <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 801fc32:	68fb      	ldr	r3, [r7, #12]
 801fc34:	4618      	mov	r0, r3
 801fc36:	3710      	adds	r7, #16
 801fc38:	46bd      	mov	sp, r7
 801fc3a:	bd80      	pop	{r7, pc}

0801fc3c <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 801fc3c:	b580      	push	{r7, lr}
 801fc3e:	b08c      	sub	sp, #48	; 0x30
 801fc40:	af00      	add	r7, sp, #0
 801fc42:	60f8      	str	r0, [r7, #12]
 801fc44:	60b9      	str	r1, [r7, #8]
 801fc46:	603b      	str	r3, [r7, #0]
 801fc48:	4613      	mov	r3, r2
 801fc4a:	80fb      	strh	r3, [r7, #6]
 801fc4c:	4a14      	ldr	r2, [pc, #80]	; (801fca0 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 801fc4e:	68fb      	ldr	r3, [r7, #12]
 801fc50:	601a      	str	r2, [r3, #0]
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	2201      	movs	r2, #1
 801fc56:	731a      	strb	r2, [r3, #12]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 801fc58:	f107 0314 	add.w	r3, r7, #20
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	601a      	str	r2, [r3, #0]
 801fc60:	605a      	str	r2, [r3, #4]
 801fc62:	609a      	str	r2, [r3, #8]
 801fc64:	60da      	str	r2, [r3, #12]
 801fc66:	611a      	str	r2, [r3, #16]
 801fc68:	615a      	str	r2, [r3, #20]
 801fc6a:	619a      	str	r2, [r3, #24]
 801fc6c:	4b0d      	ldr	r3, [pc, #52]	; (801fca4 <_ZN6ThreadC1EPKc10osPrioritym+0x68>)
 801fc6e:	61bb      	str	r3, [r7, #24]
 801fc70:	68bb      	ldr	r3, [r7, #8]
 801fc72:	617b      	str	r3, [r7, #20]
 801fc74:	88fb      	ldrh	r3, [r7, #6]
 801fc76:	83bb      	strh	r3, [r7, #28]
 801fc78:	683b      	ldr	r3, [r7, #0]
 801fc7a:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(&thread, this);
 801fc7c:	f107 0314 	add.w	r3, r7, #20
 801fc80:	68f9      	ldr	r1, [r7, #12]
 801fc82:	4618      	mov	r0, r3
 801fc84:	f7ea ff95 	bl	800abb2 <osThreadCreate>
 801fc88:	4602      	mov	r2, r0
 801fc8a:	68fb      	ldr	r3, [r7, #12]
 801fc8c:	605a      	str	r2, [r3, #4]
	this->name = name;
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	68ba      	ldr	r2, [r7, #8]
 801fc92:	609a      	str	r2, [r3, #8]
}
 801fc94:	68fb      	ldr	r3, [r7, #12]
 801fc96:	4618      	mov	r0, r3
 801fc98:	3730      	adds	r7, #48	; 0x30
 801fc9a:	46bd      	mov	sp, r7
 801fc9c:	bd80      	pop	{r7, pc}
 801fc9e:	bf00      	nop
 801fca0:	08027644 	.word	0x08027644
 801fca4:	0801fb7d 	.word	0x0801fb7d

0801fca8 <_ZN6Thread7printlnEPKcz>:

void Thread::terminate() {
	this->running = false;
}

void Thread::println(const char* format, ...) {
 801fca8:	b40e      	push	{r1, r2, r3}
 801fcaa:	b580      	push	{r7, lr}
 801fcac:	b085      	sub	sp, #20
 801fcae:	af00      	add	r7, sp, #0
 801fcb0:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 801fcb2:	f107 0320 	add.w	r3, r7, #32
 801fcb6:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	689b      	ldr	r3, [r3, #8]
 801fcbc:	461a      	mov	r2, r3
 801fcbe:	4913      	ldr	r1, [pc, #76]	; (801fd0c <_ZN6Thread7printlnEPKcz+0x64>)
 801fcc0:	4813      	ldr	r0, [pc, #76]	; (801fd10 <_ZN6Thread7printlnEPKcz+0x68>)
 801fcc2:	f001 fb4f 	bl	8021364 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 801fcc6:	4812      	ldr	r0, [pc, #72]	; (801fd10 <_ZN6Thread7printlnEPKcz+0x68>)
 801fcc8:	f7e0 fb64 	bl	8000394 <strlen>
 801fccc:	4603      	mov	r3, r0
 801fcce:	4a10      	ldr	r2, [pc, #64]	; (801fd10 <_ZN6Thread7printlnEPKcz+0x68>)
 801fcd0:	4413      	add	r3, r2
 801fcd2:	68fa      	ldr	r2, [r7, #12]
 801fcd4:	69f9      	ldr	r1, [r7, #28]
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	f001 fb7a 	bl	80213d0 <vsiprintf>
	strcat(buffer, "\r\n");
 801fcdc:	480c      	ldr	r0, [pc, #48]	; (801fd10 <_ZN6Thread7printlnEPKcz+0x68>)
 801fcde:	f7e0 fb59 	bl	8000394 <strlen>
 801fce2:	4603      	mov	r3, r0
 801fce4:	461a      	mov	r2, r3
 801fce6:	4b0a      	ldr	r3, [pc, #40]	; (801fd10 <_ZN6Thread7printlnEPKcz+0x68>)
 801fce8:	4413      	add	r3, r2
 801fcea:	4a0a      	ldr	r2, [pc, #40]	; (801fd14 <_ZN6Thread7printlnEPKcz+0x6c>)
 801fcec:	8811      	ldrh	r1, [r2, #0]
 801fcee:	7892      	ldrb	r2, [r2, #2]
 801fcf0:	8019      	strh	r1, [r3, #0]
 801fcf2:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 801fcf4:	4906      	ldr	r1, [pc, #24]	; (801fd10 <_ZN6Thread7printlnEPKcz+0x68>)
 801fcf6:	4808      	ldr	r0, [pc, #32]	; (801fd18 <_ZN6Thread7printlnEPKcz+0x70>)
 801fcf8:	f7fd f931 	bl	801cf5e <_ZN7Console5printEPKc>

	va_end(args);
}
 801fcfc:	bf00      	nop
 801fcfe:	3714      	adds	r7, #20
 801fd00:	46bd      	mov	sp, r7
 801fd02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fd06:	b003      	add	sp, #12
 801fd08:	4770      	bx	lr
 801fd0a:	bf00      	nop
 801fd0c:	080273cc 	.word	0x080273cc
 801fd10:	24045324 	.word	0x24045324
 801fd14:	080273d4 	.word	0x080273d4
 801fd18:	240407b4 	.word	0x240407b4

0801fd1c <_ZN16BufferedIODriver18getReceiveFunctionEv>:
public:
	BufferedIODriver(volatile uint8_t* bufferStorage, volatile uint8_t* bufferControl, size_t length);
	void receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver);
	void transmit(uint8_t* buffer, uint32_t length);
	void flush(IODriver* driver);
	std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> getReceiveFunction() { return receiverFunc; }
 801fd1c:	b580      	push	{r7, lr}
 801fd1e:	b082      	sub	sp, #8
 801fd20:	af00      	add	r7, sp, #0
 801fd22:	6078      	str	r0, [r7, #4]
 801fd24:	6039      	str	r1, [r7, #0]
 801fd26:	683b      	ldr	r3, [r7, #0]
 801fd28:	3318      	adds	r3, #24
 801fd2a:	4619      	mov	r1, r3
 801fd2c:	6878      	ldr	r0, [r7, #4]
 801fd2e:	f7fd fb25 	bl	801d37c <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 801fd32:	6878      	ldr	r0, [r7, #4]
 801fd34:	3708      	adds	r7, #8
 801fd36:	46bd      	mov	sp, r7
 801fd38:	bd80      	pop	{r7, pc}

0801fd3a <_ZN12LWIPClientIO11isConnectedEv>:
	void receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver);
	void transmit(uint8_t* buffer, uint32_t length);

	void update();

	bool isConnected() { return connected; }
 801fd3a:	b480      	push	{r7}
 801fd3c:	b083      	sub	sp, #12
 801fd3e:	af00      	add	r7, sp, #0
 801fd40:	6078      	str	r0, [r7, #4]
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fd48:	4618      	mov	r0, r3
 801fd4a:	370c      	adds	r7, #12
 801fd4c:	46bd      	mov	sp, r7
 801fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd52:	4770      	bx	lr

0801fd54 <_ZN10LWIPThreadC1EPKct>:


static LWIPClientIO* client;


LWIPThread::LWIPThread(const char* ip, const uint16_t port) : Thread("Telemetry", 512) { // Please, be very careful with the stack
 801fd54:	b5b0      	push	{r4, r5, r7, lr}
 801fd56:	b08c      	sub	sp, #48	; 0x30
 801fd58:	af00      	add	r7, sp, #0
 801fd5a:	60f8      	str	r0, [r7, #12]
 801fd5c:	60b9      	str	r1, [r7, #8]
 801fd5e:	4613      	mov	r3, r2
 801fd60:	80fb      	strh	r3, [r7, #6]
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fd68:	4918      	ldr	r1, [pc, #96]	; (801fdcc <_ZN10LWIPThreadC1EPKct+0x78>)
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f7ff ff55 	bl	801fc1a <_ZN6ThreadC1EPKcm>
 801fd70:	4a17      	ldr	r2, [pc, #92]	; (801fdd0 <_ZN10LWIPThreadC1EPKct+0x7c>)
 801fd72:	68fb      	ldr	r3, [r7, #12]
 801fd74:	601a      	str	r2, [r3, #0]
	client = new LWIPClientIO(ip, port);
 801fd76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801fd7a:	4618      	mov	r0, r3
 801fd7c:	f000 fccc 	bl	8020718 <_ZNSaIcEC1Ev>
 801fd80:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801fd84:	f107 0314 	add.w	r3, r7, #20
 801fd88:	68b9      	ldr	r1, [r7, #8]
 801fd8a:	4618      	mov	r0, r3
 801fd8c:	f000 fd6c 	bl	8020868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801fd90:	f107 0514 	add.w	r5, r7, #20
 801fd94:	2044      	movs	r0, #68	; 0x44
 801fd96:	f7fd f95b 	bl	801d050 <_Znwj>
 801fd9a:	4603      	mov	r3, r0
 801fd9c:	461c      	mov	r4, r3
 801fd9e:	88fb      	ldrh	r3, [r7, #6]
 801fda0:	461a      	mov	r2, r3
 801fda2:	4629      	mov	r1, r5
 801fda4:	4620      	mov	r0, r4
 801fda6:	f7fe fcff 	bl	801e7a8 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 801fdaa:	4b0a      	ldr	r3, [pc, #40]	; (801fdd4 <_ZN10LWIPThreadC1EPKct+0x80>)
 801fdac:	601c      	str	r4, [r3, #0]
 801fdae:	f107 0314 	add.w	r3, r7, #20
 801fdb2:	4618      	mov	r0, r3
 801fdb4:	f000 fcf7 	bl	80207a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801fdb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	f000 fcac 	bl	802071a <_ZNSaIcED1Ev>
}
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	4618      	mov	r0, r3
 801fdc6:	3730      	adds	r7, #48	; 0x30
 801fdc8:	46bd      	mov	sp, r7
 801fdca:	bdb0      	pop	{r4, r5, r7, pc}
 801fdcc:	080273e0 	.word	0x080273e0
 801fdd0:	08027a20 	.word	0x08027a20
 801fdd4:	240453d8 	.word	0x240453d8

0801fdd8 <_ZN10LWIPThreadD1Ev>:

LWIPThread::~LWIPThread() {
 801fdd8:	b580      	push	{r7, lr}
 801fdda:	b082      	sub	sp, #8
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	6078      	str	r0, [r7, #4]
 801fde0:	4a0a      	ldr	r2, [pc, #40]	; (801fe0c <_ZN10LWIPThreadD1Ev+0x34>)
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	601a      	str	r2, [r3, #0]
	delete client;
 801fde6:	4b0a      	ldr	r3, [pc, #40]	; (801fe10 <_ZN10LWIPThreadD1Ev+0x38>)
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d004      	beq.n	801fdf8 <_ZN10LWIPThreadD1Ev+0x20>
 801fdee:	681a      	ldr	r2, [r3, #0]
 801fdf0:	3204      	adds	r2, #4
 801fdf2:	6812      	ldr	r2, [r2, #0]
 801fdf4:	4618      	mov	r0, r3
 801fdf6:	4790      	blx	r2
LWIPThread::~LWIPThread() {
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	f7fd f908 	bl	801d010 <_ZN6ThreadD1Ev>
}
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	4618      	mov	r0, r3
 801fe04:	3708      	adds	r7, #8
 801fe06:	46bd      	mov	sp, r7
 801fe08:	bd80      	pop	{r7, pc}
 801fe0a:	bf00      	nop
 801fe0c:	08027a20 	.word	0x08027a20
 801fe10:	240453d8 	.word	0x240453d8

0801fe14 <_ZN10LWIPThreadD0Ev>:
LWIPThread::~LWIPThread() {
 801fe14:	b580      	push	{r7, lr}
 801fe16:	b082      	sub	sp, #8
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	6078      	str	r0, [r7, #4]
}
 801fe1c:	6878      	ldr	r0, [r7, #4]
 801fe1e:	f7ff ffdb 	bl	801fdd8 <_ZN10LWIPThreadD1Ev>
 801fe22:	2110      	movs	r1, #16
 801fe24:	6878      	ldr	r0, [r7, #4]
 801fe26:	f000 f95f 	bl	80200e8 <_ZdlPvj>
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	4618      	mov	r0, r3
 801fe2e:	3708      	adds	r7, #8
 801fe30:	46bd      	mov	sp, r7
 801fe32:	bd80      	pop	{r7, pc}

0801fe34 <_ZN10LWIPThread4initEv>:

void LWIPThread::init() {
 801fe34:	b5b0      	push	{r4, r5, r7, lr}
 801fe36:	b094      	sub	sp, #80	; 0x50
 801fe38:	af04      	add	r7, sp, #16
 801fe3a:	6078      	str	r0, [r7, #4]
	osDelay(50); // Time to get the shell loaded by Cortex M4
 801fe3c:	2032      	movs	r0, #50	; 0x32
 801fe3e:	f7ea ff04 	bl	800ac4a <osDelay>

	println("Initializing LWIP...");
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	4929      	ldr	r1, [pc, #164]	; (801feec <_ZN10LWIPThread4initEv+0xb8>)
 801fe46:	4618      	mov	r0, r3
 801fe48:	f7ff ff2e 	bl	801fca8 <_ZN6Thread7printlnEPKcz>

	tcpip_init(nullptr, nullptr);
 801fe4c:	2100      	movs	r1, #0
 801fe4e:	2000      	movs	r0, #0
 801fe50:	f7fc f8dc 	bl	801c00c <tcpip_init>
	/* IP addresses initialization with DHCP (IPv4) */
	ip4_addr local_ip;
	ip4_addr netmask;
	ip4_addr gateway;

	IP4_ADDR(&local_ip, 192, 168, 1, 3);
 801fe54:	4b26      	ldr	r3, [pc, #152]	; (801fef0 <_ZN10LWIPThread4initEv+0xbc>)
 801fe56:	62fb      	str	r3, [r7, #44]	; 0x2c
	IP4_ADDR(&netmask, 255, 255, 255, 0);
 801fe58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801fe5c:	62bb      	str	r3, [r7, #40]	; 0x28
	IP4_ADDR(&gateway, 192, 168, 1, 1);
 801fe5e:	4b25      	ldr	r3, [pc, #148]	; (801fef4 <_ZN10LWIPThread4initEv+0xc0>)
 801fe60:	627b      	str	r3, [r7, #36]	; 0x24

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &local_ip, &netmask, &gateway, NULL, &ethernetif_init, &tcpip_input);
 801fe62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801fe6a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801fe6e:	4822      	ldr	r0, [pc, #136]	; (801fef8 <_ZN10LWIPThread4initEv+0xc4>)
 801fe70:	9002      	str	r0, [sp, #8]
 801fe72:	4822      	ldr	r0, [pc, #136]	; (801fefc <_ZN10LWIPThread4initEv+0xc8>)
 801fe74:	9001      	str	r0, [sp, #4]
 801fe76:	2000      	movs	r0, #0
 801fe78:	9000      	str	r0, [sp, #0]
 801fe7a:	4821      	ldr	r0, [pc, #132]	; (801ff00 <_ZN10LWIPThread4initEv+0xcc>)
 801fe7c:	f7f3 fb34 	bl	80134e8 <netif_add>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 801fe80:	481f      	ldr	r0, [pc, #124]	; (801ff00 <_ZN10LWIPThread4initEv+0xcc>)
 801fe82:	f7f3 fce3 	bl	801384c <netif_set_default>

	onStatusUpdate(&gnetif);
 801fe86:	481e      	ldr	r0, [pc, #120]	; (801ff00 <_ZN10LWIPThread4initEv+0xcc>)
 801fe88:	f000 f844 	bl	801ff14 <_ZL14onStatusUpdateP5netif>

	netif_set_link_callback(&gnetif, onStatusUpdate);
 801fe8c:	491d      	ldr	r1, [pc, #116]	; (801ff04 <_ZN10LWIPThread4initEv+0xd0>)
 801fe8e:	481c      	ldr	r0, [pc, #112]	; (801ff00 <_ZN10LWIPThread4initEv+0xcc>)
 801fe90:	f7f3 fdee 	bl	8013a70 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, 1024);
 801fe94:	4b1c      	ldr	r3, [pc, #112]	; (801ff08 <_ZN10LWIPThread4initEv+0xd4>)
 801fe96:	f107 0408 	add.w	r4, r7, #8
 801fe9a:	461d      	mov	r5, r3
 801fe9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fe9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fea0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801fea4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(EthLink), &gnetif);
 801fea8:	f107 0308 	add.w	r3, r7, #8
 801feac:	4914      	ldr	r1, [pc, #80]	; (801ff00 <_ZN10LWIPThread4initEv+0xcc>)
 801feae:	4618      	mov	r0, r3
 801feb0:	f7ea fe7f 	bl	800abb2 <osThreadCreate>

	client->receive(telemetryDriver.getReceiveFunction());
 801feb4:	4b15      	ldr	r3, [pc, #84]	; (801ff0c <_ZN10LWIPThread4initEv+0xd8>)
 801feb6:	681d      	ldr	r5, [r3, #0]
 801feb8:	4b14      	ldr	r3, [pc, #80]	; (801ff0c <_ZN10LWIPThread4initEv+0xd8>)
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	3308      	adds	r3, #8
 801fec0:	681c      	ldr	r4, [r3, #0]
 801fec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fec6:	4912      	ldr	r1, [pc, #72]	; (801ff10 <_ZN10LWIPThread4initEv+0xdc>)
 801fec8:	4618      	mov	r0, r3
 801feca:	f7ff ff27 	bl	801fd1c <_ZN16BufferedIODriver18getReceiveFunctionEv>
 801fece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fed2:	4619      	mov	r1, r3
 801fed4:	4628      	mov	r0, r5
 801fed6:	47a0      	blx	r4
 801fed8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fedc:	4618      	mov	r0, r3
 801fede:	f7fd f921 	bl	801d124 <_ZNSt8functionIFvhPhmEED1Ev>
}
 801fee2:	bf00      	nop
 801fee4:	3740      	adds	r7, #64	; 0x40
 801fee6:	46bd      	mov	sp, r7
 801fee8:	bdb0      	pop	{r4, r5, r7, pc}
 801feea:	bf00      	nop
 801feec:	080273ec 	.word	0x080273ec
 801fef0:	0301a8c0 	.word	0x0301a8c0
 801fef4:	0101a8c0 	.word	0x0101a8c0
 801fef8:	0801bf1d 	.word	0x0801bf1d
 801fefc:	0800a8fd 	.word	0x0800a8fd
 801ff00:	240453a4 	.word	0x240453a4
 801ff04:	0801ff15 	.word	0x0801ff15
 801ff08:	08027404 	.word	0x08027404
 801ff0c:	240453d8 	.word	0x240453d8
 801ff10:	240409e8 	.word	0x240409e8

0801ff14 <_ZL14onStatusUpdateP5netif>:

void onStatusUpdate(struct netif *netif) {
 801ff14:	b580      	push	{r7, lr}
 801ff16:	b082      	sub	sp, #8
 801ff18:	af00      	add	r7, sp, #0
 801ff1a:	6078      	str	r0, [r7, #4]
	if (netif_is_link_up(netif)) {
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ff22:	109b      	asrs	r3, r3, #2
 801ff24:	b2db      	uxtb	r3, r3
 801ff26:	f003 0301 	and.w	r3, r3, #1
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	d007      	beq.n	801ff3e <_ZL14onStatusUpdateP5netif+0x2a>
		/* When the netif is fully configured this function must be called */
		netif_set_up(netif);
 801ff2e:	6878      	ldr	r0, [r7, #4]
 801ff30:	f7f3 fc9c 	bl	801386c <netif_set_up>
		console.printf("[Telemetry] Link is up\r\n");
 801ff34:	4907      	ldr	r1, [pc, #28]	; (801ff54 <_ZL14onStatusUpdateP5netif+0x40>)
 801ff36:	4808      	ldr	r0, [pc, #32]	; (801ff58 <_ZL14onStatusUpdateP5netif+0x44>)
 801ff38:	f7fd f823 	bl	801cf82 <_ZN7Console6printfEPKcz>
	} else {
		/* When the netif link is down this function must be called */
		netif_set_down(netif);
		console.printf("[Telemetry] Link is down\r\n");
	}
}
 801ff3c:	e006      	b.n	801ff4c <_ZL14onStatusUpdateP5netif+0x38>
		netif_set_down(netif);
 801ff3e:	6878      	ldr	r0, [r7, #4]
 801ff40:	f7f3 fd00 	bl	8013944 <netif_set_down>
		console.printf("[Telemetry] Link is down\r\n");
 801ff44:	4905      	ldr	r1, [pc, #20]	; (801ff5c <_ZL14onStatusUpdateP5netif+0x48>)
 801ff46:	4804      	ldr	r0, [pc, #16]	; (801ff58 <_ZL14onStatusUpdateP5netif+0x44>)
 801ff48:	f7fd f81b 	bl	801cf82 <_ZN7Console6printfEPKcz>
}
 801ff4c:	bf00      	nop
 801ff4e:	3708      	adds	r7, #8
 801ff50:	46bd      	mov	sp, r7
 801ff52:	bd80      	pop	{r7, pc}
 801ff54:	08027420 	.word	0x08027420
 801ff58:	240407b4 	.word	0x240407b4
 801ff5c:	0802743c 	.word	0x0802743c

0801ff60 <_ZN10LWIPThread4loopEv>:

void LWIPThread::loop() {
 801ff60:	b580      	push	{r7, lr}
 801ff62:	b084      	sub	sp, #16
 801ff64:	af00      	add	r7, sp, #0
 801ff66:	6078      	str	r0, [r7, #4]
	if(client->isConnected()) {
 801ff68:	4b21      	ldr	r3, [pc, #132]	; (801fff0 <_ZN10LWIPThread4loopEv+0x90>)
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	4618      	mov	r0, r3
 801ff6e:	f7ff fee4 	bl	801fd3a <_ZN12LWIPClientIO11isConnectedEv>
 801ff72:	4603      	mov	r3, r0
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d01a      	beq.n	801ffae <_ZN10LWIPThread4loopEv+0x4e>
		if(netif_is_link_up(&gnetif)) {
 801ff78:	4b1e      	ldr	r3, [pc, #120]	; (801fff4 <_ZN10LWIPThread4loopEv+0x94>)
 801ff7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ff7e:	109b      	asrs	r3, r3, #2
 801ff80:	b2db      	uxtb	r3, r3
 801ff82:	f003 0301 	and.w	r3, r3, #1
 801ff86:	2b00      	cmp	r3, #0
 801ff88:	d00b      	beq.n	801ffa2 <_ZN10LWIPThread4loopEv+0x42>
			client->update(); // Handle reception
 801ff8a:	4b19      	ldr	r3, [pc, #100]	; (801fff0 <_ZN10LWIPThread4loopEv+0x90>)
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	4618      	mov	r0, r3
 801ff90:	f7fe fd1c 	bl	801e9cc <_ZN12LWIPClientIO6updateEv>

			telemetryDriver.flush(client); // Handle transmission
 801ff94:	4b16      	ldr	r3, [pc, #88]	; (801fff0 <_ZN10LWIPThread4loopEv+0x90>)
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	4619      	mov	r1, r3
 801ff9a:	4817      	ldr	r0, [pc, #92]	; (801fff8 <_ZN10LWIPThread4loopEv+0x98>)
 801ff9c:	f7fd f98f 	bl	801d2be <_ZN16BufferedIODriver5flushEP8IODriver>
			println("Cannot connect to server with error code %d", error);
		}

		osDelay(1000);
	}
}
 801ffa0:	e022      	b.n	801ffe8 <_ZN10LWIPThread4loopEv+0x88>
			client->disconnectClient();
 801ffa2:	4b13      	ldr	r3, [pc, #76]	; (801fff0 <_ZN10LWIPThread4loopEv+0x90>)
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f7fe fcde 	bl	801e968 <_ZN12LWIPClientIO16disconnectClientEv>
}
 801ffac:	e01c      	b.n	801ffe8 <_ZN10LWIPThread4loopEv+0x88>
	} else if(netif_is_link_up(&gnetif)) {
 801ffae:	4b11      	ldr	r3, [pc, #68]	; (801fff4 <_ZN10LWIPThread4loopEv+0x94>)
 801ffb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ffb4:	109b      	asrs	r3, r3, #2
 801ffb6:	b2db      	uxtb	r3, r3
 801ffb8:	f003 0301 	and.w	r3, r3, #1
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d013      	beq.n	801ffe8 <_ZN10LWIPThread4loopEv+0x88>
		int32_t error = client->connectClient();
 801ffc0:	4b0b      	ldr	r3, [pc, #44]	; (801fff0 <_ZN10LWIPThread4loopEv+0x90>)
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	f7fe fc5f 	bl	801e888 <_ZN12LWIPClientIO13connectClientEv>
 801ffca:	4603      	mov	r3, r0
 801ffcc:	60fb      	str	r3, [r7, #12]
		if(error != 0) {
 801ffce:	68fb      	ldr	r3, [r7, #12]
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d005      	beq.n	801ffe0 <_ZN10LWIPThread4loopEv+0x80>
			println("Cannot connect to server with error code %d", error);
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	68fa      	ldr	r2, [r7, #12]
 801ffd8:	4908      	ldr	r1, [pc, #32]	; (801fffc <_ZN10LWIPThread4loopEv+0x9c>)
 801ffda:	4618      	mov	r0, r3
 801ffdc:	f7ff fe64 	bl	801fca8 <_ZN6Thread7printlnEPKcz>
		osDelay(1000);
 801ffe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ffe4:	f7ea fe31 	bl	800ac4a <osDelay>
}
 801ffe8:	bf00      	nop
 801ffea:	3710      	adds	r7, #16
 801ffec:	46bd      	mov	sp, r7
 801ffee:	bd80      	pop	{r7, pc}
 801fff0:	240453d8 	.word	0x240453d8
 801fff4:	240453a4 	.word	0x240453a4
 801fff8:	240409e8 	.word	0x240409e8
 801fffc:	08027458 	.word	0x08027458

08020000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8020000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8020002:	2400      	movs	r4, #0
 8020004:	2310      	movs	r3, #16
 8020006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802000a:	6803      	ldr	r3, [r0, #0]
 802000c:	9400      	str	r4, [sp, #0]
 802000e:	699e      	ldr	r6, [r3, #24]
 8020010:	f88d 4004 	strb.w	r4, [sp, #4]
 8020014:	4615      	mov	r5, r2
 8020016:	466b      	mov	r3, sp
 8020018:	6812      	ldr	r2, [r2, #0]
 802001a:	47b0      	blx	r6
 802001c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020020:	f003 0306 	and.w	r3, r3, #6
 8020024:	2b06      	cmp	r3, #6
 8020026:	bf03      	ittte	eq
 8020028:	9b00      	ldreq	r3, [sp, #0]
 802002a:	602b      	streq	r3, [r5, #0]
 802002c:	2001      	moveq	r0, #1
 802002e:	4620      	movne	r0, r4
 8020030:	b004      	add	sp, #16
 8020032:	bd70      	pop	{r4, r5, r6, pc}

08020034 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8020034:	9800      	ldr	r0, [sp, #0]
 8020036:	4290      	cmp	r0, r2
 8020038:	bf14      	ite	ne
 802003a:	2001      	movne	r0, #1
 802003c:	2006      	moveq	r0, #6
 802003e:	4770      	bx	lr

08020040 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8020040:	b510      	push	{r4, lr}
 8020042:	4b03      	ldr	r3, [pc, #12]	; (8020050 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8020044:	6003      	str	r3, [r0, #0]
 8020046:	4604      	mov	r4, r0
 8020048:	f000 f917 	bl	802027a <_ZNSt9type_infoD1Ev>
 802004c:	4620      	mov	r0, r4
 802004e:	bd10      	pop	{r4, pc}
 8020050:	08027a84 	.word	0x08027a84

08020054 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8020054:	b510      	push	{r4, lr}
 8020056:	4604      	mov	r4, r0
 8020058:	f7ff fff2 	bl	8020040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802005c:	4620      	mov	r0, r4
 802005e:	2108      	movs	r1, #8
 8020060:	f000 f842 	bl	80200e8 <_ZdlPvj>
 8020064:	4620      	mov	r0, r4
 8020066:	bd10      	pop	{r4, pc}

08020068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8020068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802006c:	461f      	mov	r7, r3
 802006e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8020072:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020076:	4598      	cmp	r8, r3
 8020078:	4606      	mov	r6, r0
 802007a:	4615      	mov	r5, r2
 802007c:	d107      	bne.n	802008e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 802007e:	9907      	ldr	r1, [sp, #28]
 8020080:	f000 f8fe 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 8020084:	b118      	cbz	r0, 802008e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8020086:	7165      	strb	r5, [r4, #5]
 8020088:	2000      	movs	r0, #0
 802008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802008e:	4639      	mov	r1, r7
 8020090:	4630      	mov	r0, r6
 8020092:	f000 f8f5 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 8020096:	2800      	cmp	r0, #0
 8020098:	d0f6      	beq.n	8020088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 802009a:	2301      	movs	r3, #1
 802009c:	f8c4 8000 	str.w	r8, [r4]
 80200a0:	7125      	strb	r5, [r4, #4]
 80200a2:	71a3      	strb	r3, [r4, #6]
 80200a4:	e7f0      	b.n	8020088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080200a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80200a6:	b538      	push	{r3, r4, r5, lr}
 80200a8:	4615      	mov	r5, r2
 80200aa:	461c      	mov	r4, r3
 80200ac:	f000 f8e8 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 80200b0:	b120      	cbz	r0, 80200bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80200b2:	2308      	movs	r3, #8
 80200b4:	60e3      	str	r3, [r4, #12]
 80200b6:	2306      	movs	r3, #6
 80200b8:	6025      	str	r5, [r4, #0]
 80200ba:	7123      	strb	r3, [r4, #4]
 80200bc:	bd38      	pop	{r3, r4, r5, pc}

080200be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80200be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80200c0:	4605      	mov	r5, r0
 80200c2:	460c      	mov	r4, r1
 80200c4:	9201      	str	r2, [sp, #4]
 80200c6:	461e      	mov	r6, r3
 80200c8:	f000 f8da 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 80200cc:	b950      	cbnz	r0, 80200e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80200ce:	2e03      	cmp	r6, #3
 80200d0:	d808      	bhi.n	80200e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80200d2:	6823      	ldr	r3, [r4, #0]
 80200d4:	9a01      	ldr	r2, [sp, #4]
 80200d6:	695b      	ldr	r3, [r3, #20]
 80200d8:	4629      	mov	r1, r5
 80200da:	4620      	mov	r0, r4
 80200dc:	b002      	add	sp, #8
 80200de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80200e2:	4718      	bx	r3
 80200e4:	b002      	add	sp, #8
 80200e6:	bd70      	pop	{r4, r5, r6, pc}

080200e8 <_ZdlPvj>:
 80200e8:	f7fc bfbe 	b.w	801d068 <_ZdlPv>

080200ec <__cxa_guard_acquire>:
 80200ec:	6803      	ldr	r3, [r0, #0]
 80200ee:	07db      	lsls	r3, r3, #31
 80200f0:	d406      	bmi.n	8020100 <__cxa_guard_acquire+0x14>
 80200f2:	7843      	ldrb	r3, [r0, #1]
 80200f4:	b103      	cbz	r3, 80200f8 <__cxa_guard_acquire+0xc>
 80200f6:	deff      	udf	#255	; 0xff
 80200f8:	2301      	movs	r3, #1
 80200fa:	7043      	strb	r3, [r0, #1]
 80200fc:	4618      	mov	r0, r3
 80200fe:	4770      	bx	lr
 8020100:	2000      	movs	r0, #0
 8020102:	4770      	bx	lr

08020104 <__cxa_guard_release>:
 8020104:	2301      	movs	r3, #1
 8020106:	6003      	str	r3, [r0, #0]
 8020108:	4770      	bx	lr
	...

0802010c <_ZSt11_Hash_bytesPKvjj>:
 802010c:	4b18      	ldr	r3, [pc, #96]	; (8020170 <_ZSt11_Hash_bytesPKvjj+0x64>)
 802010e:	b570      	push	{r4, r5, r6, lr}
 8020110:	404a      	eors	r2, r1
 8020112:	460d      	mov	r5, r1
 8020114:	1846      	adds	r6, r0, r1
 8020116:	2d03      	cmp	r5, #3
 8020118:	eba6 0405 	sub.w	r4, r6, r5
 802011c:	d908      	bls.n	8020130 <_ZSt11_Hash_bytesPKvjj+0x24>
 802011e:	6824      	ldr	r4, [r4, #0]
 8020120:	435c      	muls	r4, r3
 8020122:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 8020126:	435a      	muls	r2, r3
 8020128:	435c      	muls	r4, r3
 802012a:	4062      	eors	r2, r4
 802012c:	3d04      	subs	r5, #4
 802012e:	e7f2      	b.n	8020116 <_ZSt11_Hash_bytesPKvjj+0xa>
 8020130:	088d      	lsrs	r5, r1, #2
 8020132:	f06f 0403 	mvn.w	r4, #3
 8020136:	fb04 1105 	mla	r1, r4, r5, r1
 802013a:	2902      	cmp	r1, #2
 802013c:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 8020140:	d011      	beq.n	8020166 <_ZSt11_Hash_bytesPKvjj+0x5a>
 8020142:	2903      	cmp	r1, #3
 8020144:	d00c      	beq.n	8020160 <_ZSt11_Hash_bytesPKvjj+0x54>
 8020146:	2901      	cmp	r1, #1
 8020148:	d103      	bne.n	8020152 <_ZSt11_Hash_bytesPKvjj+0x46>
 802014a:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 802014e:	4042      	eors	r2, r0
 8020150:	435a      	muls	r2, r3
 8020152:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 8020156:	fb03 f002 	mul.w	r0, r3, r2
 802015a:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 802015e:	bd70      	pop	{r4, r5, r6, pc}
 8020160:	78a1      	ldrb	r1, [r4, #2]
 8020162:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 8020166:	7861      	ldrb	r1, [r4, #1]
 8020168:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 802016c:	e7ed      	b.n	802014a <_ZSt11_Hash_bytesPKvjj+0x3e>
 802016e:	bf00      	nop
 8020170:	5bd1e995 	.word	0x5bd1e995

08020174 <__cxa_pure_virtual>:
 8020174:	b508      	push	{r3, lr}
 8020176:	f000 fb99 	bl	80208ac <_ZSt9terminatev>
	...

0802017c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 802017c:	b510      	push	{r4, lr}
 802017e:	4b03      	ldr	r3, [pc, #12]	; (802018c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8020180:	6003      	str	r3, [r0, #0]
 8020182:	4604      	mov	r4, r0
 8020184:	f7ff ff5c 	bl	8020040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8020188:	4620      	mov	r0, r4
 802018a:	bd10      	pop	{r4, pc}
 802018c:	08027ae4 	.word	0x08027ae4

08020190 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4604      	mov	r4, r0
 8020194:	f7ff fff2 	bl	802017c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8020198:	4620      	mov	r0, r4
 802019a:	210c      	movs	r1, #12
 802019c:	f7ff ffa4 	bl	80200e8 <_ZdlPvj>
 80201a0:	4620      	mov	r0, r4
 80201a2:	bd10      	pop	{r4, pc}

080201a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80201a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80201a6:	9f08      	ldr	r7, [sp, #32]
 80201a8:	4297      	cmp	r7, r2
 80201aa:	4605      	mov	r5, r0
 80201ac:	460e      	mov	r6, r1
 80201ae:	4614      	mov	r4, r2
 80201b0:	d00a      	beq.n	80201c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 80201b2:	68a8      	ldr	r0, [r5, #8]
 80201b4:	6802      	ldr	r2, [r0, #0]
 80201b6:	9708      	str	r7, [sp, #32]
 80201b8:	6a15      	ldr	r5, [r2, #32]
 80201ba:	4631      	mov	r1, r6
 80201bc:	4622      	mov	r2, r4
 80201be:	46ac      	mov	ip, r5
 80201c0:	b003      	add	sp, #12
 80201c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80201c6:	4760      	bx	ip
 80201c8:	4619      	mov	r1, r3
 80201ca:	9301      	str	r3, [sp, #4]
 80201cc:	f000 f858 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 80201d0:	9b01      	ldr	r3, [sp, #4]
 80201d2:	2800      	cmp	r0, #0
 80201d4:	d0ed      	beq.n	80201b2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80201d6:	2006      	movs	r0, #6
 80201d8:	b003      	add	sp, #12
 80201da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080201dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80201dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e0:	460d      	mov	r5, r1
 80201e2:	4619      	mov	r1, r3
 80201e4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80201e8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80201ec:	4681      	mov	r9, r0
 80201ee:	4617      	mov	r7, r2
 80201f0:	4698      	mov	r8, r3
 80201f2:	f000 f845 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 80201f6:	b190      	cbz	r0, 802021e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80201f8:	2d00      	cmp	r5, #0
 80201fa:	6034      	str	r4, [r6, #0]
 80201fc:	7137      	strb	r7, [r6, #4]
 80201fe:	db09      	blt.n	8020214 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8020200:	1961      	adds	r1, r4, r5
 8020202:	458a      	cmp	sl, r1
 8020204:	bf0c      	ite	eq
 8020206:	2106      	moveq	r1, #6
 8020208:	2101      	movne	r1, #1
 802020a:	71b1      	strb	r1, [r6, #6]
 802020c:	2000      	movs	r0, #0
 802020e:	b001      	add	sp, #4
 8020210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020214:	3502      	adds	r5, #2
 8020216:	d1f9      	bne.n	802020c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8020218:	2301      	movs	r3, #1
 802021a:	71b3      	strb	r3, [r6, #6]
 802021c:	e7f6      	b.n	802020c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 802021e:	4554      	cmp	r4, sl
 8020220:	d106      	bne.n	8020230 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8020222:	4659      	mov	r1, fp
 8020224:	4648      	mov	r0, r9
 8020226:	f000 f82b 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 802022a:	b108      	cbz	r0, 8020230 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 802022c:	7177      	strb	r7, [r6, #5]
 802022e:	e7ed      	b.n	802020c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8020230:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8020234:	6803      	ldr	r3, [r0, #0]
 8020236:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 802023a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 802023e:	69dc      	ldr	r4, [r3, #28]
 8020240:	463a      	mov	r2, r7
 8020242:	4643      	mov	r3, r8
 8020244:	4629      	mov	r1, r5
 8020246:	46a4      	mov	ip, r4
 8020248:	b001      	add	sp, #4
 802024a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802024e:	4760      	bx	ip

08020250 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8020250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020254:	4607      	mov	r7, r0
 8020256:	460c      	mov	r4, r1
 8020258:	4615      	mov	r5, r2
 802025a:	461e      	mov	r6, r3
 802025c:	f7ff ff23 	bl	80200a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8020260:	b948      	cbnz	r0, 8020276 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8020262:	68b8      	ldr	r0, [r7, #8]
 8020264:	6803      	ldr	r3, [r0, #0]
 8020266:	699f      	ldr	r7, [r3, #24]
 8020268:	462a      	mov	r2, r5
 802026a:	4633      	mov	r3, r6
 802026c:	4621      	mov	r1, r4
 802026e:	46bc      	mov	ip, r7
 8020270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020274:	4760      	bx	ip
 8020276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802027a <_ZNSt9type_infoD1Ev>:
 802027a:	4770      	bx	lr

0802027c <_ZNKSt9type_info14__is_pointer_pEv>:
 802027c:	2000      	movs	r0, #0
 802027e:	4770      	bx	lr

08020280 <_ZNKSt9type_infoeqERKS_>:
 8020280:	4281      	cmp	r1, r0
 8020282:	b508      	push	{r3, lr}
 8020284:	d00e      	beq.n	80202a4 <_ZNKSt9type_infoeqERKS_+0x24>
 8020286:	6840      	ldr	r0, [r0, #4]
 8020288:	7803      	ldrb	r3, [r0, #0]
 802028a:	2b2a      	cmp	r3, #42	; 0x2a
 802028c:	d00c      	beq.n	80202a8 <_ZNKSt9type_infoeqERKS_+0x28>
 802028e:	6849      	ldr	r1, [r1, #4]
 8020290:	780b      	ldrb	r3, [r1, #0]
 8020292:	2b2a      	cmp	r3, #42	; 0x2a
 8020294:	bf08      	it	eq
 8020296:	3101      	addeq	r1, #1
 8020298:	f7e0 f872 	bl	8000380 <strcmp>
 802029c:	fab0 f080 	clz	r0, r0
 80202a0:	0940      	lsrs	r0, r0, #5
 80202a2:	bd08      	pop	{r3, pc}
 80202a4:	2001      	movs	r0, #1
 80202a6:	e7fc      	b.n	80202a2 <_ZNKSt9type_infoeqERKS_+0x22>
 80202a8:	2000      	movs	r0, #0
 80202aa:	e7fa      	b.n	80202a2 <_ZNKSt9type_infoeqERKS_+0x22>

080202ac <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 80202ac:	b510      	push	{r4, lr}
 80202ae:	4b03      	ldr	r3, [pc, #12]	; (80202bc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 80202b0:	6003      	str	r3, [r0, #0]
 80202b2:	4604      	mov	r4, r0
 80202b4:	f7ff fec4 	bl	8020040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80202b8:	4620      	mov	r0, r4
 80202ba:	bd10      	pop	{r4, pc}
 80202bc:	08027b5c 	.word	0x08027b5c

080202c0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 80202c0:	b510      	push	{r4, lr}
 80202c2:	4604      	mov	r4, r0
 80202c4:	f7ff fff2 	bl	80202ac <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 80202c8:	4620      	mov	r0, r4
 80202ca:	2118      	movs	r1, #24
 80202cc:	f7ff ff0c 	bl	80200e8 <_ZdlPvj>
 80202d0:	4620      	mov	r0, r4
 80202d2:	bd10      	pop	{r4, pc}

080202d4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80202d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80202dc:	454a      	cmp	r2, r9
 80202de:	4604      	mov	r4, r0
 80202e0:	460f      	mov	r7, r1
 80202e2:	4616      	mov	r6, r2
 80202e4:	469a      	mov	sl, r3
 80202e6:	d024      	beq.n	8020332 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 80202e8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80202ec:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 80202f0:	f1b8 0f00 	cmp.w	r8, #0
 80202f4:	d028      	beq.n	8020348 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 80202f6:	68e5      	ldr	r5, [r4, #12]
 80202f8:	07aa      	lsls	r2, r5, #30
 80202fa:	d521      	bpl.n	8020340 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 80202fc:	122a      	asrs	r2, r5, #8
 80202fe:	f015 0501 	ands.w	r5, r5, #1
 8020302:	d003      	beq.n	802030c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8020304:	1cfb      	adds	r3, r7, #3
 8020306:	d01b      	beq.n	8020340 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8020308:	6833      	ldr	r3, [r6, #0]
 802030a:	589a      	ldr	r2, [r3, r2]
 802030c:	68a0      	ldr	r0, [r4, #8]
 802030e:	6803      	ldr	r3, [r0, #0]
 8020310:	f8cd 9000 	str.w	r9, [sp]
 8020314:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8020318:	4432      	add	r2, r6
 802031a:	4653      	mov	r3, sl
 802031c:	4639      	mov	r1, r7
 802031e:	47d8      	blx	fp
 8020320:	2803      	cmp	r0, #3
 8020322:	d90d      	bls.n	8020340 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8020324:	b115      	cbz	r5, 802032c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8020326:	f040 0001 	orr.w	r0, r0, #1
 802032a:	b2c0      	uxtb	r0, r0
 802032c:	b003      	add	sp, #12
 802032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020332:	4619      	mov	r1, r3
 8020334:	f7ff ffa4 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 8020338:	2800      	cmp	r0, #0
 802033a:	d0d5      	beq.n	80202e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 802033c:	2006      	movs	r0, #6
 802033e:	e7f5      	b.n	802032c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8020340:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8020344:	3c08      	subs	r4, #8
 8020346:	e7d3      	b.n	80202f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8020348:	2001      	movs	r0, #1
 802034a:	e7ef      	b.n	802032c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0802034c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 802034c:	b4f0      	push	{r4, r5, r6, r7}
 802034e:	1e0c      	subs	r4, r1, #0
 8020350:	9e04      	ldr	r6, [sp, #16]
 8020352:	db06      	blt.n	8020362 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 8020354:	4414      	add	r4, r2
 8020356:	42a6      	cmp	r6, r4
 8020358:	bf14      	ite	ne
 802035a:	2001      	movne	r0, #1
 802035c:	2006      	moveq	r0, #6
 802035e:	bcf0      	pop	{r4, r5, r6, r7}
 8020360:	4770      	bx	lr
 8020362:	3402      	adds	r4, #2
 8020364:	d004      	beq.n	8020370 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 8020366:	6804      	ldr	r4, [r0, #0]
 8020368:	6a24      	ldr	r4, [r4, #32]
 802036a:	46a4      	mov	ip, r4
 802036c:	bcf0      	pop	{r4, r5, r6, r7}
 802036e:	4760      	bx	ip
 8020370:	2001      	movs	r0, #1
 8020372:	e7f4      	b.n	802035e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

08020374 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8020374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020378:	b091      	sub	sp, #68	; 0x44
 802037a:	469a      	mov	sl, r3
 802037c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 802037e:	9206      	str	r2, [sp, #24]
 8020380:	68a3      	ldr	r3, [r4, #8]
 8020382:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020384:	4688      	mov	r8, r1
 8020386:	06d9      	lsls	r1, r3, #27
 8020388:	bf44      	itt	mi
 802038a:	6883      	ldrmi	r3, [r0, #8]
 802038c:	60a3      	strmi	r3, [r4, #8]
 802038e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020390:	4293      	cmp	r3, r2
 8020392:	4681      	mov	r9, r0
 8020394:	d107      	bne.n	80203a6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8020396:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8020398:	f7ff ff72 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 802039c:	b118      	cbz	r0, 80203a6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 802039e:	9b06      	ldr	r3, [sp, #24]
 80203a0:	7163      	strb	r3, [r4, #5]
 80203a2:	2700      	movs	r7, #0
 80203a4:	e082      	b.n	80204ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 80203a6:	4651      	mov	r1, sl
 80203a8:	4648      	mov	r0, r9
 80203aa:	f7ff ff69 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 80203ae:	b1c0      	cbz	r0, 80203e2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 80203b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80203b2:	6023      	str	r3, [r4, #0]
 80203b4:	f1b8 0f00 	cmp.w	r8, #0
 80203b8:	9b06      	ldr	r3, [sp, #24]
 80203ba:	7123      	strb	r3, [r4, #4]
 80203bc:	db0b      	blt.n	80203d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 80203be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80203c0:	4498      	add	r8, r3
 80203c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80203c4:	4543      	cmp	r3, r8
 80203c6:	bf0c      	ite	eq
 80203c8:	f04f 0806 	moveq.w	r8, #6
 80203cc:	f04f 0801 	movne.w	r8, #1
 80203d0:	f884 8006 	strb.w	r8, [r4, #6]
 80203d4:	e7e5      	b.n	80203a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 80203d6:	f118 0f02 	cmn.w	r8, #2
 80203da:	d1e2      	bne.n	80203a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 80203dc:	2301      	movs	r3, #1
 80203de:	71a3      	strb	r3, [r4, #6]
 80203e0:	e7df      	b.n	80203a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 80203e2:	f1b8 0f00 	cmp.w	r8, #0
 80203e6:	bfa9      	itett	ge
 80203e8:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 80203ea:	9007      	strlt	r0, [sp, #28]
 80203ec:	eba3 0308 	subge.w	r3, r3, r8
 80203f0:	9307      	strge	r3, [sp, #28]
 80203f2:	2700      	movs	r7, #0
 80203f4:	2302      	movs	r3, #2
 80203f6:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 80203fa:	2301      	movs	r3, #1
 80203fc:	9308      	str	r3, [sp, #32]
 80203fe:	9b06      	ldr	r3, [sp, #24]
 8020400:	f043 0301 	orr.w	r3, r3, #1
 8020404:	930b      	str	r3, [sp, #44]	; 0x2c
 8020406:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 802040a:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 802040e:	9305      	str	r3, [sp, #20]
 8020410:	f1bb 0f00 	cmp.w	fp, #0
 8020414:	f000 80d7 	beq.w	80205c6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 8020418:	2300      	movs	r3, #0
 802041a:	930d      	str	r3, [sp, #52]	; 0x34
 802041c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8020420:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8020424:	9b05      	ldr	r3, [sp, #20]
 8020426:	68a5      	ldr	r5, [r4, #8]
 8020428:	68db      	ldr	r3, [r3, #12]
 802042a:	950f      	str	r5, [sp, #60]	; 0x3c
 802042c:	07da      	lsls	r2, r3, #31
 802042e:	bf43      	ittte	mi
 8020430:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8020432:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8020434:	6800      	ldrmi	r0, [r0, #0]
 8020436:	9a06      	ldrpl	r2, [sp, #24]
 8020438:	ea4f 2123 	mov.w	r1, r3, asr #8
 802043c:	bf48      	it	mi
 802043e:	5841      	ldrmi	r1, [r0, r1]
 8020440:	981a      	ldr	r0, [sp, #104]	; 0x68
 8020442:	4401      	add	r1, r0
 8020444:	9807      	ldr	r0, [sp, #28]
 8020446:	b138      	cbz	r0, 8020458 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe4>
 8020448:	4288      	cmp	r0, r1
 802044a:	9e08      	ldr	r6, [sp, #32]
 802044c:	bf2c      	ite	cs
 802044e:	2000      	movcs	r0, #0
 8020450:	2001      	movcc	r0, #1
 8020452:	42b0      	cmp	r0, r6
 8020454:	f000 80b3 	beq.w	80205be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24a>
 8020458:	079b      	lsls	r3, r3, #30
 802045a:	d407      	bmi.n	802046c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 802045c:	f118 0f02 	cmn.w	r8, #2
 8020460:	d102      	bne.n	8020468 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf4>
 8020462:	07ae      	lsls	r6, r5, #30
 8020464:	f000 80ad 	beq.w	80205c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8020468:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 802046c:	9b05      	ldr	r3, [sp, #20]
 802046e:	6898      	ldr	r0, [r3, #8]
 8020470:	ad0d      	add	r5, sp, #52	; 0x34
 8020472:	6803      	ldr	r3, [r0, #0]
 8020474:	9503      	str	r5, [sp, #12]
 8020476:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020478:	9502      	str	r5, [sp, #8]
 802047a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 802047c:	e9cd 1500 	strd	r1, r5, [sp]
 8020480:	4641      	mov	r1, r8
 8020482:	69dd      	ldr	r5, [r3, #28]
 8020484:	4653      	mov	r3, sl
 8020486:	47a8      	blx	r5
 8020488:	7963      	ldrb	r3, [r4, #5]
 802048a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 802048e:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8020492:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020494:	4313      	orrs	r3, r2
 8020496:	2d06      	cmp	r5, #6
 8020498:	7163      	strb	r3, [r4, #5]
 802049a:	d001      	beq.n	80204a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 802049c:	2d02      	cmp	r5, #2
 802049e:	d109      	bne.n	80204b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80204a0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80204a4:	6021      	str	r1, [r4, #0]
 80204a6:	7123      	strb	r3, [r4, #4]
 80204a8:	71a5      	strb	r5, [r4, #6]
 80204aa:	4607      	mov	r7, r0
 80204ac:	4638      	mov	r0, r7
 80204ae:	b011      	add	sp, #68	; 0x44
 80204b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204b4:	6822      	ldr	r2, [r4, #0]
 80204b6:	b9a7      	cbnz	r7, 80204e2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 80204b8:	b9aa      	cbnz	r2, 80204e6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x172>
 80204ba:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80204be:	6021      	str	r1, [r4, #0]
 80204c0:	7122      	strb	r2, [r4, #4]
 80204c2:	b121      	cbz	r1, 80204ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 80204c4:	b11b      	cbz	r3, 80204ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 80204c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80204ca:	07dd      	lsls	r5, r3, #31
 80204cc:	d5ed      	bpl.n	80204aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 80204ce:	7963      	ldrb	r3, [r4, #5]
 80204d0:	2b04      	cmp	r3, #4
 80204d2:	d0ea      	beq.n	80204aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 80204d4:	9b05      	ldr	r3, [sp, #20]
 80204d6:	3b08      	subs	r3, #8
 80204d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80204dc:	9305      	str	r3, [sp, #20]
 80204de:	4607      	mov	r7, r0
 80204e0:	e796      	b.n	8020410 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 80204e2:	2a00      	cmp	r2, #0
 80204e4:	d037      	beq.n	8020556 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 80204e6:	4291      	cmp	r1, r2
 80204e8:	d106      	bne.n	80204f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 80204ea:	7923      	ldrb	r3, [r4, #4]
 80204ec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80204f0:	4313      	orrs	r3, r2
 80204f2:	7123      	strb	r3, [r4, #4]
 80204f4:	4638      	mov	r0, r7
 80204f6:	e7ea      	b.n	80204ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 80204f8:	b909      	cbnz	r1, 80204fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 80204fa:	2800      	cmp	r0, #0
 80204fc:	d0fa      	beq.n	80204f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 80204fe:	2b03      	cmp	r3, #3
 8020500:	79a6      	ldrb	r6, [r4, #6]
 8020502:	d904      	bls.n	802050e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19a>
 8020504:	07d9      	lsls	r1, r3, #31
 8020506:	d529      	bpl.n	802055c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 8020508:	68a3      	ldr	r3, [r4, #8]
 802050a:	079b      	lsls	r3, r3, #30
 802050c:	d526      	bpl.n	802055c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 802050e:	b97e      	cbnz	r6, 8020530 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1bc>
 8020510:	2d03      	cmp	r5, #3
 8020512:	d905      	bls.n	8020520 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 8020514:	07ee      	lsls	r6, r5, #31
 8020516:	d541      	bpl.n	802059c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8020518:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802051c:	0798      	lsls	r0, r3, #30
 802051e:	d53d      	bpl.n	802059c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8020520:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020522:	9300      	str	r3, [sp, #0]
 8020524:	4641      	mov	r1, r8
 8020526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020528:	4650      	mov	r0, sl
 802052a:	f7ff ff0f 	bl	802034c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 802052e:	4606      	mov	r6, r0
 8020530:	b9e5      	cbnz	r5, 802056c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8020532:	2e03      	cmp	r6, #3
 8020534:	d905      	bls.n	8020542 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ce>
 8020536:	07f1      	lsls	r1, r6, #31
 8020538:	d532      	bpl.n	80205a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 802053a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802053e:	079a      	lsls	r2, r3, #30
 8020540:	d52e      	bpl.n	80205a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8020542:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020544:	9300      	str	r3, [sp, #0]
 8020546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802054a:	4641      	mov	r1, r8
 802054c:	4650      	mov	r0, sl
 802054e:	f7ff fefd 	bl	802034c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8020552:	4605      	mov	r5, r0
 8020554:	e00a      	b.n	802056c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8020556:	2900      	cmp	r1, #0
 8020558:	d1d1      	bne.n	80204fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 802055a:	e7cb      	b.n	80204f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 802055c:	2e01      	cmp	r6, #1
 802055e:	bf38      	it	cc
 8020560:	2601      	movcc	r6, #1
 8020562:	2d01      	cmp	r5, #1
 8020564:	bf38      	it	cc
 8020566:	2501      	movcc	r5, #1
 8020568:	b2f6      	uxtb	r6, r6
 802056a:	b2ed      	uxtb	r5, r5
 802056c:	ea85 0306 	eor.w	r3, r5, r6
 8020570:	b2db      	uxtb	r3, r3
 8020572:	2b03      	cmp	r3, #3
 8020574:	d916      	bls.n	80205a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8020576:	2d03      	cmp	r5, #3
 8020578:	bf81      	itttt	hi
 802057a:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 802057c:	6023      	strhi	r3, [r4, #0]
 802057e:	462e      	movhi	r6, r5
 8020580:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8020584:	bf86      	itte	hi
 8020586:	7123      	strbhi	r3, [r4, #4]
 8020588:	2000      	movhi	r0, #0
 802058a:	4638      	movls	r0, r7
 802058c:	07b3      	lsls	r3, r6, #30
 802058e:	71a6      	strb	r6, [r4, #6]
 8020590:	d402      	bmi.n	8020598 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x224>
 8020592:	f016 0601 	ands.w	r6, r6, #1
 8020596:	d19a      	bne.n	80204ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8020598:	2000      	movs	r0, #0
 802059a:	e786      	b.n	80204aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 802059c:	2601      	movs	r6, #1
 802059e:	e7e5      	b.n	802056c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 80205a0:	2501      	movs	r5, #1
 80205a2:	e7e3      	b.n	802056c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 80205a4:	4035      	ands	r5, r6
 80205a6:	b2ed      	uxtb	r5, r5
 80205a8:	2300      	movs	r3, #0
 80205aa:	2d03      	cmp	r5, #3
 80205ac:	6023      	str	r3, [r4, #0]
 80205ae:	d903      	bls.n	80205b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 80205b0:	2302      	movs	r3, #2
 80205b2:	71a3      	strb	r3, [r4, #6]
 80205b4:	2001      	movs	r0, #1
 80205b6:	e778      	b.n	80204aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 80205b8:	2001      	movs	r0, #1
 80205ba:	71a0      	strb	r0, [r4, #6]
 80205bc:	e787      	b.n	80204ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 80205be:	2301      	movs	r3, #1
 80205c0:	9309      	str	r3, [sp, #36]	; 0x24
 80205c2:	4638      	mov	r0, r7
 80205c4:	e786      	b.n	80204d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 80205c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	f43f af6f 	beq.w	80204ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 80205ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205d0:	2b01      	cmp	r3, #1
 80205d2:	f43f af6b 	beq.w	80204ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 80205d6:	2301      	movs	r3, #1
 80205d8:	930a      	str	r3, [sp, #40]	; 0x28
 80205da:	f8cd b020 	str.w	fp, [sp, #32]
 80205de:	e712      	b.n	8020406 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

080205e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80205e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e4:	ed2d 8b02 	vpush	{d8}
 80205e8:	b089      	sub	sp, #36	; 0x24
 80205ea:	ee08 1a10 	vmov	s16, r1
 80205ee:	4606      	mov	r6, r0
 80205f0:	4617      	mov	r7, r2
 80205f2:	461c      	mov	r4, r3
 80205f4:	f7ff fd57 	bl	80200a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80205f8:	4605      	mov	r5, r0
 80205fa:	2800      	cmp	r0, #0
 80205fc:	d15f      	bne.n	80206be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80205fe:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8020602:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8020606:	f019 0f10 	tst.w	r9, #16
 802060a:	bf18      	it	ne
 802060c:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8020610:	f009 0301 	and.w	r3, r9, #1
 8020614:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8020618:	9303      	str	r3, [sp, #12]
 802061a:	f10d 0b10 	add.w	fp, sp, #16
 802061e:	f1ba 0f00 	cmp.w	sl, #0
 8020622:	d074      	beq.n	802070e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 8020624:	2300      	movs	r3, #0
 8020626:	f8d8 200c 	ldr.w	r2, [r8, #12]
 802062a:	9304      	str	r3, [sp, #16]
 802062c:	f88d 3014 	strb.w	r3, [sp, #20]
 8020630:	2300      	movs	r3, #0
 8020632:	9307      	str	r3, [sp, #28]
 8020634:	f002 0301 	and.w	r3, r2, #1
 8020638:	9301      	str	r3, [sp, #4]
 802063a:	f002 0302 	and.w	r3, r2, #2
 802063e:	9302      	str	r3, [sp, #8]
 8020640:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8020644:	430b      	orrs	r3, r1
 8020646:	f8cd 9018 	str.w	r9, [sp, #24]
 802064a:	d104      	bne.n	8020656 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 802064c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020650:	f1a8 0808 	sub.w	r8, r8, #8
 8020654:	e7e3      	b.n	802061e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 8020656:	2f00      	cmp	r7, #0
 8020658:	d037      	beq.n	80206ca <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 802065a:	9b01      	ldr	r3, [sp, #4]
 802065c:	1212      	asrs	r2, r2, #8
 802065e:	b10b      	cbz	r3, 8020664 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	589a      	ldr	r2, [r3, r2]
 8020664:	443a      	add	r2, r7
 8020666:	f8d8 0008 	ldr.w	r0, [r8, #8]
 802066a:	6803      	ldr	r3, [r0, #0]
 802066c:	ee18 1a10 	vmov	r1, s16
 8020670:	699d      	ldr	r5, [r3, #24]
 8020672:	465b      	mov	r3, fp
 8020674:	47a8      	blx	r5
 8020676:	4605      	mov	r5, r0
 8020678:	2800      	cmp	r0, #0
 802067a:	d0e7      	beq.n	802064c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 802067c:	9b07      	ldr	r3, [sp, #28]
 802067e:	2b08      	cmp	r3, #8
 8020680:	d104      	bne.n	802068c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 8020682:	9b01      	ldr	r3, [sp, #4]
 8020684:	b113      	cbz	r3, 802068c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 8020686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802068a:	9307      	str	r3, [sp, #28]
 802068c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020690:	2b03      	cmp	r3, #3
 8020692:	d905      	bls.n	80206a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8020694:	9a02      	ldr	r2, [sp, #8]
 8020696:	b91a      	cbnz	r2, 80206a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8020698:	f023 0302 	bic.w	r3, r3, #2
 802069c:	f88d 3014 	strb.w	r3, [sp, #20]
 80206a0:	68e1      	ldr	r1, [r4, #12]
 80206a2:	b9d1      	cbnz	r1, 80206da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 80206a4:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80206a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80206ac:	7923      	ldrb	r3, [r4, #4]
 80206ae:	2b03      	cmp	r3, #3
 80206b0:	d905      	bls.n	80206be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80206b2:	079a      	lsls	r2, r3, #30
 80206b4:	d50b      	bpl.n	80206ce <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 80206b6:	68b3      	ldr	r3, [r6, #8]
 80206b8:	f013 0f01 	tst.w	r3, #1
 80206bc:	d1c6      	bne.n	802064c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 80206be:	4628      	mov	r0, r5
 80206c0:	b009      	add	sp, #36	; 0x24
 80206c2:	ecbd 8b02 	vpop	{d8}
 80206c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206ca:	463a      	mov	r2, r7
 80206cc:	e7cb      	b.n	8020666 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 80206ce:	07db      	lsls	r3, r3, #31
 80206d0:	d5f5      	bpl.n	80206be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80206d2:	68b3      	ldr	r3, [r6, #8]
 80206d4:	f013 0f02 	tst.w	r3, #2
 80206d8:	e7f0      	b.n	80206bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 80206da:	6823      	ldr	r3, [r4, #0]
 80206dc:	9a04      	ldr	r2, [sp, #16]
 80206de:	4293      	cmp	r3, r2
 80206e0:	d004      	beq.n	80206ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 80206e2:	2300      	movs	r3, #0
 80206e4:	6023      	str	r3, [r4, #0]
 80206e6:	2302      	movs	r3, #2
 80206e8:	7123      	strb	r3, [r4, #4]
 80206ea:	e7e8      	b.n	80206be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80206ec:	b12b      	cbz	r3, 80206fa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 80206ee:	7923      	ldrb	r3, [r4, #4]
 80206f0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80206f4:	4313      	orrs	r3, r2
 80206f6:	7123      	strb	r3, [r4, #4]
 80206f8:	e7a8      	b.n	802064c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 80206fa:	9807      	ldr	r0, [sp, #28]
 80206fc:	2808      	cmp	r0, #8
 80206fe:	d0f2      	beq.n	80206e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8020700:	2908      	cmp	r1, #8
 8020702:	d0f0      	beq.n	80206e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8020704:	f7ff fdbc 	bl	8020280 <_ZNKSt9type_infoeqERKS_>
 8020708:	2800      	cmp	r0, #0
 802070a:	d1f0      	bne.n	80206ee <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 802070c:	e7eb      	b.n	80206e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 802070e:	7925      	ldrb	r5, [r4, #4]
 8020710:	3d00      	subs	r5, #0
 8020712:	bf18      	it	ne
 8020714:	2501      	movne	r5, #1
 8020716:	e7d2      	b.n	80206be <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

08020718 <_ZNSaIcEC1Ev>:
 8020718:	4770      	bx	lr

0802071a <_ZNSaIcED1Ev>:
 802071a:	4770      	bx	lr

0802071c <_ZSt25__throw_bad_function_callv>:
 802071c:	b508      	push	{r3, lr}
 802071e:	f000 f8d3 	bl	80208c8 <abort>

08020722 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8020722:	b10a      	cbz	r2, 8020728 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8020724:	f000 b910 	b.w	8020948 <memcpy>
 8020728:	4770      	bx	lr
	...

0802072c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 802072c:	b508      	push	{r3, lr}
 802072e:	680b      	ldr	r3, [r1, #0]
 8020730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020734:	d302      	bcc.n	802073c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8020736:	480d      	ldr	r0, [pc, #52]	; (802076c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8020738:	f000 f8c3 	bl	80208c2 <_ZSt20__throw_length_errorPKc>
 802073c:	4293      	cmp	r3, r2
 802073e:	d90b      	bls.n	8020758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8020740:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8020744:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8020748:	d206      	bcs.n	8020758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 802074a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 802074e:	bf2a      	itet	cs
 8020750:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8020754:	6008      	strcc	r0, [r1, #0]
 8020756:	600b      	strcs	r3, [r1, #0]
 8020758:	6808      	ldr	r0, [r1, #0]
 802075a:	3001      	adds	r0, #1
 802075c:	d501      	bpl.n	8020762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 802075e:	f000 f8aa 	bl	80208b6 <_ZSt17__throw_bad_allocv>
 8020762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020766:	f7fc bc73 	b.w	801d050 <_Znwj>
 802076a:	bf00      	nop
 802076c:	08027b83 	.word	0x08027b83

08020770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8020770:	f850 3b08 	ldr.w	r3, [r0], #8
 8020774:	4283      	cmp	r3, r0
 8020776:	d002      	beq.n	802077e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8020778:	4618      	mov	r0, r3
 802077a:	f7fc bc75 	b.w	801d068 <_ZdlPv>
 802077e:	4770      	bx	lr

08020780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8020780:	2a01      	cmp	r2, #1
 8020782:	b510      	push	{r4, lr}
 8020784:	d102      	bne.n	802078c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8020786:	780a      	ldrb	r2, [r1, #0]
 8020788:	7002      	strb	r2, [r0, #0]
 802078a:	bd10      	pop	{r4, pc}
 802078c:	f7ff ffc9 	bl	8020722 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8020790:	e7fb      	b.n	802078a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08020792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8020792:	b508      	push	{r3, lr}
 8020794:	1a52      	subs	r2, r2, r1
 8020796:	f7ff fff3 	bl	8020780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802079a:	bd08      	pop	{r3, pc}

0802079c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 802079c:	b508      	push	{r3, lr}
 802079e:	1a52      	subs	r2, r2, r1
 80207a0:	f7ff ffee 	bl	8020780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80207a4:	bd08      	pop	{r3, pc}

080207a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80207a6:	b510      	push	{r4, lr}
 80207a8:	4604      	mov	r4, r0
 80207aa:	f7ff ffe1 	bl	8020770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80207ae:	4620      	mov	r0, r4
 80207b0:	bd10      	pop	{r4, pc}

080207b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80207b2:	6800      	ldr	r0, [r0, #0]
 80207b4:	4770      	bx	lr
	...

080207b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80207b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80207ba:	4604      	mov	r4, r0
 80207bc:	4616      	mov	r6, r2
 80207be:	460d      	mov	r5, r1
 80207c0:	b919      	cbnz	r1, 80207ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80207c2:	b112      	cbz	r2, 80207ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80207c4:	480d      	ldr	r0, [pc, #52]	; (80207fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80207c6:	f000 f879 	bl	80208bc <_ZSt19__throw_logic_errorPKc>
 80207ca:	1b73      	subs	r3, r6, r5
 80207cc:	2b0f      	cmp	r3, #15
 80207ce:	9301      	str	r3, [sp, #4]
 80207d0:	d907      	bls.n	80207e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80207d2:	2200      	movs	r2, #0
 80207d4:	a901      	add	r1, sp, #4
 80207d6:	4620      	mov	r0, r4
 80207d8:	f7ff ffa8 	bl	802072c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80207dc:	9b01      	ldr	r3, [sp, #4]
 80207de:	6020      	str	r0, [r4, #0]
 80207e0:	60a3      	str	r3, [r4, #8]
 80207e2:	4632      	mov	r2, r6
 80207e4:	4629      	mov	r1, r5
 80207e6:	6820      	ldr	r0, [r4, #0]
 80207e8:	f7ff ffd3 	bl	8020792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80207ec:	9b01      	ldr	r3, [sp, #4]
 80207ee:	6822      	ldr	r2, [r4, #0]
 80207f0:	6063      	str	r3, [r4, #4]
 80207f2:	2100      	movs	r1, #0
 80207f4:	54d1      	strb	r1, [r2, r3]
 80207f6:	b002      	add	sp, #8
 80207f8:	bd70      	pop	{r4, r5, r6, pc}
 80207fa:	bf00      	nop
 80207fc:	08027b9b 	.word	0x08027b9b

08020800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8020800:	b538      	push	{r3, r4, r5, lr}
 8020802:	f100 0308 	add.w	r3, r0, #8
 8020806:	6003      	str	r3, [r0, #0]
 8020808:	e9d1 5200 	ldrd	r5, r2, [r1]
 802080c:	4604      	mov	r4, r0
 802080e:	f04f 0300 	mov.w	r3, #0
 8020812:	442a      	add	r2, r5
 8020814:	4629      	mov	r1, r5
 8020816:	f7ff ffcf 	bl	80207b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 802081a:	4620      	mov	r0, r4
 802081c:	bd38      	pop	{r3, r4, r5, pc}
	...

08020820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8020820:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020822:	4604      	mov	r4, r0
 8020824:	4616      	mov	r6, r2
 8020826:	460d      	mov	r5, r1
 8020828:	b919      	cbnz	r1, 8020832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 802082a:	b112      	cbz	r2, 8020832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 802082c:	480d      	ldr	r0, [pc, #52]	; (8020864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 802082e:	f000 f845 	bl	80208bc <_ZSt19__throw_logic_errorPKc>
 8020832:	1b73      	subs	r3, r6, r5
 8020834:	2b0f      	cmp	r3, #15
 8020836:	9301      	str	r3, [sp, #4]
 8020838:	d907      	bls.n	802084a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 802083a:	2200      	movs	r2, #0
 802083c:	a901      	add	r1, sp, #4
 802083e:	4620      	mov	r0, r4
 8020840:	f7ff ff74 	bl	802072c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8020844:	9b01      	ldr	r3, [sp, #4]
 8020846:	6020      	str	r0, [r4, #0]
 8020848:	60a3      	str	r3, [r4, #8]
 802084a:	4632      	mov	r2, r6
 802084c:	4629      	mov	r1, r5
 802084e:	6820      	ldr	r0, [r4, #0]
 8020850:	f7ff ffa4 	bl	802079c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8020854:	9b01      	ldr	r3, [sp, #4]
 8020856:	6822      	ldr	r2, [r4, #0]
 8020858:	6063      	str	r3, [r4, #4]
 802085a:	2100      	movs	r1, #0
 802085c:	54d1      	strb	r1, [r2, r3]
 802085e:	b002      	add	sp, #8
 8020860:	bd70      	pop	{r4, r5, r6, pc}
 8020862:	bf00      	nop
 8020864:	08027b9b 	.word	0x08027b9b

08020868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8020868:	b538      	push	{r3, r4, r5, lr}
 802086a:	f100 0308 	add.w	r3, r0, #8
 802086e:	4604      	mov	r4, r0
 8020870:	6003      	str	r3, [r0, #0]
 8020872:	460d      	mov	r5, r1
 8020874:	b159      	cbz	r1, 802088e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8020876:	4608      	mov	r0, r1
 8020878:	f7df fd8c 	bl	8000394 <strlen>
 802087c:	182a      	adds	r2, r5, r0
 802087e:	4620      	mov	r0, r4
 8020880:	f04f 0300 	mov.w	r3, #0
 8020884:	4629      	mov	r1, r5
 8020886:	f7ff ffcb 	bl	8020820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 802088a:	4620      	mov	r0, r4
 802088c:	bd38      	pop	{r3, r4, r5, pc}
 802088e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020892:	e7f4      	b.n	802087e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08020894 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020894:	b508      	push	{r3, lr}
 8020896:	4780      	blx	r0
 8020898:	f000 f816 	bl	80208c8 <abort>

0802089c <_ZSt13get_terminatev>:
 802089c:	4b02      	ldr	r3, [pc, #8]	; (80208a8 <_ZSt13get_terminatev+0xc>)
 802089e:	6818      	ldr	r0, [r3, #0]
 80208a0:	f3bf 8f5b 	dmb	ish
 80208a4:	4770      	bx	lr
 80208a6:	bf00      	nop
 80208a8:	2400003c 	.word	0x2400003c

080208ac <_ZSt9terminatev>:
 80208ac:	b508      	push	{r3, lr}
 80208ae:	f7ff fff5 	bl	802089c <_ZSt13get_terminatev>
 80208b2:	f7ff ffef 	bl	8020894 <_ZN10__cxxabiv111__terminateEPFvvE>

080208b6 <_ZSt17__throw_bad_allocv>:
 80208b6:	b508      	push	{r3, lr}
 80208b8:	f000 f806 	bl	80208c8 <abort>

080208bc <_ZSt19__throw_logic_errorPKc>:
 80208bc:	b508      	push	{r3, lr}
 80208be:	f000 f803 	bl	80208c8 <abort>

080208c2 <_ZSt20__throw_length_errorPKc>:
 80208c2:	b508      	push	{r3, lr}
 80208c4:	f000 f800 	bl	80208c8 <abort>

080208c8 <abort>:
 80208c8:	b508      	push	{r3, lr}
 80208ca:	2006      	movs	r0, #6
 80208cc:	f000 fd2e 	bl	802132c <raise>
 80208d0:	2001      	movs	r0, #1
 80208d2:	f7e0 fd43 	bl	800135c <_exit>

080208d6 <atexit>:
 80208d6:	2300      	movs	r3, #0
 80208d8:	4601      	mov	r1, r0
 80208da:	461a      	mov	r2, r3
 80208dc:	4618      	mov	r0, r3
 80208de:	f000 be41 	b.w	8021564 <__register_exitproc>
	...

080208e4 <__libc_init_array>:
 80208e4:	b570      	push	{r4, r5, r6, lr}
 80208e6:	4d0d      	ldr	r5, [pc, #52]	; (802091c <__libc_init_array+0x38>)
 80208e8:	4c0d      	ldr	r4, [pc, #52]	; (8020920 <__libc_init_array+0x3c>)
 80208ea:	1b64      	subs	r4, r4, r5
 80208ec:	10a4      	asrs	r4, r4, #2
 80208ee:	2600      	movs	r6, #0
 80208f0:	42a6      	cmp	r6, r4
 80208f2:	d109      	bne.n	8020908 <__libc_init_array+0x24>
 80208f4:	4d0b      	ldr	r5, [pc, #44]	; (8020924 <__libc_init_array+0x40>)
 80208f6:	4c0c      	ldr	r4, [pc, #48]	; (8020928 <__libc_init_array+0x44>)
 80208f8:	f002 ff06 	bl	8023708 <_init>
 80208fc:	1b64      	subs	r4, r4, r5
 80208fe:	10a4      	asrs	r4, r4, #2
 8020900:	2600      	movs	r6, #0
 8020902:	42a6      	cmp	r6, r4
 8020904:	d105      	bne.n	8020912 <__libc_init_array+0x2e>
 8020906:	bd70      	pop	{r4, r5, r6, pc}
 8020908:	f855 3b04 	ldr.w	r3, [r5], #4
 802090c:	4798      	blx	r3
 802090e:	3601      	adds	r6, #1
 8020910:	e7ee      	b.n	80208f0 <__libc_init_array+0xc>
 8020912:	f855 3b04 	ldr.w	r3, [r5], #4
 8020916:	4798      	blx	r3
 8020918:	3601      	adds	r6, #1
 802091a:	e7f2      	b.n	8020902 <__libc_init_array+0x1e>
 802091c:	08028010 	.word	0x08028010
 8020920:	08028010 	.word	0x08028010
 8020924:	08028010 	.word	0x08028010
 8020928:	0802801c 	.word	0x0802801c

0802092c <memcmp>:
 802092c:	b530      	push	{r4, r5, lr}
 802092e:	3901      	subs	r1, #1
 8020930:	2400      	movs	r4, #0
 8020932:	42a2      	cmp	r2, r4
 8020934:	d101      	bne.n	802093a <memcmp+0xe>
 8020936:	2000      	movs	r0, #0
 8020938:	e005      	b.n	8020946 <memcmp+0x1a>
 802093a:	5d03      	ldrb	r3, [r0, r4]
 802093c:	3401      	adds	r4, #1
 802093e:	5d0d      	ldrb	r5, [r1, r4]
 8020940:	42ab      	cmp	r3, r5
 8020942:	d0f6      	beq.n	8020932 <memcmp+0x6>
 8020944:	1b58      	subs	r0, r3, r5
 8020946:	bd30      	pop	{r4, r5, pc}

08020948 <memcpy>:
 8020948:	440a      	add	r2, r1
 802094a:	4291      	cmp	r1, r2
 802094c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020950:	d100      	bne.n	8020954 <memcpy+0xc>
 8020952:	4770      	bx	lr
 8020954:	b510      	push	{r4, lr}
 8020956:	f811 4b01 	ldrb.w	r4, [r1], #1
 802095a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802095e:	4291      	cmp	r1, r2
 8020960:	d1f9      	bne.n	8020956 <memcpy+0xe>
 8020962:	bd10      	pop	{r4, pc}

08020964 <memmove>:
 8020964:	4288      	cmp	r0, r1
 8020966:	b510      	push	{r4, lr}
 8020968:	eb01 0402 	add.w	r4, r1, r2
 802096c:	d902      	bls.n	8020974 <memmove+0x10>
 802096e:	4284      	cmp	r4, r0
 8020970:	4623      	mov	r3, r4
 8020972:	d807      	bhi.n	8020984 <memmove+0x20>
 8020974:	1e43      	subs	r3, r0, #1
 8020976:	42a1      	cmp	r1, r4
 8020978:	d008      	beq.n	802098c <memmove+0x28>
 802097a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802097e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020982:	e7f8      	b.n	8020976 <memmove+0x12>
 8020984:	4402      	add	r2, r0
 8020986:	4601      	mov	r1, r0
 8020988:	428a      	cmp	r2, r1
 802098a:	d100      	bne.n	802098e <memmove+0x2a>
 802098c:	bd10      	pop	{r4, pc}
 802098e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020996:	e7f7      	b.n	8020988 <memmove+0x24>

08020998 <memset>:
 8020998:	4402      	add	r2, r0
 802099a:	4603      	mov	r3, r0
 802099c:	4293      	cmp	r3, r2
 802099e:	d100      	bne.n	80209a2 <memset+0xa>
 80209a0:	4770      	bx	lr
 80209a2:	f803 1b01 	strb.w	r1, [r3], #1
 80209a6:	e7f9      	b.n	802099c <memset+0x4>

080209a8 <__cvt>:
 80209a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209aa:	ed2d 8b02 	vpush	{d8}
 80209ae:	eeb0 8b40 	vmov.f64	d8, d0
 80209b2:	b085      	sub	sp, #20
 80209b4:	4617      	mov	r7, r2
 80209b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80209b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80209ba:	ee18 2a90 	vmov	r2, s17
 80209be:	f025 0520 	bic.w	r5, r5, #32
 80209c2:	2a00      	cmp	r2, #0
 80209c4:	bfb6      	itet	lt
 80209c6:	222d      	movlt	r2, #45	; 0x2d
 80209c8:	2200      	movge	r2, #0
 80209ca:	eeb1 8b40 	vneglt.f64	d8, d0
 80209ce:	2d46      	cmp	r5, #70	; 0x46
 80209d0:	460c      	mov	r4, r1
 80209d2:	701a      	strb	r2, [r3, #0]
 80209d4:	d004      	beq.n	80209e0 <__cvt+0x38>
 80209d6:	2d45      	cmp	r5, #69	; 0x45
 80209d8:	d100      	bne.n	80209dc <__cvt+0x34>
 80209da:	3401      	adds	r4, #1
 80209dc:	2102      	movs	r1, #2
 80209de:	e000      	b.n	80209e2 <__cvt+0x3a>
 80209e0:	2103      	movs	r1, #3
 80209e2:	ab03      	add	r3, sp, #12
 80209e4:	9301      	str	r3, [sp, #4]
 80209e6:	ab02      	add	r3, sp, #8
 80209e8:	9300      	str	r3, [sp, #0]
 80209ea:	4622      	mov	r2, r4
 80209ec:	4633      	mov	r3, r6
 80209ee:	eeb0 0b48 	vmov.f64	d0, d8
 80209f2:	f000 fec5 	bl	8021780 <_dtoa_r>
 80209f6:	2d47      	cmp	r5, #71	; 0x47
 80209f8:	d109      	bne.n	8020a0e <__cvt+0x66>
 80209fa:	07fb      	lsls	r3, r7, #31
 80209fc:	d407      	bmi.n	8020a0e <__cvt+0x66>
 80209fe:	9b03      	ldr	r3, [sp, #12]
 8020a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a02:	1a1b      	subs	r3, r3, r0
 8020a04:	6013      	str	r3, [r2, #0]
 8020a06:	b005      	add	sp, #20
 8020a08:	ecbd 8b02 	vpop	{d8}
 8020a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a0e:	2d46      	cmp	r5, #70	; 0x46
 8020a10:	eb00 0204 	add.w	r2, r0, r4
 8020a14:	d10c      	bne.n	8020a30 <__cvt+0x88>
 8020a16:	7803      	ldrb	r3, [r0, #0]
 8020a18:	2b30      	cmp	r3, #48	; 0x30
 8020a1a:	d107      	bne.n	8020a2c <__cvt+0x84>
 8020a1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a24:	bf1c      	itt	ne
 8020a26:	f1c4 0401 	rsbne	r4, r4, #1
 8020a2a:	6034      	strne	r4, [r6, #0]
 8020a2c:	6833      	ldr	r3, [r6, #0]
 8020a2e:	441a      	add	r2, r3
 8020a30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a38:	bf08      	it	eq
 8020a3a:	9203      	streq	r2, [sp, #12]
 8020a3c:	2130      	movs	r1, #48	; 0x30
 8020a3e:	9b03      	ldr	r3, [sp, #12]
 8020a40:	4293      	cmp	r3, r2
 8020a42:	d2dc      	bcs.n	80209fe <__cvt+0x56>
 8020a44:	1c5c      	adds	r4, r3, #1
 8020a46:	9403      	str	r4, [sp, #12]
 8020a48:	7019      	strb	r1, [r3, #0]
 8020a4a:	e7f8      	b.n	8020a3e <__cvt+0x96>

08020a4c <__exponent>:
 8020a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020a4e:	4603      	mov	r3, r0
 8020a50:	2900      	cmp	r1, #0
 8020a52:	bfb8      	it	lt
 8020a54:	4249      	neglt	r1, r1
 8020a56:	f803 2b02 	strb.w	r2, [r3], #2
 8020a5a:	bfb4      	ite	lt
 8020a5c:	222d      	movlt	r2, #45	; 0x2d
 8020a5e:	222b      	movge	r2, #43	; 0x2b
 8020a60:	2909      	cmp	r1, #9
 8020a62:	7042      	strb	r2, [r0, #1]
 8020a64:	dd2a      	ble.n	8020abc <__exponent+0x70>
 8020a66:	f10d 0407 	add.w	r4, sp, #7
 8020a6a:	46a4      	mov	ip, r4
 8020a6c:	270a      	movs	r7, #10
 8020a6e:	46a6      	mov	lr, r4
 8020a70:	460a      	mov	r2, r1
 8020a72:	fb91 f6f7 	sdiv	r6, r1, r7
 8020a76:	fb07 1516 	mls	r5, r7, r6, r1
 8020a7a:	3530      	adds	r5, #48	; 0x30
 8020a7c:	2a63      	cmp	r2, #99	; 0x63
 8020a7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8020a82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020a86:	4631      	mov	r1, r6
 8020a88:	dcf1      	bgt.n	8020a6e <__exponent+0x22>
 8020a8a:	3130      	adds	r1, #48	; 0x30
 8020a8c:	f1ae 0502 	sub.w	r5, lr, #2
 8020a90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020a94:	1c44      	adds	r4, r0, #1
 8020a96:	4629      	mov	r1, r5
 8020a98:	4561      	cmp	r1, ip
 8020a9a:	d30a      	bcc.n	8020ab2 <__exponent+0x66>
 8020a9c:	f10d 0209 	add.w	r2, sp, #9
 8020aa0:	eba2 020e 	sub.w	r2, r2, lr
 8020aa4:	4565      	cmp	r5, ip
 8020aa6:	bf88      	it	hi
 8020aa8:	2200      	movhi	r2, #0
 8020aaa:	4413      	add	r3, r2
 8020aac:	1a18      	subs	r0, r3, r0
 8020aae:	b003      	add	sp, #12
 8020ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020ab6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8020aba:	e7ed      	b.n	8020a98 <__exponent+0x4c>
 8020abc:	2330      	movs	r3, #48	; 0x30
 8020abe:	3130      	adds	r1, #48	; 0x30
 8020ac0:	7083      	strb	r3, [r0, #2]
 8020ac2:	70c1      	strb	r1, [r0, #3]
 8020ac4:	1d03      	adds	r3, r0, #4
 8020ac6:	e7f1      	b.n	8020aac <__exponent+0x60>

08020ac8 <_printf_float>:
 8020ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020acc:	b08b      	sub	sp, #44	; 0x2c
 8020ace:	460c      	mov	r4, r1
 8020ad0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8020ad4:	4616      	mov	r6, r2
 8020ad6:	461f      	mov	r7, r3
 8020ad8:	4605      	mov	r5, r0
 8020ada:	f001 fd9d 	bl	8022618 <_localeconv_r>
 8020ade:	f8d0 b000 	ldr.w	fp, [r0]
 8020ae2:	4658      	mov	r0, fp
 8020ae4:	f7df fc56 	bl	8000394 <strlen>
 8020ae8:	2300      	movs	r3, #0
 8020aea:	9308      	str	r3, [sp, #32]
 8020aec:	f8d8 3000 	ldr.w	r3, [r8]
 8020af0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020af4:	6822      	ldr	r2, [r4, #0]
 8020af6:	3307      	adds	r3, #7
 8020af8:	f023 0307 	bic.w	r3, r3, #7
 8020afc:	f103 0108 	add.w	r1, r3, #8
 8020b00:	f8c8 1000 	str.w	r1, [r8]
 8020b04:	4682      	mov	sl, r0
 8020b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020b0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8020b0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8020d70 <_printf_float+0x2a8>
 8020b12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8020b16:	eeb0 6bc0 	vabs.f64	d6, d0
 8020b1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8020b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b22:	dd24      	ble.n	8020b6e <_printf_float+0xa6>
 8020b24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b2c:	d502      	bpl.n	8020b34 <_printf_float+0x6c>
 8020b2e:	232d      	movs	r3, #45	; 0x2d
 8020b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b34:	4b90      	ldr	r3, [pc, #576]	; (8020d78 <_printf_float+0x2b0>)
 8020b36:	4891      	ldr	r0, [pc, #580]	; (8020d7c <_printf_float+0x2b4>)
 8020b38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020b3c:	bf94      	ite	ls
 8020b3e:	4698      	movls	r8, r3
 8020b40:	4680      	movhi	r8, r0
 8020b42:	2303      	movs	r3, #3
 8020b44:	6123      	str	r3, [r4, #16]
 8020b46:	f022 0204 	bic.w	r2, r2, #4
 8020b4a:	2300      	movs	r3, #0
 8020b4c:	6022      	str	r2, [r4, #0]
 8020b4e:	9304      	str	r3, [sp, #16]
 8020b50:	9700      	str	r7, [sp, #0]
 8020b52:	4633      	mov	r3, r6
 8020b54:	aa09      	add	r2, sp, #36	; 0x24
 8020b56:	4621      	mov	r1, r4
 8020b58:	4628      	mov	r0, r5
 8020b5a:	f000 f9d3 	bl	8020f04 <_printf_common>
 8020b5e:	3001      	adds	r0, #1
 8020b60:	f040 808a 	bne.w	8020c78 <_printf_float+0x1b0>
 8020b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b68:	b00b      	add	sp, #44	; 0x2c
 8020b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8020b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b76:	d709      	bvc.n	8020b8c <_printf_float+0xc4>
 8020b78:	ee10 3a90 	vmov	r3, s1
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	bfbc      	itt	lt
 8020b80:	232d      	movlt	r3, #45	; 0x2d
 8020b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020b86:	487e      	ldr	r0, [pc, #504]	; (8020d80 <_printf_float+0x2b8>)
 8020b88:	4b7e      	ldr	r3, [pc, #504]	; (8020d84 <_printf_float+0x2bc>)
 8020b8a:	e7d5      	b.n	8020b38 <_printf_float+0x70>
 8020b8c:	6863      	ldr	r3, [r4, #4]
 8020b8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8020b92:	9104      	str	r1, [sp, #16]
 8020b94:	1c59      	adds	r1, r3, #1
 8020b96:	d13c      	bne.n	8020c12 <_printf_float+0x14a>
 8020b98:	2306      	movs	r3, #6
 8020b9a:	6063      	str	r3, [r4, #4]
 8020b9c:	2300      	movs	r3, #0
 8020b9e:	9303      	str	r3, [sp, #12]
 8020ba0:	ab08      	add	r3, sp, #32
 8020ba2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8020ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020baa:	ab07      	add	r3, sp, #28
 8020bac:	6861      	ldr	r1, [r4, #4]
 8020bae:	9300      	str	r3, [sp, #0]
 8020bb0:	6022      	str	r2, [r4, #0]
 8020bb2:	f10d 031b 	add.w	r3, sp, #27
 8020bb6:	4628      	mov	r0, r5
 8020bb8:	f7ff fef6 	bl	80209a8 <__cvt>
 8020bbc:	9b04      	ldr	r3, [sp, #16]
 8020bbe:	9907      	ldr	r1, [sp, #28]
 8020bc0:	2b47      	cmp	r3, #71	; 0x47
 8020bc2:	4680      	mov	r8, r0
 8020bc4:	d108      	bne.n	8020bd8 <_printf_float+0x110>
 8020bc6:	1cc8      	adds	r0, r1, #3
 8020bc8:	db02      	blt.n	8020bd0 <_printf_float+0x108>
 8020bca:	6863      	ldr	r3, [r4, #4]
 8020bcc:	4299      	cmp	r1, r3
 8020bce:	dd41      	ble.n	8020c54 <_printf_float+0x18c>
 8020bd0:	f1a9 0902 	sub.w	r9, r9, #2
 8020bd4:	fa5f f989 	uxtb.w	r9, r9
 8020bd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020bdc:	d820      	bhi.n	8020c20 <_printf_float+0x158>
 8020bde:	3901      	subs	r1, #1
 8020be0:	464a      	mov	r2, r9
 8020be2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020be6:	9107      	str	r1, [sp, #28]
 8020be8:	f7ff ff30 	bl	8020a4c <__exponent>
 8020bec:	9a08      	ldr	r2, [sp, #32]
 8020bee:	9004      	str	r0, [sp, #16]
 8020bf0:	1813      	adds	r3, r2, r0
 8020bf2:	2a01      	cmp	r2, #1
 8020bf4:	6123      	str	r3, [r4, #16]
 8020bf6:	dc02      	bgt.n	8020bfe <_printf_float+0x136>
 8020bf8:	6822      	ldr	r2, [r4, #0]
 8020bfa:	07d2      	lsls	r2, r2, #31
 8020bfc:	d501      	bpl.n	8020c02 <_printf_float+0x13a>
 8020bfe:	3301      	adds	r3, #1
 8020c00:	6123      	str	r3, [r4, #16]
 8020c02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	d0a2      	beq.n	8020b50 <_printf_float+0x88>
 8020c0a:	232d      	movs	r3, #45	; 0x2d
 8020c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020c10:	e79e      	b.n	8020b50 <_printf_float+0x88>
 8020c12:	9904      	ldr	r1, [sp, #16]
 8020c14:	2947      	cmp	r1, #71	; 0x47
 8020c16:	d1c1      	bne.n	8020b9c <_printf_float+0xd4>
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d1bf      	bne.n	8020b9c <_printf_float+0xd4>
 8020c1c:	2301      	movs	r3, #1
 8020c1e:	e7bc      	b.n	8020b9a <_printf_float+0xd2>
 8020c20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8020c24:	d118      	bne.n	8020c58 <_printf_float+0x190>
 8020c26:	2900      	cmp	r1, #0
 8020c28:	6863      	ldr	r3, [r4, #4]
 8020c2a:	dd0b      	ble.n	8020c44 <_printf_float+0x17c>
 8020c2c:	6121      	str	r1, [r4, #16]
 8020c2e:	b913      	cbnz	r3, 8020c36 <_printf_float+0x16e>
 8020c30:	6822      	ldr	r2, [r4, #0]
 8020c32:	07d0      	lsls	r0, r2, #31
 8020c34:	d502      	bpl.n	8020c3c <_printf_float+0x174>
 8020c36:	3301      	adds	r3, #1
 8020c38:	440b      	add	r3, r1
 8020c3a:	6123      	str	r3, [r4, #16]
 8020c3c:	2300      	movs	r3, #0
 8020c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8020c40:	9304      	str	r3, [sp, #16]
 8020c42:	e7de      	b.n	8020c02 <_printf_float+0x13a>
 8020c44:	b913      	cbnz	r3, 8020c4c <_printf_float+0x184>
 8020c46:	6822      	ldr	r2, [r4, #0]
 8020c48:	07d2      	lsls	r2, r2, #31
 8020c4a:	d501      	bpl.n	8020c50 <_printf_float+0x188>
 8020c4c:	3302      	adds	r3, #2
 8020c4e:	e7f4      	b.n	8020c3a <_printf_float+0x172>
 8020c50:	2301      	movs	r3, #1
 8020c52:	e7f2      	b.n	8020c3a <_printf_float+0x172>
 8020c54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8020c58:	9b08      	ldr	r3, [sp, #32]
 8020c5a:	4299      	cmp	r1, r3
 8020c5c:	db05      	blt.n	8020c6a <_printf_float+0x1a2>
 8020c5e:	6823      	ldr	r3, [r4, #0]
 8020c60:	6121      	str	r1, [r4, #16]
 8020c62:	07d8      	lsls	r0, r3, #31
 8020c64:	d5ea      	bpl.n	8020c3c <_printf_float+0x174>
 8020c66:	1c4b      	adds	r3, r1, #1
 8020c68:	e7e7      	b.n	8020c3a <_printf_float+0x172>
 8020c6a:	2900      	cmp	r1, #0
 8020c6c:	bfd4      	ite	le
 8020c6e:	f1c1 0202 	rsble	r2, r1, #2
 8020c72:	2201      	movgt	r2, #1
 8020c74:	4413      	add	r3, r2
 8020c76:	e7e0      	b.n	8020c3a <_printf_float+0x172>
 8020c78:	6823      	ldr	r3, [r4, #0]
 8020c7a:	055a      	lsls	r2, r3, #21
 8020c7c:	d407      	bmi.n	8020c8e <_printf_float+0x1c6>
 8020c7e:	6923      	ldr	r3, [r4, #16]
 8020c80:	4642      	mov	r2, r8
 8020c82:	4631      	mov	r1, r6
 8020c84:	4628      	mov	r0, r5
 8020c86:	47b8      	blx	r7
 8020c88:	3001      	adds	r0, #1
 8020c8a:	d12a      	bne.n	8020ce2 <_printf_float+0x21a>
 8020c8c:	e76a      	b.n	8020b64 <_printf_float+0x9c>
 8020c8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020c92:	f240 80e2 	bls.w	8020e5a <_printf_float+0x392>
 8020c96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020c9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ca2:	d133      	bne.n	8020d0c <_printf_float+0x244>
 8020ca4:	4a38      	ldr	r2, [pc, #224]	; (8020d88 <_printf_float+0x2c0>)
 8020ca6:	2301      	movs	r3, #1
 8020ca8:	4631      	mov	r1, r6
 8020caa:	4628      	mov	r0, r5
 8020cac:	47b8      	blx	r7
 8020cae:	3001      	adds	r0, #1
 8020cb0:	f43f af58 	beq.w	8020b64 <_printf_float+0x9c>
 8020cb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020cb8:	429a      	cmp	r2, r3
 8020cba:	db02      	blt.n	8020cc2 <_printf_float+0x1fa>
 8020cbc:	6823      	ldr	r3, [r4, #0]
 8020cbe:	07d8      	lsls	r0, r3, #31
 8020cc0:	d50f      	bpl.n	8020ce2 <_printf_float+0x21a>
 8020cc2:	4653      	mov	r3, sl
 8020cc4:	465a      	mov	r2, fp
 8020cc6:	4631      	mov	r1, r6
 8020cc8:	4628      	mov	r0, r5
 8020cca:	47b8      	blx	r7
 8020ccc:	3001      	adds	r0, #1
 8020cce:	f43f af49 	beq.w	8020b64 <_printf_float+0x9c>
 8020cd2:	f04f 0800 	mov.w	r8, #0
 8020cd6:	f104 091a 	add.w	r9, r4, #26
 8020cda:	9b08      	ldr	r3, [sp, #32]
 8020cdc:	3b01      	subs	r3, #1
 8020cde:	4543      	cmp	r3, r8
 8020ce0:	dc09      	bgt.n	8020cf6 <_printf_float+0x22e>
 8020ce2:	6823      	ldr	r3, [r4, #0]
 8020ce4:	079b      	lsls	r3, r3, #30
 8020ce6:	f100 8108 	bmi.w	8020efa <_printf_float+0x432>
 8020cea:	68e0      	ldr	r0, [r4, #12]
 8020cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cee:	4298      	cmp	r0, r3
 8020cf0:	bfb8      	it	lt
 8020cf2:	4618      	movlt	r0, r3
 8020cf4:	e738      	b.n	8020b68 <_printf_float+0xa0>
 8020cf6:	2301      	movs	r3, #1
 8020cf8:	464a      	mov	r2, r9
 8020cfa:	4631      	mov	r1, r6
 8020cfc:	4628      	mov	r0, r5
 8020cfe:	47b8      	blx	r7
 8020d00:	3001      	adds	r0, #1
 8020d02:	f43f af2f 	beq.w	8020b64 <_printf_float+0x9c>
 8020d06:	f108 0801 	add.w	r8, r8, #1
 8020d0a:	e7e6      	b.n	8020cda <_printf_float+0x212>
 8020d0c:	9b07      	ldr	r3, [sp, #28]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	dc3c      	bgt.n	8020d8c <_printf_float+0x2c4>
 8020d12:	4a1d      	ldr	r2, [pc, #116]	; (8020d88 <_printf_float+0x2c0>)
 8020d14:	2301      	movs	r3, #1
 8020d16:	4631      	mov	r1, r6
 8020d18:	4628      	mov	r0, r5
 8020d1a:	47b8      	blx	r7
 8020d1c:	3001      	adds	r0, #1
 8020d1e:	f43f af21 	beq.w	8020b64 <_printf_float+0x9c>
 8020d22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020d26:	4313      	orrs	r3, r2
 8020d28:	d102      	bne.n	8020d30 <_printf_float+0x268>
 8020d2a:	6823      	ldr	r3, [r4, #0]
 8020d2c:	07d9      	lsls	r1, r3, #31
 8020d2e:	d5d8      	bpl.n	8020ce2 <_printf_float+0x21a>
 8020d30:	4653      	mov	r3, sl
 8020d32:	465a      	mov	r2, fp
 8020d34:	4631      	mov	r1, r6
 8020d36:	4628      	mov	r0, r5
 8020d38:	47b8      	blx	r7
 8020d3a:	3001      	adds	r0, #1
 8020d3c:	f43f af12 	beq.w	8020b64 <_printf_float+0x9c>
 8020d40:	f04f 0900 	mov.w	r9, #0
 8020d44:	f104 0a1a 	add.w	sl, r4, #26
 8020d48:	9b07      	ldr	r3, [sp, #28]
 8020d4a:	425b      	negs	r3, r3
 8020d4c:	454b      	cmp	r3, r9
 8020d4e:	dc01      	bgt.n	8020d54 <_printf_float+0x28c>
 8020d50:	9b08      	ldr	r3, [sp, #32]
 8020d52:	e795      	b.n	8020c80 <_printf_float+0x1b8>
 8020d54:	2301      	movs	r3, #1
 8020d56:	4652      	mov	r2, sl
 8020d58:	4631      	mov	r1, r6
 8020d5a:	4628      	mov	r0, r5
 8020d5c:	47b8      	blx	r7
 8020d5e:	3001      	adds	r0, #1
 8020d60:	f43f af00 	beq.w	8020b64 <_printf_float+0x9c>
 8020d64:	f109 0901 	add.w	r9, r9, #1
 8020d68:	e7ee      	b.n	8020d48 <_printf_float+0x280>
 8020d6a:	bf00      	nop
 8020d6c:	f3af 8000 	nop.w
 8020d70:	ffffffff 	.word	0xffffffff
 8020d74:	7fefffff 	.word	0x7fefffff
 8020d78:	08027ccc 	.word	0x08027ccc
 8020d7c:	08027cd0 	.word	0x08027cd0
 8020d80:	08027cd8 	.word	0x08027cd8
 8020d84:	08027cd4 	.word	0x08027cd4
 8020d88:	08027cdc 	.word	0x08027cdc
 8020d8c:	9a08      	ldr	r2, [sp, #32]
 8020d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020d90:	429a      	cmp	r2, r3
 8020d92:	bfa8      	it	ge
 8020d94:	461a      	movge	r2, r3
 8020d96:	2a00      	cmp	r2, #0
 8020d98:	4691      	mov	r9, r2
 8020d9a:	dc38      	bgt.n	8020e0e <_printf_float+0x346>
 8020d9c:	2300      	movs	r3, #0
 8020d9e:	9305      	str	r3, [sp, #20]
 8020da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020da4:	f104 021a 	add.w	r2, r4, #26
 8020da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020daa:	9905      	ldr	r1, [sp, #20]
 8020dac:	9304      	str	r3, [sp, #16]
 8020dae:	eba3 0309 	sub.w	r3, r3, r9
 8020db2:	428b      	cmp	r3, r1
 8020db4:	dc33      	bgt.n	8020e1e <_printf_float+0x356>
 8020db6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020dba:	429a      	cmp	r2, r3
 8020dbc:	db3c      	blt.n	8020e38 <_printf_float+0x370>
 8020dbe:	6823      	ldr	r3, [r4, #0]
 8020dc0:	07da      	lsls	r2, r3, #31
 8020dc2:	d439      	bmi.n	8020e38 <_printf_float+0x370>
 8020dc4:	9a08      	ldr	r2, [sp, #32]
 8020dc6:	9b04      	ldr	r3, [sp, #16]
 8020dc8:	9907      	ldr	r1, [sp, #28]
 8020dca:	1ad3      	subs	r3, r2, r3
 8020dcc:	eba2 0901 	sub.w	r9, r2, r1
 8020dd0:	4599      	cmp	r9, r3
 8020dd2:	bfa8      	it	ge
 8020dd4:	4699      	movge	r9, r3
 8020dd6:	f1b9 0f00 	cmp.w	r9, #0
 8020dda:	dc35      	bgt.n	8020e48 <_printf_float+0x380>
 8020ddc:	f04f 0800 	mov.w	r8, #0
 8020de0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020de4:	f104 0a1a 	add.w	sl, r4, #26
 8020de8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020dec:	1a9b      	subs	r3, r3, r2
 8020dee:	eba3 0309 	sub.w	r3, r3, r9
 8020df2:	4543      	cmp	r3, r8
 8020df4:	f77f af75 	ble.w	8020ce2 <_printf_float+0x21a>
 8020df8:	2301      	movs	r3, #1
 8020dfa:	4652      	mov	r2, sl
 8020dfc:	4631      	mov	r1, r6
 8020dfe:	4628      	mov	r0, r5
 8020e00:	47b8      	blx	r7
 8020e02:	3001      	adds	r0, #1
 8020e04:	f43f aeae 	beq.w	8020b64 <_printf_float+0x9c>
 8020e08:	f108 0801 	add.w	r8, r8, #1
 8020e0c:	e7ec      	b.n	8020de8 <_printf_float+0x320>
 8020e0e:	4613      	mov	r3, r2
 8020e10:	4631      	mov	r1, r6
 8020e12:	4642      	mov	r2, r8
 8020e14:	4628      	mov	r0, r5
 8020e16:	47b8      	blx	r7
 8020e18:	3001      	adds	r0, #1
 8020e1a:	d1bf      	bne.n	8020d9c <_printf_float+0x2d4>
 8020e1c:	e6a2      	b.n	8020b64 <_printf_float+0x9c>
 8020e1e:	2301      	movs	r3, #1
 8020e20:	4631      	mov	r1, r6
 8020e22:	4628      	mov	r0, r5
 8020e24:	9204      	str	r2, [sp, #16]
 8020e26:	47b8      	blx	r7
 8020e28:	3001      	adds	r0, #1
 8020e2a:	f43f ae9b 	beq.w	8020b64 <_printf_float+0x9c>
 8020e2e:	9b05      	ldr	r3, [sp, #20]
 8020e30:	9a04      	ldr	r2, [sp, #16]
 8020e32:	3301      	adds	r3, #1
 8020e34:	9305      	str	r3, [sp, #20]
 8020e36:	e7b7      	b.n	8020da8 <_printf_float+0x2e0>
 8020e38:	4653      	mov	r3, sl
 8020e3a:	465a      	mov	r2, fp
 8020e3c:	4631      	mov	r1, r6
 8020e3e:	4628      	mov	r0, r5
 8020e40:	47b8      	blx	r7
 8020e42:	3001      	adds	r0, #1
 8020e44:	d1be      	bne.n	8020dc4 <_printf_float+0x2fc>
 8020e46:	e68d      	b.n	8020b64 <_printf_float+0x9c>
 8020e48:	9a04      	ldr	r2, [sp, #16]
 8020e4a:	464b      	mov	r3, r9
 8020e4c:	4442      	add	r2, r8
 8020e4e:	4631      	mov	r1, r6
 8020e50:	4628      	mov	r0, r5
 8020e52:	47b8      	blx	r7
 8020e54:	3001      	adds	r0, #1
 8020e56:	d1c1      	bne.n	8020ddc <_printf_float+0x314>
 8020e58:	e684      	b.n	8020b64 <_printf_float+0x9c>
 8020e5a:	9a08      	ldr	r2, [sp, #32]
 8020e5c:	2a01      	cmp	r2, #1
 8020e5e:	dc01      	bgt.n	8020e64 <_printf_float+0x39c>
 8020e60:	07db      	lsls	r3, r3, #31
 8020e62:	d537      	bpl.n	8020ed4 <_printf_float+0x40c>
 8020e64:	2301      	movs	r3, #1
 8020e66:	4642      	mov	r2, r8
 8020e68:	4631      	mov	r1, r6
 8020e6a:	4628      	mov	r0, r5
 8020e6c:	47b8      	blx	r7
 8020e6e:	3001      	adds	r0, #1
 8020e70:	f43f ae78 	beq.w	8020b64 <_printf_float+0x9c>
 8020e74:	4653      	mov	r3, sl
 8020e76:	465a      	mov	r2, fp
 8020e78:	4631      	mov	r1, r6
 8020e7a:	4628      	mov	r0, r5
 8020e7c:	47b8      	blx	r7
 8020e7e:	3001      	adds	r0, #1
 8020e80:	f43f ae70 	beq.w	8020b64 <_printf_float+0x9c>
 8020e84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020e88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e90:	d01b      	beq.n	8020eca <_printf_float+0x402>
 8020e92:	9b08      	ldr	r3, [sp, #32]
 8020e94:	f108 0201 	add.w	r2, r8, #1
 8020e98:	3b01      	subs	r3, #1
 8020e9a:	4631      	mov	r1, r6
 8020e9c:	4628      	mov	r0, r5
 8020e9e:	47b8      	blx	r7
 8020ea0:	3001      	adds	r0, #1
 8020ea2:	d10e      	bne.n	8020ec2 <_printf_float+0x3fa>
 8020ea4:	e65e      	b.n	8020b64 <_printf_float+0x9c>
 8020ea6:	2301      	movs	r3, #1
 8020ea8:	464a      	mov	r2, r9
 8020eaa:	4631      	mov	r1, r6
 8020eac:	4628      	mov	r0, r5
 8020eae:	47b8      	blx	r7
 8020eb0:	3001      	adds	r0, #1
 8020eb2:	f43f ae57 	beq.w	8020b64 <_printf_float+0x9c>
 8020eb6:	f108 0801 	add.w	r8, r8, #1
 8020eba:	9b08      	ldr	r3, [sp, #32]
 8020ebc:	3b01      	subs	r3, #1
 8020ebe:	4543      	cmp	r3, r8
 8020ec0:	dcf1      	bgt.n	8020ea6 <_printf_float+0x3de>
 8020ec2:	9b04      	ldr	r3, [sp, #16]
 8020ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020ec8:	e6db      	b.n	8020c82 <_printf_float+0x1ba>
 8020eca:	f04f 0800 	mov.w	r8, #0
 8020ece:	f104 091a 	add.w	r9, r4, #26
 8020ed2:	e7f2      	b.n	8020eba <_printf_float+0x3f2>
 8020ed4:	2301      	movs	r3, #1
 8020ed6:	4642      	mov	r2, r8
 8020ed8:	e7df      	b.n	8020e9a <_printf_float+0x3d2>
 8020eda:	2301      	movs	r3, #1
 8020edc:	464a      	mov	r2, r9
 8020ede:	4631      	mov	r1, r6
 8020ee0:	4628      	mov	r0, r5
 8020ee2:	47b8      	blx	r7
 8020ee4:	3001      	adds	r0, #1
 8020ee6:	f43f ae3d 	beq.w	8020b64 <_printf_float+0x9c>
 8020eea:	f108 0801 	add.w	r8, r8, #1
 8020eee:	68e3      	ldr	r3, [r4, #12]
 8020ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ef2:	1a5b      	subs	r3, r3, r1
 8020ef4:	4543      	cmp	r3, r8
 8020ef6:	dcf0      	bgt.n	8020eda <_printf_float+0x412>
 8020ef8:	e6f7      	b.n	8020cea <_printf_float+0x222>
 8020efa:	f04f 0800 	mov.w	r8, #0
 8020efe:	f104 0919 	add.w	r9, r4, #25
 8020f02:	e7f4      	b.n	8020eee <_printf_float+0x426>

08020f04 <_printf_common>:
 8020f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f08:	4616      	mov	r6, r2
 8020f0a:	4699      	mov	r9, r3
 8020f0c:	688a      	ldr	r2, [r1, #8]
 8020f0e:	690b      	ldr	r3, [r1, #16]
 8020f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020f14:	4293      	cmp	r3, r2
 8020f16:	bfb8      	it	lt
 8020f18:	4613      	movlt	r3, r2
 8020f1a:	6033      	str	r3, [r6, #0]
 8020f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020f20:	4607      	mov	r7, r0
 8020f22:	460c      	mov	r4, r1
 8020f24:	b10a      	cbz	r2, 8020f2a <_printf_common+0x26>
 8020f26:	3301      	adds	r3, #1
 8020f28:	6033      	str	r3, [r6, #0]
 8020f2a:	6823      	ldr	r3, [r4, #0]
 8020f2c:	0699      	lsls	r1, r3, #26
 8020f2e:	bf42      	ittt	mi
 8020f30:	6833      	ldrmi	r3, [r6, #0]
 8020f32:	3302      	addmi	r3, #2
 8020f34:	6033      	strmi	r3, [r6, #0]
 8020f36:	6825      	ldr	r5, [r4, #0]
 8020f38:	f015 0506 	ands.w	r5, r5, #6
 8020f3c:	d106      	bne.n	8020f4c <_printf_common+0x48>
 8020f3e:	f104 0a19 	add.w	sl, r4, #25
 8020f42:	68e3      	ldr	r3, [r4, #12]
 8020f44:	6832      	ldr	r2, [r6, #0]
 8020f46:	1a9b      	subs	r3, r3, r2
 8020f48:	42ab      	cmp	r3, r5
 8020f4a:	dc26      	bgt.n	8020f9a <_printf_common+0x96>
 8020f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020f50:	1e13      	subs	r3, r2, #0
 8020f52:	6822      	ldr	r2, [r4, #0]
 8020f54:	bf18      	it	ne
 8020f56:	2301      	movne	r3, #1
 8020f58:	0692      	lsls	r2, r2, #26
 8020f5a:	d42b      	bmi.n	8020fb4 <_printf_common+0xb0>
 8020f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020f60:	4649      	mov	r1, r9
 8020f62:	4638      	mov	r0, r7
 8020f64:	47c0      	blx	r8
 8020f66:	3001      	adds	r0, #1
 8020f68:	d01e      	beq.n	8020fa8 <_printf_common+0xa4>
 8020f6a:	6823      	ldr	r3, [r4, #0]
 8020f6c:	68e5      	ldr	r5, [r4, #12]
 8020f6e:	6832      	ldr	r2, [r6, #0]
 8020f70:	f003 0306 	and.w	r3, r3, #6
 8020f74:	2b04      	cmp	r3, #4
 8020f76:	bf08      	it	eq
 8020f78:	1aad      	subeq	r5, r5, r2
 8020f7a:	68a3      	ldr	r3, [r4, #8]
 8020f7c:	6922      	ldr	r2, [r4, #16]
 8020f7e:	bf0c      	ite	eq
 8020f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020f84:	2500      	movne	r5, #0
 8020f86:	4293      	cmp	r3, r2
 8020f88:	bfc4      	itt	gt
 8020f8a:	1a9b      	subgt	r3, r3, r2
 8020f8c:	18ed      	addgt	r5, r5, r3
 8020f8e:	2600      	movs	r6, #0
 8020f90:	341a      	adds	r4, #26
 8020f92:	42b5      	cmp	r5, r6
 8020f94:	d11a      	bne.n	8020fcc <_printf_common+0xc8>
 8020f96:	2000      	movs	r0, #0
 8020f98:	e008      	b.n	8020fac <_printf_common+0xa8>
 8020f9a:	2301      	movs	r3, #1
 8020f9c:	4652      	mov	r2, sl
 8020f9e:	4649      	mov	r1, r9
 8020fa0:	4638      	mov	r0, r7
 8020fa2:	47c0      	blx	r8
 8020fa4:	3001      	adds	r0, #1
 8020fa6:	d103      	bne.n	8020fb0 <_printf_common+0xac>
 8020fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fb0:	3501      	adds	r5, #1
 8020fb2:	e7c6      	b.n	8020f42 <_printf_common+0x3e>
 8020fb4:	18e1      	adds	r1, r4, r3
 8020fb6:	1c5a      	adds	r2, r3, #1
 8020fb8:	2030      	movs	r0, #48	; 0x30
 8020fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020fbe:	4422      	add	r2, r4
 8020fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020fc8:	3302      	adds	r3, #2
 8020fca:	e7c7      	b.n	8020f5c <_printf_common+0x58>
 8020fcc:	2301      	movs	r3, #1
 8020fce:	4622      	mov	r2, r4
 8020fd0:	4649      	mov	r1, r9
 8020fd2:	4638      	mov	r0, r7
 8020fd4:	47c0      	blx	r8
 8020fd6:	3001      	adds	r0, #1
 8020fd8:	d0e6      	beq.n	8020fa8 <_printf_common+0xa4>
 8020fda:	3601      	adds	r6, #1
 8020fdc:	e7d9      	b.n	8020f92 <_printf_common+0x8e>
	...

08020fe0 <_printf_i>:
 8020fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020fe4:	460c      	mov	r4, r1
 8020fe6:	4691      	mov	r9, r2
 8020fe8:	7e27      	ldrb	r7, [r4, #24]
 8020fea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020fec:	2f78      	cmp	r7, #120	; 0x78
 8020fee:	4680      	mov	r8, r0
 8020ff0:	469a      	mov	sl, r3
 8020ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020ff6:	d807      	bhi.n	8021008 <_printf_i+0x28>
 8020ff8:	2f62      	cmp	r7, #98	; 0x62
 8020ffa:	d80a      	bhi.n	8021012 <_printf_i+0x32>
 8020ffc:	2f00      	cmp	r7, #0
 8020ffe:	f000 80d8 	beq.w	80211b2 <_printf_i+0x1d2>
 8021002:	2f58      	cmp	r7, #88	; 0x58
 8021004:	f000 80a3 	beq.w	802114e <_printf_i+0x16e>
 8021008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802100c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021010:	e03a      	b.n	8021088 <_printf_i+0xa8>
 8021012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021016:	2b15      	cmp	r3, #21
 8021018:	d8f6      	bhi.n	8021008 <_printf_i+0x28>
 802101a:	a001      	add	r0, pc, #4	; (adr r0, 8021020 <_printf_i+0x40>)
 802101c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021020:	08021079 	.word	0x08021079
 8021024:	0802108d 	.word	0x0802108d
 8021028:	08021009 	.word	0x08021009
 802102c:	08021009 	.word	0x08021009
 8021030:	08021009 	.word	0x08021009
 8021034:	08021009 	.word	0x08021009
 8021038:	0802108d 	.word	0x0802108d
 802103c:	08021009 	.word	0x08021009
 8021040:	08021009 	.word	0x08021009
 8021044:	08021009 	.word	0x08021009
 8021048:	08021009 	.word	0x08021009
 802104c:	08021199 	.word	0x08021199
 8021050:	080210bd 	.word	0x080210bd
 8021054:	0802117b 	.word	0x0802117b
 8021058:	08021009 	.word	0x08021009
 802105c:	08021009 	.word	0x08021009
 8021060:	080211bb 	.word	0x080211bb
 8021064:	08021009 	.word	0x08021009
 8021068:	080210bd 	.word	0x080210bd
 802106c:	08021009 	.word	0x08021009
 8021070:	08021009 	.word	0x08021009
 8021074:	08021183 	.word	0x08021183
 8021078:	680b      	ldr	r3, [r1, #0]
 802107a:	1d1a      	adds	r2, r3, #4
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	600a      	str	r2, [r1, #0]
 8021080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021088:	2301      	movs	r3, #1
 802108a:	e0a3      	b.n	80211d4 <_printf_i+0x1f4>
 802108c:	6825      	ldr	r5, [r4, #0]
 802108e:	6808      	ldr	r0, [r1, #0]
 8021090:	062e      	lsls	r6, r5, #24
 8021092:	f100 0304 	add.w	r3, r0, #4
 8021096:	d50a      	bpl.n	80210ae <_printf_i+0xce>
 8021098:	6805      	ldr	r5, [r0, #0]
 802109a:	600b      	str	r3, [r1, #0]
 802109c:	2d00      	cmp	r5, #0
 802109e:	da03      	bge.n	80210a8 <_printf_i+0xc8>
 80210a0:	232d      	movs	r3, #45	; 0x2d
 80210a2:	426d      	negs	r5, r5
 80210a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80210a8:	485e      	ldr	r0, [pc, #376]	; (8021224 <_printf_i+0x244>)
 80210aa:	230a      	movs	r3, #10
 80210ac:	e019      	b.n	80210e2 <_printf_i+0x102>
 80210ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80210b2:	6805      	ldr	r5, [r0, #0]
 80210b4:	600b      	str	r3, [r1, #0]
 80210b6:	bf18      	it	ne
 80210b8:	b22d      	sxthne	r5, r5
 80210ba:	e7ef      	b.n	802109c <_printf_i+0xbc>
 80210bc:	680b      	ldr	r3, [r1, #0]
 80210be:	6825      	ldr	r5, [r4, #0]
 80210c0:	1d18      	adds	r0, r3, #4
 80210c2:	6008      	str	r0, [r1, #0]
 80210c4:	0628      	lsls	r0, r5, #24
 80210c6:	d501      	bpl.n	80210cc <_printf_i+0xec>
 80210c8:	681d      	ldr	r5, [r3, #0]
 80210ca:	e002      	b.n	80210d2 <_printf_i+0xf2>
 80210cc:	0669      	lsls	r1, r5, #25
 80210ce:	d5fb      	bpl.n	80210c8 <_printf_i+0xe8>
 80210d0:	881d      	ldrh	r5, [r3, #0]
 80210d2:	4854      	ldr	r0, [pc, #336]	; (8021224 <_printf_i+0x244>)
 80210d4:	2f6f      	cmp	r7, #111	; 0x6f
 80210d6:	bf0c      	ite	eq
 80210d8:	2308      	moveq	r3, #8
 80210da:	230a      	movne	r3, #10
 80210dc:	2100      	movs	r1, #0
 80210de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80210e2:	6866      	ldr	r6, [r4, #4]
 80210e4:	60a6      	str	r6, [r4, #8]
 80210e6:	2e00      	cmp	r6, #0
 80210e8:	bfa2      	ittt	ge
 80210ea:	6821      	ldrge	r1, [r4, #0]
 80210ec:	f021 0104 	bicge.w	r1, r1, #4
 80210f0:	6021      	strge	r1, [r4, #0]
 80210f2:	b90d      	cbnz	r5, 80210f8 <_printf_i+0x118>
 80210f4:	2e00      	cmp	r6, #0
 80210f6:	d04d      	beq.n	8021194 <_printf_i+0x1b4>
 80210f8:	4616      	mov	r6, r2
 80210fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80210fe:	fb03 5711 	mls	r7, r3, r1, r5
 8021102:	5dc7      	ldrb	r7, [r0, r7]
 8021104:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021108:	462f      	mov	r7, r5
 802110a:	42bb      	cmp	r3, r7
 802110c:	460d      	mov	r5, r1
 802110e:	d9f4      	bls.n	80210fa <_printf_i+0x11a>
 8021110:	2b08      	cmp	r3, #8
 8021112:	d10b      	bne.n	802112c <_printf_i+0x14c>
 8021114:	6823      	ldr	r3, [r4, #0]
 8021116:	07df      	lsls	r7, r3, #31
 8021118:	d508      	bpl.n	802112c <_printf_i+0x14c>
 802111a:	6923      	ldr	r3, [r4, #16]
 802111c:	6861      	ldr	r1, [r4, #4]
 802111e:	4299      	cmp	r1, r3
 8021120:	bfde      	ittt	le
 8021122:	2330      	movle	r3, #48	; 0x30
 8021124:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021128:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 802112c:	1b92      	subs	r2, r2, r6
 802112e:	6122      	str	r2, [r4, #16]
 8021130:	f8cd a000 	str.w	sl, [sp]
 8021134:	464b      	mov	r3, r9
 8021136:	aa03      	add	r2, sp, #12
 8021138:	4621      	mov	r1, r4
 802113a:	4640      	mov	r0, r8
 802113c:	f7ff fee2 	bl	8020f04 <_printf_common>
 8021140:	3001      	adds	r0, #1
 8021142:	d14c      	bne.n	80211de <_printf_i+0x1fe>
 8021144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021148:	b004      	add	sp, #16
 802114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802114e:	4835      	ldr	r0, [pc, #212]	; (8021224 <_printf_i+0x244>)
 8021150:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021154:	6823      	ldr	r3, [r4, #0]
 8021156:	680e      	ldr	r6, [r1, #0]
 8021158:	061f      	lsls	r7, r3, #24
 802115a:	f856 5b04 	ldr.w	r5, [r6], #4
 802115e:	600e      	str	r6, [r1, #0]
 8021160:	d514      	bpl.n	802118c <_printf_i+0x1ac>
 8021162:	07d9      	lsls	r1, r3, #31
 8021164:	bf44      	itt	mi
 8021166:	f043 0320 	orrmi.w	r3, r3, #32
 802116a:	6023      	strmi	r3, [r4, #0]
 802116c:	b91d      	cbnz	r5, 8021176 <_printf_i+0x196>
 802116e:	6823      	ldr	r3, [r4, #0]
 8021170:	f023 0320 	bic.w	r3, r3, #32
 8021174:	6023      	str	r3, [r4, #0]
 8021176:	2310      	movs	r3, #16
 8021178:	e7b0      	b.n	80210dc <_printf_i+0xfc>
 802117a:	6823      	ldr	r3, [r4, #0]
 802117c:	f043 0320 	orr.w	r3, r3, #32
 8021180:	6023      	str	r3, [r4, #0]
 8021182:	2378      	movs	r3, #120	; 0x78
 8021184:	4828      	ldr	r0, [pc, #160]	; (8021228 <_printf_i+0x248>)
 8021186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802118a:	e7e3      	b.n	8021154 <_printf_i+0x174>
 802118c:	065e      	lsls	r6, r3, #25
 802118e:	bf48      	it	mi
 8021190:	b2ad      	uxthmi	r5, r5
 8021192:	e7e6      	b.n	8021162 <_printf_i+0x182>
 8021194:	4616      	mov	r6, r2
 8021196:	e7bb      	b.n	8021110 <_printf_i+0x130>
 8021198:	680b      	ldr	r3, [r1, #0]
 802119a:	6826      	ldr	r6, [r4, #0]
 802119c:	6960      	ldr	r0, [r4, #20]
 802119e:	1d1d      	adds	r5, r3, #4
 80211a0:	600d      	str	r5, [r1, #0]
 80211a2:	0635      	lsls	r5, r6, #24
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	d501      	bpl.n	80211ac <_printf_i+0x1cc>
 80211a8:	6018      	str	r0, [r3, #0]
 80211aa:	e002      	b.n	80211b2 <_printf_i+0x1d2>
 80211ac:	0671      	lsls	r1, r6, #25
 80211ae:	d5fb      	bpl.n	80211a8 <_printf_i+0x1c8>
 80211b0:	8018      	strh	r0, [r3, #0]
 80211b2:	2300      	movs	r3, #0
 80211b4:	6123      	str	r3, [r4, #16]
 80211b6:	4616      	mov	r6, r2
 80211b8:	e7ba      	b.n	8021130 <_printf_i+0x150>
 80211ba:	680b      	ldr	r3, [r1, #0]
 80211bc:	1d1a      	adds	r2, r3, #4
 80211be:	600a      	str	r2, [r1, #0]
 80211c0:	681e      	ldr	r6, [r3, #0]
 80211c2:	6862      	ldr	r2, [r4, #4]
 80211c4:	2100      	movs	r1, #0
 80211c6:	4630      	mov	r0, r6
 80211c8:	f7df f88a 	bl	80002e0 <memchr>
 80211cc:	b108      	cbz	r0, 80211d2 <_printf_i+0x1f2>
 80211ce:	1b80      	subs	r0, r0, r6
 80211d0:	6060      	str	r0, [r4, #4]
 80211d2:	6863      	ldr	r3, [r4, #4]
 80211d4:	6123      	str	r3, [r4, #16]
 80211d6:	2300      	movs	r3, #0
 80211d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80211dc:	e7a8      	b.n	8021130 <_printf_i+0x150>
 80211de:	6923      	ldr	r3, [r4, #16]
 80211e0:	4632      	mov	r2, r6
 80211e2:	4649      	mov	r1, r9
 80211e4:	4640      	mov	r0, r8
 80211e6:	47d0      	blx	sl
 80211e8:	3001      	adds	r0, #1
 80211ea:	d0ab      	beq.n	8021144 <_printf_i+0x164>
 80211ec:	6823      	ldr	r3, [r4, #0]
 80211ee:	079b      	lsls	r3, r3, #30
 80211f0:	d413      	bmi.n	802121a <_printf_i+0x23a>
 80211f2:	68e0      	ldr	r0, [r4, #12]
 80211f4:	9b03      	ldr	r3, [sp, #12]
 80211f6:	4298      	cmp	r0, r3
 80211f8:	bfb8      	it	lt
 80211fa:	4618      	movlt	r0, r3
 80211fc:	e7a4      	b.n	8021148 <_printf_i+0x168>
 80211fe:	2301      	movs	r3, #1
 8021200:	4632      	mov	r2, r6
 8021202:	4649      	mov	r1, r9
 8021204:	4640      	mov	r0, r8
 8021206:	47d0      	blx	sl
 8021208:	3001      	adds	r0, #1
 802120a:	d09b      	beq.n	8021144 <_printf_i+0x164>
 802120c:	3501      	adds	r5, #1
 802120e:	68e3      	ldr	r3, [r4, #12]
 8021210:	9903      	ldr	r1, [sp, #12]
 8021212:	1a5b      	subs	r3, r3, r1
 8021214:	42ab      	cmp	r3, r5
 8021216:	dcf2      	bgt.n	80211fe <_printf_i+0x21e>
 8021218:	e7eb      	b.n	80211f2 <_printf_i+0x212>
 802121a:	2500      	movs	r5, #0
 802121c:	f104 0619 	add.w	r6, r4, #25
 8021220:	e7f5      	b.n	802120e <_printf_i+0x22e>
 8021222:	bf00      	nop
 8021224:	08027cde 	.word	0x08027cde
 8021228:	08027cef 	.word	0x08027cef

0802122c <iprintf>:
 802122c:	b40f      	push	{r0, r1, r2, r3}
 802122e:	4b0a      	ldr	r3, [pc, #40]	; (8021258 <iprintf+0x2c>)
 8021230:	b513      	push	{r0, r1, r4, lr}
 8021232:	681c      	ldr	r4, [r3, #0]
 8021234:	b124      	cbz	r4, 8021240 <iprintf+0x14>
 8021236:	69a3      	ldr	r3, [r4, #24]
 8021238:	b913      	cbnz	r3, 8021240 <iprintf+0x14>
 802123a:	4620      	mov	r0, r4
 802123c:	f001 f93c 	bl	80224b8 <__sinit>
 8021240:	ab05      	add	r3, sp, #20
 8021242:	9a04      	ldr	r2, [sp, #16]
 8021244:	68a1      	ldr	r1, [r4, #8]
 8021246:	9301      	str	r3, [sp, #4]
 8021248:	4620      	mov	r0, r4
 802124a:	f002 f817 	bl	802327c <_vfiprintf_r>
 802124e:	b002      	add	sp, #8
 8021250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021254:	b004      	add	sp, #16
 8021256:	4770      	bx	lr
 8021258:	24000040 	.word	0x24000040

0802125c <rand>:
 802125c:	4b17      	ldr	r3, [pc, #92]	; (80212bc <rand+0x60>)
 802125e:	b510      	push	{r4, lr}
 8021260:	681c      	ldr	r4, [r3, #0]
 8021262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021264:	b9b3      	cbnz	r3, 8021294 <rand+0x38>
 8021266:	2018      	movs	r0, #24
 8021268:	f001 fa42 	bl	80226f0 <malloc>
 802126c:	63a0      	str	r0, [r4, #56]	; 0x38
 802126e:	b928      	cbnz	r0, 802127c <rand+0x20>
 8021270:	4602      	mov	r2, r0
 8021272:	4b13      	ldr	r3, [pc, #76]	; (80212c0 <rand+0x64>)
 8021274:	4813      	ldr	r0, [pc, #76]	; (80212c4 <rand+0x68>)
 8021276:	214e      	movs	r1, #78	; 0x4e
 8021278:	f000 f9d6 	bl	8021628 <__assert_func>
 802127c:	4a12      	ldr	r2, [pc, #72]	; (80212c8 <rand+0x6c>)
 802127e:	4b13      	ldr	r3, [pc, #76]	; (80212cc <rand+0x70>)
 8021280:	e9c0 2300 	strd	r2, r3, [r0]
 8021284:	4b12      	ldr	r3, [pc, #72]	; (80212d0 <rand+0x74>)
 8021286:	6083      	str	r3, [r0, #8]
 8021288:	230b      	movs	r3, #11
 802128a:	8183      	strh	r3, [r0, #12]
 802128c:	2201      	movs	r2, #1
 802128e:	2300      	movs	r3, #0
 8021290:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021294:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021296:	480f      	ldr	r0, [pc, #60]	; (80212d4 <rand+0x78>)
 8021298:	690a      	ldr	r2, [r1, #16]
 802129a:	694b      	ldr	r3, [r1, #20]
 802129c:	4c0e      	ldr	r4, [pc, #56]	; (80212d8 <rand+0x7c>)
 802129e:	4350      	muls	r0, r2
 80212a0:	fb04 0003 	mla	r0, r4, r3, r0
 80212a4:	fba2 3404 	umull	r3, r4, r2, r4
 80212a8:	1c5a      	adds	r2, r3, #1
 80212aa:	4404      	add	r4, r0
 80212ac:	f144 0000 	adc.w	r0, r4, #0
 80212b0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80212b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80212b8:	bd10      	pop	{r4, pc}
 80212ba:	bf00      	nop
 80212bc:	24000040 	.word	0x24000040
 80212c0:	08027d00 	.word	0x08027d00
 80212c4:	08027d17 	.word	0x08027d17
 80212c8:	abcd330e 	.word	0xabcd330e
 80212cc:	e66d1234 	.word	0xe66d1234
 80212d0:	0005deec 	.word	0x0005deec
 80212d4:	5851f42d 	.word	0x5851f42d
 80212d8:	4c957f2d 	.word	0x4c957f2d

080212dc <_raise_r>:
 80212dc:	291f      	cmp	r1, #31
 80212de:	b538      	push	{r3, r4, r5, lr}
 80212e0:	4604      	mov	r4, r0
 80212e2:	460d      	mov	r5, r1
 80212e4:	d904      	bls.n	80212f0 <_raise_r+0x14>
 80212e6:	2316      	movs	r3, #22
 80212e8:	6003      	str	r3, [r0, #0]
 80212ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80212ee:	bd38      	pop	{r3, r4, r5, pc}
 80212f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80212f2:	b112      	cbz	r2, 80212fa <_raise_r+0x1e>
 80212f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80212f8:	b94b      	cbnz	r3, 802130e <_raise_r+0x32>
 80212fa:	4620      	mov	r0, r4
 80212fc:	f000 f830 	bl	8021360 <_getpid_r>
 8021300:	462a      	mov	r2, r5
 8021302:	4601      	mov	r1, r0
 8021304:	4620      	mov	r0, r4
 8021306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802130a:	f000 b817 	b.w	802133c <_kill_r>
 802130e:	2b01      	cmp	r3, #1
 8021310:	d00a      	beq.n	8021328 <_raise_r+0x4c>
 8021312:	1c59      	adds	r1, r3, #1
 8021314:	d103      	bne.n	802131e <_raise_r+0x42>
 8021316:	2316      	movs	r3, #22
 8021318:	6003      	str	r3, [r0, #0]
 802131a:	2001      	movs	r0, #1
 802131c:	e7e7      	b.n	80212ee <_raise_r+0x12>
 802131e:	2400      	movs	r4, #0
 8021320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021324:	4628      	mov	r0, r5
 8021326:	4798      	blx	r3
 8021328:	2000      	movs	r0, #0
 802132a:	e7e0      	b.n	80212ee <_raise_r+0x12>

0802132c <raise>:
 802132c:	4b02      	ldr	r3, [pc, #8]	; (8021338 <raise+0xc>)
 802132e:	4601      	mov	r1, r0
 8021330:	6818      	ldr	r0, [r3, #0]
 8021332:	f7ff bfd3 	b.w	80212dc <_raise_r>
 8021336:	bf00      	nop
 8021338:	24000040 	.word	0x24000040

0802133c <_kill_r>:
 802133c:	b538      	push	{r3, r4, r5, lr}
 802133e:	4d07      	ldr	r5, [pc, #28]	; (802135c <_kill_r+0x20>)
 8021340:	2300      	movs	r3, #0
 8021342:	4604      	mov	r4, r0
 8021344:	4608      	mov	r0, r1
 8021346:	4611      	mov	r1, r2
 8021348:	602b      	str	r3, [r5, #0]
 802134a:	f7df fff5 	bl	8001338 <_kill>
 802134e:	1c43      	adds	r3, r0, #1
 8021350:	d102      	bne.n	8021358 <_kill_r+0x1c>
 8021352:	682b      	ldr	r3, [r5, #0]
 8021354:	b103      	cbz	r3, 8021358 <_kill_r+0x1c>
 8021356:	6023      	str	r3, [r4, #0]
 8021358:	bd38      	pop	{r3, r4, r5, pc}
 802135a:	bf00      	nop
 802135c:	24048e80 	.word	0x24048e80

08021360 <_getpid_r>:
 8021360:	f7df bfe2 	b.w	8001328 <_getpid>

08021364 <siprintf>:
 8021364:	b40e      	push	{r1, r2, r3}
 8021366:	b500      	push	{lr}
 8021368:	b09c      	sub	sp, #112	; 0x70
 802136a:	ab1d      	add	r3, sp, #116	; 0x74
 802136c:	9002      	str	r0, [sp, #8]
 802136e:	9006      	str	r0, [sp, #24]
 8021370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021374:	4809      	ldr	r0, [pc, #36]	; (802139c <siprintf+0x38>)
 8021376:	9107      	str	r1, [sp, #28]
 8021378:	9104      	str	r1, [sp, #16]
 802137a:	4909      	ldr	r1, [pc, #36]	; (80213a0 <siprintf+0x3c>)
 802137c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021380:	9105      	str	r1, [sp, #20]
 8021382:	6800      	ldr	r0, [r0, #0]
 8021384:	9301      	str	r3, [sp, #4]
 8021386:	a902      	add	r1, sp, #8
 8021388:	f001 fe4e 	bl	8023028 <_svfiprintf_r>
 802138c:	9b02      	ldr	r3, [sp, #8]
 802138e:	2200      	movs	r2, #0
 8021390:	701a      	strb	r2, [r3, #0]
 8021392:	b01c      	add	sp, #112	; 0x70
 8021394:	f85d eb04 	ldr.w	lr, [sp], #4
 8021398:	b003      	add	sp, #12
 802139a:	4770      	bx	lr
 802139c:	24000040 	.word	0x24000040
 80213a0:	ffff0208 	.word	0xffff0208

080213a4 <_vsiprintf_r>:
 80213a4:	b500      	push	{lr}
 80213a6:	b09b      	sub	sp, #108	; 0x6c
 80213a8:	9100      	str	r1, [sp, #0]
 80213aa:	9104      	str	r1, [sp, #16]
 80213ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80213b0:	9105      	str	r1, [sp, #20]
 80213b2:	9102      	str	r1, [sp, #8]
 80213b4:	4905      	ldr	r1, [pc, #20]	; (80213cc <_vsiprintf_r+0x28>)
 80213b6:	9103      	str	r1, [sp, #12]
 80213b8:	4669      	mov	r1, sp
 80213ba:	f001 fe35 	bl	8023028 <_svfiprintf_r>
 80213be:	9b00      	ldr	r3, [sp, #0]
 80213c0:	2200      	movs	r2, #0
 80213c2:	701a      	strb	r2, [r3, #0]
 80213c4:	b01b      	add	sp, #108	; 0x6c
 80213c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80213ca:	bf00      	nop
 80213cc:	ffff0208 	.word	0xffff0208

080213d0 <vsiprintf>:
 80213d0:	4613      	mov	r3, r2
 80213d2:	460a      	mov	r2, r1
 80213d4:	4601      	mov	r1, r0
 80213d6:	4802      	ldr	r0, [pc, #8]	; (80213e0 <vsiprintf+0x10>)
 80213d8:	6800      	ldr	r0, [r0, #0]
 80213da:	f7ff bfe3 	b.w	80213a4 <_vsiprintf_r>
 80213de:	bf00      	nop
 80213e0:	24000040 	.word	0x24000040

080213e4 <__swbuf_r>:
 80213e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213e6:	460e      	mov	r6, r1
 80213e8:	4614      	mov	r4, r2
 80213ea:	4605      	mov	r5, r0
 80213ec:	b118      	cbz	r0, 80213f6 <__swbuf_r+0x12>
 80213ee:	6983      	ldr	r3, [r0, #24]
 80213f0:	b90b      	cbnz	r3, 80213f6 <__swbuf_r+0x12>
 80213f2:	f001 f861 	bl	80224b8 <__sinit>
 80213f6:	4b21      	ldr	r3, [pc, #132]	; (802147c <__swbuf_r+0x98>)
 80213f8:	429c      	cmp	r4, r3
 80213fa:	d12b      	bne.n	8021454 <__swbuf_r+0x70>
 80213fc:	686c      	ldr	r4, [r5, #4]
 80213fe:	69a3      	ldr	r3, [r4, #24]
 8021400:	60a3      	str	r3, [r4, #8]
 8021402:	89a3      	ldrh	r3, [r4, #12]
 8021404:	071a      	lsls	r2, r3, #28
 8021406:	d52f      	bpl.n	8021468 <__swbuf_r+0x84>
 8021408:	6923      	ldr	r3, [r4, #16]
 802140a:	b36b      	cbz	r3, 8021468 <__swbuf_r+0x84>
 802140c:	6923      	ldr	r3, [r4, #16]
 802140e:	6820      	ldr	r0, [r4, #0]
 8021410:	1ac0      	subs	r0, r0, r3
 8021412:	6963      	ldr	r3, [r4, #20]
 8021414:	b2f6      	uxtb	r6, r6
 8021416:	4283      	cmp	r3, r0
 8021418:	4637      	mov	r7, r6
 802141a:	dc04      	bgt.n	8021426 <__swbuf_r+0x42>
 802141c:	4621      	mov	r1, r4
 802141e:	4628      	mov	r0, r5
 8021420:	f000 ffb6 	bl	8022390 <_fflush_r>
 8021424:	bb30      	cbnz	r0, 8021474 <__swbuf_r+0x90>
 8021426:	68a3      	ldr	r3, [r4, #8]
 8021428:	3b01      	subs	r3, #1
 802142a:	60a3      	str	r3, [r4, #8]
 802142c:	6823      	ldr	r3, [r4, #0]
 802142e:	1c5a      	adds	r2, r3, #1
 8021430:	6022      	str	r2, [r4, #0]
 8021432:	701e      	strb	r6, [r3, #0]
 8021434:	6963      	ldr	r3, [r4, #20]
 8021436:	3001      	adds	r0, #1
 8021438:	4283      	cmp	r3, r0
 802143a:	d004      	beq.n	8021446 <__swbuf_r+0x62>
 802143c:	89a3      	ldrh	r3, [r4, #12]
 802143e:	07db      	lsls	r3, r3, #31
 8021440:	d506      	bpl.n	8021450 <__swbuf_r+0x6c>
 8021442:	2e0a      	cmp	r6, #10
 8021444:	d104      	bne.n	8021450 <__swbuf_r+0x6c>
 8021446:	4621      	mov	r1, r4
 8021448:	4628      	mov	r0, r5
 802144a:	f000 ffa1 	bl	8022390 <_fflush_r>
 802144e:	b988      	cbnz	r0, 8021474 <__swbuf_r+0x90>
 8021450:	4638      	mov	r0, r7
 8021452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021454:	4b0a      	ldr	r3, [pc, #40]	; (8021480 <__swbuf_r+0x9c>)
 8021456:	429c      	cmp	r4, r3
 8021458:	d101      	bne.n	802145e <__swbuf_r+0x7a>
 802145a:	68ac      	ldr	r4, [r5, #8]
 802145c:	e7cf      	b.n	80213fe <__swbuf_r+0x1a>
 802145e:	4b09      	ldr	r3, [pc, #36]	; (8021484 <__swbuf_r+0xa0>)
 8021460:	429c      	cmp	r4, r3
 8021462:	bf08      	it	eq
 8021464:	68ec      	ldreq	r4, [r5, #12]
 8021466:	e7ca      	b.n	80213fe <__swbuf_r+0x1a>
 8021468:	4621      	mov	r1, r4
 802146a:	4628      	mov	r0, r5
 802146c:	f000 f80c 	bl	8021488 <__swsetup_r>
 8021470:	2800      	cmp	r0, #0
 8021472:	d0cb      	beq.n	802140c <__swbuf_r+0x28>
 8021474:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021478:	e7ea      	b.n	8021450 <__swbuf_r+0x6c>
 802147a:	bf00      	nop
 802147c:	08027e50 	.word	0x08027e50
 8021480:	08027e70 	.word	0x08027e70
 8021484:	08027e30 	.word	0x08027e30

08021488 <__swsetup_r>:
 8021488:	4b32      	ldr	r3, [pc, #200]	; (8021554 <__swsetup_r+0xcc>)
 802148a:	b570      	push	{r4, r5, r6, lr}
 802148c:	681d      	ldr	r5, [r3, #0]
 802148e:	4606      	mov	r6, r0
 8021490:	460c      	mov	r4, r1
 8021492:	b125      	cbz	r5, 802149e <__swsetup_r+0x16>
 8021494:	69ab      	ldr	r3, [r5, #24]
 8021496:	b913      	cbnz	r3, 802149e <__swsetup_r+0x16>
 8021498:	4628      	mov	r0, r5
 802149a:	f001 f80d 	bl	80224b8 <__sinit>
 802149e:	4b2e      	ldr	r3, [pc, #184]	; (8021558 <__swsetup_r+0xd0>)
 80214a0:	429c      	cmp	r4, r3
 80214a2:	d10f      	bne.n	80214c4 <__swsetup_r+0x3c>
 80214a4:	686c      	ldr	r4, [r5, #4]
 80214a6:	89a3      	ldrh	r3, [r4, #12]
 80214a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80214ac:	0719      	lsls	r1, r3, #28
 80214ae:	d42c      	bmi.n	802150a <__swsetup_r+0x82>
 80214b0:	06dd      	lsls	r5, r3, #27
 80214b2:	d411      	bmi.n	80214d8 <__swsetup_r+0x50>
 80214b4:	2309      	movs	r3, #9
 80214b6:	6033      	str	r3, [r6, #0]
 80214b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80214bc:	81a3      	strh	r3, [r4, #12]
 80214be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80214c2:	e03e      	b.n	8021542 <__swsetup_r+0xba>
 80214c4:	4b25      	ldr	r3, [pc, #148]	; (802155c <__swsetup_r+0xd4>)
 80214c6:	429c      	cmp	r4, r3
 80214c8:	d101      	bne.n	80214ce <__swsetup_r+0x46>
 80214ca:	68ac      	ldr	r4, [r5, #8]
 80214cc:	e7eb      	b.n	80214a6 <__swsetup_r+0x1e>
 80214ce:	4b24      	ldr	r3, [pc, #144]	; (8021560 <__swsetup_r+0xd8>)
 80214d0:	429c      	cmp	r4, r3
 80214d2:	bf08      	it	eq
 80214d4:	68ec      	ldreq	r4, [r5, #12]
 80214d6:	e7e6      	b.n	80214a6 <__swsetup_r+0x1e>
 80214d8:	0758      	lsls	r0, r3, #29
 80214da:	d512      	bpl.n	8021502 <__swsetup_r+0x7a>
 80214dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80214de:	b141      	cbz	r1, 80214f2 <__swsetup_r+0x6a>
 80214e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80214e4:	4299      	cmp	r1, r3
 80214e6:	d002      	beq.n	80214ee <__swsetup_r+0x66>
 80214e8:	4630      	mov	r0, r6
 80214ea:	f001 fc97 	bl	8022e1c <_free_r>
 80214ee:	2300      	movs	r3, #0
 80214f0:	6363      	str	r3, [r4, #52]	; 0x34
 80214f2:	89a3      	ldrh	r3, [r4, #12]
 80214f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80214f8:	81a3      	strh	r3, [r4, #12]
 80214fa:	2300      	movs	r3, #0
 80214fc:	6063      	str	r3, [r4, #4]
 80214fe:	6923      	ldr	r3, [r4, #16]
 8021500:	6023      	str	r3, [r4, #0]
 8021502:	89a3      	ldrh	r3, [r4, #12]
 8021504:	f043 0308 	orr.w	r3, r3, #8
 8021508:	81a3      	strh	r3, [r4, #12]
 802150a:	6923      	ldr	r3, [r4, #16]
 802150c:	b94b      	cbnz	r3, 8021522 <__swsetup_r+0x9a>
 802150e:	89a3      	ldrh	r3, [r4, #12]
 8021510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021518:	d003      	beq.n	8021522 <__swsetup_r+0x9a>
 802151a:	4621      	mov	r1, r4
 802151c:	4630      	mov	r0, r6
 802151e:	f001 f8a7 	bl	8022670 <__smakebuf_r>
 8021522:	89a0      	ldrh	r0, [r4, #12]
 8021524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021528:	f010 0301 	ands.w	r3, r0, #1
 802152c:	d00a      	beq.n	8021544 <__swsetup_r+0xbc>
 802152e:	2300      	movs	r3, #0
 8021530:	60a3      	str	r3, [r4, #8]
 8021532:	6963      	ldr	r3, [r4, #20]
 8021534:	425b      	negs	r3, r3
 8021536:	61a3      	str	r3, [r4, #24]
 8021538:	6923      	ldr	r3, [r4, #16]
 802153a:	b943      	cbnz	r3, 802154e <__swsetup_r+0xc6>
 802153c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021540:	d1ba      	bne.n	80214b8 <__swsetup_r+0x30>
 8021542:	bd70      	pop	{r4, r5, r6, pc}
 8021544:	0781      	lsls	r1, r0, #30
 8021546:	bf58      	it	pl
 8021548:	6963      	ldrpl	r3, [r4, #20]
 802154a:	60a3      	str	r3, [r4, #8]
 802154c:	e7f4      	b.n	8021538 <__swsetup_r+0xb0>
 802154e:	2000      	movs	r0, #0
 8021550:	e7f7      	b.n	8021542 <__swsetup_r+0xba>
 8021552:	bf00      	nop
 8021554:	24000040 	.word	0x24000040
 8021558:	08027e50 	.word	0x08027e50
 802155c:	08027e70 	.word	0x08027e70
 8021560:	08027e30 	.word	0x08027e30

08021564 <__register_exitproc>:
 8021564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021568:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021624 <__register_exitproc+0xc0>
 802156c:	4606      	mov	r6, r0
 802156e:	f8d8 0000 	ldr.w	r0, [r8]
 8021572:	461f      	mov	r7, r3
 8021574:	460d      	mov	r5, r1
 8021576:	4691      	mov	r9, r2
 8021578:	f001 f853 	bl	8022622 <__retarget_lock_acquire_recursive>
 802157c:	4b25      	ldr	r3, [pc, #148]	; (8021614 <__register_exitproc+0xb0>)
 802157e:	681c      	ldr	r4, [r3, #0]
 8021580:	b934      	cbnz	r4, 8021590 <__register_exitproc+0x2c>
 8021582:	4c25      	ldr	r4, [pc, #148]	; (8021618 <__register_exitproc+0xb4>)
 8021584:	601c      	str	r4, [r3, #0]
 8021586:	4b25      	ldr	r3, [pc, #148]	; (802161c <__register_exitproc+0xb8>)
 8021588:	b113      	cbz	r3, 8021590 <__register_exitproc+0x2c>
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021590:	6863      	ldr	r3, [r4, #4]
 8021592:	2b1f      	cmp	r3, #31
 8021594:	dd07      	ble.n	80215a6 <__register_exitproc+0x42>
 8021596:	f8d8 0000 	ldr.w	r0, [r8]
 802159a:	f001 f844 	bl	8022626 <__retarget_lock_release_recursive>
 802159e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80215a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215a6:	b34e      	cbz	r6, 80215fc <__register_exitproc+0x98>
 80215a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80215ac:	b988      	cbnz	r0, 80215d2 <__register_exitproc+0x6e>
 80215ae:	4b1c      	ldr	r3, [pc, #112]	; (8021620 <__register_exitproc+0xbc>)
 80215b0:	b923      	cbnz	r3, 80215bc <__register_exitproc+0x58>
 80215b2:	f8d8 0000 	ldr.w	r0, [r8]
 80215b6:	f001 f835 	bl	8022624 <__retarget_lock_release>
 80215ba:	e7f0      	b.n	802159e <__register_exitproc+0x3a>
 80215bc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80215c0:	f001 f896 	bl	80226f0 <malloc>
 80215c4:	2800      	cmp	r0, #0
 80215c6:	d0f4      	beq.n	80215b2 <__register_exitproc+0x4e>
 80215c8:	2300      	movs	r3, #0
 80215ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80215ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80215d2:	6863      	ldr	r3, [r4, #4]
 80215d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80215d8:	2201      	movs	r2, #1
 80215da:	409a      	lsls	r2, r3
 80215dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80215e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80215e4:	4313      	orrs	r3, r2
 80215e6:	2e02      	cmp	r6, #2
 80215e8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80215ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80215f0:	bf02      	ittt	eq
 80215f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80215f6:	431a      	orreq	r2, r3
 80215f8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80215fc:	6863      	ldr	r3, [r4, #4]
 80215fe:	f8d8 0000 	ldr.w	r0, [r8]
 8021602:	1c5a      	adds	r2, r3, #1
 8021604:	3302      	adds	r3, #2
 8021606:	6062      	str	r2, [r4, #4]
 8021608:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802160c:	f001 f80b 	bl	8022626 <__retarget_lock_release_recursive>
 8021610:	2000      	movs	r0, #0
 8021612:	e7c6      	b.n	80215a2 <__register_exitproc+0x3e>
 8021614:	24045468 	.word	0x24045468
 8021618:	240453dc 	.word	0x240453dc
 802161c:	00000000 	.word	0x00000000
 8021620:	080226f1 	.word	0x080226f1
 8021624:	240000a4 	.word	0x240000a4

08021628 <__assert_func>:
 8021628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802162a:	4614      	mov	r4, r2
 802162c:	461a      	mov	r2, r3
 802162e:	4b09      	ldr	r3, [pc, #36]	; (8021654 <__assert_func+0x2c>)
 8021630:	681b      	ldr	r3, [r3, #0]
 8021632:	4605      	mov	r5, r0
 8021634:	68d8      	ldr	r0, [r3, #12]
 8021636:	b14c      	cbz	r4, 802164c <__assert_func+0x24>
 8021638:	4b07      	ldr	r3, [pc, #28]	; (8021658 <__assert_func+0x30>)
 802163a:	9100      	str	r1, [sp, #0]
 802163c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021640:	4906      	ldr	r1, [pc, #24]	; (802165c <__assert_func+0x34>)
 8021642:	462b      	mov	r3, r5
 8021644:	f000 ffb6 	bl	80225b4 <fiprintf>
 8021648:	f7ff f93e 	bl	80208c8 <abort>
 802164c:	4b04      	ldr	r3, [pc, #16]	; (8021660 <__assert_func+0x38>)
 802164e:	461c      	mov	r4, r3
 8021650:	e7f3      	b.n	802163a <__assert_func+0x12>
 8021652:	bf00      	nop
 8021654:	24000040 	.word	0x24000040
 8021658:	08027d76 	.word	0x08027d76
 802165c:	08027d83 	.word	0x08027d83
 8021660:	08027db1 	.word	0x08027db1

08021664 <quorem>:
 8021664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021668:	6903      	ldr	r3, [r0, #16]
 802166a:	690c      	ldr	r4, [r1, #16]
 802166c:	42a3      	cmp	r3, r4
 802166e:	4607      	mov	r7, r0
 8021670:	f2c0 8081 	blt.w	8021776 <quorem+0x112>
 8021674:	3c01      	subs	r4, #1
 8021676:	f101 0814 	add.w	r8, r1, #20
 802167a:	f100 0514 	add.w	r5, r0, #20
 802167e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021682:	9301      	str	r3, [sp, #4]
 8021684:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802168c:	3301      	adds	r3, #1
 802168e:	429a      	cmp	r2, r3
 8021690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021698:	fbb2 f6f3 	udiv	r6, r2, r3
 802169c:	d331      	bcc.n	8021702 <quorem+0x9e>
 802169e:	f04f 0e00 	mov.w	lr, #0
 80216a2:	4640      	mov	r0, r8
 80216a4:	46ac      	mov	ip, r5
 80216a6:	46f2      	mov	sl, lr
 80216a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80216ac:	b293      	uxth	r3, r2
 80216ae:	fb06 e303 	mla	r3, r6, r3, lr
 80216b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80216b6:	b29b      	uxth	r3, r3
 80216b8:	ebaa 0303 	sub.w	r3, sl, r3
 80216bc:	0c12      	lsrs	r2, r2, #16
 80216be:	f8dc a000 	ldr.w	sl, [ip]
 80216c2:	fb06 e202 	mla	r2, r6, r2, lr
 80216c6:	fa13 f38a 	uxtah	r3, r3, sl
 80216ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80216ce:	fa1f fa82 	uxth.w	sl, r2
 80216d2:	f8dc 2000 	ldr.w	r2, [ip]
 80216d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80216da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80216de:	b29b      	uxth	r3, r3
 80216e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80216e4:	4581      	cmp	r9, r0
 80216e6:	f84c 3b04 	str.w	r3, [ip], #4
 80216ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80216ee:	d2db      	bcs.n	80216a8 <quorem+0x44>
 80216f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80216f4:	b92b      	cbnz	r3, 8021702 <quorem+0x9e>
 80216f6:	9b01      	ldr	r3, [sp, #4]
 80216f8:	3b04      	subs	r3, #4
 80216fa:	429d      	cmp	r5, r3
 80216fc:	461a      	mov	r2, r3
 80216fe:	d32e      	bcc.n	802175e <quorem+0xfa>
 8021700:	613c      	str	r4, [r7, #16]
 8021702:	4638      	mov	r0, r7
 8021704:	f001 fa7a 	bl	8022bfc <__mcmp>
 8021708:	2800      	cmp	r0, #0
 802170a:	db24      	blt.n	8021756 <quorem+0xf2>
 802170c:	3601      	adds	r6, #1
 802170e:	4628      	mov	r0, r5
 8021710:	f04f 0c00 	mov.w	ip, #0
 8021714:	f858 2b04 	ldr.w	r2, [r8], #4
 8021718:	f8d0 e000 	ldr.w	lr, [r0]
 802171c:	b293      	uxth	r3, r2
 802171e:	ebac 0303 	sub.w	r3, ip, r3
 8021722:	0c12      	lsrs	r2, r2, #16
 8021724:	fa13 f38e 	uxtah	r3, r3, lr
 8021728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802172c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021730:	b29b      	uxth	r3, r3
 8021732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021736:	45c1      	cmp	r9, r8
 8021738:	f840 3b04 	str.w	r3, [r0], #4
 802173c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021740:	d2e8      	bcs.n	8021714 <quorem+0xb0>
 8021742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802174a:	b922      	cbnz	r2, 8021756 <quorem+0xf2>
 802174c:	3b04      	subs	r3, #4
 802174e:	429d      	cmp	r5, r3
 8021750:	461a      	mov	r2, r3
 8021752:	d30a      	bcc.n	802176a <quorem+0x106>
 8021754:	613c      	str	r4, [r7, #16]
 8021756:	4630      	mov	r0, r6
 8021758:	b003      	add	sp, #12
 802175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802175e:	6812      	ldr	r2, [r2, #0]
 8021760:	3b04      	subs	r3, #4
 8021762:	2a00      	cmp	r2, #0
 8021764:	d1cc      	bne.n	8021700 <quorem+0x9c>
 8021766:	3c01      	subs	r4, #1
 8021768:	e7c7      	b.n	80216fa <quorem+0x96>
 802176a:	6812      	ldr	r2, [r2, #0]
 802176c:	3b04      	subs	r3, #4
 802176e:	2a00      	cmp	r2, #0
 8021770:	d1f0      	bne.n	8021754 <quorem+0xf0>
 8021772:	3c01      	subs	r4, #1
 8021774:	e7eb      	b.n	802174e <quorem+0xea>
 8021776:	2000      	movs	r0, #0
 8021778:	e7ee      	b.n	8021758 <quorem+0xf4>
 802177a:	0000      	movs	r0, r0
 802177c:	0000      	movs	r0, r0
	...

08021780 <_dtoa_r>:
 8021780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021784:	ec59 8b10 	vmov	r8, r9, d0
 8021788:	b095      	sub	sp, #84	; 0x54
 802178a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802178c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802178e:	9107      	str	r1, [sp, #28]
 8021790:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8021794:	4606      	mov	r6, r0
 8021796:	9209      	str	r2, [sp, #36]	; 0x24
 8021798:	9310      	str	r3, [sp, #64]	; 0x40
 802179a:	b975      	cbnz	r5, 80217ba <_dtoa_r+0x3a>
 802179c:	2010      	movs	r0, #16
 802179e:	f000 ffa7 	bl	80226f0 <malloc>
 80217a2:	4602      	mov	r2, r0
 80217a4:	6270      	str	r0, [r6, #36]	; 0x24
 80217a6:	b920      	cbnz	r0, 80217b2 <_dtoa_r+0x32>
 80217a8:	4bab      	ldr	r3, [pc, #684]	; (8021a58 <_dtoa_r+0x2d8>)
 80217aa:	21ea      	movs	r1, #234	; 0xea
 80217ac:	48ab      	ldr	r0, [pc, #684]	; (8021a5c <_dtoa_r+0x2dc>)
 80217ae:	f7ff ff3b 	bl	8021628 <__assert_func>
 80217b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80217b6:	6005      	str	r5, [r0, #0]
 80217b8:	60c5      	str	r5, [r0, #12]
 80217ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80217bc:	6819      	ldr	r1, [r3, #0]
 80217be:	b151      	cbz	r1, 80217d6 <_dtoa_r+0x56>
 80217c0:	685a      	ldr	r2, [r3, #4]
 80217c2:	604a      	str	r2, [r1, #4]
 80217c4:	2301      	movs	r3, #1
 80217c6:	4093      	lsls	r3, r2
 80217c8:	608b      	str	r3, [r1, #8]
 80217ca:	4630      	mov	r0, r6
 80217cc:	f000 ffd8 	bl	8022780 <_Bfree>
 80217d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80217d2:	2200      	movs	r2, #0
 80217d4:	601a      	str	r2, [r3, #0]
 80217d6:	f1b9 0300 	subs.w	r3, r9, #0
 80217da:	bfbb      	ittet	lt
 80217dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80217e0:	9303      	strlt	r3, [sp, #12]
 80217e2:	2300      	movge	r3, #0
 80217e4:	2201      	movlt	r2, #1
 80217e6:	bfac      	ite	ge
 80217e8:	6023      	strge	r3, [r4, #0]
 80217ea:	6022      	strlt	r2, [r4, #0]
 80217ec:	4b9c      	ldr	r3, [pc, #624]	; (8021a60 <_dtoa_r+0x2e0>)
 80217ee:	9c03      	ldr	r4, [sp, #12]
 80217f0:	43a3      	bics	r3, r4
 80217f2:	d11a      	bne.n	802182a <_dtoa_r+0xaa>
 80217f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80217fa:	6013      	str	r3, [r2, #0]
 80217fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021800:	ea53 0308 	orrs.w	r3, r3, r8
 8021804:	f000 8512 	beq.w	802222c <_dtoa_r+0xaac>
 8021808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802180a:	b953      	cbnz	r3, 8021822 <_dtoa_r+0xa2>
 802180c:	4b95      	ldr	r3, [pc, #596]	; (8021a64 <_dtoa_r+0x2e4>)
 802180e:	e01f      	b.n	8021850 <_dtoa_r+0xd0>
 8021810:	4b95      	ldr	r3, [pc, #596]	; (8021a68 <_dtoa_r+0x2e8>)
 8021812:	9300      	str	r3, [sp, #0]
 8021814:	3308      	adds	r3, #8
 8021816:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021818:	6013      	str	r3, [r2, #0]
 802181a:	9800      	ldr	r0, [sp, #0]
 802181c:	b015      	add	sp, #84	; 0x54
 802181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021822:	4b90      	ldr	r3, [pc, #576]	; (8021a64 <_dtoa_r+0x2e4>)
 8021824:	9300      	str	r3, [sp, #0]
 8021826:	3303      	adds	r3, #3
 8021828:	e7f5      	b.n	8021816 <_dtoa_r+0x96>
 802182a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802182e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021836:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 802183a:	d10b      	bne.n	8021854 <_dtoa_r+0xd4>
 802183c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802183e:	2301      	movs	r3, #1
 8021840:	6013      	str	r3, [r2, #0]
 8021842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021844:	2b00      	cmp	r3, #0
 8021846:	f000 84ee 	beq.w	8022226 <_dtoa_r+0xaa6>
 802184a:	4888      	ldr	r0, [pc, #544]	; (8021a6c <_dtoa_r+0x2ec>)
 802184c:	6018      	str	r0, [r3, #0]
 802184e:	1e43      	subs	r3, r0, #1
 8021850:	9300      	str	r3, [sp, #0]
 8021852:	e7e2      	b.n	802181a <_dtoa_r+0x9a>
 8021854:	a913      	add	r1, sp, #76	; 0x4c
 8021856:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802185a:	aa12      	add	r2, sp, #72	; 0x48
 802185c:	4630      	mov	r0, r6
 802185e:	f001 fa71 	bl	8022d44 <__d2b>
 8021862:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8021866:	4605      	mov	r5, r0
 8021868:	9812      	ldr	r0, [sp, #72]	; 0x48
 802186a:	2900      	cmp	r1, #0
 802186c:	d047      	beq.n	80218fe <_dtoa_r+0x17e>
 802186e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021870:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021878:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802187c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021880:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021884:	2400      	movs	r4, #0
 8021886:	ec43 2b16 	vmov	d6, r2, r3
 802188a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802188e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8021a40 <_dtoa_r+0x2c0>
 8021892:	ee36 7b47 	vsub.f64	d7, d6, d7
 8021896:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8021a48 <_dtoa_r+0x2c8>
 802189a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802189e:	eeb0 7b46 	vmov.f64	d7, d6
 80218a2:	ee06 1a90 	vmov	s13, r1
 80218a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80218aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8021a50 <_dtoa_r+0x2d0>
 80218ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80218b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80218b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80218ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218be:	ee16 ba90 	vmov	fp, s13
 80218c2:	9411      	str	r4, [sp, #68]	; 0x44
 80218c4:	d508      	bpl.n	80218d8 <_dtoa_r+0x158>
 80218c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80218ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80218ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218d2:	bf18      	it	ne
 80218d4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80218d8:	f1bb 0f16 	cmp.w	fp, #22
 80218dc:	d832      	bhi.n	8021944 <_dtoa_r+0x1c4>
 80218de:	4b64      	ldr	r3, [pc, #400]	; (8021a70 <_dtoa_r+0x2f0>)
 80218e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80218e4:	ed93 7b00 	vldr	d7, [r3]
 80218e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80218ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80218f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218f4:	d501      	bpl.n	80218fa <_dtoa_r+0x17a>
 80218f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80218fa:	2300      	movs	r3, #0
 80218fc:	e023      	b.n	8021946 <_dtoa_r+0x1c6>
 80218fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021900:	4401      	add	r1, r0
 8021902:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8021906:	2b20      	cmp	r3, #32
 8021908:	bfc3      	ittte	gt
 802190a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802190e:	fa04 f303 	lslgt.w	r3, r4, r3
 8021912:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8021916:	f1c3 0320 	rsble	r3, r3, #32
 802191a:	bfc6      	itte	gt
 802191c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8021920:	ea43 0308 	orrgt.w	r3, r3, r8
 8021924:	fa08 f303 	lslle.w	r3, r8, r3
 8021928:	ee07 3a90 	vmov	s15, r3
 802192c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021930:	3901      	subs	r1, #1
 8021932:	ed8d 7b00 	vstr	d7, [sp]
 8021936:	9c01      	ldr	r4, [sp, #4]
 8021938:	e9dd 2300 	ldrd	r2, r3, [sp]
 802193c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8021940:	2401      	movs	r4, #1
 8021942:	e7a0      	b.n	8021886 <_dtoa_r+0x106>
 8021944:	2301      	movs	r3, #1
 8021946:	930f      	str	r3, [sp, #60]	; 0x3c
 8021948:	1a43      	subs	r3, r0, r1
 802194a:	1e5a      	subs	r2, r3, #1
 802194c:	bf45      	ittet	mi
 802194e:	f1c3 0301 	rsbmi	r3, r3, #1
 8021952:	9305      	strmi	r3, [sp, #20]
 8021954:	2300      	movpl	r3, #0
 8021956:	2300      	movmi	r3, #0
 8021958:	9206      	str	r2, [sp, #24]
 802195a:	bf54      	ite	pl
 802195c:	9305      	strpl	r3, [sp, #20]
 802195e:	9306      	strmi	r3, [sp, #24]
 8021960:	f1bb 0f00 	cmp.w	fp, #0
 8021964:	db18      	blt.n	8021998 <_dtoa_r+0x218>
 8021966:	9b06      	ldr	r3, [sp, #24]
 8021968:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802196c:	445b      	add	r3, fp
 802196e:	9306      	str	r3, [sp, #24]
 8021970:	2300      	movs	r3, #0
 8021972:	9a07      	ldr	r2, [sp, #28]
 8021974:	2a09      	cmp	r2, #9
 8021976:	d849      	bhi.n	8021a0c <_dtoa_r+0x28c>
 8021978:	2a05      	cmp	r2, #5
 802197a:	bfc4      	itt	gt
 802197c:	3a04      	subgt	r2, #4
 802197e:	9207      	strgt	r2, [sp, #28]
 8021980:	9a07      	ldr	r2, [sp, #28]
 8021982:	f1a2 0202 	sub.w	r2, r2, #2
 8021986:	bfcc      	ite	gt
 8021988:	2400      	movgt	r4, #0
 802198a:	2401      	movle	r4, #1
 802198c:	2a03      	cmp	r2, #3
 802198e:	d848      	bhi.n	8021a22 <_dtoa_r+0x2a2>
 8021990:	e8df f002 	tbb	[pc, r2]
 8021994:	3a2c2e0b 	.word	0x3a2c2e0b
 8021998:	9b05      	ldr	r3, [sp, #20]
 802199a:	2200      	movs	r2, #0
 802199c:	eba3 030b 	sub.w	r3, r3, fp
 80219a0:	9305      	str	r3, [sp, #20]
 80219a2:	920e      	str	r2, [sp, #56]	; 0x38
 80219a4:	f1cb 0300 	rsb	r3, fp, #0
 80219a8:	e7e3      	b.n	8021972 <_dtoa_r+0x1f2>
 80219aa:	2200      	movs	r2, #0
 80219ac:	9208      	str	r2, [sp, #32]
 80219ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219b0:	2a00      	cmp	r2, #0
 80219b2:	dc39      	bgt.n	8021a28 <_dtoa_r+0x2a8>
 80219b4:	f04f 0a01 	mov.w	sl, #1
 80219b8:	46d1      	mov	r9, sl
 80219ba:	4652      	mov	r2, sl
 80219bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80219c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80219c2:	2100      	movs	r1, #0
 80219c4:	6079      	str	r1, [r7, #4]
 80219c6:	2004      	movs	r0, #4
 80219c8:	f100 0c14 	add.w	ip, r0, #20
 80219cc:	4594      	cmp	ip, r2
 80219ce:	6879      	ldr	r1, [r7, #4]
 80219d0:	d92f      	bls.n	8021a32 <_dtoa_r+0x2b2>
 80219d2:	4630      	mov	r0, r6
 80219d4:	930c      	str	r3, [sp, #48]	; 0x30
 80219d6:	f000 fe93 	bl	8022700 <_Balloc>
 80219da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80219dc:	9000      	str	r0, [sp, #0]
 80219de:	4602      	mov	r2, r0
 80219e0:	2800      	cmp	r0, #0
 80219e2:	d149      	bne.n	8021a78 <_dtoa_r+0x2f8>
 80219e4:	4b23      	ldr	r3, [pc, #140]	; (8021a74 <_dtoa_r+0x2f4>)
 80219e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80219ea:	e6df      	b.n	80217ac <_dtoa_r+0x2c>
 80219ec:	2201      	movs	r2, #1
 80219ee:	e7dd      	b.n	80219ac <_dtoa_r+0x22c>
 80219f0:	2200      	movs	r2, #0
 80219f2:	9208      	str	r2, [sp, #32]
 80219f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219f6:	eb0b 0a02 	add.w	sl, fp, r2
 80219fa:	f10a 0901 	add.w	r9, sl, #1
 80219fe:	464a      	mov	r2, r9
 8021a00:	2a01      	cmp	r2, #1
 8021a02:	bfb8      	it	lt
 8021a04:	2201      	movlt	r2, #1
 8021a06:	e7db      	b.n	80219c0 <_dtoa_r+0x240>
 8021a08:	2201      	movs	r2, #1
 8021a0a:	e7f2      	b.n	80219f2 <_dtoa_r+0x272>
 8021a0c:	2401      	movs	r4, #1
 8021a0e:	2200      	movs	r2, #0
 8021a10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8021a14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8021a18:	2100      	movs	r1, #0
 8021a1a:	46d1      	mov	r9, sl
 8021a1c:	2212      	movs	r2, #18
 8021a1e:	9109      	str	r1, [sp, #36]	; 0x24
 8021a20:	e7ce      	b.n	80219c0 <_dtoa_r+0x240>
 8021a22:	2201      	movs	r2, #1
 8021a24:	9208      	str	r2, [sp, #32]
 8021a26:	e7f5      	b.n	8021a14 <_dtoa_r+0x294>
 8021a28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8021a2c:	46d1      	mov	r9, sl
 8021a2e:	4652      	mov	r2, sl
 8021a30:	e7c6      	b.n	80219c0 <_dtoa_r+0x240>
 8021a32:	3101      	adds	r1, #1
 8021a34:	6079      	str	r1, [r7, #4]
 8021a36:	0040      	lsls	r0, r0, #1
 8021a38:	e7c6      	b.n	80219c8 <_dtoa_r+0x248>
 8021a3a:	bf00      	nop
 8021a3c:	f3af 8000 	nop.w
 8021a40:	636f4361 	.word	0x636f4361
 8021a44:	3fd287a7 	.word	0x3fd287a7
 8021a48:	8b60c8b3 	.word	0x8b60c8b3
 8021a4c:	3fc68a28 	.word	0x3fc68a28
 8021a50:	509f79fb 	.word	0x509f79fb
 8021a54:	3fd34413 	.word	0x3fd34413
 8021a58:	08027d00 	.word	0x08027d00
 8021a5c:	08027dbf 	.word	0x08027dbf
 8021a60:	7ff00000 	.word	0x7ff00000
 8021a64:	08027dbb 	.word	0x08027dbb
 8021a68:	08027db2 	.word	0x08027db2
 8021a6c:	08027cdd 	.word	0x08027cdd
 8021a70:	08027f18 	.word	0x08027f18
 8021a74:	08027e1e 	.word	0x08027e1e
 8021a78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8021a7a:	9900      	ldr	r1, [sp, #0]
 8021a7c:	6011      	str	r1, [r2, #0]
 8021a7e:	f1b9 0f0e 	cmp.w	r9, #14
 8021a82:	d872      	bhi.n	8021b6a <_dtoa_r+0x3ea>
 8021a84:	2c00      	cmp	r4, #0
 8021a86:	d070      	beq.n	8021b6a <_dtoa_r+0x3ea>
 8021a88:	f1bb 0f00 	cmp.w	fp, #0
 8021a8c:	f340 80a6 	ble.w	8021bdc <_dtoa_r+0x45c>
 8021a90:	49ca      	ldr	r1, [pc, #808]	; (8021dbc <_dtoa_r+0x63c>)
 8021a92:	f00b 020f 	and.w	r2, fp, #15
 8021a96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8021a9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8021a9e:	ed92 7b00 	vldr	d7, [r2]
 8021aa2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8021aa6:	f000 808d 	beq.w	8021bc4 <_dtoa_r+0x444>
 8021aaa:	4ac5      	ldr	r2, [pc, #788]	; (8021dc0 <_dtoa_r+0x640>)
 8021aac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8021ab0:	ed92 6b08 	vldr	d6, [r2, #32]
 8021ab4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8021ab8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021abc:	f001 010f 	and.w	r1, r1, #15
 8021ac0:	2203      	movs	r2, #3
 8021ac2:	48bf      	ldr	r0, [pc, #764]	; (8021dc0 <_dtoa_r+0x640>)
 8021ac4:	2900      	cmp	r1, #0
 8021ac6:	d17f      	bne.n	8021bc8 <_dtoa_r+0x448>
 8021ac8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021acc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021ad4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021ad6:	2900      	cmp	r1, #0
 8021ad8:	f000 80b2 	beq.w	8021c40 <_dtoa_r+0x4c0>
 8021adc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021ae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aec:	f140 80a8 	bpl.w	8021c40 <_dtoa_r+0x4c0>
 8021af0:	f1b9 0f00 	cmp.w	r9, #0
 8021af4:	f000 80a4 	beq.w	8021c40 <_dtoa_r+0x4c0>
 8021af8:	f1ba 0f00 	cmp.w	sl, #0
 8021afc:	dd31      	ble.n	8021b62 <_dtoa_r+0x3e2>
 8021afe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8021b02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021b06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021b0a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8021b0e:	3201      	adds	r2, #1
 8021b10:	4650      	mov	r0, sl
 8021b12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021b16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8021b1a:	ee07 2a90 	vmov	s15, r2
 8021b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021b22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021b26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8021b2a:	9c03      	ldr	r4, [sp, #12]
 8021b2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8021b30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8021b34:	2800      	cmp	r0, #0
 8021b36:	f040 8086 	bne.w	8021c46 <_dtoa_r+0x4c6>
 8021b3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021b3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021b42:	ec42 1b17 	vmov	d7, r1, r2
 8021b46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b4e:	f300 8272 	bgt.w	8022036 <_dtoa_r+0x8b6>
 8021b52:	eeb1 7b47 	vneg.f64	d7, d7
 8021b56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b5e:	f100 8267 	bmi.w	8022030 <_dtoa_r+0x8b0>
 8021b62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8021b66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8021b6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021b6c:	2a00      	cmp	r2, #0
 8021b6e:	f2c0 8129 	blt.w	8021dc4 <_dtoa_r+0x644>
 8021b72:	f1bb 0f0e 	cmp.w	fp, #14
 8021b76:	f300 8125 	bgt.w	8021dc4 <_dtoa_r+0x644>
 8021b7a:	4b90      	ldr	r3, [pc, #576]	; (8021dbc <_dtoa_r+0x63c>)
 8021b7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021b80:	ed93 6b00 	vldr	d6, [r3]
 8021b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	f280 80c3 	bge.w	8021d12 <_dtoa_r+0x592>
 8021b8c:	f1b9 0f00 	cmp.w	r9, #0
 8021b90:	f300 80bf 	bgt.w	8021d12 <_dtoa_r+0x592>
 8021b94:	f040 824c 	bne.w	8022030 <_dtoa_r+0x8b0>
 8021b98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021b9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8021ba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021ba4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bac:	464c      	mov	r4, r9
 8021bae:	464f      	mov	r7, r9
 8021bb0:	f280 8222 	bge.w	8021ff8 <_dtoa_r+0x878>
 8021bb4:	f8dd 8000 	ldr.w	r8, [sp]
 8021bb8:	2331      	movs	r3, #49	; 0x31
 8021bba:	f808 3b01 	strb.w	r3, [r8], #1
 8021bbe:	f10b 0b01 	add.w	fp, fp, #1
 8021bc2:	e21e      	b.n	8022002 <_dtoa_r+0x882>
 8021bc4:	2202      	movs	r2, #2
 8021bc6:	e77c      	b.n	8021ac2 <_dtoa_r+0x342>
 8021bc8:	07cc      	lsls	r4, r1, #31
 8021bca:	d504      	bpl.n	8021bd6 <_dtoa_r+0x456>
 8021bcc:	ed90 6b00 	vldr	d6, [r0]
 8021bd0:	3201      	adds	r2, #1
 8021bd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021bd6:	1049      	asrs	r1, r1, #1
 8021bd8:	3008      	adds	r0, #8
 8021bda:	e773      	b.n	8021ac4 <_dtoa_r+0x344>
 8021bdc:	d02e      	beq.n	8021c3c <_dtoa_r+0x4bc>
 8021bde:	f1cb 0100 	rsb	r1, fp, #0
 8021be2:	4a76      	ldr	r2, [pc, #472]	; (8021dbc <_dtoa_r+0x63c>)
 8021be4:	f001 000f 	and.w	r0, r1, #15
 8021be8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021bec:	ed92 7b00 	vldr	d7, [r2]
 8021bf0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8021bf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021bf8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021bfc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8021c00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8021c04:	486e      	ldr	r0, [pc, #440]	; (8021dc0 <_dtoa_r+0x640>)
 8021c06:	1109      	asrs	r1, r1, #4
 8021c08:	2400      	movs	r4, #0
 8021c0a:	2202      	movs	r2, #2
 8021c0c:	b939      	cbnz	r1, 8021c1e <_dtoa_r+0x49e>
 8021c0e:	2c00      	cmp	r4, #0
 8021c10:	f43f af60 	beq.w	8021ad4 <_dtoa_r+0x354>
 8021c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021c1c:	e75a      	b.n	8021ad4 <_dtoa_r+0x354>
 8021c1e:	07cf      	lsls	r7, r1, #31
 8021c20:	d509      	bpl.n	8021c36 <_dtoa_r+0x4b6>
 8021c22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8021c26:	ed90 7b00 	vldr	d7, [r0]
 8021c2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021c2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021c32:	3201      	adds	r2, #1
 8021c34:	2401      	movs	r4, #1
 8021c36:	1049      	asrs	r1, r1, #1
 8021c38:	3008      	adds	r0, #8
 8021c3a:	e7e7      	b.n	8021c0c <_dtoa_r+0x48c>
 8021c3c:	2202      	movs	r2, #2
 8021c3e:	e749      	b.n	8021ad4 <_dtoa_r+0x354>
 8021c40:	465f      	mov	r7, fp
 8021c42:	4648      	mov	r0, r9
 8021c44:	e765      	b.n	8021b12 <_dtoa_r+0x392>
 8021c46:	ec42 1b17 	vmov	d7, r1, r2
 8021c4a:	4a5c      	ldr	r2, [pc, #368]	; (8021dbc <_dtoa_r+0x63c>)
 8021c4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021c50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8021c54:	9a00      	ldr	r2, [sp, #0]
 8021c56:	1814      	adds	r4, r2, r0
 8021c58:	9a08      	ldr	r2, [sp, #32]
 8021c5a:	b352      	cbz	r2, 8021cb2 <_dtoa_r+0x532>
 8021c5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8021c60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021c64:	f8dd 8000 	ldr.w	r8, [sp]
 8021c68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021c6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021c70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021c74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021c78:	ee14 2a90 	vmov	r2, s9
 8021c7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021c80:	3230      	adds	r2, #48	; 0x30
 8021c82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021c86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c8e:	f808 2b01 	strb.w	r2, [r8], #1
 8021c92:	d439      	bmi.n	8021d08 <_dtoa_r+0x588>
 8021c94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021c98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ca0:	d472      	bmi.n	8021d88 <_dtoa_r+0x608>
 8021ca2:	45a0      	cmp	r8, r4
 8021ca4:	f43f af5d 	beq.w	8021b62 <_dtoa_r+0x3e2>
 8021ca8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021cac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021cb0:	e7e0      	b.n	8021c74 <_dtoa_r+0x4f4>
 8021cb2:	f8dd 8000 	ldr.w	r8, [sp]
 8021cb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021cba:	4621      	mov	r1, r4
 8021cbc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021cc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021cc4:	ee14 2a90 	vmov	r2, s9
 8021cc8:	3230      	adds	r2, #48	; 0x30
 8021cca:	f808 2b01 	strb.w	r2, [r8], #1
 8021cce:	45a0      	cmp	r8, r4
 8021cd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021cd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021cd8:	d118      	bne.n	8021d0c <_dtoa_r+0x58c>
 8021cda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021cde:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021ce2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cea:	dc4d      	bgt.n	8021d88 <_dtoa_r+0x608>
 8021cec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021cf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cf8:	f57f af33 	bpl.w	8021b62 <_dtoa_r+0x3e2>
 8021cfc:	4688      	mov	r8, r1
 8021cfe:	3901      	subs	r1, #1
 8021d00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021d04:	2b30      	cmp	r3, #48	; 0x30
 8021d06:	d0f9      	beq.n	8021cfc <_dtoa_r+0x57c>
 8021d08:	46bb      	mov	fp, r7
 8021d0a:	e02a      	b.n	8021d62 <_dtoa_r+0x5e2>
 8021d0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021d10:	e7d6      	b.n	8021cc0 <_dtoa_r+0x540>
 8021d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021d16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8021d1a:	f8dd 8000 	ldr.w	r8, [sp]
 8021d1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8021d22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8021d26:	ee15 3a10 	vmov	r3, s10
 8021d2a:	3330      	adds	r3, #48	; 0x30
 8021d2c:	f808 3b01 	strb.w	r3, [r8], #1
 8021d30:	9b00      	ldr	r3, [sp, #0]
 8021d32:	eba8 0303 	sub.w	r3, r8, r3
 8021d36:	4599      	cmp	r9, r3
 8021d38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021d3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021d40:	d133      	bne.n	8021daa <_dtoa_r+0x62a>
 8021d42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021d46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d4e:	dc1a      	bgt.n	8021d86 <_dtoa_r+0x606>
 8021d50:	eeb4 7b46 	vcmp.f64	d7, d6
 8021d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d58:	d103      	bne.n	8021d62 <_dtoa_r+0x5e2>
 8021d5a:	ee15 3a10 	vmov	r3, s10
 8021d5e:	07d9      	lsls	r1, r3, #31
 8021d60:	d411      	bmi.n	8021d86 <_dtoa_r+0x606>
 8021d62:	4629      	mov	r1, r5
 8021d64:	4630      	mov	r0, r6
 8021d66:	f000 fd0b 	bl	8022780 <_Bfree>
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021d6e:	f888 3000 	strb.w	r3, [r8]
 8021d72:	f10b 0301 	add.w	r3, fp, #1
 8021d76:	6013      	str	r3, [r2, #0]
 8021d78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	f43f ad4d 	beq.w	802181a <_dtoa_r+0x9a>
 8021d80:	f8c3 8000 	str.w	r8, [r3]
 8021d84:	e549      	b.n	802181a <_dtoa_r+0x9a>
 8021d86:	465f      	mov	r7, fp
 8021d88:	4643      	mov	r3, r8
 8021d8a:	4698      	mov	r8, r3
 8021d8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021d90:	2a39      	cmp	r2, #57	; 0x39
 8021d92:	d106      	bne.n	8021da2 <_dtoa_r+0x622>
 8021d94:	9a00      	ldr	r2, [sp, #0]
 8021d96:	429a      	cmp	r2, r3
 8021d98:	d1f7      	bne.n	8021d8a <_dtoa_r+0x60a>
 8021d9a:	9900      	ldr	r1, [sp, #0]
 8021d9c:	2230      	movs	r2, #48	; 0x30
 8021d9e:	3701      	adds	r7, #1
 8021da0:	700a      	strb	r2, [r1, #0]
 8021da2:	781a      	ldrb	r2, [r3, #0]
 8021da4:	3201      	adds	r2, #1
 8021da6:	701a      	strb	r2, [r3, #0]
 8021da8:	e7ae      	b.n	8021d08 <_dtoa_r+0x588>
 8021daa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021dae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021db6:	d1b2      	bne.n	8021d1e <_dtoa_r+0x59e>
 8021db8:	e7d3      	b.n	8021d62 <_dtoa_r+0x5e2>
 8021dba:	bf00      	nop
 8021dbc:	08027f18 	.word	0x08027f18
 8021dc0:	08027ef0 	.word	0x08027ef0
 8021dc4:	9908      	ldr	r1, [sp, #32]
 8021dc6:	2900      	cmp	r1, #0
 8021dc8:	f000 80d1 	beq.w	8021f6e <_dtoa_r+0x7ee>
 8021dcc:	9907      	ldr	r1, [sp, #28]
 8021dce:	2901      	cmp	r1, #1
 8021dd0:	f300 80b4 	bgt.w	8021f3c <_dtoa_r+0x7bc>
 8021dd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021dd6:	2900      	cmp	r1, #0
 8021dd8:	f000 80ac 	beq.w	8021f34 <_dtoa_r+0x7b4>
 8021ddc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021de0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021de4:	461c      	mov	r4, r3
 8021de6:	930a      	str	r3, [sp, #40]	; 0x28
 8021de8:	9b05      	ldr	r3, [sp, #20]
 8021dea:	4413      	add	r3, r2
 8021dec:	9305      	str	r3, [sp, #20]
 8021dee:	9b06      	ldr	r3, [sp, #24]
 8021df0:	2101      	movs	r1, #1
 8021df2:	4413      	add	r3, r2
 8021df4:	4630      	mov	r0, r6
 8021df6:	9306      	str	r3, [sp, #24]
 8021df8:	f000 fd7e 	bl	80228f8 <__i2b>
 8021dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021dfe:	4607      	mov	r7, r0
 8021e00:	f1b8 0f00 	cmp.w	r8, #0
 8021e04:	dd0d      	ble.n	8021e22 <_dtoa_r+0x6a2>
 8021e06:	9a06      	ldr	r2, [sp, #24]
 8021e08:	2a00      	cmp	r2, #0
 8021e0a:	dd0a      	ble.n	8021e22 <_dtoa_r+0x6a2>
 8021e0c:	4542      	cmp	r2, r8
 8021e0e:	9905      	ldr	r1, [sp, #20]
 8021e10:	bfa8      	it	ge
 8021e12:	4642      	movge	r2, r8
 8021e14:	1a89      	subs	r1, r1, r2
 8021e16:	9105      	str	r1, [sp, #20]
 8021e18:	9906      	ldr	r1, [sp, #24]
 8021e1a:	eba8 0802 	sub.w	r8, r8, r2
 8021e1e:	1a8a      	subs	r2, r1, r2
 8021e20:	9206      	str	r2, [sp, #24]
 8021e22:	b303      	cbz	r3, 8021e66 <_dtoa_r+0x6e6>
 8021e24:	9a08      	ldr	r2, [sp, #32]
 8021e26:	2a00      	cmp	r2, #0
 8021e28:	f000 80a6 	beq.w	8021f78 <_dtoa_r+0x7f8>
 8021e2c:	2c00      	cmp	r4, #0
 8021e2e:	dd13      	ble.n	8021e58 <_dtoa_r+0x6d8>
 8021e30:	4639      	mov	r1, r7
 8021e32:	4622      	mov	r2, r4
 8021e34:	4630      	mov	r0, r6
 8021e36:	930c      	str	r3, [sp, #48]	; 0x30
 8021e38:	f000 fe1a 	bl	8022a70 <__pow5mult>
 8021e3c:	462a      	mov	r2, r5
 8021e3e:	4601      	mov	r1, r0
 8021e40:	4607      	mov	r7, r0
 8021e42:	4630      	mov	r0, r6
 8021e44:	f000 fd6e 	bl	8022924 <__multiply>
 8021e48:	4629      	mov	r1, r5
 8021e4a:	900a      	str	r0, [sp, #40]	; 0x28
 8021e4c:	4630      	mov	r0, r6
 8021e4e:	f000 fc97 	bl	8022780 <_Bfree>
 8021e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e56:	4615      	mov	r5, r2
 8021e58:	1b1a      	subs	r2, r3, r4
 8021e5a:	d004      	beq.n	8021e66 <_dtoa_r+0x6e6>
 8021e5c:	4629      	mov	r1, r5
 8021e5e:	4630      	mov	r0, r6
 8021e60:	f000 fe06 	bl	8022a70 <__pow5mult>
 8021e64:	4605      	mov	r5, r0
 8021e66:	2101      	movs	r1, #1
 8021e68:	4630      	mov	r0, r6
 8021e6a:	f000 fd45 	bl	80228f8 <__i2b>
 8021e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	4604      	mov	r4, r0
 8021e74:	f340 8082 	ble.w	8021f7c <_dtoa_r+0x7fc>
 8021e78:	461a      	mov	r2, r3
 8021e7a:	4601      	mov	r1, r0
 8021e7c:	4630      	mov	r0, r6
 8021e7e:	f000 fdf7 	bl	8022a70 <__pow5mult>
 8021e82:	9b07      	ldr	r3, [sp, #28]
 8021e84:	2b01      	cmp	r3, #1
 8021e86:	4604      	mov	r4, r0
 8021e88:	dd7b      	ble.n	8021f82 <_dtoa_r+0x802>
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8021e8e:	6922      	ldr	r2, [r4, #16]
 8021e90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021e94:	6910      	ldr	r0, [r2, #16]
 8021e96:	f000 fcdf 	bl	8022858 <__hi0bits>
 8021e9a:	f1c0 0020 	rsb	r0, r0, #32
 8021e9e:	9b06      	ldr	r3, [sp, #24]
 8021ea0:	4418      	add	r0, r3
 8021ea2:	f010 001f 	ands.w	r0, r0, #31
 8021ea6:	f000 808d 	beq.w	8021fc4 <_dtoa_r+0x844>
 8021eaa:	f1c0 0220 	rsb	r2, r0, #32
 8021eae:	2a04      	cmp	r2, #4
 8021eb0:	f340 8086 	ble.w	8021fc0 <_dtoa_r+0x840>
 8021eb4:	f1c0 001c 	rsb	r0, r0, #28
 8021eb8:	9b05      	ldr	r3, [sp, #20]
 8021eba:	4403      	add	r3, r0
 8021ebc:	9305      	str	r3, [sp, #20]
 8021ebe:	9b06      	ldr	r3, [sp, #24]
 8021ec0:	4403      	add	r3, r0
 8021ec2:	4480      	add	r8, r0
 8021ec4:	9306      	str	r3, [sp, #24]
 8021ec6:	9b05      	ldr	r3, [sp, #20]
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	dd05      	ble.n	8021ed8 <_dtoa_r+0x758>
 8021ecc:	4629      	mov	r1, r5
 8021ece:	461a      	mov	r2, r3
 8021ed0:	4630      	mov	r0, r6
 8021ed2:	f000 fe27 	bl	8022b24 <__lshift>
 8021ed6:	4605      	mov	r5, r0
 8021ed8:	9b06      	ldr	r3, [sp, #24]
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	dd05      	ble.n	8021eea <_dtoa_r+0x76a>
 8021ede:	4621      	mov	r1, r4
 8021ee0:	461a      	mov	r2, r3
 8021ee2:	4630      	mov	r0, r6
 8021ee4:	f000 fe1e 	bl	8022b24 <__lshift>
 8021ee8:	4604      	mov	r4, r0
 8021eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021eec:	2b00      	cmp	r3, #0
 8021eee:	d06b      	beq.n	8021fc8 <_dtoa_r+0x848>
 8021ef0:	4621      	mov	r1, r4
 8021ef2:	4628      	mov	r0, r5
 8021ef4:	f000 fe82 	bl	8022bfc <__mcmp>
 8021ef8:	2800      	cmp	r0, #0
 8021efa:	da65      	bge.n	8021fc8 <_dtoa_r+0x848>
 8021efc:	2300      	movs	r3, #0
 8021efe:	4629      	mov	r1, r5
 8021f00:	220a      	movs	r2, #10
 8021f02:	4630      	mov	r0, r6
 8021f04:	f000 fc5e 	bl	80227c4 <__multadd>
 8021f08:	9b08      	ldr	r3, [sp, #32]
 8021f0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021f0e:	4605      	mov	r5, r0
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	f000 8192 	beq.w	802223a <_dtoa_r+0xaba>
 8021f16:	4639      	mov	r1, r7
 8021f18:	2300      	movs	r3, #0
 8021f1a:	220a      	movs	r2, #10
 8021f1c:	4630      	mov	r0, r6
 8021f1e:	f000 fc51 	bl	80227c4 <__multadd>
 8021f22:	f1ba 0f00 	cmp.w	sl, #0
 8021f26:	4607      	mov	r7, r0
 8021f28:	f300 808e 	bgt.w	8022048 <_dtoa_r+0x8c8>
 8021f2c:	9b07      	ldr	r3, [sp, #28]
 8021f2e:	2b02      	cmp	r3, #2
 8021f30:	dc51      	bgt.n	8021fd6 <_dtoa_r+0x856>
 8021f32:	e089      	b.n	8022048 <_dtoa_r+0x8c8>
 8021f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8021f3a:	e751      	b.n	8021de0 <_dtoa_r+0x660>
 8021f3c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8021f40:	42a3      	cmp	r3, r4
 8021f42:	bfbf      	itttt	lt
 8021f44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8021f46:	1ae3      	sublt	r3, r4, r3
 8021f48:	18d2      	addlt	r2, r2, r3
 8021f4a:	4613      	movlt	r3, r2
 8021f4c:	bfb7      	itett	lt
 8021f4e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021f50:	1b1c      	subge	r4, r3, r4
 8021f52:	4623      	movlt	r3, r4
 8021f54:	2400      	movlt	r4, #0
 8021f56:	f1b9 0f00 	cmp.w	r9, #0
 8021f5a:	bfb5      	itete	lt
 8021f5c:	9a05      	ldrlt	r2, [sp, #20]
 8021f5e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8021f62:	eba2 0809 	sublt.w	r8, r2, r9
 8021f66:	464a      	movge	r2, r9
 8021f68:	bfb8      	it	lt
 8021f6a:	2200      	movlt	r2, #0
 8021f6c:	e73b      	b.n	8021de6 <_dtoa_r+0x666>
 8021f6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021f72:	9f08      	ldr	r7, [sp, #32]
 8021f74:	461c      	mov	r4, r3
 8021f76:	e743      	b.n	8021e00 <_dtoa_r+0x680>
 8021f78:	461a      	mov	r2, r3
 8021f7a:	e76f      	b.n	8021e5c <_dtoa_r+0x6dc>
 8021f7c:	9b07      	ldr	r3, [sp, #28]
 8021f7e:	2b01      	cmp	r3, #1
 8021f80:	dc18      	bgt.n	8021fb4 <_dtoa_r+0x834>
 8021f82:	9b02      	ldr	r3, [sp, #8]
 8021f84:	b9b3      	cbnz	r3, 8021fb4 <_dtoa_r+0x834>
 8021f86:	9b03      	ldr	r3, [sp, #12]
 8021f88:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021f8c:	b9a2      	cbnz	r2, 8021fb8 <_dtoa_r+0x838>
 8021f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021f92:	0d12      	lsrs	r2, r2, #20
 8021f94:	0512      	lsls	r2, r2, #20
 8021f96:	b18a      	cbz	r2, 8021fbc <_dtoa_r+0x83c>
 8021f98:	9b05      	ldr	r3, [sp, #20]
 8021f9a:	3301      	adds	r3, #1
 8021f9c:	9305      	str	r3, [sp, #20]
 8021f9e:	9b06      	ldr	r3, [sp, #24]
 8021fa0:	3301      	adds	r3, #1
 8021fa2:	9306      	str	r3, [sp, #24]
 8021fa4:	2301      	movs	r3, #1
 8021fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8021fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	f47f af6f 	bne.w	8021e8e <_dtoa_r+0x70e>
 8021fb0:	2001      	movs	r0, #1
 8021fb2:	e774      	b.n	8021e9e <_dtoa_r+0x71e>
 8021fb4:	2300      	movs	r3, #0
 8021fb6:	e7f6      	b.n	8021fa6 <_dtoa_r+0x826>
 8021fb8:	9b02      	ldr	r3, [sp, #8]
 8021fba:	e7f4      	b.n	8021fa6 <_dtoa_r+0x826>
 8021fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8021fbe:	e7f3      	b.n	8021fa8 <_dtoa_r+0x828>
 8021fc0:	d081      	beq.n	8021ec6 <_dtoa_r+0x746>
 8021fc2:	4610      	mov	r0, r2
 8021fc4:	301c      	adds	r0, #28
 8021fc6:	e777      	b.n	8021eb8 <_dtoa_r+0x738>
 8021fc8:	f1b9 0f00 	cmp.w	r9, #0
 8021fcc:	dc37      	bgt.n	802203e <_dtoa_r+0x8be>
 8021fce:	9b07      	ldr	r3, [sp, #28]
 8021fd0:	2b02      	cmp	r3, #2
 8021fd2:	dd34      	ble.n	802203e <_dtoa_r+0x8be>
 8021fd4:	46ca      	mov	sl, r9
 8021fd6:	f1ba 0f00 	cmp.w	sl, #0
 8021fda:	d10d      	bne.n	8021ff8 <_dtoa_r+0x878>
 8021fdc:	4621      	mov	r1, r4
 8021fde:	4653      	mov	r3, sl
 8021fe0:	2205      	movs	r2, #5
 8021fe2:	4630      	mov	r0, r6
 8021fe4:	f000 fbee 	bl	80227c4 <__multadd>
 8021fe8:	4601      	mov	r1, r0
 8021fea:	4604      	mov	r4, r0
 8021fec:	4628      	mov	r0, r5
 8021fee:	f000 fe05 	bl	8022bfc <__mcmp>
 8021ff2:	2800      	cmp	r0, #0
 8021ff4:	f73f adde 	bgt.w	8021bb4 <_dtoa_r+0x434>
 8021ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ffa:	f8dd 8000 	ldr.w	r8, [sp]
 8021ffe:	ea6f 0b03 	mvn.w	fp, r3
 8022002:	f04f 0900 	mov.w	r9, #0
 8022006:	4621      	mov	r1, r4
 8022008:	4630      	mov	r0, r6
 802200a:	f000 fbb9 	bl	8022780 <_Bfree>
 802200e:	2f00      	cmp	r7, #0
 8022010:	f43f aea7 	beq.w	8021d62 <_dtoa_r+0x5e2>
 8022014:	f1b9 0f00 	cmp.w	r9, #0
 8022018:	d005      	beq.n	8022026 <_dtoa_r+0x8a6>
 802201a:	45b9      	cmp	r9, r7
 802201c:	d003      	beq.n	8022026 <_dtoa_r+0x8a6>
 802201e:	4649      	mov	r1, r9
 8022020:	4630      	mov	r0, r6
 8022022:	f000 fbad 	bl	8022780 <_Bfree>
 8022026:	4639      	mov	r1, r7
 8022028:	4630      	mov	r0, r6
 802202a:	f000 fba9 	bl	8022780 <_Bfree>
 802202e:	e698      	b.n	8021d62 <_dtoa_r+0x5e2>
 8022030:	2400      	movs	r4, #0
 8022032:	4627      	mov	r7, r4
 8022034:	e7e0      	b.n	8021ff8 <_dtoa_r+0x878>
 8022036:	46bb      	mov	fp, r7
 8022038:	4604      	mov	r4, r0
 802203a:	4607      	mov	r7, r0
 802203c:	e5ba      	b.n	8021bb4 <_dtoa_r+0x434>
 802203e:	9b08      	ldr	r3, [sp, #32]
 8022040:	46ca      	mov	sl, r9
 8022042:	2b00      	cmp	r3, #0
 8022044:	f000 8100 	beq.w	8022248 <_dtoa_r+0xac8>
 8022048:	f1b8 0f00 	cmp.w	r8, #0
 802204c:	dd05      	ble.n	802205a <_dtoa_r+0x8da>
 802204e:	4639      	mov	r1, r7
 8022050:	4642      	mov	r2, r8
 8022052:	4630      	mov	r0, r6
 8022054:	f000 fd66 	bl	8022b24 <__lshift>
 8022058:	4607      	mov	r7, r0
 802205a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802205c:	2b00      	cmp	r3, #0
 802205e:	d05d      	beq.n	802211c <_dtoa_r+0x99c>
 8022060:	6879      	ldr	r1, [r7, #4]
 8022062:	4630      	mov	r0, r6
 8022064:	f000 fb4c 	bl	8022700 <_Balloc>
 8022068:	4680      	mov	r8, r0
 802206a:	b928      	cbnz	r0, 8022078 <_dtoa_r+0x8f8>
 802206c:	4b82      	ldr	r3, [pc, #520]	; (8022278 <_dtoa_r+0xaf8>)
 802206e:	4602      	mov	r2, r0
 8022070:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022074:	f7ff bb9a 	b.w	80217ac <_dtoa_r+0x2c>
 8022078:	693a      	ldr	r2, [r7, #16]
 802207a:	3202      	adds	r2, #2
 802207c:	0092      	lsls	r2, r2, #2
 802207e:	f107 010c 	add.w	r1, r7, #12
 8022082:	300c      	adds	r0, #12
 8022084:	f7fe fc60 	bl	8020948 <memcpy>
 8022088:	2201      	movs	r2, #1
 802208a:	4641      	mov	r1, r8
 802208c:	4630      	mov	r0, r6
 802208e:	f000 fd49 	bl	8022b24 <__lshift>
 8022092:	9b00      	ldr	r3, [sp, #0]
 8022094:	3301      	adds	r3, #1
 8022096:	9305      	str	r3, [sp, #20]
 8022098:	9b00      	ldr	r3, [sp, #0]
 802209a:	4453      	add	r3, sl
 802209c:	9309      	str	r3, [sp, #36]	; 0x24
 802209e:	9b02      	ldr	r3, [sp, #8]
 80220a0:	f003 0301 	and.w	r3, r3, #1
 80220a4:	46b9      	mov	r9, r7
 80220a6:	9308      	str	r3, [sp, #32]
 80220a8:	4607      	mov	r7, r0
 80220aa:	9b05      	ldr	r3, [sp, #20]
 80220ac:	4621      	mov	r1, r4
 80220ae:	3b01      	subs	r3, #1
 80220b0:	4628      	mov	r0, r5
 80220b2:	9302      	str	r3, [sp, #8]
 80220b4:	f7ff fad6 	bl	8021664 <quorem>
 80220b8:	4603      	mov	r3, r0
 80220ba:	3330      	adds	r3, #48	; 0x30
 80220bc:	9006      	str	r0, [sp, #24]
 80220be:	4649      	mov	r1, r9
 80220c0:	4628      	mov	r0, r5
 80220c2:	930a      	str	r3, [sp, #40]	; 0x28
 80220c4:	f000 fd9a 	bl	8022bfc <__mcmp>
 80220c8:	463a      	mov	r2, r7
 80220ca:	4682      	mov	sl, r0
 80220cc:	4621      	mov	r1, r4
 80220ce:	4630      	mov	r0, r6
 80220d0:	f000 fdb0 	bl	8022c34 <__mdiff>
 80220d4:	68c2      	ldr	r2, [r0, #12]
 80220d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220d8:	4680      	mov	r8, r0
 80220da:	bb0a      	cbnz	r2, 8022120 <_dtoa_r+0x9a0>
 80220dc:	4601      	mov	r1, r0
 80220de:	4628      	mov	r0, r5
 80220e0:	f000 fd8c 	bl	8022bfc <__mcmp>
 80220e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220e6:	4602      	mov	r2, r0
 80220e8:	4641      	mov	r1, r8
 80220ea:	4630      	mov	r0, r6
 80220ec:	920e      	str	r2, [sp, #56]	; 0x38
 80220ee:	930a      	str	r3, [sp, #40]	; 0x28
 80220f0:	f000 fb46 	bl	8022780 <_Bfree>
 80220f4:	9b07      	ldr	r3, [sp, #28]
 80220f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80220fc:	ea43 0102 	orr.w	r1, r3, r2
 8022100:	9b08      	ldr	r3, [sp, #32]
 8022102:	430b      	orrs	r3, r1
 8022104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022106:	d10d      	bne.n	8022124 <_dtoa_r+0x9a4>
 8022108:	2b39      	cmp	r3, #57	; 0x39
 802210a:	d029      	beq.n	8022160 <_dtoa_r+0x9e0>
 802210c:	f1ba 0f00 	cmp.w	sl, #0
 8022110:	dd01      	ble.n	8022116 <_dtoa_r+0x996>
 8022112:	9b06      	ldr	r3, [sp, #24]
 8022114:	3331      	adds	r3, #49	; 0x31
 8022116:	9a02      	ldr	r2, [sp, #8]
 8022118:	7013      	strb	r3, [r2, #0]
 802211a:	e774      	b.n	8022006 <_dtoa_r+0x886>
 802211c:	4638      	mov	r0, r7
 802211e:	e7b8      	b.n	8022092 <_dtoa_r+0x912>
 8022120:	2201      	movs	r2, #1
 8022122:	e7e1      	b.n	80220e8 <_dtoa_r+0x968>
 8022124:	f1ba 0f00 	cmp.w	sl, #0
 8022128:	db06      	blt.n	8022138 <_dtoa_r+0x9b8>
 802212a:	9907      	ldr	r1, [sp, #28]
 802212c:	ea41 0a0a 	orr.w	sl, r1, sl
 8022130:	9908      	ldr	r1, [sp, #32]
 8022132:	ea5a 0101 	orrs.w	r1, sl, r1
 8022136:	d120      	bne.n	802217a <_dtoa_r+0x9fa>
 8022138:	2a00      	cmp	r2, #0
 802213a:	ddec      	ble.n	8022116 <_dtoa_r+0x996>
 802213c:	4629      	mov	r1, r5
 802213e:	2201      	movs	r2, #1
 8022140:	4630      	mov	r0, r6
 8022142:	9305      	str	r3, [sp, #20]
 8022144:	f000 fcee 	bl	8022b24 <__lshift>
 8022148:	4621      	mov	r1, r4
 802214a:	4605      	mov	r5, r0
 802214c:	f000 fd56 	bl	8022bfc <__mcmp>
 8022150:	2800      	cmp	r0, #0
 8022152:	9b05      	ldr	r3, [sp, #20]
 8022154:	dc02      	bgt.n	802215c <_dtoa_r+0x9dc>
 8022156:	d1de      	bne.n	8022116 <_dtoa_r+0x996>
 8022158:	07da      	lsls	r2, r3, #31
 802215a:	d5dc      	bpl.n	8022116 <_dtoa_r+0x996>
 802215c:	2b39      	cmp	r3, #57	; 0x39
 802215e:	d1d8      	bne.n	8022112 <_dtoa_r+0x992>
 8022160:	9a02      	ldr	r2, [sp, #8]
 8022162:	2339      	movs	r3, #57	; 0x39
 8022164:	7013      	strb	r3, [r2, #0]
 8022166:	4643      	mov	r3, r8
 8022168:	4698      	mov	r8, r3
 802216a:	3b01      	subs	r3, #1
 802216c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8022170:	2a39      	cmp	r2, #57	; 0x39
 8022172:	d051      	beq.n	8022218 <_dtoa_r+0xa98>
 8022174:	3201      	adds	r2, #1
 8022176:	701a      	strb	r2, [r3, #0]
 8022178:	e745      	b.n	8022006 <_dtoa_r+0x886>
 802217a:	2a00      	cmp	r2, #0
 802217c:	dd03      	ble.n	8022186 <_dtoa_r+0xa06>
 802217e:	2b39      	cmp	r3, #57	; 0x39
 8022180:	d0ee      	beq.n	8022160 <_dtoa_r+0x9e0>
 8022182:	3301      	adds	r3, #1
 8022184:	e7c7      	b.n	8022116 <_dtoa_r+0x996>
 8022186:	9a05      	ldr	r2, [sp, #20]
 8022188:	9909      	ldr	r1, [sp, #36]	; 0x24
 802218a:	f802 3c01 	strb.w	r3, [r2, #-1]
 802218e:	428a      	cmp	r2, r1
 8022190:	d02b      	beq.n	80221ea <_dtoa_r+0xa6a>
 8022192:	4629      	mov	r1, r5
 8022194:	2300      	movs	r3, #0
 8022196:	220a      	movs	r2, #10
 8022198:	4630      	mov	r0, r6
 802219a:	f000 fb13 	bl	80227c4 <__multadd>
 802219e:	45b9      	cmp	r9, r7
 80221a0:	4605      	mov	r5, r0
 80221a2:	f04f 0300 	mov.w	r3, #0
 80221a6:	f04f 020a 	mov.w	r2, #10
 80221aa:	4649      	mov	r1, r9
 80221ac:	4630      	mov	r0, r6
 80221ae:	d107      	bne.n	80221c0 <_dtoa_r+0xa40>
 80221b0:	f000 fb08 	bl	80227c4 <__multadd>
 80221b4:	4681      	mov	r9, r0
 80221b6:	4607      	mov	r7, r0
 80221b8:	9b05      	ldr	r3, [sp, #20]
 80221ba:	3301      	adds	r3, #1
 80221bc:	9305      	str	r3, [sp, #20]
 80221be:	e774      	b.n	80220aa <_dtoa_r+0x92a>
 80221c0:	f000 fb00 	bl	80227c4 <__multadd>
 80221c4:	4639      	mov	r1, r7
 80221c6:	4681      	mov	r9, r0
 80221c8:	2300      	movs	r3, #0
 80221ca:	220a      	movs	r2, #10
 80221cc:	4630      	mov	r0, r6
 80221ce:	f000 faf9 	bl	80227c4 <__multadd>
 80221d2:	4607      	mov	r7, r0
 80221d4:	e7f0      	b.n	80221b8 <_dtoa_r+0xa38>
 80221d6:	f1ba 0f00 	cmp.w	sl, #0
 80221da:	9a00      	ldr	r2, [sp, #0]
 80221dc:	bfcc      	ite	gt
 80221de:	46d0      	movgt	r8, sl
 80221e0:	f04f 0801 	movle.w	r8, #1
 80221e4:	4490      	add	r8, r2
 80221e6:	f04f 0900 	mov.w	r9, #0
 80221ea:	4629      	mov	r1, r5
 80221ec:	2201      	movs	r2, #1
 80221ee:	4630      	mov	r0, r6
 80221f0:	9302      	str	r3, [sp, #8]
 80221f2:	f000 fc97 	bl	8022b24 <__lshift>
 80221f6:	4621      	mov	r1, r4
 80221f8:	4605      	mov	r5, r0
 80221fa:	f000 fcff 	bl	8022bfc <__mcmp>
 80221fe:	2800      	cmp	r0, #0
 8022200:	dcb1      	bgt.n	8022166 <_dtoa_r+0x9e6>
 8022202:	d102      	bne.n	802220a <_dtoa_r+0xa8a>
 8022204:	9b02      	ldr	r3, [sp, #8]
 8022206:	07db      	lsls	r3, r3, #31
 8022208:	d4ad      	bmi.n	8022166 <_dtoa_r+0x9e6>
 802220a:	4643      	mov	r3, r8
 802220c:	4698      	mov	r8, r3
 802220e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022212:	2a30      	cmp	r2, #48	; 0x30
 8022214:	d0fa      	beq.n	802220c <_dtoa_r+0xa8c>
 8022216:	e6f6      	b.n	8022006 <_dtoa_r+0x886>
 8022218:	9a00      	ldr	r2, [sp, #0]
 802221a:	429a      	cmp	r2, r3
 802221c:	d1a4      	bne.n	8022168 <_dtoa_r+0x9e8>
 802221e:	f10b 0b01 	add.w	fp, fp, #1
 8022222:	2331      	movs	r3, #49	; 0x31
 8022224:	e778      	b.n	8022118 <_dtoa_r+0x998>
 8022226:	4b15      	ldr	r3, [pc, #84]	; (802227c <_dtoa_r+0xafc>)
 8022228:	f7ff bb12 	b.w	8021850 <_dtoa_r+0xd0>
 802222c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802222e:	2b00      	cmp	r3, #0
 8022230:	f47f aaee 	bne.w	8021810 <_dtoa_r+0x90>
 8022234:	4b12      	ldr	r3, [pc, #72]	; (8022280 <_dtoa_r+0xb00>)
 8022236:	f7ff bb0b 	b.w	8021850 <_dtoa_r+0xd0>
 802223a:	f1ba 0f00 	cmp.w	sl, #0
 802223e:	dc03      	bgt.n	8022248 <_dtoa_r+0xac8>
 8022240:	9b07      	ldr	r3, [sp, #28]
 8022242:	2b02      	cmp	r3, #2
 8022244:	f73f aec7 	bgt.w	8021fd6 <_dtoa_r+0x856>
 8022248:	f8dd 8000 	ldr.w	r8, [sp]
 802224c:	4621      	mov	r1, r4
 802224e:	4628      	mov	r0, r5
 8022250:	f7ff fa08 	bl	8021664 <quorem>
 8022254:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8022258:	f808 3b01 	strb.w	r3, [r8], #1
 802225c:	9a00      	ldr	r2, [sp, #0]
 802225e:	eba8 0202 	sub.w	r2, r8, r2
 8022262:	4592      	cmp	sl, r2
 8022264:	ddb7      	ble.n	80221d6 <_dtoa_r+0xa56>
 8022266:	4629      	mov	r1, r5
 8022268:	2300      	movs	r3, #0
 802226a:	220a      	movs	r2, #10
 802226c:	4630      	mov	r0, r6
 802226e:	f000 faa9 	bl	80227c4 <__multadd>
 8022272:	4605      	mov	r5, r0
 8022274:	e7ea      	b.n	802224c <_dtoa_r+0xacc>
 8022276:	bf00      	nop
 8022278:	08027e1e 	.word	0x08027e1e
 802227c:	08027cdc 	.word	0x08027cdc
 8022280:	08027db2 	.word	0x08027db2

08022284 <__sflush_r>:
 8022284:	898a      	ldrh	r2, [r1, #12]
 8022286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802228a:	4605      	mov	r5, r0
 802228c:	0710      	lsls	r0, r2, #28
 802228e:	460c      	mov	r4, r1
 8022290:	d458      	bmi.n	8022344 <__sflush_r+0xc0>
 8022292:	684b      	ldr	r3, [r1, #4]
 8022294:	2b00      	cmp	r3, #0
 8022296:	dc05      	bgt.n	80222a4 <__sflush_r+0x20>
 8022298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802229a:	2b00      	cmp	r3, #0
 802229c:	dc02      	bgt.n	80222a4 <__sflush_r+0x20>
 802229e:	2000      	movs	r0, #0
 80222a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222a6:	2e00      	cmp	r6, #0
 80222a8:	d0f9      	beq.n	802229e <__sflush_r+0x1a>
 80222aa:	2300      	movs	r3, #0
 80222ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80222b0:	682f      	ldr	r7, [r5, #0]
 80222b2:	602b      	str	r3, [r5, #0]
 80222b4:	d032      	beq.n	802231c <__sflush_r+0x98>
 80222b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80222b8:	89a3      	ldrh	r3, [r4, #12]
 80222ba:	075a      	lsls	r2, r3, #29
 80222bc:	d505      	bpl.n	80222ca <__sflush_r+0x46>
 80222be:	6863      	ldr	r3, [r4, #4]
 80222c0:	1ac0      	subs	r0, r0, r3
 80222c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80222c4:	b10b      	cbz	r3, 80222ca <__sflush_r+0x46>
 80222c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80222c8:	1ac0      	subs	r0, r0, r3
 80222ca:	2300      	movs	r3, #0
 80222cc:	4602      	mov	r2, r0
 80222ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222d0:	6a21      	ldr	r1, [r4, #32]
 80222d2:	4628      	mov	r0, r5
 80222d4:	47b0      	blx	r6
 80222d6:	1c43      	adds	r3, r0, #1
 80222d8:	89a3      	ldrh	r3, [r4, #12]
 80222da:	d106      	bne.n	80222ea <__sflush_r+0x66>
 80222dc:	6829      	ldr	r1, [r5, #0]
 80222de:	291d      	cmp	r1, #29
 80222e0:	d82c      	bhi.n	802233c <__sflush_r+0xb8>
 80222e2:	4a2a      	ldr	r2, [pc, #168]	; (802238c <__sflush_r+0x108>)
 80222e4:	40ca      	lsrs	r2, r1
 80222e6:	07d6      	lsls	r6, r2, #31
 80222e8:	d528      	bpl.n	802233c <__sflush_r+0xb8>
 80222ea:	2200      	movs	r2, #0
 80222ec:	6062      	str	r2, [r4, #4]
 80222ee:	04d9      	lsls	r1, r3, #19
 80222f0:	6922      	ldr	r2, [r4, #16]
 80222f2:	6022      	str	r2, [r4, #0]
 80222f4:	d504      	bpl.n	8022300 <__sflush_r+0x7c>
 80222f6:	1c42      	adds	r2, r0, #1
 80222f8:	d101      	bne.n	80222fe <__sflush_r+0x7a>
 80222fa:	682b      	ldr	r3, [r5, #0]
 80222fc:	b903      	cbnz	r3, 8022300 <__sflush_r+0x7c>
 80222fe:	6560      	str	r0, [r4, #84]	; 0x54
 8022300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022302:	602f      	str	r7, [r5, #0]
 8022304:	2900      	cmp	r1, #0
 8022306:	d0ca      	beq.n	802229e <__sflush_r+0x1a>
 8022308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802230c:	4299      	cmp	r1, r3
 802230e:	d002      	beq.n	8022316 <__sflush_r+0x92>
 8022310:	4628      	mov	r0, r5
 8022312:	f000 fd83 	bl	8022e1c <_free_r>
 8022316:	2000      	movs	r0, #0
 8022318:	6360      	str	r0, [r4, #52]	; 0x34
 802231a:	e7c1      	b.n	80222a0 <__sflush_r+0x1c>
 802231c:	6a21      	ldr	r1, [r4, #32]
 802231e:	2301      	movs	r3, #1
 8022320:	4628      	mov	r0, r5
 8022322:	47b0      	blx	r6
 8022324:	1c41      	adds	r1, r0, #1
 8022326:	d1c7      	bne.n	80222b8 <__sflush_r+0x34>
 8022328:	682b      	ldr	r3, [r5, #0]
 802232a:	2b00      	cmp	r3, #0
 802232c:	d0c4      	beq.n	80222b8 <__sflush_r+0x34>
 802232e:	2b1d      	cmp	r3, #29
 8022330:	d001      	beq.n	8022336 <__sflush_r+0xb2>
 8022332:	2b16      	cmp	r3, #22
 8022334:	d101      	bne.n	802233a <__sflush_r+0xb6>
 8022336:	602f      	str	r7, [r5, #0]
 8022338:	e7b1      	b.n	802229e <__sflush_r+0x1a>
 802233a:	89a3      	ldrh	r3, [r4, #12]
 802233c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022340:	81a3      	strh	r3, [r4, #12]
 8022342:	e7ad      	b.n	80222a0 <__sflush_r+0x1c>
 8022344:	690f      	ldr	r7, [r1, #16]
 8022346:	2f00      	cmp	r7, #0
 8022348:	d0a9      	beq.n	802229e <__sflush_r+0x1a>
 802234a:	0793      	lsls	r3, r2, #30
 802234c:	680e      	ldr	r6, [r1, #0]
 802234e:	bf08      	it	eq
 8022350:	694b      	ldreq	r3, [r1, #20]
 8022352:	600f      	str	r7, [r1, #0]
 8022354:	bf18      	it	ne
 8022356:	2300      	movne	r3, #0
 8022358:	eba6 0807 	sub.w	r8, r6, r7
 802235c:	608b      	str	r3, [r1, #8]
 802235e:	f1b8 0f00 	cmp.w	r8, #0
 8022362:	dd9c      	ble.n	802229e <__sflush_r+0x1a>
 8022364:	6a21      	ldr	r1, [r4, #32]
 8022366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022368:	4643      	mov	r3, r8
 802236a:	463a      	mov	r2, r7
 802236c:	4628      	mov	r0, r5
 802236e:	47b0      	blx	r6
 8022370:	2800      	cmp	r0, #0
 8022372:	dc06      	bgt.n	8022382 <__sflush_r+0xfe>
 8022374:	89a3      	ldrh	r3, [r4, #12]
 8022376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802237a:	81a3      	strh	r3, [r4, #12]
 802237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022380:	e78e      	b.n	80222a0 <__sflush_r+0x1c>
 8022382:	4407      	add	r7, r0
 8022384:	eba8 0800 	sub.w	r8, r8, r0
 8022388:	e7e9      	b.n	802235e <__sflush_r+0xda>
 802238a:	bf00      	nop
 802238c:	20400001 	.word	0x20400001

08022390 <_fflush_r>:
 8022390:	b538      	push	{r3, r4, r5, lr}
 8022392:	690b      	ldr	r3, [r1, #16]
 8022394:	4605      	mov	r5, r0
 8022396:	460c      	mov	r4, r1
 8022398:	b913      	cbnz	r3, 80223a0 <_fflush_r+0x10>
 802239a:	2500      	movs	r5, #0
 802239c:	4628      	mov	r0, r5
 802239e:	bd38      	pop	{r3, r4, r5, pc}
 80223a0:	b118      	cbz	r0, 80223aa <_fflush_r+0x1a>
 80223a2:	6983      	ldr	r3, [r0, #24]
 80223a4:	b90b      	cbnz	r3, 80223aa <_fflush_r+0x1a>
 80223a6:	f000 f887 	bl	80224b8 <__sinit>
 80223aa:	4b14      	ldr	r3, [pc, #80]	; (80223fc <_fflush_r+0x6c>)
 80223ac:	429c      	cmp	r4, r3
 80223ae:	d11b      	bne.n	80223e8 <_fflush_r+0x58>
 80223b0:	686c      	ldr	r4, [r5, #4]
 80223b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d0ef      	beq.n	802239a <_fflush_r+0xa>
 80223ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80223bc:	07d0      	lsls	r0, r2, #31
 80223be:	d404      	bmi.n	80223ca <_fflush_r+0x3a>
 80223c0:	0599      	lsls	r1, r3, #22
 80223c2:	d402      	bmi.n	80223ca <_fflush_r+0x3a>
 80223c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223c6:	f000 f92c 	bl	8022622 <__retarget_lock_acquire_recursive>
 80223ca:	4628      	mov	r0, r5
 80223cc:	4621      	mov	r1, r4
 80223ce:	f7ff ff59 	bl	8022284 <__sflush_r>
 80223d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223d4:	07da      	lsls	r2, r3, #31
 80223d6:	4605      	mov	r5, r0
 80223d8:	d4e0      	bmi.n	802239c <_fflush_r+0xc>
 80223da:	89a3      	ldrh	r3, [r4, #12]
 80223dc:	059b      	lsls	r3, r3, #22
 80223de:	d4dd      	bmi.n	802239c <_fflush_r+0xc>
 80223e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223e2:	f000 f920 	bl	8022626 <__retarget_lock_release_recursive>
 80223e6:	e7d9      	b.n	802239c <_fflush_r+0xc>
 80223e8:	4b05      	ldr	r3, [pc, #20]	; (8022400 <_fflush_r+0x70>)
 80223ea:	429c      	cmp	r4, r3
 80223ec:	d101      	bne.n	80223f2 <_fflush_r+0x62>
 80223ee:	68ac      	ldr	r4, [r5, #8]
 80223f0:	e7df      	b.n	80223b2 <_fflush_r+0x22>
 80223f2:	4b04      	ldr	r3, [pc, #16]	; (8022404 <_fflush_r+0x74>)
 80223f4:	429c      	cmp	r4, r3
 80223f6:	bf08      	it	eq
 80223f8:	68ec      	ldreq	r4, [r5, #12]
 80223fa:	e7da      	b.n	80223b2 <_fflush_r+0x22>
 80223fc:	08027e50 	.word	0x08027e50
 8022400:	08027e70 	.word	0x08027e70
 8022404:	08027e30 	.word	0x08027e30

08022408 <std>:
 8022408:	2300      	movs	r3, #0
 802240a:	b510      	push	{r4, lr}
 802240c:	4604      	mov	r4, r0
 802240e:	e9c0 3300 	strd	r3, r3, [r0]
 8022412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022416:	6083      	str	r3, [r0, #8]
 8022418:	8181      	strh	r1, [r0, #12]
 802241a:	6643      	str	r3, [r0, #100]	; 0x64
 802241c:	81c2      	strh	r2, [r0, #14]
 802241e:	6183      	str	r3, [r0, #24]
 8022420:	4619      	mov	r1, r3
 8022422:	2208      	movs	r2, #8
 8022424:	305c      	adds	r0, #92	; 0x5c
 8022426:	f7fe fab7 	bl	8020998 <memset>
 802242a:	4b05      	ldr	r3, [pc, #20]	; (8022440 <std+0x38>)
 802242c:	6263      	str	r3, [r4, #36]	; 0x24
 802242e:	4b05      	ldr	r3, [pc, #20]	; (8022444 <std+0x3c>)
 8022430:	62a3      	str	r3, [r4, #40]	; 0x28
 8022432:	4b05      	ldr	r3, [pc, #20]	; (8022448 <std+0x40>)
 8022434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022436:	4b05      	ldr	r3, [pc, #20]	; (802244c <std+0x44>)
 8022438:	6224      	str	r4, [r4, #32]
 802243a:	6323      	str	r3, [r4, #48]	; 0x30
 802243c:	bd10      	pop	{r4, pc}
 802243e:	bf00      	nop
 8022440:	080234fd 	.word	0x080234fd
 8022444:	0802351f 	.word	0x0802351f
 8022448:	08023557 	.word	0x08023557
 802244c:	0802357b 	.word	0x0802357b

08022450 <_cleanup_r>:
 8022450:	4901      	ldr	r1, [pc, #4]	; (8022458 <_cleanup_r+0x8>)
 8022452:	f000 b8c1 	b.w	80225d8 <_fwalk_reent>
 8022456:	bf00      	nop
 8022458:	08022391 	.word	0x08022391

0802245c <__sfmoreglue>:
 802245c:	b570      	push	{r4, r5, r6, lr}
 802245e:	1e4a      	subs	r2, r1, #1
 8022460:	2568      	movs	r5, #104	; 0x68
 8022462:	4355      	muls	r5, r2
 8022464:	460e      	mov	r6, r1
 8022466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802246a:	f000 fd27 	bl	8022ebc <_malloc_r>
 802246e:	4604      	mov	r4, r0
 8022470:	b140      	cbz	r0, 8022484 <__sfmoreglue+0x28>
 8022472:	2100      	movs	r1, #0
 8022474:	e9c0 1600 	strd	r1, r6, [r0]
 8022478:	300c      	adds	r0, #12
 802247a:	60a0      	str	r0, [r4, #8]
 802247c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022480:	f7fe fa8a 	bl	8020998 <memset>
 8022484:	4620      	mov	r0, r4
 8022486:	bd70      	pop	{r4, r5, r6, pc}

08022488 <__sfp_lock_acquire>:
 8022488:	4801      	ldr	r0, [pc, #4]	; (8022490 <__sfp_lock_acquire+0x8>)
 802248a:	f000 b8ca 	b.w	8022622 <__retarget_lock_acquire_recursive>
 802248e:	bf00      	nop
 8022490:	24048eb4 	.word	0x24048eb4

08022494 <__sfp_lock_release>:
 8022494:	4801      	ldr	r0, [pc, #4]	; (802249c <__sfp_lock_release+0x8>)
 8022496:	f000 b8c6 	b.w	8022626 <__retarget_lock_release_recursive>
 802249a:	bf00      	nop
 802249c:	24048eb4 	.word	0x24048eb4

080224a0 <__sinit_lock_acquire>:
 80224a0:	4801      	ldr	r0, [pc, #4]	; (80224a8 <__sinit_lock_acquire+0x8>)
 80224a2:	f000 b8be 	b.w	8022622 <__retarget_lock_acquire_recursive>
 80224a6:	bf00      	nop
 80224a8:	24048eaf 	.word	0x24048eaf

080224ac <__sinit_lock_release>:
 80224ac:	4801      	ldr	r0, [pc, #4]	; (80224b4 <__sinit_lock_release+0x8>)
 80224ae:	f000 b8ba 	b.w	8022626 <__retarget_lock_release_recursive>
 80224b2:	bf00      	nop
 80224b4:	24048eaf 	.word	0x24048eaf

080224b8 <__sinit>:
 80224b8:	b510      	push	{r4, lr}
 80224ba:	4604      	mov	r4, r0
 80224bc:	f7ff fff0 	bl	80224a0 <__sinit_lock_acquire>
 80224c0:	69a3      	ldr	r3, [r4, #24]
 80224c2:	b11b      	cbz	r3, 80224cc <__sinit+0x14>
 80224c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224c8:	f7ff bff0 	b.w	80224ac <__sinit_lock_release>
 80224cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80224d0:	6523      	str	r3, [r4, #80]	; 0x50
 80224d2:	4b13      	ldr	r3, [pc, #76]	; (8022520 <__sinit+0x68>)
 80224d4:	4a13      	ldr	r2, [pc, #76]	; (8022524 <__sinit+0x6c>)
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80224da:	42a3      	cmp	r3, r4
 80224dc:	bf04      	itt	eq
 80224de:	2301      	moveq	r3, #1
 80224e0:	61a3      	streq	r3, [r4, #24]
 80224e2:	4620      	mov	r0, r4
 80224e4:	f000 f820 	bl	8022528 <__sfp>
 80224e8:	6060      	str	r0, [r4, #4]
 80224ea:	4620      	mov	r0, r4
 80224ec:	f000 f81c 	bl	8022528 <__sfp>
 80224f0:	60a0      	str	r0, [r4, #8]
 80224f2:	4620      	mov	r0, r4
 80224f4:	f000 f818 	bl	8022528 <__sfp>
 80224f8:	2200      	movs	r2, #0
 80224fa:	60e0      	str	r0, [r4, #12]
 80224fc:	2104      	movs	r1, #4
 80224fe:	6860      	ldr	r0, [r4, #4]
 8022500:	f7ff ff82 	bl	8022408 <std>
 8022504:	68a0      	ldr	r0, [r4, #8]
 8022506:	2201      	movs	r2, #1
 8022508:	2109      	movs	r1, #9
 802250a:	f7ff ff7d 	bl	8022408 <std>
 802250e:	68e0      	ldr	r0, [r4, #12]
 8022510:	2202      	movs	r2, #2
 8022512:	2112      	movs	r1, #18
 8022514:	f7ff ff78 	bl	8022408 <std>
 8022518:	2301      	movs	r3, #1
 802251a:	61a3      	str	r3, [r4, #24]
 802251c:	e7d2      	b.n	80224c4 <__sinit+0xc>
 802251e:	bf00      	nop
 8022520:	08027cc8 	.word	0x08027cc8
 8022524:	08022451 	.word	0x08022451

08022528 <__sfp>:
 8022528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802252a:	4607      	mov	r7, r0
 802252c:	f7ff ffac 	bl	8022488 <__sfp_lock_acquire>
 8022530:	4b1e      	ldr	r3, [pc, #120]	; (80225ac <__sfp+0x84>)
 8022532:	681e      	ldr	r6, [r3, #0]
 8022534:	69b3      	ldr	r3, [r6, #24]
 8022536:	b913      	cbnz	r3, 802253e <__sfp+0x16>
 8022538:	4630      	mov	r0, r6
 802253a:	f7ff ffbd 	bl	80224b8 <__sinit>
 802253e:	3648      	adds	r6, #72	; 0x48
 8022540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022544:	3b01      	subs	r3, #1
 8022546:	d503      	bpl.n	8022550 <__sfp+0x28>
 8022548:	6833      	ldr	r3, [r6, #0]
 802254a:	b30b      	cbz	r3, 8022590 <__sfp+0x68>
 802254c:	6836      	ldr	r6, [r6, #0]
 802254e:	e7f7      	b.n	8022540 <__sfp+0x18>
 8022550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022554:	b9d5      	cbnz	r5, 802258c <__sfp+0x64>
 8022556:	4b16      	ldr	r3, [pc, #88]	; (80225b0 <__sfp+0x88>)
 8022558:	60e3      	str	r3, [r4, #12]
 802255a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802255e:	6665      	str	r5, [r4, #100]	; 0x64
 8022560:	f000 f85e 	bl	8022620 <__retarget_lock_init_recursive>
 8022564:	f7ff ff96 	bl	8022494 <__sfp_lock_release>
 8022568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802256c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022570:	6025      	str	r5, [r4, #0]
 8022572:	61a5      	str	r5, [r4, #24]
 8022574:	2208      	movs	r2, #8
 8022576:	4629      	mov	r1, r5
 8022578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802257c:	f7fe fa0c 	bl	8020998 <memset>
 8022580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022588:	4620      	mov	r0, r4
 802258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802258c:	3468      	adds	r4, #104	; 0x68
 802258e:	e7d9      	b.n	8022544 <__sfp+0x1c>
 8022590:	2104      	movs	r1, #4
 8022592:	4638      	mov	r0, r7
 8022594:	f7ff ff62 	bl	802245c <__sfmoreglue>
 8022598:	4604      	mov	r4, r0
 802259a:	6030      	str	r0, [r6, #0]
 802259c:	2800      	cmp	r0, #0
 802259e:	d1d5      	bne.n	802254c <__sfp+0x24>
 80225a0:	f7ff ff78 	bl	8022494 <__sfp_lock_release>
 80225a4:	230c      	movs	r3, #12
 80225a6:	603b      	str	r3, [r7, #0]
 80225a8:	e7ee      	b.n	8022588 <__sfp+0x60>
 80225aa:	bf00      	nop
 80225ac:	08027cc8 	.word	0x08027cc8
 80225b0:	ffff0001 	.word	0xffff0001

080225b4 <fiprintf>:
 80225b4:	b40e      	push	{r1, r2, r3}
 80225b6:	b503      	push	{r0, r1, lr}
 80225b8:	4601      	mov	r1, r0
 80225ba:	ab03      	add	r3, sp, #12
 80225bc:	4805      	ldr	r0, [pc, #20]	; (80225d4 <fiprintf+0x20>)
 80225be:	f853 2b04 	ldr.w	r2, [r3], #4
 80225c2:	6800      	ldr	r0, [r0, #0]
 80225c4:	9301      	str	r3, [sp, #4]
 80225c6:	f000 fe59 	bl	802327c <_vfiprintf_r>
 80225ca:	b002      	add	sp, #8
 80225cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80225d0:	b003      	add	sp, #12
 80225d2:	4770      	bx	lr
 80225d4:	24000040 	.word	0x24000040

080225d8 <_fwalk_reent>:
 80225d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80225dc:	4606      	mov	r6, r0
 80225de:	4688      	mov	r8, r1
 80225e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80225e4:	2700      	movs	r7, #0
 80225e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80225ea:	f1b9 0901 	subs.w	r9, r9, #1
 80225ee:	d505      	bpl.n	80225fc <_fwalk_reent+0x24>
 80225f0:	6824      	ldr	r4, [r4, #0]
 80225f2:	2c00      	cmp	r4, #0
 80225f4:	d1f7      	bne.n	80225e6 <_fwalk_reent+0xe>
 80225f6:	4638      	mov	r0, r7
 80225f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80225fc:	89ab      	ldrh	r3, [r5, #12]
 80225fe:	2b01      	cmp	r3, #1
 8022600:	d907      	bls.n	8022612 <_fwalk_reent+0x3a>
 8022602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022606:	3301      	adds	r3, #1
 8022608:	d003      	beq.n	8022612 <_fwalk_reent+0x3a>
 802260a:	4629      	mov	r1, r5
 802260c:	4630      	mov	r0, r6
 802260e:	47c0      	blx	r8
 8022610:	4307      	orrs	r7, r0
 8022612:	3568      	adds	r5, #104	; 0x68
 8022614:	e7e9      	b.n	80225ea <_fwalk_reent+0x12>
	...

08022618 <_localeconv_r>:
 8022618:	4800      	ldr	r0, [pc, #0]	; (802261c <_localeconv_r+0x4>)
 802261a:	4770      	bx	lr
 802261c:	24000198 	.word	0x24000198

08022620 <__retarget_lock_init_recursive>:
 8022620:	4770      	bx	lr

08022622 <__retarget_lock_acquire_recursive>:
 8022622:	4770      	bx	lr

08022624 <__retarget_lock_release>:
 8022624:	4770      	bx	lr

08022626 <__retarget_lock_release_recursive>:
 8022626:	4770      	bx	lr

08022628 <__swhatbuf_r>:
 8022628:	b570      	push	{r4, r5, r6, lr}
 802262a:	460e      	mov	r6, r1
 802262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022630:	2900      	cmp	r1, #0
 8022632:	b096      	sub	sp, #88	; 0x58
 8022634:	4614      	mov	r4, r2
 8022636:	461d      	mov	r5, r3
 8022638:	da07      	bge.n	802264a <__swhatbuf_r+0x22>
 802263a:	2300      	movs	r3, #0
 802263c:	602b      	str	r3, [r5, #0]
 802263e:	89b3      	ldrh	r3, [r6, #12]
 8022640:	061a      	lsls	r2, r3, #24
 8022642:	d410      	bmi.n	8022666 <__swhatbuf_r+0x3e>
 8022644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022648:	e00e      	b.n	8022668 <__swhatbuf_r+0x40>
 802264a:	466a      	mov	r2, sp
 802264c:	f000 ffbc 	bl	80235c8 <_fstat_r>
 8022650:	2800      	cmp	r0, #0
 8022652:	dbf2      	blt.n	802263a <__swhatbuf_r+0x12>
 8022654:	9a01      	ldr	r2, [sp, #4]
 8022656:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802265a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802265e:	425a      	negs	r2, r3
 8022660:	415a      	adcs	r2, r3
 8022662:	602a      	str	r2, [r5, #0]
 8022664:	e7ee      	b.n	8022644 <__swhatbuf_r+0x1c>
 8022666:	2340      	movs	r3, #64	; 0x40
 8022668:	2000      	movs	r0, #0
 802266a:	6023      	str	r3, [r4, #0]
 802266c:	b016      	add	sp, #88	; 0x58
 802266e:	bd70      	pop	{r4, r5, r6, pc}

08022670 <__smakebuf_r>:
 8022670:	898b      	ldrh	r3, [r1, #12]
 8022672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022674:	079d      	lsls	r5, r3, #30
 8022676:	4606      	mov	r6, r0
 8022678:	460c      	mov	r4, r1
 802267a:	d507      	bpl.n	802268c <__smakebuf_r+0x1c>
 802267c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022680:	6023      	str	r3, [r4, #0]
 8022682:	6123      	str	r3, [r4, #16]
 8022684:	2301      	movs	r3, #1
 8022686:	6163      	str	r3, [r4, #20]
 8022688:	b002      	add	sp, #8
 802268a:	bd70      	pop	{r4, r5, r6, pc}
 802268c:	ab01      	add	r3, sp, #4
 802268e:	466a      	mov	r2, sp
 8022690:	f7ff ffca 	bl	8022628 <__swhatbuf_r>
 8022694:	9900      	ldr	r1, [sp, #0]
 8022696:	4605      	mov	r5, r0
 8022698:	4630      	mov	r0, r6
 802269a:	f000 fc0f 	bl	8022ebc <_malloc_r>
 802269e:	b948      	cbnz	r0, 80226b4 <__smakebuf_r+0x44>
 80226a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226a4:	059a      	lsls	r2, r3, #22
 80226a6:	d4ef      	bmi.n	8022688 <__smakebuf_r+0x18>
 80226a8:	f023 0303 	bic.w	r3, r3, #3
 80226ac:	f043 0302 	orr.w	r3, r3, #2
 80226b0:	81a3      	strh	r3, [r4, #12]
 80226b2:	e7e3      	b.n	802267c <__smakebuf_r+0xc>
 80226b4:	4b0d      	ldr	r3, [pc, #52]	; (80226ec <__smakebuf_r+0x7c>)
 80226b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80226b8:	89a3      	ldrh	r3, [r4, #12]
 80226ba:	6020      	str	r0, [r4, #0]
 80226bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80226c0:	81a3      	strh	r3, [r4, #12]
 80226c2:	9b00      	ldr	r3, [sp, #0]
 80226c4:	6163      	str	r3, [r4, #20]
 80226c6:	9b01      	ldr	r3, [sp, #4]
 80226c8:	6120      	str	r0, [r4, #16]
 80226ca:	b15b      	cbz	r3, 80226e4 <__smakebuf_r+0x74>
 80226cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80226d0:	4630      	mov	r0, r6
 80226d2:	f000 ff8b 	bl	80235ec <_isatty_r>
 80226d6:	b128      	cbz	r0, 80226e4 <__smakebuf_r+0x74>
 80226d8:	89a3      	ldrh	r3, [r4, #12]
 80226da:	f023 0303 	bic.w	r3, r3, #3
 80226de:	f043 0301 	orr.w	r3, r3, #1
 80226e2:	81a3      	strh	r3, [r4, #12]
 80226e4:	89a0      	ldrh	r0, [r4, #12]
 80226e6:	4305      	orrs	r5, r0
 80226e8:	81a5      	strh	r5, [r4, #12]
 80226ea:	e7cd      	b.n	8022688 <__smakebuf_r+0x18>
 80226ec:	08022451 	.word	0x08022451

080226f0 <malloc>:
 80226f0:	4b02      	ldr	r3, [pc, #8]	; (80226fc <malloc+0xc>)
 80226f2:	4601      	mov	r1, r0
 80226f4:	6818      	ldr	r0, [r3, #0]
 80226f6:	f000 bbe1 	b.w	8022ebc <_malloc_r>
 80226fa:	bf00      	nop
 80226fc:	24000040 	.word	0x24000040

08022700 <_Balloc>:
 8022700:	b570      	push	{r4, r5, r6, lr}
 8022702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022704:	4604      	mov	r4, r0
 8022706:	460d      	mov	r5, r1
 8022708:	b976      	cbnz	r6, 8022728 <_Balloc+0x28>
 802270a:	2010      	movs	r0, #16
 802270c:	f7ff fff0 	bl	80226f0 <malloc>
 8022710:	4602      	mov	r2, r0
 8022712:	6260      	str	r0, [r4, #36]	; 0x24
 8022714:	b920      	cbnz	r0, 8022720 <_Balloc+0x20>
 8022716:	4b18      	ldr	r3, [pc, #96]	; (8022778 <_Balloc+0x78>)
 8022718:	4818      	ldr	r0, [pc, #96]	; (802277c <_Balloc+0x7c>)
 802271a:	2166      	movs	r1, #102	; 0x66
 802271c:	f7fe ff84 	bl	8021628 <__assert_func>
 8022720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022724:	6006      	str	r6, [r0, #0]
 8022726:	60c6      	str	r6, [r0, #12]
 8022728:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802272a:	68f3      	ldr	r3, [r6, #12]
 802272c:	b183      	cbz	r3, 8022750 <_Balloc+0x50>
 802272e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022730:	68db      	ldr	r3, [r3, #12]
 8022732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022736:	b9b8      	cbnz	r0, 8022768 <_Balloc+0x68>
 8022738:	2101      	movs	r1, #1
 802273a:	fa01 f605 	lsl.w	r6, r1, r5
 802273e:	1d72      	adds	r2, r6, #5
 8022740:	0092      	lsls	r2, r2, #2
 8022742:	4620      	mov	r0, r4
 8022744:	f000 fb5a 	bl	8022dfc <_calloc_r>
 8022748:	b160      	cbz	r0, 8022764 <_Balloc+0x64>
 802274a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802274e:	e00e      	b.n	802276e <_Balloc+0x6e>
 8022750:	2221      	movs	r2, #33	; 0x21
 8022752:	2104      	movs	r1, #4
 8022754:	4620      	mov	r0, r4
 8022756:	f000 fb51 	bl	8022dfc <_calloc_r>
 802275a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802275c:	60f0      	str	r0, [r6, #12]
 802275e:	68db      	ldr	r3, [r3, #12]
 8022760:	2b00      	cmp	r3, #0
 8022762:	d1e4      	bne.n	802272e <_Balloc+0x2e>
 8022764:	2000      	movs	r0, #0
 8022766:	bd70      	pop	{r4, r5, r6, pc}
 8022768:	6802      	ldr	r2, [r0, #0]
 802276a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802276e:	2300      	movs	r3, #0
 8022770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022774:	e7f7      	b.n	8022766 <_Balloc+0x66>
 8022776:	bf00      	nop
 8022778:	08027d00 	.word	0x08027d00
 802277c:	08027e90 	.word	0x08027e90

08022780 <_Bfree>:
 8022780:	b570      	push	{r4, r5, r6, lr}
 8022782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022784:	4605      	mov	r5, r0
 8022786:	460c      	mov	r4, r1
 8022788:	b976      	cbnz	r6, 80227a8 <_Bfree+0x28>
 802278a:	2010      	movs	r0, #16
 802278c:	f7ff ffb0 	bl	80226f0 <malloc>
 8022790:	4602      	mov	r2, r0
 8022792:	6268      	str	r0, [r5, #36]	; 0x24
 8022794:	b920      	cbnz	r0, 80227a0 <_Bfree+0x20>
 8022796:	4b09      	ldr	r3, [pc, #36]	; (80227bc <_Bfree+0x3c>)
 8022798:	4809      	ldr	r0, [pc, #36]	; (80227c0 <_Bfree+0x40>)
 802279a:	218a      	movs	r1, #138	; 0x8a
 802279c:	f7fe ff44 	bl	8021628 <__assert_func>
 80227a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80227a4:	6006      	str	r6, [r0, #0]
 80227a6:	60c6      	str	r6, [r0, #12]
 80227a8:	b13c      	cbz	r4, 80227ba <_Bfree+0x3a>
 80227aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80227ac:	6862      	ldr	r2, [r4, #4]
 80227ae:	68db      	ldr	r3, [r3, #12]
 80227b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80227b4:	6021      	str	r1, [r4, #0]
 80227b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80227ba:	bd70      	pop	{r4, r5, r6, pc}
 80227bc:	08027d00 	.word	0x08027d00
 80227c0:	08027e90 	.word	0x08027e90

080227c4 <__multadd>:
 80227c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227c8:	690e      	ldr	r6, [r1, #16]
 80227ca:	4607      	mov	r7, r0
 80227cc:	4698      	mov	r8, r3
 80227ce:	460c      	mov	r4, r1
 80227d0:	f101 0014 	add.w	r0, r1, #20
 80227d4:	2300      	movs	r3, #0
 80227d6:	6805      	ldr	r5, [r0, #0]
 80227d8:	b2a9      	uxth	r1, r5
 80227da:	fb02 8101 	mla	r1, r2, r1, r8
 80227de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80227e2:	0c2d      	lsrs	r5, r5, #16
 80227e4:	fb02 c505 	mla	r5, r2, r5, ip
 80227e8:	b289      	uxth	r1, r1
 80227ea:	3301      	adds	r3, #1
 80227ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80227f0:	429e      	cmp	r6, r3
 80227f2:	f840 1b04 	str.w	r1, [r0], #4
 80227f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80227fa:	dcec      	bgt.n	80227d6 <__multadd+0x12>
 80227fc:	f1b8 0f00 	cmp.w	r8, #0
 8022800:	d022      	beq.n	8022848 <__multadd+0x84>
 8022802:	68a3      	ldr	r3, [r4, #8]
 8022804:	42b3      	cmp	r3, r6
 8022806:	dc19      	bgt.n	802283c <__multadd+0x78>
 8022808:	6861      	ldr	r1, [r4, #4]
 802280a:	4638      	mov	r0, r7
 802280c:	3101      	adds	r1, #1
 802280e:	f7ff ff77 	bl	8022700 <_Balloc>
 8022812:	4605      	mov	r5, r0
 8022814:	b928      	cbnz	r0, 8022822 <__multadd+0x5e>
 8022816:	4602      	mov	r2, r0
 8022818:	4b0d      	ldr	r3, [pc, #52]	; (8022850 <__multadd+0x8c>)
 802281a:	480e      	ldr	r0, [pc, #56]	; (8022854 <__multadd+0x90>)
 802281c:	21b5      	movs	r1, #181	; 0xb5
 802281e:	f7fe ff03 	bl	8021628 <__assert_func>
 8022822:	6922      	ldr	r2, [r4, #16]
 8022824:	3202      	adds	r2, #2
 8022826:	f104 010c 	add.w	r1, r4, #12
 802282a:	0092      	lsls	r2, r2, #2
 802282c:	300c      	adds	r0, #12
 802282e:	f7fe f88b 	bl	8020948 <memcpy>
 8022832:	4621      	mov	r1, r4
 8022834:	4638      	mov	r0, r7
 8022836:	f7ff ffa3 	bl	8022780 <_Bfree>
 802283a:	462c      	mov	r4, r5
 802283c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8022840:	3601      	adds	r6, #1
 8022842:	f8c3 8014 	str.w	r8, [r3, #20]
 8022846:	6126      	str	r6, [r4, #16]
 8022848:	4620      	mov	r0, r4
 802284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802284e:	bf00      	nop
 8022850:	08027e1e 	.word	0x08027e1e
 8022854:	08027e90 	.word	0x08027e90

08022858 <__hi0bits>:
 8022858:	0c03      	lsrs	r3, r0, #16
 802285a:	041b      	lsls	r3, r3, #16
 802285c:	b9d3      	cbnz	r3, 8022894 <__hi0bits+0x3c>
 802285e:	0400      	lsls	r0, r0, #16
 8022860:	2310      	movs	r3, #16
 8022862:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022866:	bf04      	itt	eq
 8022868:	0200      	lsleq	r0, r0, #8
 802286a:	3308      	addeq	r3, #8
 802286c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022870:	bf04      	itt	eq
 8022872:	0100      	lsleq	r0, r0, #4
 8022874:	3304      	addeq	r3, #4
 8022876:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802287a:	bf04      	itt	eq
 802287c:	0080      	lsleq	r0, r0, #2
 802287e:	3302      	addeq	r3, #2
 8022880:	2800      	cmp	r0, #0
 8022882:	db05      	blt.n	8022890 <__hi0bits+0x38>
 8022884:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022888:	f103 0301 	add.w	r3, r3, #1
 802288c:	bf08      	it	eq
 802288e:	2320      	moveq	r3, #32
 8022890:	4618      	mov	r0, r3
 8022892:	4770      	bx	lr
 8022894:	2300      	movs	r3, #0
 8022896:	e7e4      	b.n	8022862 <__hi0bits+0xa>

08022898 <__lo0bits>:
 8022898:	6803      	ldr	r3, [r0, #0]
 802289a:	f013 0207 	ands.w	r2, r3, #7
 802289e:	4601      	mov	r1, r0
 80228a0:	d00b      	beq.n	80228ba <__lo0bits+0x22>
 80228a2:	07da      	lsls	r2, r3, #31
 80228a4:	d424      	bmi.n	80228f0 <__lo0bits+0x58>
 80228a6:	0798      	lsls	r0, r3, #30
 80228a8:	bf49      	itett	mi
 80228aa:	085b      	lsrmi	r3, r3, #1
 80228ac:	089b      	lsrpl	r3, r3, #2
 80228ae:	2001      	movmi	r0, #1
 80228b0:	600b      	strmi	r3, [r1, #0]
 80228b2:	bf5c      	itt	pl
 80228b4:	600b      	strpl	r3, [r1, #0]
 80228b6:	2002      	movpl	r0, #2
 80228b8:	4770      	bx	lr
 80228ba:	b298      	uxth	r0, r3
 80228bc:	b9b0      	cbnz	r0, 80228ec <__lo0bits+0x54>
 80228be:	0c1b      	lsrs	r3, r3, #16
 80228c0:	2010      	movs	r0, #16
 80228c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80228c6:	bf04      	itt	eq
 80228c8:	0a1b      	lsreq	r3, r3, #8
 80228ca:	3008      	addeq	r0, #8
 80228cc:	071a      	lsls	r2, r3, #28
 80228ce:	bf04      	itt	eq
 80228d0:	091b      	lsreq	r3, r3, #4
 80228d2:	3004      	addeq	r0, #4
 80228d4:	079a      	lsls	r2, r3, #30
 80228d6:	bf04      	itt	eq
 80228d8:	089b      	lsreq	r3, r3, #2
 80228da:	3002      	addeq	r0, #2
 80228dc:	07da      	lsls	r2, r3, #31
 80228de:	d403      	bmi.n	80228e8 <__lo0bits+0x50>
 80228e0:	085b      	lsrs	r3, r3, #1
 80228e2:	f100 0001 	add.w	r0, r0, #1
 80228e6:	d005      	beq.n	80228f4 <__lo0bits+0x5c>
 80228e8:	600b      	str	r3, [r1, #0]
 80228ea:	4770      	bx	lr
 80228ec:	4610      	mov	r0, r2
 80228ee:	e7e8      	b.n	80228c2 <__lo0bits+0x2a>
 80228f0:	2000      	movs	r0, #0
 80228f2:	4770      	bx	lr
 80228f4:	2020      	movs	r0, #32
 80228f6:	4770      	bx	lr

080228f8 <__i2b>:
 80228f8:	b510      	push	{r4, lr}
 80228fa:	460c      	mov	r4, r1
 80228fc:	2101      	movs	r1, #1
 80228fe:	f7ff feff 	bl	8022700 <_Balloc>
 8022902:	4602      	mov	r2, r0
 8022904:	b928      	cbnz	r0, 8022912 <__i2b+0x1a>
 8022906:	4b05      	ldr	r3, [pc, #20]	; (802291c <__i2b+0x24>)
 8022908:	4805      	ldr	r0, [pc, #20]	; (8022920 <__i2b+0x28>)
 802290a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802290e:	f7fe fe8b 	bl	8021628 <__assert_func>
 8022912:	2301      	movs	r3, #1
 8022914:	6144      	str	r4, [r0, #20]
 8022916:	6103      	str	r3, [r0, #16]
 8022918:	bd10      	pop	{r4, pc}
 802291a:	bf00      	nop
 802291c:	08027e1e 	.word	0x08027e1e
 8022920:	08027e90 	.word	0x08027e90

08022924 <__multiply>:
 8022924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022928:	4614      	mov	r4, r2
 802292a:	690a      	ldr	r2, [r1, #16]
 802292c:	6923      	ldr	r3, [r4, #16]
 802292e:	429a      	cmp	r2, r3
 8022930:	bfb8      	it	lt
 8022932:	460b      	movlt	r3, r1
 8022934:	460d      	mov	r5, r1
 8022936:	bfbc      	itt	lt
 8022938:	4625      	movlt	r5, r4
 802293a:	461c      	movlt	r4, r3
 802293c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8022940:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022944:	68ab      	ldr	r3, [r5, #8]
 8022946:	6869      	ldr	r1, [r5, #4]
 8022948:	eb0a 0709 	add.w	r7, sl, r9
 802294c:	42bb      	cmp	r3, r7
 802294e:	b085      	sub	sp, #20
 8022950:	bfb8      	it	lt
 8022952:	3101      	addlt	r1, #1
 8022954:	f7ff fed4 	bl	8022700 <_Balloc>
 8022958:	b930      	cbnz	r0, 8022968 <__multiply+0x44>
 802295a:	4602      	mov	r2, r0
 802295c:	4b42      	ldr	r3, [pc, #264]	; (8022a68 <__multiply+0x144>)
 802295e:	4843      	ldr	r0, [pc, #268]	; (8022a6c <__multiply+0x148>)
 8022960:	f240 115d 	movw	r1, #349	; 0x15d
 8022964:	f7fe fe60 	bl	8021628 <__assert_func>
 8022968:	f100 0614 	add.w	r6, r0, #20
 802296c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8022970:	4633      	mov	r3, r6
 8022972:	2200      	movs	r2, #0
 8022974:	4543      	cmp	r3, r8
 8022976:	d31e      	bcc.n	80229b6 <__multiply+0x92>
 8022978:	f105 0c14 	add.w	ip, r5, #20
 802297c:	f104 0314 	add.w	r3, r4, #20
 8022980:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8022984:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8022988:	9202      	str	r2, [sp, #8]
 802298a:	ebac 0205 	sub.w	r2, ip, r5
 802298e:	3a15      	subs	r2, #21
 8022990:	f022 0203 	bic.w	r2, r2, #3
 8022994:	3204      	adds	r2, #4
 8022996:	f105 0115 	add.w	r1, r5, #21
 802299a:	458c      	cmp	ip, r1
 802299c:	bf38      	it	cc
 802299e:	2204      	movcc	r2, #4
 80229a0:	9201      	str	r2, [sp, #4]
 80229a2:	9a02      	ldr	r2, [sp, #8]
 80229a4:	9303      	str	r3, [sp, #12]
 80229a6:	429a      	cmp	r2, r3
 80229a8:	d808      	bhi.n	80229bc <__multiply+0x98>
 80229aa:	2f00      	cmp	r7, #0
 80229ac:	dc55      	bgt.n	8022a5a <__multiply+0x136>
 80229ae:	6107      	str	r7, [r0, #16]
 80229b0:	b005      	add	sp, #20
 80229b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229b6:	f843 2b04 	str.w	r2, [r3], #4
 80229ba:	e7db      	b.n	8022974 <__multiply+0x50>
 80229bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80229c0:	f1ba 0f00 	cmp.w	sl, #0
 80229c4:	d020      	beq.n	8022a08 <__multiply+0xe4>
 80229c6:	f105 0e14 	add.w	lr, r5, #20
 80229ca:	46b1      	mov	r9, r6
 80229cc:	2200      	movs	r2, #0
 80229ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80229d2:	f8d9 b000 	ldr.w	fp, [r9]
 80229d6:	b2a1      	uxth	r1, r4
 80229d8:	fa1f fb8b 	uxth.w	fp, fp
 80229dc:	fb0a b101 	mla	r1, sl, r1, fp
 80229e0:	4411      	add	r1, r2
 80229e2:	f8d9 2000 	ldr.w	r2, [r9]
 80229e6:	0c24      	lsrs	r4, r4, #16
 80229e8:	0c12      	lsrs	r2, r2, #16
 80229ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80229ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80229f2:	b289      	uxth	r1, r1
 80229f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80229f8:	45f4      	cmp	ip, lr
 80229fa:	f849 1b04 	str.w	r1, [r9], #4
 80229fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8022a02:	d8e4      	bhi.n	80229ce <__multiply+0xaa>
 8022a04:	9901      	ldr	r1, [sp, #4]
 8022a06:	5072      	str	r2, [r6, r1]
 8022a08:	9a03      	ldr	r2, [sp, #12]
 8022a0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022a0e:	3304      	adds	r3, #4
 8022a10:	f1b9 0f00 	cmp.w	r9, #0
 8022a14:	d01f      	beq.n	8022a56 <__multiply+0x132>
 8022a16:	6834      	ldr	r4, [r6, #0]
 8022a18:	f105 0114 	add.w	r1, r5, #20
 8022a1c:	46b6      	mov	lr, r6
 8022a1e:	f04f 0a00 	mov.w	sl, #0
 8022a22:	880a      	ldrh	r2, [r1, #0]
 8022a24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022a28:	fb09 b202 	mla	r2, r9, r2, fp
 8022a2c:	4492      	add	sl, r2
 8022a2e:	b2a4      	uxth	r4, r4
 8022a30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022a34:	f84e 4b04 	str.w	r4, [lr], #4
 8022a38:	f851 4b04 	ldr.w	r4, [r1], #4
 8022a3c:	f8be 2000 	ldrh.w	r2, [lr]
 8022a40:	0c24      	lsrs	r4, r4, #16
 8022a42:	fb09 2404 	mla	r4, r9, r4, r2
 8022a46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022a4a:	458c      	cmp	ip, r1
 8022a4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8022a50:	d8e7      	bhi.n	8022a22 <__multiply+0xfe>
 8022a52:	9a01      	ldr	r2, [sp, #4]
 8022a54:	50b4      	str	r4, [r6, r2]
 8022a56:	3604      	adds	r6, #4
 8022a58:	e7a3      	b.n	80229a2 <__multiply+0x7e>
 8022a5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d1a5      	bne.n	80229ae <__multiply+0x8a>
 8022a62:	3f01      	subs	r7, #1
 8022a64:	e7a1      	b.n	80229aa <__multiply+0x86>
 8022a66:	bf00      	nop
 8022a68:	08027e1e 	.word	0x08027e1e
 8022a6c:	08027e90 	.word	0x08027e90

08022a70 <__pow5mult>:
 8022a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a74:	4615      	mov	r5, r2
 8022a76:	f012 0203 	ands.w	r2, r2, #3
 8022a7a:	4606      	mov	r6, r0
 8022a7c:	460f      	mov	r7, r1
 8022a7e:	d007      	beq.n	8022a90 <__pow5mult+0x20>
 8022a80:	4c25      	ldr	r4, [pc, #148]	; (8022b18 <__pow5mult+0xa8>)
 8022a82:	3a01      	subs	r2, #1
 8022a84:	2300      	movs	r3, #0
 8022a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022a8a:	f7ff fe9b 	bl	80227c4 <__multadd>
 8022a8e:	4607      	mov	r7, r0
 8022a90:	10ad      	asrs	r5, r5, #2
 8022a92:	d03d      	beq.n	8022b10 <__pow5mult+0xa0>
 8022a94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022a96:	b97c      	cbnz	r4, 8022ab8 <__pow5mult+0x48>
 8022a98:	2010      	movs	r0, #16
 8022a9a:	f7ff fe29 	bl	80226f0 <malloc>
 8022a9e:	4602      	mov	r2, r0
 8022aa0:	6270      	str	r0, [r6, #36]	; 0x24
 8022aa2:	b928      	cbnz	r0, 8022ab0 <__pow5mult+0x40>
 8022aa4:	4b1d      	ldr	r3, [pc, #116]	; (8022b1c <__pow5mult+0xac>)
 8022aa6:	481e      	ldr	r0, [pc, #120]	; (8022b20 <__pow5mult+0xb0>)
 8022aa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022aac:	f7fe fdbc 	bl	8021628 <__assert_func>
 8022ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022ab4:	6004      	str	r4, [r0, #0]
 8022ab6:	60c4      	str	r4, [r0, #12]
 8022ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022ac0:	b94c      	cbnz	r4, 8022ad6 <__pow5mult+0x66>
 8022ac2:	f240 2171 	movw	r1, #625	; 0x271
 8022ac6:	4630      	mov	r0, r6
 8022ac8:	f7ff ff16 	bl	80228f8 <__i2b>
 8022acc:	2300      	movs	r3, #0
 8022ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8022ad2:	4604      	mov	r4, r0
 8022ad4:	6003      	str	r3, [r0, #0]
 8022ad6:	f04f 0900 	mov.w	r9, #0
 8022ada:	07eb      	lsls	r3, r5, #31
 8022adc:	d50a      	bpl.n	8022af4 <__pow5mult+0x84>
 8022ade:	4639      	mov	r1, r7
 8022ae0:	4622      	mov	r2, r4
 8022ae2:	4630      	mov	r0, r6
 8022ae4:	f7ff ff1e 	bl	8022924 <__multiply>
 8022ae8:	4639      	mov	r1, r7
 8022aea:	4680      	mov	r8, r0
 8022aec:	4630      	mov	r0, r6
 8022aee:	f7ff fe47 	bl	8022780 <_Bfree>
 8022af2:	4647      	mov	r7, r8
 8022af4:	106d      	asrs	r5, r5, #1
 8022af6:	d00b      	beq.n	8022b10 <__pow5mult+0xa0>
 8022af8:	6820      	ldr	r0, [r4, #0]
 8022afa:	b938      	cbnz	r0, 8022b0c <__pow5mult+0x9c>
 8022afc:	4622      	mov	r2, r4
 8022afe:	4621      	mov	r1, r4
 8022b00:	4630      	mov	r0, r6
 8022b02:	f7ff ff0f 	bl	8022924 <__multiply>
 8022b06:	6020      	str	r0, [r4, #0]
 8022b08:	f8c0 9000 	str.w	r9, [r0]
 8022b0c:	4604      	mov	r4, r0
 8022b0e:	e7e4      	b.n	8022ada <__pow5mult+0x6a>
 8022b10:	4638      	mov	r0, r7
 8022b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b16:	bf00      	nop
 8022b18:	08027fe0 	.word	0x08027fe0
 8022b1c:	08027d00 	.word	0x08027d00
 8022b20:	08027e90 	.word	0x08027e90

08022b24 <__lshift>:
 8022b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b28:	460c      	mov	r4, r1
 8022b2a:	6849      	ldr	r1, [r1, #4]
 8022b2c:	6923      	ldr	r3, [r4, #16]
 8022b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022b32:	68a3      	ldr	r3, [r4, #8]
 8022b34:	4607      	mov	r7, r0
 8022b36:	4691      	mov	r9, r2
 8022b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022b3c:	f108 0601 	add.w	r6, r8, #1
 8022b40:	42b3      	cmp	r3, r6
 8022b42:	db0b      	blt.n	8022b5c <__lshift+0x38>
 8022b44:	4638      	mov	r0, r7
 8022b46:	f7ff fddb 	bl	8022700 <_Balloc>
 8022b4a:	4605      	mov	r5, r0
 8022b4c:	b948      	cbnz	r0, 8022b62 <__lshift+0x3e>
 8022b4e:	4602      	mov	r2, r0
 8022b50:	4b28      	ldr	r3, [pc, #160]	; (8022bf4 <__lshift+0xd0>)
 8022b52:	4829      	ldr	r0, [pc, #164]	; (8022bf8 <__lshift+0xd4>)
 8022b54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022b58:	f7fe fd66 	bl	8021628 <__assert_func>
 8022b5c:	3101      	adds	r1, #1
 8022b5e:	005b      	lsls	r3, r3, #1
 8022b60:	e7ee      	b.n	8022b40 <__lshift+0x1c>
 8022b62:	2300      	movs	r3, #0
 8022b64:	f100 0114 	add.w	r1, r0, #20
 8022b68:	f100 0210 	add.w	r2, r0, #16
 8022b6c:	4618      	mov	r0, r3
 8022b6e:	4553      	cmp	r3, sl
 8022b70:	db33      	blt.n	8022bda <__lshift+0xb6>
 8022b72:	6920      	ldr	r0, [r4, #16]
 8022b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022b78:	f104 0314 	add.w	r3, r4, #20
 8022b7c:	f019 091f 	ands.w	r9, r9, #31
 8022b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022b88:	d02b      	beq.n	8022be2 <__lshift+0xbe>
 8022b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8022b8e:	468a      	mov	sl, r1
 8022b90:	2200      	movs	r2, #0
 8022b92:	6818      	ldr	r0, [r3, #0]
 8022b94:	fa00 f009 	lsl.w	r0, r0, r9
 8022b98:	4302      	orrs	r2, r0
 8022b9a:	f84a 2b04 	str.w	r2, [sl], #4
 8022b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022ba2:	459c      	cmp	ip, r3
 8022ba4:	fa22 f20e 	lsr.w	r2, r2, lr
 8022ba8:	d8f3      	bhi.n	8022b92 <__lshift+0x6e>
 8022baa:	ebac 0304 	sub.w	r3, ip, r4
 8022bae:	3b15      	subs	r3, #21
 8022bb0:	f023 0303 	bic.w	r3, r3, #3
 8022bb4:	3304      	adds	r3, #4
 8022bb6:	f104 0015 	add.w	r0, r4, #21
 8022bba:	4584      	cmp	ip, r0
 8022bbc:	bf38      	it	cc
 8022bbe:	2304      	movcc	r3, #4
 8022bc0:	50ca      	str	r2, [r1, r3]
 8022bc2:	b10a      	cbz	r2, 8022bc8 <__lshift+0xa4>
 8022bc4:	f108 0602 	add.w	r6, r8, #2
 8022bc8:	3e01      	subs	r6, #1
 8022bca:	4638      	mov	r0, r7
 8022bcc:	612e      	str	r6, [r5, #16]
 8022bce:	4621      	mov	r1, r4
 8022bd0:	f7ff fdd6 	bl	8022780 <_Bfree>
 8022bd4:	4628      	mov	r0, r5
 8022bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bda:	f842 0f04 	str.w	r0, [r2, #4]!
 8022bde:	3301      	adds	r3, #1
 8022be0:	e7c5      	b.n	8022b6e <__lshift+0x4a>
 8022be2:	3904      	subs	r1, #4
 8022be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8022be8:	f841 2f04 	str.w	r2, [r1, #4]!
 8022bec:	459c      	cmp	ip, r3
 8022bee:	d8f9      	bhi.n	8022be4 <__lshift+0xc0>
 8022bf0:	e7ea      	b.n	8022bc8 <__lshift+0xa4>
 8022bf2:	bf00      	nop
 8022bf4:	08027e1e 	.word	0x08027e1e
 8022bf8:	08027e90 	.word	0x08027e90

08022bfc <__mcmp>:
 8022bfc:	b530      	push	{r4, r5, lr}
 8022bfe:	6902      	ldr	r2, [r0, #16]
 8022c00:	690c      	ldr	r4, [r1, #16]
 8022c02:	1b12      	subs	r2, r2, r4
 8022c04:	d10e      	bne.n	8022c24 <__mcmp+0x28>
 8022c06:	f100 0314 	add.w	r3, r0, #20
 8022c0a:	3114      	adds	r1, #20
 8022c0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022c10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022c14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022c18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022c1c:	42a5      	cmp	r5, r4
 8022c1e:	d003      	beq.n	8022c28 <__mcmp+0x2c>
 8022c20:	d305      	bcc.n	8022c2e <__mcmp+0x32>
 8022c22:	2201      	movs	r2, #1
 8022c24:	4610      	mov	r0, r2
 8022c26:	bd30      	pop	{r4, r5, pc}
 8022c28:	4283      	cmp	r3, r0
 8022c2a:	d3f3      	bcc.n	8022c14 <__mcmp+0x18>
 8022c2c:	e7fa      	b.n	8022c24 <__mcmp+0x28>
 8022c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022c32:	e7f7      	b.n	8022c24 <__mcmp+0x28>

08022c34 <__mdiff>:
 8022c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c38:	460c      	mov	r4, r1
 8022c3a:	4606      	mov	r6, r0
 8022c3c:	4611      	mov	r1, r2
 8022c3e:	4620      	mov	r0, r4
 8022c40:	4617      	mov	r7, r2
 8022c42:	f7ff ffdb 	bl	8022bfc <__mcmp>
 8022c46:	1e05      	subs	r5, r0, #0
 8022c48:	d110      	bne.n	8022c6c <__mdiff+0x38>
 8022c4a:	4629      	mov	r1, r5
 8022c4c:	4630      	mov	r0, r6
 8022c4e:	f7ff fd57 	bl	8022700 <_Balloc>
 8022c52:	b930      	cbnz	r0, 8022c62 <__mdiff+0x2e>
 8022c54:	4b39      	ldr	r3, [pc, #228]	; (8022d3c <__mdiff+0x108>)
 8022c56:	4602      	mov	r2, r0
 8022c58:	f240 2132 	movw	r1, #562	; 0x232
 8022c5c:	4838      	ldr	r0, [pc, #224]	; (8022d40 <__mdiff+0x10c>)
 8022c5e:	f7fe fce3 	bl	8021628 <__assert_func>
 8022c62:	2301      	movs	r3, #1
 8022c64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c6c:	bfa4      	itt	ge
 8022c6e:	463b      	movge	r3, r7
 8022c70:	4627      	movge	r7, r4
 8022c72:	4630      	mov	r0, r6
 8022c74:	6879      	ldr	r1, [r7, #4]
 8022c76:	bfa6      	itte	ge
 8022c78:	461c      	movge	r4, r3
 8022c7a:	2500      	movge	r5, #0
 8022c7c:	2501      	movlt	r5, #1
 8022c7e:	f7ff fd3f 	bl	8022700 <_Balloc>
 8022c82:	b920      	cbnz	r0, 8022c8e <__mdiff+0x5a>
 8022c84:	4b2d      	ldr	r3, [pc, #180]	; (8022d3c <__mdiff+0x108>)
 8022c86:	4602      	mov	r2, r0
 8022c88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022c8c:	e7e6      	b.n	8022c5c <__mdiff+0x28>
 8022c8e:	693e      	ldr	r6, [r7, #16]
 8022c90:	60c5      	str	r5, [r0, #12]
 8022c92:	6925      	ldr	r5, [r4, #16]
 8022c94:	f107 0114 	add.w	r1, r7, #20
 8022c98:	f104 0914 	add.w	r9, r4, #20
 8022c9c:	f100 0e14 	add.w	lr, r0, #20
 8022ca0:	f107 0210 	add.w	r2, r7, #16
 8022ca4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022ca8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022cac:	46f2      	mov	sl, lr
 8022cae:	2700      	movs	r7, #0
 8022cb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8022cb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022cb8:	fa1f f883 	uxth.w	r8, r3
 8022cbc:	fa17 f78b 	uxtah	r7, r7, fp
 8022cc0:	0c1b      	lsrs	r3, r3, #16
 8022cc2:	eba7 0808 	sub.w	r8, r7, r8
 8022cc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022cca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022cce:	fa1f f888 	uxth.w	r8, r8
 8022cd2:	141f      	asrs	r7, r3, #16
 8022cd4:	454d      	cmp	r5, r9
 8022cd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022cda:	f84a 3b04 	str.w	r3, [sl], #4
 8022cde:	d8e7      	bhi.n	8022cb0 <__mdiff+0x7c>
 8022ce0:	1b2b      	subs	r3, r5, r4
 8022ce2:	3b15      	subs	r3, #21
 8022ce4:	f023 0303 	bic.w	r3, r3, #3
 8022ce8:	3304      	adds	r3, #4
 8022cea:	3415      	adds	r4, #21
 8022cec:	42a5      	cmp	r5, r4
 8022cee:	bf38      	it	cc
 8022cf0:	2304      	movcc	r3, #4
 8022cf2:	4419      	add	r1, r3
 8022cf4:	4473      	add	r3, lr
 8022cf6:	469e      	mov	lr, r3
 8022cf8:	460d      	mov	r5, r1
 8022cfa:	4565      	cmp	r5, ip
 8022cfc:	d30e      	bcc.n	8022d1c <__mdiff+0xe8>
 8022cfe:	f10c 0203 	add.w	r2, ip, #3
 8022d02:	1a52      	subs	r2, r2, r1
 8022d04:	f022 0203 	bic.w	r2, r2, #3
 8022d08:	3903      	subs	r1, #3
 8022d0a:	458c      	cmp	ip, r1
 8022d0c:	bf38      	it	cc
 8022d0e:	2200      	movcc	r2, #0
 8022d10:	441a      	add	r2, r3
 8022d12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022d16:	b17b      	cbz	r3, 8022d38 <__mdiff+0x104>
 8022d18:	6106      	str	r6, [r0, #16]
 8022d1a:	e7a5      	b.n	8022c68 <__mdiff+0x34>
 8022d1c:	f855 8b04 	ldr.w	r8, [r5], #4
 8022d20:	fa17 f488 	uxtah	r4, r7, r8
 8022d24:	1422      	asrs	r2, r4, #16
 8022d26:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022d2a:	b2a4      	uxth	r4, r4
 8022d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022d30:	f84e 4b04 	str.w	r4, [lr], #4
 8022d34:	1417      	asrs	r7, r2, #16
 8022d36:	e7e0      	b.n	8022cfa <__mdiff+0xc6>
 8022d38:	3e01      	subs	r6, #1
 8022d3a:	e7ea      	b.n	8022d12 <__mdiff+0xde>
 8022d3c:	08027e1e 	.word	0x08027e1e
 8022d40:	08027e90 	.word	0x08027e90

08022d44 <__d2b>:
 8022d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022d48:	4689      	mov	r9, r1
 8022d4a:	2101      	movs	r1, #1
 8022d4c:	ec57 6b10 	vmov	r6, r7, d0
 8022d50:	4690      	mov	r8, r2
 8022d52:	f7ff fcd5 	bl	8022700 <_Balloc>
 8022d56:	4604      	mov	r4, r0
 8022d58:	b930      	cbnz	r0, 8022d68 <__d2b+0x24>
 8022d5a:	4602      	mov	r2, r0
 8022d5c:	4b25      	ldr	r3, [pc, #148]	; (8022df4 <__d2b+0xb0>)
 8022d5e:	4826      	ldr	r0, [pc, #152]	; (8022df8 <__d2b+0xb4>)
 8022d60:	f240 310a 	movw	r1, #778	; 0x30a
 8022d64:	f7fe fc60 	bl	8021628 <__assert_func>
 8022d68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022d6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022d70:	bb35      	cbnz	r5, 8022dc0 <__d2b+0x7c>
 8022d72:	2e00      	cmp	r6, #0
 8022d74:	9301      	str	r3, [sp, #4]
 8022d76:	d028      	beq.n	8022dca <__d2b+0x86>
 8022d78:	4668      	mov	r0, sp
 8022d7a:	9600      	str	r6, [sp, #0]
 8022d7c:	f7ff fd8c 	bl	8022898 <__lo0bits>
 8022d80:	9900      	ldr	r1, [sp, #0]
 8022d82:	b300      	cbz	r0, 8022dc6 <__d2b+0x82>
 8022d84:	9a01      	ldr	r2, [sp, #4]
 8022d86:	f1c0 0320 	rsb	r3, r0, #32
 8022d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8022d8e:	430b      	orrs	r3, r1
 8022d90:	40c2      	lsrs	r2, r0
 8022d92:	6163      	str	r3, [r4, #20]
 8022d94:	9201      	str	r2, [sp, #4]
 8022d96:	9b01      	ldr	r3, [sp, #4]
 8022d98:	61a3      	str	r3, [r4, #24]
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	bf14      	ite	ne
 8022d9e:	2202      	movne	r2, #2
 8022da0:	2201      	moveq	r2, #1
 8022da2:	6122      	str	r2, [r4, #16]
 8022da4:	b1d5      	cbz	r5, 8022ddc <__d2b+0x98>
 8022da6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022daa:	4405      	add	r5, r0
 8022dac:	f8c9 5000 	str.w	r5, [r9]
 8022db0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022db4:	f8c8 0000 	str.w	r0, [r8]
 8022db8:	4620      	mov	r0, r4
 8022dba:	b003      	add	sp, #12
 8022dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022dc4:	e7d5      	b.n	8022d72 <__d2b+0x2e>
 8022dc6:	6161      	str	r1, [r4, #20]
 8022dc8:	e7e5      	b.n	8022d96 <__d2b+0x52>
 8022dca:	a801      	add	r0, sp, #4
 8022dcc:	f7ff fd64 	bl	8022898 <__lo0bits>
 8022dd0:	9b01      	ldr	r3, [sp, #4]
 8022dd2:	6163      	str	r3, [r4, #20]
 8022dd4:	2201      	movs	r2, #1
 8022dd6:	6122      	str	r2, [r4, #16]
 8022dd8:	3020      	adds	r0, #32
 8022dda:	e7e3      	b.n	8022da4 <__d2b+0x60>
 8022ddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022de0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022de4:	f8c9 0000 	str.w	r0, [r9]
 8022de8:	6918      	ldr	r0, [r3, #16]
 8022dea:	f7ff fd35 	bl	8022858 <__hi0bits>
 8022dee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022df2:	e7df      	b.n	8022db4 <__d2b+0x70>
 8022df4:	08027e1e 	.word	0x08027e1e
 8022df8:	08027e90 	.word	0x08027e90

08022dfc <_calloc_r>:
 8022dfc:	b513      	push	{r0, r1, r4, lr}
 8022dfe:	434a      	muls	r2, r1
 8022e00:	4611      	mov	r1, r2
 8022e02:	9201      	str	r2, [sp, #4]
 8022e04:	f000 f85a 	bl	8022ebc <_malloc_r>
 8022e08:	4604      	mov	r4, r0
 8022e0a:	b118      	cbz	r0, 8022e14 <_calloc_r+0x18>
 8022e0c:	9a01      	ldr	r2, [sp, #4]
 8022e0e:	2100      	movs	r1, #0
 8022e10:	f7fd fdc2 	bl	8020998 <memset>
 8022e14:	4620      	mov	r0, r4
 8022e16:	b002      	add	sp, #8
 8022e18:	bd10      	pop	{r4, pc}
	...

08022e1c <_free_r>:
 8022e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022e1e:	2900      	cmp	r1, #0
 8022e20:	d048      	beq.n	8022eb4 <_free_r+0x98>
 8022e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022e26:	9001      	str	r0, [sp, #4]
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8022e2e:	bfb8      	it	lt
 8022e30:	18e4      	addlt	r4, r4, r3
 8022e32:	f000 fc0f 	bl	8023654 <__malloc_lock>
 8022e36:	4a20      	ldr	r2, [pc, #128]	; (8022eb8 <_free_r+0x9c>)
 8022e38:	9801      	ldr	r0, [sp, #4]
 8022e3a:	6813      	ldr	r3, [r2, #0]
 8022e3c:	4615      	mov	r5, r2
 8022e3e:	b933      	cbnz	r3, 8022e4e <_free_r+0x32>
 8022e40:	6063      	str	r3, [r4, #4]
 8022e42:	6014      	str	r4, [r2, #0]
 8022e44:	b003      	add	sp, #12
 8022e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022e4a:	f000 bc09 	b.w	8023660 <__malloc_unlock>
 8022e4e:	42a3      	cmp	r3, r4
 8022e50:	d90b      	bls.n	8022e6a <_free_r+0x4e>
 8022e52:	6821      	ldr	r1, [r4, #0]
 8022e54:	1862      	adds	r2, r4, r1
 8022e56:	4293      	cmp	r3, r2
 8022e58:	bf04      	itt	eq
 8022e5a:	681a      	ldreq	r2, [r3, #0]
 8022e5c:	685b      	ldreq	r3, [r3, #4]
 8022e5e:	6063      	str	r3, [r4, #4]
 8022e60:	bf04      	itt	eq
 8022e62:	1852      	addeq	r2, r2, r1
 8022e64:	6022      	streq	r2, [r4, #0]
 8022e66:	602c      	str	r4, [r5, #0]
 8022e68:	e7ec      	b.n	8022e44 <_free_r+0x28>
 8022e6a:	461a      	mov	r2, r3
 8022e6c:	685b      	ldr	r3, [r3, #4]
 8022e6e:	b10b      	cbz	r3, 8022e74 <_free_r+0x58>
 8022e70:	42a3      	cmp	r3, r4
 8022e72:	d9fa      	bls.n	8022e6a <_free_r+0x4e>
 8022e74:	6811      	ldr	r1, [r2, #0]
 8022e76:	1855      	adds	r5, r2, r1
 8022e78:	42a5      	cmp	r5, r4
 8022e7a:	d10b      	bne.n	8022e94 <_free_r+0x78>
 8022e7c:	6824      	ldr	r4, [r4, #0]
 8022e7e:	4421      	add	r1, r4
 8022e80:	1854      	adds	r4, r2, r1
 8022e82:	42a3      	cmp	r3, r4
 8022e84:	6011      	str	r1, [r2, #0]
 8022e86:	d1dd      	bne.n	8022e44 <_free_r+0x28>
 8022e88:	681c      	ldr	r4, [r3, #0]
 8022e8a:	685b      	ldr	r3, [r3, #4]
 8022e8c:	6053      	str	r3, [r2, #4]
 8022e8e:	4421      	add	r1, r4
 8022e90:	6011      	str	r1, [r2, #0]
 8022e92:	e7d7      	b.n	8022e44 <_free_r+0x28>
 8022e94:	d902      	bls.n	8022e9c <_free_r+0x80>
 8022e96:	230c      	movs	r3, #12
 8022e98:	6003      	str	r3, [r0, #0]
 8022e9a:	e7d3      	b.n	8022e44 <_free_r+0x28>
 8022e9c:	6825      	ldr	r5, [r4, #0]
 8022e9e:	1961      	adds	r1, r4, r5
 8022ea0:	428b      	cmp	r3, r1
 8022ea2:	bf04      	itt	eq
 8022ea4:	6819      	ldreq	r1, [r3, #0]
 8022ea6:	685b      	ldreq	r3, [r3, #4]
 8022ea8:	6063      	str	r3, [r4, #4]
 8022eaa:	bf04      	itt	eq
 8022eac:	1949      	addeq	r1, r1, r5
 8022eae:	6021      	streq	r1, [r4, #0]
 8022eb0:	6054      	str	r4, [r2, #4]
 8022eb2:	e7c7      	b.n	8022e44 <_free_r+0x28>
 8022eb4:	b003      	add	sp, #12
 8022eb6:	bd30      	pop	{r4, r5, pc}
 8022eb8:	2404546c 	.word	0x2404546c

08022ebc <_malloc_r>:
 8022ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ebe:	1ccd      	adds	r5, r1, #3
 8022ec0:	f025 0503 	bic.w	r5, r5, #3
 8022ec4:	3508      	adds	r5, #8
 8022ec6:	2d0c      	cmp	r5, #12
 8022ec8:	bf38      	it	cc
 8022eca:	250c      	movcc	r5, #12
 8022ecc:	2d00      	cmp	r5, #0
 8022ece:	4606      	mov	r6, r0
 8022ed0:	db01      	blt.n	8022ed6 <_malloc_r+0x1a>
 8022ed2:	42a9      	cmp	r1, r5
 8022ed4:	d903      	bls.n	8022ede <_malloc_r+0x22>
 8022ed6:	230c      	movs	r3, #12
 8022ed8:	6033      	str	r3, [r6, #0]
 8022eda:	2000      	movs	r0, #0
 8022edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ede:	f000 fbb9 	bl	8023654 <__malloc_lock>
 8022ee2:	4921      	ldr	r1, [pc, #132]	; (8022f68 <_malloc_r+0xac>)
 8022ee4:	680a      	ldr	r2, [r1, #0]
 8022ee6:	4614      	mov	r4, r2
 8022ee8:	b99c      	cbnz	r4, 8022f12 <_malloc_r+0x56>
 8022eea:	4f20      	ldr	r7, [pc, #128]	; (8022f6c <_malloc_r+0xb0>)
 8022eec:	683b      	ldr	r3, [r7, #0]
 8022eee:	b923      	cbnz	r3, 8022efa <_malloc_r+0x3e>
 8022ef0:	4621      	mov	r1, r4
 8022ef2:	4630      	mov	r0, r6
 8022ef4:	f000 faf2 	bl	80234dc <_sbrk_r>
 8022ef8:	6038      	str	r0, [r7, #0]
 8022efa:	4629      	mov	r1, r5
 8022efc:	4630      	mov	r0, r6
 8022efe:	f000 faed 	bl	80234dc <_sbrk_r>
 8022f02:	1c43      	adds	r3, r0, #1
 8022f04:	d123      	bne.n	8022f4e <_malloc_r+0x92>
 8022f06:	230c      	movs	r3, #12
 8022f08:	6033      	str	r3, [r6, #0]
 8022f0a:	4630      	mov	r0, r6
 8022f0c:	f000 fba8 	bl	8023660 <__malloc_unlock>
 8022f10:	e7e3      	b.n	8022eda <_malloc_r+0x1e>
 8022f12:	6823      	ldr	r3, [r4, #0]
 8022f14:	1b5b      	subs	r3, r3, r5
 8022f16:	d417      	bmi.n	8022f48 <_malloc_r+0x8c>
 8022f18:	2b0b      	cmp	r3, #11
 8022f1a:	d903      	bls.n	8022f24 <_malloc_r+0x68>
 8022f1c:	6023      	str	r3, [r4, #0]
 8022f1e:	441c      	add	r4, r3
 8022f20:	6025      	str	r5, [r4, #0]
 8022f22:	e004      	b.n	8022f2e <_malloc_r+0x72>
 8022f24:	6863      	ldr	r3, [r4, #4]
 8022f26:	42a2      	cmp	r2, r4
 8022f28:	bf0c      	ite	eq
 8022f2a:	600b      	streq	r3, [r1, #0]
 8022f2c:	6053      	strne	r3, [r2, #4]
 8022f2e:	4630      	mov	r0, r6
 8022f30:	f000 fb96 	bl	8023660 <__malloc_unlock>
 8022f34:	f104 000b 	add.w	r0, r4, #11
 8022f38:	1d23      	adds	r3, r4, #4
 8022f3a:	f020 0007 	bic.w	r0, r0, #7
 8022f3e:	1ac2      	subs	r2, r0, r3
 8022f40:	d0cc      	beq.n	8022edc <_malloc_r+0x20>
 8022f42:	1a1b      	subs	r3, r3, r0
 8022f44:	50a3      	str	r3, [r4, r2]
 8022f46:	e7c9      	b.n	8022edc <_malloc_r+0x20>
 8022f48:	4622      	mov	r2, r4
 8022f4a:	6864      	ldr	r4, [r4, #4]
 8022f4c:	e7cc      	b.n	8022ee8 <_malloc_r+0x2c>
 8022f4e:	1cc4      	adds	r4, r0, #3
 8022f50:	f024 0403 	bic.w	r4, r4, #3
 8022f54:	42a0      	cmp	r0, r4
 8022f56:	d0e3      	beq.n	8022f20 <_malloc_r+0x64>
 8022f58:	1a21      	subs	r1, r4, r0
 8022f5a:	4630      	mov	r0, r6
 8022f5c:	f000 fabe 	bl	80234dc <_sbrk_r>
 8022f60:	3001      	adds	r0, #1
 8022f62:	d1dd      	bne.n	8022f20 <_malloc_r+0x64>
 8022f64:	e7cf      	b.n	8022f06 <_malloc_r+0x4a>
 8022f66:	bf00      	nop
 8022f68:	2404546c 	.word	0x2404546c
 8022f6c:	24045470 	.word	0x24045470

08022f70 <__ssputs_r>:
 8022f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f74:	688e      	ldr	r6, [r1, #8]
 8022f76:	429e      	cmp	r6, r3
 8022f78:	4682      	mov	sl, r0
 8022f7a:	460c      	mov	r4, r1
 8022f7c:	4690      	mov	r8, r2
 8022f7e:	461f      	mov	r7, r3
 8022f80:	d838      	bhi.n	8022ff4 <__ssputs_r+0x84>
 8022f82:	898a      	ldrh	r2, [r1, #12]
 8022f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022f88:	d032      	beq.n	8022ff0 <__ssputs_r+0x80>
 8022f8a:	6825      	ldr	r5, [r4, #0]
 8022f8c:	6909      	ldr	r1, [r1, #16]
 8022f8e:	eba5 0901 	sub.w	r9, r5, r1
 8022f92:	6965      	ldr	r5, [r4, #20]
 8022f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022f9c:	3301      	adds	r3, #1
 8022f9e:	444b      	add	r3, r9
 8022fa0:	106d      	asrs	r5, r5, #1
 8022fa2:	429d      	cmp	r5, r3
 8022fa4:	bf38      	it	cc
 8022fa6:	461d      	movcc	r5, r3
 8022fa8:	0553      	lsls	r3, r2, #21
 8022faa:	d531      	bpl.n	8023010 <__ssputs_r+0xa0>
 8022fac:	4629      	mov	r1, r5
 8022fae:	f7ff ff85 	bl	8022ebc <_malloc_r>
 8022fb2:	4606      	mov	r6, r0
 8022fb4:	b950      	cbnz	r0, 8022fcc <__ssputs_r+0x5c>
 8022fb6:	230c      	movs	r3, #12
 8022fb8:	f8ca 3000 	str.w	r3, [sl]
 8022fbc:	89a3      	ldrh	r3, [r4, #12]
 8022fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fc2:	81a3      	strh	r3, [r4, #12]
 8022fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fcc:	6921      	ldr	r1, [r4, #16]
 8022fce:	464a      	mov	r2, r9
 8022fd0:	f7fd fcba 	bl	8020948 <memcpy>
 8022fd4:	89a3      	ldrh	r3, [r4, #12]
 8022fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022fde:	81a3      	strh	r3, [r4, #12]
 8022fe0:	6126      	str	r6, [r4, #16]
 8022fe2:	6165      	str	r5, [r4, #20]
 8022fe4:	444e      	add	r6, r9
 8022fe6:	eba5 0509 	sub.w	r5, r5, r9
 8022fea:	6026      	str	r6, [r4, #0]
 8022fec:	60a5      	str	r5, [r4, #8]
 8022fee:	463e      	mov	r6, r7
 8022ff0:	42be      	cmp	r6, r7
 8022ff2:	d900      	bls.n	8022ff6 <__ssputs_r+0x86>
 8022ff4:	463e      	mov	r6, r7
 8022ff6:	4632      	mov	r2, r6
 8022ff8:	6820      	ldr	r0, [r4, #0]
 8022ffa:	4641      	mov	r1, r8
 8022ffc:	f7fd fcb2 	bl	8020964 <memmove>
 8023000:	68a3      	ldr	r3, [r4, #8]
 8023002:	6822      	ldr	r2, [r4, #0]
 8023004:	1b9b      	subs	r3, r3, r6
 8023006:	4432      	add	r2, r6
 8023008:	60a3      	str	r3, [r4, #8]
 802300a:	6022      	str	r2, [r4, #0]
 802300c:	2000      	movs	r0, #0
 802300e:	e7db      	b.n	8022fc8 <__ssputs_r+0x58>
 8023010:	462a      	mov	r2, r5
 8023012:	f000 fb2b 	bl	802366c <_realloc_r>
 8023016:	4606      	mov	r6, r0
 8023018:	2800      	cmp	r0, #0
 802301a:	d1e1      	bne.n	8022fe0 <__ssputs_r+0x70>
 802301c:	6921      	ldr	r1, [r4, #16]
 802301e:	4650      	mov	r0, sl
 8023020:	f7ff fefc 	bl	8022e1c <_free_r>
 8023024:	e7c7      	b.n	8022fb6 <__ssputs_r+0x46>
	...

08023028 <_svfiprintf_r>:
 8023028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802302c:	4698      	mov	r8, r3
 802302e:	898b      	ldrh	r3, [r1, #12]
 8023030:	061b      	lsls	r3, r3, #24
 8023032:	b09d      	sub	sp, #116	; 0x74
 8023034:	4607      	mov	r7, r0
 8023036:	460d      	mov	r5, r1
 8023038:	4614      	mov	r4, r2
 802303a:	d50e      	bpl.n	802305a <_svfiprintf_r+0x32>
 802303c:	690b      	ldr	r3, [r1, #16]
 802303e:	b963      	cbnz	r3, 802305a <_svfiprintf_r+0x32>
 8023040:	2140      	movs	r1, #64	; 0x40
 8023042:	f7ff ff3b 	bl	8022ebc <_malloc_r>
 8023046:	6028      	str	r0, [r5, #0]
 8023048:	6128      	str	r0, [r5, #16]
 802304a:	b920      	cbnz	r0, 8023056 <_svfiprintf_r+0x2e>
 802304c:	230c      	movs	r3, #12
 802304e:	603b      	str	r3, [r7, #0]
 8023050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023054:	e0d1      	b.n	80231fa <_svfiprintf_r+0x1d2>
 8023056:	2340      	movs	r3, #64	; 0x40
 8023058:	616b      	str	r3, [r5, #20]
 802305a:	2300      	movs	r3, #0
 802305c:	9309      	str	r3, [sp, #36]	; 0x24
 802305e:	2320      	movs	r3, #32
 8023060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023064:	f8cd 800c 	str.w	r8, [sp, #12]
 8023068:	2330      	movs	r3, #48	; 0x30
 802306a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023214 <_svfiprintf_r+0x1ec>
 802306e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023072:	f04f 0901 	mov.w	r9, #1
 8023076:	4623      	mov	r3, r4
 8023078:	469a      	mov	sl, r3
 802307a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802307e:	b10a      	cbz	r2, 8023084 <_svfiprintf_r+0x5c>
 8023080:	2a25      	cmp	r2, #37	; 0x25
 8023082:	d1f9      	bne.n	8023078 <_svfiprintf_r+0x50>
 8023084:	ebba 0b04 	subs.w	fp, sl, r4
 8023088:	d00b      	beq.n	80230a2 <_svfiprintf_r+0x7a>
 802308a:	465b      	mov	r3, fp
 802308c:	4622      	mov	r2, r4
 802308e:	4629      	mov	r1, r5
 8023090:	4638      	mov	r0, r7
 8023092:	f7ff ff6d 	bl	8022f70 <__ssputs_r>
 8023096:	3001      	adds	r0, #1
 8023098:	f000 80aa 	beq.w	80231f0 <_svfiprintf_r+0x1c8>
 802309c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802309e:	445a      	add	r2, fp
 80230a0:	9209      	str	r2, [sp, #36]	; 0x24
 80230a2:	f89a 3000 	ldrb.w	r3, [sl]
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	f000 80a2 	beq.w	80231f0 <_svfiprintf_r+0x1c8>
 80230ac:	2300      	movs	r3, #0
 80230ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80230b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80230b6:	f10a 0a01 	add.w	sl, sl, #1
 80230ba:	9304      	str	r3, [sp, #16]
 80230bc:	9307      	str	r3, [sp, #28]
 80230be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80230c2:	931a      	str	r3, [sp, #104]	; 0x68
 80230c4:	4654      	mov	r4, sl
 80230c6:	2205      	movs	r2, #5
 80230c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230cc:	4851      	ldr	r0, [pc, #324]	; (8023214 <_svfiprintf_r+0x1ec>)
 80230ce:	f7dd f907 	bl	80002e0 <memchr>
 80230d2:	9a04      	ldr	r2, [sp, #16]
 80230d4:	b9d8      	cbnz	r0, 802310e <_svfiprintf_r+0xe6>
 80230d6:	06d0      	lsls	r0, r2, #27
 80230d8:	bf44      	itt	mi
 80230da:	2320      	movmi	r3, #32
 80230dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230e0:	0711      	lsls	r1, r2, #28
 80230e2:	bf44      	itt	mi
 80230e4:	232b      	movmi	r3, #43	; 0x2b
 80230e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230ea:	f89a 3000 	ldrb.w	r3, [sl]
 80230ee:	2b2a      	cmp	r3, #42	; 0x2a
 80230f0:	d015      	beq.n	802311e <_svfiprintf_r+0xf6>
 80230f2:	9a07      	ldr	r2, [sp, #28]
 80230f4:	4654      	mov	r4, sl
 80230f6:	2000      	movs	r0, #0
 80230f8:	f04f 0c0a 	mov.w	ip, #10
 80230fc:	4621      	mov	r1, r4
 80230fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023102:	3b30      	subs	r3, #48	; 0x30
 8023104:	2b09      	cmp	r3, #9
 8023106:	d94e      	bls.n	80231a6 <_svfiprintf_r+0x17e>
 8023108:	b1b0      	cbz	r0, 8023138 <_svfiprintf_r+0x110>
 802310a:	9207      	str	r2, [sp, #28]
 802310c:	e014      	b.n	8023138 <_svfiprintf_r+0x110>
 802310e:	eba0 0308 	sub.w	r3, r0, r8
 8023112:	fa09 f303 	lsl.w	r3, r9, r3
 8023116:	4313      	orrs	r3, r2
 8023118:	9304      	str	r3, [sp, #16]
 802311a:	46a2      	mov	sl, r4
 802311c:	e7d2      	b.n	80230c4 <_svfiprintf_r+0x9c>
 802311e:	9b03      	ldr	r3, [sp, #12]
 8023120:	1d19      	adds	r1, r3, #4
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	9103      	str	r1, [sp, #12]
 8023126:	2b00      	cmp	r3, #0
 8023128:	bfbb      	ittet	lt
 802312a:	425b      	neglt	r3, r3
 802312c:	f042 0202 	orrlt.w	r2, r2, #2
 8023130:	9307      	strge	r3, [sp, #28]
 8023132:	9307      	strlt	r3, [sp, #28]
 8023134:	bfb8      	it	lt
 8023136:	9204      	strlt	r2, [sp, #16]
 8023138:	7823      	ldrb	r3, [r4, #0]
 802313a:	2b2e      	cmp	r3, #46	; 0x2e
 802313c:	d10c      	bne.n	8023158 <_svfiprintf_r+0x130>
 802313e:	7863      	ldrb	r3, [r4, #1]
 8023140:	2b2a      	cmp	r3, #42	; 0x2a
 8023142:	d135      	bne.n	80231b0 <_svfiprintf_r+0x188>
 8023144:	9b03      	ldr	r3, [sp, #12]
 8023146:	1d1a      	adds	r2, r3, #4
 8023148:	681b      	ldr	r3, [r3, #0]
 802314a:	9203      	str	r2, [sp, #12]
 802314c:	2b00      	cmp	r3, #0
 802314e:	bfb8      	it	lt
 8023150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023154:	3402      	adds	r4, #2
 8023156:	9305      	str	r3, [sp, #20]
 8023158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023224 <_svfiprintf_r+0x1fc>
 802315c:	7821      	ldrb	r1, [r4, #0]
 802315e:	2203      	movs	r2, #3
 8023160:	4650      	mov	r0, sl
 8023162:	f7dd f8bd 	bl	80002e0 <memchr>
 8023166:	b140      	cbz	r0, 802317a <_svfiprintf_r+0x152>
 8023168:	2340      	movs	r3, #64	; 0x40
 802316a:	eba0 000a 	sub.w	r0, r0, sl
 802316e:	fa03 f000 	lsl.w	r0, r3, r0
 8023172:	9b04      	ldr	r3, [sp, #16]
 8023174:	4303      	orrs	r3, r0
 8023176:	3401      	adds	r4, #1
 8023178:	9304      	str	r3, [sp, #16]
 802317a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802317e:	4826      	ldr	r0, [pc, #152]	; (8023218 <_svfiprintf_r+0x1f0>)
 8023180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023184:	2206      	movs	r2, #6
 8023186:	f7dd f8ab 	bl	80002e0 <memchr>
 802318a:	2800      	cmp	r0, #0
 802318c:	d038      	beq.n	8023200 <_svfiprintf_r+0x1d8>
 802318e:	4b23      	ldr	r3, [pc, #140]	; (802321c <_svfiprintf_r+0x1f4>)
 8023190:	bb1b      	cbnz	r3, 80231da <_svfiprintf_r+0x1b2>
 8023192:	9b03      	ldr	r3, [sp, #12]
 8023194:	3307      	adds	r3, #7
 8023196:	f023 0307 	bic.w	r3, r3, #7
 802319a:	3308      	adds	r3, #8
 802319c:	9303      	str	r3, [sp, #12]
 802319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231a0:	4433      	add	r3, r6
 80231a2:	9309      	str	r3, [sp, #36]	; 0x24
 80231a4:	e767      	b.n	8023076 <_svfiprintf_r+0x4e>
 80231a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80231aa:	460c      	mov	r4, r1
 80231ac:	2001      	movs	r0, #1
 80231ae:	e7a5      	b.n	80230fc <_svfiprintf_r+0xd4>
 80231b0:	2300      	movs	r3, #0
 80231b2:	3401      	adds	r4, #1
 80231b4:	9305      	str	r3, [sp, #20]
 80231b6:	4619      	mov	r1, r3
 80231b8:	f04f 0c0a 	mov.w	ip, #10
 80231bc:	4620      	mov	r0, r4
 80231be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80231c2:	3a30      	subs	r2, #48	; 0x30
 80231c4:	2a09      	cmp	r2, #9
 80231c6:	d903      	bls.n	80231d0 <_svfiprintf_r+0x1a8>
 80231c8:	2b00      	cmp	r3, #0
 80231ca:	d0c5      	beq.n	8023158 <_svfiprintf_r+0x130>
 80231cc:	9105      	str	r1, [sp, #20]
 80231ce:	e7c3      	b.n	8023158 <_svfiprintf_r+0x130>
 80231d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80231d4:	4604      	mov	r4, r0
 80231d6:	2301      	movs	r3, #1
 80231d8:	e7f0      	b.n	80231bc <_svfiprintf_r+0x194>
 80231da:	ab03      	add	r3, sp, #12
 80231dc:	9300      	str	r3, [sp, #0]
 80231de:	462a      	mov	r2, r5
 80231e0:	4b0f      	ldr	r3, [pc, #60]	; (8023220 <_svfiprintf_r+0x1f8>)
 80231e2:	a904      	add	r1, sp, #16
 80231e4:	4638      	mov	r0, r7
 80231e6:	f7fd fc6f 	bl	8020ac8 <_printf_float>
 80231ea:	1c42      	adds	r2, r0, #1
 80231ec:	4606      	mov	r6, r0
 80231ee:	d1d6      	bne.n	802319e <_svfiprintf_r+0x176>
 80231f0:	89ab      	ldrh	r3, [r5, #12]
 80231f2:	065b      	lsls	r3, r3, #25
 80231f4:	f53f af2c 	bmi.w	8023050 <_svfiprintf_r+0x28>
 80231f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80231fa:	b01d      	add	sp, #116	; 0x74
 80231fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023200:	ab03      	add	r3, sp, #12
 8023202:	9300      	str	r3, [sp, #0]
 8023204:	462a      	mov	r2, r5
 8023206:	4b06      	ldr	r3, [pc, #24]	; (8023220 <_svfiprintf_r+0x1f8>)
 8023208:	a904      	add	r1, sp, #16
 802320a:	4638      	mov	r0, r7
 802320c:	f7fd fee8 	bl	8020fe0 <_printf_i>
 8023210:	e7eb      	b.n	80231ea <_svfiprintf_r+0x1c2>
 8023212:	bf00      	nop
 8023214:	08027fec 	.word	0x08027fec
 8023218:	08027ff6 	.word	0x08027ff6
 802321c:	08020ac9 	.word	0x08020ac9
 8023220:	08022f71 	.word	0x08022f71
 8023224:	08027ff2 	.word	0x08027ff2

08023228 <__sfputc_r>:
 8023228:	6893      	ldr	r3, [r2, #8]
 802322a:	3b01      	subs	r3, #1
 802322c:	2b00      	cmp	r3, #0
 802322e:	b410      	push	{r4}
 8023230:	6093      	str	r3, [r2, #8]
 8023232:	da08      	bge.n	8023246 <__sfputc_r+0x1e>
 8023234:	6994      	ldr	r4, [r2, #24]
 8023236:	42a3      	cmp	r3, r4
 8023238:	db01      	blt.n	802323e <__sfputc_r+0x16>
 802323a:	290a      	cmp	r1, #10
 802323c:	d103      	bne.n	8023246 <__sfputc_r+0x1e>
 802323e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023242:	f7fe b8cf 	b.w	80213e4 <__swbuf_r>
 8023246:	6813      	ldr	r3, [r2, #0]
 8023248:	1c58      	adds	r0, r3, #1
 802324a:	6010      	str	r0, [r2, #0]
 802324c:	7019      	strb	r1, [r3, #0]
 802324e:	4608      	mov	r0, r1
 8023250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023254:	4770      	bx	lr

08023256 <__sfputs_r>:
 8023256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023258:	4606      	mov	r6, r0
 802325a:	460f      	mov	r7, r1
 802325c:	4614      	mov	r4, r2
 802325e:	18d5      	adds	r5, r2, r3
 8023260:	42ac      	cmp	r4, r5
 8023262:	d101      	bne.n	8023268 <__sfputs_r+0x12>
 8023264:	2000      	movs	r0, #0
 8023266:	e007      	b.n	8023278 <__sfputs_r+0x22>
 8023268:	f814 1b01 	ldrb.w	r1, [r4], #1
 802326c:	463a      	mov	r2, r7
 802326e:	4630      	mov	r0, r6
 8023270:	f7ff ffda 	bl	8023228 <__sfputc_r>
 8023274:	1c43      	adds	r3, r0, #1
 8023276:	d1f3      	bne.n	8023260 <__sfputs_r+0xa>
 8023278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802327c <_vfiprintf_r>:
 802327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023280:	460d      	mov	r5, r1
 8023282:	b09d      	sub	sp, #116	; 0x74
 8023284:	4614      	mov	r4, r2
 8023286:	4698      	mov	r8, r3
 8023288:	4606      	mov	r6, r0
 802328a:	b118      	cbz	r0, 8023294 <_vfiprintf_r+0x18>
 802328c:	6983      	ldr	r3, [r0, #24]
 802328e:	b90b      	cbnz	r3, 8023294 <_vfiprintf_r+0x18>
 8023290:	f7ff f912 	bl	80224b8 <__sinit>
 8023294:	4b89      	ldr	r3, [pc, #548]	; (80234bc <_vfiprintf_r+0x240>)
 8023296:	429d      	cmp	r5, r3
 8023298:	d11b      	bne.n	80232d2 <_vfiprintf_r+0x56>
 802329a:	6875      	ldr	r5, [r6, #4]
 802329c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802329e:	07d9      	lsls	r1, r3, #31
 80232a0:	d405      	bmi.n	80232ae <_vfiprintf_r+0x32>
 80232a2:	89ab      	ldrh	r3, [r5, #12]
 80232a4:	059a      	lsls	r2, r3, #22
 80232a6:	d402      	bmi.n	80232ae <_vfiprintf_r+0x32>
 80232a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232aa:	f7ff f9ba 	bl	8022622 <__retarget_lock_acquire_recursive>
 80232ae:	89ab      	ldrh	r3, [r5, #12]
 80232b0:	071b      	lsls	r3, r3, #28
 80232b2:	d501      	bpl.n	80232b8 <_vfiprintf_r+0x3c>
 80232b4:	692b      	ldr	r3, [r5, #16]
 80232b6:	b9eb      	cbnz	r3, 80232f4 <_vfiprintf_r+0x78>
 80232b8:	4629      	mov	r1, r5
 80232ba:	4630      	mov	r0, r6
 80232bc:	f7fe f8e4 	bl	8021488 <__swsetup_r>
 80232c0:	b1c0      	cbz	r0, 80232f4 <_vfiprintf_r+0x78>
 80232c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232c4:	07dc      	lsls	r4, r3, #31
 80232c6:	d50e      	bpl.n	80232e6 <_vfiprintf_r+0x6a>
 80232c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80232cc:	b01d      	add	sp, #116	; 0x74
 80232ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232d2:	4b7b      	ldr	r3, [pc, #492]	; (80234c0 <_vfiprintf_r+0x244>)
 80232d4:	429d      	cmp	r5, r3
 80232d6:	d101      	bne.n	80232dc <_vfiprintf_r+0x60>
 80232d8:	68b5      	ldr	r5, [r6, #8]
 80232da:	e7df      	b.n	802329c <_vfiprintf_r+0x20>
 80232dc:	4b79      	ldr	r3, [pc, #484]	; (80234c4 <_vfiprintf_r+0x248>)
 80232de:	429d      	cmp	r5, r3
 80232e0:	bf08      	it	eq
 80232e2:	68f5      	ldreq	r5, [r6, #12]
 80232e4:	e7da      	b.n	802329c <_vfiprintf_r+0x20>
 80232e6:	89ab      	ldrh	r3, [r5, #12]
 80232e8:	0598      	lsls	r0, r3, #22
 80232ea:	d4ed      	bmi.n	80232c8 <_vfiprintf_r+0x4c>
 80232ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232ee:	f7ff f99a 	bl	8022626 <__retarget_lock_release_recursive>
 80232f2:	e7e9      	b.n	80232c8 <_vfiprintf_r+0x4c>
 80232f4:	2300      	movs	r3, #0
 80232f6:	9309      	str	r3, [sp, #36]	; 0x24
 80232f8:	2320      	movs	r3, #32
 80232fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8023302:	2330      	movs	r3, #48	; 0x30
 8023304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80234c8 <_vfiprintf_r+0x24c>
 8023308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802330c:	f04f 0901 	mov.w	r9, #1
 8023310:	4623      	mov	r3, r4
 8023312:	469a      	mov	sl, r3
 8023314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023318:	b10a      	cbz	r2, 802331e <_vfiprintf_r+0xa2>
 802331a:	2a25      	cmp	r2, #37	; 0x25
 802331c:	d1f9      	bne.n	8023312 <_vfiprintf_r+0x96>
 802331e:	ebba 0b04 	subs.w	fp, sl, r4
 8023322:	d00b      	beq.n	802333c <_vfiprintf_r+0xc0>
 8023324:	465b      	mov	r3, fp
 8023326:	4622      	mov	r2, r4
 8023328:	4629      	mov	r1, r5
 802332a:	4630      	mov	r0, r6
 802332c:	f7ff ff93 	bl	8023256 <__sfputs_r>
 8023330:	3001      	adds	r0, #1
 8023332:	f000 80aa 	beq.w	802348a <_vfiprintf_r+0x20e>
 8023336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023338:	445a      	add	r2, fp
 802333a:	9209      	str	r2, [sp, #36]	; 0x24
 802333c:	f89a 3000 	ldrb.w	r3, [sl]
 8023340:	2b00      	cmp	r3, #0
 8023342:	f000 80a2 	beq.w	802348a <_vfiprintf_r+0x20e>
 8023346:	2300      	movs	r3, #0
 8023348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802334c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023350:	f10a 0a01 	add.w	sl, sl, #1
 8023354:	9304      	str	r3, [sp, #16]
 8023356:	9307      	str	r3, [sp, #28]
 8023358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802335c:	931a      	str	r3, [sp, #104]	; 0x68
 802335e:	4654      	mov	r4, sl
 8023360:	2205      	movs	r2, #5
 8023362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023366:	4858      	ldr	r0, [pc, #352]	; (80234c8 <_vfiprintf_r+0x24c>)
 8023368:	f7dc ffba 	bl	80002e0 <memchr>
 802336c:	9a04      	ldr	r2, [sp, #16]
 802336e:	b9d8      	cbnz	r0, 80233a8 <_vfiprintf_r+0x12c>
 8023370:	06d1      	lsls	r1, r2, #27
 8023372:	bf44      	itt	mi
 8023374:	2320      	movmi	r3, #32
 8023376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802337a:	0713      	lsls	r3, r2, #28
 802337c:	bf44      	itt	mi
 802337e:	232b      	movmi	r3, #43	; 0x2b
 8023380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023384:	f89a 3000 	ldrb.w	r3, [sl]
 8023388:	2b2a      	cmp	r3, #42	; 0x2a
 802338a:	d015      	beq.n	80233b8 <_vfiprintf_r+0x13c>
 802338c:	9a07      	ldr	r2, [sp, #28]
 802338e:	4654      	mov	r4, sl
 8023390:	2000      	movs	r0, #0
 8023392:	f04f 0c0a 	mov.w	ip, #10
 8023396:	4621      	mov	r1, r4
 8023398:	f811 3b01 	ldrb.w	r3, [r1], #1
 802339c:	3b30      	subs	r3, #48	; 0x30
 802339e:	2b09      	cmp	r3, #9
 80233a0:	d94e      	bls.n	8023440 <_vfiprintf_r+0x1c4>
 80233a2:	b1b0      	cbz	r0, 80233d2 <_vfiprintf_r+0x156>
 80233a4:	9207      	str	r2, [sp, #28]
 80233a6:	e014      	b.n	80233d2 <_vfiprintf_r+0x156>
 80233a8:	eba0 0308 	sub.w	r3, r0, r8
 80233ac:	fa09 f303 	lsl.w	r3, r9, r3
 80233b0:	4313      	orrs	r3, r2
 80233b2:	9304      	str	r3, [sp, #16]
 80233b4:	46a2      	mov	sl, r4
 80233b6:	e7d2      	b.n	802335e <_vfiprintf_r+0xe2>
 80233b8:	9b03      	ldr	r3, [sp, #12]
 80233ba:	1d19      	adds	r1, r3, #4
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	9103      	str	r1, [sp, #12]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	bfbb      	ittet	lt
 80233c4:	425b      	neglt	r3, r3
 80233c6:	f042 0202 	orrlt.w	r2, r2, #2
 80233ca:	9307      	strge	r3, [sp, #28]
 80233cc:	9307      	strlt	r3, [sp, #28]
 80233ce:	bfb8      	it	lt
 80233d0:	9204      	strlt	r2, [sp, #16]
 80233d2:	7823      	ldrb	r3, [r4, #0]
 80233d4:	2b2e      	cmp	r3, #46	; 0x2e
 80233d6:	d10c      	bne.n	80233f2 <_vfiprintf_r+0x176>
 80233d8:	7863      	ldrb	r3, [r4, #1]
 80233da:	2b2a      	cmp	r3, #42	; 0x2a
 80233dc:	d135      	bne.n	802344a <_vfiprintf_r+0x1ce>
 80233de:	9b03      	ldr	r3, [sp, #12]
 80233e0:	1d1a      	adds	r2, r3, #4
 80233e2:	681b      	ldr	r3, [r3, #0]
 80233e4:	9203      	str	r2, [sp, #12]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	bfb8      	it	lt
 80233ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80233ee:	3402      	adds	r4, #2
 80233f0:	9305      	str	r3, [sp, #20]
 80233f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80234d8 <_vfiprintf_r+0x25c>
 80233f6:	7821      	ldrb	r1, [r4, #0]
 80233f8:	2203      	movs	r2, #3
 80233fa:	4650      	mov	r0, sl
 80233fc:	f7dc ff70 	bl	80002e0 <memchr>
 8023400:	b140      	cbz	r0, 8023414 <_vfiprintf_r+0x198>
 8023402:	2340      	movs	r3, #64	; 0x40
 8023404:	eba0 000a 	sub.w	r0, r0, sl
 8023408:	fa03 f000 	lsl.w	r0, r3, r0
 802340c:	9b04      	ldr	r3, [sp, #16]
 802340e:	4303      	orrs	r3, r0
 8023410:	3401      	adds	r4, #1
 8023412:	9304      	str	r3, [sp, #16]
 8023414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023418:	482c      	ldr	r0, [pc, #176]	; (80234cc <_vfiprintf_r+0x250>)
 802341a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802341e:	2206      	movs	r2, #6
 8023420:	f7dc ff5e 	bl	80002e0 <memchr>
 8023424:	2800      	cmp	r0, #0
 8023426:	d03f      	beq.n	80234a8 <_vfiprintf_r+0x22c>
 8023428:	4b29      	ldr	r3, [pc, #164]	; (80234d0 <_vfiprintf_r+0x254>)
 802342a:	bb1b      	cbnz	r3, 8023474 <_vfiprintf_r+0x1f8>
 802342c:	9b03      	ldr	r3, [sp, #12]
 802342e:	3307      	adds	r3, #7
 8023430:	f023 0307 	bic.w	r3, r3, #7
 8023434:	3308      	adds	r3, #8
 8023436:	9303      	str	r3, [sp, #12]
 8023438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802343a:	443b      	add	r3, r7
 802343c:	9309      	str	r3, [sp, #36]	; 0x24
 802343e:	e767      	b.n	8023310 <_vfiprintf_r+0x94>
 8023440:	fb0c 3202 	mla	r2, ip, r2, r3
 8023444:	460c      	mov	r4, r1
 8023446:	2001      	movs	r0, #1
 8023448:	e7a5      	b.n	8023396 <_vfiprintf_r+0x11a>
 802344a:	2300      	movs	r3, #0
 802344c:	3401      	adds	r4, #1
 802344e:	9305      	str	r3, [sp, #20]
 8023450:	4619      	mov	r1, r3
 8023452:	f04f 0c0a 	mov.w	ip, #10
 8023456:	4620      	mov	r0, r4
 8023458:	f810 2b01 	ldrb.w	r2, [r0], #1
 802345c:	3a30      	subs	r2, #48	; 0x30
 802345e:	2a09      	cmp	r2, #9
 8023460:	d903      	bls.n	802346a <_vfiprintf_r+0x1ee>
 8023462:	2b00      	cmp	r3, #0
 8023464:	d0c5      	beq.n	80233f2 <_vfiprintf_r+0x176>
 8023466:	9105      	str	r1, [sp, #20]
 8023468:	e7c3      	b.n	80233f2 <_vfiprintf_r+0x176>
 802346a:	fb0c 2101 	mla	r1, ip, r1, r2
 802346e:	4604      	mov	r4, r0
 8023470:	2301      	movs	r3, #1
 8023472:	e7f0      	b.n	8023456 <_vfiprintf_r+0x1da>
 8023474:	ab03      	add	r3, sp, #12
 8023476:	9300      	str	r3, [sp, #0]
 8023478:	462a      	mov	r2, r5
 802347a:	4b16      	ldr	r3, [pc, #88]	; (80234d4 <_vfiprintf_r+0x258>)
 802347c:	a904      	add	r1, sp, #16
 802347e:	4630      	mov	r0, r6
 8023480:	f7fd fb22 	bl	8020ac8 <_printf_float>
 8023484:	4607      	mov	r7, r0
 8023486:	1c78      	adds	r0, r7, #1
 8023488:	d1d6      	bne.n	8023438 <_vfiprintf_r+0x1bc>
 802348a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802348c:	07d9      	lsls	r1, r3, #31
 802348e:	d405      	bmi.n	802349c <_vfiprintf_r+0x220>
 8023490:	89ab      	ldrh	r3, [r5, #12]
 8023492:	059a      	lsls	r2, r3, #22
 8023494:	d402      	bmi.n	802349c <_vfiprintf_r+0x220>
 8023496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023498:	f7ff f8c5 	bl	8022626 <__retarget_lock_release_recursive>
 802349c:	89ab      	ldrh	r3, [r5, #12]
 802349e:	065b      	lsls	r3, r3, #25
 80234a0:	f53f af12 	bmi.w	80232c8 <_vfiprintf_r+0x4c>
 80234a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234a6:	e711      	b.n	80232cc <_vfiprintf_r+0x50>
 80234a8:	ab03      	add	r3, sp, #12
 80234aa:	9300      	str	r3, [sp, #0]
 80234ac:	462a      	mov	r2, r5
 80234ae:	4b09      	ldr	r3, [pc, #36]	; (80234d4 <_vfiprintf_r+0x258>)
 80234b0:	a904      	add	r1, sp, #16
 80234b2:	4630      	mov	r0, r6
 80234b4:	f7fd fd94 	bl	8020fe0 <_printf_i>
 80234b8:	e7e4      	b.n	8023484 <_vfiprintf_r+0x208>
 80234ba:	bf00      	nop
 80234bc:	08027e50 	.word	0x08027e50
 80234c0:	08027e70 	.word	0x08027e70
 80234c4:	08027e30 	.word	0x08027e30
 80234c8:	08027fec 	.word	0x08027fec
 80234cc:	08027ff6 	.word	0x08027ff6
 80234d0:	08020ac9 	.word	0x08020ac9
 80234d4:	08023257 	.word	0x08023257
 80234d8:	08027ff2 	.word	0x08027ff2

080234dc <_sbrk_r>:
 80234dc:	b538      	push	{r3, r4, r5, lr}
 80234de:	4d06      	ldr	r5, [pc, #24]	; (80234f8 <_sbrk_r+0x1c>)
 80234e0:	2300      	movs	r3, #0
 80234e2:	4604      	mov	r4, r0
 80234e4:	4608      	mov	r0, r1
 80234e6:	602b      	str	r3, [r5, #0]
 80234e8:	f7dd ffb0 	bl	800144c <_sbrk>
 80234ec:	1c43      	adds	r3, r0, #1
 80234ee:	d102      	bne.n	80234f6 <_sbrk_r+0x1a>
 80234f0:	682b      	ldr	r3, [r5, #0]
 80234f2:	b103      	cbz	r3, 80234f6 <_sbrk_r+0x1a>
 80234f4:	6023      	str	r3, [r4, #0]
 80234f6:	bd38      	pop	{r3, r4, r5, pc}
 80234f8:	24048e80 	.word	0x24048e80

080234fc <__sread>:
 80234fc:	b510      	push	{r4, lr}
 80234fe:	460c      	mov	r4, r1
 8023500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023504:	f000 f8d8 	bl	80236b8 <_read_r>
 8023508:	2800      	cmp	r0, #0
 802350a:	bfab      	itete	ge
 802350c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802350e:	89a3      	ldrhlt	r3, [r4, #12]
 8023510:	181b      	addge	r3, r3, r0
 8023512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023516:	bfac      	ite	ge
 8023518:	6563      	strge	r3, [r4, #84]	; 0x54
 802351a:	81a3      	strhlt	r3, [r4, #12]
 802351c:	bd10      	pop	{r4, pc}

0802351e <__swrite>:
 802351e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023522:	461f      	mov	r7, r3
 8023524:	898b      	ldrh	r3, [r1, #12]
 8023526:	05db      	lsls	r3, r3, #23
 8023528:	4605      	mov	r5, r0
 802352a:	460c      	mov	r4, r1
 802352c:	4616      	mov	r6, r2
 802352e:	d505      	bpl.n	802353c <__swrite+0x1e>
 8023530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023534:	2302      	movs	r3, #2
 8023536:	2200      	movs	r2, #0
 8023538:	f000 f868 	bl	802360c <_lseek_r>
 802353c:	89a3      	ldrh	r3, [r4, #12]
 802353e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023546:	81a3      	strh	r3, [r4, #12]
 8023548:	4632      	mov	r2, r6
 802354a:	463b      	mov	r3, r7
 802354c:	4628      	mov	r0, r5
 802354e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023552:	f000 b817 	b.w	8023584 <_write_r>

08023556 <__sseek>:
 8023556:	b510      	push	{r4, lr}
 8023558:	460c      	mov	r4, r1
 802355a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802355e:	f000 f855 	bl	802360c <_lseek_r>
 8023562:	1c43      	adds	r3, r0, #1
 8023564:	89a3      	ldrh	r3, [r4, #12]
 8023566:	bf15      	itete	ne
 8023568:	6560      	strne	r0, [r4, #84]	; 0x54
 802356a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802356e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023572:	81a3      	strheq	r3, [r4, #12]
 8023574:	bf18      	it	ne
 8023576:	81a3      	strhne	r3, [r4, #12]
 8023578:	bd10      	pop	{r4, pc}

0802357a <__sclose>:
 802357a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802357e:	f000 b813 	b.w	80235a8 <_close_r>
	...

08023584 <_write_r>:
 8023584:	b538      	push	{r3, r4, r5, lr}
 8023586:	4d07      	ldr	r5, [pc, #28]	; (80235a4 <_write_r+0x20>)
 8023588:	4604      	mov	r4, r0
 802358a:	4608      	mov	r0, r1
 802358c:	4611      	mov	r1, r2
 802358e:	2200      	movs	r2, #0
 8023590:	602a      	str	r2, [r5, #0]
 8023592:	461a      	mov	r2, r3
 8023594:	f7dd ff09 	bl	80013aa <_write>
 8023598:	1c43      	adds	r3, r0, #1
 802359a:	d102      	bne.n	80235a2 <_write_r+0x1e>
 802359c:	682b      	ldr	r3, [r5, #0]
 802359e:	b103      	cbz	r3, 80235a2 <_write_r+0x1e>
 80235a0:	6023      	str	r3, [r4, #0]
 80235a2:	bd38      	pop	{r3, r4, r5, pc}
 80235a4:	24048e80 	.word	0x24048e80

080235a8 <_close_r>:
 80235a8:	b538      	push	{r3, r4, r5, lr}
 80235aa:	4d06      	ldr	r5, [pc, #24]	; (80235c4 <_close_r+0x1c>)
 80235ac:	2300      	movs	r3, #0
 80235ae:	4604      	mov	r4, r0
 80235b0:	4608      	mov	r0, r1
 80235b2:	602b      	str	r3, [r5, #0]
 80235b4:	f7dd ff15 	bl	80013e2 <_close>
 80235b8:	1c43      	adds	r3, r0, #1
 80235ba:	d102      	bne.n	80235c2 <_close_r+0x1a>
 80235bc:	682b      	ldr	r3, [r5, #0]
 80235be:	b103      	cbz	r3, 80235c2 <_close_r+0x1a>
 80235c0:	6023      	str	r3, [r4, #0]
 80235c2:	bd38      	pop	{r3, r4, r5, pc}
 80235c4:	24048e80 	.word	0x24048e80

080235c8 <_fstat_r>:
 80235c8:	b538      	push	{r3, r4, r5, lr}
 80235ca:	4d07      	ldr	r5, [pc, #28]	; (80235e8 <_fstat_r+0x20>)
 80235cc:	2300      	movs	r3, #0
 80235ce:	4604      	mov	r4, r0
 80235d0:	4608      	mov	r0, r1
 80235d2:	4611      	mov	r1, r2
 80235d4:	602b      	str	r3, [r5, #0]
 80235d6:	f7dd ff10 	bl	80013fa <_fstat>
 80235da:	1c43      	adds	r3, r0, #1
 80235dc:	d102      	bne.n	80235e4 <_fstat_r+0x1c>
 80235de:	682b      	ldr	r3, [r5, #0]
 80235e0:	b103      	cbz	r3, 80235e4 <_fstat_r+0x1c>
 80235e2:	6023      	str	r3, [r4, #0]
 80235e4:	bd38      	pop	{r3, r4, r5, pc}
 80235e6:	bf00      	nop
 80235e8:	24048e80 	.word	0x24048e80

080235ec <_isatty_r>:
 80235ec:	b538      	push	{r3, r4, r5, lr}
 80235ee:	4d06      	ldr	r5, [pc, #24]	; (8023608 <_isatty_r+0x1c>)
 80235f0:	2300      	movs	r3, #0
 80235f2:	4604      	mov	r4, r0
 80235f4:	4608      	mov	r0, r1
 80235f6:	602b      	str	r3, [r5, #0]
 80235f8:	f7dd ff0f 	bl	800141a <_isatty>
 80235fc:	1c43      	adds	r3, r0, #1
 80235fe:	d102      	bne.n	8023606 <_isatty_r+0x1a>
 8023600:	682b      	ldr	r3, [r5, #0]
 8023602:	b103      	cbz	r3, 8023606 <_isatty_r+0x1a>
 8023604:	6023      	str	r3, [r4, #0]
 8023606:	bd38      	pop	{r3, r4, r5, pc}
 8023608:	24048e80 	.word	0x24048e80

0802360c <_lseek_r>:
 802360c:	b538      	push	{r3, r4, r5, lr}
 802360e:	4d07      	ldr	r5, [pc, #28]	; (802362c <_lseek_r+0x20>)
 8023610:	4604      	mov	r4, r0
 8023612:	4608      	mov	r0, r1
 8023614:	4611      	mov	r1, r2
 8023616:	2200      	movs	r2, #0
 8023618:	602a      	str	r2, [r5, #0]
 802361a:	461a      	mov	r2, r3
 802361c:	f7dd ff08 	bl	8001430 <_lseek>
 8023620:	1c43      	adds	r3, r0, #1
 8023622:	d102      	bne.n	802362a <_lseek_r+0x1e>
 8023624:	682b      	ldr	r3, [r5, #0]
 8023626:	b103      	cbz	r3, 802362a <_lseek_r+0x1e>
 8023628:	6023      	str	r3, [r4, #0]
 802362a:	bd38      	pop	{r3, r4, r5, pc}
 802362c:	24048e80 	.word	0x24048e80

08023630 <__ascii_mbtowc>:
 8023630:	b082      	sub	sp, #8
 8023632:	b901      	cbnz	r1, 8023636 <__ascii_mbtowc+0x6>
 8023634:	a901      	add	r1, sp, #4
 8023636:	b142      	cbz	r2, 802364a <__ascii_mbtowc+0x1a>
 8023638:	b14b      	cbz	r3, 802364e <__ascii_mbtowc+0x1e>
 802363a:	7813      	ldrb	r3, [r2, #0]
 802363c:	600b      	str	r3, [r1, #0]
 802363e:	7812      	ldrb	r2, [r2, #0]
 8023640:	1e10      	subs	r0, r2, #0
 8023642:	bf18      	it	ne
 8023644:	2001      	movne	r0, #1
 8023646:	b002      	add	sp, #8
 8023648:	4770      	bx	lr
 802364a:	4610      	mov	r0, r2
 802364c:	e7fb      	b.n	8023646 <__ascii_mbtowc+0x16>
 802364e:	f06f 0001 	mvn.w	r0, #1
 8023652:	e7f8      	b.n	8023646 <__ascii_mbtowc+0x16>

08023654 <__malloc_lock>:
 8023654:	4801      	ldr	r0, [pc, #4]	; (802365c <__malloc_lock+0x8>)
 8023656:	f7fe bfe4 	b.w	8022622 <__retarget_lock_acquire_recursive>
 802365a:	bf00      	nop
 802365c:	24048eb0 	.word	0x24048eb0

08023660 <__malloc_unlock>:
 8023660:	4801      	ldr	r0, [pc, #4]	; (8023668 <__malloc_unlock+0x8>)
 8023662:	f7fe bfe0 	b.w	8022626 <__retarget_lock_release_recursive>
 8023666:	bf00      	nop
 8023668:	24048eb0 	.word	0x24048eb0

0802366c <_realloc_r>:
 802366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802366e:	4607      	mov	r7, r0
 8023670:	4614      	mov	r4, r2
 8023672:	460e      	mov	r6, r1
 8023674:	b921      	cbnz	r1, 8023680 <_realloc_r+0x14>
 8023676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802367a:	4611      	mov	r1, r2
 802367c:	f7ff bc1e 	b.w	8022ebc <_malloc_r>
 8023680:	b922      	cbnz	r2, 802368c <_realloc_r+0x20>
 8023682:	f7ff fbcb 	bl	8022e1c <_free_r>
 8023686:	4625      	mov	r5, r4
 8023688:	4628      	mov	r0, r5
 802368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802368c:	f000 f833 	bl	80236f6 <_malloc_usable_size_r>
 8023690:	42a0      	cmp	r0, r4
 8023692:	d20f      	bcs.n	80236b4 <_realloc_r+0x48>
 8023694:	4621      	mov	r1, r4
 8023696:	4638      	mov	r0, r7
 8023698:	f7ff fc10 	bl	8022ebc <_malloc_r>
 802369c:	4605      	mov	r5, r0
 802369e:	2800      	cmp	r0, #0
 80236a0:	d0f2      	beq.n	8023688 <_realloc_r+0x1c>
 80236a2:	4631      	mov	r1, r6
 80236a4:	4622      	mov	r2, r4
 80236a6:	f7fd f94f 	bl	8020948 <memcpy>
 80236aa:	4631      	mov	r1, r6
 80236ac:	4638      	mov	r0, r7
 80236ae:	f7ff fbb5 	bl	8022e1c <_free_r>
 80236b2:	e7e9      	b.n	8023688 <_realloc_r+0x1c>
 80236b4:	4635      	mov	r5, r6
 80236b6:	e7e7      	b.n	8023688 <_realloc_r+0x1c>

080236b8 <_read_r>:
 80236b8:	b538      	push	{r3, r4, r5, lr}
 80236ba:	4d07      	ldr	r5, [pc, #28]	; (80236d8 <_read_r+0x20>)
 80236bc:	4604      	mov	r4, r0
 80236be:	4608      	mov	r0, r1
 80236c0:	4611      	mov	r1, r2
 80236c2:	2200      	movs	r2, #0
 80236c4:	602a      	str	r2, [r5, #0]
 80236c6:	461a      	mov	r2, r3
 80236c8:	f7dd fe52 	bl	8001370 <_read>
 80236cc:	1c43      	adds	r3, r0, #1
 80236ce:	d102      	bne.n	80236d6 <_read_r+0x1e>
 80236d0:	682b      	ldr	r3, [r5, #0]
 80236d2:	b103      	cbz	r3, 80236d6 <_read_r+0x1e>
 80236d4:	6023      	str	r3, [r4, #0]
 80236d6:	bd38      	pop	{r3, r4, r5, pc}
 80236d8:	24048e80 	.word	0x24048e80

080236dc <__ascii_wctomb>:
 80236dc:	b149      	cbz	r1, 80236f2 <__ascii_wctomb+0x16>
 80236de:	2aff      	cmp	r2, #255	; 0xff
 80236e0:	bf85      	ittet	hi
 80236e2:	238a      	movhi	r3, #138	; 0x8a
 80236e4:	6003      	strhi	r3, [r0, #0]
 80236e6:	700a      	strbls	r2, [r1, #0]
 80236e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80236ec:	bf98      	it	ls
 80236ee:	2001      	movls	r0, #1
 80236f0:	4770      	bx	lr
 80236f2:	4608      	mov	r0, r1
 80236f4:	4770      	bx	lr

080236f6 <_malloc_usable_size_r>:
 80236f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236fa:	1f18      	subs	r0, r3, #4
 80236fc:	2b00      	cmp	r3, #0
 80236fe:	bfbc      	itt	lt
 8023700:	580b      	ldrlt	r3, [r1, r0]
 8023702:	18c0      	addlt	r0, r0, r3
 8023704:	4770      	bx	lr
	...

08023708 <_init>:
 8023708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802370a:	bf00      	nop
 802370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802370e:	bc08      	pop	{r3}
 8023710:	469e      	mov	lr, r3
 8023712:	4770      	bx	lr

08023714 <_fini>:
 8023714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023716:	bf00      	nop
 8023718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802371a:	bc08      	pop	{r3}
 802371c:	469e      	mov	lr, r3
 802371e:	4770      	bx	lr
